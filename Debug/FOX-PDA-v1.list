
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00018cf4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f0c  08018ec8  08018ec8  00028ec8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08019dd4  08019dd4  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  08019dd4  08019dd4  00029dd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08019ddc  08019ddc  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08019ddc  08019ddc  00029ddc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08019de0  08019de0  00029de0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08019de4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b70  200002fc  0801a0e0  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004e6c  0801a0e0  00034e6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034409  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007eaf  00000000  00000000  00064735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002848  00000000  00000000  0006c5e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000023a0  00000000  00000000  0006ee30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00039607  00000000  00000000  000711d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000467aa  00000000  00000000  000aa7d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00107d0b  00000000  00000000  000f0f81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f8c8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000b1b8  00000000  00000000  001f8cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08018eac 	.word	0x08018eac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	08018eac 	.word	0x08018eac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <AdventOfCode_init>:
		AdventOfCode_return_t(*aoc_day_21)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_22)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_23)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_24)(AdventOfCode_config_t),
		AdventOfCode_return_t(*aoc_day_25)(AdventOfCode_config_t))
{
 8000eec:	b480      	push	{r7}
 8000eee:	b085      	sub	sp, #20
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	60f8      	str	r0, [r7, #12]
 8000ef4:	60b9      	str	r1, [r7, #8]
 8000ef6:	607a      	str	r2, [r7, #4]
 8000ef8:	603b      	str	r3, [r7, #0]
	aoc->aoc_func_list[0] = aoc_day_01;
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	68ba      	ldr	r2, [r7, #8]
 8000efe:	601a      	str	r2, [r3, #0]
	aoc->aoc_func_list[1] = aoc_day_02;
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	687a      	ldr	r2, [r7, #4]
 8000f04:	605a      	str	r2, [r3, #4]
	aoc->aoc_func_list[2] = aoc_day_03;
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	683a      	ldr	r2, [r7, #0]
 8000f0a:	609a      	str	r2, [r3, #8]
	aoc->aoc_func_list[3] = aoc_day_04;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	60da      	str	r2, [r3, #12]
	aoc->aoc_func_list[4] = aoc_day_05;
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	69fa      	ldr	r2, [r7, #28]
 8000f16:	611a      	str	r2, [r3, #16]
	aoc->aoc_func_list[5] = aoc_day_06;
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	6a3a      	ldr	r2, [r7, #32]
 8000f1c:	615a      	str	r2, [r3, #20]
	aoc->aoc_func_list[6] = aoc_day_07;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f22:	619a      	str	r2, [r3, #24]
	aoc->aoc_func_list[7] = aoc_day_08;
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000f28:	61da      	str	r2, [r3, #28]
	aoc->aoc_func_list[8] = aoc_day_09;
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f2e:	621a      	str	r2, [r3, #32]
	aoc->aoc_func_list[9] = aoc_day_10;
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f34:	625a      	str	r2, [r3, #36]	; 0x24
	aoc->aoc_func_list[10] = aoc_day_11;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f3a:	629a      	str	r2, [r3, #40]	; 0x28
	aoc->aoc_func_list[11] = aoc_day_12;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000f40:	62da      	str	r2, [r3, #44]	; 0x2c
	aoc->aoc_func_list[12] = aoc_day_13;
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8000f46:	631a      	str	r2, [r3, #48]	; 0x30
	aoc->aoc_func_list[13] = aoc_day_14;
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000f4c:	635a      	str	r2, [r3, #52]	; 0x34
	aoc->aoc_func_list[14] = aoc_day_15;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8000f52:	639a      	str	r2, [r3, #56]	; 0x38
	aoc->aoc_func_list[15] = aoc_day_16;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f58:	63da      	str	r2, [r3, #60]	; 0x3c
	aoc->aoc_func_list[16] = aoc_day_17;
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000f5e:	641a      	str	r2, [r3, #64]	; 0x40
	aoc->aoc_func_list[17] = aoc_day_18;
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000f64:	645a      	str	r2, [r3, #68]	; 0x44
	aoc->aoc_func_list[18] = aoc_day_19;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8000f6a:	649a      	str	r2, [r3, #72]	; 0x48
	aoc->aoc_func_list[19] = aoc_day_20;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000f70:	64da      	str	r2, [r3, #76]	; 0x4c
	aoc->aoc_func_list[20] = aoc_day_21;
 8000f72:	68fb      	ldr	r3, [r7, #12]
 8000f74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8000f76:	651a      	str	r2, [r3, #80]	; 0x50
	aoc->aoc_func_list[21] = aoc_day_22;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f7c:	655a      	str	r2, [r3, #84]	; 0x54
	aoc->aoc_func_list[22] = aoc_day_23;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000f82:	659a      	str	r2, [r3, #88]	; 0x58
	aoc->aoc_func_list[23] = aoc_day_24;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f88:	65da      	str	r2, [r3, #92]	; 0x5c
	aoc->aoc_func_list[24] = aoc_day_25;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8000f8e:	661a      	str	r2, [r3, #96]	; 0x60
}
 8000f90:	bf00      	nop
 8000f92:	3714      	adds	r7, #20
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <AdventOfCode_print>:
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, line, strlen(line));
	}
}

void AdventOfCode_print(AdventOfCode_config_t config, char *text, int len)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	60b9      	str	r1, [r7, #8]
 8000fa6:	607a      	str	r2, [r7, #4]
 8000fa8:	73fb      	strb	r3, [r7, #15]
	if(config == AOC_CONFIG_TEST || config == AOC_CONFIG_DEBUG || config == AOC_CONFIG_RELEASE)
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d014      	beq.n	8000fda <AdventOfCode_print+0x3e>
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d011      	beq.n	8000fda <AdventOfCode_print+0x3e>
 8000fb6:	7bfb      	ldrb	r3, [r7, #15]
 8000fb8:	2b03      	cmp	r3, #3
 8000fba:	d00e      	beq.n	8000fda <AdventOfCode_print+0x3e>
		return;
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8000fbc:	bf00      	nop
 8000fbe:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <AdventOfCode_print+0x48>)
 8000fc0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8000fc4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d1f8      	bne.n	8000fbe <AdventOfCode_print+0x22>
	CDC_Transmit_HS((uint8_t*)text, len);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	b29b      	uxth	r3, r3
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	68b8      	ldr	r0, [r7, #8]
 8000fd4:	f013 ffe2 	bl	8014f9c <CDC_Transmit_HS>
 8000fd8:	e000      	b.n	8000fdc <AdventOfCode_print+0x40>
		return;
 8000fda:	bf00      	nop
}
 8000fdc:	3710      	adds	r7, #16
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20002d98 	.word	0x20002d98

08000fe8 <AoC_Day_01>:
 */

#include "AoC/Days/Day01.h"

AdventOfCode_return_t AoC_Day_01(AdventOfCode_config_t config)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	f5ad 5d85 	sub.w	sp, sp, #4256	; 0x10a0
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000ff8:	f803 2ca1 	strb.w	r2, [r3, #-161]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8000ffc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001000:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d101      	bne.n	800100c <AoC_Day_01+0x24>
		return AOC_RETURN_OK;
 8001008:	2300      	movs	r3, #0
 800100a:	e196      	b.n	800133a <AoC_Day_01+0x352>

	{ // part 1
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 800100c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001010:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d110      	bne.n	800103a <AoC_Day_01+0x52>
			ret = f_open(&file, "day1t.txt", FA_READ);
 8001018:	4b78      	ldr	r3, [pc, #480]	; (80011fc <AoC_Day_01+0x214>)
 800101a:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800101e:	f103 0308 	add.w	r3, r3, #8
 8001022:	443b      	add	r3, r7
 8001024:	2201      	movs	r2, #1
 8001026:	4976      	ldr	r1, [pc, #472]	; (8001200 <AoC_Day_01+0x218>)
 8001028:	4618      	mov	r0, r3
 800102a:	f013 f973 	bl	8014314 <f_open>
 800102e:	4603      	mov	r3, r0
 8001030:	f241 02a7 	movw	r2, #4263	; 0x10a7
 8001034:	443a      	add	r2, r7
 8001036:	7013      	strb	r3, [r2, #0]
 8001038:	e00f      	b.n	800105a <AoC_Day_01+0x72>
		else ret = f_open(&file, "day1.txt", FA_READ);
 800103a:	4b70      	ldr	r3, [pc, #448]	; (80011fc <AoC_Day_01+0x214>)
 800103c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001040:	f103 0308 	add.w	r3, r3, #8
 8001044:	443b      	add	r3, r7
 8001046:	2201      	movs	r2, #1
 8001048:	496e      	ldr	r1, [pc, #440]	; (8001204 <AoC_Day_01+0x21c>)
 800104a:	4618      	mov	r0, r3
 800104c:	f013 f962 	bl	8014314 <f_open>
 8001050:	4603      	mov	r3, r0
 8001052:	f241 02a7 	movw	r2, #4263	; 0x10a7
 8001056:	443a      	add	r2, r7
 8001058:	7013      	strb	r3, [r2, #0]
		if(ret != FR_OK)
 800105a:	f241 03a7 	movw	r3, #4263	; 0x10a7
 800105e:	443b      	add	r3, r7
 8001060:	781b      	ldrb	r3, [r3, #0]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d00a      	beq.n	800107c <AoC_Day_01+0x94>
		{
			AdventOfCode_print(config, "\tCannot find file!\n", strlen("\tCannot find file!\n"));
 8001066:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 800106a:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
 800106e:	2213      	movs	r2, #19
 8001070:	4965      	ldr	r1, [pc, #404]	; (8001208 <AoC_Day_01+0x220>)
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff ff92 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 8001078:	2301      	movs	r3, #1
 800107a:	e15e      	b.n	800133a <AoC_Day_01+0x352>
		}

		// process data
		char buffer[16];
		int32_t prev_value = -1;
 800107c:	f04f 33ff 	mov.w	r3, #4294967295
 8001080:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 8001084:	6013      	str	r3, [r2, #0]
		int32_t counter = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	f241 029c 	movw	r2, #4252	; 0x109c
 800108c:	443a      	add	r2, r7
 800108e:	6013      	str	r3, [r2, #0]
		while(f_gets(buffer, 16, &file))
 8001090:	e027      	b.n	80010e2 <AoC_Day_01+0xfa>
		{
			int32_t value = atoi(buffer);
 8001092:	f241 0374 	movw	r3, #4212	; 0x1074
 8001096:	443b      	add	r3, r7
 8001098:	4618      	mov	r0, r3
 800109a:	f014 ff5b 	bl	8015f54 <atoi>
 800109e:	f241 0384 	movw	r3, #4228	; 0x1084
 80010a2:	443b      	add	r3, r7
 80010a4:	6018      	str	r0, [r3, #0]
			if(prev_value >= 0 && prev_value < value)
 80010a6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	db11      	blt.n	80010d4 <AoC_Day_01+0xec>
 80010b0:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	f241 0384 	movw	r3, #4228	; 0x1084
 80010ba:	443b      	add	r3, r7
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	429a      	cmp	r2, r3
 80010c0:	da08      	bge.n	80010d4 <AoC_Day_01+0xec>
				counter++;
 80010c2:	f241 039c 	movw	r3, #4252	; 0x109c
 80010c6:	443b      	add	r3, r7
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	f241 029c 	movw	r2, #4252	; 0x109c
 80010d0:	443a      	add	r2, r7
 80010d2:	6013      	str	r3, [r2, #0]
			prev_value = value;
 80010d4:	f241 0384 	movw	r3, #4228	; 0x1084
 80010d8:	443b      	add	r3, r7
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 80010e0:	6013      	str	r3, [r2, #0]
		while(f_gets(buffer, 16, &file))
 80010e2:	4b46      	ldr	r3, [pc, #280]	; (80011fc <AoC_Day_01+0x214>)
 80010e4:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80010e8:	f103 0308 	add.w	r3, r3, #8
 80010ec:	443b      	add	r3, r7
 80010ee:	f241 0074 	movw	r0, #4212	; 0x1074
 80010f2:	4438      	add	r0, r7
 80010f4:	461a      	mov	r2, r3
 80010f6:	2110      	movs	r1, #16
 80010f8:	f013 fd18 	bl	8014b2c <f_gets>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d1c7      	bne.n	8001092 <AoC_Day_01+0xaa>
		}

		// output answer
		char answer[32];
		sprintf(answer, "\tPart 1 answer: %ld\n", counter);
 8001102:	4b42      	ldr	r3, [pc, #264]	; (800120c <AoC_Day_01+0x224>)
 8001104:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001108:	f103 0308 	add.w	r3, r3, #8
 800110c:	443b      	add	r3, r7
 800110e:	f241 029c 	movw	r2, #4252	; 0x109c
 8001112:	443a      	add	r2, r7
 8001114:	6812      	ldr	r2, [r2, #0]
 8001116:	493e      	ldr	r1, [pc, #248]	; (8001210 <AoC_Day_01+0x228>)
 8001118:	4618      	mov	r0, r3
 800111a:	f015 fcc9 	bl	8016ab0 <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 800111e:	4b3b      	ldr	r3, [pc, #236]	; (800120c <AoC_Day_01+0x224>)
 8001120:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001124:	f103 0308 	add.w	r3, r3, #8
 8001128:	443b      	add	r3, r7
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff f870 	bl	8000210 <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	4619      	mov	r1, r3
 8001134:	4b35      	ldr	r3, [pc, #212]	; (800120c <AoC_Day_01+0x224>)
 8001136:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800113a:	f103 0308 	add.w	r3, r3, #8
 800113e:	443b      	add	r3, r7
 8001140:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001144:	f812 0ca1 	ldrb.w	r0, [r2, #-161]
 8001148:	460a      	mov	r2, r1
 800114a:	4619      	mov	r1, r3
 800114c:	f7ff ff26 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 8001150:	4b2a      	ldr	r3, [pc, #168]	; (80011fc <AoC_Day_01+0x214>)
 8001152:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001156:	f103 0308 	add.w	r3, r3, #8
 800115a:	443b      	add	r3, r7
 800115c:	4618      	mov	r0, r3
 800115e:	f013 fc82 	bl	8014a66 <f_close>

	{ // part 2
		// fetch file
		FIL file;
		uint8_t ret;
		if(config == AOC_CONFIG_DEBUG_VERBOSE)
 8001162:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001166:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
 800116a:	2b02      	cmp	r3, #2
 800116c:	d110      	bne.n	8001190 <AoC_Day_01+0x1a8>
			ret = f_open(&file, "day1t.txt", FA_READ);
 800116e:	4b23      	ldr	r3, [pc, #140]	; (80011fc <AoC_Day_01+0x214>)
 8001170:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001174:	f103 0308 	add.w	r3, r3, #8
 8001178:	443b      	add	r3, r7
 800117a:	2201      	movs	r2, #1
 800117c:	4920      	ldr	r1, [pc, #128]	; (8001200 <AoC_Day_01+0x218>)
 800117e:	4618      	mov	r0, r3
 8001180:	f013 f8c8 	bl	8014314 <f_open>
 8001184:	4603      	mov	r3, r0
 8001186:	f241 029b 	movw	r2, #4251	; 0x109b
 800118a:	443a      	add	r2, r7
 800118c:	7013      	strb	r3, [r2, #0]
 800118e:	e00f      	b.n	80011b0 <AoC_Day_01+0x1c8>
		else ret = f_open(&file, "day1.txt", FA_READ);
 8001190:	4b1a      	ldr	r3, [pc, #104]	; (80011fc <AoC_Day_01+0x214>)
 8001192:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001196:	f103 0308 	add.w	r3, r3, #8
 800119a:	443b      	add	r3, r7
 800119c:	2201      	movs	r2, #1
 800119e:	4919      	ldr	r1, [pc, #100]	; (8001204 <AoC_Day_01+0x21c>)
 80011a0:	4618      	mov	r0, r3
 80011a2:	f013 f8b7 	bl	8014314 <f_open>
 80011a6:	4603      	mov	r3, r0
 80011a8:	f241 029b 	movw	r2, #4251	; 0x109b
 80011ac:	443a      	add	r2, r7
 80011ae:	7013      	strb	r3, [r2, #0]
		if(ret != FR_OK)
 80011b0:	f241 039b 	movw	r3, #4251	; 0x109b
 80011b4:	443b      	add	r3, r7
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d00a      	beq.n	80011d2 <AoC_Day_01+0x1ea>
		{
			AdventOfCode_print(config, "\tCannot find file!\n", strlen("\tCannot find file!\n"));
 80011bc:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80011c0:	f813 3ca1 	ldrb.w	r3, [r3, #-161]
 80011c4:	2213      	movs	r2, #19
 80011c6:	4910      	ldr	r1, [pc, #64]	; (8001208 <AoC_Day_01+0x220>)
 80011c8:	4618      	mov	r0, r3
 80011ca:	f7ff fee7 	bl	8000f9c <AdventOfCode_print>
			return AOC_RETURN_NOK;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e0b3      	b.n	800133a <AoC_Day_01+0x352>
		}

		// process data
		char buffer[16];
		int32_t prev_value[] = {-1, -1};
 80011d2:	4a10      	ldr	r2, [pc, #64]	; (8001214 <AoC_Day_01+0x22c>)
 80011d4:	f241 035c 	movw	r3, #4188	; 0x105c
 80011d8:	443b      	add	r3, r7
 80011da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011de:	e883 0003 	stmia.w	r3, {r0, r1}
		int32_t prev_sum = -1;
 80011e2:	f04f 33ff 	mov.w	r3, #4294967295
 80011e6:	f241 0294 	movw	r2, #4244	; 0x1094
 80011ea:	443a      	add	r2, r7
 80011ec:	6013      	str	r3, [r2, #0]
		int32_t counter = 0;
 80011ee:	2300      	movs	r3, #0
 80011f0:	f241 0290 	movw	r2, #4240	; 0x1090
 80011f4:	443a      	add	r2, r7
 80011f6:	6013      	str	r3, [r2, #0]
		while(f_gets(buffer, 16, &file))
 80011f8:	e05e      	b.n	80012b8 <AoC_Day_01+0x2d0>
 80011fa:	bf00      	nop
 80011fc:	ffffef84 	.word	0xffffef84
 8001200:	08018ec8 	.word	0x08018ec8
 8001204:	08018ed4 	.word	0x08018ed4
 8001208:	08018ee0 	.word	0x08018ee0
 800120c:	ffffef64 	.word	0xffffef64
 8001210:	08018ef4 	.word	0x08018ef4
 8001214:	08018f24 	.word	0x08018f24
		{
			int32_t value = atoi(buffer);
 8001218:	f241 0364 	movw	r3, #4196	; 0x1064
 800121c:	443b      	add	r3, r7
 800121e:	4618      	mov	r0, r3
 8001220:	f014 fe98 	bl	8015f54 <atoi>
 8001224:	f241 038c 	movw	r3, #4236	; 0x108c
 8001228:	443b      	add	r3, r7
 800122a:	6018      	str	r0, [r3, #0]
			if(prev_value[1] >= 0)
 800122c:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b00      	cmp	r3, #0
 8001234:	db31      	blt.n	800129a <AoC_Day_01+0x2b2>
			{
				int32_t sum = value + prev_value[1] + prev_value[0];
 8001236:	f507 5383 	add.w	r3, r7, #4192	; 0x1060
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f241 038c 	movw	r3, #4236	; 0x108c
 8001240:	443b      	add	r3, r7
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	441a      	add	r2, r3
 8001246:	f241 035c 	movw	r3, #4188	; 0x105c
 800124a:	443b      	add	r3, r7
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	f241 0288 	movw	r2, #4232	; 0x1088
 8001254:	443a      	add	r2, r7
 8001256:	6013      	str	r3, [r2, #0]
				if(prev_sum >= 0 && prev_sum < sum)
 8001258:	f241 0394 	movw	r3, #4244	; 0x1094
 800125c:	443b      	add	r3, r7
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	db12      	blt.n	800128a <AoC_Day_01+0x2a2>
 8001264:	f241 0394 	movw	r3, #4244	; 0x1094
 8001268:	443b      	add	r3, r7
 800126a:	681a      	ldr	r2, [r3, #0]
 800126c:	f241 0388 	movw	r3, #4232	; 0x1088
 8001270:	443b      	add	r3, r7
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	da08      	bge.n	800128a <AoC_Day_01+0x2a2>
					counter++;
 8001278:	f241 0390 	movw	r3, #4240	; 0x1090
 800127c:	443b      	add	r3, r7
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	3301      	adds	r3, #1
 8001282:	f241 0290 	movw	r2, #4240	; 0x1090
 8001286:	443a      	add	r2, r7
 8001288:	6013      	str	r3, [r2, #0]
				prev_sum = sum;
 800128a:	f241 0388 	movw	r3, #4232	; 0x1088
 800128e:	443b      	add	r3, r7
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f241 0294 	movw	r2, #4244	; 0x1094
 8001296:	443a      	add	r2, r7
 8001298:	6013      	str	r3, [r2, #0]
			}
			prev_value[1] = prev_value[0];
 800129a:	f241 035c 	movw	r3, #4188	; 0x105c
 800129e:	443b      	add	r3, r7
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f507 5283 	add.w	r2, r7, #4192	; 0x1060
 80012a6:	6013      	str	r3, [r2, #0]
			prev_value[0] = value;
 80012a8:	f241 038c 	movw	r3, #4236	; 0x108c
 80012ac:	443b      	add	r3, r7
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f241 025c 	movw	r2, #4188	; 0x105c
 80012b4:	443a      	add	r2, r7
 80012b6:	6013      	str	r3, [r2, #0]
		while(f_gets(buffer, 16, &file))
 80012b8:	4b23      	ldr	r3, [pc, #140]	; (8001348 <AoC_Day_01+0x360>)
 80012ba:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80012be:	f103 0308 	add.w	r3, r3, #8
 80012c2:	443b      	add	r3, r7
 80012c4:	f241 0064 	movw	r0, #4196	; 0x1064
 80012c8:	4438      	add	r0, r7
 80012ca:	461a      	mov	r2, r3
 80012cc:	2110      	movs	r1, #16
 80012ce:	f013 fc2d 	bl	8014b2c <f_gets>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d19f      	bne.n	8001218 <AoC_Day_01+0x230>
		}

		// output answer
		char answer[32];
		sprintf(answer, "\tPart 2 answer: %ld\n", counter);
 80012d8:	4b1c      	ldr	r3, [pc, #112]	; (800134c <AoC_Day_01+0x364>)
 80012da:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80012de:	f103 0308 	add.w	r3, r3, #8
 80012e2:	443b      	add	r3, r7
 80012e4:	f241 0290 	movw	r2, #4240	; 0x1090
 80012e8:	443a      	add	r2, r7
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	4918      	ldr	r1, [pc, #96]	; (8001350 <AoC_Day_01+0x368>)
 80012ee:	4618      	mov	r0, r3
 80012f0:	f015 fbde 	bl	8016ab0 <siprintf>
		AdventOfCode_print(config, answer, strlen(answer));
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <AoC_Day_01+0x364>)
 80012f6:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 80012fa:	f103 0308 	add.w	r3, r3, #8
 80012fe:	443b      	add	r3, r7
 8001300:	4618      	mov	r0, r3
 8001302:	f7fe ff85 	bl	8000210 <strlen>
 8001306:	4603      	mov	r3, r0
 8001308:	4619      	mov	r1, r3
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <AoC_Day_01+0x364>)
 800130c:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 8001310:	f103 0308 	add.w	r3, r3, #8
 8001314:	443b      	add	r3, r7
 8001316:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800131a:	f812 0ca1 	ldrb.w	r0, [r2, #-161]
 800131e:	460a      	mov	r2, r1
 8001320:	4619      	mov	r1, r3
 8001322:	f7ff fe3b 	bl	8000f9c <AdventOfCode_print>

		// clean up
		f_close(&file);
 8001326:	4b08      	ldr	r3, [pc, #32]	; (8001348 <AoC_Day_01+0x360>)
 8001328:	f503 5385 	add.w	r3, r3, #4256	; 0x10a0
 800132c:	f103 0308 	add.w	r3, r3, #8
 8001330:	443b      	add	r3, r7
 8001332:	4618      	mov	r0, r3
 8001334:	f013 fb97 	bl	8014a66 <f_close>
	}

	// status code
	return AOC_RETURN_OK;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	f507 5785 	add.w	r7, r7, #4256	; 0x10a0
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	ffffef84 	.word	0xffffef84
 800134c:	ffffef64 	.word	0xffffef64
 8001350:	08018f0c 	.word	0x08018f0c

08001354 <AoC_Day_02>:
 */

#include "AoC/Days/Day02.h"

AdventOfCode_return_t AoC_Day_02(AdventOfCode_config_t config)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <AoC_Day_02+0x14>
		return AOC_RETURN_NOK;
 8001364:	2301      	movs	r3, #1
 8001366:	e000      	b.n	800136a <AoC_Day_02+0x16>

	// status code
	return AOC_RETURN_OK;
 8001368:	2300      	movs	r3, #0
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr

08001376 <AoC_Day_03>:
 */

#include "AoC/Days/Day03.h"

AdventOfCode_return_t AoC_Day_03(AdventOfCode_config_t config)
{
 8001376:	b480      	push	{r7}
 8001378:	b083      	sub	sp, #12
 800137a:	af00      	add	r7, sp, #0
 800137c:	4603      	mov	r3, r0
 800137e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001380:	79fb      	ldrb	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <AoC_Day_03+0x14>
		return AOC_RETURN_NOK;
 8001386:	2301      	movs	r3, #1
 8001388:	e000      	b.n	800138c <AoC_Day_03+0x16>

	// status code
	return AOC_RETURN_OK;
 800138a:	2300      	movs	r3, #0
}
 800138c:	4618      	mov	r0, r3
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <AoC_Day_04>:
 */

#include "AoC/Days/Day04.h"

AdventOfCode_return_t AoC_Day_04(AdventOfCode_config_t config)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	4603      	mov	r3, r0
 80013a0:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <AoC_Day_04+0x14>
		return AOC_RETURN_NOK;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e000      	b.n	80013ae <AoC_Day_04+0x16>

	// status code
	return AOC_RETURN_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <AoC_Day_05>:
 */

#include "AoC/Days/Day05.h"

AdventOfCode_return_t AoC_Day_05(AdventOfCode_config_t config)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <AoC_Day_05+0x14>
		return AOC_RETURN_NOK;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e000      	b.n	80013d0 <AoC_Day_05+0x16>

	// status code
	return AOC_RETURN_OK;
 80013ce:	2300      	movs	r3, #0
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	370c      	adds	r7, #12
 80013d4:	46bd      	mov	sp, r7
 80013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013da:	4770      	bx	lr

080013dc <AoC_Day_06>:
 */

#include "AoC/Days/Day06.h"

AdventOfCode_return_t AoC_Day_06(AdventOfCode_config_t config)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80013e6:	79fb      	ldrb	r3, [r7, #7]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d101      	bne.n	80013f0 <AoC_Day_06+0x14>
		return AOC_RETURN_NOK;
 80013ec:	2301      	movs	r3, #1
 80013ee:	e000      	b.n	80013f2 <AoC_Day_06+0x16>

	// status code
	return AOC_RETURN_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr

080013fe <AoC_Day_07>:
 */

#include "AoC/Days/Day07.h"

AdventOfCode_return_t AoC_Day_07(AdventOfCode_config_t config)
{
 80013fe:	b480      	push	{r7}
 8001400:	b083      	sub	sp, #12
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001408:	79fb      	ldrb	r3, [r7, #7]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <AoC_Day_07+0x14>
		return AOC_RETURN_NOK;
 800140e:	2301      	movs	r3, #1
 8001410:	e000      	b.n	8001414 <AoC_Day_07+0x16>

	// status code
	return AOC_RETURN_OK;
 8001412:	2300      	movs	r3, #0
}
 8001414:	4618      	mov	r0, r3
 8001416:	370c      	adds	r7, #12
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr

08001420 <AoC_Day_08>:
 */

#include "AoC/Days/Day08.h"

AdventOfCode_return_t AoC_Day_08(AdventOfCode_config_t config)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	4603      	mov	r3, r0
 8001428:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d101      	bne.n	8001434 <AoC_Day_08+0x14>
		return AOC_RETURN_NOK;
 8001430:	2301      	movs	r3, #1
 8001432:	e000      	b.n	8001436 <AoC_Day_08+0x16>

	// status code
	return AOC_RETURN_OK;
 8001434:	2300      	movs	r3, #0
}
 8001436:	4618      	mov	r0, r3
 8001438:	370c      	adds	r7, #12
 800143a:	46bd      	mov	sp, r7
 800143c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001440:	4770      	bx	lr

08001442 <AoC_Day_09>:
 */

#include "AoC/Days/Day09.h"

AdventOfCode_return_t AoC_Day_09(AdventOfCode_config_t config)
{
 8001442:	b480      	push	{r7}
 8001444:	b083      	sub	sp, #12
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <AoC_Day_09+0x14>
		return AOC_RETURN_NOK;
 8001452:	2301      	movs	r3, #1
 8001454:	e000      	b.n	8001458 <AoC_Day_09+0x16>

	// status code
	return AOC_RETURN_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	370c      	adds	r7, #12
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <AoC_Day_10>:
 */

#include "AoC/Days/Day10.h"

AdventOfCode_return_t AoC_Day_10(AdventOfCode_config_t config)
{
 8001464:	b480      	push	{r7}
 8001466:	b083      	sub	sp, #12
 8001468:	af00      	add	r7, sp, #0
 800146a:	4603      	mov	r3, r0
 800146c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800146e:	79fb      	ldrb	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d101      	bne.n	8001478 <AoC_Day_10+0x14>
		return AOC_RETURN_NOK;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <AoC_Day_10+0x16>

	// status code
	return AOC_RETURN_OK;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <AoC_Day_11>:
 */

#include "AoC/Days/Day11.h"

AdventOfCode_return_t AoC_Day_11(AdventOfCode_config_t config)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	4603      	mov	r3, r0
 800148e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001490:	79fb      	ldrb	r3, [r7, #7]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d101      	bne.n	800149a <AoC_Day_11+0x14>
		return AOC_RETURN_NOK;
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <AoC_Day_11+0x16>

	// status code
	return AOC_RETURN_OK;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	370c      	adds	r7, #12
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <AoC_Day_12>:
 */

#include "AoC/Days/Day12.h"

AdventOfCode_return_t AoC_Day_12(AdventOfCode_config_t config)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d101      	bne.n	80014bc <AoC_Day_12+0x14>
		return AOC_RETURN_NOK;
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <AoC_Day_12+0x16>

	// status code
	return AOC_RETURN_OK;
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr

080014ca <AoC_Day_13>:
 */

#include "AoC/Days/Day13.h"

AdventOfCode_return_t AoC_Day_13(AdventOfCode_config_t config)
{
 80014ca:	b480      	push	{r7}
 80014cc:	b083      	sub	sp, #12
 80014ce:	af00      	add	r7, sp, #0
 80014d0:	4603      	mov	r3, r0
 80014d2:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d101      	bne.n	80014de <AoC_Day_13+0x14>
		return AOC_RETURN_NOK;
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <AoC_Day_13+0x16>

	// status code
	return AOC_RETURN_OK;
 80014de:	2300      	movs	r3, #0
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	370c      	adds	r7, #12
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr

080014ec <AoC_Day_14>:
 */

#include "AoC/Days/Day14.h"

AdventOfCode_return_t AoC_Day_14(AdventOfCode_config_t config)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b083      	sub	sp, #12
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	4603      	mov	r3, r0
 80014f4:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80014f6:	79fb      	ldrb	r3, [r7, #7]
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d101      	bne.n	8001500 <AoC_Day_14+0x14>
		return AOC_RETURN_NOK;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e000      	b.n	8001502 <AoC_Day_14+0x16>

	// status code
	return AOC_RETURN_OK;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	370c      	adds	r7, #12
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr

0800150e <AoC_Day_15>:
 */

#include "AoC/Days/Day15.h"

AdventOfCode_return_t AoC_Day_15(AdventOfCode_config_t config)
{
 800150e:	b480      	push	{r7}
 8001510:	b083      	sub	sp, #12
 8001512:	af00      	add	r7, sp, #0
 8001514:	4603      	mov	r3, r0
 8001516:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001518:	79fb      	ldrb	r3, [r7, #7]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <AoC_Day_15+0x14>
		return AOC_RETURN_NOK;
 800151e:	2301      	movs	r3, #1
 8001520:	e000      	b.n	8001524 <AoC_Day_15+0x16>

	// status code
	return AOC_RETURN_OK;
 8001522:	2300      	movs	r3, #0
}
 8001524:	4618      	mov	r0, r3
 8001526:	370c      	adds	r7, #12
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr

08001530 <AoC_Day_16>:
 */

#include "AoC/Days/Day16.h"

AdventOfCode_return_t AoC_Day_16(AdventOfCode_config_t config)
{
 8001530:	b480      	push	{r7}
 8001532:	b083      	sub	sp, #12
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800153a:	79fb      	ldrb	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d101      	bne.n	8001544 <AoC_Day_16+0x14>
		return AOC_RETURN_NOK;
 8001540:	2301      	movs	r3, #1
 8001542:	e000      	b.n	8001546 <AoC_Day_16+0x16>

	// status code
	return AOC_RETURN_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	370c      	adds	r7, #12
 800154a:	46bd      	mov	sp, r7
 800154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001550:	4770      	bx	lr

08001552 <AoC_Day_17>:
 */

#include "AoC/Days/Day17.h"

AdventOfCode_return_t AoC_Day_17(AdventOfCode_config_t config)
{
 8001552:	b480      	push	{r7}
 8001554:	b083      	sub	sp, #12
 8001556:	af00      	add	r7, sp, #0
 8001558:	4603      	mov	r3, r0
 800155a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d101      	bne.n	8001566 <AoC_Day_17+0x14>
		return AOC_RETURN_NOK;
 8001562:	2301      	movs	r3, #1
 8001564:	e000      	b.n	8001568 <AoC_Day_17+0x16>

	// status code
	return AOC_RETURN_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	370c      	adds	r7, #12
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <AoC_Day_18>:
 */

#include "AoC/Days/Day18.h"

AdventOfCode_return_t AoC_Day_18(AdventOfCode_config_t config)
{
 8001574:	b480      	push	{r7}
 8001576:	b083      	sub	sp, #12
 8001578:	af00      	add	r7, sp, #0
 800157a:	4603      	mov	r3, r0
 800157c:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <AoC_Day_18+0x14>
		return AOC_RETURN_NOK;
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <AoC_Day_18+0x16>

	// status code
	return AOC_RETURN_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	370c      	adds	r7, #12
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr

08001596 <AoC_Day_19>:
 */

#include "AoC/Days/Day19.h"

AdventOfCode_return_t AoC_Day_19(AdventOfCode_config_t config)
{
 8001596:	b480      	push	{r7}
 8001598:	b083      	sub	sp, #12
 800159a:	af00      	add	r7, sp, #0
 800159c:	4603      	mov	r3, r0
 800159e:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d101      	bne.n	80015aa <AoC_Day_19+0x14>
		return AOC_RETURN_NOK;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e000      	b.n	80015ac <AoC_Day_19+0x16>

	// status code
	return AOC_RETURN_OK;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	370c      	adds	r7, #12
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <AoC_Day_20>:
 */

#include "AoC/Days/Day20.h"

AdventOfCode_return_t AoC_Day_20(AdventOfCode_config_t config)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	4603      	mov	r3, r0
 80015c0:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80015c2:	79fb      	ldrb	r3, [r7, #7]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <AoC_Day_20+0x14>
		return AOC_RETURN_NOK;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <AoC_Day_20+0x16>

	// status code
	return AOC_RETURN_OK;
 80015cc:	2300      	movs	r3, #0
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr

080015da <AoC_Day_21>:
 */

#include "AoC/Days/Day21.h"

AdventOfCode_return_t AoC_Day_21(AdventOfCode_config_t config)
{
 80015da:	b480      	push	{r7}
 80015dc:	b083      	sub	sp, #12
 80015de:	af00      	add	r7, sp, #0
 80015e0:	4603      	mov	r3, r0
 80015e2:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 80015e4:	79fb      	ldrb	r3, [r7, #7]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <AoC_Day_21+0x14>
		return AOC_RETURN_NOK;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e000      	b.n	80015f0 <AoC_Day_21+0x16>

	// status code
	return AOC_RETURN_OK;
 80015ee:	2300      	movs	r3, #0
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	370c      	adds	r7, #12
 80015f4:	46bd      	mov	sp, r7
 80015f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fa:	4770      	bx	lr

080015fc <AoC_Day_22>:
 */

#include "AoC/Days/Day22.h"

AdventOfCode_return_t AoC_Day_22(AdventOfCode_config_t config)
{
 80015fc:	b480      	push	{r7}
 80015fe:	b083      	sub	sp, #12
 8001600:	af00      	add	r7, sp, #0
 8001602:	4603      	mov	r3, r0
 8001604:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001606:	79fb      	ldrb	r3, [r7, #7]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d101      	bne.n	8001610 <AoC_Day_22+0x14>
		return AOC_RETURN_NOK;
 800160c:	2301      	movs	r3, #1
 800160e:	e000      	b.n	8001612 <AoC_Day_22+0x16>

	// status code
	return AOC_RETURN_OK;
 8001610:	2300      	movs	r3, #0
}
 8001612:	4618      	mov	r0, r3
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr

0800161e <AoC_Day_23>:
 */

#include "AoC/Days/Day23.h"

AdventOfCode_return_t AoC_Day_23(AdventOfCode_config_t config)
{
 800161e:	b480      	push	{r7}
 8001620:	b083      	sub	sp, #12
 8001622:	af00      	add	r7, sp, #0
 8001624:	4603      	mov	r3, r0
 8001626:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d101      	bne.n	8001632 <AoC_Day_23+0x14>
		return AOC_RETURN_NOK;
 800162e:	2301      	movs	r3, #1
 8001630:	e000      	b.n	8001634 <AoC_Day_23+0x16>

	// status code
	return AOC_RETURN_OK;
 8001632:	2300      	movs	r3, #0
}
 8001634:	4618      	mov	r0, r3
 8001636:	370c      	adds	r7, #12
 8001638:	46bd      	mov	sp, r7
 800163a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163e:	4770      	bx	lr

08001640 <AoC_Day_24>:
 */

#include "AoC/Days/Day24.h"

AdventOfCode_return_t AoC_Day_24(AdventOfCode_config_t config)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	4603      	mov	r3, r0
 8001648:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800164a:	79fb      	ldrb	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d101      	bne.n	8001654 <AoC_Day_24+0x14>
		return AOC_RETURN_NOK;
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <AoC_Day_24+0x16>

	// status code
	return AOC_RETURN_OK;
 8001654:	2300      	movs	r3, #0
}
 8001656:	4618      	mov	r0, r3
 8001658:	370c      	adds	r7, #12
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <AoC_Day_25>:
 */

#include "AoC/Days/Day25.h"

AdventOfCode_return_t AoC_Day_25(AdventOfCode_config_t config)
{
 8001662:	b480      	push	{r7}
 8001664:	b083      	sub	sp, #12
 8001666:	af00      	add	r7, sp, #0
 8001668:	4603      	mov	r3, r0
 800166a:	71fb      	strb	r3, [r7, #7]
	// implementation state (change to OK when the day is active)
	if(config == AOC_CONFIG_TEST)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d101      	bne.n	8001676 <AoC_Day_25+0x14>
		return AOC_RETURN_NOK;
 8001672:	2301      	movs	r3, #1
 8001674:	e000      	b.n	8001678 <AoC_Day_25+0x16>

	// status code
	return AOC_RETURN_OK;
 8001676:	2300      	movs	r3, #0
}
 8001678:	4618      	mov	r0, r3
 800167a:	370c      	adds	r7, #12
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <System_init>:

extern USBD_HandleTypeDef hUsbDeviceHS;

// state functions
void System_init(System_t *state)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
	// system resource states
	state->sram_working = 1;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2201      	movs	r2, #1
 8001690:	705a      	strb	r2, [r3, #1]
	state->sdio_working = 1;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2201      	movs	r2, #1
 8001696:	709a      	strb	r2, [r3, #2]
	state->wifi_working = 1;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	70da      	strb	r2, [r3, #3]

	// external interface status
	state->vcom_open = 0;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]

	// perform selftest
	System_selfTest(state);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f000 f805 	bl	80016b4 <System_selfTest>
}
 80016aa:	bf00      	nop
 80016ac:	3708      	adds	r7, #8
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
	...

080016b4 <System_selfTest>:

void System_selfTest(System_t *state)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	// test psram
	uint32_t *ptr = SRAM_ADDRESS + 1000000ul;
 80016bc:	4b24      	ldr	r3, [pc, #144]	; (8001750 <System_selfTest+0x9c>)
 80016be:	60fb      	str	r3, [r7, #12]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
 80016c4:	e00a      	b.n	80016dc <System_selfTest+0x28>
		*(ptr + byte) = 0xFFFF & (byte >> 4);
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	0919      	lsrs	r1, r3, #4
 80016ca:	697b      	ldr	r3, [r7, #20]
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4413      	add	r3, r2
 80016d2:	b28a      	uxth	r2, r1
 80016d4:	601a      	str	r2, [r3, #0]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80016d6:	697b      	ldr	r3, [r7, #20]
 80016d8:	3301      	adds	r3, #1
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4a1d      	ldr	r2, [pc, #116]	; (8001754 <System_selfTest+0xa0>)
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d9f0      	bls.n	80016c6 <System_selfTest+0x12>
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80016e4:	2300      	movs	r3, #0
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	e00f      	b.n	800170a <System_selfTest+0x56>
		if(*(ptr + byte) != (0xFFFF & (byte >> 4)))
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	68fa      	ldr	r2, [r7, #12]
 80016f0:	4413      	add	r3, r2
 80016f2:	681a      	ldr	r2, [r3, #0]
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	091b      	lsrs	r3, r3, #4
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	429a      	cmp	r2, r3
 80016fc:	d002      	beq.n	8001704 <System_selfTest+0x50>
			state->sram_working = 0;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	705a      	strb	r2, [r3, #1]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	3301      	adds	r3, #1
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	4a11      	ldr	r2, [pc, #68]	; (8001754 <System_selfTest+0xa0>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d9eb      	bls.n	80016ea <System_selfTest+0x36>

	// test sdio
	state->sdio.file_result = f_mount(&state->sdio.file_system, (const TCHAR*)SDPath, 0);
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	f241 0334 	movw	r3, #4148	; 0x1034
 8001718:	4413      	add	r3, r2
 800171a:	2200      	movs	r2, #0
 800171c:	490e      	ldr	r1, [pc, #56]	; (8001758 <System_selfTest+0xa4>)
 800171e:	4618      	mov	r0, r3
 8001720:	f012 fdb2 	bl	8014288 <f_mount>
 8001724:	4603      	mov	r3, r0
 8001726:	461a      	mov	r2, r3
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 800172e:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
	if(state->sdio.file_result != FR_OK)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8001738:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 800173c:	2b00      	cmp	r3, #0
 800173e:	d002      	beq.n	8001746 <System_selfTest+0x92>
		state->sdio_working = 0;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2200      	movs	r2, #0
 8001744:	709a      	strb	r2, [r3, #2]

	// test wifi
	// todo add wifi check
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	603d0900 	.word	0x603d0900
 8001754:	000f423f 	.word	0x000f423f
 8001758:	20002b5c 	.word	0x20002b5c

0800175c <System_initLog>:

// interface log functions
void System_initLog(System_t *state)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
	char *logo = "\n________________________________________________________________________________\n"
 8001764:	4b0b      	ldr	r3, [pc, #44]	; (8001794 <System_initLog+0x38>)
 8001766:	60fb      	str	r3, [r7, #12]
			" Device: FOX-PDA-v1\n"
			" Author: Justin Verkade\n"
			" Function: General purpose high performance developement board.\n"
			"________________________________________________________________________________\n";

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001768:	bf00      	nop
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <System_initLog+0x3c>)
 800176c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001770:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001774:	2b00      	cmp	r3, #0
 8001776:	d1f8      	bne.n	800176a <System_initLog+0xe>
	CDC_Transmit_HS((uint8_t*)logo, strlen(logo));
 8001778:	68f8      	ldr	r0, [r7, #12]
 800177a:	f7fe fd49 	bl	8000210 <strlen>
 800177e:	4603      	mov	r3, r0
 8001780:	b29b      	uxth	r3, r3
 8001782:	4619      	mov	r1, r3
 8001784:	68f8      	ldr	r0, [r7, #12]
 8001786:	f013 fc09 	bl	8014f9c <CDC_Transmit_HS>
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	08018f2c 	.word	0x08018f2c
 8001798:	20002d98 	.word	0x20002d98

0800179c <System_selfTestLog>:

void System_selfTestLog(System_t *state)
{
 800179c:	b590      	push	{r4, r7, lr}
 800179e:	b0d3      	sub	sp, #332	; 0x14c
 80017a0:	af02      	add	r7, sp, #8
 80017a2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80017a6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017aa:	6018      	str	r0, [r3, #0]
	char *text = "\n"
 80017ac:	4b3b      	ldr	r3, [pc, #236]	; (800189c <System_selfTestLog+0x100>)
 80017ae:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
			" -> SDIO status: %s\n"
			" -> WIFI status: %s\n"
			"________________________________________________________________________________\n";

	char sram_str[16];
	if(state->sram_working)
 80017b2:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80017b6:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	785b      	ldrb	r3, [r3, #1]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d007      	beq.n	80017d2 <System_selfTestLog+0x36>
		strcpy(sram_str, "ENABLED");
 80017c2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80017c6:	4a36      	ldr	r2, [pc, #216]	; (80018a0 <System_selfTestLog+0x104>)
 80017c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017cc:	e883 0003 	stmia.w	r3, {r0, r1}
 80017d0:	e005      	b.n	80017de <System_selfTestLog+0x42>
	else
		strcpy(sram_str, "DISABLED");
 80017d2:	f507 7396 	add.w	r3, r7, #300	; 0x12c
 80017d6:	4a33      	ldr	r2, [pc, #204]	; (80018a4 <System_selfTestLog+0x108>)
 80017d8:	ca07      	ldmia	r2, {r0, r1, r2}
 80017da:	c303      	stmia	r3!, {r0, r1}
 80017dc:	701a      	strb	r2, [r3, #0]

	char sdio_str[16];
	if(state->sdio_working)
 80017de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80017e2:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	789b      	ldrb	r3, [r3, #2]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d007      	beq.n	80017fe <System_selfTestLog+0x62>
		strcpy(sdio_str, "ENABLED");
 80017ee:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80017f2:	4a2b      	ldr	r2, [pc, #172]	; (80018a0 <System_selfTestLog+0x104>)
 80017f4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80017f8:	e883 0003 	stmia.w	r3, {r0, r1}
 80017fc:	e005      	b.n	800180a <System_selfTestLog+0x6e>
	else
		strcpy(sdio_str, "DISABLED");
 80017fe:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8001802:	4a28      	ldr	r2, [pc, #160]	; (80018a4 <System_selfTestLog+0x108>)
 8001804:	ca07      	ldmia	r2, {r0, r1, r2}
 8001806:	c303      	stmia	r3!, {r0, r1}
 8001808:	701a      	strb	r2, [r3, #0]

	char wifi_str[16];
	if(state->wifi_working)
 800180a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 800180e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	78db      	ldrb	r3, [r3, #3]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d006      	beq.n	8001828 <System_selfTestLog+0x8c>
		strcpy(wifi_str, "NOT IMPLEMENTED"); // todo wifi not functional
 800181a:	4b23      	ldr	r3, [pc, #140]	; (80018a8 <System_selfTestLog+0x10c>)
 800181c:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 8001820:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001822:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001826:	e005      	b.n	8001834 <System_selfTestLog+0x98>
	else
		strcpy(wifi_str, "DISABLED");
 8001828:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800182c:	4a1d      	ldr	r2, [pc, #116]	; (80018a4 <System_selfTestLog+0x108>)
 800182e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001830:	c303      	stmia	r3!, {r0, r1}
 8001832:	701a      	strb	r2, [r3, #0]

	char text_buffer[256];
	sprintf(text_buffer, text, sram_str, sdio_str, wifi_str);
 8001834:	f507 718e 	add.w	r1, r7, #284	; 0x11c
 8001838:	f507 7296 	add.w	r2, r7, #300	; 0x12c
 800183c:	f107 000c 	add.w	r0, r7, #12
 8001840:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001844:	9300      	str	r3, [sp, #0]
 8001846:	460b      	mov	r3, r1
 8001848:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800184c:	f015 f930 	bl	8016ab0 <siprintf>

	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 8001850:	bf00      	nop
 8001852:	4b16      	ldr	r3, [pc, #88]	; (80018ac <System_selfTestLog+0x110>)
 8001854:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001858:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f8      	bne.n	8001852 <System_selfTestLog+0xb6>
	CDC_Transmit_HS((uint8_t*)text_buffer, strlen(text_buffer));
 8001860:	f107 030c 	add.w	r3, r7, #12
 8001864:	4618      	mov	r0, r3
 8001866:	f7fe fcd3 	bl	8000210 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	f107 030c 	add.w	r3, r7, #12
 8001872:	4611      	mov	r1, r2
 8001874:	4618      	mov	r0, r3
 8001876:	f013 fb91 	bl	8014f9c <CDC_Transmit_HS>

	// print new cursor
	while(((USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData)->TxState != 0);
 800187a:	bf00      	nop
 800187c:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <System_selfTestLog+0x110>)
 800187e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8001882:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8001886:	2b00      	cmp	r3, #0
 8001888:	d1f8      	bne.n	800187c <System_selfTestLog+0xe0>
	CDC_Transmit_HS((uint8_t*)">", 1);
 800188a:	2101      	movs	r1, #1
 800188c:	4808      	ldr	r0, [pc, #32]	; (80018b0 <System_selfTestLog+0x114>)
 800188e:	f013 fb85 	bl	8014f9c <CDC_Transmit_HS>
}
 8001892:	bf00      	nop
 8001894:	f507 77a2 	add.w	r7, r7, #324	; 0x144
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	080192cc 	.word	0x080192cc
 80018a0:	0801936c 	.word	0x0801936c
 80018a4:	08019374 	.word	0x08019374
 80018a8:	08019380 	.word	0x08019380
 80018ac:	20002d98 	.word	0x20002d98
 80018b0:	08019390 	.word	0x08019390

080018b4 <checkImplementation>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void checkImplementation()
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	f5ad 6da5 	sub.w	sp, sp, #1320	; 0x528
 80018ba:	af00      	add	r7, sp, #0
	// fetch variable
	uint8_t *ptr;
	for(ptr=usb_rx_buffer; *ptr!=' '&&ptr<(usb_rx_buffer+1024); ptr++);
 80018bc:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <checkImplementation+0x150>)
 80018be:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80018c2:	e004      	b.n	80018ce <checkImplementation+0x1a>
 80018c4:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80018c8:	3301      	adds	r3, #1
 80018ca:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
 80018ce:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b20      	cmp	r3, #32
 80018d6:	d004      	beq.n	80018e2 <checkImplementation+0x2e>
 80018d8:	4a4b      	ldr	r2, [pc, #300]	; (8001a08 <checkImplementation+0x154>)
 80018da:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80018de:	4293      	cmp	r3, r2
 80018e0:	d3f0      	bcc.n	80018c4 <checkImplementation+0x10>
	ptr++;
 80018e2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80018e6:	3301      	adds	r3, #1
 80018e8:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524

	// no value given
	if(*ptr == '\0')
 80018ec:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d105      	bne.n	8001902 <checkImplementation+0x4e>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 80018f6:	2215      	movs	r2, #21
 80018f8:	4944      	ldr	r1, [pc, #272]	; (8001a0c <checkImplementation+0x158>)
 80018fa:	2002      	movs	r0, #2
 80018fc:	f7ff fb4e 	bl	8000f9c <AdventOfCode_print>
		return;
 8001900:	e07c      	b.n	80019fc <checkImplementation+0x148>
	}

	// check value
	int32_t day = atoi((char*)ptr);
 8001902:	f8d7 0524 	ldr.w	r0, [r7, #1316]	; 0x524
 8001906:	f014 fb25 	bl	8015f54 <atoi>
 800190a:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520
	if(day > 25 || day <= 0)
 800190e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8001912:	2b19      	cmp	r3, #25
 8001914:	dc03      	bgt.n	800191e <checkImplementation+0x6a>
 8001916:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 800191a:	2b00      	cmp	r3, #0
 800191c:	dc05      	bgt.n	800192a <checkImplementation+0x76>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 800191e:	221a      	movs	r2, #26
 8001920:	493b      	ldr	r1, [pc, #236]	; (8001a10 <checkImplementation+0x15c>)
 8001922:	2002      	movs	r0, #2
 8001924:	f7ff fb3a 	bl	8000f9c <AdventOfCode_print>
		return;
 8001928:	e068      	b.n	80019fc <checkImplementation+0x148>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Checking day %ld\n", day);
 800192a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800192e:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8001932:	4938      	ldr	r1, [pc, #224]	; (8001a14 <checkImplementation+0x160>)
 8001934:	4618      	mov	r0, r3
 8001936:	f015 f8bb 	bl	8016ab0 <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 800193a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800193e:	4618      	mov	r0, r3
 8001940:	f7fe fc66 	bl	8000210 <strlen>
 8001944:	4603      	mov	r3, r0
 8001946:	461a      	mov	r2, r3
 8001948:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800194c:	4619      	mov	r1, r3
 800194e:	2002      	movs	r0, #2
 8001950:	f7ff fb24 	bl	8000f9c <AdventOfCode_print>

	// check day
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8001954:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8001958:	3b01      	subs	r3, #1
 800195a:	4a2f      	ldr	r2, [pc, #188]	; (8001a18 <checkImplementation+0x164>)
 800195c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001960:	2000      	movs	r0, #0
 8001962:	4798      	blx	r3
 8001964:	4603      	mov	r3, r0
 8001966:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
	if(ret == AOC_RETURN_OK)
 800196a:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 800196e:	2b00      	cmp	r3, #0
 8001970:	d105      	bne.n	800197e <checkImplementation+0xca>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Implemented\n", strlen("\tState: Implemented\n"));
 8001972:	2214      	movs	r2, #20
 8001974:	4929      	ldr	r1, [pc, #164]	; (8001a1c <checkImplementation+0x168>)
 8001976:	2002      	movs	r0, #2
 8001978:	f7ff fb10 	bl	8000f9c <AdventOfCode_print>
 800197c:	e004      	b.n	8001988 <checkImplementation+0xd4>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 800197e:	2218      	movs	r2, #24
 8001980:	4927      	ldr	r1, [pc, #156]	; (8001a20 <checkImplementation+0x16c>)
 8001982:	2002      	movs	r0, #2
 8001984:	f7ff fb0a 	bl	8000f9c <AdventOfCode_print>

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 8001988:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800198c:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 8001990:	4924      	ldr	r1, [pc, #144]	; (8001a24 <checkImplementation+0x170>)
 8001992:	4618      	mov	r0, r3
 8001994:	f015 f88c 	bl	8016ab0 <siprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 8001998:	1d3a      	adds	r2, r7, #4
 800199a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f013 f88a 	bl	8014aba <f_stat>
 80019a6:	4603      	mov	r3, r0
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d105      	bne.n	80019b8 <checkImplementation+0x104>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Present\n", strlen("\tDebug: Present\n"));
 80019ac:	2210      	movs	r2, #16
 80019ae:	491e      	ldr	r1, [pc, #120]	; (8001a28 <checkImplementation+0x174>)
 80019b0:	2002      	movs	r0, #2
 80019b2:	f7ff faf3 	bl	8000f9c <AdventOfCode_print>
 80019b6:	e004      	b.n	80019c2 <checkImplementation+0x10e>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 80019b8:	220f      	movs	r2, #15
 80019ba:	491c      	ldr	r1, [pc, #112]	; (8001a2c <checkImplementation+0x178>)
 80019bc:	2002      	movs	r0, #2
 80019be:	f7ff faed 	bl	8000f9c <AdventOfCode_print>

	// check release file
	sprintf(buffer, "day%ld.txt", day);
 80019c2:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80019c6:	f8d7 2520 	ldr.w	r2, [r7, #1312]	; 0x520
 80019ca:	4919      	ldr	r1, [pc, #100]	; (8001a30 <checkImplementation+0x17c>)
 80019cc:	4618      	mov	r0, r3
 80019ce:	f015 f86f 	bl	8016ab0 <siprintf>
	if(f_stat(buffer, &fno) == FR_OK)
 80019d2:	1d3a      	adds	r2, r7, #4
 80019d4:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80019d8:	4611      	mov	r1, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	f013 f86d 	bl	8014aba <f_stat>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d105      	bne.n	80019f2 <checkImplementation+0x13e>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Present\n", strlen("\tRelease: Present\n"));
 80019e6:	2212      	movs	r2, #18
 80019e8:	4912      	ldr	r1, [pc, #72]	; (8001a34 <checkImplementation+0x180>)
 80019ea:	2002      	movs	r0, #2
 80019ec:	f7ff fad6 	bl	8000f9c <AdventOfCode_print>
 80019f0:	e004      	b.n	80019fc <checkImplementation+0x148>
	else AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 80019f2:	2211      	movs	r2, #17
 80019f4:	4910      	ldr	r1, [pc, #64]	; (8001a38 <checkImplementation+0x184>)
 80019f6:	2002      	movs	r0, #2
 80019f8:	f7ff fad0 	bl	8000f9c <AdventOfCode_print>
}
 80019fc:	f507 67a5 	add.w	r7, r7, #1320	; 0x528
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	200026e4 	.word	0x200026e4
 8001a08:	20002ae4 	.word	0x20002ae4
 8001a0c:	08019394 	.word	0x08019394
 8001a10:	080193ac 	.word	0x080193ac
 8001a14:	080193c8 	.word	0x080193c8
 8001a18:	20002ae8 	.word	0x20002ae8
 8001a1c:	080193dc 	.word	0x080193dc
 8001a20:	080193f4 	.word	0x080193f4
 8001a24:	08019410 	.word	0x08019410
 8001a28:	0801941c 	.word	0x0801941c
 8001a2c:	08019430 	.word	0x08019430
 8001a30:	08019440 	.word	0x08019440
 8001a34:	0801944c 	.word	0x0801944c
 8001a38:	08019460 	.word	0x08019460

08001a3c <runDebugImplementation>:

void runDebugImplementation()
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	f5ad 6da6 	sub.w	sp, sp, #1328	; 0x530
 8001a42:	af00      	add	r7, sp, #0
	// fetch variable
	uint8_t *ptr;
	for(ptr=usb_rx_buffer; *ptr!=' '&&ptr<(usb_rx_buffer+1024); ptr++);
 8001a44:	4b64      	ldr	r3, [pc, #400]	; (8001bd8 <runDebugImplementation+0x19c>)
 8001a46:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8001a4a:	e004      	b.n	8001a56 <runDebugImplementation+0x1a>
 8001a4c:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001a50:	3301      	adds	r3, #1
 8001a52:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8001a56:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b20      	cmp	r3, #32
 8001a5e:	d004      	beq.n	8001a6a <runDebugImplementation+0x2e>
 8001a60:	4a5e      	ldr	r2, [pc, #376]	; (8001bdc <runDebugImplementation+0x1a0>)
 8001a62:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d3f0      	bcc.n	8001a4c <runDebugImplementation+0x10>
	ptr++;
 8001a6a:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001a6e:	3301      	adds	r3, #1
 8001a70:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c

	// no value given
	if(*ptr == '\0')
 8001a74:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d105      	bne.n	8001a8a <runDebugImplementation+0x4e>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 8001a7e:	2215      	movs	r2, #21
 8001a80:	4957      	ldr	r1, [pc, #348]	; (8001be0 <runDebugImplementation+0x1a4>)
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7ff fa8a 	bl	8000f9c <AdventOfCode_print>
		return;
 8001a88:	e0a2      	b.n	8001bd0 <runDebugImplementation+0x194>
	}

	// check value
	int32_t day = atoi((char*)ptr);
 8001a8a:	f8d7 052c 	ldr.w	r0, [r7, #1324]	; 0x52c
 8001a8e:	f014 fa61 	bl	8015f54 <atoi>
 8001a92:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
	if(day > 25 || day <= 0)
 8001a96:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001a9a:	2b19      	cmp	r3, #25
 8001a9c:	dc03      	bgt.n	8001aa6 <runDebugImplementation+0x6a>
 8001a9e:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	dc05      	bgt.n	8001ab2 <runDebugImplementation+0x76>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 8001aa6:	221a      	movs	r2, #26
 8001aa8:	494e      	ldr	r1, [pc, #312]	; (8001be4 <runDebugImplementation+0x1a8>)
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f7ff fa76 	bl	8000f9c <AdventOfCode_print>
		return;
 8001ab0:	e08e      	b.n	8001bd0 <runDebugImplementation+0x194>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing debug day %ld\n", day);
 8001ab2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ab6:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8001aba:	494b      	ldr	r1, [pc, #300]	; (8001be8 <runDebugImplementation+0x1ac>)
 8001abc:	4618      	mov	r0, r3
 8001abe:	f014 fff7 	bl	8016ab0 <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001ac2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f7fe fba2 	bl	8000210 <strlen>
 8001acc:	4603      	mov	r3, r0
 8001ace:	461a      	mov	r2, r3
 8001ad0:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f7ff fa60 	bl	8000f9c <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8001adc:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	4a42      	ldr	r2, [pc, #264]	; (8001bec <runDebugImplementation+0x1b0>)
 8001ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ae8:	2000      	movs	r0, #0
 8001aea:	4798      	blx	r3
 8001aec:	4603      	mov	r3, r0
 8001aee:	f887 3527 	strb.w	r3, [r7, #1319]	; 0x527
	if(ret != AOC_RETURN_OK)
 8001af2:	f897 3527 	ldrb.w	r3, [r7, #1319]	; 0x527
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d005      	beq.n	8001b06 <runDebugImplementation+0xca>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 8001afa:	2218      	movs	r2, #24
 8001afc:	493c      	ldr	r1, [pc, #240]	; (8001bf0 <runDebugImplementation+0x1b4>)
 8001afe:	2002      	movs	r0, #2
 8001b00:	f7ff fa4c 	bl	8000f9c <AdventOfCode_print>
		return;
 8001b04:	e064      	b.n	8001bd0 <runDebugImplementation+0x194>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ldt.txt", day);
 8001b06:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b0a:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8001b0e:	4939      	ldr	r1, [pc, #228]	; (8001bf4 <runDebugImplementation+0x1b8>)
 8001b10:	4618      	mov	r0, r3
 8001b12:	f014 ffcd 	bl	8016ab0 <siprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 8001b16:	463a      	mov	r2, r7
 8001b18:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b1c:	4611      	mov	r1, r2
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f012 ffcb 	bl	8014aba <f_stat>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d005      	beq.n	8001b36 <runDebugImplementation+0xfa>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tDebug: Absent\n", strlen("\tDebug: Absent\n"));
 8001b2a:	220f      	movs	r2, #15
 8001b2c:	4932      	ldr	r1, [pc, #200]	; (8001bf8 <runDebugImplementation+0x1bc>)
 8001b2e:	2002      	movs	r0, #2
 8001b30:	f7ff fa34 	bl	8000f9c <AdventOfCode_print>
		return;
 8001b34:	e04c      	b.n	8001bd0 <runDebugImplementation+0x194>
	}

	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 8001b36:	2207      	movs	r2, #7
 8001b38:	4930      	ldr	r1, [pc, #192]	; (8001bfc <runDebugImplementation+0x1c0>)
 8001b3a:	2002      	movs	r0, #2
 8001b3c:	f7ff fa2e 	bl	8000f9c <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 8001b40:	f001 fa9e 	bl	8003080 <HAL_GetTick>
 8001b44:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_DEBUG_VERBOSE);
 8001b48:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	4a27      	ldr	r2, [pc, #156]	; (8001bec <runDebugImplementation+0x1b0>)
 8001b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b54:	2002      	movs	r0, #2
 8001b56:	4798      	blx	r3
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
	uint32_t end = HAL_GetTick();
 8001b5e:	f001 fa8f 	bl	8003080 <HAL_GetTick>
 8001b62:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
	if(dret == AOC_RETURN_OK)
 8001b66:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d118      	bne.n	8001ba0 <runDebugImplementation+0x164>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 8001b6e:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8001b72:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8001b76:	1ad2      	subs	r2, r2, r3
 8001b78:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b7c:	4920      	ldr	r1, [pc, #128]	; (8001c00 <runDebugImplementation+0x1c4>)
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f014 ff96 	bl	8016ab0 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001b84:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7fe fb41 	bl	8000210 <strlen>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	461a      	mov	r2, r3
 8001b92:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001b96:	4619      	mov	r1, r3
 8001b98:	2002      	movs	r0, #2
 8001b9a:	f7ff f9ff 	bl	8000f9c <AdventOfCode_print>
 8001b9e:	e017      	b.n	8001bd0 <runDebugImplementation+0x194>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 8001ba0:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8001ba4:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8001ba8:	1ad2      	subs	r2, r2, r3
 8001baa:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bae:	4915      	ldr	r1, [pc, #84]	; (8001c04 <runDebugImplementation+0x1c8>)
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f014 ff7d 	bl	8016ab0 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001bb6:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bba:	4618      	mov	r0, r3
 8001bbc:	f7fe fb28 	bl	8000210 <strlen>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001bc8:	4619      	mov	r1, r3
 8001bca:	2002      	movs	r0, #2
 8001bcc:	f7ff f9e6 	bl	8000f9c <AdventOfCode_print>
	}
}
 8001bd0:	f507 67a6 	add.w	r7, r7, #1328	; 0x530
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	200026e4 	.word	0x200026e4
 8001bdc:	20002ae4 	.word	0x20002ae4
 8001be0:	08019394 	.word	0x08019394
 8001be4:	080193ac 	.word	0x080193ac
 8001be8:	08019474 	.word	0x08019474
 8001bec:	20002ae8 	.word	0x20002ae8
 8001bf0:	080193f4 	.word	0x080193f4
 8001bf4:	08019410 	.word	0x08019410
 8001bf8:	08019430 	.word	0x08019430
 8001bfc:	08019490 	.word	0x08019490
 8001c00:	08019498 	.word	0x08019498
 8001c04:	080194ac 	.word	0x080194ac

08001c08 <runReleaseImplementation>:

void runReleaseImplementation()
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	f5ad 6da6 	sub.w	sp, sp, #1328	; 0x530
 8001c0e:	af00      	add	r7, sp, #0
	// fetch variable
	uint8_t *ptr;
	for(ptr=usb_rx_buffer; *ptr!=' '&&ptr<(usb_rx_buffer+1024); ptr++);
 8001c10:	4b64      	ldr	r3, [pc, #400]	; (8001da4 <runReleaseImplementation+0x19c>)
 8001c12:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8001c16:	e004      	b.n	8001c22 <runReleaseImplementation+0x1a>
 8001c18:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001c1c:	3301      	adds	r3, #1
 8001c1e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
 8001c22:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b20      	cmp	r3, #32
 8001c2a:	d004      	beq.n	8001c36 <runReleaseImplementation+0x2e>
 8001c2c:	4a5e      	ldr	r2, [pc, #376]	; (8001da8 <runReleaseImplementation+0x1a0>)
 8001c2e:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d3f0      	bcc.n	8001c18 <runReleaseImplementation+0x10>
	ptr++;
 8001c36:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001c3a:	3301      	adds	r3, #1
 8001c3c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c

	// no value given
	if(*ptr == '\0')
 8001c40:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d105      	bne.n	8001c56 <runReleaseImplementation+0x4e>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "No day number given!\n", strlen("No day number given!\n"));
 8001c4a:	2215      	movs	r2, #21
 8001c4c:	4957      	ldr	r1, [pc, #348]	; (8001dac <runReleaseImplementation+0x1a4>)
 8001c4e:	2002      	movs	r0, #2
 8001c50:	f7ff f9a4 	bl	8000f9c <AdventOfCode_print>
		return;
 8001c54:	e0a2      	b.n	8001d9c <runReleaseImplementation+0x194>
	}

	// check value
	int32_t day = atoi((char*)ptr);
 8001c56:	f8d7 052c 	ldr.w	r0, [r7, #1324]	; 0x52c
 8001c5a:	f014 f97b 	bl	8015f54 <atoi>
 8001c5e:	f8c7 0528 	str.w	r0, [r7, #1320]	; 0x528
	if(day > 25 || day <= 0)
 8001c62:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001c66:	2b19      	cmp	r3, #25
 8001c68:	dc03      	bgt.n	8001c72 <runReleaseImplementation+0x6a>
 8001c6a:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	dc05      	bgt.n	8001c7e <runReleaseImplementation+0x76>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Invalid day number given!\n", strlen("Invalid day number given!\n"));
 8001c72:	221a      	movs	r2, #26
 8001c74:	494e      	ldr	r1, [pc, #312]	; (8001db0 <runReleaseImplementation+0x1a8>)
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7ff f990 	bl	8000f9c <AdventOfCode_print>
		return;
 8001c7c:	e08e      	b.n	8001d9c <runReleaseImplementation+0x194>
	}

	// check implementation
	char buffer[1024];
	sprintf(buffer, "Executing release day %ld\n", day);
 8001c7e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c82:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8001c86:	494b      	ldr	r1, [pc, #300]	; (8001db4 <runReleaseImplementation+0x1ac>)
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f014 ff11 	bl	8016ab0 <siprintf>
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001c8e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fabc 	bl	8000210 <strlen>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	2002      	movs	r0, #2
 8001ca4:	f7ff f97a 	bl	8000f9c <AdventOfCode_print>

	// check implementationday
	AdventOfCode_return_t ret = aoc.aoc_func_list[day - 1](AOC_CONFIG_TEST);
 8001ca8:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001cac:	3b01      	subs	r3, #1
 8001cae:	4a42      	ldr	r2, [pc, #264]	; (8001db8 <runReleaseImplementation+0x1b0>)
 8001cb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb4:	2000      	movs	r0, #0
 8001cb6:	4798      	blx	r3
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f887 3527 	strb.w	r3, [r7, #1319]	; 0x527
	if(ret != AOC_RETURN_OK)
 8001cbe:	f897 3527 	ldrb.w	r3, [r7, #1319]	; 0x527
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d005      	beq.n	8001cd2 <runReleaseImplementation+0xca>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tState: Not implemented\n", strlen("\tState: Not implemented\n"));
 8001cc6:	2218      	movs	r2, #24
 8001cc8:	493c      	ldr	r1, [pc, #240]	; (8001dbc <runReleaseImplementation+0x1b4>)
 8001cca:	2002      	movs	r0, #2
 8001ccc:	f7ff f966 	bl	8000f9c <AdventOfCode_print>
		return;
 8001cd0:	e064      	b.n	8001d9c <runReleaseImplementation+0x194>
	}

	// check debug file
	FILINFO fno;
	sprintf(buffer, "day%ld.txt", day);
 8001cd2:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001cd6:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8001cda:	4939      	ldr	r1, [pc, #228]	; (8001dc0 <runReleaseImplementation+0x1b8>)
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f014 fee7 	bl	8016ab0 <siprintf>
	if(f_stat(buffer, &fno) != FR_OK)
 8001ce2:	463a      	mov	r2, r7
 8001ce4:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001ce8:	4611      	mov	r1, r2
 8001cea:	4618      	mov	r0, r3
 8001cec:	f012 fee5 	bl	8014aba <f_stat>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d005      	beq.n	8001d02 <runReleaseImplementation+0xfa>
	{
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "\tRelease: Absent\n", strlen("\tRelease: Absent\n"));
 8001cf6:	2211      	movs	r2, #17
 8001cf8:	4932      	ldr	r1, [pc, #200]	; (8001dc4 <runReleaseImplementation+0x1bc>)
 8001cfa:	2002      	movs	r0, #2
 8001cfc:	f7ff f94e 	bl	8000f9c <AdventOfCode_print>
		return;
 8001d00:	e04c      	b.n	8001d9c <runReleaseImplementation+0x194>
	}


	// split line
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Start:\n", strlen("Start:\n"));
 8001d02:	2207      	movs	r2, #7
 8001d04:	4930      	ldr	r1, [pc, #192]	; (8001dc8 <runReleaseImplementation+0x1c0>)
 8001d06:	2002      	movs	r0, #2
 8001d08:	f7ff f948 	bl	8000f9c <AdventOfCode_print>

	// execute debug mode day
	uint32_t start = HAL_GetTick();
 8001d0c:	f001 f9b8 	bl	8003080 <HAL_GetTick>
 8001d10:	f8c7 0520 	str.w	r0, [r7, #1312]	; 0x520
	AdventOfCode_return_t dret = aoc.aoc_func_list[day - 1](AOC_CONFIG_RELEASE_VERBOSE);
 8001d14:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8001d18:	3b01      	subs	r3, #1
 8001d1a:	4a27      	ldr	r2, [pc, #156]	; (8001db8 <runReleaseImplementation+0x1b0>)
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	2004      	movs	r0, #4
 8001d22:	4798      	blx	r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	f887 351f 	strb.w	r3, [r7, #1311]	; 0x51f
	uint32_t end = HAL_GetTick();
 8001d2a:	f001 f9a9 	bl	8003080 <HAL_GetTick>
 8001d2e:	f8c7 0518 	str.w	r0, [r7, #1304]	; 0x518
	if(dret == AOC_RETURN_OK)
 8001d32:	f897 351f 	ldrb.w	r3, [r7, #1311]	; 0x51f
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d118      	bne.n	8001d6c <runReleaseImplementation+0x164>
	{
		sprintf(buffer, "Succesfull: %ld ms\n", end - start);
 8001d3a:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8001d3e:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8001d42:	1ad2      	subs	r2, r2, r3
 8001d44:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d48:	4920      	ldr	r1, [pc, #128]	; (8001dcc <runReleaseImplementation+0x1c4>)
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f014 feb0 	bl	8016ab0 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001d50:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d54:	4618      	mov	r0, r3
 8001d56:	f7fe fa5b 	bl	8000210 <strlen>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d62:	4619      	mov	r1, r3
 8001d64:	2002      	movs	r0, #2
 8001d66:	f7ff f919 	bl	8000f9c <AdventOfCode_print>
 8001d6a:	e017      	b.n	8001d9c <runReleaseImplementation+0x194>
	}
	else
	{
		sprintf(buffer, "Failed: %ld ms\n", end - start);
 8001d6c:	f8d7 2518 	ldr.w	r2, [r7, #1304]	; 0x518
 8001d70:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 8001d74:	1ad2      	subs	r2, r2, r3
 8001d76:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d7a:	4915      	ldr	r1, [pc, #84]	; (8001dd0 <runReleaseImplementation+0x1c8>)
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f014 fe97 	bl	8016ab0 <siprintf>
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, buffer, strlen(buffer));
 8001d82:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7fe fa42 	bl	8000210 <strlen>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	461a      	mov	r2, r3
 8001d90:	f507 738c 	add.w	r3, r7, #280	; 0x118
 8001d94:	4619      	mov	r1, r3
 8001d96:	2002      	movs	r0, #2
 8001d98:	f7ff f900 	bl	8000f9c <AdventOfCode_print>
	}
}
 8001d9c:	f507 67a6 	add.w	r7, r7, #1328	; 0x530
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200026e4 	.word	0x200026e4
 8001da8:	20002ae4 	.word	0x20002ae4
 8001dac:	08019394 	.word	0x08019394
 8001db0:	080193ac 	.word	0x080193ac
 8001db4:	080194bc 	.word	0x080194bc
 8001db8:	20002ae8 	.word	0x20002ae8
 8001dbc:	080193f4 	.word	0x080193f4
 8001dc0:	08019440 	.word	0x08019440
 8001dc4:	08019460 	.word	0x08019460
 8001dc8:	08019490 	.word	0x08019490
 8001dcc:	08019498 	.word	0x08019498
 8001dd0:	080194ac 	.word	0x080194ac

08001dd4 <USBD_HandleCommands>:

void USBD_HandleCommands()
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	af00      	add	r7, sp, #0
	// check if message is valid
	if(!usb_rx_ready)
 8001dd8:	4b2b      	ldr	r3, [pc, #172]	; (8001e88 <USBD_HandleCommands+0xb4>)
 8001dda:	781b      	ldrb	r3, [r3, #0]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d050      	beq.n	8001e82 <USBD_HandleCommands+0xae>
		return;

	// echo message
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, (char*)usb_rx_buffer, strlen((char*)usb_rx_buffer));
 8001de0:	482a      	ldr	r0, [pc, #168]	; (8001e8c <USBD_HandleCommands+0xb8>)
 8001de2:	f7fe fa15 	bl	8000210 <strlen>
 8001de6:	4603      	mov	r3, r0
 8001de8:	461a      	mov	r2, r3
 8001dea:	4928      	ldr	r1, [pc, #160]	; (8001e8c <USBD_HandleCommands+0xb8>)
 8001dec:	2002      	movs	r0, #2
 8001dee:	f7ff f8d5 	bl	8000f9c <AdventOfCode_print>

	// process command
	switch(usb_rx_buffer[0])
 8001df2:	4b26      	ldr	r3, [pc, #152]	; (8001e8c <USBD_HandleCommands+0xb8>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	3b63      	subs	r3, #99	; 0x63
 8001df8:	2b12      	cmp	r3, #18
 8001dfa:	d832      	bhi.n	8001e62 <USBD_HandleCommands+0x8e>
 8001dfc:	a201      	add	r2, pc, #4	; (adr r2, 8001e04 <USBD_HandleCommands+0x30>)
 8001dfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e02:	bf00      	nop
 8001e04:	08001e51 	.word	0x08001e51
 8001e08:	08001e57 	.word	0x08001e57
 8001e0c:	08001e63 	.word	0x08001e63
 8001e10:	08001e63 	.word	0x08001e63
 8001e14:	08001e63 	.word	0x08001e63
 8001e18:	08001e63 	.word	0x08001e63
 8001e1c:	08001e63 	.word	0x08001e63
 8001e20:	08001e63 	.word	0x08001e63
 8001e24:	08001e63 	.word	0x08001e63
 8001e28:	08001e63 	.word	0x08001e63
 8001e2c:	08001e63 	.word	0x08001e63
 8001e30:	08001e63 	.word	0x08001e63
 8001e34:	08001e63 	.word	0x08001e63
 8001e38:	08001e63 	.word	0x08001e63
 8001e3c:	08001e63 	.word	0x08001e63
 8001e40:	08001e5d 	.word	0x08001e5d
 8001e44:	08001e63 	.word	0x08001e63
 8001e48:	08001e63 	.word	0x08001e63
 8001e4c:	08001e6f 	.word	0x08001e6f
	{
	case USB_COMMAND_CHECK:
		checkImplementation();
 8001e50:	f7ff fd30 	bl	80018b4 <checkImplementation>
		break;
 8001e54:	e00c      	b.n	8001e70 <USBD_HandleCommands+0x9c>

	case USB_COMMAND_DEBUG:
		runDebugImplementation();
 8001e56:	f7ff fdf1 	bl	8001a3c <runDebugImplementation>
		break;
 8001e5a:	e009      	b.n	8001e70 <USBD_HandleCommands+0x9c>

	case USB_COMMAND_RELEASE:
		runReleaseImplementation();
 8001e5c:	f7ff fed4 	bl	8001c08 <runReleaseImplementation>
		break;
 8001e60:	e006      	b.n	8001e70 <USBD_HandleCommands+0x9c>
		break;



	default:
		AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, "Unkown command!\n", strlen("Unkown command!\n"));
 8001e62:	2210      	movs	r2, #16
 8001e64:	490a      	ldr	r1, [pc, #40]	; (8001e90 <USBD_HandleCommands+0xbc>)
 8001e66:	2002      	movs	r0, #2
 8001e68:	f7ff f898 	bl	8000f9c <AdventOfCode_print>
		break;
 8001e6c:	e000      	b.n	8001e70 <USBD_HandleCommands+0x9c>
		break;
 8001e6e:	bf00      	nop
	}

	// print new cursor
	AdventOfCode_print(AOC_CONFIG_DEBUG_VERBOSE, ">", 1);
 8001e70:	2201      	movs	r2, #1
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <USBD_HandleCommands+0xc0>)
 8001e74:	2002      	movs	r0, #2
 8001e76:	f7ff f891 	bl	8000f9c <AdventOfCode_print>

	// clear receive flag
	usb_rx_ready = 0;
 8001e7a:	4b03      	ldr	r3, [pc, #12]	; (8001e88 <USBD_HandleCommands+0xb4>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
 8001e80:	e000      	b.n	8001e84 <USBD_HandleCommands+0xb0>
		return;
 8001e82:	bf00      	nop
}
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20002ae6 	.word	0x20002ae6
 8001e8c:	200026e4 	.word	0x200026e4
 8001e90:	080194d8 	.word	0x080194d8
 8001e94:	080194ec 	.word	0x080194ec

08001e98 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b096      	sub	sp, #88	; 0x58
 8001e9c:	af16      	add	r7, sp, #88	; 0x58
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e9e:	f001 f89e 	bl	8002fde <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ea2:	f000 f891 	bl	8001fc8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ea6:	f000 fae1 	bl	800246c <MX_GPIO_Init>
	MX_DMA_Init();
 8001eaa:	f000 fa4f 	bl	800234c <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8001eae:	f000 f959 	bl	8002164 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8001eb2:	f00b fdc5 	bl	800da40 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8001eb6:	f012 ff99 	bl	8014dec <MX_USB_DEVICE_Init>
	MX_USB_HOST_Init();
 8001eba:	f013 fd33 	bl	8015924 <MX_USB_HOST_Init>
	MX_USART1_UART_Init();
 8001ebe:	f000 fa15 	bl	80022ec <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8001ec2:	f000 f971 	bl	80021a8 <MX_TIM1_Init>
	MX_TIM11_Init();
 8001ec6:	f000 f9c3 	bl	8002250 <MX_TIM11_Init>
	MX_ADC1_Init();
 8001eca:	f000 f8eb 	bl	80020a4 <MX_ADC1_Init>
	MX_FMC_Init();
 8001ece:	f000 fa6b 	bl	80023a8 <MX_FMC_Init>
	/* USER CODE BEGIN 2 */

	// system startup
	System_init(&system_state);
 8001ed2:	4821      	ldr	r0, [pc, #132]	; (8001f58 <main+0xc0>)
 8001ed4:	f7ff fbd6 	bl	8001684 <System_init>

	// system init terminal log
	System_initLog(&system_state);
 8001ed8:	481f      	ldr	r0, [pc, #124]	; (8001f58 <main+0xc0>)
 8001eda:	f7ff fc3f 	bl	800175c <System_initLog>
	System_selfTestLog(&system_state);
 8001ede:	481e      	ldr	r0, [pc, #120]	; (8001f58 <main+0xc0>)
 8001ee0:	f7ff fc5c 	bl	800179c <System_selfTestLog>

	// init AOC
	AdventOfCode_init(&aoc,
 8001ee4:	4b1d      	ldr	r3, [pc, #116]	; (8001f5c <main+0xc4>)
 8001ee6:	9315      	str	r3, [sp, #84]	; 0x54
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <main+0xc8>)
 8001eea:	9314      	str	r3, [sp, #80]	; 0x50
 8001eec:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <main+0xcc>)
 8001eee:	9313      	str	r3, [sp, #76]	; 0x4c
 8001ef0:	4b1d      	ldr	r3, [pc, #116]	; (8001f68 <main+0xd0>)
 8001ef2:	9312      	str	r3, [sp, #72]	; 0x48
 8001ef4:	4b1d      	ldr	r3, [pc, #116]	; (8001f6c <main+0xd4>)
 8001ef6:	9311      	str	r3, [sp, #68]	; 0x44
 8001ef8:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <main+0xd8>)
 8001efa:	9310      	str	r3, [sp, #64]	; 0x40
 8001efc:	4b1d      	ldr	r3, [pc, #116]	; (8001f74 <main+0xdc>)
 8001efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8001f00:	4b1d      	ldr	r3, [pc, #116]	; (8001f78 <main+0xe0>)
 8001f02:	930e      	str	r3, [sp, #56]	; 0x38
 8001f04:	4b1d      	ldr	r3, [pc, #116]	; (8001f7c <main+0xe4>)
 8001f06:	930d      	str	r3, [sp, #52]	; 0x34
 8001f08:	4b1d      	ldr	r3, [pc, #116]	; (8001f80 <main+0xe8>)
 8001f0a:	930c      	str	r3, [sp, #48]	; 0x30
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <main+0xec>)
 8001f0e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f10:	4b1d      	ldr	r3, [pc, #116]	; (8001f88 <main+0xf0>)
 8001f12:	930a      	str	r3, [sp, #40]	; 0x28
 8001f14:	4b1d      	ldr	r3, [pc, #116]	; (8001f8c <main+0xf4>)
 8001f16:	9309      	str	r3, [sp, #36]	; 0x24
 8001f18:	4b1d      	ldr	r3, [pc, #116]	; (8001f90 <main+0xf8>)
 8001f1a:	9308      	str	r3, [sp, #32]
 8001f1c:	4b1d      	ldr	r3, [pc, #116]	; (8001f94 <main+0xfc>)
 8001f1e:	9307      	str	r3, [sp, #28]
 8001f20:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <main+0x100>)
 8001f22:	9306      	str	r3, [sp, #24]
 8001f24:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <main+0x104>)
 8001f26:	9305      	str	r3, [sp, #20]
 8001f28:	4b1d      	ldr	r3, [pc, #116]	; (8001fa0 <main+0x108>)
 8001f2a:	9304      	str	r3, [sp, #16]
 8001f2c:	4b1d      	ldr	r3, [pc, #116]	; (8001fa4 <main+0x10c>)
 8001f2e:	9303      	str	r3, [sp, #12]
 8001f30:	4b1d      	ldr	r3, [pc, #116]	; (8001fa8 <main+0x110>)
 8001f32:	9302      	str	r3, [sp, #8]
 8001f34:	4b1d      	ldr	r3, [pc, #116]	; (8001fac <main+0x114>)
 8001f36:	9301      	str	r3, [sp, #4]
 8001f38:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <main+0x118>)
 8001f3a:	9300      	str	r3, [sp, #0]
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <main+0x11c>)
 8001f3e:	4a1e      	ldr	r2, [pc, #120]	; (8001fb8 <main+0x120>)
 8001f40:	491e      	ldr	r1, [pc, #120]	; (8001fbc <main+0x124>)
 8001f42:	481f      	ldr	r0, [pc, #124]	; (8001fc0 <main+0x128>)
 8001f44:	f7fe ffd2 	bl	8000eec <AdventOfCode_init>
			AoC_Day_11,	AoC_Day_12,	AoC_Day_13,	AoC_Day_14,	AoC_Day_15,
			AoC_Day_16,	AoC_Day_17,	AoC_Day_18,	AoC_Day_19,	AoC_Day_20,
			AoC_Day_21,	AoC_Day_22,	AoC_Day_23,	AoC_Day_24,	AoC_Day_25);

	extern USBD_HandleTypeDef hUsbDeviceHS;
	USBD_Start(&hUsbDeviceHS);
 8001f48:	481e      	ldr	r0, [pc, #120]	; (8001fc4 <main+0x12c>)
 8001f4a:	f00c fc47 	bl	800e7dc <USBD_Start>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		USBD_HandleCommands();
 8001f4e:	f7ff ff41 	bl	8001dd4 <USBD_HandleCommands>

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8001f52:	f013 fd0d 	bl	8015970 <MX_USB_HOST_Process>
		USBD_HandleCommands();
 8001f56:	e7fa      	b.n	8001f4e <main+0xb6>
 8001f58:	20000670 	.word	0x20000670
 8001f5c:	08001663 	.word	0x08001663
 8001f60:	08001641 	.word	0x08001641
 8001f64:	0800161f 	.word	0x0800161f
 8001f68:	080015fd 	.word	0x080015fd
 8001f6c:	080015db 	.word	0x080015db
 8001f70:	080015b9 	.word	0x080015b9
 8001f74:	08001597 	.word	0x08001597
 8001f78:	08001575 	.word	0x08001575
 8001f7c:	08001553 	.word	0x08001553
 8001f80:	08001531 	.word	0x08001531
 8001f84:	0800150f 	.word	0x0800150f
 8001f88:	080014ed 	.word	0x080014ed
 8001f8c:	080014cb 	.word	0x080014cb
 8001f90:	080014a9 	.word	0x080014a9
 8001f94:	08001487 	.word	0x08001487
 8001f98:	08001465 	.word	0x08001465
 8001f9c:	08001443 	.word	0x08001443
 8001fa0:	08001421 	.word	0x08001421
 8001fa4:	080013ff 	.word	0x080013ff
 8001fa8:	080013dd 	.word	0x080013dd
 8001fac:	080013bb 	.word	0x080013bb
 8001fb0:	08001399 	.word	0x08001399
 8001fb4:	08001377 	.word	0x08001377
 8001fb8:	08001355 	.word	0x08001355
 8001fbc:	08000fe9 	.word	0x08000fe9
 8001fc0:	20002ae8 	.word	0x20002ae8
 8001fc4:	20002d98 	.word	0x20002d98

08001fc8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b094      	sub	sp, #80	; 0x50
 8001fcc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001fce:	f107 0320 	add.w	r3, r7, #32
 8001fd2:	2230      	movs	r2, #48	; 0x30
 8001fd4:	2100      	movs	r1, #0
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	f014 f808 	bl	8015fec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001fdc:	f107 030c 	add.w	r3, r7, #12
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8001fec:	f005 f8f2 	bl	80071d4 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <SystemClock_Config+0xd4>)
 8001ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff4:	4a29      	ldr	r2, [pc, #164]	; (800209c <SystemClock_Config+0xd4>)
 8001ff6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ffa:	6413      	str	r3, [r2, #64]	; 0x40
 8001ffc:	4b27      	ldr	r3, [pc, #156]	; (800209c <SystemClock_Config+0xd4>)
 8001ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002000:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002004:	60bb      	str	r3, [r7, #8]
 8002006:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002008:	4b25      	ldr	r3, [pc, #148]	; (80020a0 <SystemClock_Config+0xd8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <SystemClock_Config+0xd8>)
 800200e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002012:	6013      	str	r3, [r2, #0]
 8002014:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <SystemClock_Config+0xd8>)
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002020:	2301      	movs	r3, #1
 8002022:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002024:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002028:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800202a:	2302      	movs	r3, #2
 800202c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800202e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002032:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8002034:	2308      	movs	r3, #8
 8002036:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8002038:	23d8      	movs	r3, #216	; 0xd8
 800203a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800203c:	2302      	movs	r3, #2
 800203e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8002040:	2309      	movs	r3, #9
 8002042:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002044:	f107 0320 	add.w	r3, r7, #32
 8002048:	4618      	mov	r0, r3
 800204a:	f005 f923 	bl	8007294 <HAL_RCC_OscConfig>
 800204e:	4603      	mov	r3, r0
 8002050:	2b00      	cmp	r3, #0
 8002052:	d001      	beq.n	8002058 <SystemClock_Config+0x90>
	{
		Error_Handler();
 8002054:	f000 fb3c 	bl	80026d0 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002058:	f005 f8cc 	bl	80071f4 <HAL_PWREx_EnableOverDrive>
 800205c:	4603      	mov	r3, r0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d001      	beq.n	8002066 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8002062:	f000 fb35 	bl	80026d0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002066:	230f      	movs	r3, #15
 8002068:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800206a:	2302      	movs	r3, #2
 800206c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800206e:	2300      	movs	r3, #0
 8002070:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002072:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002076:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002078:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800207c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800207e:	f107 030c 	add.w	r3, r7, #12
 8002082:	2107      	movs	r1, #7
 8002084:	4618      	mov	r0, r3
 8002086:	f005 fba9 	bl	80077dc <HAL_RCC_ClockConfig>
 800208a:	4603      	mov	r3, r0
 800208c:	2b00      	cmp	r3, #0
 800208e:	d001      	beq.n	8002094 <SystemClock_Config+0xcc>
	{
		Error_Handler();
 8002090:	f000 fb1e 	bl	80026d0 <Error_Handler>
	}
}
 8002094:	bf00      	nop
 8002096:	3750      	adds	r7, #80	; 0x50
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40023800 	.word	0x40023800
 80020a0:	40007000 	.word	0x40007000

080020a4 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80020aa:	463b      	mov	r3, r7
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80020b6:	4b28      	ldr	r3, [pc, #160]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020b8:	4a28      	ldr	r2, [pc, #160]	; (800215c <MX_ADC1_Init+0xb8>)
 80020ba:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80020bc:	4b26      	ldr	r3, [pc, #152]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020be:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80020c2:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80020c4:	4b24      	ldr	r3, [pc, #144]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020c6:	2200      	movs	r2, #0
 80020c8:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80020ca:	4b23      	ldr	r3, [pc, #140]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80020d0:	4b21      	ldr	r3, [pc, #132]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020d2:	2201      	movs	r2, #1
 80020d4:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80020d6:	4b20      	ldr	r3, [pc, #128]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80020de:	4b1e      	ldr	r3, [pc, #120]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80020e4:	4b1c      	ldr	r3, [pc, #112]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020e6:	4a1e      	ldr	r2, [pc, #120]	; (8002160 <MX_ADC1_Init+0xbc>)
 80020e8:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80020ea:	4b1b      	ldr	r3, [pc, #108]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80020f0:	4b19      	ldr	r3, [pc, #100]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020f2:	2202      	movs	r2, #2
 80020f4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80020f6:	4b18      	ldr	r3, [pc, #96]	; (8002158 <MX_ADC1_Init+0xb4>)
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020fe:	4b16      	ldr	r3, [pc, #88]	; (8002158 <MX_ADC1_Init+0xb4>)
 8002100:	2201      	movs	r2, #1
 8002102:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002104:	4814      	ldr	r0, [pc, #80]	; (8002158 <MX_ADC1_Init+0xb4>)
 8002106:	f000 ffeb 	bl	80030e0 <HAL_ADC_Init>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	d001      	beq.n	8002114 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8002110:	f000 fade 	bl	80026d0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002114:	2300      	movs	r3, #0
 8002116:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002118:	2301      	movs	r3, #1
 800211a:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 800211c:	2306      	movs	r3, #6
 800211e:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002120:	463b      	mov	r3, r7
 8002122:	4619      	mov	r1, r3
 8002124:	480c      	ldr	r0, [pc, #48]	; (8002158 <MX_ADC1_Init+0xb4>)
 8002126:	f001 f81f 	bl	8003168 <HAL_ADC_ConfigChannel>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8002130:	f000 face 	bl	80026d0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8002134:	2302      	movs	r3, #2
 8002136:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002138:	2302      	movs	r3, #2
 800213a:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800213c:	463b      	mov	r3, r7
 800213e:	4619      	mov	r1, r3
 8002140:	4805      	ldr	r0, [pc, #20]	; (8002158 <MX_ADC1_Init+0xb4>)
 8002142:	f001 f811 	bl	8003168 <HAL_ADC_ConfigChannel>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 800214c:	f000 fac0 	bl	80026d0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002150:	bf00      	nop
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	20000318 	.word	0x20000318
 800215c:	40012000 	.word	0x40012000
 8002160:	0f000001 	.word	0x0f000001

08002164 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8002168:	4b0d      	ldr	r3, [pc, #52]	; (80021a0 <MX_SDMMC1_SD_Init+0x3c>)
 800216a:	4a0e      	ldr	r2, [pc, #56]	; (80021a4 <MX_SDMMC1_SD_Init+0x40>)
 800216c:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002170:	2200      	movs	r2, #0
 8002172:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8002174:	4b0a      	ldr	r3, [pc, #40]	; (80021a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002176:	2200      	movs	r2, #0
 8002178:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800217a:	4b09      	ldr	r3, [pc, #36]	; (80021a0 <MX_SDMMC1_SD_Init+0x3c>)
 800217c:	2200      	movs	r2, #0
 800217e:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8002180:	4b07      	ldr	r3, [pc, #28]	; (80021a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002182:	2200      	movs	r2, #0
 8002184:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002188:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800218c:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 4;
 800218e:	4b04      	ldr	r3, [pc, #16]	; (80021a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002190:	2204      	movs	r2, #4
 8002192:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <MX_SDMMC1_SD_Init+0x3c>)
 8002196:	f006 f8fd 	bl	8008394 <HAL_SD_Init>
	/* USER CODE END SDMMC1_Init 2 */

}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	200003c0 	.word	0x200003c0
 80021a4:	40012c00 	.word	0x40012c00

080021a8 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b088      	sub	sp, #32
 80021ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021ae:	f107 0310 	add.w	r3, r7, #16
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021bc:	1d3b      	adds	r3, r7, #4
 80021be:	2200      	movs	r2, #0
 80021c0:	601a      	str	r2, [r3, #0]
 80021c2:	605a      	str	r2, [r3, #4]
 80021c4:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80021c6:	4b20      	ldr	r3, [pc, #128]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021c8:	4a20      	ldr	r2, [pc, #128]	; (800224c <MX_TIM1_Init+0xa4>)
 80021ca:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80021cc:	4b1e      	ldr	r3, [pc, #120]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021ce:	2200      	movs	r2, #0
 80021d0:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021d4:	2200      	movs	r2, #0
 80021d6:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021de:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021e0:	4b19      	ldr	r3, [pc, #100]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80021e6:	4b18      	ldr	r3, [pc, #96]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ec:	4b16      	ldr	r3, [pc, #88]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021f2:	4815      	ldr	r0, [pc, #84]	; (8002248 <MX_TIM1_Init+0xa0>)
 80021f4:	f007 f8a6 	bl	8009344 <HAL_TIM_Base_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 80021fe:	f000 fa67 	bl	80026d0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002202:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002206:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002208:	f107 0310 	add.w	r3, r7, #16
 800220c:	4619      	mov	r1, r3
 800220e:	480e      	ldr	r0, [pc, #56]	; (8002248 <MX_TIM1_Init+0xa0>)
 8002210:	f007 fa64 	bl	80096dc <HAL_TIM_ConfigClockSource>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 800221a:	f000 fa59 	bl	80026d0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002222:	2300      	movs	r3, #0
 8002224:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002226:	2300      	movs	r3, #0
 8002228:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800222a:	1d3b      	adds	r3, r7, #4
 800222c:	4619      	mov	r1, r3
 800222e:	4806      	ldr	r0, [pc, #24]	; (8002248 <MX_TIM1_Init+0xa0>)
 8002230:	f007 feb6 	bl	8009fa0 <HAL_TIMEx_MasterConfigSynchronization>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800223a:	f000 fa49 	bl	80026d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800223e:	bf00      	nop
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	20000504 	.word	0x20000504
 800224c:	40010000 	.word	0x40010000

08002250 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b088      	sub	sp, #32
 8002254:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 8002256:	1d3b      	adds	r3, r7, #4
 8002258:	2200      	movs	r2, #0
 800225a:	601a      	str	r2, [r3, #0]
 800225c:	605a      	str	r2, [r3, #4]
 800225e:	609a      	str	r2, [r3, #8]
 8002260:	60da      	str	r2, [r3, #12]
 8002262:	611a      	str	r2, [r3, #16]
 8002264:	615a      	str	r2, [r3, #20]
 8002266:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8002268:	4b1e      	ldr	r3, [pc, #120]	; (80022e4 <MX_TIM11_Init+0x94>)
 800226a:	4a1f      	ldr	r2, [pc, #124]	; (80022e8 <MX_TIM11_Init+0x98>)
 800226c:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 800226e:	4b1d      	ldr	r3, [pc, #116]	; (80022e4 <MX_TIM11_Init+0x94>)
 8002270:	2200      	movs	r2, #0
 8002272:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002274:	4b1b      	ldr	r3, [pc, #108]	; (80022e4 <MX_TIM11_Init+0x94>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 800227a:	4b1a      	ldr	r3, [pc, #104]	; (80022e4 <MX_TIM11_Init+0x94>)
 800227c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002280:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002282:	4b18      	ldr	r3, [pc, #96]	; (80022e4 <MX_TIM11_Init+0x94>)
 8002284:	2200      	movs	r2, #0
 8002286:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002288:	4b16      	ldr	r3, [pc, #88]	; (80022e4 <MX_TIM11_Init+0x94>)
 800228a:	2200      	movs	r2, #0
 800228c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 800228e:	4815      	ldr	r0, [pc, #84]	; (80022e4 <MX_TIM11_Init+0x94>)
 8002290:	f007 f858 	bl	8009344 <HAL_TIM_Base_Init>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d001      	beq.n	800229e <MX_TIM11_Init+0x4e>
	{
		Error_Handler();
 800229a:	f000 fa19 	bl	80026d0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800229e:	4811      	ldr	r0, [pc, #68]	; (80022e4 <MX_TIM11_Init+0x94>)
 80022a0:	f007 f8a7 	bl	80093f2 <HAL_TIM_PWM_Init>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_TIM11_Init+0x5e>
	{
		Error_Handler();
 80022aa:	f000 fa11 	bl	80026d0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80022ae:	2360      	movs	r3, #96	; 0x60
 80022b0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80022b2:	2300      	movs	r3, #0
 80022b4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	2200      	movs	r2, #0
 80022c2:	4619      	mov	r1, r3
 80022c4:	4807      	ldr	r0, [pc, #28]	; (80022e4 <MX_TIM11_Init+0x94>)
 80022c6:	f007 f8f5 	bl	80094b4 <HAL_TIM_PWM_ConfigChannel>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <MX_TIM11_Init+0x84>
	{
		Error_Handler();
 80022d0:	f000 f9fe 	bl	80026d0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 80022d4:	4803      	ldr	r0, [pc, #12]	; (80022e4 <MX_TIM11_Init+0x94>)
 80022d6:	f000 fc17 	bl	8002b08 <HAL_TIM_MspPostInit>

}
 80022da:	bf00      	nop
 80022dc:	3720      	adds	r7, #32
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000550 	.word	0x20000550
 80022e8:	40014800 	.word	0x40014800

080022ec <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80022f0:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_USART1_UART_Init+0x58>)
 80022f2:	4a15      	ldr	r2, [pc, #84]	; (8002348 <MX_USART1_UART_Init+0x5c>)
 80022f4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80022f6:	4b13      	ldr	r3, [pc, #76]	; (8002344 <MX_USART1_UART_Init+0x58>)
 80022f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022fc:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_USART1_UART_Init+0x58>)
 8002300:	2200      	movs	r2, #0
 8002302:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002304:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_USART1_UART_Init+0x58>)
 8002306:	2200      	movs	r2, #0
 8002308:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800230a:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <MX_USART1_UART_Init+0x58>)
 800230c:	2200      	movs	r2, #0
 800230e:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_USART1_UART_Init+0x58>)
 8002312:	220c      	movs	r2, #12
 8002314:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002316:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <MX_USART1_UART_Init+0x58>)
 8002318:	2200      	movs	r2, #0
 800231a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800231c:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_USART1_UART_Init+0x58>)
 800231e:	2200      	movs	r2, #0
 8002320:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002322:	4b08      	ldr	r3, [pc, #32]	; (8002344 <MX_USART1_UART_Init+0x58>)
 8002324:	2200      	movs	r2, #0
 8002326:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002328:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_USART1_UART_Init+0x58>)
 800232a:	2200      	movs	r2, #0
 800232c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800232e:	4805      	ldr	r0, [pc, #20]	; (8002344 <MX_USART1_UART_Init+0x58>)
 8002330:	f007 fec4 	bl	800a0bc <HAL_UART_Init>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d001      	beq.n	800233e <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800233a:	f000 f9c9 	bl	80026d0 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	2000059c 	.word	0x2000059c
 8002348:	40011000 	.word	0x40011000

0800234c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8002352:	4b14      	ldr	r3, [pc, #80]	; (80023a4 <MX_DMA_Init+0x58>)
 8002354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <MX_DMA_Init+0x58>)
 8002358:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800235c:	6313      	str	r3, [r2, #48]	; 0x30
 800235e:	4b11      	ldr	r3, [pc, #68]	; (80023a4 <MX_DMA_Init+0x58>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002362:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002366:	607b      	str	r3, [r7, #4]
 8002368:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800236a:	2200      	movs	r2, #0
 800236c:	2100      	movs	r1, #0
 800236e:	2038      	movs	r0, #56	; 0x38
 8002370:	f001 fa25 	bl	80037be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002374:	2038      	movs	r0, #56	; 0x38
 8002376:	f001 fa3e 	bl	80037f6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2100      	movs	r1, #0
 800237e:	203b      	movs	r0, #59	; 0x3b
 8002380:	f001 fa1d 	bl	80037be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002384:	203b      	movs	r0, #59	; 0x3b
 8002386:	f001 fa36 	bl	80037f6 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2100      	movs	r1, #0
 800238e:	2045      	movs	r0, #69	; 0x45
 8002390:	f001 fa15 	bl	80037be <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8002394:	2045      	movs	r0, #69	; 0x45
 8002396:	f001 fa2e 	bl	80037f6 <HAL_NVIC_EnableIRQ>

}
 800239a:	bf00      	nop
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	40023800 	.word	0x40023800

080023a8 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b088      	sub	sp, #32
 80023ac:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	2200      	movs	r2, #0
 80023b2:	601a      	str	r2, [r3, #0]
 80023b4:	605a      	str	r2, [r3, #4]
 80023b6:	609a      	str	r2, [r3, #8]
 80023b8:	60da      	str	r2, [r3, #12]
 80023ba:	611a      	str	r2, [r3, #16]
 80023bc:	615a      	str	r2, [r3, #20]
 80023be:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 80023c0:	4b28      	ldr	r3, [pc, #160]	; (8002464 <MX_FMC_Init+0xbc>)
 80023c2:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80023c6:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80023c8:	4b26      	ldr	r3, [pc, #152]	; (8002464 <MX_FMC_Init+0xbc>)
 80023ca:	4a27      	ldr	r2, [pc, #156]	; (8002468 <MX_FMC_Init+0xc0>)
 80023cc:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <MX_FMC_Init+0xbc>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80023d4:	4b23      	ldr	r3, [pc, #140]	; (8002464 <MX_FMC_Init+0xbc>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80023da:	4b22      	ldr	r3, [pc, #136]	; (8002464 <MX_FMC_Init+0xbc>)
 80023dc:	2204      	movs	r2, #4
 80023de:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80023e0:	4b20      	ldr	r3, [pc, #128]	; (8002464 <MX_FMC_Init+0xbc>)
 80023e2:	2210      	movs	r2, #16
 80023e4:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80023e6:	4b1f      	ldr	r3, [pc, #124]	; (8002464 <MX_FMC_Init+0xbc>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80023ec:	4b1d      	ldr	r3, [pc, #116]	; (8002464 <MX_FMC_Init+0xbc>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80023f2:	4b1c      	ldr	r3, [pc, #112]	; (8002464 <MX_FMC_Init+0xbc>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <MX_FMC_Init+0xbc>)
 80023fa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023fe:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8002400:	4b18      	ldr	r3, [pc, #96]	; (8002464 <MX_FMC_Init+0xbc>)
 8002402:	2200      	movs	r2, #0
 8002404:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8002406:	4b17      	ldr	r3, [pc, #92]	; (8002464 <MX_FMC_Init+0xbc>)
 8002408:	2200      	movs	r2, #0
 800240a:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 800240c:	4b15      	ldr	r3, [pc, #84]	; (8002464 <MX_FMC_Init+0xbc>)
 800240e:	2200      	movs	r2, #0
 8002410:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8002412:	4b14      	ldr	r3, [pc, #80]	; (8002464 <MX_FMC_Init+0xbc>)
 8002414:	2200      	movs	r2, #0
 8002416:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8002418:	4b12      	ldr	r3, [pc, #72]	; (8002464 <MX_FMC_Init+0xbc>)
 800241a:	2200      	movs	r2, #0
 800241c:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800241e:	4b11      	ldr	r3, [pc, #68]	; (8002464 <MX_FMC_Init+0xbc>)
 8002420:	2200      	movs	r2, #0
 8002422:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8002424:	4b0f      	ldr	r3, [pc, #60]	; (8002464 <MX_FMC_Init+0xbc>)
 8002426:	2200      	movs	r2, #0
 8002428:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 5;
 800242a:	2305      	movs	r3, #5
 800242c:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 800242e:	230f      	movs	r3, #15
 8002430:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 8;
 8002432:	2308      	movs	r3, #8
 8002434:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 1;
 8002436:	2301      	movs	r3, #1
 8002438:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 800243a:	2310      	movs	r3, #16
 800243c:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 800243e:	2311      	movs	r3, #17
 8002440:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002446:	1d3b      	adds	r3, r7, #4
 8002448:	2200      	movs	r2, #0
 800244a:	4619      	mov	r1, r3
 800244c:	4805      	ldr	r0, [pc, #20]	; (8002464 <MX_FMC_Init+0xbc>)
 800244e:	f006 ff31 	bl	80092b4 <HAL_SRAM_Init>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d001      	beq.n	800245c <MX_FMC_Init+0xb4>
	{
		Error_Handler( );
 8002458:	f000 f93a 	bl	80026d0 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 800245c:	bf00      	nop
 800245e:	3720      	adds	r7, #32
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	20000624 	.word	0x20000624
 8002468:	a0000104 	.word	0xa0000104

0800246c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08e      	sub	sp, #56	; 0x38
 8002470:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8002482:	4b8b      	ldr	r3, [pc, #556]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002486:	4a8a      	ldr	r2, [pc, #552]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002488:	f043 0310 	orr.w	r3, r3, #16
 800248c:	6313      	str	r3, [r2, #48]	; 0x30
 800248e:	4b88      	ldr	r3, [pc, #544]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	f003 0310 	and.w	r3, r3, #16
 8002496:	623b      	str	r3, [r7, #32]
 8002498:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800249a:	4b85      	ldr	r3, [pc, #532]	; (80026b0 <MX_GPIO_Init+0x244>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a84      	ldr	r2, [pc, #528]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b82      	ldr	r3, [pc, #520]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	61fb      	str	r3, [r7, #28]
 80024b0:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80024b2:	4b7f      	ldr	r3, [pc, #508]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b6:	4a7e      	ldr	r2, [pc, #504]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80024bc:	6313      	str	r3, [r2, #48]	; 0x30
 80024be:	4b7c      	ldr	r3, [pc, #496]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c6:	61bb      	str	r3, [r7, #24]
 80024c8:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80024ca:	4b79      	ldr	r3, [pc, #484]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ce:	4a78      	ldr	r2, [pc, #480]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024d0:	f043 0308 	orr.w	r3, r3, #8
 80024d4:	6313      	str	r3, [r2, #48]	; 0x30
 80024d6:	4b76      	ldr	r3, [pc, #472]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	617b      	str	r3, [r7, #20]
 80024e0:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80024e2:	4b73      	ldr	r3, [pc, #460]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	4a72      	ldr	r2, [pc, #456]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6313      	str	r3, [r2, #48]	; 0x30
 80024ee:	4b70      	ldr	r3, [pc, #448]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f2:	f003 0304 	and.w	r3, r3, #4
 80024f6:	613b      	str	r3, [r7, #16]
 80024f8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80024fa:	4b6d      	ldr	r3, [pc, #436]	; (80026b0 <MX_GPIO_Init+0x244>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fe:	4a6c      	ldr	r2, [pc, #432]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002500:	f043 0301 	orr.w	r3, r3, #1
 8002504:	6313      	str	r3, [r2, #48]	; 0x30
 8002506:	4b6a      	ldr	r3, [pc, #424]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f003 0301 	and.w	r3, r3, #1
 800250e:	60fb      	str	r3, [r7, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8002512:	4b67      	ldr	r3, [pc, #412]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002516:	4a66      	ldr	r2, [pc, #408]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800251c:	6313      	str	r3, [r2, #48]	; 0x30
 800251e:	4b64      	ldr	r3, [pc, #400]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	60bb      	str	r3, [r7, #8]
 8002528:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800252a:	4b61      	ldr	r3, [pc, #388]	; (80026b0 <MX_GPIO_Init+0x244>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a60      	ldr	r2, [pc, #384]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002530:	f043 0320 	orr.w	r3, r3, #32
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b5e      	ldr	r3, [pc, #376]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f003 0320 	and.w	r3, r3, #32
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8002542:	4b5b      	ldr	r3, [pc, #364]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	4a5a      	ldr	r2, [pc, #360]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800254c:	6313      	str	r3, [r2, #48]	; 0x30
 800254e:	4b58      	ldr	r3, [pc, #352]	; (80026b0 <MX_GPIO_Init+0x244>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002556:	603b      	str	r3, [r7, #0]
 8002558:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 800255a:	2200      	movs	r2, #0
 800255c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002560:	4854      	ldr	r0, [pc, #336]	; (80026b4 <MX_GPIO_Init+0x248>)
 8002562:	f001 fe11 	bl	8004188 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 8002566:	2200      	movs	r2, #0
 8002568:	2104      	movs	r1, #4
 800256a:	4853      	ldr	r0, [pc, #332]	; (80026b8 <MX_GPIO_Init+0x24c>)
 800256c:	f001 fe0c 	bl	8004188 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002570:	2200      	movs	r2, #0
 8002572:	2140      	movs	r1, #64	; 0x40
 8002574:	4851      	ldr	r0, [pc, #324]	; (80026bc <MX_GPIO_Init+0x250>)
 8002576:	f001 fe07 	bl	8004188 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800257a:	2200      	movs	r2, #0
 800257c:	21c0      	movs	r1, #192	; 0xc0
 800257e:	4850      	ldr	r0, [pc, #320]	; (80026c0 <MX_GPIO_Init+0x254>)
 8002580:	f001 fe02 	bl	8004188 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : WIFI_ENABLE_Pin */
	GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 8002584:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002588:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800258a:	2301      	movs	r3, #1
 800258c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800258e:	2300      	movs	r3, #0
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002592:	2300      	movs	r3, #0
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8002596:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800259a:	4619      	mov	r1, r3
 800259c:	4845      	ldr	r0, [pc, #276]	; (80026b4 <MX_GPIO_Init+0x248>)
 800259e:	f001 fc2f 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 80025a2:	f643 4333 	movw	r3, #15411	; 0x3c33
 80025a6:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025a8:	2300      	movs	r3, #0
 80025aa:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025ac:	2300      	movs	r3, #0
 80025ae:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025b4:	4619      	mov	r1, r3
 80025b6:	483f      	ldr	r0, [pc, #252]	; (80026b4 <MX_GPIO_Init+0x248>)
 80025b8:	f001 fc22 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 80025bc:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 80025c0:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025c2:	2300      	movs	r3, #0
 80025c4:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80025ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025ce:	4619      	mov	r1, r3
 80025d0:	483b      	ldr	r0, [pc, #236]	; (80026c0 <MX_GPIO_Init+0x254>)
 80025d2:	f001 fc15 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
	GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 80025d6:	f248 63e8 	movw	r3, #34536	; 0x86e8
 80025da:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025dc:	2300      	movs	r3, #0
 80025de:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e0:	2300      	movs	r3, #0
 80025e2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025e8:	4619      	mov	r1, r3
 80025ea:	4836      	ldr	r0, [pc, #216]	; (80026c4 <MX_GPIO_Init+0x258>)
 80025ec:	f001 fc08 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025f0:	2340      	movs	r3, #64	; 0x40
 80025f2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025f4:	2300      	movs	r3, #0
 80025f6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002600:	4619      	mov	r1, r3
 8002602:	4831      	ldr	r0, [pc, #196]	; (80026c8 <MX_GPIO_Init+0x25c>)
 8002604:	f001 fbfc 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI1 PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 8002608:	230b      	movs	r3, #11
 800260a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800260c:	2300      	movs	r3, #0
 800260e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002610:	2300      	movs	r3, #0
 8002612:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002614:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002618:	4619      	mov	r1, r3
 800261a:	4827      	ldr	r0, [pc, #156]	; (80026b8 <MX_GPIO_Init+0x24c>)
 800261c:	f001 fbf0 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_HOST_VBUF_Pin */
	GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 8002620:	2304      	movs	r3, #4
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002624:	2301      	movs	r3, #1
 8002626:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800262c:	2300      	movs	r3, #0
 800262e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 8002630:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002634:	4619      	mov	r1, r3
 8002636:	4820      	ldr	r0, [pc, #128]	; (80026b8 <MX_GPIO_Init+0x24c>)
 8002638:	f001 fbe2 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 800263c:	23a0      	movs	r3, #160	; 0xa0
 800263e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002640:	2300      	movs	r3, #0
 8002642:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002644:	2300      	movs	r3, #0
 8002646:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002648:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800264c:	4619      	mov	r1, r3
 800264e:	481b      	ldr	r0, [pc, #108]	; (80026bc <MX_GPIO_Init+0x250>)
 8002650:	f001 fbd6 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 8002654:	2340      	movs	r3, #64	; 0x40
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002658:	2301      	movs	r3, #1
 800265a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265c:	2300      	movs	r3, #0
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002660:	2300      	movs	r3, #0
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8002664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	4814      	ldr	r0, [pc, #80]	; (80026bc <MX_GPIO_Init+0x250>)
 800266c:	f001 fbc8 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8002670:	23c0      	movs	r3, #192	; 0xc0
 8002672:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002674:	2301      	movs	r3, #1
 8002676:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002678:	2300      	movs	r3, #0
 800267a:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800267c:	2300      	movs	r3, #0
 800267e:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002684:	4619      	mov	r1, r3
 8002686:	480e      	ldr	r0, [pc, #56]	; (80026c0 <MX_GPIO_Init+0x254>)
 8002688:	f001 fbba 	bl	8003e00 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 800268c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002690:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002692:	2300      	movs	r3, #0
 8002694:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800269a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800269e:	4619      	mov	r1, r3
 80026a0:	480a      	ldr	r0, [pc, #40]	; (80026cc <MX_GPIO_Init+0x260>)
 80026a2:	f001 fbad 	bl	8003e00 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80026a6:	bf00      	nop
 80026a8:	3738      	adds	r7, #56	; 0x38
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}
 80026ae:	bf00      	nop
 80026b0:	40023800 	.word	0x40023800
 80026b4:	40020400 	.word	0x40020400
 80026b8:	40022000 	.word	0x40022000
 80026bc:	40020800 	.word	0x40020800
 80026c0:	40021800 	.word	0x40021800
 80026c4:	40020000 	.word	0x40020000
 80026c8:	40020c00 	.word	0x40020c00
 80026cc:	40021400 	.word	0x40021400

080026d0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026d6:	b672      	cpsid	i
}
 80026d8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	// reset pins
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80026da:	2200      	movs	r2, #0
 80026dc:	2140      	movs	r1, #64	; 0x40
 80026de:	481d      	ldr	r0, [pc, #116]	; (8002754 <Error_Handler+0x84>)
 80026e0:	f001 fd52 	bl	8004188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 80026e4:	2200      	movs	r2, #0
 80026e6:	2180      	movs	r1, #128	; 0x80
 80026e8:	481a      	ldr	r0, [pc, #104]	; (8002754 <Error_Handler+0x84>)
 80026ea:	f001 fd4d 	bl	8004188 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80026ee:	2200      	movs	r2, #0
 80026f0:	2140      	movs	r1, #64	; 0x40
 80026f2:	4819      	ldr	r0, [pc, #100]	; (8002758 <Error_Handler+0x88>)
 80026f4:	f001 fd48 	bl	8004188 <HAL_GPIO_WritePin>

	// blink error code
	while (1)
	{
		switch(system_state.error)
 80026f8:	4b18      	ldr	r3, [pc, #96]	; (800275c <Error_Handler+0x8c>)
 80026fa:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 80026fe:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8002702:	2b02      	cmp	r3, #2
 8002704:	d010      	beq.n	8002728 <Error_Handler+0x58>
 8002706:	2b02      	cmp	r3, #2
 8002708:	dc17      	bgt.n	800273a <Error_Handler+0x6a>
 800270a:	2b00      	cmp	r3, #0
 800270c:	d002      	beq.n	8002714 <Error_Handler+0x44>
 800270e:	2b01      	cmp	r3, #1
 8002710:	d005      	beq.n	800271e <Error_Handler+0x4e>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;

		default:
			break;
 8002712:	e012      	b.n	800273a <Error_Handler+0x6a>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002714:	2140      	movs	r1, #64	; 0x40
 8002716:	480f      	ldr	r0, [pc, #60]	; (8002754 <Error_Handler+0x84>)
 8002718:	f001 fd4f 	bl	80041ba <HAL_GPIO_TogglePin>
			break;
 800271c:	e00e      	b.n	800273c <Error_Handler+0x6c>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800271e:	2180      	movs	r1, #128	; 0x80
 8002720:	480c      	ldr	r0, [pc, #48]	; (8002754 <Error_Handler+0x84>)
 8002722:	f001 fd4a 	bl	80041ba <HAL_GPIO_TogglePin>
			break;
 8002726:	e009      	b.n	800273c <Error_Handler+0x6c>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8002728:	2140      	movs	r1, #64	; 0x40
 800272a:	480a      	ldr	r0, [pc, #40]	; (8002754 <Error_Handler+0x84>)
 800272c:	f001 fd45 	bl	80041ba <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 8002730:	2180      	movs	r1, #128	; 0x80
 8002732:	4808      	ldr	r0, [pc, #32]	; (8002754 <Error_Handler+0x84>)
 8002734:	f001 fd41 	bl	80041ba <HAL_GPIO_TogglePin>
			break;
 8002738:	e000      	b.n	800273c <Error_Handler+0x6c>
			break;
 800273a:	bf00      	nop
		}

		// loop delay
		for(volatile uint32_t t=0; t<2000000; t++);
 800273c:	2300      	movs	r3, #0
 800273e:	607b      	str	r3, [r7, #4]
 8002740:	e002      	b.n	8002748 <Error_Handler+0x78>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3301      	adds	r3, #1
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a05      	ldr	r2, [pc, #20]	; (8002760 <Error_Handler+0x90>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d9f8      	bls.n	8002742 <Error_Handler+0x72>
		switch(system_state.error)
 8002750:	e7d2      	b.n	80026f8 <Error_Handler+0x28>
 8002752:	bf00      	nop
 8002754:	40021800 	.word	0x40021800
 8002758:	40020800 	.word	0x40020800
 800275c:	20000670 	.word	0x20000670
 8002760:	001e847f 	.word	0x001e847f

08002764 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800276a:	4b0f      	ldr	r3, [pc, #60]	; (80027a8 <HAL_MspInit+0x44>)
 800276c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800276e:	4a0e      	ldr	r2, [pc, #56]	; (80027a8 <HAL_MspInit+0x44>)
 8002770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002774:	6413      	str	r3, [r2, #64]	; 0x40
 8002776:	4b0c      	ldr	r3, [pc, #48]	; (80027a8 <HAL_MspInit+0x44>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	607b      	str	r3, [r7, #4]
 8002780:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002782:	4b09      	ldr	r3, [pc, #36]	; (80027a8 <HAL_MspInit+0x44>)
 8002784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002786:	4a08      	ldr	r2, [pc, #32]	; (80027a8 <HAL_MspInit+0x44>)
 8002788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800278c:	6453      	str	r3, [r2, #68]	; 0x44
 800278e:	4b06      	ldr	r3, [pc, #24]	; (80027a8 <HAL_MspInit+0x44>)
 8002790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002796:	603b      	str	r3, [r7, #0]
 8002798:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800

080027ac <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b08a      	sub	sp, #40	; 0x28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027b4:	f107 0314 	add.w	r3, r7, #20
 80027b8:	2200      	movs	r2, #0
 80027ba:	601a      	str	r2, [r3, #0]
 80027bc:	605a      	str	r2, [r3, #4]
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	60da      	str	r2, [r3, #12]
 80027c2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a2d      	ldr	r2, [pc, #180]	; (8002880 <HAL_ADC_MspInit+0xd4>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d153      	bne.n	8002876 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80027ce:	4b2d      	ldr	r3, [pc, #180]	; (8002884 <HAL_ADC_MspInit+0xd8>)
 80027d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027d2:	4a2c      	ldr	r2, [pc, #176]	; (8002884 <HAL_ADC_MspInit+0xd8>)
 80027d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d8:	6453      	str	r3, [r2, #68]	; 0x44
 80027da:	4b2a      	ldr	r3, [pc, #168]	; (8002884 <HAL_ADC_MspInit+0xd8>)
 80027dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e6:	4b27      	ldr	r3, [pc, #156]	; (8002884 <HAL_ADC_MspInit+0xd8>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a26      	ldr	r2, [pc, #152]	; (8002884 <HAL_ADC_MspInit+0xd8>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b24      	ldr	r3, [pc, #144]	; (8002884 <HAL_ADC_MspInit+0xd8>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 80027fe:	2305      	movs	r3, #5
 8002800:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002802:	2303      	movs	r3, #3
 8002804:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280a:	f107 0314 	add.w	r3, r7, #20
 800280e:	4619      	mov	r1, r3
 8002810:	481d      	ldr	r0, [pc, #116]	; (8002888 <HAL_ADC_MspInit+0xdc>)
 8002812:	f001 faf5 	bl	8003e00 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8002816:	4b1d      	ldr	r3, [pc, #116]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002818:	4a1d      	ldr	r2, [pc, #116]	; (8002890 <HAL_ADC_MspInit+0xe4>)
 800281a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800281c:	4b1b      	ldr	r3, [pc, #108]	; (800288c <HAL_ADC_MspInit+0xe0>)
 800281e:	2200      	movs	r2, #0
 8002820:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002822:	4b1a      	ldr	r3, [pc, #104]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002824:	2200      	movs	r2, #0
 8002826:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002828:	4b18      	ldr	r3, [pc, #96]	; (800288c <HAL_ADC_MspInit+0xe0>)
 800282a:	2200      	movs	r2, #0
 800282c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800282e:	4b17      	ldr	r3, [pc, #92]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002830:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002834:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002836:	4b15      	ldr	r3, [pc, #84]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002838:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800283c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800283e:	4b13      	ldr	r3, [pc, #76]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002840:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002844:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002846:	4b11      	ldr	r3, [pc, #68]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002848:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800284e:	4b0f      	ldr	r3, [pc, #60]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002850:	2200      	movs	r2, #0
 8002852:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002854:	4b0d      	ldr	r3, [pc, #52]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002856:	2200      	movs	r2, #0
 8002858:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800285a:	480c      	ldr	r0, [pc, #48]	; (800288c <HAL_ADC_MspInit+0xe0>)
 800285c:	f000 ffe6 	bl	800382c <HAL_DMA_Init>
 8002860:	4603      	mov	r3, r0
 8002862:	2b00      	cmp	r3, #0
 8002864:	d001      	beq.n	800286a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8002866:	f7ff ff33 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a07      	ldr	r2, [pc, #28]	; (800288c <HAL_ADC_MspInit+0xe0>)
 800286e:	639a      	str	r2, [r3, #56]	; 0x38
 8002870:	4a06      	ldr	r2, [pc, #24]	; (800288c <HAL_ADC_MspInit+0xe0>)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002876:	bf00      	nop
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40012000 	.word	0x40012000
 8002884:	40023800 	.word	0x40023800
 8002888:	40020000 	.word	0x40020000
 800288c:	20000360 	.word	0x20000360
 8002890:	40026410 	.word	0x40026410

08002894 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b0ac      	sub	sp, #176	; 0xb0
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800289c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80028a0:	2200      	movs	r2, #0
 80028a2:	601a      	str	r2, [r3, #0]
 80028a4:	605a      	str	r2, [r3, #4]
 80028a6:	609a      	str	r2, [r3, #8]
 80028a8:	60da      	str	r2, [r3, #12]
 80028aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80028ac:	f107 0318 	add.w	r3, r7, #24
 80028b0:	2284      	movs	r2, #132	; 0x84
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f013 fb99 	bl	8015fec <memset>
  if(hsd->Instance==SDMMC1)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	4a70      	ldr	r2, [pc, #448]	; (8002a80 <HAL_SD_MspInit+0x1ec>)
 80028c0:	4293      	cmp	r3, r2
 80028c2:	f040 80d8 	bne.w	8002a76 <HAL_SD_MspInit+0x1e2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80028c6:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80028ca:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80028cc:	2300      	movs	r3, #0
 80028ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80028d2:	2300      	movs	r3, #0
 80028d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028d8:	f107 0318 	add.w	r3, r7, #24
 80028dc:	4618      	mov	r0, r3
 80028de:	f005 f9a1 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80028e8:	f7ff fef2 	bl	80026d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80028ec:	4b65      	ldr	r3, [pc, #404]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 80028ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028f0:	4a64      	ldr	r2, [pc, #400]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 80028f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80028f6:	6453      	str	r3, [r2, #68]	; 0x44
 80028f8:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 80028fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002900:	617b      	str	r3, [r7, #20]
 8002902:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002904:	4b5f      	ldr	r3, [pc, #380]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 8002906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002908:	4a5e      	ldr	r2, [pc, #376]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 800290a:	f043 0304 	orr.w	r3, r3, #4
 800290e:	6313      	str	r3, [r2, #48]	; 0x30
 8002910:	4b5c      	ldr	r3, [pc, #368]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 8002912:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002914:	f003 0304 	and.w	r3, r3, #4
 8002918:	613b      	str	r3, [r7, #16]
 800291a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800291c:	4b59      	ldr	r3, [pc, #356]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 800291e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002920:	4a58      	ldr	r2, [pc, #352]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 8002922:	f043 0308 	orr.w	r3, r3, #8
 8002926:	6313      	str	r3, [r2, #48]	; 0x30
 8002928:	4b56      	ldr	r3, [pc, #344]	; (8002a84 <HAL_SD_MspInit+0x1f0>)
 800292a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800292c:	f003 0308 	and.w	r3, r3, #8
 8002930:	60fb      	str	r3, [r7, #12]
 8002932:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8002934:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002938:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800293c:	2302      	movs	r3, #2
 800293e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002942:	2300      	movs	r3, #0
 8002944:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002948:	2303      	movs	r3, #3
 800294a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800294e:	230c      	movs	r3, #12
 8002950:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002954:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002958:	4619      	mov	r1, r3
 800295a:	484b      	ldr	r0, [pc, #300]	; (8002a88 <HAL_SD_MspInit+0x1f4>)
 800295c:	f001 fa50 	bl	8003e00 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002960:	2304      	movs	r3, #4
 8002962:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002966:	2302      	movs	r3, #2
 8002968:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800296c:	2300      	movs	r3, #0
 800296e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002972:	2303      	movs	r3, #3
 8002974:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8002978:	230c      	movs	r3, #12
 800297a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800297e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002982:	4619      	mov	r1, r3
 8002984:	4841      	ldr	r0, [pc, #260]	; (8002a8c <HAL_SD_MspInit+0x1f8>)
 8002986:	f001 fa3b 	bl	8003e00 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800298a:	4b41      	ldr	r3, [pc, #260]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 800298c:	4a41      	ldr	r2, [pc, #260]	; (8002a94 <HAL_SD_MspInit+0x200>)
 800298e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 8002992:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002996:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002998:	4b3d      	ldr	r3, [pc, #244]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 800299a:	2200      	movs	r2, #0
 800299c:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800299e:	4b3c      	ldr	r3, [pc, #240]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80029a4:	4b3a      	ldr	r3, [pc, #232]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80029aa:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80029ac:	4b38      	ldr	r3, [pc, #224]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80029b2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80029b4:	4b36      	ldr	r3, [pc, #216]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80029ba:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80029bc:	4b34      	ldr	r3, [pc, #208]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029be:	2220      	movs	r2, #32
 80029c0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80029c2:	4b33      	ldr	r3, [pc, #204]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029c4:	2200      	movs	r2, #0
 80029c6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80029c8:	4b31      	ldr	r3, [pc, #196]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029ca:	2204      	movs	r2, #4
 80029cc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80029ce:	4b30      	ldr	r3, [pc, #192]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029d0:	2203      	movs	r2, #3
 80029d2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80029d4:	4b2e      	ldr	r3, [pc, #184]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029d6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80029dc:	4b2c      	ldr	r3, [pc, #176]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029de:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80029e2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80029e4:	482a      	ldr	r0, [pc, #168]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029e6:	f000 ff21 	bl	800382c <HAL_DMA_Init>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d001      	beq.n	80029f4 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 80029f0:	f7ff fe6e 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a26      	ldr	r2, [pc, #152]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029f8:	641a      	str	r2, [r3, #64]	; 0x40
 80029fa:	4a25      	ldr	r2, [pc, #148]	; (8002a90 <HAL_SD_MspInit+0x1fc>)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8002a00:	4b25      	ldr	r3, [pc, #148]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a02:	4a26      	ldr	r2, [pc, #152]	; (8002a9c <HAL_SD_MspInit+0x208>)
 8002a04:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8002a06:	4b24      	ldr	r3, [pc, #144]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a08:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a0c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a10:	2240      	movs	r2, #64	; 0x40
 8002a12:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a20:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a22:	4b1d      	ldr	r3, [pc, #116]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002a28:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8002a2a:	4b1b      	ldr	r3, [pc, #108]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002a30:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8002a32:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a34:	2220      	movs	r2, #32
 8002a36:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a38:	4b17      	ldr	r3, [pc, #92]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8002a3e:	4b16      	ldr	r3, [pc, #88]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a40:	2204      	movs	r2, #4
 8002a42:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8002a44:	4b14      	ldr	r3, [pc, #80]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a46:	2203      	movs	r2, #3
 8002a48:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8002a4a:	4b13      	ldr	r3, [pc, #76]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002a50:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a54:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002a58:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8002a5a:	480f      	ldr	r0, [pc, #60]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a5c:	f000 fee6 	bl	800382c <HAL_DMA_Init>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8002a66:	f7ff fe33 	bl	80026d0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a0a      	ldr	r2, [pc, #40]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a6e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a70:	4a09      	ldr	r2, [pc, #36]	; (8002a98 <HAL_SD_MspInit+0x204>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8002a76:	bf00      	nop
 8002a78:	37b0      	adds	r7, #176	; 0xb0
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40023800 	.word	0x40023800
 8002a88:	40020800 	.word	0x40020800
 8002a8c:	40020c00 	.word	0x40020c00
 8002a90:	20000444 	.word	0x20000444
 8002a94:	40026458 	.word	0x40026458
 8002a98:	200004a4 	.word	0x200004a4
 8002a9c:	400264a0 	.word	0x400264a0

08002aa0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b085      	sub	sp, #20
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a13      	ldr	r2, [pc, #76]	; (8002afc <HAL_TIM_Base_MspInit+0x5c>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d10c      	bne.n	8002acc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002ab2:	4b13      	ldr	r3, [pc, #76]	; (8002b00 <HAL_TIM_Base_MspInit+0x60>)
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4a12      	ldr	r2, [pc, #72]	; (8002b00 <HAL_TIM_Base_MspInit+0x60>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	6453      	str	r3, [r2, #68]	; 0x44
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <HAL_TIM_Base_MspInit+0x60>)
 8002ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	60fb      	str	r3, [r7, #12]
 8002ac8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002aca:	e010      	b.n	8002aee <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0c      	ldr	r2, [pc, #48]	; (8002b04 <HAL_TIM_Base_MspInit+0x64>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d10b      	bne.n	8002aee <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	; (8002b00 <HAL_TIM_Base_MspInit+0x60>)
 8002ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ada:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <HAL_TIM_Base_MspInit+0x60>)
 8002adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ae0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ae2:	4b07      	ldr	r3, [pc, #28]	; (8002b00 <HAL_TIM_Base_MspInit+0x60>)
 8002ae4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aea:	60bb      	str	r3, [r7, #8]
 8002aec:	68bb      	ldr	r3, [r7, #8]
}
 8002aee:	bf00      	nop
 8002af0:	3714      	adds	r7, #20
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	40010000 	.word	0x40010000
 8002b00:	40023800 	.word	0x40023800
 8002b04:	40014800 	.word	0x40014800

08002b08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b10:	f107 030c 	add.w	r3, r7, #12
 8002b14:	2200      	movs	r2, #0
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	605a      	str	r2, [r3, #4]
 8002b1a:	609a      	str	r2, [r3, #8]
 8002b1c:	60da      	str	r2, [r3, #12]
 8002b1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a11      	ldr	r2, [pc, #68]	; (8002b6c <HAL_TIM_MspPostInit+0x64>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d11b      	bne.n	8002b62 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_TIM_MspPostInit+0x68>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	4a10      	ldr	r2, [pc, #64]	; (8002b70 <HAL_TIM_MspPostInit+0x68>)
 8002b30:	f043 0320 	orr.w	r3, r3, #32
 8002b34:	6313      	str	r3, [r2, #48]	; 0x30
 8002b36:	4b0e      	ldr	r3, [pc, #56]	; (8002b70 <HAL_TIM_MspPostInit+0x68>)
 8002b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b3a:	f003 0320 	and.w	r3, r3, #32
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8002b42:	2380      	movs	r3, #128	; 0x80
 8002b44:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b46:	2302      	movs	r3, #2
 8002b48:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002b52:	2303      	movs	r3, #3
 8002b54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8002b56:	f107 030c 	add.w	r3, r7, #12
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	4805      	ldr	r0, [pc, #20]	; (8002b74 <HAL_TIM_MspPostInit+0x6c>)
 8002b5e:	f001 f94f 	bl	8003e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8002b62:	bf00      	nop
 8002b64:	3720      	adds	r7, #32
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40014800 	.word	0x40014800
 8002b70:	40023800 	.word	0x40023800
 8002b74:	40021400 	.word	0x40021400

08002b78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b0aa      	sub	sp, #168	; 0xa8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b80:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002b84:	2200      	movs	r2, #0
 8002b86:	601a      	str	r2, [r3, #0]
 8002b88:	605a      	str	r2, [r3, #4]
 8002b8a:	609a      	str	r2, [r3, #8]
 8002b8c:	60da      	str	r2, [r3, #12]
 8002b8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002b90:	f107 0310 	add.w	r3, r7, #16
 8002b94:	2284      	movs	r2, #132	; 0x84
 8002b96:	2100      	movs	r1, #0
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f013 fa27 	bl	8015fec <memset>
  if(huart->Instance==USART1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a21      	ldr	r2, [pc, #132]	; (8002c28 <HAL_UART_MspInit+0xb0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d13a      	bne.n	8002c1e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002ba8:	2340      	movs	r3, #64	; 0x40
 8002baa:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002bac:	2300      	movs	r3, #0
 8002bae:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002bb0:	f107 0310 	add.w	r3, r7, #16
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f005 f835 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d001      	beq.n	8002bc4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002bc0:	f7ff fd86 	bl	80026d0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bc4:	4b19      	ldr	r3, [pc, #100]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc8:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bca:	f043 0310 	orr.w	r3, r3, #16
 8002bce:	6453      	str	r3, [r2, #68]	; 0x44
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	60fb      	str	r3, [r7, #12]
 8002bda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bdc:	4b13      	ldr	r3, [pc, #76]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be0:	4a12      	ldr	r2, [pc, #72]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002be2:	f043 0302 	orr.w	r3, r3, #2
 8002be6:	6313      	str	r3, [r2, #48]	; 0x30
 8002be8:	4b10      	ldr	r3, [pc, #64]	; (8002c2c <HAL_UART_MspInit+0xb4>)
 8002bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bec:	f003 0302 	and.w	r3, r3, #2
 8002bf0:	60bb      	str	r3, [r7, #8]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 8002bf4:	23c0      	movs	r3, #192	; 0xc0
 8002bf6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c00:	2300      	movs	r3, #0
 8002c02:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c06:	2303      	movs	r3, #3
 8002c08:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c0c:	2307      	movs	r3, #7
 8002c0e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002c12:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002c16:	4619      	mov	r1, r3
 8002c18:	4805      	ldr	r0, [pc, #20]	; (8002c30 <HAL_UART_MspInit+0xb8>)
 8002c1a:	f001 f8f1 	bl	8003e00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c1e:	bf00      	nop
 8002c20:	37a8      	adds	r7, #168	; 0xa8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40011000 	.word	0x40011000
 8002c2c:	40023800 	.word	0x40023800
 8002c30:	40020400 	.word	0x40020400

08002c34 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002c3a:	1d3b      	adds	r3, r7, #4
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
 8002c40:	605a      	str	r2, [r3, #4]
 8002c42:	609a      	str	r2, [r3, #8]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8002c48:	4b2b      	ldr	r3, [pc, #172]	; (8002cf8 <HAL_FMC_MspInit+0xc4>)
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d14e      	bne.n	8002cee <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8002c50:	4b29      	ldr	r3, [pc, #164]	; (8002cf8 <HAL_FMC_MspInit+0xc4>)
 8002c52:	2201      	movs	r2, #1
 8002c54:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8002c56:	4b29      	ldr	r3, [pc, #164]	; (8002cfc <HAL_FMC_MspInit+0xc8>)
 8002c58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c5a:	4a28      	ldr	r2, [pc, #160]	; (8002cfc <HAL_FMC_MspInit+0xc8>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6393      	str	r3, [r2, #56]	; 0x38
 8002c62:	4b26      	ldr	r3, [pc, #152]	; (8002cfc <HAL_FMC_MspInit+0xc8>)
 8002c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	603b      	str	r3, [r7, #0]
 8002c6c:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8002c6e:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8002c72:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c74:	2302      	movs	r3, #2
 8002c76:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c7c:	2303      	movs	r3, #3
 8002c7e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002c80:	230c      	movs	r3, #12
 8002c82:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002c84:	1d3b      	adds	r3, r7, #4
 8002c86:	4619      	mov	r1, r3
 8002c88:	481d      	ldr	r0, [pc, #116]	; (8002d00 <HAL_FMC_MspInit+0xcc>)
 8002c8a:	f001 f8b9 	bl	8003e00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 8002c8e:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8002c92:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c94:	2302      	movs	r3, #2
 8002c96:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002ca0:	230c      	movs	r3, #12
 8002ca2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ca4:	1d3b      	adds	r3, r7, #4
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	4816      	ldr	r0, [pc, #88]	; (8002d04 <HAL_FMC_MspInit+0xd0>)
 8002caa:	f001 f8a9 	bl	8003e00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8002cae:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8002cb2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cc0:	230c      	movs	r3, #12
 8002cc2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002cc4:	1d3b      	adds	r3, r7, #4
 8002cc6:	4619      	mov	r1, r3
 8002cc8:	480f      	ldr	r0, [pc, #60]	; (8002d08 <HAL_FMC_MspInit+0xd4>)
 8002cca:	f001 f899 	bl	8003e00 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8002cce:	233f      	movs	r3, #63	; 0x3f
 8002cd0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8002cde:	230c      	movs	r3, #12
 8002ce0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002ce2:	1d3b      	adds	r3, r7, #4
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	4809      	ldr	r0, [pc, #36]	; (8002d0c <HAL_FMC_MspInit+0xd8>)
 8002ce8:	f001 f88a 	bl	8003e00 <HAL_GPIO_Init>
 8002cec:	e000      	b.n	8002cf0 <HAL_FMC_MspInit+0xbc>
    return;
 8002cee:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8002cf0:	3718      	adds	r7, #24
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	20002b4c 	.word	0x20002b4c
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	40021000 	.word	0x40021000
 8002d04:	40020c00 	.word	0x40020c00
 8002d08:	40021400 	.word	0x40021400
 8002d0c:	40021800 	.word	0x40021800

08002d10 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8002d18:	f7ff ff8c 	bl	8002c34 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002d1c:	bf00      	nop
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bd80      	pop	{r7, pc}

08002d24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d28:	e7fe      	b.n	8002d28 <NMI_Handler+0x4>

08002d2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d2e:	e7fe      	b.n	8002d2e <HardFault_Handler+0x4>

08002d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d30:	b480      	push	{r7}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d34:	e7fe      	b.n	8002d34 <MemManage_Handler+0x4>

08002d36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d36:	b480      	push	{r7}
 8002d38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d3a:	e7fe      	b.n	8002d3a <BusFault_Handler+0x4>

08002d3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d40:	e7fe      	b.n	8002d40 <UsageFault_Handler+0x4>

08002d42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002d42:	b480      	push	{r7}
 8002d44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002d46:	bf00      	nop
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr

08002d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d50:	b480      	push	{r7}
 8002d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d54:	bf00      	nop
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr

08002d5e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002d5e:	b480      	push	{r7}
 8002d60:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002d62:	bf00      	nop
 8002d64:	46bd      	mov	sp, r7
 8002d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d6a:	4770      	bx	lr

08002d6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002d70:	f000 f972 	bl	8003058 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002d74:	bf00      	nop
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002d7c:	4802      	ldr	r0, [pc, #8]	; (8002d88 <DMA2_Stream0_IRQHandler+0x10>)
 8002d7e:	f000 fe03 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002d82:	bf00      	nop
 8002d84:	bd80      	pop	{r7, pc}
 8002d86:	bf00      	nop
 8002d88:	20000360 	.word	0x20000360

08002d8c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8002d90:	4802      	ldr	r0, [pc, #8]	; (8002d9c <DMA2_Stream3_IRQHandler+0x10>)
 8002d92:	f000 fdf9 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002d96:	bf00      	nop
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	20000444 	.word	0x20000444

08002da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002da4:	4802      	ldr	r0, [pc, #8]	; (8002db0 <OTG_FS_IRQHandler+0x10>)
 8002da6:	f001 fc8d 	bl	80046c4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002daa:	bf00      	nop
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	20004b58 	.word	0x20004b58

08002db4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8002db8:	4802      	ldr	r0, [pc, #8]	; (8002dc4 <DMA2_Stream6_IRQHandler+0x10>)
 8002dba:	f000 fde5 	bl	8003988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	200004a4 	.word	0x200004a4

08002dc8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8002dcc:	4802      	ldr	r0, [pc, #8]	; (8002dd8 <OTG_HS_IRQHandler+0x10>)
 8002dce:	f003 f88f 	bl	8005ef0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8002dd2:	bf00      	nop
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	20004274 	.word	0x20004274

08002ddc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return 1;
 8002de0:	2301      	movs	r3, #1
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_kill>:

int _kill(int pid, int sig)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002df6:	f013 f8b1 	bl	8015f5c <__errno>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2216      	movs	r2, #22
 8002dfe:	601a      	str	r2, [r3, #0]
  return -1;
 8002e00:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <_exit>:

void _exit (int status)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7ff ffe7 	bl	8002dec <_kill>
  while (1) {}    /* Make sure we hang here */
 8002e1e:	e7fe      	b.n	8002e1e <_exit+0x12>

08002e20 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	617b      	str	r3, [r7, #20]
 8002e30:	e00a      	b.n	8002e48 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002e32:	f3af 8000 	nop.w
 8002e36:	4601      	mov	r1, r0
 8002e38:	68bb      	ldr	r3, [r7, #8]
 8002e3a:	1c5a      	adds	r2, r3, #1
 8002e3c:	60ba      	str	r2, [r7, #8]
 8002e3e:	b2ca      	uxtb	r2, r1
 8002e40:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	3301      	adds	r3, #1
 8002e46:	617b      	str	r3, [r7, #20]
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	dbf0      	blt.n	8002e32 <_read+0x12>
  }

  return len;
 8002e50:	687b      	ldr	r3, [r7, #4]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b086      	sub	sp, #24
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	60f8      	str	r0, [r7, #12]
 8002e62:	60b9      	str	r1, [r7, #8]
 8002e64:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e66:	2300      	movs	r3, #0
 8002e68:	617b      	str	r3, [r7, #20]
 8002e6a:	e009      	b.n	8002e80 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	60ba      	str	r2, [r7, #8]
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	617b      	str	r3, [r7, #20]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	429a      	cmp	r2, r3
 8002e86:	dbf1      	blt.n	8002e6c <_write+0x12>
  }
  return len;
 8002e88:	687b      	ldr	r3, [r7, #4]
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3718      	adds	r7, #24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}

08002e92 <_close>:

int _close(int file)
{
 8002e92:	b480      	push	{r7}
 8002e94:	b083      	sub	sp, #12
 8002e96:	af00      	add	r7, sp, #0
 8002e98:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e9a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr

08002eaa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	b083      	sub	sp, #12
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
 8002eb2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eba:	605a      	str	r2, [r3, #4]
  return 0;
 8002ebc:	2300      	movs	r3, #0
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	370c      	adds	r7, #12
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <_isatty>:

int _isatty(int file)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b083      	sub	sp, #12
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002ed2:	2301      	movs	r3, #1
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b085      	sub	sp, #20
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	60f8      	str	r0, [r7, #12]
 8002ee8:	60b9      	str	r1, [r7, #8]
 8002eea:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
	...

08002efc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b086      	sub	sp, #24
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f04:	4a14      	ldr	r2, [pc, #80]	; (8002f58 <_sbrk+0x5c>)
 8002f06:	4b15      	ldr	r3, [pc, #84]	; (8002f5c <_sbrk+0x60>)
 8002f08:	1ad3      	subs	r3, r2, r3
 8002f0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f10:	4b13      	ldr	r3, [pc, #76]	; (8002f60 <_sbrk+0x64>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d102      	bne.n	8002f1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f18:	4b11      	ldr	r3, [pc, #68]	; (8002f60 <_sbrk+0x64>)
 8002f1a:	4a12      	ldr	r2, [pc, #72]	; (8002f64 <_sbrk+0x68>)
 8002f1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1e:	4b10      	ldr	r3, [pc, #64]	; (8002f60 <_sbrk+0x64>)
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4413      	add	r3, r2
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d207      	bcs.n	8002f3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f2c:	f013 f816 	bl	8015f5c <__errno>
 8002f30:	4603      	mov	r3, r0
 8002f32:	220c      	movs	r2, #12
 8002f34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f36:	f04f 33ff 	mov.w	r3, #4294967295
 8002f3a:	e009      	b.n	8002f50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f3c:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <_sbrk+0x64>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f42:	4b07      	ldr	r3, [pc, #28]	; (8002f60 <_sbrk+0x64>)
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4413      	add	r3, r2
 8002f4a:	4a05      	ldr	r2, [pc, #20]	; (8002f60 <_sbrk+0x64>)
 8002f4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
}
 8002f50:	4618      	mov	r0, r3
 8002f52:	3718      	adds	r7, #24
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}
 8002f58:	20050000 	.word	0x20050000
 8002f5c:	00000400 	.word	0x00000400
 8002f60:	20002b50 	.word	0x20002b50
 8002f64:	20004e70 	.word	0x20004e70

08002f68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f6c:	4b06      	ldr	r3, [pc, #24]	; (8002f88 <SystemInit+0x20>)
 8002f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f72:	4a05      	ldr	r2, [pc, #20]	; (8002f88 <SystemInit+0x20>)
 8002f74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f7c:	bf00      	nop
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002f8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f90:	480d      	ldr	r0, [pc, #52]	; (8002fc8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f92:	490e      	ldr	r1, [pc, #56]	; (8002fcc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f94:	4a0e      	ldr	r2, [pc, #56]	; (8002fd0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f98:	e002      	b.n	8002fa0 <LoopCopyDataInit>

08002f9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9e:	3304      	adds	r3, #4

08002fa0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002fa0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002fa2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa4:	d3f9      	bcc.n	8002f9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa6:	4a0b      	ldr	r2, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fa8:	4c0b      	ldr	r4, [pc, #44]	; (8002fd8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002faa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fac:	e001      	b.n	8002fb2 <LoopFillZerobss>

08002fae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002fae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fb0:	3204      	adds	r2, #4

08002fb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb4:	d3fb      	bcc.n	8002fae <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fb6:	f7ff ffd7 	bl	8002f68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fba:	f012 ffd5 	bl	8015f68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fbe:	f7fe ff6b 	bl	8001e98 <main>
  bx  lr    
 8002fc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002fc4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002fc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fcc:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8002fd0:	08019de4 	.word	0x08019de4
  ldr r2, =_sbss
 8002fd4:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8002fd8:	20004e6c 	.word	0x20004e6c

08002fdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fdc:	e7fe      	b.n	8002fdc <ADC_IRQHandler>

08002fde <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002fe2:	2003      	movs	r0, #3
 8002fe4:	f000 fbe0 	bl	80037a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002fe8:	200f      	movs	r0, #15
 8002fea:	f000 f805 	bl	8002ff8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002fee:	f7ff fbb9 	bl	8002764 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ff2:	2300      	movs	r3, #0
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b082      	sub	sp, #8
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003000:	4b12      	ldr	r3, [pc, #72]	; (800304c <HAL_InitTick+0x54>)
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	4b12      	ldr	r3, [pc, #72]	; (8003050 <HAL_InitTick+0x58>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	4619      	mov	r1, r3
 800300a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800300e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003012:	fbb2 f3f3 	udiv	r3, r2, r3
 8003016:	4618      	mov	r0, r3
 8003018:	f000 fbfb 	bl	8003812 <HAL_SYSTICK_Config>
 800301c:	4603      	mov	r3, r0
 800301e:	2b00      	cmp	r3, #0
 8003020:	d001      	beq.n	8003026 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	e00e      	b.n	8003044 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2b0f      	cmp	r3, #15
 800302a:	d80a      	bhi.n	8003042 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800302c:	2200      	movs	r2, #0
 800302e:	6879      	ldr	r1, [r7, #4]
 8003030:	f04f 30ff 	mov.w	r0, #4294967295
 8003034:	f000 fbc3 	bl	80037be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003038:	4a06      	ldr	r2, [pc, #24]	; (8003054 <HAL_InitTick+0x5c>)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
}
 8003044:	4618      	mov	r0, r3
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}
 800304c:	20000000 	.word	0x20000000
 8003050:	20000008 	.word	0x20000008
 8003054:	20000004 	.word	0x20000004

08003058 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003058:	b480      	push	{r7}
 800305a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800305c:	4b06      	ldr	r3, [pc, #24]	; (8003078 <HAL_IncTick+0x20>)
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	461a      	mov	r2, r3
 8003062:	4b06      	ldr	r3, [pc, #24]	; (800307c <HAL_IncTick+0x24>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	4413      	add	r3, r2
 8003068:	4a04      	ldr	r2, [pc, #16]	; (800307c <HAL_IncTick+0x24>)
 800306a:	6013      	str	r3, [r2, #0]
}
 800306c:	bf00      	nop
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr
 8003076:	bf00      	nop
 8003078:	20000008 	.word	0x20000008
 800307c:	20002b54 	.word	0x20002b54

08003080 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  return uwTick;
 8003084:	4b03      	ldr	r3, [pc, #12]	; (8003094 <HAL_GetTick+0x14>)
 8003086:	681b      	ldr	r3, [r3, #0]
}
 8003088:	4618      	mov	r0, r3
 800308a:	46bd      	mov	sp, r7
 800308c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003090:	4770      	bx	lr
 8003092:	bf00      	nop
 8003094:	20002b54 	.word	0x20002b54

08003098 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b084      	sub	sp, #16
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030a0:	f7ff ffee 	bl	8003080 <HAL_GetTick>
 80030a4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b0:	d005      	beq.n	80030be <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <HAL_Delay+0x44>)
 80030b4:	781b      	ldrb	r3, [r3, #0]
 80030b6:	461a      	mov	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4413      	add	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80030be:	bf00      	nop
 80030c0:	f7ff ffde 	bl	8003080 <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	68fa      	ldr	r2, [r7, #12]
 80030cc:	429a      	cmp	r2, r3
 80030ce:	d8f7      	bhi.n	80030c0 <HAL_Delay+0x28>
  {
  }
}
 80030d0:	bf00      	nop
 80030d2:	bf00      	nop
 80030d4:	3710      	adds	r7, #16
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	20000008 	.word	0x20000008

080030e0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d101      	bne.n	80030f6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80030f2:	2301      	movs	r3, #1
 80030f4:	e031      	b.n	800315a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d109      	bne.n	8003112 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f7ff fb54 	bl	80027ac <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 0310 	and.w	r3, r3, #16
 800311a:	2b00      	cmp	r3, #0
 800311c:	d116      	bne.n	800314c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003122:	4b10      	ldr	r3, [pc, #64]	; (8003164 <HAL_ADC_Init+0x84>)
 8003124:	4013      	ands	r3, r2
 8003126:	f043 0202 	orr.w	r2, r3, #2
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 f970 	bl	8003414 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f023 0303 	bic.w	r3, r3, #3
 8003142:	f043 0201 	orr.w	r2, r3, #1
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	641a      	str	r2, [r3, #64]	; 0x40
 800314a:	e001      	b.n	8003150 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003158:	7bfb      	ldrb	r3, [r7, #15]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop
 8003164:	ffffeefd 	.word	0xffffeefd

08003168 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003172:	2300      	movs	r3, #0
 8003174:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800317c:	2b01      	cmp	r3, #1
 800317e:	d101      	bne.n	8003184 <HAL_ADC_ConfigChannel+0x1c>
 8003180:	2302      	movs	r3, #2
 8003182:	e136      	b.n	80033f2 <HAL_ADC_ConfigChannel+0x28a>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	2201      	movs	r2, #1
 8003188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b09      	cmp	r3, #9
 8003192:	d93a      	bls.n	800320a <HAL_ADC_ConfigChannel+0xa2>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800319c:	d035      	beq.n	800320a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68d9      	ldr	r1, [r3, #12]
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	461a      	mov	r2, r3
 80031ac:	4613      	mov	r3, r2
 80031ae:	005b      	lsls	r3, r3, #1
 80031b0:	4413      	add	r3, r2
 80031b2:	3b1e      	subs	r3, #30
 80031b4:	2207      	movs	r2, #7
 80031b6:	fa02 f303 	lsl.w	r3, r2, r3
 80031ba:	43da      	mvns	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	400a      	ands	r2, r1
 80031c2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a8d      	ldr	r2, [pc, #564]	; (8003400 <HAL_ADC_ConfigChannel+0x298>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d10a      	bne.n	80031e4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68d9      	ldr	r1, [r3, #12]
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	061a      	lsls	r2, r3, #24
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80031e2:	e035      	b.n	8003250 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68d9      	ldr	r1, [r3, #12]
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	689a      	ldr	r2, [r3, #8]
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	b29b      	uxth	r3, r3
 80031f4:	4618      	mov	r0, r3
 80031f6:	4603      	mov	r3, r0
 80031f8:	005b      	lsls	r3, r3, #1
 80031fa:	4403      	add	r3, r0
 80031fc:	3b1e      	subs	r3, #30
 80031fe:	409a      	lsls	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003208:	e022      	b.n	8003250 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	6919      	ldr	r1, [r3, #16]
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	b29b      	uxth	r3, r3
 8003216:	461a      	mov	r2, r3
 8003218:	4613      	mov	r3, r2
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	4413      	add	r3, r2
 800321e:	2207      	movs	r2, #7
 8003220:	fa02 f303 	lsl.w	r3, r2, r3
 8003224:	43da      	mvns	r2, r3
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	400a      	ands	r2, r1
 800322c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6919      	ldr	r1, [r3, #16]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	b29b      	uxth	r3, r3
 800323e:	4618      	mov	r0, r3
 8003240:	4603      	mov	r3, r0
 8003242:	005b      	lsls	r3, r3, #1
 8003244:	4403      	add	r3, r0
 8003246:	409a      	lsls	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	2b06      	cmp	r3, #6
 8003256:	d824      	bhi.n	80032a2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685a      	ldr	r2, [r3, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	4413      	add	r3, r2
 8003268:	3b05      	subs	r3, #5
 800326a:	221f      	movs	r2, #31
 800326c:	fa02 f303 	lsl.w	r3, r2, r3
 8003270:	43da      	mvns	r2, r3
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	400a      	ands	r2, r1
 8003278:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	b29b      	uxth	r3, r3
 8003286:	4618      	mov	r0, r3
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685a      	ldr	r2, [r3, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	009b      	lsls	r3, r3, #2
 8003290:	4413      	add	r3, r2
 8003292:	3b05      	subs	r3, #5
 8003294:	fa00 f203 	lsl.w	r2, r0, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	635a      	str	r2, [r3, #52]	; 0x34
 80032a0:	e04c      	b.n	800333c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b0c      	cmp	r3, #12
 80032a8:	d824      	bhi.n	80032f4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	4613      	mov	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	4413      	add	r3, r2
 80032ba:	3b23      	subs	r3, #35	; 0x23
 80032bc:	221f      	movs	r2, #31
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43da      	mvns	r2, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	400a      	ands	r2, r1
 80032ca:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	4618      	mov	r0, r3
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	685a      	ldr	r2, [r3, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	009b      	lsls	r3, r3, #2
 80032e2:	4413      	add	r3, r2
 80032e4:	3b23      	subs	r3, #35	; 0x23
 80032e6:	fa00 f203 	lsl.w	r2, r0, r3
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	631a      	str	r2, [r3, #48]	; 0x30
 80032f2:	e023      	b.n	800333c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	685a      	ldr	r2, [r3, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	3b41      	subs	r3, #65	; 0x41
 8003306:	221f      	movs	r2, #31
 8003308:	fa02 f303 	lsl.w	r3, r2, r3
 800330c:	43da      	mvns	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	400a      	ands	r2, r1
 8003314:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	b29b      	uxth	r3, r3
 8003322:	4618      	mov	r0, r3
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	3b41      	subs	r3, #65	; 0x41
 8003330:	fa00 f203 	lsl.w	r2, r0, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	430a      	orrs	r2, r1
 800333a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a30      	ldr	r2, [pc, #192]	; (8003404 <HAL_ADC_ConfigChannel+0x29c>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d10a      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1f4>
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800334e:	d105      	bne.n	800335c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003350:	4b2d      	ldr	r3, [pc, #180]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	4a2c      	ldr	r2, [pc, #176]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 8003356:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800335a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a28      	ldr	r2, [pc, #160]	; (8003404 <HAL_ADC_ConfigChannel+0x29c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d10f      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x21e>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2b12      	cmp	r3, #18
 800336c:	d10b      	bne.n	8003386 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800336e:	4b26      	ldr	r3, [pc, #152]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	4a25      	ldr	r2, [pc, #148]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 8003374:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003378:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800337a:	4b23      	ldr	r3, [pc, #140]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	4a22      	ldr	r2, [pc, #136]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 8003380:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003384:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a1e      	ldr	r2, [pc, #120]	; (8003404 <HAL_ADC_ConfigChannel+0x29c>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d12b      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x280>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a1a      	ldr	r2, [pc, #104]	; (8003400 <HAL_ADC_ConfigChannel+0x298>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d003      	beq.n	80033a2 <HAL_ADC_ConfigChannel+0x23a>
 800339a:	683b      	ldr	r3, [r7, #0]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	2b11      	cmp	r3, #17
 80033a0:	d122      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80033a2:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 80033a8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80033ac:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80033ae:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	4a15      	ldr	r2, [pc, #84]	; (8003408 <HAL_ADC_ConfigChannel+0x2a0>)
 80033b4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033b8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a10      	ldr	r2, [pc, #64]	; (8003400 <HAL_ADC_ConfigChannel+0x298>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d111      	bne.n	80033e8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80033c4:	4b11      	ldr	r3, [pc, #68]	; (800340c <HAL_ADC_ConfigChannel+0x2a4>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a11      	ldr	r2, [pc, #68]	; (8003410 <HAL_ADC_ConfigChannel+0x2a8>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	0c9a      	lsrs	r2, r3, #18
 80033d0:	4613      	mov	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4413      	add	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033da:	e002      	b.n	80033e2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	3b01      	subs	r3, #1
 80033e0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d1f9      	bne.n	80033dc <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3714      	adds	r7, #20
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
 80033fe:	bf00      	nop
 8003400:	10000012 	.word	0x10000012
 8003404:	40012000 	.word	0x40012000
 8003408:	40012300 	.word	0x40012300
 800340c:	20000000 	.word	0x20000000
 8003410:	431bde83 	.word	0x431bde83

08003414 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800341c:	4b78      	ldr	r3, [pc, #480]	; (8003600 <ADC_Init+0x1ec>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a77      	ldr	r2, [pc, #476]	; (8003600 <ADC_Init+0x1ec>)
 8003422:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003426:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003428:	4b75      	ldr	r3, [pc, #468]	; (8003600 <ADC_Init+0x1ec>)
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	4973      	ldr	r1, [pc, #460]	; (8003600 <ADC_Init+0x1ec>)
 8003432:	4313      	orrs	r3, r2
 8003434:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800348a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6899      	ldr	r1, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034a2:	4a58      	ldr	r2, [pc, #352]	; (8003604 <ADC_Init+0x1f0>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80034d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	e00f      	b.n	800350e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80034fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800350c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0202 	bic.w	r2, r2, #2
 800351c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	005a      	lsls	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800354a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800355a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003566:	3b01      	subs	r3, #1
 8003568:	035a      	lsls	r2, r3, #13
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	e007      	b.n	8003584 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003582:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003592:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	3b01      	subs	r3, #1
 80035a0:	051a      	lsls	r2, r3, #20
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80035b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6899      	ldr	r1, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80035c6:	025a      	lsls	r2, r3, #9
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	029a      	lsls	r2, r3, #10
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	40012300 	.word	0x40012300
 8003604:	0f000001 	.word	0x0f000001

08003608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003618:	4b0b      	ldr	r3, [pc, #44]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003630:	4b06      	ldr	r3, [pc, #24]	; (800364c <__NVIC_SetPriorityGrouping+0x44>)
 8003632:	4313      	orrs	r3, r2
 8003634:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003636:	4a04      	ldr	r2, [pc, #16]	; (8003648 <__NVIC_SetPriorityGrouping+0x40>)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	60d3      	str	r3, [r2, #12]
}
 800363c:	bf00      	nop
 800363e:	3714      	adds	r7, #20
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr
 8003648:	e000ed00 	.word	0xe000ed00
 800364c:	05fa0000 	.word	0x05fa0000

08003650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003654:	4b04      	ldr	r3, [pc, #16]	; (8003668 <__NVIC_GetPriorityGrouping+0x18>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367a:	2b00      	cmp	r3, #0
 800367c:	db0b      	blt.n	8003696 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800367e:	79fb      	ldrb	r3, [r7, #7]
 8003680:	f003 021f 	and.w	r2, r3, #31
 8003684:	4907      	ldr	r1, [pc, #28]	; (80036a4 <__NVIC_EnableIRQ+0x38>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	095b      	lsrs	r3, r3, #5
 800368c:	2001      	movs	r0, #1
 800368e:	fa00 f202 	lsl.w	r2, r0, r2
 8003692:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003696:	bf00      	nop
 8003698:	370c      	adds	r7, #12
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr
 80036a2:	bf00      	nop
 80036a4:	e000e100 	.word	0xe000e100

080036a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b083      	sub	sp, #12
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	4603      	mov	r3, r0
 80036b0:	6039      	str	r1, [r7, #0]
 80036b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	db0a      	blt.n	80036d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	490c      	ldr	r1, [pc, #48]	; (80036f4 <__NVIC_SetPriority+0x4c>)
 80036c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036c6:	0112      	lsls	r2, r2, #4
 80036c8:	b2d2      	uxtb	r2, r2
 80036ca:	440b      	add	r3, r1
 80036cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80036d0:	e00a      	b.n	80036e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	b2da      	uxtb	r2, r3
 80036d6:	4908      	ldr	r1, [pc, #32]	; (80036f8 <__NVIC_SetPriority+0x50>)
 80036d8:	79fb      	ldrb	r3, [r7, #7]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	3b04      	subs	r3, #4
 80036e0:	0112      	lsls	r2, r2, #4
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	440b      	add	r3, r1
 80036e6:	761a      	strb	r2, [r3, #24]
}
 80036e8:	bf00      	nop
 80036ea:	370c      	adds	r7, #12
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000e100 	.word	0xe000e100
 80036f8:	e000ed00 	.word	0xe000ed00

080036fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b089      	sub	sp, #36	; 0x24
 8003700:	af00      	add	r7, sp, #0
 8003702:	60f8      	str	r0, [r7, #12]
 8003704:	60b9      	str	r1, [r7, #8]
 8003706:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f003 0307 	and.w	r3, r3, #7
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	f1c3 0307 	rsb	r3, r3, #7
 8003716:	2b04      	cmp	r3, #4
 8003718:	bf28      	it	cs
 800371a:	2304      	movcs	r3, #4
 800371c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	3304      	adds	r3, #4
 8003722:	2b06      	cmp	r3, #6
 8003724:	d902      	bls.n	800372c <NVIC_EncodePriority+0x30>
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	3b03      	subs	r3, #3
 800372a:	e000      	b.n	800372e <NVIC_EncodePriority+0x32>
 800372c:	2300      	movs	r3, #0
 800372e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003730:	f04f 32ff 	mov.w	r2, #4294967295
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	43da      	mvns	r2, r3
 800373c:	68bb      	ldr	r3, [r7, #8]
 800373e:	401a      	ands	r2, r3
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003744:	f04f 31ff 	mov.w	r1, #4294967295
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	fa01 f303 	lsl.w	r3, r1, r3
 800374e:	43d9      	mvns	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003754:	4313      	orrs	r3, r2
         );
}
 8003756:	4618      	mov	r0, r3
 8003758:	3724      	adds	r7, #36	; 0x24
 800375a:	46bd      	mov	sp, r7
 800375c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003760:	4770      	bx	lr
	...

08003764 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3b01      	subs	r3, #1
 8003770:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003774:	d301      	bcc.n	800377a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003776:	2301      	movs	r3, #1
 8003778:	e00f      	b.n	800379a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800377a:	4a0a      	ldr	r2, [pc, #40]	; (80037a4 <SysTick_Config+0x40>)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	3b01      	subs	r3, #1
 8003780:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003782:	210f      	movs	r1, #15
 8003784:	f04f 30ff 	mov.w	r0, #4294967295
 8003788:	f7ff ff8e 	bl	80036a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <SysTick_Config+0x40>)
 800378e:	2200      	movs	r2, #0
 8003790:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003792:	4b04      	ldr	r3, [pc, #16]	; (80037a4 <SysTick_Config+0x40>)
 8003794:	2207      	movs	r2, #7
 8003796:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003798:	2300      	movs	r3, #0
}
 800379a:	4618      	mov	r0, r3
 800379c:	3708      	adds	r7, #8
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
 80037a2:	bf00      	nop
 80037a4:	e000e010 	.word	0xe000e010

080037a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f7ff ff29 	bl	8003608 <__NVIC_SetPriorityGrouping>
}
 80037b6:	bf00      	nop
 80037b8:	3708      	adds	r7, #8
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bd80      	pop	{r7, pc}

080037be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80037be:	b580      	push	{r7, lr}
 80037c0:	b086      	sub	sp, #24
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	4603      	mov	r3, r0
 80037c6:	60b9      	str	r1, [r7, #8]
 80037c8:	607a      	str	r2, [r7, #4]
 80037ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80037cc:	2300      	movs	r3, #0
 80037ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80037d0:	f7ff ff3e 	bl	8003650 <__NVIC_GetPriorityGrouping>
 80037d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	68b9      	ldr	r1, [r7, #8]
 80037da:	6978      	ldr	r0, [r7, #20]
 80037dc:	f7ff ff8e 	bl	80036fc <NVIC_EncodePriority>
 80037e0:	4602      	mov	r2, r0
 80037e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f7ff ff5d 	bl	80036a8 <__NVIC_SetPriority>
}
 80037ee:	bf00      	nop
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	4603      	mov	r3, r0
 80037fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003804:	4618      	mov	r0, r3
 8003806:	f7ff ff31 	bl	800366c <__NVIC_EnableIRQ>
}
 800380a:	bf00      	nop
 800380c:	3708      	adds	r7, #8
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}

08003812 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003812:	b580      	push	{r7, lr}
 8003814:	b082      	sub	sp, #8
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff ffa2 	bl	8003764 <SysTick_Config>
 8003820:	4603      	mov	r3, r0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
	...

0800382c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b086      	sub	sp, #24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003838:	f7ff fc22 	bl	8003080 <HAL_GetTick>
 800383c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e099      	b.n	800397c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2200      	movs	r2, #0
 8003854:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003868:	e00f      	b.n	800388a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800386a:	f7ff fc09 	bl	8003080 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	2b05      	cmp	r3, #5
 8003876:	d908      	bls.n	800388a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2220      	movs	r2, #32
 800387c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2203      	movs	r2, #3
 8003882:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e078      	b.n	800397c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f003 0301 	and.w	r3, r3, #1
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1e8      	bne.n	800386a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80038a0:	697a      	ldr	r2, [r7, #20]
 80038a2:	4b38      	ldr	r3, [pc, #224]	; (8003984 <HAL_DMA_Init+0x158>)
 80038a4:	4013      	ands	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80038c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80038ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80038d6:	697a      	ldr	r2, [r7, #20]
 80038d8:	4313      	orrs	r3, r2
 80038da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e0:	2b04      	cmp	r3, #4
 80038e2:	d107      	bne.n	80038f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ec:	4313      	orrs	r3, r2
 80038ee:	697a      	ldr	r2, [r7, #20]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	695b      	ldr	r3, [r3, #20]
 8003902:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	f023 0307 	bic.w	r3, r3, #7
 800390a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	4313      	orrs	r3, r2
 8003914:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391a:	2b04      	cmp	r3, #4
 800391c:	d117      	bne.n	800394e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003922:	697a      	ldr	r2, [r7, #20]
 8003924:	4313      	orrs	r3, r2
 8003926:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00e      	beq.n	800394e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f9e9 	bl	8003d08 <DMA_CheckFifoParam>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d008      	beq.n	800394e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2240      	movs	r2, #64	; 0x40
 8003940:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2201      	movs	r2, #1
 8003946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800394a:	2301      	movs	r3, #1
 800394c:	e016      	b.n	800397c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	697a      	ldr	r2, [r7, #20]
 8003954:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f000 f9a0 	bl	8003c9c <DMA_CalcBaseAndBitshift>
 800395c:	4603      	mov	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003964:	223f      	movs	r2, #63	; 0x3f
 8003966:	409a      	lsls	r2, r3
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800397a:	2300      	movs	r3, #0
}
 800397c:	4618      	mov	r0, r3
 800397e:	3718      	adds	r7, #24
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}
 8003984:	f010803f 	.word	0xf010803f

08003988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b086      	sub	sp, #24
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8003994:	4b8e      	ldr	r3, [pc, #568]	; (8003bd0 <HAL_DMA_IRQHandler+0x248>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a8e      	ldr	r2, [pc, #568]	; (8003bd4 <HAL_DMA_IRQHandler+0x24c>)
 800399a:	fba2 2303 	umull	r2, r3, r2, r3
 800399e:	0a9b      	lsrs	r3, r3, #10
 80039a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b2:	2208      	movs	r2, #8
 80039b4:	409a      	lsls	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4013      	ands	r3, r2
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d01a      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0304 	and.w	r3, r3, #4
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d013      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f022 0204 	bic.w	r2, r2, #4
 80039da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039e0:	2208      	movs	r2, #8
 80039e2:	409a      	lsls	r2, r3
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ec:	f043 0201 	orr.w	r2, r3, #1
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2201      	movs	r2, #1
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d012      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	695b      	ldr	r3, [r3, #20]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00b      	beq.n	8003a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a16:	2201      	movs	r2, #1
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a22:	f043 0202 	orr.w	r2, r3, #2
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2e:	2204      	movs	r2, #4
 8003a30:	409a      	lsls	r2, r3
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	4013      	ands	r3, r2
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d012      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f003 0302 	and.w	r3, r3, #2
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00b      	beq.n	8003a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a4c:	2204      	movs	r2, #4
 8003a4e:	409a      	lsls	r2, r3
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a64:	2210      	movs	r2, #16
 8003a66:	409a      	lsls	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d043      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	f003 0308 	and.w	r3, r3, #8
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d03c      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a82:	2210      	movs	r2, #16
 8003a84:	409a      	lsls	r2, r3
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d018      	beq.n	8003aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d024      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab2:	6878      	ldr	r0, [r7, #4]
 8003ab4:	4798      	blx	r3
 8003ab6:	e01f      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01b      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e016      	b.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d107      	bne.n	8003ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f022 0208 	bic.w	r2, r2, #8
 8003ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d003      	beq.n	8003af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af4:	6878      	ldr	r0, [r7, #4]
 8003af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afc:	2220      	movs	r2, #32
 8003afe:	409a      	lsls	r2, r3
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	4013      	ands	r3, r2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 808f 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0310 	and.w	r3, r3, #16
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	f000 8087 	beq.w	8003c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	2220      	movs	r2, #32
 8003b20:	409a      	lsls	r2, r3
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b2c:	b2db      	uxtb	r3, r3
 8003b2e:	2b05      	cmp	r3, #5
 8003b30:	d136      	bne.n	8003ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f022 0216 	bic.w	r2, r2, #22
 8003b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695a      	ldr	r2, [r3, #20]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d103      	bne.n	8003b62 <HAL_DMA_IRQHandler+0x1da>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d007      	beq.n	8003b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 0208 	bic.w	r2, r2, #8
 8003b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b76:	223f      	movs	r2, #63	; 0x3f
 8003b78:	409a      	lsls	r2, r3
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2201      	movs	r2, #1
 8003b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d07e      	beq.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	4798      	blx	r3
        }
        return;
 8003b9e:	e079      	b.n	8003c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d01d      	beq.n	8003bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d10d      	bne.n	8003bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d031      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	4798      	blx	r3
 8003bcc:	e02c      	b.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
 8003bce:	bf00      	nop
 8003bd0:	20000000 	.word	0x20000000
 8003bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d023      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	4798      	blx	r3
 8003be8:	e01e      	b.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10f      	bne.n	8003c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0210 	bic.w	r2, r2, #16
 8003c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d003      	beq.n	8003c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d032      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c34:	f003 0301 	and.w	r3, r3, #1
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d022      	beq.n	8003c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2205      	movs	r2, #5
 8003c40:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f022 0201 	bic.w	r2, r2, #1
 8003c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	697a      	ldr	r2, [r7, #20]
 8003c5c:	429a      	cmp	r2, r3
 8003c5e:	d307      	bcc.n	8003c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0301 	and.w	r3, r3, #1
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f2      	bne.n	8003c54 <HAL_DMA_IRQHandler+0x2cc>
 8003c6e:	e000      	b.n	8003c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	2201      	movs	r2, #1
 8003c76:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2200      	movs	r2, #0
 8003c7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d005      	beq.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	4798      	blx	r3
 8003c92:	e000      	b.n	8003c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003c94:	bf00      	nop
    }
  }
}
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b085      	sub	sp, #20
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	3b10      	subs	r3, #16
 8003cac:	4a13      	ldr	r2, [pc, #76]	; (8003cfc <DMA_CalcBaseAndBitshift+0x60>)
 8003cae:	fba2 2303 	umull	r2, r3, r2, r3
 8003cb2:	091b      	lsrs	r3, r3, #4
 8003cb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003cb6:	4a12      	ldr	r2, [pc, #72]	; (8003d00 <DMA_CalcBaseAndBitshift+0x64>)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4413      	add	r3, r2
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2b03      	cmp	r3, #3
 8003cc8:	d908      	bls.n	8003cdc <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	461a      	mov	r2, r3
 8003cd0:	4b0c      	ldr	r3, [pc, #48]	; (8003d04 <DMA_CalcBaseAndBitshift+0x68>)
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	1d1a      	adds	r2, r3, #4
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	659a      	str	r2, [r3, #88]	; 0x58
 8003cda:	e006      	b.n	8003cea <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	461a      	mov	r2, r3
 8003ce2:	4b08      	ldr	r3, [pc, #32]	; (8003d04 <DMA_CalcBaseAndBitshift+0x68>)
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003cee:	4618      	mov	r0, r3
 8003cf0:	3714      	adds	r7, #20
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf8:	4770      	bx	lr
 8003cfa:	bf00      	nop
 8003cfc:	aaaaaaab 	.word	0xaaaaaaab
 8003d00:	0801959c 	.word	0x0801959c
 8003d04:	fffffc00 	.word	0xfffffc00

08003d08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b085      	sub	sp, #20
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003d10:	2300      	movs	r3, #0
 8003d12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11f      	bne.n	8003d62 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	2b03      	cmp	r3, #3
 8003d26:	d856      	bhi.n	8003dd6 <DMA_CheckFifoParam+0xce>
 8003d28:	a201      	add	r2, pc, #4	; (adr r2, 8003d30 <DMA_CheckFifoParam+0x28>)
 8003d2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d2e:	bf00      	nop
 8003d30:	08003d41 	.word	0x08003d41
 8003d34:	08003d53 	.word	0x08003d53
 8003d38:	08003d41 	.word	0x08003d41
 8003d3c:	08003dd7 	.word	0x08003dd7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d046      	beq.n	8003dda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d50:	e043      	b.n	8003dda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d5a:	d140      	bne.n	8003dde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d60:	e03d      	b.n	8003dde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	699b      	ldr	r3, [r3, #24]
 8003d66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d6a:	d121      	bne.n	8003db0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d837      	bhi.n	8003de2 <DMA_CheckFifoParam+0xda>
 8003d72:	a201      	add	r2, pc, #4	; (adr r2, 8003d78 <DMA_CheckFifoParam+0x70>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d8f 	.word	0x08003d8f
 8003d80:	08003d89 	.word	0x08003d89
 8003d84:	08003da1 	.word	0x08003da1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003d88:	2301      	movs	r3, #1
 8003d8a:	73fb      	strb	r3, [r7, #15]
      break;
 8003d8c:	e030      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d025      	beq.n	8003de6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d9e:	e022      	b.n	8003de6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003da4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003da8:	d11f      	bne.n	8003dea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003dae:	e01c      	b.n	8003dea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d903      	bls.n	8003dbe <DMA_CheckFifoParam+0xb6>
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	2b03      	cmp	r3, #3
 8003dba:	d003      	beq.n	8003dc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003dbc:	e018      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	73fb      	strb	r3, [r7, #15]
      break;
 8003dc2:	e015      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d00e      	beq.n	8003dee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8003dd4:	e00b      	b.n	8003dee <DMA_CheckFifoParam+0xe6>
      break;
 8003dd6:	bf00      	nop
 8003dd8:	e00a      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dda:	bf00      	nop
 8003ddc:	e008      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dde:	bf00      	nop
 8003de0:	e006      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
      break;
 8003de2:	bf00      	nop
 8003de4:	e004      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
      break;
 8003de6:	bf00      	nop
 8003de8:	e002      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
      break;   
 8003dea:	bf00      	nop
 8003dec:	e000      	b.n	8003df0 <DMA_CheckFifoParam+0xe8>
      break;
 8003dee:	bf00      	nop
    }
  } 
  
  return status; 
 8003df0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3714      	adds	r7, #20
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop

08003e00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b089      	sub	sp, #36	; 0x24
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003e0e:	2300      	movs	r3, #0
 8003e10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003e12:	2300      	movs	r3, #0
 8003e14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	61fb      	str	r3, [r7, #28]
 8003e1e:	e175      	b.n	800410c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003e20:	2201      	movs	r2, #1
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	fa02 f303 	lsl.w	r3, r2, r3
 8003e28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e2a:	683b      	ldr	r3, [r7, #0]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	4013      	ands	r3, r2
 8003e32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	f040 8164 	bne.w	8004106 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f003 0303 	and.w	r3, r3, #3
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d005      	beq.n	8003e56 <HAL_GPIO_Init+0x56>
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	2b02      	cmp	r3, #2
 8003e54:	d130      	bne.n	8003eb8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003e5c:	69fb      	ldr	r3, [r7, #28]
 8003e5e:	005b      	lsls	r3, r3, #1
 8003e60:	2203      	movs	r2, #3
 8003e62:	fa02 f303 	lsl.w	r3, r2, r3
 8003e66:	43db      	mvns	r3, r3
 8003e68:	69ba      	ldr	r2, [r7, #24]
 8003e6a:	4013      	ands	r3, r2
 8003e6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	68da      	ldr	r2, [r3, #12]
 8003e72:	69fb      	ldr	r3, [r7, #28]
 8003e74:	005b      	lsls	r3, r3, #1
 8003e76:	fa02 f303 	lsl.w	r3, r2, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4313      	orrs	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	69ba      	ldr	r2, [r7, #24]
 8003e84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	fa02 f303 	lsl.w	r3, r2, r3
 8003e94:	43db      	mvns	r3, r3
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	4013      	ands	r3, r2
 8003e9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	091b      	lsrs	r3, r3, #4
 8003ea2:	f003 0201 	and.w	r2, r3, #1
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8003eac:	69ba      	ldr	r2, [r7, #24]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f003 0303 	and.w	r3, r3, #3
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d017      	beq.n	8003ef4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	005b      	lsls	r3, r3, #1
 8003ece:	2203      	movs	r2, #3
 8003ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed4:	43db      	mvns	r3, r3
 8003ed6:	69ba      	ldr	r2, [r7, #24]
 8003ed8:	4013      	ands	r3, r2
 8003eda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8003edc:	683b      	ldr	r3, [r7, #0]
 8003ede:	689a      	ldr	r2, [r3, #8]
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	005b      	lsls	r3, r3, #1
 8003ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee8:	69ba      	ldr	r2, [r7, #24]
 8003eea:	4313      	orrs	r3, r2
 8003eec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69ba      	ldr	r2, [r7, #24]
 8003ef2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	f003 0303 	and.w	r3, r3, #3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d123      	bne.n	8003f48 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003f00:	69fb      	ldr	r3, [r7, #28]
 8003f02:	08da      	lsrs	r2, r3, #3
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3208      	adds	r2, #8
 8003f08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003f0e:	69fb      	ldr	r3, [r7, #28]
 8003f10:	f003 0307 	and.w	r3, r3, #7
 8003f14:	009b      	lsls	r3, r3, #2
 8003f16:	220f      	movs	r2, #15
 8003f18:	fa02 f303 	lsl.w	r3, r2, r3
 8003f1c:	43db      	mvns	r3, r3
 8003f1e:	69ba      	ldr	r2, [r7, #24]
 8003f20:	4013      	ands	r3, r2
 8003f22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	f003 0307 	and.w	r3, r3, #7
 8003f2e:	009b      	lsls	r3, r3, #2
 8003f30:	fa02 f303 	lsl.w	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	08da      	lsrs	r2, r3, #3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	3208      	adds	r2, #8
 8003f42:	69b9      	ldr	r1, [r7, #24]
 8003f44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	005b      	lsls	r3, r3, #1
 8003f52:	2203      	movs	r2, #3
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	43db      	mvns	r3, r3
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003f60:	683b      	ldr	r3, [r7, #0]
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	f003 0203 	and.w	r2, r3, #3
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	005b      	lsls	r3, r3, #1
 8003f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003f70:	69ba      	ldr	r2, [r7, #24]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	69ba      	ldr	r2, [r7, #24]
 8003f7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	f000 80be 	beq.w	8004106 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f8a:	4b66      	ldr	r3, [pc, #408]	; (8004124 <HAL_GPIO_Init+0x324>)
 8003f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f8e:	4a65      	ldr	r2, [pc, #404]	; (8004124 <HAL_GPIO_Init+0x324>)
 8003f90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f94:	6453      	str	r3, [r2, #68]	; 0x44
 8003f96:	4b63      	ldr	r3, [pc, #396]	; (8004124 <HAL_GPIO_Init+0x324>)
 8003f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f9e:	60fb      	str	r3, [r7, #12]
 8003fa0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003fa2:	4a61      	ldr	r2, [pc, #388]	; (8004128 <HAL_GPIO_Init+0x328>)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	089b      	lsrs	r3, r3, #2
 8003fa8:	3302      	adds	r3, #2
 8003faa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fae:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	f003 0303 	and.w	r3, r3, #3
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	220f      	movs	r2, #15
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a58      	ldr	r2, [pc, #352]	; (800412c <HAL_GPIO_Init+0x32c>)
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d037      	beq.n	800403e <HAL_GPIO_Init+0x23e>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4a57      	ldr	r2, [pc, #348]	; (8004130 <HAL_GPIO_Init+0x330>)
 8003fd2:	4293      	cmp	r3, r2
 8003fd4:	d031      	beq.n	800403a <HAL_GPIO_Init+0x23a>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	4a56      	ldr	r2, [pc, #344]	; (8004134 <HAL_GPIO_Init+0x334>)
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d02b      	beq.n	8004036 <HAL_GPIO_Init+0x236>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	4a55      	ldr	r2, [pc, #340]	; (8004138 <HAL_GPIO_Init+0x338>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d025      	beq.n	8004032 <HAL_GPIO_Init+0x232>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4a54      	ldr	r2, [pc, #336]	; (800413c <HAL_GPIO_Init+0x33c>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d01f      	beq.n	800402e <HAL_GPIO_Init+0x22e>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	4a53      	ldr	r2, [pc, #332]	; (8004140 <HAL_GPIO_Init+0x340>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d019      	beq.n	800402a <HAL_GPIO_Init+0x22a>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	; (8004144 <HAL_GPIO_Init+0x344>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d013      	beq.n	8004026 <HAL_GPIO_Init+0x226>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	4a51      	ldr	r2, [pc, #324]	; (8004148 <HAL_GPIO_Init+0x348>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d00d      	beq.n	8004022 <HAL_GPIO_Init+0x222>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a50      	ldr	r2, [pc, #320]	; (800414c <HAL_GPIO_Init+0x34c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d007      	beq.n	800401e <HAL_GPIO_Init+0x21e>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	4a4f      	ldr	r2, [pc, #316]	; (8004150 <HAL_GPIO_Init+0x350>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d101      	bne.n	800401a <HAL_GPIO_Init+0x21a>
 8004016:	2309      	movs	r3, #9
 8004018:	e012      	b.n	8004040 <HAL_GPIO_Init+0x240>
 800401a:	230a      	movs	r3, #10
 800401c:	e010      	b.n	8004040 <HAL_GPIO_Init+0x240>
 800401e:	2308      	movs	r3, #8
 8004020:	e00e      	b.n	8004040 <HAL_GPIO_Init+0x240>
 8004022:	2307      	movs	r3, #7
 8004024:	e00c      	b.n	8004040 <HAL_GPIO_Init+0x240>
 8004026:	2306      	movs	r3, #6
 8004028:	e00a      	b.n	8004040 <HAL_GPIO_Init+0x240>
 800402a:	2305      	movs	r3, #5
 800402c:	e008      	b.n	8004040 <HAL_GPIO_Init+0x240>
 800402e:	2304      	movs	r3, #4
 8004030:	e006      	b.n	8004040 <HAL_GPIO_Init+0x240>
 8004032:	2303      	movs	r3, #3
 8004034:	e004      	b.n	8004040 <HAL_GPIO_Init+0x240>
 8004036:	2302      	movs	r3, #2
 8004038:	e002      	b.n	8004040 <HAL_GPIO_Init+0x240>
 800403a:	2301      	movs	r3, #1
 800403c:	e000      	b.n	8004040 <HAL_GPIO_Init+0x240>
 800403e:	2300      	movs	r3, #0
 8004040:	69fa      	ldr	r2, [r7, #28]
 8004042:	f002 0203 	and.w	r2, r2, #3
 8004046:	0092      	lsls	r2, r2, #2
 8004048:	4093      	lsls	r3, r2
 800404a:	69ba      	ldr	r2, [r7, #24]
 800404c:	4313      	orrs	r3, r2
 800404e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004050:	4935      	ldr	r1, [pc, #212]	; (8004128 <HAL_GPIO_Init+0x328>)
 8004052:	69fb      	ldr	r3, [r7, #28]
 8004054:	089b      	lsrs	r3, r3, #2
 8004056:	3302      	adds	r3, #2
 8004058:	69ba      	ldr	r2, [r7, #24]
 800405a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800405e:	4b3d      	ldr	r3, [pc, #244]	; (8004154 <HAL_GPIO_Init+0x354>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	43db      	mvns	r3, r3
 8004068:	69ba      	ldr	r2, [r7, #24]
 800406a:	4013      	ands	r3, r2
 800406c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800407a:	69ba      	ldr	r2, [r7, #24]
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004082:	4a34      	ldr	r2, [pc, #208]	; (8004154 <HAL_GPIO_Init+0x354>)
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004088:	4b32      	ldr	r3, [pc, #200]	; (8004154 <HAL_GPIO_Init+0x354>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	43db      	mvns	r3, r3
 8004092:	69ba      	ldr	r2, [r7, #24]
 8004094:	4013      	ands	r3, r2
 8004096:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80040ac:	4a29      	ldr	r2, [pc, #164]	; (8004154 <HAL_GPIO_Init+0x354>)
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80040b2:	4b28      	ldr	r3, [pc, #160]	; (8004154 <HAL_GPIO_Init+0x354>)
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	43db      	mvns	r3, r3
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4013      	ands	r3, r2
 80040c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d003      	beq.n	80040d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80040ce:	69ba      	ldr	r2, [r7, #24]
 80040d0:	693b      	ldr	r3, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80040d6:	4a1f      	ldr	r2, [pc, #124]	; (8004154 <HAL_GPIO_Init+0x354>)
 80040d8:	69bb      	ldr	r3, [r7, #24]
 80040da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80040dc:	4b1d      	ldr	r3, [pc, #116]	; (8004154 <HAL_GPIO_Init+0x354>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	43db      	mvns	r3, r3
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	4013      	ands	r3, r2
 80040ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80040f8:	69ba      	ldr	r2, [r7, #24]
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	4313      	orrs	r3, r2
 80040fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004100:	4a14      	ldr	r2, [pc, #80]	; (8004154 <HAL_GPIO_Init+0x354>)
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	3301      	adds	r3, #1
 800410a:	61fb      	str	r3, [r7, #28]
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b0f      	cmp	r3, #15
 8004110:	f67f ae86 	bls.w	8003e20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop
 8004118:	3724      	adds	r7, #36	; 0x24
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr
 8004122:	bf00      	nop
 8004124:	40023800 	.word	0x40023800
 8004128:	40013800 	.word	0x40013800
 800412c:	40020000 	.word	0x40020000
 8004130:	40020400 	.word	0x40020400
 8004134:	40020800 	.word	0x40020800
 8004138:	40020c00 	.word	0x40020c00
 800413c:	40021000 	.word	0x40021000
 8004140:	40021400 	.word	0x40021400
 8004144:	40021800 	.word	0x40021800
 8004148:	40021c00 	.word	0x40021c00
 800414c:	40022000 	.word	0x40022000
 8004150:	40022400 	.word	0x40022400
 8004154:	40013c00 	.word	0x40013c00

08004158 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004158:	b480      	push	{r7}
 800415a:	b085      	sub	sp, #20
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	691a      	ldr	r2, [r3, #16]
 8004168:	887b      	ldrh	r3, [r7, #2]
 800416a:	4013      	ands	r3, r2
 800416c:	2b00      	cmp	r3, #0
 800416e:	d002      	beq.n	8004176 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004170:	2301      	movs	r3, #1
 8004172:	73fb      	strb	r3, [r7, #15]
 8004174:	e001      	b.n	800417a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004176:	2300      	movs	r3, #0
 8004178:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800417a:	7bfb      	ldrb	r3, [r7, #15]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3714      	adds	r7, #20
 8004180:	46bd      	mov	sp, r7
 8004182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004186:	4770      	bx	lr

08004188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004188:	b480      	push	{r7}
 800418a:	b083      	sub	sp, #12
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	460b      	mov	r3, r1
 8004192:	807b      	strh	r3, [r7, #2]
 8004194:	4613      	mov	r3, r2
 8004196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004198:	787b      	ldrb	r3, [r7, #1]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d003      	beq.n	80041a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800419e:	887a      	ldrh	r2, [r7, #2]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80041a4:	e003      	b.n	80041ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80041a6:	887b      	ldrh	r3, [r7, #2]
 80041a8:	041a      	lsls	r2, r3, #16
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	619a      	str	r2, [r3, #24]
}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr

080041ba <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80041ba:	b480      	push	{r7}
 80041bc:	b085      	sub	sp, #20
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	460b      	mov	r3, r1
 80041c4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80041cc:	887a      	ldrh	r2, [r7, #2]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	4013      	ands	r3, r2
 80041d2:	041a      	lsls	r2, r3, #16
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	43d9      	mvns	r1, r3
 80041d8:	887b      	ldrh	r3, [r7, #2]
 80041da:	400b      	ands	r3, r1
 80041dc:	431a      	orrs	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	619a      	str	r2, [r3, #24]
}
 80041e2:	bf00      	nop
 80041e4:	3714      	adds	r7, #20
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr

080041ee <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80041ee:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f0:	b08f      	sub	sp, #60	; 0x3c
 80041f2:	af0a      	add	r7, sp, #40	; 0x28
 80041f4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d101      	bne.n	8004200 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e054      	b.n	80042aa <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f011 fbe0 	bl	80159e0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2203      	movs	r2, #3
 8004224:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004230:	2b00      	cmp	r3, #0
 8004232:	d102      	bne.n	800423a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f007 fae3 	bl	800b80a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	687e      	ldr	r6, [r7, #4]
 800424c:	466d      	mov	r5, sp
 800424e:	f106 0410 	add.w	r4, r6, #16
 8004252:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004254:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004256:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004258:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800425a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800425e:	e885 0003 	stmia.w	r5, {r0, r1}
 8004262:	1d33      	adds	r3, r6, #4
 8004264:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004266:	6838      	ldr	r0, [r7, #0]
 8004268:	f007 f9c4 	bl	800b5f4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	2101      	movs	r1, #1
 8004272:	4618      	mov	r0, r3
 8004274:	f007 fada 	bl	800b82c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	603b      	str	r3, [r7, #0]
 800427e:	687e      	ldr	r6, [r7, #4]
 8004280:	466d      	mov	r5, sp
 8004282:	f106 0410 	add.w	r4, r6, #16
 8004286:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004288:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800428a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800428c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800428e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004292:	e885 0003 	stmia.w	r5, {r0, r1}
 8004296:	1d33      	adds	r3, r6, #4
 8004298:	cb0e      	ldmia	r3, {r1, r2, r3}
 800429a:	6838      	ldr	r0, [r7, #0]
 800429c:	f008 fe16 	bl	800cecc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080042b2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80042b2:	b590      	push	{r4, r7, lr}
 80042b4:	b089      	sub	sp, #36	; 0x24
 80042b6:	af04      	add	r7, sp, #16
 80042b8:	6078      	str	r0, [r7, #4]
 80042ba:	4608      	mov	r0, r1
 80042bc:	4611      	mov	r1, r2
 80042be:	461a      	mov	r2, r3
 80042c0:	4603      	mov	r3, r0
 80042c2:	70fb      	strb	r3, [r7, #3]
 80042c4:	460b      	mov	r3, r1
 80042c6:	70bb      	strb	r3, [r7, #2]
 80042c8:	4613      	mov	r3, r2
 80042ca:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d101      	bne.n	80042da <HAL_HCD_HC_Init+0x28>
 80042d6:	2302      	movs	r3, #2
 80042d8:	e076      	b.n	80043c8 <HAL_HCD_HC_Init+0x116>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	212c      	movs	r1, #44	; 0x2c
 80042e8:	fb01 f303 	mul.w	r3, r1, r3
 80042ec:	4413      	add	r3, r2
 80042ee:	333d      	adds	r3, #61	; 0x3d
 80042f0:	2200      	movs	r2, #0
 80042f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	687a      	ldr	r2, [r7, #4]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	3338      	adds	r3, #56	; 0x38
 8004302:	787a      	ldrb	r2, [r7, #1]
 8004304:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8004306:	78fb      	ldrb	r3, [r7, #3]
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	212c      	movs	r1, #44	; 0x2c
 800430c:	fb01 f303 	mul.w	r3, r1, r3
 8004310:	4413      	add	r3, r2
 8004312:	3340      	adds	r3, #64	; 0x40
 8004314:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004316:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004318:	78fb      	ldrb	r3, [r7, #3]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	212c      	movs	r1, #44	; 0x2c
 800431e:	fb01 f303 	mul.w	r3, r1, r3
 8004322:	4413      	add	r3, r2
 8004324:	3339      	adds	r3, #57	; 0x39
 8004326:	78fa      	ldrb	r2, [r7, #3]
 8004328:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800432a:	78fb      	ldrb	r3, [r7, #3]
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	212c      	movs	r1, #44	; 0x2c
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	4413      	add	r3, r2
 8004336:	333f      	adds	r3, #63	; 0x3f
 8004338:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800433c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800433e:	78fb      	ldrb	r3, [r7, #3]
 8004340:	78ba      	ldrb	r2, [r7, #2]
 8004342:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004346:	b2d0      	uxtb	r0, r2
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	212c      	movs	r1, #44	; 0x2c
 800434c:	fb01 f303 	mul.w	r3, r1, r3
 8004350:	4413      	add	r3, r2
 8004352:	333a      	adds	r3, #58	; 0x3a
 8004354:	4602      	mov	r2, r0
 8004356:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8004358:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800435c:	2b00      	cmp	r3, #0
 800435e:	da09      	bge.n	8004374 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8004360:	78fb      	ldrb	r3, [r7, #3]
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	212c      	movs	r1, #44	; 0x2c
 8004366:	fb01 f303 	mul.w	r3, r1, r3
 800436a:	4413      	add	r3, r2
 800436c:	333b      	adds	r3, #59	; 0x3b
 800436e:	2201      	movs	r2, #1
 8004370:	701a      	strb	r2, [r3, #0]
 8004372:	e008      	b.n	8004386 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8004374:	78fb      	ldrb	r3, [r7, #3]
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	212c      	movs	r1, #44	; 0x2c
 800437a:	fb01 f303 	mul.w	r3, r1, r3
 800437e:	4413      	add	r3, r2
 8004380:	333b      	adds	r3, #59	; 0x3b
 8004382:	2200      	movs	r2, #0
 8004384:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8004386:	78fb      	ldrb	r3, [r7, #3]
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	212c      	movs	r1, #44	; 0x2c
 800438c:	fb01 f303 	mul.w	r3, r1, r3
 8004390:	4413      	add	r3, r2
 8004392:	333c      	adds	r3, #60	; 0x3c
 8004394:	f897 2020 	ldrb.w	r2, [r7, #32]
 8004398:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
 800439e:	787c      	ldrb	r4, [r7, #1]
 80043a0:	78ba      	ldrb	r2, [r7, #2]
 80043a2:	78f9      	ldrb	r1, [r7, #3]
 80043a4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80043a6:	9302      	str	r3, [sp, #8]
 80043a8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4623      	mov	r3, r4
 80043b6:	f008 ff03 	bl	800d1c0 <USB_HC_Init>
 80043ba:	4603      	mov	r3, r0
 80043bc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80043c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd90      	pop	{r4, r7, pc}

080043d0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	460b      	mov	r3, r1
 80043da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80043dc:	2300      	movs	r3, #0
 80043de:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d101      	bne.n	80043ee <HAL_HCD_HC_Halt+0x1e>
 80043ea:	2302      	movs	r3, #2
 80043ec:	e00f      	b.n	800440e <HAL_HCD_HC_Halt+0x3e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2201      	movs	r2, #1
 80043f2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	78fa      	ldrb	r2, [r7, #3]
 80043fc:	4611      	mov	r1, r2
 80043fe:	4618      	mov	r0, r3
 8004400:	f009 f953 	bl	800d6aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3710      	adds	r7, #16
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
	...

08004418 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
 8004420:	4608      	mov	r0, r1
 8004422:	4611      	mov	r1, r2
 8004424:	461a      	mov	r2, r3
 8004426:	4603      	mov	r3, r0
 8004428:	70fb      	strb	r3, [r7, #3]
 800442a:	460b      	mov	r3, r1
 800442c:	70bb      	strb	r3, [r7, #2]
 800442e:	4613      	mov	r3, r2
 8004430:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8004432:	78fb      	ldrb	r3, [r7, #3]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	212c      	movs	r1, #44	; 0x2c
 8004438:	fb01 f303 	mul.w	r3, r1, r3
 800443c:	4413      	add	r3, r2
 800443e:	333b      	adds	r3, #59	; 0x3b
 8004440:	78ba      	ldrb	r2, [r7, #2]
 8004442:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8004444:	78fb      	ldrb	r3, [r7, #3]
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	212c      	movs	r1, #44	; 0x2c
 800444a:	fb01 f303 	mul.w	r3, r1, r3
 800444e:	4413      	add	r3, r2
 8004450:	333f      	adds	r3, #63	; 0x3f
 8004452:	787a      	ldrb	r2, [r7, #1]
 8004454:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8004456:	7c3b      	ldrb	r3, [r7, #16]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d112      	bne.n	8004482 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	687a      	ldr	r2, [r7, #4]
 8004460:	212c      	movs	r1, #44	; 0x2c
 8004462:	fb01 f303 	mul.w	r3, r1, r3
 8004466:	4413      	add	r3, r2
 8004468:	3342      	adds	r3, #66	; 0x42
 800446a:	2203      	movs	r2, #3
 800446c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800446e:	78fb      	ldrb	r3, [r7, #3]
 8004470:	687a      	ldr	r2, [r7, #4]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	333d      	adds	r3, #61	; 0x3d
 800447c:	7f3a      	ldrb	r2, [r7, #28]
 800447e:	701a      	strb	r2, [r3, #0]
 8004480:	e008      	b.n	8004494 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004482:	78fb      	ldrb	r3, [r7, #3]
 8004484:	687a      	ldr	r2, [r7, #4]
 8004486:	212c      	movs	r1, #44	; 0x2c
 8004488:	fb01 f303 	mul.w	r3, r1, r3
 800448c:	4413      	add	r3, r2
 800448e:	3342      	adds	r3, #66	; 0x42
 8004490:	2202      	movs	r2, #2
 8004492:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8004494:	787b      	ldrb	r3, [r7, #1]
 8004496:	2b03      	cmp	r3, #3
 8004498:	f200 80c6 	bhi.w	8004628 <HAL_HCD_HC_SubmitRequest+0x210>
 800449c:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 800449e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a2:	bf00      	nop
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	08004615 	.word	0x08004615
 80044ac:	08004519 	.word	0x08004519
 80044b0:	08004597 	.word	0x08004597
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80044b4:	7c3b      	ldrb	r3, [r7, #16]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	f040 80b8 	bne.w	800462c <HAL_HCD_HC_SubmitRequest+0x214>
 80044bc:	78bb      	ldrb	r3, [r7, #2]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	f040 80b4 	bne.w	800462c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80044c4:	8b3b      	ldrh	r3, [r7, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d108      	bne.n	80044dc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80044ca:	78fb      	ldrb	r3, [r7, #3]
 80044cc:	687a      	ldr	r2, [r7, #4]
 80044ce:	212c      	movs	r1, #44	; 0x2c
 80044d0:	fb01 f303 	mul.w	r3, r1, r3
 80044d4:	4413      	add	r3, r2
 80044d6:	3355      	adds	r3, #85	; 0x55
 80044d8:	2201      	movs	r2, #1
 80044da:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80044dc:	78fb      	ldrb	r3, [r7, #3]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	212c      	movs	r1, #44	; 0x2c
 80044e2:	fb01 f303 	mul.w	r3, r1, r3
 80044e6:	4413      	add	r3, r2
 80044e8:	3355      	adds	r3, #85	; 0x55
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d109      	bne.n	8004504 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80044f0:	78fb      	ldrb	r3, [r7, #3]
 80044f2:	687a      	ldr	r2, [r7, #4]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	3342      	adds	r3, #66	; 0x42
 80044fe:	2200      	movs	r2, #0
 8004500:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8004502:	e093      	b.n	800462c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004504:	78fb      	ldrb	r3, [r7, #3]
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	3342      	adds	r3, #66	; 0x42
 8004512:	2202      	movs	r2, #2
 8004514:	701a      	strb	r2, [r3, #0]
      break;
 8004516:	e089      	b.n	800462c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8004518:	78bb      	ldrb	r3, [r7, #2]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d11d      	bne.n	800455a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800451e:	78fb      	ldrb	r3, [r7, #3]
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	212c      	movs	r1, #44	; 0x2c
 8004524:	fb01 f303 	mul.w	r3, r1, r3
 8004528:	4413      	add	r3, r2
 800452a:	3355      	adds	r3, #85	; 0x55
 800452c:	781b      	ldrb	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d109      	bne.n	8004546 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	212c      	movs	r1, #44	; 0x2c
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	4413      	add	r3, r2
 800453e:	3342      	adds	r3, #66	; 0x42
 8004540:	2200      	movs	r2, #0
 8004542:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8004544:	e073      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004546:	78fb      	ldrb	r3, [r7, #3]
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	212c      	movs	r1, #44	; 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	3342      	adds	r3, #66	; 0x42
 8004554:	2202      	movs	r2, #2
 8004556:	701a      	strb	r2, [r3, #0]
      break;
 8004558:	e069      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800455a:	78fb      	ldrb	r3, [r7, #3]
 800455c:	687a      	ldr	r2, [r7, #4]
 800455e:	212c      	movs	r1, #44	; 0x2c
 8004560:	fb01 f303 	mul.w	r3, r1, r3
 8004564:	4413      	add	r3, r2
 8004566:	3354      	adds	r3, #84	; 0x54
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d109      	bne.n	8004582 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800456e:	78fb      	ldrb	r3, [r7, #3]
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	212c      	movs	r1, #44	; 0x2c
 8004574:	fb01 f303 	mul.w	r3, r1, r3
 8004578:	4413      	add	r3, r2
 800457a:	3342      	adds	r3, #66	; 0x42
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
      break;
 8004580:	e055      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004582:	78fb      	ldrb	r3, [r7, #3]
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	212c      	movs	r1, #44	; 0x2c
 8004588:	fb01 f303 	mul.w	r3, r1, r3
 800458c:	4413      	add	r3, r2
 800458e:	3342      	adds	r3, #66	; 0x42
 8004590:	2202      	movs	r2, #2
 8004592:	701a      	strb	r2, [r3, #0]
      break;
 8004594:	e04b      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8004596:	78bb      	ldrb	r3, [r7, #2]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11d      	bne.n	80045d8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800459c:	78fb      	ldrb	r3, [r7, #3]
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	212c      	movs	r1, #44	; 0x2c
 80045a2:	fb01 f303 	mul.w	r3, r1, r3
 80045a6:	4413      	add	r3, r2
 80045a8:	3355      	adds	r3, #85	; 0x55
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d109      	bne.n	80045c4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045b0:	78fb      	ldrb	r3, [r7, #3]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	212c      	movs	r1, #44	; 0x2c
 80045b6:	fb01 f303 	mul.w	r3, r1, r3
 80045ba:	4413      	add	r3, r2
 80045bc:	3342      	adds	r3, #66	; 0x42
 80045be:	2200      	movs	r2, #0
 80045c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80045c2:	e034      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80045c4:	78fb      	ldrb	r3, [r7, #3]
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	212c      	movs	r1, #44	; 0x2c
 80045ca:	fb01 f303 	mul.w	r3, r1, r3
 80045ce:	4413      	add	r3, r2
 80045d0:	3342      	adds	r3, #66	; 0x42
 80045d2:	2202      	movs	r2, #2
 80045d4:	701a      	strb	r2, [r3, #0]
      break;
 80045d6:	e02a      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80045d8:	78fb      	ldrb	r3, [r7, #3]
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3354      	adds	r3, #84	; 0x54
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d109      	bne.n	8004600 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80045ec:	78fb      	ldrb	r3, [r7, #3]
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	212c      	movs	r1, #44	; 0x2c
 80045f2:	fb01 f303 	mul.w	r3, r1, r3
 80045f6:	4413      	add	r3, r2
 80045f8:	3342      	adds	r3, #66	; 0x42
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
      break;
 80045fe:	e016      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	687a      	ldr	r2, [r7, #4]
 8004604:	212c      	movs	r1, #44	; 0x2c
 8004606:	fb01 f303 	mul.w	r3, r1, r3
 800460a:	4413      	add	r3, r2
 800460c:	3342      	adds	r3, #66	; 0x42
 800460e:	2202      	movs	r2, #2
 8004610:	701a      	strb	r2, [r3, #0]
      break;
 8004612:	e00c      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8004614:	78fb      	ldrb	r3, [r7, #3]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	212c      	movs	r1, #44	; 0x2c
 800461a:	fb01 f303 	mul.w	r3, r1, r3
 800461e:	4413      	add	r3, r2
 8004620:	3342      	adds	r3, #66	; 0x42
 8004622:	2200      	movs	r2, #0
 8004624:	701a      	strb	r2, [r3, #0]
      break;
 8004626:	e002      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8004628:	bf00      	nop
 800462a:	e000      	b.n	800462e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800462c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800462e:	78fb      	ldrb	r3, [r7, #3]
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	212c      	movs	r1, #44	; 0x2c
 8004634:	fb01 f303 	mul.w	r3, r1, r3
 8004638:	4413      	add	r3, r2
 800463a:	3344      	adds	r3, #68	; 0x44
 800463c:	697a      	ldr	r2, [r7, #20]
 800463e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8004640:	78fb      	ldrb	r3, [r7, #3]
 8004642:	8b3a      	ldrh	r2, [r7, #24]
 8004644:	6879      	ldr	r1, [r7, #4]
 8004646:	202c      	movs	r0, #44	; 0x2c
 8004648:	fb00 f303 	mul.w	r3, r0, r3
 800464c:	440b      	add	r3, r1
 800464e:	334c      	adds	r3, #76	; 0x4c
 8004650:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8004652:	78fb      	ldrb	r3, [r7, #3]
 8004654:	687a      	ldr	r2, [r7, #4]
 8004656:	212c      	movs	r1, #44	; 0x2c
 8004658:	fb01 f303 	mul.w	r3, r1, r3
 800465c:	4413      	add	r3, r2
 800465e:	3360      	adds	r3, #96	; 0x60
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8004664:	78fb      	ldrb	r3, [r7, #3]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	212c      	movs	r1, #44	; 0x2c
 800466a:	fb01 f303 	mul.w	r3, r1, r3
 800466e:	4413      	add	r3, r2
 8004670:	3350      	adds	r3, #80	; 0x50
 8004672:	2200      	movs	r2, #0
 8004674:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8004676:	78fb      	ldrb	r3, [r7, #3]
 8004678:	687a      	ldr	r2, [r7, #4]
 800467a:	212c      	movs	r1, #44	; 0x2c
 800467c:	fb01 f303 	mul.w	r3, r1, r3
 8004680:	4413      	add	r3, r2
 8004682:	3339      	adds	r3, #57	; 0x39
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8004688:	78fb      	ldrb	r3, [r7, #3]
 800468a:	687a      	ldr	r2, [r7, #4]
 800468c:	212c      	movs	r1, #44	; 0x2c
 800468e:	fb01 f303 	mul.w	r3, r1, r3
 8004692:	4413      	add	r3, r2
 8004694:	3361      	adds	r3, #97	; 0x61
 8004696:	2200      	movs	r2, #0
 8004698:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6818      	ldr	r0, [r3, #0]
 800469e:	78fb      	ldrb	r3, [r7, #3]
 80046a0:	222c      	movs	r2, #44	; 0x2c
 80046a2:	fb02 f303 	mul.w	r3, r2, r3
 80046a6:	3338      	adds	r3, #56	; 0x38
 80046a8:	687a      	ldr	r2, [r7, #4]
 80046aa:	18d1      	adds	r1, r2, r3
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	f008 fea6 	bl	800d404 <USB_HC_StartXfer>
 80046b8:	4603      	mov	r3, r0
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3708      	adds	r7, #8
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop

080046c4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80046c4:	b580      	push	{r7, lr}
 80046c6:	b086      	sub	sp, #24
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f008 fb32 	bl	800cd44 <USB_GetMode>
 80046e0:	4603      	mov	r3, r0
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	f040 80f6 	bne.w	80048d4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4618      	mov	r0, r3
 80046ee:	f008 fa75 	bl	800cbdc <USB_ReadInterrupts>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	f000 80ec 	beq.w	80048d2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	4618      	mov	r0, r3
 8004700:	f008 fa6c 	bl	800cbdc <USB_ReadInterrupts>
 8004704:	4603      	mov	r3, r0
 8004706:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800470a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800470e:	d104      	bne.n	800471a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8004718:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f008 fa5c 	bl	800cbdc <USB_ReadInterrupts>
 8004724:	4603      	mov	r3, r0
 8004726:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800472a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800472e:	d104      	bne.n	800473a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8004738:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4618      	mov	r0, r3
 8004740:	f008 fa4c 	bl	800cbdc <USB_ReadInterrupts>
 8004744:	4603      	mov	r3, r0
 8004746:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800474a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800474e:	d104      	bne.n	800475a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8004758:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4618      	mov	r0, r3
 8004760:	f008 fa3c 	bl	800cbdc <USB_ReadInterrupts>
 8004764:	4603      	mov	r3, r0
 8004766:	f003 0302 	and.w	r3, r3, #2
 800476a:	2b02      	cmp	r3, #2
 800476c:	d103      	bne.n	8004776 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2202      	movs	r2, #2
 8004774:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4618      	mov	r0, r3
 800477c:	f008 fa2e 	bl	800cbdc <USB_ReadInterrupts>
 8004780:	4603      	mov	r3, r0
 8004782:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478a:	d11c      	bne.n	80047c6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8004794:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 0301 	and.w	r3, r3, #1
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10f      	bne.n	80047c6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80047a6:	2110      	movs	r1, #16
 80047a8:	6938      	ldr	r0, [r7, #16]
 80047aa:	f007 f9e9 	bl	800bb80 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80047ae:	6938      	ldr	r0, [r7, #16]
 80047b0:	f007 fa1a 	bl	800bbe8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	2101      	movs	r1, #1
 80047ba:	4618      	mov	r0, r3
 80047bc:	f008 fc3a 	bl	800d034 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f011 f99b 	bl	8015afc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f008 fa06 	bl	800cbdc <USB_ReadInterrupts>
 80047d0:	4603      	mov	r3, r0
 80047d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047d6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80047da:	d102      	bne.n	80047e2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 f9ce 	bl	8005b7e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	4618      	mov	r0, r3
 80047e8:	f008 f9f8 	bl	800cbdc <USB_ReadInterrupts>
 80047ec:	4603      	mov	r3, r0
 80047ee:	f003 0308 	and.w	r3, r3, #8
 80047f2:	2b08      	cmp	r3, #8
 80047f4:	d106      	bne.n	8004804 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f011 f964 	bl	8015ac4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2208      	movs	r2, #8
 8004802:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4618      	mov	r0, r3
 800480a:	f008 f9e7 	bl	800cbdc <USB_ReadInterrupts>
 800480e:	4603      	mov	r3, r0
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b10      	cmp	r3, #16
 8004816:	d101      	bne.n	800481c <HAL_HCD_IRQHandler+0x158>
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <HAL_HCD_IRQHandler+0x15a>
 800481c:	2300      	movs	r3, #0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d012      	beq.n	8004848 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	699a      	ldr	r2, [r3, #24]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 0210 	bic.w	r2, r2, #16
 8004830:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f001 f8d1 	bl	80059da <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	699a      	ldr	r2, [r3, #24]
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0210 	orr.w	r2, r2, #16
 8004846:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4618      	mov	r0, r3
 800484e:	f008 f9c5 	bl	800cbdc <USB_ReadInterrupts>
 8004852:	4603      	mov	r3, r0
 8004854:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004858:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800485c:	d13a      	bne.n	80048d4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4618      	mov	r0, r3
 8004864:	f008 ff10 	bl	800d688 <USB_HC_ReadInterrupt>
 8004868:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800486a:	2300      	movs	r3, #0
 800486c:	617b      	str	r3, [r7, #20]
 800486e:	e025      	b.n	80048bc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004870:	697b      	ldr	r3, [r7, #20]
 8004872:	f003 030f 	and.w	r3, r3, #15
 8004876:	68ba      	ldr	r2, [r7, #8]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
 800487c:	f003 0301 	and.w	r3, r3, #1
 8004880:	2b00      	cmp	r3, #0
 8004882:	d018      	beq.n	80048b6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	015a      	lsls	r2, r3, #5
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	4413      	add	r3, r2
 800488c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004896:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800489a:	d106      	bne.n	80048aa <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	4619      	mov	r1, r3
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f8ab 	bl	80049fe <HCD_HC_IN_IRQHandler>
 80048a8:	e005      	b.n	80048b6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	b2db      	uxtb	r3, r3
 80048ae:	4619      	mov	r1, r3
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	f000 fcc6 	bl	8005242 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	3301      	adds	r3, #1
 80048ba:	617b      	str	r3, [r7, #20]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	429a      	cmp	r2, r3
 80048c4:	d3d4      	bcc.n	8004870 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80048ce:	615a      	str	r2, [r3, #20]
 80048d0:	e000      	b.n	80048d4 <HAL_HCD_IRQHandler+0x210>
      return;
 80048d2:	bf00      	nop
    }
  }
}
 80048d4:	3718      	adds	r7, #24
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bd80      	pop	{r7, pc}

080048da <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80048da:	b580      	push	{r7, lr}
 80048dc:	b082      	sub	sp, #8
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d101      	bne.n	80048f0 <HAL_HCD_Start+0x16>
 80048ec:	2302      	movs	r3, #2
 80048ee:	e013      	b.n	8004918 <HAL_HCD_Start+0x3e>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	2101      	movs	r1, #1
 80048fe:	4618      	mov	r0, r3
 8004900:	f008 fbfc 	bl	800d0fc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4618      	mov	r0, r3
 800490a:	f006 ff6d 	bl	800b7e8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004916:	2300      	movs	r3, #0
}
 8004918:	4618      	mov	r0, r3
 800491a:	3708      	adds	r7, #8
 800491c:	46bd      	mov	sp, r7
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_HCD_Stop+0x16>
 8004932:	2302      	movs	r3, #2
 8004934:	e00d      	b.n	8004952 <HAL_HCD_Stop+0x32>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2201      	movs	r2, #1
 800493a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4618      	mov	r0, r3
 8004944:	f008 ffea 	bl	800d91c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8004950:	2300      	movs	r3, #0
}
 8004952:	4618      	mov	r0, r3
 8004954:	3708      	adds	r7, #8
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b082      	sub	sp, #8
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4618      	mov	r0, r3
 8004968:	f008 fb9e 	bl	800d0a8 <USB_ResetPort>
 800496c:	4603      	mov	r3, r0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3708      	adds	r7, #8
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}

08004976 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004976:	b480      	push	{r7}
 8004978:	b083      	sub	sp, #12
 800497a:	af00      	add	r7, sp, #0
 800497c:	6078      	str	r0, [r7, #4]
 800497e:	460b      	mov	r3, r1
 8004980:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8004982:	78fb      	ldrb	r3, [r7, #3]
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	212c      	movs	r1, #44	; 0x2c
 8004988:	fb01 f303 	mul.w	r3, r1, r3
 800498c:	4413      	add	r3, r2
 800498e:	3360      	adds	r3, #96	; 0x60
 8004990:	781b      	ldrb	r3, [r3, #0]
}
 8004992:	4618      	mov	r0, r3
 8004994:	370c      	adds	r7, #12
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr

0800499e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800499e:	b480      	push	{r7}
 80049a0:	b083      	sub	sp, #12
 80049a2:	af00      	add	r7, sp, #0
 80049a4:	6078      	str	r0, [r7, #4]
 80049a6:	460b      	mov	r3, r1
 80049a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80049aa:	78fb      	ldrb	r3, [r7, #3]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3350      	adds	r3, #80	; 0x50
 80049b8:	681b      	ldr	r3, [r3, #0]
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	370c      	adds	r7, #12
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80049c6:	b580      	push	{r7, lr}
 80049c8:	b082      	sub	sp, #8
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f008 fbe2 	bl	800d19c <USB_GetCurrentFrame>
 80049d8:	4603      	mov	r3, r0
}
 80049da:	4618      	mov	r0, r3
 80049dc:	3708      	adds	r7, #8
 80049de:	46bd      	mov	sp, r7
 80049e0:	bd80      	pop	{r7, pc}

080049e2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80049e2:	b580      	push	{r7, lr}
 80049e4:	b082      	sub	sp, #8
 80049e6:	af00      	add	r7, sp, #0
 80049e8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f008 fbbd 	bl	800d16e <USB_GetHostSpeed>
 80049f4:	4603      	mov	r3, r0
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3708      	adds	r7, #8
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}

080049fe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80049fe:	b580      	push	{r7, lr}
 8004a00:	b086      	sub	sp, #24
 8004a02:	af00      	add	r7, sp, #0
 8004a04:	6078      	str	r0, [r7, #4]
 8004a06:	460b      	mov	r3, r1
 8004a08:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a10:	697b      	ldr	r3, [r7, #20]
 8004a12:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8004a14:	78fb      	ldrb	r3, [r7, #3]
 8004a16:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	b2d2      	uxtb	r2, r2
 8004a20:	4611      	mov	r1, r2
 8004a22:	4618      	mov	r0, r3
 8004a24:	f008 f8ed 	bl	800cc02 <USB_ReadChInterrupts>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	f003 0304 	and.w	r3, r3, #4
 8004a2e:	2b04      	cmp	r3, #4
 8004a30:	d11a      	bne.n	8004a68 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3e:	461a      	mov	r2, r3
 8004a40:	2304      	movs	r3, #4
 8004a42:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	212c      	movs	r1, #44	; 0x2c
 8004a4a:	fb01 f303 	mul.w	r3, r1, r3
 8004a4e:	4413      	add	r3, r2
 8004a50:	3361      	adds	r3, #97	; 0x61
 8004a52:	2207      	movs	r2, #7
 8004a54:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	b2d2      	uxtb	r2, r2
 8004a5e:	4611      	mov	r1, r2
 8004a60:	4618      	mov	r0, r3
 8004a62:	f008 fe22 	bl	800d6aa <USB_HC_Halt>
 8004a66:	e0a2      	b.n	8004bae <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	b2d2      	uxtb	r2, r2
 8004a70:	4611      	mov	r1, r2
 8004a72:	4618      	mov	r0, r3
 8004a74:	f008 f8c5 	bl	800cc02 <USB_ReadChInterrupts>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a82:	d11b      	bne.n	8004abc <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	015a      	lsls	r2, r3, #5
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	4413      	add	r3, r2
 8004a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a90:	461a      	mov	r2, r3
 8004a92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8004a98:	687a      	ldr	r2, [r7, #4]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	212c      	movs	r1, #44	; 0x2c
 8004a9e:	fb01 f303 	mul.w	r3, r1, r3
 8004aa2:	4413      	add	r3, r2
 8004aa4:	3361      	adds	r3, #97	; 0x61
 8004aa6:	2208      	movs	r2, #8
 8004aa8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68fa      	ldr	r2, [r7, #12]
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	4611      	mov	r1, r2
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	f008 fdf8 	bl	800d6aa <USB_HC_Halt>
 8004aba:	e078      	b.n	8004bae <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	b2d2      	uxtb	r2, r2
 8004ac4:	4611      	mov	r1, r2
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f008 f89b 	bl	800cc02 <USB_ReadChInterrupts>
 8004acc:	4603      	mov	r3, r0
 8004ace:	f003 0308 	and.w	r3, r3, #8
 8004ad2:	2b08      	cmp	r3, #8
 8004ad4:	d11a      	bne.n	8004b0c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	212c      	movs	r1, #44	; 0x2c
 8004aee:	fb01 f303 	mul.w	r3, r1, r3
 8004af2:	4413      	add	r3, r2
 8004af4:	3361      	adds	r3, #97	; 0x61
 8004af6:	2206      	movs	r2, #6
 8004af8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68fa      	ldr	r2, [r7, #12]
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	4611      	mov	r1, r2
 8004b04:	4618      	mov	r0, r3
 8004b06:	f008 fdd0 	bl	800d6aa <USB_HC_Halt>
 8004b0a:	e050      	b.n	8004bae <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	68fa      	ldr	r2, [r7, #12]
 8004b12:	b2d2      	uxtb	r2, r2
 8004b14:	4611      	mov	r1, r2
 8004b16:	4618      	mov	r0, r3
 8004b18:	f008 f873 	bl	800cc02 <USB_ReadChInterrupts>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b26:	d11b      	bne.n	8004b60 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	693b      	ldr	r3, [r7, #16]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b34:	461a      	mov	r2, r3
 8004b36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b3a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004b3c:	687a      	ldr	r2, [r7, #4]
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	212c      	movs	r1, #44	; 0x2c
 8004b42:	fb01 f303 	mul.w	r3, r1, r3
 8004b46:	4413      	add	r3, r2
 8004b48:	3361      	adds	r3, #97	; 0x61
 8004b4a:	2209      	movs	r2, #9
 8004b4c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	4611      	mov	r1, r2
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f008 fda6 	bl	800d6aa <USB_HC_Halt>
 8004b5e:	e026      	b.n	8004bae <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68fa      	ldr	r2, [r7, #12]
 8004b66:	b2d2      	uxtb	r2, r2
 8004b68:	4611      	mov	r1, r2
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	f008 f849 	bl	800cc02 <USB_ReadChInterrupts>
 8004b70:	4603      	mov	r3, r0
 8004b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b76:	2b80      	cmp	r3, #128	; 0x80
 8004b78:	d119      	bne.n	8004bae <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	015a      	lsls	r2, r3, #5
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	4413      	add	r3, r2
 8004b82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b86:	461a      	mov	r2, r3
 8004b88:	2380      	movs	r3, #128	; 0x80
 8004b8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004b8c:	687a      	ldr	r2, [r7, #4]
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	212c      	movs	r1, #44	; 0x2c
 8004b92:	fb01 f303 	mul.w	r3, r1, r3
 8004b96:	4413      	add	r3, r2
 8004b98:	3361      	adds	r3, #97	; 0x61
 8004b9a:	2207      	movs	r2, #7
 8004b9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	68fa      	ldr	r2, [r7, #12]
 8004ba4:	b2d2      	uxtb	r2, r2
 8004ba6:	4611      	mov	r1, r2
 8004ba8:	4618      	mov	r0, r3
 8004baa:	f008 fd7e 	bl	800d6aa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	68fa      	ldr	r2, [r7, #12]
 8004bb4:	b2d2      	uxtb	r2, r2
 8004bb6:	4611      	mov	r1, r2
 8004bb8:	4618      	mov	r0, r3
 8004bba:	f008 f822 	bl	800cc02 <USB_ReadChInterrupts>
 8004bbe:	4603      	mov	r3, r0
 8004bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bc8:	d112      	bne.n	8004bf0 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	68fa      	ldr	r2, [r7, #12]
 8004bd0:	b2d2      	uxtb	r2, r2
 8004bd2:	4611      	mov	r1, r2
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f008 fd68 	bl	800d6aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	015a      	lsls	r2, r3, #5
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	4413      	add	r3, r2
 8004be2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004be6:	461a      	mov	r2, r3
 8004be8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004bec:	6093      	str	r3, [r2, #8]
 8004bee:	e325      	b.n	800523c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	b2d2      	uxtb	r2, r2
 8004bf8:	4611      	mov	r1, r2
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	f008 f801 	bl	800cc02 <USB_ReadChInterrupts>
 8004c00:	4603      	mov	r3, r0
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	f040 80e8 	bne.w	8004ddc <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	015a      	lsls	r2, r3, #5
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	4413      	add	r3, r2
 8004c14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c18:	461a      	mov	r2, r3
 8004c1a:	2320      	movs	r3, #32
 8004c1c:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d019      	beq.n	8004c5a <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c26:	687a      	ldr	r2, [r7, #4]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	212c      	movs	r1, #44	; 0x2c
 8004c2c:	fb01 f303 	mul.w	r3, r1, r3
 8004c30:	4413      	add	r3, r2
 8004c32:	3348      	adds	r3, #72	; 0x48
 8004c34:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	0159      	lsls	r1, r3, #5
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	440b      	add	r3, r1
 8004c3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8004c48:	1ad2      	subs	r2, r2, r3
 8004c4a:	6879      	ldr	r1, [r7, #4]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	202c      	movs	r0, #44	; 0x2c
 8004c50:	fb00 f303 	mul.w	r3, r0, r3
 8004c54:	440b      	add	r3, r1
 8004c56:	3350      	adds	r3, #80	; 0x50
 8004c58:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	212c      	movs	r1, #44	; 0x2c
 8004c60:	fb01 f303 	mul.w	r3, r1, r3
 8004c64:	4413      	add	r3, r2
 8004c66:	3361      	adds	r3, #97	; 0x61
 8004c68:	2201      	movs	r2, #1
 8004c6a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004c6c:	687a      	ldr	r2, [r7, #4]
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	212c      	movs	r1, #44	; 0x2c
 8004c72:	fb01 f303 	mul.w	r3, r1, r3
 8004c76:	4413      	add	r3, r2
 8004c78:	335c      	adds	r3, #92	; 0x5c
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	015a      	lsls	r2, r3, #5
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	4413      	add	r3, r2
 8004c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004c8a:	461a      	mov	r2, r3
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	212c      	movs	r1, #44	; 0x2c
 8004c96:	fb01 f303 	mul.w	r3, r1, r3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	333f      	adds	r3, #63	; 0x3f
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004ca4:	687a      	ldr	r2, [r7, #4]
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	212c      	movs	r1, #44	; 0x2c
 8004caa:	fb01 f303 	mul.w	r3, r1, r3
 8004cae:	4413      	add	r3, r2
 8004cb0:	333f      	adds	r3, #63	; 0x3f
 8004cb2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d111      	bne.n	8004cdc <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	b2d2      	uxtb	r2, r2
 8004cc0:	4611      	mov	r1, r2
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f008 fcf1 	bl	800d6aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	2310      	movs	r3, #16
 8004cd8:	6093      	str	r3, [r2, #8]
 8004cda:	e03a      	b.n	8004d52 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	212c      	movs	r1, #44	; 0x2c
 8004ce2:	fb01 f303 	mul.w	r3, r1, r3
 8004ce6:	4413      	add	r3, r2
 8004ce8:	333f      	adds	r3, #63	; 0x3f
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b03      	cmp	r3, #3
 8004cee:	d009      	beq.n	8004d04 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	212c      	movs	r1, #44	; 0x2c
 8004cf6:	fb01 f303 	mul.w	r3, r1, r3
 8004cfa:	4413      	add	r3, r2
 8004cfc:	333f      	adds	r3, #63	; 0x3f
 8004cfe:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d126      	bne.n	8004d52 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68fa      	ldr	r2, [r7, #12]
 8004d14:	0151      	lsls	r1, r2, #5
 8004d16:	693a      	ldr	r2, [r7, #16]
 8004d18:	440a      	add	r2, r1
 8004d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8004d1e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d22:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004d24:	687a      	ldr	r2, [r7, #4]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	212c      	movs	r1, #44	; 0x2c
 8004d2a:	fb01 f303 	mul.w	r3, r1, r3
 8004d2e:	4413      	add	r3, r2
 8004d30:	3360      	adds	r3, #96	; 0x60
 8004d32:	2201      	movs	r2, #1
 8004d34:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	b2d9      	uxtb	r1, r3
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	202c      	movs	r0, #44	; 0x2c
 8004d40:	fb00 f303 	mul.w	r3, r0, r3
 8004d44:	4413      	add	r3, r2
 8004d46:	3360      	adds	r3, #96	; 0x60
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f010 fee3 	bl	8015b18 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	2b01      	cmp	r3, #1
 8004d58:	d12b      	bne.n	8004db2 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8004d5a:	687a      	ldr	r2, [r7, #4]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	212c      	movs	r1, #44	; 0x2c
 8004d60:	fb01 f303 	mul.w	r3, r1, r3
 8004d64:	4413      	add	r3, r2
 8004d66:	3348      	adds	r3, #72	; 0x48
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6879      	ldr	r1, [r7, #4]
 8004d6c:	68fa      	ldr	r2, [r7, #12]
 8004d6e:	202c      	movs	r0, #44	; 0x2c
 8004d70:	fb00 f202 	mul.w	r2, r0, r2
 8004d74:	440a      	add	r2, r1
 8004d76:	3240      	adds	r2, #64	; 0x40
 8004d78:	8812      	ldrh	r2, [r2, #0]
 8004d7a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 825a 	beq.w	800523c <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8004d88:	687a      	ldr	r2, [r7, #4]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	212c      	movs	r1, #44	; 0x2c
 8004d8e:	fb01 f303 	mul.w	r3, r1, r3
 8004d92:	4413      	add	r3, r2
 8004d94:	3354      	adds	r3, #84	; 0x54
 8004d96:	781b      	ldrb	r3, [r3, #0]
 8004d98:	f083 0301 	eor.w	r3, r3, #1
 8004d9c:	b2d8      	uxtb	r0, r3
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	212c      	movs	r1, #44	; 0x2c
 8004da4:	fb01 f303 	mul.w	r3, r1, r3
 8004da8:	4413      	add	r3, r2
 8004daa:	3354      	adds	r3, #84	; 0x54
 8004dac:	4602      	mov	r2, r0
 8004dae:	701a      	strb	r2, [r3, #0]
 8004db0:	e244      	b.n	800523c <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004db2:	687a      	ldr	r2, [r7, #4]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	212c      	movs	r1, #44	; 0x2c
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	4413      	add	r3, r2
 8004dbe:	3354      	adds	r3, #84	; 0x54
 8004dc0:	781b      	ldrb	r3, [r3, #0]
 8004dc2:	f083 0301 	eor.w	r3, r3, #1
 8004dc6:	b2d8      	uxtb	r0, r3
 8004dc8:	687a      	ldr	r2, [r7, #4]
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	212c      	movs	r1, #44	; 0x2c
 8004dce:	fb01 f303 	mul.w	r3, r1, r3
 8004dd2:	4413      	add	r3, r2
 8004dd4:	3354      	adds	r3, #84	; 0x54
 8004dd6:	4602      	mov	r2, r0
 8004dd8:	701a      	strb	r2, [r3, #0]
 8004dda:	e22f      	b.n	800523c <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	68fa      	ldr	r2, [r7, #12]
 8004de2:	b2d2      	uxtb	r2, r2
 8004de4:	4611      	mov	r1, r2
 8004de6:	4618      	mov	r0, r3
 8004de8:	f007 ff0b 	bl	800cc02 <USB_ReadChInterrupts>
 8004dec:	4603      	mov	r3, r0
 8004dee:	f003 0320 	and.w	r3, r3, #32
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d109      	bne.n	8004e0a <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	015a      	lsls	r2, r3, #5
 8004dfa:	693b      	ldr	r3, [r7, #16]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e02:	461a      	mov	r2, r3
 8004e04:	2320      	movs	r3, #32
 8004e06:	6093      	str	r3, [r2, #8]
 8004e08:	e218      	b.n	800523c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	68fa      	ldr	r2, [r7, #12]
 8004e10:	b2d2      	uxtb	r2, r2
 8004e12:	4611      	mov	r1, r2
 8004e14:	4618      	mov	r0, r3
 8004e16:	f007 fef4 	bl	800cc02 <USB_ReadChInterrupts>
 8004e1a:	4603      	mov	r3, r0
 8004e1c:	f003 0302 	and.w	r3, r3, #2
 8004e20:	2b02      	cmp	r3, #2
 8004e22:	f040 816b 	bne.w	80050fc <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004e32:	461a      	mov	r2, r3
 8004e34:	2302      	movs	r3, #2
 8004e36:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	212c      	movs	r1, #44	; 0x2c
 8004e3e:	fb01 f303 	mul.w	r3, r1, r3
 8004e42:	4413      	add	r3, r2
 8004e44:	3361      	adds	r3, #97	; 0x61
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d112      	bne.n	8004e72 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004e4c:	687a      	ldr	r2, [r7, #4]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	212c      	movs	r1, #44	; 0x2c
 8004e52:	fb01 f303 	mul.w	r3, r1, r3
 8004e56:	4413      	add	r3, r2
 8004e58:	3361      	adds	r3, #97	; 0x61
 8004e5a:	2202      	movs	r2, #2
 8004e5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	212c      	movs	r1, #44	; 0x2c
 8004e64:	fb01 f303 	mul.w	r3, r1, r3
 8004e68:	4413      	add	r3, r2
 8004e6a:	3360      	adds	r3, #96	; 0x60
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	701a      	strb	r2, [r3, #0]
 8004e70:	e135      	b.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004e72:	687a      	ldr	r2, [r7, #4]
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	212c      	movs	r1, #44	; 0x2c
 8004e78:	fb01 f303 	mul.w	r3, r1, r3
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3361      	adds	r3, #97	; 0x61
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	2b06      	cmp	r3, #6
 8004e84:	d112      	bne.n	8004eac <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	212c      	movs	r1, #44	; 0x2c
 8004e8c:	fb01 f303 	mul.w	r3, r1, r3
 8004e90:	4413      	add	r3, r2
 8004e92:	3361      	adds	r3, #97	; 0x61
 8004e94:	2202      	movs	r2, #2
 8004e96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	212c      	movs	r1, #44	; 0x2c
 8004e9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	3360      	adds	r3, #96	; 0x60
 8004ea6:	2205      	movs	r2, #5
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	e118      	b.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004eac:	687a      	ldr	r2, [r7, #4]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	212c      	movs	r1, #44	; 0x2c
 8004eb2:	fb01 f303 	mul.w	r3, r1, r3
 8004eb6:	4413      	add	r3, r2
 8004eb8:	3361      	adds	r3, #97	; 0x61
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b07      	cmp	r3, #7
 8004ebe:	d009      	beq.n	8004ed4 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	212c      	movs	r1, #44	; 0x2c
 8004ec6:	fb01 f303 	mul.w	r3, r1, r3
 8004eca:	4413      	add	r3, r2
 8004ecc:	3361      	adds	r3, #97	; 0x61
 8004ece:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004ed0:	2b09      	cmp	r3, #9
 8004ed2:	d159      	bne.n	8004f88 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004ed4:	687a      	ldr	r2, [r7, #4]
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	212c      	movs	r1, #44	; 0x2c
 8004eda:	fb01 f303 	mul.w	r3, r1, r3
 8004ede:	4413      	add	r3, r2
 8004ee0:	3361      	adds	r3, #97	; 0x61
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	212c      	movs	r1, #44	; 0x2c
 8004eec:	fb01 f303 	mul.w	r3, r1, r3
 8004ef0:	4413      	add	r3, r2
 8004ef2:	335c      	adds	r3, #92	; 0x5c
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	6879      	ldr	r1, [r7, #4]
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	202c      	movs	r0, #44	; 0x2c
 8004efe:	fb00 f303 	mul.w	r3, r0, r3
 8004f02:	440b      	add	r3, r1
 8004f04:	335c      	adds	r3, #92	; 0x5c
 8004f06:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	212c      	movs	r1, #44	; 0x2c
 8004f0e:	fb01 f303 	mul.w	r3, r1, r3
 8004f12:	4413      	add	r3, r2
 8004f14:	335c      	adds	r3, #92	; 0x5c
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b02      	cmp	r3, #2
 8004f1a:	d912      	bls.n	8004f42 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	212c      	movs	r1, #44	; 0x2c
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	335c      	adds	r3, #92	; 0x5c
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	212c      	movs	r1, #44	; 0x2c
 8004f34:	fb01 f303 	mul.w	r3, r1, r3
 8004f38:	4413      	add	r3, r2
 8004f3a:	3360      	adds	r3, #96	; 0x60
 8004f3c:	2204      	movs	r2, #4
 8004f3e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f40:	e0cd      	b.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004f42:	687a      	ldr	r2, [r7, #4]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	212c      	movs	r1, #44	; 0x2c
 8004f48:	fb01 f303 	mul.w	r3, r1, r3
 8004f4c:	4413      	add	r3, r2
 8004f4e:	3360      	adds	r3, #96	; 0x60
 8004f50:	2202      	movs	r2, #2
 8004f52:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	015a      	lsls	r2, r3, #5
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004f6a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004f72:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	015a      	lsls	r2, r3, #5
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f80:	461a      	mov	r2, r3
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004f86:	e0aa      	b.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004f88:	687a      	ldr	r2, [r7, #4]
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	212c      	movs	r1, #44	; 0x2c
 8004f8e:	fb01 f303 	mul.w	r3, r1, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	3361      	adds	r3, #97	; 0x61
 8004f96:	781b      	ldrb	r3, [r3, #0]
 8004f98:	2b05      	cmp	r3, #5
 8004f9a:	d109      	bne.n	8004fb0 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004f9c:	687a      	ldr	r2, [r7, #4]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	212c      	movs	r1, #44	; 0x2c
 8004fa2:	fb01 f303 	mul.w	r3, r1, r3
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3361      	adds	r3, #97	; 0x61
 8004faa:	2202      	movs	r2, #2
 8004fac:	701a      	strb	r2, [r3, #0]
 8004fae:	e096      	b.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8004fb0:	687a      	ldr	r2, [r7, #4]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	212c      	movs	r1, #44	; 0x2c
 8004fb6:	fb01 f303 	mul.w	r3, r1, r3
 8004fba:	4413      	add	r3, r2
 8004fbc:	3361      	adds	r3, #97	; 0x61
 8004fbe:	781b      	ldrb	r3, [r3, #0]
 8004fc0:	2b03      	cmp	r3, #3
 8004fc2:	d109      	bne.n	8004fd8 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004fc4:	687a      	ldr	r2, [r7, #4]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	212c      	movs	r1, #44	; 0x2c
 8004fca:	fb01 f303 	mul.w	r3, r1, r3
 8004fce:	4413      	add	r3, r2
 8004fd0:	3361      	adds	r3, #97	; 0x61
 8004fd2:	2202      	movs	r2, #2
 8004fd4:	701a      	strb	r2, [r3, #0]
 8004fd6:	e082      	b.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	212c      	movs	r1, #44	; 0x2c
 8004fde:	fb01 f303 	mul.w	r3, r1, r3
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3361      	adds	r3, #97	; 0x61
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	2b04      	cmp	r3, #4
 8004fea:	d13f      	bne.n	800506c <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004fec:	687a      	ldr	r2, [r7, #4]
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	212c      	movs	r1, #44	; 0x2c
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	3361      	adds	r3, #97	; 0x61
 8004ffa:	2202      	movs	r2, #2
 8004ffc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	212c      	movs	r1, #44	; 0x2c
 8005004:	fb01 f303 	mul.w	r3, r1, r3
 8005008:	4413      	add	r3, r2
 800500a:	3360      	adds	r3, #96	; 0x60
 800500c:	2202      	movs	r2, #2
 800500e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	212c      	movs	r1, #44	; 0x2c
 8005016:	fb01 f303 	mul.w	r3, r1, r3
 800501a:	4413      	add	r3, r2
 800501c:	333f      	adds	r3, #63	; 0x3f
 800501e:	781b      	ldrb	r3, [r3, #0]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d009      	beq.n	8005038 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	212c      	movs	r1, #44	; 0x2c
 800502a:	fb01 f303 	mul.w	r3, r1, r3
 800502e:	4413      	add	r3, r2
 8005030:	333f      	adds	r3, #63	; 0x3f
 8005032:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8005034:	2b02      	cmp	r3, #2
 8005036:	d152      	bne.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	4413      	add	r3, r2
 8005040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800504e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005056:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	4413      	add	r3, r2
 8005060:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005064:	461a      	mov	r2, r3
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6013      	str	r3, [r2, #0]
 800506a:	e038      	b.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 800506c:	687a      	ldr	r2, [r7, #4]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	212c      	movs	r1, #44	; 0x2c
 8005072:	fb01 f303 	mul.w	r3, r1, r3
 8005076:	4413      	add	r3, r2
 8005078:	3361      	adds	r3, #97	; 0x61
 800507a:	781b      	ldrb	r3, [r3, #0]
 800507c:	2b08      	cmp	r3, #8
 800507e:	d123      	bne.n	80050c8 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	212c      	movs	r1, #44	; 0x2c
 8005086:	fb01 f303 	mul.w	r3, r1, r3
 800508a:	4413      	add	r3, r2
 800508c:	3361      	adds	r3, #97	; 0x61
 800508e:	2202      	movs	r2, #2
 8005090:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	212c      	movs	r1, #44	; 0x2c
 8005098:	fb01 f303 	mul.w	r3, r1, r3
 800509c:	4413      	add	r3, r2
 800509e:	335c      	adds	r3, #92	; 0x5c
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	1c5a      	adds	r2, r3, #1
 80050a4:	6879      	ldr	r1, [r7, #4]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	202c      	movs	r0, #44	; 0x2c
 80050aa:	fb00 f303 	mul.w	r3, r0, r3
 80050ae:	440b      	add	r3, r1
 80050b0:	335c      	adds	r3, #92	; 0x5c
 80050b2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	212c      	movs	r1, #44	; 0x2c
 80050ba:	fb01 f303 	mul.w	r3, r1, r3
 80050be:	4413      	add	r3, r2
 80050c0:	3360      	adds	r3, #96	; 0x60
 80050c2:	2204      	movs	r2, #4
 80050c4:	701a      	strb	r2, [r3, #0]
 80050c6:	e00a      	b.n	80050de <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 80050c8:	687a      	ldr	r2, [r7, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	212c      	movs	r1, #44	; 0x2c
 80050ce:	fb01 f303 	mul.w	r3, r1, r3
 80050d2:	4413      	add	r3, r2
 80050d4:	3361      	adds	r3, #97	; 0x61
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	2b02      	cmp	r3, #2
 80050da:	f000 80ae 	beq.w	800523a <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	b2d9      	uxtb	r1, r3
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	202c      	movs	r0, #44	; 0x2c
 80050e8:	fb00 f303 	mul.w	r3, r0, r3
 80050ec:	4413      	add	r3, r2
 80050ee:	3360      	adds	r3, #96	; 0x60
 80050f0:	781b      	ldrb	r3, [r3, #0]
 80050f2:	461a      	mov	r2, r3
 80050f4:	6878      	ldr	r0, [r7, #4]
 80050f6:	f010 fd0f 	bl	8015b18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80050fa:	e09f      	b.n	800523c <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	4611      	mov	r1, r2
 8005106:	4618      	mov	r0, r3
 8005108:	f007 fd7b 	bl	800cc02 <USB_ReadChInterrupts>
 800510c:	4603      	mov	r3, r0
 800510e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005112:	2b40      	cmp	r3, #64	; 0x40
 8005114:	d123      	bne.n	800515e <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	015a      	lsls	r2, r3, #5
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4413      	add	r3, r2
 800511e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005122:	461a      	mov	r2, r3
 8005124:	2340      	movs	r3, #64	; 0x40
 8005126:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8005128:	687a      	ldr	r2, [r7, #4]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	212c      	movs	r1, #44	; 0x2c
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	3361      	adds	r3, #97	; 0x61
 8005136:	2205      	movs	r2, #5
 8005138:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800513a:	687a      	ldr	r2, [r7, #4]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	212c      	movs	r1, #44	; 0x2c
 8005140:	fb01 f303 	mul.w	r3, r1, r3
 8005144:	4413      	add	r3, r2
 8005146:	335c      	adds	r3, #92	; 0x5c
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68fa      	ldr	r2, [r7, #12]
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	4611      	mov	r1, r2
 8005156:	4618      	mov	r0, r3
 8005158:	f008 faa7 	bl	800d6aa <USB_HC_Halt>
 800515c:	e06e      	b.n	800523c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	b2d2      	uxtb	r2, r2
 8005166:	4611      	mov	r1, r2
 8005168:	4618      	mov	r0, r3
 800516a:	f007 fd4a 	bl	800cc02 <USB_ReadChInterrupts>
 800516e:	4603      	mov	r3, r0
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b10      	cmp	r3, #16
 8005176:	d161      	bne.n	800523c <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8005178:	687a      	ldr	r2, [r7, #4]
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	212c      	movs	r1, #44	; 0x2c
 800517e:	fb01 f303 	mul.w	r3, r1, r3
 8005182:	4413      	add	r3, r2
 8005184:	333f      	adds	r3, #63	; 0x3f
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	2b03      	cmp	r3, #3
 800518a:	d11a      	bne.n	80051c2 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800518c:	687a      	ldr	r2, [r7, #4]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	212c      	movs	r1, #44	; 0x2c
 8005192:	fb01 f303 	mul.w	r3, r1, r3
 8005196:	4413      	add	r3, r2
 8005198:	335c      	adds	r3, #92	; 0x5c
 800519a:	2200      	movs	r2, #0
 800519c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	212c      	movs	r1, #44	; 0x2c
 80051a4:	fb01 f303 	mul.w	r3, r1, r3
 80051a8:	4413      	add	r3, r2
 80051aa:	3361      	adds	r3, #97	; 0x61
 80051ac:	2204      	movs	r2, #4
 80051ae:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	b2d2      	uxtb	r2, r2
 80051b8:	4611      	mov	r1, r2
 80051ba:	4618      	mov	r0, r3
 80051bc:	f008 fa75 	bl	800d6aa <USB_HC_Halt>
 80051c0:	e031      	b.n	8005226 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	212c      	movs	r1, #44	; 0x2c
 80051c8:	fb01 f303 	mul.w	r3, r1, r3
 80051cc:	4413      	add	r3, r2
 80051ce:	333f      	adds	r3, #63	; 0x3f
 80051d0:	781b      	ldrb	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d009      	beq.n	80051ea <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80051d6:	687a      	ldr	r2, [r7, #4]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	212c      	movs	r1, #44	; 0x2c
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	4413      	add	r3, r2
 80051e2:	333f      	adds	r3, #63	; 0x3f
 80051e4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80051e6:	2b02      	cmp	r3, #2
 80051e8:	d11d      	bne.n	8005226 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	212c      	movs	r1, #44	; 0x2c
 80051f0:	fb01 f303 	mul.w	r3, r1, r3
 80051f4:	4413      	add	r3, r2
 80051f6:	335c      	adds	r3, #92	; 0x5c
 80051f8:	2200      	movs	r2, #0
 80051fa:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	691b      	ldr	r3, [r3, #16]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d110      	bne.n	8005226 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	212c      	movs	r1, #44	; 0x2c
 800520a:	fb01 f303 	mul.w	r3, r1, r3
 800520e:	4413      	add	r3, r2
 8005210:	3361      	adds	r3, #97	; 0x61
 8005212:	2204      	movs	r2, #4
 8005214:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	68fa      	ldr	r2, [r7, #12]
 800521c:	b2d2      	uxtb	r2, r2
 800521e:	4611      	mov	r1, r2
 8005220:	4618      	mov	r0, r3
 8005222:	f008 fa42 	bl	800d6aa <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005232:	461a      	mov	r2, r3
 8005234:	2310      	movs	r3, #16
 8005236:	6093      	str	r3, [r2, #8]
 8005238:	e000      	b.n	800523c <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800523a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}

08005242 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8005242:	b580      	push	{r7, lr}
 8005244:	b088      	sub	sp, #32
 8005246:	af00      	add	r7, sp, #0
 8005248:	6078      	str	r0, [r7, #4]
 800524a:	460b      	mov	r3, r1
 800524c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005254:	69fb      	ldr	r3, [r7, #28]
 8005256:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8005258:	78fb      	ldrb	r3, [r7, #3]
 800525a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	697a      	ldr	r2, [r7, #20]
 8005262:	b2d2      	uxtb	r2, r2
 8005264:	4611      	mov	r1, r2
 8005266:	4618      	mov	r0, r3
 8005268:	f007 fccb 	bl	800cc02 <USB_ReadChInterrupts>
 800526c:	4603      	mov	r3, r0
 800526e:	f003 0304 	and.w	r3, r3, #4
 8005272:	2b04      	cmp	r3, #4
 8005274:	d11a      	bne.n	80052ac <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	4413      	add	r3, r2
 800527e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005282:	461a      	mov	r2, r3
 8005284:	2304      	movs	r3, #4
 8005286:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	212c      	movs	r1, #44	; 0x2c
 800528e:	fb01 f303 	mul.w	r3, r1, r3
 8005292:	4413      	add	r3, r2
 8005294:	3361      	adds	r3, #97	; 0x61
 8005296:	2207      	movs	r2, #7
 8005298:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	697a      	ldr	r2, [r7, #20]
 80052a0:	b2d2      	uxtb	r2, r2
 80052a2:	4611      	mov	r1, r2
 80052a4:	4618      	mov	r0, r3
 80052a6:	f008 fa00 	bl	800d6aa <USB_HC_Halt>
 80052aa:	e393      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	b2d2      	uxtb	r2, r2
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f007 fca3 	bl	800cc02 <USB_ReadChInterrupts>
 80052bc:	4603      	mov	r3, r0
 80052be:	f003 0320 	and.w	r3, r3, #32
 80052c2:	2b20      	cmp	r3, #32
 80052c4:	d137      	bne.n	8005336 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	015a      	lsls	r2, r3, #5
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	4413      	add	r3, r2
 80052ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052d2:	461a      	mov	r2, r3
 80052d4:	2320      	movs	r3, #32
 80052d6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80052d8:	687a      	ldr	r2, [r7, #4]
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	212c      	movs	r1, #44	; 0x2c
 80052de:	fb01 f303 	mul.w	r3, r1, r3
 80052e2:	4413      	add	r3, r2
 80052e4:	333d      	adds	r3, #61	; 0x3d
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	f040 8373 	bne.w	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	212c      	movs	r1, #44	; 0x2c
 80052f4:	fb01 f303 	mul.w	r3, r1, r3
 80052f8:	4413      	add	r3, r2
 80052fa:	333d      	adds	r3, #61	; 0x3d
 80052fc:	2200      	movs	r2, #0
 80052fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	212c      	movs	r1, #44	; 0x2c
 8005306:	fb01 f303 	mul.w	r3, r1, r3
 800530a:	4413      	add	r3, r2
 800530c:	3360      	adds	r3, #96	; 0x60
 800530e:	2202      	movs	r2, #2
 8005310:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	697b      	ldr	r3, [r7, #20]
 8005316:	212c      	movs	r1, #44	; 0x2c
 8005318:	fb01 f303 	mul.w	r3, r1, r3
 800531c:	4413      	add	r3, r2
 800531e:	3361      	adds	r3, #97	; 0x61
 8005320:	2203      	movs	r2, #3
 8005322:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	b2d2      	uxtb	r2, r2
 800532c:	4611      	mov	r1, r2
 800532e:	4618      	mov	r0, r3
 8005330:	f008 f9bb 	bl	800d6aa <USB_HC_Halt>
 8005334:	e34e      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	697a      	ldr	r2, [r7, #20]
 800533c:	b2d2      	uxtb	r2, r2
 800533e:	4611      	mov	r1, r2
 8005340:	4618      	mov	r0, r3
 8005342:	f007 fc5e 	bl	800cc02 <USB_ReadChInterrupts>
 8005346:	4603      	mov	r3, r0
 8005348:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800534c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005350:	d112      	bne.n	8005378 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69bb      	ldr	r3, [r7, #24]
 8005358:	4413      	add	r3, r2
 800535a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800535e:	461a      	mov	r2, r3
 8005360:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005364:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	697a      	ldr	r2, [r7, #20]
 800536c:	b2d2      	uxtb	r2, r2
 800536e:	4611      	mov	r1, r2
 8005370:	4618      	mov	r0, r3
 8005372:	f008 f99a 	bl	800d6aa <USB_HC_Halt>
 8005376:	e32d      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	697a      	ldr	r2, [r7, #20]
 800537e:	b2d2      	uxtb	r2, r2
 8005380:	4611      	mov	r1, r2
 8005382:	4618      	mov	r0, r3
 8005384:	f007 fc3d 	bl	800cc02 <USB_ReadChInterrupts>
 8005388:	4603      	mov	r3, r0
 800538a:	f003 0301 	and.w	r3, r3, #1
 800538e:	2b01      	cmp	r3, #1
 8005390:	d142      	bne.n	8005418 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005392:	687a      	ldr	r2, [r7, #4]
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	212c      	movs	r1, #44	; 0x2c
 8005398:	fb01 f303 	mul.w	r3, r1, r3
 800539c:	4413      	add	r3, r2
 800539e:	335c      	adds	r3, #92	; 0x5c
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	b2d2      	uxtb	r2, r2
 80053ac:	4611      	mov	r1, r2
 80053ae:	4618      	mov	r0, r3
 80053b0:	f007 fc27 	bl	800cc02 <USB_ReadChInterrupts>
 80053b4:	4603      	mov	r3, r0
 80053b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ba:	2b40      	cmp	r3, #64	; 0x40
 80053bc:	d111      	bne.n	80053e2 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80053be:	687a      	ldr	r2, [r7, #4]
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	212c      	movs	r1, #44	; 0x2c
 80053c4:	fb01 f303 	mul.w	r3, r1, r3
 80053c8:	4413      	add	r3, r2
 80053ca:	333d      	adds	r3, #61	; 0x3d
 80053cc:	2201      	movs	r2, #1
 80053ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	015a      	lsls	r2, r3, #5
 80053d4:	69bb      	ldr	r3, [r7, #24]
 80053d6:	4413      	add	r3, r2
 80053d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053dc:	461a      	mov	r2, r3
 80053de:	2340      	movs	r3, #64	; 0x40
 80053e0:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ee:	461a      	mov	r2, r3
 80053f0:	2301      	movs	r3, #1
 80053f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80053f4:	687a      	ldr	r2, [r7, #4]
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	212c      	movs	r1, #44	; 0x2c
 80053fa:	fb01 f303 	mul.w	r3, r1, r3
 80053fe:	4413      	add	r3, r2
 8005400:	3361      	adds	r3, #97	; 0x61
 8005402:	2201      	movs	r2, #1
 8005404:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	697a      	ldr	r2, [r7, #20]
 800540c:	b2d2      	uxtb	r2, r2
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f008 f94a 	bl	800d6aa <USB_HC_Halt>
 8005416:	e2dd      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	697a      	ldr	r2, [r7, #20]
 800541e:	b2d2      	uxtb	r2, r2
 8005420:	4611      	mov	r1, r2
 8005422:	4618      	mov	r0, r3
 8005424:	f007 fbed 	bl	800cc02 <USB_ReadChInterrupts>
 8005428:	4603      	mov	r3, r0
 800542a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800542e:	2b40      	cmp	r3, #64	; 0x40
 8005430:	d12c      	bne.n	800548c <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8005432:	687a      	ldr	r2, [r7, #4]
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	212c      	movs	r1, #44	; 0x2c
 8005438:	fb01 f303 	mul.w	r3, r1, r3
 800543c:	4413      	add	r3, r2
 800543e:	3361      	adds	r3, #97	; 0x61
 8005440:	2205      	movs	r2, #5
 8005442:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	697b      	ldr	r3, [r7, #20]
 8005448:	212c      	movs	r1, #44	; 0x2c
 800544a:	fb01 f303 	mul.w	r3, r1, r3
 800544e:	4413      	add	r3, r2
 8005450:	333d      	adds	r3, #61	; 0x3d
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8005456:	687a      	ldr	r2, [r7, #4]
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	212c      	movs	r1, #44	; 0x2c
 800545c:	fb01 f303 	mul.w	r3, r1, r3
 8005460:	4413      	add	r3, r2
 8005462:	335c      	adds	r3, #92	; 0x5c
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	697a      	ldr	r2, [r7, #20]
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	4611      	mov	r1, r2
 8005472:	4618      	mov	r0, r3
 8005474:	f008 f919 	bl	800d6aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	015a      	lsls	r2, r3, #5
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	4413      	add	r3, r2
 8005480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005484:	461a      	mov	r2, r3
 8005486:	2340      	movs	r3, #64	; 0x40
 8005488:	6093      	str	r3, [r2, #8]
 800548a:	e2a3      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	b2d2      	uxtb	r2, r2
 8005494:	4611      	mov	r1, r2
 8005496:	4618      	mov	r0, r3
 8005498:	f007 fbb3 	bl	800cc02 <USB_ReadChInterrupts>
 800549c:	4603      	mov	r3, r0
 800549e:	f003 0308 	and.w	r3, r3, #8
 80054a2:	2b08      	cmp	r3, #8
 80054a4:	d11a      	bne.n	80054dc <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054b2:	461a      	mov	r2, r3
 80054b4:	2308      	movs	r3, #8
 80054b6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	212c      	movs	r1, #44	; 0x2c
 80054be:	fb01 f303 	mul.w	r3, r1, r3
 80054c2:	4413      	add	r3, r2
 80054c4:	3361      	adds	r3, #97	; 0x61
 80054c6:	2206      	movs	r2, #6
 80054c8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	b2d2      	uxtb	r2, r2
 80054d2:	4611      	mov	r1, r2
 80054d4:	4618      	mov	r0, r3
 80054d6:	f008 f8e8 	bl	800d6aa <USB_HC_Halt>
 80054da:	e27b      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	697a      	ldr	r2, [r7, #20]
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	4611      	mov	r1, r2
 80054e6:	4618      	mov	r0, r3
 80054e8:	f007 fb8b 	bl	800cc02 <USB_ReadChInterrupts>
 80054ec:	4603      	mov	r3, r0
 80054ee:	f003 0310 	and.w	r3, r3, #16
 80054f2:	2b10      	cmp	r3, #16
 80054f4:	d140      	bne.n	8005578 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	212c      	movs	r1, #44	; 0x2c
 80054fc:	fb01 f303 	mul.w	r3, r1, r3
 8005500:	4413      	add	r3, r2
 8005502:	335c      	adds	r3, #92	; 0x5c
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	212c      	movs	r1, #44	; 0x2c
 800550e:	fb01 f303 	mul.w	r3, r1, r3
 8005512:	4413      	add	r3, r2
 8005514:	3361      	adds	r3, #97	; 0x61
 8005516:	2204      	movs	r2, #4
 8005518:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	212c      	movs	r1, #44	; 0x2c
 8005520:	fb01 f303 	mul.w	r3, r1, r3
 8005524:	4413      	add	r3, r2
 8005526:	333d      	adds	r3, #61	; 0x3d
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d112      	bne.n	8005554 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	212c      	movs	r1, #44	; 0x2c
 8005534:	fb01 f303 	mul.w	r3, r1, r3
 8005538:	4413      	add	r3, r2
 800553a:	333c      	adds	r3, #60	; 0x3c
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d108      	bne.n	8005554 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8005542:	687a      	ldr	r2, [r7, #4]
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	212c      	movs	r1, #44	; 0x2c
 8005548:	fb01 f303 	mul.w	r3, r1, r3
 800554c:	4413      	add	r3, r2
 800554e:	333d      	adds	r3, #61	; 0x3d
 8005550:	2201      	movs	r2, #1
 8005552:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	697a      	ldr	r2, [r7, #20]
 800555a:	b2d2      	uxtb	r2, r2
 800555c:	4611      	mov	r1, r2
 800555e:	4618      	mov	r0, r3
 8005560:	f008 f8a3 	bl	800d6aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	015a      	lsls	r2, r3, #5
 8005568:	69bb      	ldr	r3, [r7, #24]
 800556a:	4413      	add	r3, r2
 800556c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005570:	461a      	mov	r2, r3
 8005572:	2310      	movs	r3, #16
 8005574:	6093      	str	r3, [r2, #8]
 8005576:	e22d      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	697a      	ldr	r2, [r7, #20]
 800557e:	b2d2      	uxtb	r2, r2
 8005580:	4611      	mov	r1, r2
 8005582:	4618      	mov	r0, r3
 8005584:	f007 fb3d 	bl	800cc02 <USB_ReadChInterrupts>
 8005588:	4603      	mov	r3, r0
 800558a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558e:	2b80      	cmp	r3, #128	; 0x80
 8005590:	d164      	bne.n	800565c <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	691b      	ldr	r3, [r3, #16]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d111      	bne.n	80055be <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 800559a:	687a      	ldr	r2, [r7, #4]
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	212c      	movs	r1, #44	; 0x2c
 80055a0:	fb01 f303 	mul.w	r3, r1, r3
 80055a4:	4413      	add	r3, r2
 80055a6:	3361      	adds	r3, #97	; 0x61
 80055a8:	2207      	movs	r2, #7
 80055aa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	697a      	ldr	r2, [r7, #20]
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	4611      	mov	r1, r2
 80055b6:	4618      	mov	r0, r3
 80055b8:	f008 f877 	bl	800d6aa <USB_HC_Halt>
 80055bc:	e044      	b.n	8005648 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	697b      	ldr	r3, [r7, #20]
 80055c2:	212c      	movs	r1, #44	; 0x2c
 80055c4:	fb01 f303 	mul.w	r3, r1, r3
 80055c8:	4413      	add	r3, r2
 80055ca:	335c      	adds	r3, #92	; 0x5c
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	1c5a      	adds	r2, r3, #1
 80055d0:	6879      	ldr	r1, [r7, #4]
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	202c      	movs	r0, #44	; 0x2c
 80055d6:	fb00 f303 	mul.w	r3, r0, r3
 80055da:	440b      	add	r3, r1
 80055dc:	335c      	adds	r3, #92	; 0x5c
 80055de:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	212c      	movs	r1, #44	; 0x2c
 80055e6:	fb01 f303 	mul.w	r3, r1, r3
 80055ea:	4413      	add	r3, r2
 80055ec:	335c      	adds	r3, #92	; 0x5c
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	d920      	bls.n	8005636 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	212c      	movs	r1, #44	; 0x2c
 80055fa:	fb01 f303 	mul.w	r3, r1, r3
 80055fe:	4413      	add	r3, r2
 8005600:	335c      	adds	r3, #92	; 0x5c
 8005602:	2200      	movs	r2, #0
 8005604:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005606:	687a      	ldr	r2, [r7, #4]
 8005608:	697b      	ldr	r3, [r7, #20]
 800560a:	212c      	movs	r1, #44	; 0x2c
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	4413      	add	r3, r2
 8005612:	3360      	adds	r3, #96	; 0x60
 8005614:	2204      	movs	r2, #4
 8005616:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8005618:	697b      	ldr	r3, [r7, #20]
 800561a:	b2d9      	uxtb	r1, r3
 800561c:	687a      	ldr	r2, [r7, #4]
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	202c      	movs	r0, #44	; 0x2c
 8005622:	fb00 f303 	mul.w	r3, r0, r3
 8005626:	4413      	add	r3, r2
 8005628:	3360      	adds	r3, #96	; 0x60
 800562a:	781b      	ldrb	r3, [r3, #0]
 800562c:	461a      	mov	r2, r3
 800562e:	6878      	ldr	r0, [r7, #4]
 8005630:	f010 fa72 	bl	8015b18 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005634:	e008      	b.n	8005648 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005636:	687a      	ldr	r2, [r7, #4]
 8005638:	697b      	ldr	r3, [r7, #20]
 800563a:	212c      	movs	r1, #44	; 0x2c
 800563c:	fb01 f303 	mul.w	r3, r1, r3
 8005640:	4413      	add	r3, r2
 8005642:	3360      	adds	r3, #96	; 0x60
 8005644:	2202      	movs	r2, #2
 8005646:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	4413      	add	r3, r2
 8005650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005654:	461a      	mov	r2, r3
 8005656:	2380      	movs	r3, #128	; 0x80
 8005658:	6093      	str	r3, [r2, #8]
 800565a:	e1bb      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	b2d2      	uxtb	r2, r2
 8005664:	4611      	mov	r1, r2
 8005666:	4618      	mov	r0, r3
 8005668:	f007 facb 	bl	800cc02 <USB_ReadChInterrupts>
 800566c:	4603      	mov	r3, r0
 800566e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005676:	d11b      	bne.n	80056b0 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	697b      	ldr	r3, [r7, #20]
 800567c:	212c      	movs	r1, #44	; 0x2c
 800567e:	fb01 f303 	mul.w	r3, r1, r3
 8005682:	4413      	add	r3, r2
 8005684:	3361      	adds	r3, #97	; 0x61
 8005686:	2209      	movs	r2, #9
 8005688:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	b2d2      	uxtb	r2, r2
 8005692:	4611      	mov	r1, r2
 8005694:	4618      	mov	r0, r3
 8005696:	f008 f808 	bl	800d6aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	015a      	lsls	r2, r3, #5
 800569e:	69bb      	ldr	r3, [r7, #24]
 80056a0:	4413      	add	r3, r2
 80056a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056a6:	461a      	mov	r2, r3
 80056a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80056ac:	6093      	str	r3, [r2, #8]
 80056ae:	e191      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	697a      	ldr	r2, [r7, #20]
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f007 faa1 	bl	800cc02 <USB_ReadChInterrupts>
 80056c0:	4603      	mov	r3, r0
 80056c2:	f003 0302 	and.w	r3, r3, #2
 80056c6:	2b02      	cmp	r3, #2
 80056c8:	f040 8184 	bne.w	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80056cc:	697b      	ldr	r3, [r7, #20]
 80056ce:	015a      	lsls	r2, r3, #5
 80056d0:	69bb      	ldr	r3, [r7, #24]
 80056d2:	4413      	add	r3, r2
 80056d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056d8:	461a      	mov	r2, r3
 80056da:	2302      	movs	r3, #2
 80056dc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80056de:	687a      	ldr	r2, [r7, #4]
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	212c      	movs	r1, #44	; 0x2c
 80056e4:	fb01 f303 	mul.w	r3, r1, r3
 80056e8:	4413      	add	r3, r2
 80056ea:	3361      	adds	r3, #97	; 0x61
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	f040 8087 	bne.w	8005802 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	212c      	movs	r1, #44	; 0x2c
 80056fa:	fb01 f303 	mul.w	r3, r1, r3
 80056fe:	4413      	add	r3, r2
 8005700:	3361      	adds	r3, #97	; 0x61
 8005702:	2202      	movs	r2, #2
 8005704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8005706:	687a      	ldr	r2, [r7, #4]
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	212c      	movs	r1, #44	; 0x2c
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	4413      	add	r3, r2
 8005712:	3360      	adds	r3, #96	; 0x60
 8005714:	2201      	movs	r2, #1
 8005716:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8005718:	687a      	ldr	r2, [r7, #4]
 800571a:	697b      	ldr	r3, [r7, #20]
 800571c:	212c      	movs	r1, #44	; 0x2c
 800571e:	fb01 f303 	mul.w	r3, r1, r3
 8005722:	4413      	add	r3, r2
 8005724:	333f      	adds	r3, #63	; 0x3f
 8005726:	781b      	ldrb	r3, [r3, #0]
 8005728:	2b02      	cmp	r3, #2
 800572a:	d00a      	beq.n	8005742 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800572c:	687a      	ldr	r2, [r7, #4]
 800572e:	697b      	ldr	r3, [r7, #20]
 8005730:	212c      	movs	r1, #44	; 0x2c
 8005732:	fb01 f303 	mul.w	r3, r1, r3
 8005736:	4413      	add	r3, r2
 8005738:	333f      	adds	r3, #63	; 0x3f
 800573a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800573c:	2b03      	cmp	r3, #3
 800573e:	f040 8139 	bne.w	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	691b      	ldr	r3, [r3, #16]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d113      	bne.n	8005772 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	212c      	movs	r1, #44	; 0x2c
 8005750:	fb01 f303 	mul.w	r3, r1, r3
 8005754:	4413      	add	r3, r2
 8005756:	3355      	adds	r3, #85	; 0x55
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f083 0301 	eor.w	r3, r3, #1
 800575e:	b2d8      	uxtb	r0, r3
 8005760:	687a      	ldr	r2, [r7, #4]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	212c      	movs	r1, #44	; 0x2c
 8005766:	fb01 f303 	mul.w	r3, r1, r3
 800576a:	4413      	add	r3, r2
 800576c:	3355      	adds	r3, #85	; 0x55
 800576e:	4602      	mov	r2, r0
 8005770:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	691b      	ldr	r3, [r3, #16]
 8005776:	2b01      	cmp	r3, #1
 8005778:	f040 811c 	bne.w	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
 800577c:	687a      	ldr	r2, [r7, #4]
 800577e:	697b      	ldr	r3, [r7, #20]
 8005780:	212c      	movs	r1, #44	; 0x2c
 8005782:	fb01 f303 	mul.w	r3, r1, r3
 8005786:	4413      	add	r3, r2
 8005788:	334c      	adds	r3, #76	; 0x4c
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8111 	beq.w	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	212c      	movs	r1, #44	; 0x2c
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	4413      	add	r3, r2
 800579e:	334c      	adds	r3, #76	; 0x4c
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	697a      	ldr	r2, [r7, #20]
 80057a6:	202c      	movs	r0, #44	; 0x2c
 80057a8:	fb00 f202 	mul.w	r2, r0, r2
 80057ac:	440a      	add	r2, r1
 80057ae:	3240      	adds	r2, #64	; 0x40
 80057b0:	8812      	ldrh	r2, [r2, #0]
 80057b2:	4413      	add	r3, r2
 80057b4:	3b01      	subs	r3, #1
 80057b6:	6879      	ldr	r1, [r7, #4]
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	202c      	movs	r0, #44	; 0x2c
 80057bc:	fb00 f202 	mul.w	r2, r0, r2
 80057c0:	440a      	add	r2, r1
 80057c2:	3240      	adds	r2, #64	; 0x40
 80057c4:	8812      	ldrh	r2, [r2, #0]
 80057c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80057ca:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f003 0301 	and.w	r3, r3, #1
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f000 80ee 	beq.w	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	212c      	movs	r1, #44	; 0x2c
 80057de:	fb01 f303 	mul.w	r3, r1, r3
 80057e2:	4413      	add	r3, r2
 80057e4:	3355      	adds	r3, #85	; 0x55
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	f083 0301 	eor.w	r3, r3, #1
 80057ec:	b2d8      	uxtb	r0, r3
 80057ee:	687a      	ldr	r2, [r7, #4]
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	212c      	movs	r1, #44	; 0x2c
 80057f4:	fb01 f303 	mul.w	r3, r1, r3
 80057f8:	4413      	add	r3, r2
 80057fa:	3355      	adds	r3, #85	; 0x55
 80057fc:	4602      	mov	r2, r0
 80057fe:	701a      	strb	r2, [r3, #0]
 8005800:	e0d8      	b.n	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	212c      	movs	r1, #44	; 0x2c
 8005808:	fb01 f303 	mul.w	r3, r1, r3
 800580c:	4413      	add	r3, r2
 800580e:	3361      	adds	r3, #97	; 0x61
 8005810:	781b      	ldrb	r3, [r3, #0]
 8005812:	2b03      	cmp	r3, #3
 8005814:	d109      	bne.n	800582a <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005816:	687a      	ldr	r2, [r7, #4]
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	212c      	movs	r1, #44	; 0x2c
 800581c:	fb01 f303 	mul.w	r3, r1, r3
 8005820:	4413      	add	r3, r2
 8005822:	3361      	adds	r3, #97	; 0x61
 8005824:	2202      	movs	r2, #2
 8005826:	701a      	strb	r2, [r3, #0]
 8005828:	e0c4      	b.n	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800582a:	687a      	ldr	r2, [r7, #4]
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	212c      	movs	r1, #44	; 0x2c
 8005830:	fb01 f303 	mul.w	r3, r1, r3
 8005834:	4413      	add	r3, r2
 8005836:	3361      	adds	r3, #97	; 0x61
 8005838:	781b      	ldrb	r3, [r3, #0]
 800583a:	2b04      	cmp	r3, #4
 800583c:	d112      	bne.n	8005864 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800583e:	687a      	ldr	r2, [r7, #4]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	212c      	movs	r1, #44	; 0x2c
 8005844:	fb01 f303 	mul.w	r3, r1, r3
 8005848:	4413      	add	r3, r2
 800584a:	3361      	adds	r3, #97	; 0x61
 800584c:	2202      	movs	r2, #2
 800584e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	697b      	ldr	r3, [r7, #20]
 8005854:	212c      	movs	r1, #44	; 0x2c
 8005856:	fb01 f303 	mul.w	r3, r1, r3
 800585a:	4413      	add	r3, r2
 800585c:	3360      	adds	r3, #96	; 0x60
 800585e:	2202      	movs	r2, #2
 8005860:	701a      	strb	r2, [r3, #0]
 8005862:	e0a7      	b.n	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8005864:	687a      	ldr	r2, [r7, #4]
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	212c      	movs	r1, #44	; 0x2c
 800586a:	fb01 f303 	mul.w	r3, r1, r3
 800586e:	4413      	add	r3, r2
 8005870:	3361      	adds	r3, #97	; 0x61
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b05      	cmp	r3, #5
 8005876:	d112      	bne.n	800589e <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	212c      	movs	r1, #44	; 0x2c
 800587e:	fb01 f303 	mul.w	r3, r1, r3
 8005882:	4413      	add	r3, r2
 8005884:	3361      	adds	r3, #97	; 0x61
 8005886:	2202      	movs	r2, #2
 8005888:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	697b      	ldr	r3, [r7, #20]
 800588e:	212c      	movs	r1, #44	; 0x2c
 8005890:	fb01 f303 	mul.w	r3, r1, r3
 8005894:	4413      	add	r3, r2
 8005896:	3360      	adds	r3, #96	; 0x60
 8005898:	2202      	movs	r2, #2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	e08a      	b.n	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	212c      	movs	r1, #44	; 0x2c
 80058a4:	fb01 f303 	mul.w	r3, r1, r3
 80058a8:	4413      	add	r3, r2
 80058aa:	3361      	adds	r3, #97	; 0x61
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b06      	cmp	r3, #6
 80058b0:	d112      	bne.n	80058d8 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	212c      	movs	r1, #44	; 0x2c
 80058b8:	fb01 f303 	mul.w	r3, r1, r3
 80058bc:	4413      	add	r3, r2
 80058be:	3361      	adds	r3, #97	; 0x61
 80058c0:	2202      	movs	r2, #2
 80058c2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	697b      	ldr	r3, [r7, #20]
 80058c8:	212c      	movs	r1, #44	; 0x2c
 80058ca:	fb01 f303 	mul.w	r3, r1, r3
 80058ce:	4413      	add	r3, r2
 80058d0:	3360      	adds	r3, #96	; 0x60
 80058d2:	2205      	movs	r2, #5
 80058d4:	701a      	strb	r2, [r3, #0]
 80058d6:	e06d      	b.n	80059b4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	212c      	movs	r1, #44	; 0x2c
 80058de:	fb01 f303 	mul.w	r3, r1, r3
 80058e2:	4413      	add	r3, r2
 80058e4:	3361      	adds	r3, #97	; 0x61
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b07      	cmp	r3, #7
 80058ea:	d009      	beq.n	8005900 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	212c      	movs	r1, #44	; 0x2c
 80058f2:	fb01 f303 	mul.w	r3, r1, r3
 80058f6:	4413      	add	r3, r2
 80058f8:	3361      	adds	r3, #97	; 0x61
 80058fa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80058fc:	2b09      	cmp	r3, #9
 80058fe:	d168      	bne.n	80059d2 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	697b      	ldr	r3, [r7, #20]
 8005904:	212c      	movs	r1, #44	; 0x2c
 8005906:	fb01 f303 	mul.w	r3, r1, r3
 800590a:	4413      	add	r3, r2
 800590c:	3361      	adds	r3, #97	; 0x61
 800590e:	2202      	movs	r2, #2
 8005910:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8005912:	687a      	ldr	r2, [r7, #4]
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	212c      	movs	r1, #44	; 0x2c
 8005918:	fb01 f303 	mul.w	r3, r1, r3
 800591c:	4413      	add	r3, r2
 800591e:	335c      	adds	r3, #92	; 0x5c
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	1c5a      	adds	r2, r3, #1
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	202c      	movs	r0, #44	; 0x2c
 800592a:	fb00 f303 	mul.w	r3, r0, r3
 800592e:	440b      	add	r3, r1
 8005930:	335c      	adds	r3, #92	; 0x5c
 8005932:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8005934:	687a      	ldr	r2, [r7, #4]
 8005936:	697b      	ldr	r3, [r7, #20]
 8005938:	212c      	movs	r1, #44	; 0x2c
 800593a:	fb01 f303 	mul.w	r3, r1, r3
 800593e:	4413      	add	r3, r2
 8005940:	335c      	adds	r3, #92	; 0x5c
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	2b02      	cmp	r3, #2
 8005946:	d912      	bls.n	800596e <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	212c      	movs	r1, #44	; 0x2c
 800594e:	fb01 f303 	mul.w	r3, r1, r3
 8005952:	4413      	add	r3, r2
 8005954:	335c      	adds	r3, #92	; 0x5c
 8005956:	2200      	movs	r2, #0
 8005958:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	212c      	movs	r1, #44	; 0x2c
 8005960:	fb01 f303 	mul.w	r3, r1, r3
 8005964:	4413      	add	r3, r2
 8005966:	3360      	adds	r3, #96	; 0x60
 8005968:	2204      	movs	r2, #4
 800596a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800596c:	e021      	b.n	80059b2 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	212c      	movs	r1, #44	; 0x2c
 8005974:	fb01 f303 	mul.w	r3, r1, r3
 8005978:	4413      	add	r3, r2
 800597a:	3360      	adds	r3, #96	; 0x60
 800597c:	2202      	movs	r2, #2
 800597e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	015a      	lsls	r2, r3, #5
 8005984:	69bb      	ldr	r3, [r7, #24]
 8005986:	4413      	add	r3, r2
 8005988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005996:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800599e:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059ac:	461a      	mov	r2, r3
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80059b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	b2d9      	uxtb	r1, r3
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	697b      	ldr	r3, [r7, #20]
 80059bc:	202c      	movs	r0, #44	; 0x2c
 80059be:	fb00 f303 	mul.w	r3, r0, r3
 80059c2:	4413      	add	r3, r2
 80059c4:	3360      	adds	r3, #96	; 0x60
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	461a      	mov	r2, r3
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f010 f8a4 	bl	8015b18 <HAL_HCD_HC_NotifyURBChange_Callback>
 80059d0:	e000      	b.n	80059d4 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 80059d2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80059d4:	3720      	adds	r7, #32
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}

080059da <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80059da:	b580      	push	{r7, lr}
 80059dc:	b08a      	sub	sp, #40	; 0x28
 80059de:	af00      	add	r7, sp, #0
 80059e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ea:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	6a1b      	ldr	r3, [r3, #32]
 80059f2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f003 030f 	and.w	r3, r3, #15
 80059fa:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80059fc:	69fb      	ldr	r3, [r7, #28]
 80059fe:	0c5b      	lsrs	r3, r3, #17
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	091b      	lsrs	r3, r3, #4
 8005a0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a0e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8005a10:	697b      	ldr	r3, [r7, #20]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d004      	beq.n	8005a20 <HCD_RXQLVL_IRQHandler+0x46>
 8005a16:	697b      	ldr	r3, [r7, #20]
 8005a18:	2b05      	cmp	r3, #5
 8005a1a:	f000 80a9 	beq.w	8005b70 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8005a1e:	e0aa      	b.n	8005b76 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	f000 80a6 	beq.w	8005b74 <HCD_RXQLVL_IRQHandler+0x19a>
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	69bb      	ldr	r3, [r7, #24]
 8005a2c:	212c      	movs	r1, #44	; 0x2c
 8005a2e:	fb01 f303 	mul.w	r3, r1, r3
 8005a32:	4413      	add	r3, r2
 8005a34:	3344      	adds	r3, #68	; 0x44
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	f000 809b 	beq.w	8005b74 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8005a3e:	687a      	ldr	r2, [r7, #4]
 8005a40:	69bb      	ldr	r3, [r7, #24]
 8005a42:	212c      	movs	r1, #44	; 0x2c
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	4413      	add	r3, r2
 8005a4a:	3350      	adds	r3, #80	; 0x50
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	441a      	add	r2, r3
 8005a52:	6879      	ldr	r1, [r7, #4]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	202c      	movs	r0, #44	; 0x2c
 8005a58:	fb00 f303 	mul.w	r3, r0, r3
 8005a5c:	440b      	add	r3, r1
 8005a5e:	334c      	adds	r3, #76	; 0x4c
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d87a      	bhi.n	8005b5c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6818      	ldr	r0, [r3, #0]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	212c      	movs	r1, #44	; 0x2c
 8005a70:	fb01 f303 	mul.w	r3, r1, r3
 8005a74:	4413      	add	r3, r2
 8005a76:	3344      	adds	r3, #68	; 0x44
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	693a      	ldr	r2, [r7, #16]
 8005a7c:	b292      	uxth	r2, r2
 8005a7e:	4619      	mov	r1, r3
 8005a80:	f006 ff18 	bl	800c8b4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8005a84:	687a      	ldr	r2, [r7, #4]
 8005a86:	69bb      	ldr	r3, [r7, #24]
 8005a88:	212c      	movs	r1, #44	; 0x2c
 8005a8a:	fb01 f303 	mul.w	r3, r1, r3
 8005a8e:	4413      	add	r3, r2
 8005a90:	3344      	adds	r3, #68	; 0x44
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	441a      	add	r2, r3
 8005a98:	6879      	ldr	r1, [r7, #4]
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	202c      	movs	r0, #44	; 0x2c
 8005a9e:	fb00 f303 	mul.w	r3, r0, r3
 8005aa2:	440b      	add	r3, r1
 8005aa4:	3344      	adds	r3, #68	; 0x44
 8005aa6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	212c      	movs	r1, #44	; 0x2c
 8005aae:	fb01 f303 	mul.w	r3, r1, r3
 8005ab2:	4413      	add	r3, r2
 8005ab4:	3350      	adds	r3, #80	; 0x50
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	441a      	add	r2, r3
 8005abc:	6879      	ldr	r1, [r7, #4]
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	202c      	movs	r0, #44	; 0x2c
 8005ac2:	fb00 f303 	mul.w	r3, r0, r3
 8005ac6:	440b      	add	r3, r1
 8005ac8:	3350      	adds	r3, #80	; 0x50
 8005aca:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8005acc:	69bb      	ldr	r3, [r7, #24]
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ad8:	691b      	ldr	r3, [r3, #16]
 8005ada:	0cdb      	lsrs	r3, r3, #19
 8005adc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005ae0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8005ae2:	687a      	ldr	r2, [r7, #4]
 8005ae4:	69bb      	ldr	r3, [r7, #24]
 8005ae6:	212c      	movs	r1, #44	; 0x2c
 8005ae8:	fb01 f303 	mul.w	r3, r1, r3
 8005aec:	4413      	add	r3, r2
 8005aee:	3340      	adds	r3, #64	; 0x40
 8005af0:	881b      	ldrh	r3, [r3, #0]
 8005af2:	461a      	mov	r2, r3
 8005af4:	693b      	ldr	r3, [r7, #16]
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d13c      	bne.n	8005b74 <HCD_RXQLVL_IRQHandler+0x19a>
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d039      	beq.n	8005b74 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	015a      	lsls	r2, r3, #5
 8005b04:	6a3b      	ldr	r3, [r7, #32]
 8005b06:	4413      	add	r3, r2
 8005b08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b16:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005b1e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005b20:	69bb      	ldr	r3, [r7, #24]
 8005b22:	015a      	lsls	r2, r3, #5
 8005b24:	6a3b      	ldr	r3, [r7, #32]
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b2c:	461a      	mov	r2, r3
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8005b32:	687a      	ldr	r2, [r7, #4]
 8005b34:	69bb      	ldr	r3, [r7, #24]
 8005b36:	212c      	movs	r1, #44	; 0x2c
 8005b38:	fb01 f303 	mul.w	r3, r1, r3
 8005b3c:	4413      	add	r3, r2
 8005b3e:	3354      	adds	r3, #84	; 0x54
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	f083 0301 	eor.w	r3, r3, #1
 8005b46:	b2d8      	uxtb	r0, r3
 8005b48:	687a      	ldr	r2, [r7, #4]
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	212c      	movs	r1, #44	; 0x2c
 8005b4e:	fb01 f303 	mul.w	r3, r1, r3
 8005b52:	4413      	add	r3, r2
 8005b54:	3354      	adds	r3, #84	; 0x54
 8005b56:	4602      	mov	r2, r0
 8005b58:	701a      	strb	r2, [r3, #0]
      break;
 8005b5a:	e00b      	b.n	8005b74 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8005b5c:	687a      	ldr	r2, [r7, #4]
 8005b5e:	69bb      	ldr	r3, [r7, #24]
 8005b60:	212c      	movs	r1, #44	; 0x2c
 8005b62:	fb01 f303 	mul.w	r3, r1, r3
 8005b66:	4413      	add	r3, r2
 8005b68:	3360      	adds	r3, #96	; 0x60
 8005b6a:	2204      	movs	r2, #4
 8005b6c:	701a      	strb	r2, [r3, #0]
      break;
 8005b6e:	e001      	b.n	8005b74 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8005b70:	bf00      	nop
 8005b72:	e000      	b.n	8005b76 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8005b74:	bf00      	nop
  }
}
 8005b76:	bf00      	nop
 8005b78:	3728      	adds	r7, #40	; 0x28
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8c:	697b      	ldr	r3, [r7, #20]
 8005b8e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005b90:	693b      	ldr	r3, [r7, #16]
 8005b92:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005ba4:	68bb      	ldr	r3, [r7, #8]
 8005ba6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005baa:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f003 0302 	and.w	r3, r3, #2
 8005bb2:	2b02      	cmp	r3, #2
 8005bb4:	d10b      	bne.n	8005bce <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d102      	bne.n	8005bc6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f00f ff8d 	bl	8015ae0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f043 0302 	orr.w	r3, r3, #2
 8005bcc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	f003 0308 	and.w	r3, r3, #8
 8005bd4:	2b08      	cmp	r3, #8
 8005bd6:	d132      	bne.n	8005c3e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	f043 0308 	orr.w	r3, r3, #8
 8005bde:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f003 0304 	and.w	r3, r3, #4
 8005be6:	2b04      	cmp	r3, #4
 8005be8:	d126      	bne.n	8005c38 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b02      	cmp	r3, #2
 8005bf0:	d113      	bne.n	8005c1a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8005bf8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005bfc:	d106      	bne.n	8005c0c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	2102      	movs	r1, #2
 8005c04:	4618      	mov	r0, r3
 8005c06:	f007 fa15 	bl	800d034 <USB_InitFSLSPClkSel>
 8005c0a:	e011      	b.n	8005c30 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	2101      	movs	r1, #1
 8005c12:	4618      	mov	r0, r3
 8005c14:	f007 fa0e 	bl	800d034 <USB_InitFSLSPClkSel>
 8005c18:	e00a      	b.n	8005c30 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d106      	bne.n	8005c30 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c28:	461a      	mov	r2, r3
 8005c2a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005c2e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005c30:	6878      	ldr	r0, [r7, #4]
 8005c32:	f00f ff7f 	bl	8015b34 <HAL_HCD_PortEnabled_Callback>
 8005c36:	e002      	b.n	8005c3e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f00f ff89 	bl	8015b50 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	f003 0320 	and.w	r3, r3, #32
 8005c44:	2b20      	cmp	r3, #32
 8005c46:	d103      	bne.n	8005c50 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005c48:	68bb      	ldr	r3, [r7, #8]
 8005c4a:	f043 0320 	orr.w	r3, r3, #32
 8005c4e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005c56:	461a      	mov	r2, r3
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	6013      	str	r3, [r2, #0]
}
 8005c5c:	bf00      	nop
 8005c5e:	3718      	adds	r7, #24
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c66:	b08f      	sub	sp, #60	; 0x3c
 8005c68:	af0a      	add	r7, sp, #40	; 0x28
 8005c6a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d101      	bne.n	8005c76 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e116      	b.n	8005ea4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d106      	bne.n	8005c96 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c90:	6878      	ldr	r0, [r7, #4]
 8005c92:	f00f fadd 	bl	8015250 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d102      	bne.n	8005cb0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	2200      	movs	r2, #0
 8005cae:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f005 fda8 	bl	800b80a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	603b      	str	r3, [r7, #0]
 8005cc0:	687e      	ldr	r6, [r7, #4]
 8005cc2:	466d      	mov	r5, sp
 8005cc4:	f106 0410 	add.w	r4, r6, #16
 8005cc8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005ccc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005cce:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005cd0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005cd4:	e885 0003 	stmia.w	r5, {r0, r1}
 8005cd8:	1d33      	adds	r3, r6, #4
 8005cda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005cdc:	6838      	ldr	r0, [r7, #0]
 8005cde:	f005 fc89 	bl	800b5f4 <USB_CoreInit>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d005      	beq.n	8005cf4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2202      	movs	r2, #2
 8005cec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e0d7      	b.n	8005ea4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	2100      	movs	r1, #0
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f005 fd96 	bl	800b82c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	e04a      	b.n	8005d9c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	00db      	lsls	r3, r3, #3
 8005d0e:	4413      	add	r3, r2
 8005d10:	009b      	lsls	r3, r3, #2
 8005d12:	440b      	add	r3, r1
 8005d14:	333d      	adds	r3, #61	; 0x3d
 8005d16:	2201      	movs	r2, #1
 8005d18:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005d1a:	7bfa      	ldrb	r2, [r7, #15]
 8005d1c:	6879      	ldr	r1, [r7, #4]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	440b      	add	r3, r1
 8005d28:	333c      	adds	r3, #60	; 0x3c
 8005d2a:	7bfa      	ldrb	r2, [r7, #15]
 8005d2c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005d2e:	7bfa      	ldrb	r2, [r7, #15]
 8005d30:	7bfb      	ldrb	r3, [r7, #15]
 8005d32:	b298      	uxth	r0, r3
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	00db      	lsls	r3, r3, #3
 8005d3a:	4413      	add	r3, r2
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	440b      	add	r3, r1
 8005d40:	3344      	adds	r3, #68	; 0x44
 8005d42:	4602      	mov	r2, r0
 8005d44:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005d46:	7bfa      	ldrb	r2, [r7, #15]
 8005d48:	6879      	ldr	r1, [r7, #4]
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	440b      	add	r3, r1
 8005d54:	3340      	adds	r3, #64	; 0x40
 8005d56:	2200      	movs	r2, #0
 8005d58:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005d5a:	7bfa      	ldrb	r2, [r7, #15]
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	00db      	lsls	r3, r3, #3
 8005d62:	4413      	add	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	440b      	add	r3, r1
 8005d68:	3348      	adds	r3, #72	; 0x48
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005d6e:	7bfa      	ldrb	r2, [r7, #15]
 8005d70:	6879      	ldr	r1, [r7, #4]
 8005d72:	4613      	mov	r3, r2
 8005d74:	00db      	lsls	r3, r3, #3
 8005d76:	4413      	add	r3, r2
 8005d78:	009b      	lsls	r3, r3, #2
 8005d7a:	440b      	add	r3, r1
 8005d7c:	334c      	adds	r3, #76	; 0x4c
 8005d7e:	2200      	movs	r2, #0
 8005d80:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005d82:	7bfa      	ldrb	r2, [r7, #15]
 8005d84:	6879      	ldr	r1, [r7, #4]
 8005d86:	4613      	mov	r3, r2
 8005d88:	00db      	lsls	r3, r3, #3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	440b      	add	r3, r1
 8005d90:	3354      	adds	r3, #84	; 0x54
 8005d92:	2200      	movs	r2, #0
 8005d94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d96:	7bfb      	ldrb	r3, [r7, #15]
 8005d98:	3301      	adds	r3, #1
 8005d9a:	73fb      	strb	r3, [r7, #15]
 8005d9c:	7bfa      	ldrb	r2, [r7, #15]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	429a      	cmp	r2, r3
 8005da4:	d3af      	bcc.n	8005d06 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005da6:	2300      	movs	r3, #0
 8005da8:	73fb      	strb	r3, [r7, #15]
 8005daa:	e044      	b.n	8005e36 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005dac:	7bfa      	ldrb	r2, [r7, #15]
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005dc2:	7bfa      	ldrb	r2, [r7, #15]
 8005dc4:	6879      	ldr	r1, [r7, #4]
 8005dc6:	4613      	mov	r3, r2
 8005dc8:	00db      	lsls	r3, r3, #3
 8005dca:	4413      	add	r3, r2
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	440b      	add	r3, r1
 8005dd0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005dd4:	7bfa      	ldrb	r2, [r7, #15]
 8005dd6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005dd8:	7bfa      	ldrb	r2, [r7, #15]
 8005dda:	6879      	ldr	r1, [r7, #4]
 8005ddc:	4613      	mov	r3, r2
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	009b      	lsls	r3, r3, #2
 8005de4:	440b      	add	r3, r1
 8005de6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005dea:	2200      	movs	r2, #0
 8005dec:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005dee:	7bfa      	ldrb	r2, [r7, #15]
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	00db      	lsls	r3, r3, #3
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005e00:	2200      	movs	r2, #0
 8005e02:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005e04:	7bfa      	ldrb	r2, [r7, #15]
 8005e06:	6879      	ldr	r1, [r7, #4]
 8005e08:	4613      	mov	r3, r2
 8005e0a:	00db      	lsls	r3, r3, #3
 8005e0c:	4413      	add	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	440b      	add	r3, r1
 8005e12:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8005e16:	2200      	movs	r2, #0
 8005e18:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005e1a:	7bfa      	ldrb	r2, [r7, #15]
 8005e1c:	6879      	ldr	r1, [r7, #4]
 8005e1e:	4613      	mov	r3, r2
 8005e20:	00db      	lsls	r3, r3, #3
 8005e22:	4413      	add	r3, r2
 8005e24:	009b      	lsls	r3, r3, #2
 8005e26:	440b      	add	r3, r1
 8005e28:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e30:	7bfb      	ldrb	r3, [r7, #15]
 8005e32:	3301      	adds	r3, #1
 8005e34:	73fb      	strb	r3, [r7, #15]
 8005e36:	7bfa      	ldrb	r2, [r7, #15]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d3b5      	bcc.n	8005dac <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	603b      	str	r3, [r7, #0]
 8005e46:	687e      	ldr	r6, [r7, #4]
 8005e48:	466d      	mov	r5, sp
 8005e4a:	f106 0410 	add.w	r4, r6, #16
 8005e4e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e50:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e52:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005e54:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005e56:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005e5a:	e885 0003 	stmia.w	r5, {r0, r1}
 8005e5e:	1d33      	adds	r3, r6, #4
 8005e60:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e62:	6838      	ldr	r0, [r7, #0]
 8005e64:	f005 fd2e 	bl	800b8c4 <USB_DevInit>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d005      	beq.n	8005e7a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2202      	movs	r2, #2
 8005e72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005e76:	2301      	movs	r3, #1
 8005e78:	e014      	b.n	8005ea4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2200      	movs	r2, #0
 8005e7e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d102      	bne.n	8005e98 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f001 f97a 	bl	800718c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	f006 fe7c 	bl	800cb9a <USB_DevDisconnect>

  return HAL_OK;
 8005ea2:	2300      	movs	r3, #0
}
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	3714      	adds	r7, #20
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005eac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b082      	sub	sp, #8
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005eba:	2b01      	cmp	r3, #1
 8005ebc:	d101      	bne.n	8005ec2 <HAL_PCD_Start+0x16>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	e012      	b.n	8005ee8 <HAL_PCD_Start+0x3c>
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2201      	movs	r2, #1
 8005ec6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4618      	mov	r0, r3
 8005ed0:	f005 fc8a 	bl	800b7e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f006 fe3d 	bl	800cb58 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005ee6:	2300      	movs	r3, #0
}
 8005ee8:	4618      	mov	r0, r3
 8005eea:	3708      	adds	r7, #8
 8005eec:	46bd      	mov	sp, r7
 8005eee:	bd80      	pop	{r7, pc}

08005ef0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005ef0:	b590      	push	{r4, r7, lr}
 8005ef2:	b08d      	sub	sp, #52	; 0x34
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	4618      	mov	r0, r3
 8005f08:	f006 ff1c 	bl	800cd44 <USB_GetMode>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	f040 84b7 	bne.w	8006882 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f006 fe5f 	bl	800cbdc <USB_ReadInterrupts>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	f000 84ad 	beq.w	8006880 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	0a1b      	lsrs	r3, r3, #8
 8005f30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4618      	mov	r0, r3
 8005f40:	f006 fe4c 	bl	800cbdc <USB_ReadInterrupts>
 8005f44:	4603      	mov	r3, r0
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d107      	bne.n	8005f5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	695a      	ldr	r2, [r3, #20]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f002 0202 	and.w	r2, r2, #2
 8005f5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	4618      	mov	r0, r3
 8005f64:	f006 fe3a 	bl	800cbdc <USB_ReadInterrupts>
 8005f68:	4603      	mov	r3, r0
 8005f6a:	f003 0310 	and.w	r3, r3, #16
 8005f6e:	2b10      	cmp	r3, #16
 8005f70:	d161      	bne.n	8006036 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	699a      	ldr	r2, [r3, #24]
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f022 0210 	bic.w	r2, r2, #16
 8005f80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005f82:	6a3b      	ldr	r3, [r7, #32]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	f003 020f 	and.w	r2, r3, #15
 8005f8e:	4613      	mov	r3, r2
 8005f90:	00db      	lsls	r3, r3, #3
 8005f92:	4413      	add	r3, r2
 8005f94:	009b      	lsls	r3, r3, #2
 8005f96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005fa2:	69bb      	ldr	r3, [r7, #24]
 8005fa4:	0c5b      	lsrs	r3, r3, #17
 8005fa6:	f003 030f 	and.w	r3, r3, #15
 8005faa:	2b02      	cmp	r3, #2
 8005fac:	d124      	bne.n	8005ff8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d035      	beq.n	8006026 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005fbe:	69bb      	ldr	r3, [r7, #24]
 8005fc0:	091b      	lsrs	r3, r3, #4
 8005fc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005fc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	461a      	mov	r2, r3
 8005fcc:	6a38      	ldr	r0, [r7, #32]
 8005fce:	f006 fc71 	bl	800c8b4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	691a      	ldr	r2, [r3, #16]
 8005fd6:	69bb      	ldr	r3, [r7, #24]
 8005fd8:	091b      	lsrs	r3, r3, #4
 8005fda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005fde:	441a      	add	r2, r3
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	6a1a      	ldr	r2, [r3, #32]
 8005fe8:	69bb      	ldr	r3, [r7, #24]
 8005fea:	091b      	lsrs	r3, r3, #4
 8005fec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ff0:	441a      	add	r2, r3
 8005ff2:	697b      	ldr	r3, [r7, #20]
 8005ff4:	621a      	str	r2, [r3, #32]
 8005ff6:	e016      	b.n	8006026 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	0c5b      	lsrs	r3, r3, #17
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	2b06      	cmp	r3, #6
 8006002:	d110      	bne.n	8006026 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800600a:	2208      	movs	r2, #8
 800600c:	4619      	mov	r1, r3
 800600e:	6a38      	ldr	r0, [r7, #32]
 8006010:	f006 fc50 	bl	800c8b4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006014:	697b      	ldr	r3, [r7, #20]
 8006016:	6a1a      	ldr	r2, [r3, #32]
 8006018:	69bb      	ldr	r3, [r7, #24]
 800601a:	091b      	lsrs	r3, r3, #4
 800601c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006020:	441a      	add	r2, r3
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	699a      	ldr	r2, [r3, #24]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f042 0210 	orr.w	r2, r2, #16
 8006034:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	4618      	mov	r0, r3
 800603c:	f006 fdce 	bl	800cbdc <USB_ReadInterrupts>
 8006040:	4603      	mov	r3, r0
 8006042:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006046:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800604a:	f040 80a7 	bne.w	800619c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f006 fdf4 	bl	800cc44 <USB_ReadDevAllOutEpInterrupt>
 800605c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800605e:	e099      	b.n	8006194 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006062:	f003 0301 	and.w	r3, r3, #1
 8006066:	2b00      	cmp	r3, #0
 8006068:	f000 808e 	beq.w	8006188 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006072:	b2d2      	uxtb	r2, r2
 8006074:	4611      	mov	r1, r2
 8006076:	4618      	mov	r0, r3
 8006078:	f006 fe18 	bl	800ccac <USB_ReadDevOutEPInterrupt>
 800607c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	f003 0301 	and.w	r3, r3, #1
 8006084:	2b00      	cmp	r3, #0
 8006086:	d00c      	beq.n	80060a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800608a:	015a      	lsls	r2, r3, #5
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	4413      	add	r3, r2
 8006090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006094:	461a      	mov	r2, r3
 8006096:	2301      	movs	r3, #1
 8006098:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800609a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 feef 	bl	8006e80 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d00c      	beq.n	80060c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80060ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060ae:	015a      	lsls	r2, r3, #5
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	4413      	add	r3, r2
 80060b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b8:	461a      	mov	r2, r3
 80060ba:	2308      	movs	r3, #8
 80060bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80060be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80060c0:	6878      	ldr	r0, [r7, #4]
 80060c2:	f000 ffc5 	bl	8007050 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80060c6:	693b      	ldr	r3, [r7, #16]
 80060c8:	f003 0310 	and.w	r3, r3, #16
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d008      	beq.n	80060e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80060d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d2:	015a      	lsls	r2, r3, #5
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060dc:	461a      	mov	r2, r3
 80060de:	2310      	movs	r3, #16
 80060e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d030      	beq.n	800614e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	695b      	ldr	r3, [r3, #20]
 80060f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d109      	bne.n	800610c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80060f8:	69fb      	ldr	r3, [r7, #28]
 80060fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	69fa      	ldr	r2, [r7, #28]
 8006102:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800610a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800610c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800610e:	4613      	mov	r3, r2
 8006110:	00db      	lsls	r3, r3, #3
 8006112:	4413      	add	r3, r2
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	4413      	add	r3, r2
 800611e:	3304      	adds	r3, #4
 8006120:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	78db      	ldrb	r3, [r3, #3]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d108      	bne.n	800613c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800612a:	697b      	ldr	r3, [r7, #20]
 800612c:	2200      	movs	r2, #0
 800612e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006132:	b2db      	uxtb	r3, r3
 8006134:	4619      	mov	r1, r3
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f00f f9a4 	bl	8015484 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800613c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	69fb      	ldr	r3, [r7, #28]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	461a      	mov	r2, r3
 800614a:	2302      	movs	r3, #2
 800614c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	f003 0320 	and.w	r3, r3, #32
 8006154:	2b00      	cmp	r3, #0
 8006156:	d008      	beq.n	800616a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800615a:	015a      	lsls	r2, r3, #5
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	4413      	add	r3, r2
 8006160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006164:	461a      	mov	r2, r3
 8006166:	2320      	movs	r3, #32
 8006168:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800616a:	693b      	ldr	r3, [r7, #16]
 800616c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006170:	2b00      	cmp	r3, #0
 8006172:	d009      	beq.n	8006188 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006176:	015a      	lsls	r2, r3, #5
 8006178:	69fb      	ldr	r3, [r7, #28]
 800617a:	4413      	add	r3, r2
 800617c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006180:	461a      	mov	r2, r3
 8006182:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006186:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800618a:	3301      	adds	r3, #1
 800618c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006190:	085b      	lsrs	r3, r3, #1
 8006192:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006196:	2b00      	cmp	r3, #0
 8006198:	f47f af62 	bne.w	8006060 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4618      	mov	r0, r3
 80061a2:	f006 fd1b 	bl	800cbdc <USB_ReadInterrupts>
 80061a6:	4603      	mov	r3, r0
 80061a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80061ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80061b0:	f040 80db 	bne.w	800636a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4618      	mov	r0, r3
 80061ba:	f006 fd5d 	bl	800cc78 <USB_ReadDevAllInEpInterrupt>
 80061be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80061c0:	2300      	movs	r3, #0
 80061c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80061c4:	e0cd      	b.n	8006362 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80061c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	f000 80c2 	beq.w	8006356 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061d8:	b2d2      	uxtb	r2, r2
 80061da:	4611      	mov	r1, r2
 80061dc:	4618      	mov	r0, r3
 80061de:	f006 fd83 	bl	800cce8 <USB_ReadDevInEPInterrupt>
 80061e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d057      	beq.n	800629e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80061ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061f0:	f003 030f 	and.w	r3, r3, #15
 80061f4:	2201      	movs	r2, #1
 80061f6:	fa02 f303 	lsl.w	r3, r2, r3
 80061fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80061fc:	69fb      	ldr	r3, [r7, #28]
 80061fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	43db      	mvns	r3, r3
 8006208:	69f9      	ldr	r1, [r7, #28]
 800620a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800620e:	4013      	ands	r3, r2
 8006210:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006214:	015a      	lsls	r2, r3, #5
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	4413      	add	r3, r2
 800621a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800621e:	461a      	mov	r2, r3
 8006220:	2301      	movs	r3, #1
 8006222:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	691b      	ldr	r3, [r3, #16]
 8006228:	2b01      	cmp	r3, #1
 800622a:	d132      	bne.n	8006292 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800622c:	6879      	ldr	r1, [r7, #4]
 800622e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006230:	4613      	mov	r3, r2
 8006232:	00db      	lsls	r3, r3, #3
 8006234:	4413      	add	r3, r2
 8006236:	009b      	lsls	r3, r3, #2
 8006238:	440b      	add	r3, r1
 800623a:	334c      	adds	r3, #76	; 0x4c
 800623c:	6819      	ldr	r1, [r3, #0]
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006242:	4613      	mov	r3, r2
 8006244:	00db      	lsls	r3, r3, #3
 8006246:	4413      	add	r3, r2
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	4403      	add	r3, r0
 800624c:	3348      	adds	r3, #72	; 0x48
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	4419      	add	r1, r3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006256:	4613      	mov	r3, r2
 8006258:	00db      	lsls	r3, r3, #3
 800625a:	4413      	add	r3, r2
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4403      	add	r3, r0
 8006260:	334c      	adds	r3, #76	; 0x4c
 8006262:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006266:	2b00      	cmp	r3, #0
 8006268:	d113      	bne.n	8006292 <HAL_PCD_IRQHandler+0x3a2>
 800626a:	6879      	ldr	r1, [r7, #4]
 800626c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800626e:	4613      	mov	r3, r2
 8006270:	00db      	lsls	r3, r3, #3
 8006272:	4413      	add	r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	3354      	adds	r3, #84	; 0x54
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d108      	bne.n	8006292 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6818      	ldr	r0, [r3, #0]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800628a:	461a      	mov	r2, r3
 800628c:	2101      	movs	r1, #1
 800628e:	f006 fd8b 	bl	800cda8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	b2db      	uxtb	r3, r3
 8006296:	4619      	mov	r1, r3
 8006298:	6878      	ldr	r0, [r7, #4]
 800629a:	f00f f86e 	bl	801537a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f003 0308 	and.w	r3, r3, #8
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d008      	beq.n	80062ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80062a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062aa:	015a      	lsls	r2, r3, #5
 80062ac:	69fb      	ldr	r3, [r7, #28]
 80062ae:	4413      	add	r3, r2
 80062b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b4:	461a      	mov	r2, r3
 80062b6:	2308      	movs	r3, #8
 80062b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f003 0310 	and.w	r3, r3, #16
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80062c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	69fb      	ldr	r3, [r7, #28]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062d0:	461a      	mov	r2, r3
 80062d2:	2310      	movs	r3, #16
 80062d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d008      	beq.n	80062f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80062e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062e2:	015a      	lsls	r2, r3, #5
 80062e4:	69fb      	ldr	r3, [r7, #28]
 80062e6:	4413      	add	r3, r2
 80062e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ec:	461a      	mov	r2, r3
 80062ee:	2340      	movs	r3, #64	; 0x40
 80062f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f003 0302 	and.w	r3, r3, #2
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d023      	beq.n	8006344 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80062fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062fe:	6a38      	ldr	r0, [r7, #32]
 8006300:	f005 fc3e 	bl	800bb80 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006304:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006306:	4613      	mov	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	4413      	add	r3, r2
 800630c:	009b      	lsls	r3, r3, #2
 800630e:	3338      	adds	r3, #56	; 0x38
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	4413      	add	r3, r2
 8006314:	3304      	adds	r3, #4
 8006316:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	78db      	ldrb	r3, [r3, #3]
 800631c:	2b01      	cmp	r3, #1
 800631e:	d108      	bne.n	8006332 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2200      	movs	r2, #0
 8006324:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006328:	b2db      	uxtb	r3, r3
 800632a:	4619      	mov	r1, r3
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f00f f8bb 	bl	80154a8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006334:	015a      	lsls	r2, r3, #5
 8006336:	69fb      	ldr	r3, [r7, #28]
 8006338:	4413      	add	r3, r2
 800633a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800633e:	461a      	mov	r2, r3
 8006340:	2302      	movs	r3, #2
 8006342:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800634e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fd08 	bl	8006d66 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006358:	3301      	adds	r3, #1
 800635a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	085b      	lsrs	r3, r3, #1
 8006360:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	2b00      	cmp	r3, #0
 8006366:	f47f af2e 	bne.w	80061c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	4618      	mov	r0, r3
 8006370:	f006 fc34 	bl	800cbdc <USB_ReadInterrupts>
 8006374:	4603      	mov	r3, r0
 8006376:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800637a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800637e:	d122      	bne.n	80063c6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006380:	69fb      	ldr	r3, [r7, #28]
 8006382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800638e:	f023 0301 	bic.w	r3, r3, #1
 8006392:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800639a:	2b01      	cmp	r3, #1
 800639c:	d108      	bne.n	80063b0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80063a6:	2100      	movs	r1, #0
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f00f fa3b 	bl	8015824 <HAL_PCDEx_LPM_Callback>
 80063ae:	e002      	b.n	80063b6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80063b0:	6878      	ldr	r0, [r7, #4]
 80063b2:	f00f f859 	bl	8015468 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695a      	ldr	r2, [r3, #20]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80063c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f006 fc06 	bl	800cbdc <USB_ReadInterrupts>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063da:	d112      	bne.n	8006402 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	f003 0301 	and.w	r3, r3, #1
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d102      	bne.n	80063f2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f00f f815 	bl	801541c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	695a      	ldr	r2, [r3, #20]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006400:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4618      	mov	r0, r3
 8006408:	f006 fbe8 	bl	800cbdc <USB_ReadInterrupts>
 800640c:	4603      	mov	r3, r0
 800640e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006412:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006416:	d121      	bne.n	800645c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	695a      	ldr	r2, [r3, #20]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006426:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800642e:	2b00      	cmp	r3, #0
 8006430:	d111      	bne.n	8006456 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	2201      	movs	r2, #1
 8006436:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006440:	089b      	lsrs	r3, r3, #2
 8006442:	f003 020f 	and.w	r2, r3, #15
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800644c:	2101      	movs	r1, #1
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f00f f9e8 	bl	8015824 <HAL_PCDEx_LPM_Callback>
 8006454:	e002      	b.n	800645c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f00e ffe0 	bl	801541c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4618      	mov	r0, r3
 8006462:	f006 fbbb 	bl	800cbdc <USB_ReadInterrupts>
 8006466:	4603      	mov	r3, r0
 8006468:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800646c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006470:	f040 80b7 	bne.w	80065e2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006474:	69fb      	ldr	r3, [r7, #28]
 8006476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006482:	f023 0301 	bic.w	r3, r3, #1
 8006486:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	2110      	movs	r1, #16
 800648e:	4618      	mov	r0, r3
 8006490:	f005 fb76 	bl	800bb80 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006494:	2300      	movs	r3, #0
 8006496:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006498:	e046      	b.n	8006528 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800649a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064a6:	461a      	mov	r2, r3
 80064a8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064ac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80064ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b0:	015a      	lsls	r2, r3, #5
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	4413      	add	r3, r2
 80064b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064be:	0151      	lsls	r1, r2, #5
 80064c0:	69fa      	ldr	r2, [r7, #28]
 80064c2:	440a      	add	r2, r1
 80064c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80064c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80064cc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80064ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064d0:	015a      	lsls	r2, r3, #5
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	4413      	add	r3, r2
 80064d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064da:	461a      	mov	r2, r3
 80064dc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80064e0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80064e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064f2:	0151      	lsls	r1, r2, #5
 80064f4:	69fa      	ldr	r2, [r7, #28]
 80064f6:	440a      	add	r2, r1
 80064f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064fc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006500:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006504:	015a      	lsls	r2, r3, #5
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	4413      	add	r3, r2
 800650a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006512:	0151      	lsls	r1, r2, #5
 8006514:	69fa      	ldr	r2, [r7, #28]
 8006516:	440a      	add	r2, r1
 8006518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800651c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006520:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006524:	3301      	adds	r3, #1
 8006526:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800652e:	429a      	cmp	r2, r3
 8006530:	d3b3      	bcc.n	800649a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006532:	69fb      	ldr	r3, [r7, #28]
 8006534:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006538:	69db      	ldr	r3, [r3, #28]
 800653a:	69fa      	ldr	r2, [r7, #28]
 800653c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006540:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006544:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800654a:	2b00      	cmp	r3, #0
 800654c:	d016      	beq.n	800657c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006558:	69fa      	ldr	r2, [r7, #28]
 800655a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800655e:	f043 030b 	orr.w	r3, r3, #11
 8006562:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006566:	69fb      	ldr	r3, [r7, #28]
 8006568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006574:	f043 030b 	orr.w	r3, r3, #11
 8006578:	6453      	str	r3, [r2, #68]	; 0x44
 800657a:	e015      	b.n	80065a8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800657c:	69fb      	ldr	r3, [r7, #28]
 800657e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006582:	695a      	ldr	r2, [r3, #20]
 8006584:	69fb      	ldr	r3, [r7, #28]
 8006586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800658a:	4619      	mov	r1, r3
 800658c:	f242 032b 	movw	r3, #8235	; 0x202b
 8006590:	4313      	orrs	r3, r2
 8006592:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800659a:	691b      	ldr	r3, [r3, #16]
 800659c:	69fa      	ldr	r2, [r7, #28]
 800659e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065a2:	f043 030b 	orr.w	r3, r3, #11
 80065a6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	69fa      	ldr	r2, [r7, #28]
 80065b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80065b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80065ba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	6818      	ldr	r0, [r3, #0]
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	691b      	ldr	r3, [r3, #16]
 80065c4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80065cc:	461a      	mov	r2, r3
 80065ce:	f006 fbeb 	bl	800cda8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	695a      	ldr	r2, [r3, #20]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80065e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f006 faf8 	bl	800cbdc <USB_ReadInterrupts>
 80065ec:	4603      	mov	r3, r0
 80065ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80065f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80065f6:	d124      	bne.n	8006642 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	4618      	mov	r0, r3
 80065fe:	f006 fbaf 	bl	800cd60 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f005 fb37 	bl	800bc7a <USB_GetDevSpeed>
 800660c:	4603      	mov	r3, r0
 800660e:	461a      	mov	r2, r3
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681c      	ldr	r4, [r3, #0]
 8006618:	f001 fad0 	bl	8007bbc <HAL_RCC_GetHCLKFreq>
 800661c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006622:	b2db      	uxtb	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	4620      	mov	r0, r4
 8006628:	f005 f83c 	bl	800b6a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f00e fecc 	bl	80153ca <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	695a      	ldr	r2, [r3, #20]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006640:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4618      	mov	r0, r3
 8006648:	f006 fac8 	bl	800cbdc <USB_ReadInterrupts>
 800664c:	4603      	mov	r3, r0
 800664e:	f003 0308 	and.w	r3, r3, #8
 8006652:	2b08      	cmp	r3, #8
 8006654:	d10a      	bne.n	800666c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f00e fea9 	bl	80153ae <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	695a      	ldr	r2, [r3, #20]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f002 0208 	and.w	r2, r2, #8
 800666a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4618      	mov	r0, r3
 8006672:	f006 fab3 	bl	800cbdc <USB_ReadInterrupts>
 8006676:	4603      	mov	r3, r0
 8006678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667c:	2b80      	cmp	r3, #128	; 0x80
 800667e:	d122      	bne.n	80066c6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006680:	6a3b      	ldr	r3, [r7, #32]
 8006682:	699b      	ldr	r3, [r3, #24]
 8006684:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006688:	6a3b      	ldr	r3, [r7, #32]
 800668a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800668c:	2301      	movs	r3, #1
 800668e:	627b      	str	r3, [r7, #36]	; 0x24
 8006690:	e014      	b.n	80066bc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006692:	6879      	ldr	r1, [r7, #4]
 8006694:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006696:	4613      	mov	r3, r2
 8006698:	00db      	lsls	r3, r3, #3
 800669a:	4413      	add	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	440b      	add	r3, r1
 80066a0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80066a4:	781b      	ldrb	r3, [r3, #0]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d105      	bne.n	80066b6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80066aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	4619      	mov	r1, r3
 80066b0:	6878      	ldr	r0, [r7, #4]
 80066b2:	f000 fb27 	bl	8006d04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b8:	3301      	adds	r3, #1
 80066ba:	627b      	str	r3, [r7, #36]	; 0x24
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d3e5      	bcc.n	8006692 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	4618      	mov	r0, r3
 80066cc:	f006 fa86 	bl	800cbdc <USB_ReadInterrupts>
 80066d0:	4603      	mov	r3, r0
 80066d2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80066da:	d13b      	bne.n	8006754 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80066dc:	2301      	movs	r3, #1
 80066de:	627b      	str	r3, [r7, #36]	; 0x24
 80066e0:	e02b      	b.n	800673a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80066e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066e4:	015a      	lsls	r2, r3, #5
 80066e6:	69fb      	ldr	r3, [r7, #28]
 80066e8:	4413      	add	r3, r2
 80066ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80066f2:	6879      	ldr	r1, [r7, #4]
 80066f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80066f6:	4613      	mov	r3, r2
 80066f8:	00db      	lsls	r3, r3, #3
 80066fa:	4413      	add	r3, r2
 80066fc:	009b      	lsls	r3, r3, #2
 80066fe:	440b      	add	r3, r1
 8006700:	3340      	adds	r3, #64	; 0x40
 8006702:	781b      	ldrb	r3, [r3, #0]
 8006704:	2b01      	cmp	r3, #1
 8006706:	d115      	bne.n	8006734 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006708:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800670a:	2b00      	cmp	r3, #0
 800670c:	da12      	bge.n	8006734 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800670e:	6879      	ldr	r1, [r7, #4]
 8006710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006712:	4613      	mov	r3, r2
 8006714:	00db      	lsls	r3, r3, #3
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	440b      	add	r3, r1
 800671c:	333f      	adds	r3, #63	; 0x3f
 800671e:	2201      	movs	r2, #1
 8006720:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	b2db      	uxtb	r3, r3
 8006726:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800672a:	b2db      	uxtb	r3, r3
 800672c:	4619      	mov	r1, r3
 800672e:	6878      	ldr	r0, [r7, #4]
 8006730:	f000 fae8 	bl	8006d04 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006736:	3301      	adds	r3, #1
 8006738:	627b      	str	r3, [r7, #36]	; 0x24
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	685b      	ldr	r3, [r3, #4]
 800673e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006740:	429a      	cmp	r2, r3
 8006742:	d3ce      	bcc.n	80066e2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	695a      	ldr	r2, [r3, #20]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006752:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4618      	mov	r0, r3
 800675a:	f006 fa3f 	bl	800cbdc <USB_ReadInterrupts>
 800675e:	4603      	mov	r3, r0
 8006760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006764:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006768:	d155      	bne.n	8006816 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800676a:	2301      	movs	r3, #1
 800676c:	627b      	str	r3, [r7, #36]	; 0x24
 800676e:	e045      	b.n	80067fc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006772:	015a      	lsls	r2, r3, #5
 8006774:	69fb      	ldr	r3, [r7, #28]
 8006776:	4413      	add	r3, r2
 8006778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006780:	6879      	ldr	r1, [r7, #4]
 8006782:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006784:	4613      	mov	r3, r2
 8006786:	00db      	lsls	r3, r3, #3
 8006788:	4413      	add	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	440b      	add	r3, r1
 800678e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	2b01      	cmp	r3, #1
 8006796:	d12e      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006798:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800679a:	2b00      	cmp	r3, #0
 800679c:	da2b      	bge.n	80067f6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800679e:	69bb      	ldr	r3, [r7, #24]
 80067a0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80067aa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d121      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80067b6:	4613      	mov	r3, r2
 80067b8:	00db      	lsls	r3, r3, #3
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	440b      	add	r3, r1
 80067c0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80067c8:	6a3b      	ldr	r3, [r7, #32]
 80067ca:	699b      	ldr	r3, [r3, #24]
 80067cc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80067d4:	6a3b      	ldr	r3, [r7, #32]
 80067d6:	695b      	ldr	r3, [r3, #20]
 80067d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d10a      	bne.n	80067f6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067e6:	685b      	ldr	r3, [r3, #4]
 80067e8:	69fa      	ldr	r2, [r7, #28]
 80067ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80067ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067f2:	6053      	str	r3, [r2, #4]
            break;
 80067f4:	e007      	b.n	8006806 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80067f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f8:	3301      	adds	r3, #1
 80067fa:	627b      	str	r3, [r7, #36]	; 0x24
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006802:	429a      	cmp	r2, r3
 8006804:	d3b4      	bcc.n	8006770 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	695a      	ldr	r2, [r3, #20]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006814:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4618      	mov	r0, r3
 800681c:	f006 f9de 	bl	800cbdc <USB_ReadInterrupts>
 8006820:	4603      	mov	r3, r0
 8006822:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006826:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800682a:	d10a      	bne.n	8006842 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800682c:	6878      	ldr	r0, [r7, #4]
 800682e:	f00e fe4d 	bl	80154cc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	695a      	ldr	r2, [r3, #20]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006840:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4618      	mov	r0, r3
 8006848:	f006 f9c8 	bl	800cbdc <USB_ReadInterrupts>
 800684c:	4603      	mov	r3, r0
 800684e:	f003 0304 	and.w	r3, r3, #4
 8006852:	2b04      	cmp	r3, #4
 8006854:	d115      	bne.n	8006882 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800685e:	69bb      	ldr	r3, [r7, #24]
 8006860:	f003 0304 	and.w	r3, r3, #4
 8006864:	2b00      	cmp	r3, #0
 8006866:	d002      	beq.n	800686e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f00e fe3d 	bl	80154e8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	6859      	ldr	r1, [r3, #4]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	69ba      	ldr	r2, [r7, #24]
 800687a:	430a      	orrs	r2, r1
 800687c:	605a      	str	r2, [r3, #4]
 800687e:	e000      	b.n	8006882 <HAL_PCD_IRQHandler+0x992>
      return;
 8006880:	bf00      	nop
    }
  }
}
 8006882:	3734      	adds	r7, #52	; 0x34
 8006884:	46bd      	mov	sp, r7
 8006886:	bd90      	pop	{r4, r7, pc}

08006888 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800689a:	2b01      	cmp	r3, #1
 800689c:	d101      	bne.n	80068a2 <HAL_PCD_SetAddress+0x1a>
 800689e:	2302      	movs	r3, #2
 80068a0:	e013      	b.n	80068ca <HAL_PCD_SetAddress+0x42>
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2201      	movs	r2, #1
 80068a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	78fa      	ldrb	r2, [r7, #3]
 80068ae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	78fa      	ldrb	r2, [r7, #3]
 80068b8:	4611      	mov	r1, r2
 80068ba:	4618      	mov	r0, r3
 80068bc:	f006 f926 	bl	800cb0c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2200      	movs	r2, #0
 80068c4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80068c8:	2300      	movs	r3, #0
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3708      	adds	r7, #8
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}

080068d2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	4608      	mov	r0, r1
 80068dc:	4611      	mov	r1, r2
 80068de:	461a      	mov	r2, r3
 80068e0:	4603      	mov	r3, r0
 80068e2:	70fb      	strb	r3, [r7, #3]
 80068e4:	460b      	mov	r3, r1
 80068e6:	803b      	strh	r3, [r7, #0]
 80068e8:	4613      	mov	r3, r2
 80068ea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80068ec:	2300      	movs	r3, #0
 80068ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80068f0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	da0f      	bge.n	8006918 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80068f8:	78fb      	ldrb	r3, [r7, #3]
 80068fa:	f003 020f 	and.w	r2, r3, #15
 80068fe:	4613      	mov	r3, r2
 8006900:	00db      	lsls	r3, r3, #3
 8006902:	4413      	add	r3, r2
 8006904:	009b      	lsls	r3, r3, #2
 8006906:	3338      	adds	r3, #56	; 0x38
 8006908:	687a      	ldr	r2, [r7, #4]
 800690a:	4413      	add	r3, r2
 800690c:	3304      	adds	r3, #4
 800690e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	2201      	movs	r2, #1
 8006914:	705a      	strb	r2, [r3, #1]
 8006916:	e00f      	b.n	8006938 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	f003 020f 	and.w	r2, r3, #15
 800691e:	4613      	mov	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	4413      	add	r3, r2
 8006924:	009b      	lsls	r3, r3, #2
 8006926:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	4413      	add	r3, r2
 800692e:	3304      	adds	r3, #4
 8006930:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	2200      	movs	r2, #0
 8006936:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006938:	78fb      	ldrb	r3, [r7, #3]
 800693a:	f003 030f 	and.w	r3, r3, #15
 800693e:	b2da      	uxtb	r2, r3
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8006944:	883a      	ldrh	r2, [r7, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	78ba      	ldrb	r2, [r7, #2]
 800694e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	785b      	ldrb	r3, [r3, #1]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d004      	beq.n	8006962 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	b29a      	uxth	r2, r3
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006962:	78bb      	ldrb	r3, [r7, #2]
 8006964:	2b02      	cmp	r3, #2
 8006966:	d102      	bne.n	800696e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	2200      	movs	r2, #0
 800696c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006974:	2b01      	cmp	r3, #1
 8006976:	d101      	bne.n	800697c <HAL_PCD_EP_Open+0xaa>
 8006978:	2302      	movs	r3, #2
 800697a:	e00e      	b.n	800699a <HAL_PCD_EP_Open+0xc8>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2201      	movs	r2, #1
 8006980:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	68f9      	ldr	r1, [r7, #12]
 800698a:	4618      	mov	r0, r3
 800698c:	f005 f99a 	bl	800bcc4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2200      	movs	r2, #0
 8006994:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8006998:	7afb      	ldrb	r3, [r7, #11]
}
 800699a:	4618      	mov	r0, r3
 800699c:	3710      	adds	r7, #16
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}

080069a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80069a2:	b580      	push	{r7, lr}
 80069a4:	b084      	sub	sp, #16
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
 80069aa:	460b      	mov	r3, r1
 80069ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80069ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	da0f      	bge.n	80069d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80069b6:	78fb      	ldrb	r3, [r7, #3]
 80069b8:	f003 020f 	and.w	r2, r3, #15
 80069bc:	4613      	mov	r3, r2
 80069be:	00db      	lsls	r3, r3, #3
 80069c0:	4413      	add	r3, r2
 80069c2:	009b      	lsls	r3, r3, #2
 80069c4:	3338      	adds	r3, #56	; 0x38
 80069c6:	687a      	ldr	r2, [r7, #4]
 80069c8:	4413      	add	r3, r2
 80069ca:	3304      	adds	r3, #4
 80069cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	705a      	strb	r2, [r3, #1]
 80069d4:	e00f      	b.n	80069f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80069d6:	78fb      	ldrb	r3, [r7, #3]
 80069d8:	f003 020f 	and.w	r2, r3, #15
 80069dc:	4613      	mov	r3, r2
 80069de:	00db      	lsls	r3, r3, #3
 80069e0:	4413      	add	r3, r2
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80069e8:	687a      	ldr	r2, [r7, #4]
 80069ea:	4413      	add	r3, r2
 80069ec:	3304      	adds	r3, #4
 80069ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2200      	movs	r2, #0
 80069f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80069f6:	78fb      	ldrb	r3, [r7, #3]
 80069f8:	f003 030f 	and.w	r3, r3, #15
 80069fc:	b2da      	uxtb	r2, r3
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	d101      	bne.n	8006a10 <HAL_PCD_EP_Close+0x6e>
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	e00e      	b.n	8006a2e <HAL_PCD_EP_Close+0x8c>
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2201      	movs	r2, #1
 8006a14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	68f9      	ldr	r1, [r7, #12]
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f005 f9d8 	bl	800bdd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b086      	sub	sp, #24
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	607a      	str	r2, [r7, #4]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	460b      	mov	r3, r1
 8006a44:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006a46:	7afb      	ldrb	r3, [r7, #11]
 8006a48:	f003 020f 	and.w	r2, r3, #15
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	00db      	lsls	r3, r3, #3
 8006a50:	4413      	add	r3, r2
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006a66:	697b      	ldr	r3, [r7, #20]
 8006a68:	683a      	ldr	r2, [r7, #0]
 8006a6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	2200      	movs	r2, #0
 8006a70:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8006a72:	697b      	ldr	r3, [r7, #20]
 8006a74:	2200      	movs	r2, #0
 8006a76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006a78:	7afb      	ldrb	r3, [r7, #11]
 8006a7a:	f003 030f 	and.w	r3, r3, #15
 8006a7e:	b2da      	uxtb	r2, r3
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	691b      	ldr	r3, [r3, #16]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d102      	bne.n	8006a92 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	697b      	ldr	r3, [r7, #20]
 8006a90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	f003 030f 	and.w	r3, r3, #15
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d109      	bne.n	8006ab0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6818      	ldr	r0, [r3, #0]
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6979      	ldr	r1, [r7, #20]
 8006aaa:	f005 fcbf 	bl	800c42c <USB_EP0StartXfer>
 8006aae:	e008      	b.n	8006ac2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6818      	ldr	r0, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	691b      	ldr	r3, [r3, #16]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	461a      	mov	r2, r3
 8006abc:	6979      	ldr	r1, [r7, #20]
 8006abe:	f005 fa65 	bl	800bf8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006ac2:	2300      	movs	r3, #0
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3718      	adds	r7, #24
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	bd80      	pop	{r7, pc}

08006acc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
 8006ad4:	460b      	mov	r3, r1
 8006ad6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8006ad8:	78fb      	ldrb	r3, [r7, #3]
 8006ada:	f003 020f 	and.w	r2, r3, #15
 8006ade:	6879      	ldr	r1, [r7, #4]
 8006ae0:	4613      	mov	r3, r2
 8006ae2:	00db      	lsls	r3, r3, #3
 8006ae4:	4413      	add	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	440b      	add	r3, r1
 8006aea:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8006aee:	681b      	ldr	r3, [r3, #0]
}
 8006af0:	4618      	mov	r0, r3
 8006af2:	370c      	adds	r7, #12
 8006af4:	46bd      	mov	sp, r7
 8006af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afa:	4770      	bx	lr

08006afc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006afc:	b580      	push	{r7, lr}
 8006afe:	b086      	sub	sp, #24
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	60f8      	str	r0, [r7, #12]
 8006b04:	607a      	str	r2, [r7, #4]
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	460b      	mov	r3, r1
 8006b0a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006b0c:	7afb      	ldrb	r3, [r7, #11]
 8006b0e:	f003 020f 	and.w	r2, r3, #15
 8006b12:	4613      	mov	r3, r2
 8006b14:	00db      	lsls	r3, r3, #3
 8006b16:	4413      	add	r3, r2
 8006b18:	009b      	lsls	r3, r3, #2
 8006b1a:	3338      	adds	r3, #56	; 0x38
 8006b1c:	68fa      	ldr	r2, [r7, #12]
 8006b1e:	4413      	add	r3, r2
 8006b20:	3304      	adds	r3, #4
 8006b22:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	687a      	ldr	r2, [r7, #4]
 8006b28:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	683a      	ldr	r2, [r7, #0]
 8006b2e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	2200      	movs	r2, #0
 8006b34:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2201      	movs	r2, #1
 8006b3a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006b3c:	7afb      	ldrb	r3, [r7, #11]
 8006b3e:	f003 030f 	and.w	r3, r3, #15
 8006b42:	b2da      	uxtb	r2, r3
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d102      	bne.n	8006b56 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006b50:	687a      	ldr	r2, [r7, #4]
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006b56:	7afb      	ldrb	r3, [r7, #11]
 8006b58:	f003 030f 	and.w	r3, r3, #15
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d109      	bne.n	8006b74 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6818      	ldr	r0, [r3, #0]
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	691b      	ldr	r3, [r3, #16]
 8006b68:	b2db      	uxtb	r3, r3
 8006b6a:	461a      	mov	r2, r3
 8006b6c:	6979      	ldr	r1, [r7, #20]
 8006b6e:	f005 fc5d 	bl	800c42c <USB_EP0StartXfer>
 8006b72:	e008      	b.n	8006b86 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6818      	ldr	r0, [r3, #0]
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	691b      	ldr	r3, [r3, #16]
 8006b7c:	b2db      	uxtb	r3, r3
 8006b7e:	461a      	mov	r2, r3
 8006b80:	6979      	ldr	r1, [r7, #20]
 8006b82:	f005 fa03 	bl	800bf8c <USB_EPStartXfer>
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b084      	sub	sp, #16
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
 8006b98:	460b      	mov	r3, r1
 8006b9a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006b9c:	78fb      	ldrb	r3, [r7, #3]
 8006b9e:	f003 020f 	and.w	r2, r3, #15
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	685b      	ldr	r3, [r3, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d901      	bls.n	8006bae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006baa:	2301      	movs	r3, #1
 8006bac:	e050      	b.n	8006c50 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006bae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	da0f      	bge.n	8006bd6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006bb6:	78fb      	ldrb	r3, [r7, #3]
 8006bb8:	f003 020f 	and.w	r2, r3, #15
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	00db      	lsls	r3, r3, #3
 8006bc0:	4413      	add	r3, r2
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	3338      	adds	r3, #56	; 0x38
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	4413      	add	r3, r2
 8006bca:	3304      	adds	r3, #4
 8006bcc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	705a      	strb	r2, [r3, #1]
 8006bd4:	e00d      	b.n	8006bf2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006bd6:	78fa      	ldrb	r2, [r7, #3]
 8006bd8:	4613      	mov	r3, r2
 8006bda:	00db      	lsls	r3, r3, #3
 8006bdc:	4413      	add	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	4413      	add	r3, r2
 8006be8:	3304      	adds	r3, #4
 8006bea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	2200      	movs	r2, #0
 8006bf0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006bf8:	78fb      	ldrb	r3, [r7, #3]
 8006bfa:	f003 030f 	and.w	r3, r3, #15
 8006bfe:	b2da      	uxtb	r2, r3
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d101      	bne.n	8006c12 <HAL_PCD_EP_SetStall+0x82>
 8006c0e:	2302      	movs	r3, #2
 8006c10:	e01e      	b.n	8006c50 <HAL_PCD_EP_SetStall+0xc0>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2201      	movs	r2, #1
 8006c16:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68f9      	ldr	r1, [r7, #12]
 8006c20:	4618      	mov	r0, r3
 8006c22:	f005 fe9f 	bl	800c964 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006c26:	78fb      	ldrb	r3, [r7, #3]
 8006c28:	f003 030f 	and.w	r3, r3, #15
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d10a      	bne.n	8006c46 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6818      	ldr	r0, [r3, #0]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	b2d9      	uxtb	r1, r3
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006c40:	461a      	mov	r2, r3
 8006c42:	f006 f8b1 	bl	800cda8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006c4e:	2300      	movs	r3, #0
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3710      	adds	r7, #16
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}

08006c58 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	460b      	mov	r3, r1
 8006c62:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006c64:	78fb      	ldrb	r3, [r7, #3]
 8006c66:	f003 020f 	and.w	r2, r3, #15
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	429a      	cmp	r2, r3
 8006c70:	d901      	bls.n	8006c76 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006c72:	2301      	movs	r3, #1
 8006c74:	e042      	b.n	8006cfc <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006c76:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	da0f      	bge.n	8006c9e <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006c7e:	78fb      	ldrb	r3, [r7, #3]
 8006c80:	f003 020f 	and.w	r2, r3, #15
 8006c84:	4613      	mov	r3, r2
 8006c86:	00db      	lsls	r3, r3, #3
 8006c88:	4413      	add	r3, r2
 8006c8a:	009b      	lsls	r3, r3, #2
 8006c8c:	3338      	adds	r3, #56	; 0x38
 8006c8e:	687a      	ldr	r2, [r7, #4]
 8006c90:	4413      	add	r3, r2
 8006c92:	3304      	adds	r3, #4
 8006c94:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2201      	movs	r2, #1
 8006c9a:	705a      	strb	r2, [r3, #1]
 8006c9c:	e00f      	b.n	8006cbe <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	f003 020f 	and.w	r2, r3, #15
 8006ca4:	4613      	mov	r3, r2
 8006ca6:	00db      	lsls	r3, r3, #3
 8006ca8:	4413      	add	r3, r2
 8006caa:	009b      	lsls	r3, r3, #2
 8006cac:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	3304      	adds	r3, #4
 8006cb6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	2200      	movs	r2, #0
 8006cbc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	f003 030f 	and.w	r3, r3, #15
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_PCD_EP_ClrStall+0x86>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e00e      	b.n	8006cfc <HAL_PCD_EP_ClrStall+0xa4>
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	68f9      	ldr	r1, [r7, #12]
 8006cec:	4618      	mov	r0, r3
 8006cee:	f005 fea7 	bl	800ca40 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8006d10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	da0c      	bge.n	8006d32 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006d18:	78fb      	ldrb	r3, [r7, #3]
 8006d1a:	f003 020f 	and.w	r2, r3, #15
 8006d1e:	4613      	mov	r3, r2
 8006d20:	00db      	lsls	r3, r3, #3
 8006d22:	4413      	add	r3, r2
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	3338      	adds	r3, #56	; 0x38
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	3304      	adds	r3, #4
 8006d2e:	60fb      	str	r3, [r7, #12]
 8006d30:	e00c      	b.n	8006d4c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006d32:	78fb      	ldrb	r3, [r7, #3]
 8006d34:	f003 020f 	and.w	r2, r3, #15
 8006d38:	4613      	mov	r3, r2
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	4413      	add	r3, r2
 8006d3e:	009b      	lsls	r3, r3, #2
 8006d40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006d44:	687a      	ldr	r2, [r7, #4]
 8006d46:	4413      	add	r3, r2
 8006d48:	3304      	adds	r3, #4
 8006d4a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	68f9      	ldr	r1, [r7, #12]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f005 fcc6 	bl	800c6e4 <USB_EPStopXfer>
 8006d58:	4603      	mov	r3, r0
 8006d5a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006d5c:	7afb      	ldrb	r3, [r7, #11]
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3710      	adds	r7, #16
 8006d62:	46bd      	mov	sp, r7
 8006d64:	bd80      	pop	{r7, pc}

08006d66 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b08a      	sub	sp, #40	; 0x28
 8006d6a:	af02      	add	r7, sp, #8
 8006d6c:	6078      	str	r0, [r7, #4]
 8006d6e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006d7a:	683a      	ldr	r2, [r7, #0]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	00db      	lsls	r3, r3, #3
 8006d80:	4413      	add	r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	3338      	adds	r3, #56	; 0x38
 8006d86:	687a      	ldr	r2, [r7, #4]
 8006d88:	4413      	add	r3, r2
 8006d8a:	3304      	adds	r3, #4
 8006d8c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1a      	ldr	r2, [r3, #32]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d901      	bls.n	8006d9e <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006d9a:	2301      	movs	r3, #1
 8006d9c:	e06c      	b.n	8006e78 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	699a      	ldr	r2, [r3, #24]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	1ad3      	subs	r3, r2, r3
 8006da8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	68db      	ldr	r3, [r3, #12]
 8006dae:	69fa      	ldr	r2, [r7, #28]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d902      	bls.n	8006dba <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68db      	ldr	r3, [r3, #12]
 8006db8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	3303      	adds	r3, #3
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006dc2:	e02b      	b.n	8006e1c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	699a      	ldr	r2, [r3, #24]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	1ad3      	subs	r3, r2, r3
 8006dce:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	69fa      	ldr	r2, [r7, #28]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d902      	bls.n	8006de0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3303      	adds	r3, #3
 8006de4:	089b      	lsrs	r3, r3, #2
 8006de6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6919      	ldr	r1, [r3, #16]
 8006dec:	683b      	ldr	r3, [r7, #0]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	9300      	str	r3, [sp, #0]
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	6978      	ldr	r0, [r7, #20]
 8006e00:	f005 fd1a 	bl	800c838 <USB_WritePacket>

    ep->xfer_buff  += len;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	691a      	ldr	r2, [r3, #16]
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	441a      	add	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a1a      	ldr	r2, [r3, #32]
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	441a      	add	r2, r3
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	015a      	lsls	r2, r3, #5
 8006e20:	693b      	ldr	r3, [r7, #16]
 8006e22:	4413      	add	r3, r2
 8006e24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e28:	699b      	ldr	r3, [r3, #24]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	69ba      	ldr	r2, [r7, #24]
 8006e2e:	429a      	cmp	r2, r3
 8006e30:	d809      	bhi.n	8006e46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6a1a      	ldr	r2, [r3, #32]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d203      	bcs.n	8006e46 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d1be      	bne.n	8006dc4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	699a      	ldr	r2, [r3, #24]
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d811      	bhi.n	8006e76 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	f003 030f 	and.w	r3, r3, #15
 8006e58:	2201      	movs	r2, #1
 8006e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e5e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e66:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	43db      	mvns	r3, r3
 8006e6c:	6939      	ldr	r1, [r7, #16]
 8006e6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006e72:	4013      	ands	r3, r2
 8006e74:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006e76:	2300      	movs	r3, #0
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3720      	adds	r7, #32
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}

08006e80 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006e94:	69fb      	ldr	r3, [r7, #28]
 8006e96:	333c      	adds	r3, #60	; 0x3c
 8006e98:	3304      	adds	r3, #4
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	015a      	lsls	r2, r3, #5
 8006ea2:	69bb      	ldr	r3, [r7, #24]
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006eaa:	689b      	ldr	r3, [r3, #8]
 8006eac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b01      	cmp	r3, #1
 8006eb4:	d17b      	bne.n	8006fae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f003 0308 	and.w	r3, r3, #8
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d015      	beq.n	8006eec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	4a61      	ldr	r2, [pc, #388]	; (8007048 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006ec4:	4293      	cmp	r3, r2
 8006ec6:	f240 80b9 	bls.w	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	f000 80b3 	beq.w	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	015a      	lsls	r2, r3, #5
 8006eda:	69bb      	ldr	r3, [r7, #24]
 8006edc:	4413      	add	r3, r2
 8006ede:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006ee2:	461a      	mov	r2, r3
 8006ee4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ee8:	6093      	str	r3, [r2, #8]
 8006eea:	e0a7      	b.n	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006eec:	693b      	ldr	r3, [r7, #16]
 8006eee:	f003 0320 	and.w	r3, r3, #32
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d009      	beq.n	8006f0a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006ef6:	683b      	ldr	r3, [r7, #0]
 8006ef8:	015a      	lsls	r2, r3, #5
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	4413      	add	r3, r2
 8006efe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f02:	461a      	mov	r2, r3
 8006f04:	2320      	movs	r3, #32
 8006f06:	6093      	str	r3, [r2, #8]
 8006f08:	e098      	b.n	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006f0a:	693b      	ldr	r3, [r7, #16]
 8006f0c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	f040 8093 	bne.w	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	4a4b      	ldr	r2, [pc, #300]	; (8007048 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006f1a:	4293      	cmp	r3, r2
 8006f1c:	d90f      	bls.n	8006f3e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d00a      	beq.n	8006f3e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	015a      	lsls	r2, r3, #5
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	4413      	add	r3, r2
 8006f30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f34:	461a      	mov	r2, r3
 8006f36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f3a:	6093      	str	r3, [r2, #8]
 8006f3c:	e07e      	b.n	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006f3e:	683a      	ldr	r2, [r7, #0]
 8006f40:	4613      	mov	r3, r2
 8006f42:	00db      	lsls	r3, r3, #3
 8006f44:	4413      	add	r3, r2
 8006f46:	009b      	lsls	r3, r3, #2
 8006f48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006f4c:	687a      	ldr	r2, [r7, #4]
 8006f4e:	4413      	add	r3, r2
 8006f50:	3304      	adds	r3, #4
 8006f52:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	69da      	ldr	r2, [r3, #28]
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	0159      	lsls	r1, r3, #5
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	440b      	add	r3, r1
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f6a:	1ad2      	subs	r2, r2, r3
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006f70:	683b      	ldr	r3, [r7, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d114      	bne.n	8006fa0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	699b      	ldr	r3, [r3, #24]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d109      	bne.n	8006f92 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006f88:	461a      	mov	r2, r3
 8006f8a:	2101      	movs	r1, #1
 8006f8c:	f005 ff0c 	bl	800cda8 <USB_EP0_OutStart>
 8006f90:	e006      	b.n	8006fa0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	691a      	ldr	r2, [r3, #16]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6a1b      	ldr	r3, [r3, #32]
 8006f9a:	441a      	add	r2, r3
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f00e f9cc 	bl	8015344 <HAL_PCD_DataOutStageCallback>
 8006fac:	e046      	b.n	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	4a26      	ldr	r2, [pc, #152]	; (800704c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d124      	bne.n	8007000 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d00a      	beq.n	8006fd6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	015a      	lsls	r2, r3, #5
 8006fc4:	69bb      	ldr	r3, [r7, #24]
 8006fc6:	4413      	add	r3, r2
 8006fc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fcc:	461a      	mov	r2, r3
 8006fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fd2:	6093      	str	r3, [r2, #8]
 8006fd4:	e032      	b.n	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006fd6:	693b      	ldr	r3, [r7, #16]
 8006fd8:	f003 0320 	and.w	r3, r3, #32
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d008      	beq.n	8006ff2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	015a      	lsls	r2, r3, #5
 8006fe4:	69bb      	ldr	r3, [r7, #24]
 8006fe6:	4413      	add	r3, r2
 8006fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fec:	461a      	mov	r2, r3
 8006fee:	2320      	movs	r3, #32
 8006ff0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f00e f9a3 	bl	8015344 <HAL_PCD_DataOutStageCallback>
 8006ffe:	e01d      	b.n	800703c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d114      	bne.n	8007030 <PCD_EP_OutXfrComplete_int+0x1b0>
 8007006:	6879      	ldr	r1, [r7, #4]
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	4613      	mov	r3, r2
 800700c:	00db      	lsls	r3, r3, #3
 800700e:	4413      	add	r3, r2
 8007010:	009b      	lsls	r3, r3, #2
 8007012:	440b      	add	r3, r1
 8007014:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d108      	bne.n	8007030 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6818      	ldr	r0, [r3, #0]
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007028:	461a      	mov	r2, r3
 800702a:	2100      	movs	r1, #0
 800702c:	f005 febc 	bl	800cda8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	4619      	mov	r1, r3
 8007036:	6878      	ldr	r0, [r7, #4]
 8007038:	f00e f984 	bl	8015344 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800703c:	2300      	movs	r3, #0
}
 800703e:	4618      	mov	r0, r3
 8007040:	3720      	adds	r7, #32
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}
 8007046:	bf00      	nop
 8007048:	4f54300a 	.word	0x4f54300a
 800704c:	4f54310a 	.word	0x4f54310a

08007050 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	b086      	sub	sp, #24
 8007054:	af00      	add	r7, sp, #0
 8007056:	6078      	str	r0, [r7, #4]
 8007058:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007064:	697b      	ldr	r3, [r7, #20]
 8007066:	333c      	adds	r3, #60	; 0x3c
 8007068:	3304      	adds	r3, #4
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	015a      	lsls	r2, r3, #5
 8007072:	693b      	ldr	r3, [r7, #16]
 8007074:	4413      	add	r3, r2
 8007076:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800707a:	689b      	ldr	r3, [r3, #8]
 800707c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	4a15      	ldr	r2, [pc, #84]	; (80070d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8007082:	4293      	cmp	r3, r2
 8007084:	d90e      	bls.n	80070a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800708c:	2b00      	cmp	r3, #0
 800708e:	d009      	beq.n	80070a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	015a      	lsls	r2, r3, #5
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	4413      	add	r3, r2
 8007098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800709c:	461a      	mov	r2, r3
 800709e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80070a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f00e f93b 	bl	8015320 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	4a0a      	ldr	r2, [pc, #40]	; (80070d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d90c      	bls.n	80070cc <PCD_EP_OutSetupPacket_int+0x7c>
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	691b      	ldr	r3, [r3, #16]
 80070b6:	2b01      	cmp	r3, #1
 80070b8:	d108      	bne.n	80070cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6818      	ldr	r0, [r3, #0]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80070c4:	461a      	mov	r2, r3
 80070c6:	2101      	movs	r1, #1
 80070c8:	f005 fe6e 	bl	800cda8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80070cc:	2300      	movs	r3, #0
}
 80070ce:	4618      	mov	r0, r3
 80070d0:	3718      	adds	r7, #24
 80070d2:	46bd      	mov	sp, r7
 80070d4:	bd80      	pop	{r7, pc}
 80070d6:	bf00      	nop
 80070d8:	4f54300a 	.word	0x4f54300a

080070dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80070dc:	b480      	push	{r7}
 80070de:	b085      	sub	sp, #20
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	6078      	str	r0, [r7, #4]
 80070e4:	460b      	mov	r3, r1
 80070e6:	70fb      	strb	r3, [r7, #3]
 80070e8:	4613      	mov	r3, r2
 80070ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80070f4:	78fb      	ldrb	r3, [r7, #3]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d107      	bne.n	800710a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80070fa:	883b      	ldrh	r3, [r7, #0]
 80070fc:	0419      	lsls	r1, r3, #16
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68ba      	ldr	r2, [r7, #8]
 8007104:	430a      	orrs	r2, r1
 8007106:	629a      	str	r2, [r3, #40]	; 0x28
 8007108:	e028      	b.n	800715c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007110:	0c1b      	lsrs	r3, r3, #16
 8007112:	68ba      	ldr	r2, [r7, #8]
 8007114:	4413      	add	r3, r2
 8007116:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]
 800711c:	e00d      	b.n	800713a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681a      	ldr	r2, [r3, #0]
 8007122:	7bfb      	ldrb	r3, [r7, #15]
 8007124:	3340      	adds	r3, #64	; 0x40
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	4413      	add	r3, r2
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	0c1b      	lsrs	r3, r3, #16
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	4413      	add	r3, r2
 8007132:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8007134:	7bfb      	ldrb	r3, [r7, #15]
 8007136:	3301      	adds	r3, #1
 8007138:	73fb      	strb	r3, [r7, #15]
 800713a:	7bfa      	ldrb	r2, [r7, #15]
 800713c:	78fb      	ldrb	r3, [r7, #3]
 800713e:	3b01      	subs	r3, #1
 8007140:	429a      	cmp	r2, r3
 8007142:	d3ec      	bcc.n	800711e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007144:	883b      	ldrh	r3, [r7, #0]
 8007146:	0418      	lsls	r0, r3, #16
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	6819      	ldr	r1, [r3, #0]
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	3b01      	subs	r3, #1
 8007150:	68ba      	ldr	r2, [r7, #8]
 8007152:	4302      	orrs	r2, r0
 8007154:	3340      	adds	r3, #64	; 0x40
 8007156:	009b      	lsls	r3, r3, #2
 8007158:	440b      	add	r3, r1
 800715a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800715c:	2300      	movs	r3, #0
}
 800715e:	4618      	mov	r0, r3
 8007160:	3714      	adds	r7, #20
 8007162:	46bd      	mov	sp, r7
 8007164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007168:	4770      	bx	lr

0800716a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800716a:	b480      	push	{r7}
 800716c:	b083      	sub	sp, #12
 800716e:	af00      	add	r7, sp, #0
 8007170:	6078      	str	r0, [r7, #4]
 8007172:	460b      	mov	r3, r1
 8007174:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	887a      	ldrh	r2, [r7, #2]
 800717c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800717e:	2300      	movs	r3, #0
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr

0800718c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800718c:	b480      	push	{r7}
 800718e:	b085      	sub	sp, #20
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2201      	movs	r2, #1
 800719e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2200      	movs	r2, #0
 80071a6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	699b      	ldr	r3, [r3, #24]
 80071ae:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80071ba:	4b05      	ldr	r3, [pc, #20]	; (80071d0 <HAL_PCDEx_ActivateLPM+0x44>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	68fa      	ldr	r2, [r7, #12]
 80071c0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80071c2:	2300      	movs	r3, #0
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3714      	adds	r7, #20
 80071c8:	46bd      	mov	sp, r7
 80071ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ce:	4770      	bx	lr
 80071d0:	10000003 	.word	0x10000003

080071d4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80071d4:	b480      	push	{r7}
 80071d6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80071d8:	4b05      	ldr	r3, [pc, #20]	; (80071f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	4a04      	ldr	r2, [pc, #16]	; (80071f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80071de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071e2:	6013      	str	r3, [r2, #0]
}
 80071e4:	bf00      	nop
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40007000 	.word	0x40007000

080071f4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80071fa:	2300      	movs	r3, #0
 80071fc:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80071fe:	4b23      	ldr	r3, [pc, #140]	; (800728c <HAL_PWREx_EnableOverDrive+0x98>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	4a22      	ldr	r2, [pc, #136]	; (800728c <HAL_PWREx_EnableOverDrive+0x98>)
 8007204:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007208:	6413      	str	r3, [r2, #64]	; 0x40
 800720a:	4b20      	ldr	r3, [pc, #128]	; (800728c <HAL_PWREx_EnableOverDrive+0x98>)
 800720c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8007216:	4b1e      	ldr	r3, [pc, #120]	; (8007290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a1d      	ldr	r2, [pc, #116]	; (8007290 <HAL_PWREx_EnableOverDrive+0x9c>)
 800721c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007220:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007222:	f7fb ff2d 	bl	8003080 <HAL_GetTick>
 8007226:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007228:	e009      	b.n	800723e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800722a:	f7fb ff29 	bl	8003080 <HAL_GetTick>
 800722e:	4602      	mov	r2, r0
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	1ad3      	subs	r3, r2, r3
 8007234:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007238:	d901      	bls.n	800723e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800723a:	2303      	movs	r3, #3
 800723c:	e022      	b.n	8007284 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800723e:	4b14      	ldr	r3, [pc, #80]	; (8007290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007240:	685b      	ldr	r3, [r3, #4]
 8007242:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007246:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800724a:	d1ee      	bne.n	800722a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800724c:	4b10      	ldr	r3, [pc, #64]	; (8007290 <HAL_PWREx_EnableOverDrive+0x9c>)
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	4a0f      	ldr	r2, [pc, #60]	; (8007290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007252:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007256:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007258:	f7fb ff12 	bl	8003080 <HAL_GetTick>
 800725c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800725e:	e009      	b.n	8007274 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007260:	f7fb ff0e 	bl	8003080 <HAL_GetTick>
 8007264:	4602      	mov	r2, r0
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800726e:	d901      	bls.n	8007274 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e007      	b.n	8007284 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007274:	4b06      	ldr	r3, [pc, #24]	; (8007290 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007276:	685b      	ldr	r3, [r3, #4]
 8007278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800727c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007280:	d1ee      	bne.n	8007260 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3708      	adds	r7, #8
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	40023800 	.word	0x40023800
 8007290:	40007000 	.word	0x40007000

08007294 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b086      	sub	sp, #24
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800729c:	2300      	movs	r3, #0
 800729e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d101      	bne.n	80072aa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80072a6:	2301      	movs	r3, #1
 80072a8:	e291      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 0301 	and.w	r3, r3, #1
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	f000 8087 	beq.w	80073c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80072b8:	4b96      	ldr	r3, [pc, #600]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 030c 	and.w	r3, r3, #12
 80072c0:	2b04      	cmp	r3, #4
 80072c2:	d00c      	beq.n	80072de <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80072c4:	4b93      	ldr	r3, [pc, #588]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80072c6:	689b      	ldr	r3, [r3, #8]
 80072c8:	f003 030c 	and.w	r3, r3, #12
 80072cc:	2b08      	cmp	r3, #8
 80072ce:	d112      	bne.n	80072f6 <HAL_RCC_OscConfig+0x62>
 80072d0:	4b90      	ldr	r3, [pc, #576]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80072d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80072dc:	d10b      	bne.n	80072f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80072de:	4b8d      	ldr	r3, [pc, #564]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d06c      	beq.n	80073c4 <HAL_RCC_OscConfig+0x130>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	685b      	ldr	r3, [r3, #4]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d168      	bne.n	80073c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80072f2:	2301      	movs	r3, #1
 80072f4:	e26b      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072fe:	d106      	bne.n	800730e <HAL_RCC_OscConfig+0x7a>
 8007300:	4b84      	ldr	r3, [pc, #528]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a83      	ldr	r2, [pc, #524]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007306:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800730a:	6013      	str	r3, [r2, #0]
 800730c:	e02e      	b.n	800736c <HAL_RCC_OscConfig+0xd8>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d10c      	bne.n	8007330 <HAL_RCC_OscConfig+0x9c>
 8007316:	4b7f      	ldr	r3, [pc, #508]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	4a7e      	ldr	r2, [pc, #504]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800731c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007320:	6013      	str	r3, [r2, #0]
 8007322:	4b7c      	ldr	r3, [pc, #496]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	4a7b      	ldr	r2, [pc, #492]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007328:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800732c:	6013      	str	r3, [r2, #0]
 800732e:	e01d      	b.n	800736c <HAL_RCC_OscConfig+0xd8>
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	685b      	ldr	r3, [r3, #4]
 8007334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007338:	d10c      	bne.n	8007354 <HAL_RCC_OscConfig+0xc0>
 800733a:	4b76      	ldr	r3, [pc, #472]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a75      	ldr	r2, [pc, #468]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007344:	6013      	str	r3, [r2, #0]
 8007346:	4b73      	ldr	r3, [pc, #460]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	4a72      	ldr	r2, [pc, #456]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800734c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007350:	6013      	str	r3, [r2, #0]
 8007352:	e00b      	b.n	800736c <HAL_RCC_OscConfig+0xd8>
 8007354:	4b6f      	ldr	r3, [pc, #444]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a6e      	ldr	r2, [pc, #440]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800735a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800735e:	6013      	str	r3, [r2, #0]
 8007360:	4b6c      	ldr	r3, [pc, #432]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a6b      	ldr	r2, [pc, #428]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800736a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	685b      	ldr	r3, [r3, #4]
 8007370:	2b00      	cmp	r3, #0
 8007372:	d013      	beq.n	800739c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007374:	f7fb fe84 	bl	8003080 <HAL_GetTick>
 8007378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800737a:	e008      	b.n	800738e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800737c:	f7fb fe80 	bl	8003080 <HAL_GetTick>
 8007380:	4602      	mov	r2, r0
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	1ad3      	subs	r3, r2, r3
 8007386:	2b64      	cmp	r3, #100	; 0x64
 8007388:	d901      	bls.n	800738e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800738a:	2303      	movs	r3, #3
 800738c:	e21f      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800738e:	4b61      	ldr	r3, [pc, #388]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007396:	2b00      	cmp	r3, #0
 8007398:	d0f0      	beq.n	800737c <HAL_RCC_OscConfig+0xe8>
 800739a:	e014      	b.n	80073c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800739c:	f7fb fe70 	bl	8003080 <HAL_GetTick>
 80073a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073a2:	e008      	b.n	80073b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80073a4:	f7fb fe6c 	bl	8003080 <HAL_GetTick>
 80073a8:	4602      	mov	r2, r0
 80073aa:	693b      	ldr	r3, [r7, #16]
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	2b64      	cmp	r3, #100	; 0x64
 80073b0:	d901      	bls.n	80073b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80073b2:	2303      	movs	r3, #3
 80073b4:	e20b      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80073b6:	4b57      	ldr	r3, [pc, #348]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d1f0      	bne.n	80073a4 <HAL_RCC_OscConfig+0x110>
 80073c2:	e000      	b.n	80073c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80073c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f003 0302 	and.w	r3, r3, #2
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d069      	beq.n	80074a6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80073d2:	4b50      	ldr	r3, [pc, #320]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f003 030c 	and.w	r3, r3, #12
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d00b      	beq.n	80073f6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80073de:	4b4d      	ldr	r3, [pc, #308]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80073e0:	689b      	ldr	r3, [r3, #8]
 80073e2:	f003 030c 	and.w	r3, r3, #12
 80073e6:	2b08      	cmp	r3, #8
 80073e8:	d11c      	bne.n	8007424 <HAL_RCC_OscConfig+0x190>
 80073ea:	4b4a      	ldr	r3, [pc, #296]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d116      	bne.n	8007424 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80073f6:	4b47      	ldr	r3, [pc, #284]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f003 0302 	and.w	r3, r3, #2
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d005      	beq.n	800740e <HAL_RCC_OscConfig+0x17a>
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	68db      	ldr	r3, [r3, #12]
 8007406:	2b01      	cmp	r3, #1
 8007408:	d001      	beq.n	800740e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800740a:	2301      	movs	r3, #1
 800740c:	e1df      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800740e:	4b41      	ldr	r3, [pc, #260]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	691b      	ldr	r3, [r3, #16]
 800741a:	00db      	lsls	r3, r3, #3
 800741c:	493d      	ldr	r1, [pc, #244]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800741e:	4313      	orrs	r3, r2
 8007420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007422:	e040      	b.n	80074a6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d023      	beq.n	8007474 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800742c:	4b39      	ldr	r3, [pc, #228]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a38      	ldr	r2, [pc, #224]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007432:	f043 0301 	orr.w	r3, r3, #1
 8007436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007438:	f7fb fe22 	bl	8003080 <HAL_GetTick>
 800743c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800743e:	e008      	b.n	8007452 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007440:	f7fb fe1e 	bl	8003080 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	693b      	ldr	r3, [r7, #16]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	2b02      	cmp	r3, #2
 800744c:	d901      	bls.n	8007452 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e1bd      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007452:	4b30      	ldr	r3, [pc, #192]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f003 0302 	and.w	r3, r3, #2
 800745a:	2b00      	cmp	r3, #0
 800745c:	d0f0      	beq.n	8007440 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800745e:	4b2d      	ldr	r3, [pc, #180]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	00db      	lsls	r3, r3, #3
 800746c:	4929      	ldr	r1, [pc, #164]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800746e:	4313      	orrs	r3, r2
 8007470:	600b      	str	r3, [r1, #0]
 8007472:	e018      	b.n	80074a6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007474:	4b27      	ldr	r3, [pc, #156]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	4a26      	ldr	r2, [pc, #152]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800747a:	f023 0301 	bic.w	r3, r3, #1
 800747e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007480:	f7fb fdfe 	bl	8003080 <HAL_GetTick>
 8007484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007486:	e008      	b.n	800749a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007488:	f7fb fdfa 	bl	8003080 <HAL_GetTick>
 800748c:	4602      	mov	r2, r0
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	2b02      	cmp	r3, #2
 8007494:	d901      	bls.n	800749a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007496:	2303      	movs	r3, #3
 8007498:	e199      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800749a:	4b1e      	ldr	r3, [pc, #120]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d1f0      	bne.n	8007488 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d038      	beq.n	8007524 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	695b      	ldr	r3, [r3, #20]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d019      	beq.n	80074ee <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80074ba:	4b16      	ldr	r3, [pc, #88]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80074bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074be:	4a15      	ldr	r2, [pc, #84]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80074c0:	f043 0301 	orr.w	r3, r3, #1
 80074c4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074c6:	f7fb fddb 	bl	8003080 <HAL_GetTick>
 80074ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074cc:	e008      	b.n	80074e0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80074ce:	f7fb fdd7 	bl	8003080 <HAL_GetTick>
 80074d2:	4602      	mov	r2, r0
 80074d4:	693b      	ldr	r3, [r7, #16]
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	2b02      	cmp	r3, #2
 80074da:	d901      	bls.n	80074e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80074dc:	2303      	movs	r3, #3
 80074de:	e176      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80074e0:	4b0c      	ldr	r3, [pc, #48]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80074e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074e4:	f003 0302 	and.w	r3, r3, #2
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d0f0      	beq.n	80074ce <HAL_RCC_OscConfig+0x23a>
 80074ec:	e01a      	b.n	8007524 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80074ee:	4b09      	ldr	r3, [pc, #36]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80074f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f2:	4a08      	ldr	r2, [pc, #32]	; (8007514 <HAL_RCC_OscConfig+0x280>)
 80074f4:	f023 0301 	bic.w	r3, r3, #1
 80074f8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80074fa:	f7fb fdc1 	bl	8003080 <HAL_GetTick>
 80074fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007500:	e00a      	b.n	8007518 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007502:	f7fb fdbd 	bl	8003080 <HAL_GetTick>
 8007506:	4602      	mov	r2, r0
 8007508:	693b      	ldr	r3, [r7, #16]
 800750a:	1ad3      	subs	r3, r2, r3
 800750c:	2b02      	cmp	r3, #2
 800750e:	d903      	bls.n	8007518 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007510:	2303      	movs	r3, #3
 8007512:	e15c      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
 8007514:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007518:	4b91      	ldr	r3, [pc, #580]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 800751a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d1ee      	bne.n	8007502 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	f000 80a4 	beq.w	800767a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007532:	4b8b      	ldr	r3, [pc, #556]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007536:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800753a:	2b00      	cmp	r3, #0
 800753c:	d10d      	bne.n	800755a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800753e:	4b88      	ldr	r3, [pc, #544]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007542:	4a87      	ldr	r2, [pc, #540]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007544:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007548:	6413      	str	r3, [r2, #64]	; 0x40
 800754a:	4b85      	ldr	r3, [pc, #532]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 800754c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800754e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007552:	60bb      	str	r3, [r7, #8]
 8007554:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007556:	2301      	movs	r3, #1
 8007558:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800755a:	4b82      	ldr	r3, [pc, #520]	; (8007764 <HAL_RCC_OscConfig+0x4d0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007562:	2b00      	cmp	r3, #0
 8007564:	d118      	bne.n	8007598 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007566:	4b7f      	ldr	r3, [pc, #508]	; (8007764 <HAL_RCC_OscConfig+0x4d0>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a7e      	ldr	r2, [pc, #504]	; (8007764 <HAL_RCC_OscConfig+0x4d0>)
 800756c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007570:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007572:	f7fb fd85 	bl	8003080 <HAL_GetTick>
 8007576:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007578:	e008      	b.n	800758c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800757a:	f7fb fd81 	bl	8003080 <HAL_GetTick>
 800757e:	4602      	mov	r2, r0
 8007580:	693b      	ldr	r3, [r7, #16]
 8007582:	1ad3      	subs	r3, r2, r3
 8007584:	2b64      	cmp	r3, #100	; 0x64
 8007586:	d901      	bls.n	800758c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007588:	2303      	movs	r3, #3
 800758a:	e120      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800758c:	4b75      	ldr	r3, [pc, #468]	; (8007764 <HAL_RCC_OscConfig+0x4d0>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007594:	2b00      	cmp	r3, #0
 8007596:	d0f0      	beq.n	800757a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	689b      	ldr	r3, [r3, #8]
 800759c:	2b01      	cmp	r3, #1
 800759e:	d106      	bne.n	80075ae <HAL_RCC_OscConfig+0x31a>
 80075a0:	4b6f      	ldr	r3, [pc, #444]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075a4:	4a6e      	ldr	r2, [pc, #440]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075a6:	f043 0301 	orr.w	r3, r3, #1
 80075aa:	6713      	str	r3, [r2, #112]	; 0x70
 80075ac:	e02d      	b.n	800760a <HAL_RCC_OscConfig+0x376>
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d10c      	bne.n	80075d0 <HAL_RCC_OscConfig+0x33c>
 80075b6:	4b6a      	ldr	r3, [pc, #424]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075ba:	4a69      	ldr	r2, [pc, #420]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075bc:	f023 0301 	bic.w	r3, r3, #1
 80075c0:	6713      	str	r3, [r2, #112]	; 0x70
 80075c2:	4b67      	ldr	r3, [pc, #412]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075c6:	4a66      	ldr	r2, [pc, #408]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075c8:	f023 0304 	bic.w	r3, r3, #4
 80075cc:	6713      	str	r3, [r2, #112]	; 0x70
 80075ce:	e01c      	b.n	800760a <HAL_RCC_OscConfig+0x376>
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	2b05      	cmp	r3, #5
 80075d6:	d10c      	bne.n	80075f2 <HAL_RCC_OscConfig+0x35e>
 80075d8:	4b61      	ldr	r3, [pc, #388]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075dc:	4a60      	ldr	r2, [pc, #384]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075de:	f043 0304 	orr.w	r3, r3, #4
 80075e2:	6713      	str	r3, [r2, #112]	; 0x70
 80075e4:	4b5e      	ldr	r3, [pc, #376]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075e8:	4a5d      	ldr	r2, [pc, #372]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075ea:	f043 0301 	orr.w	r3, r3, #1
 80075ee:	6713      	str	r3, [r2, #112]	; 0x70
 80075f0:	e00b      	b.n	800760a <HAL_RCC_OscConfig+0x376>
 80075f2:	4b5b      	ldr	r3, [pc, #364]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80075f6:	4a5a      	ldr	r2, [pc, #360]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80075f8:	f023 0301 	bic.w	r3, r3, #1
 80075fc:	6713      	str	r3, [r2, #112]	; 0x70
 80075fe:	4b58      	ldr	r3, [pc, #352]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007602:	4a57      	ldr	r2, [pc, #348]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007604:	f023 0304 	bic.w	r3, r3, #4
 8007608:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d015      	beq.n	800763e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007612:	f7fb fd35 	bl	8003080 <HAL_GetTick>
 8007616:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007618:	e00a      	b.n	8007630 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800761a:	f7fb fd31 	bl	8003080 <HAL_GetTick>
 800761e:	4602      	mov	r2, r0
 8007620:	693b      	ldr	r3, [r7, #16]
 8007622:	1ad3      	subs	r3, r2, r3
 8007624:	f241 3288 	movw	r2, #5000	; 0x1388
 8007628:	4293      	cmp	r3, r2
 800762a:	d901      	bls.n	8007630 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800762c:	2303      	movs	r3, #3
 800762e:	e0ce      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007630:	4b4b      	ldr	r3, [pc, #300]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007634:	f003 0302 	and.w	r3, r3, #2
 8007638:	2b00      	cmp	r3, #0
 800763a:	d0ee      	beq.n	800761a <HAL_RCC_OscConfig+0x386>
 800763c:	e014      	b.n	8007668 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800763e:	f7fb fd1f 	bl	8003080 <HAL_GetTick>
 8007642:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007644:	e00a      	b.n	800765c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007646:	f7fb fd1b 	bl	8003080 <HAL_GetTick>
 800764a:	4602      	mov	r2, r0
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	1ad3      	subs	r3, r2, r3
 8007650:	f241 3288 	movw	r2, #5000	; 0x1388
 8007654:	4293      	cmp	r3, r2
 8007656:	d901      	bls.n	800765c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007658:	2303      	movs	r3, #3
 800765a:	e0b8      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800765c:	4b40      	ldr	r3, [pc, #256]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 800765e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007660:	f003 0302 	and.w	r3, r3, #2
 8007664:	2b00      	cmp	r3, #0
 8007666:	d1ee      	bne.n	8007646 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007668:	7dfb      	ldrb	r3, [r7, #23]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d105      	bne.n	800767a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800766e:	4b3c      	ldr	r3, [pc, #240]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	4a3b      	ldr	r2, [pc, #236]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007674:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007678:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	699b      	ldr	r3, [r3, #24]
 800767e:	2b00      	cmp	r3, #0
 8007680:	f000 80a4 	beq.w	80077cc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007684:	4b36      	ldr	r3, [pc, #216]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007686:	689b      	ldr	r3, [r3, #8]
 8007688:	f003 030c 	and.w	r3, r3, #12
 800768c:	2b08      	cmp	r3, #8
 800768e:	d06b      	beq.n	8007768 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	699b      	ldr	r3, [r3, #24]
 8007694:	2b02      	cmp	r3, #2
 8007696:	d149      	bne.n	800772c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007698:	4b31      	ldr	r3, [pc, #196]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	4a30      	ldr	r2, [pc, #192]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 800769e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80076a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80076a4:	f7fb fcec 	bl	8003080 <HAL_GetTick>
 80076a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076aa:	e008      	b.n	80076be <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80076ac:	f7fb fce8 	bl	8003080 <HAL_GetTick>
 80076b0:	4602      	mov	r2, r0
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	1ad3      	subs	r3, r2, r3
 80076b6:	2b02      	cmp	r3, #2
 80076b8:	d901      	bls.n	80076be <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80076ba:	2303      	movs	r3, #3
 80076bc:	e087      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80076be:	4b28      	ldr	r3, [pc, #160]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d1f0      	bne.n	80076ac <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	69da      	ldr	r2, [r3, #28]
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a1b      	ldr	r3, [r3, #32]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076d8:	019b      	lsls	r3, r3, #6
 80076da:	431a      	orrs	r2, r3
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076e0:	085b      	lsrs	r3, r3, #1
 80076e2:	3b01      	subs	r3, #1
 80076e4:	041b      	lsls	r3, r3, #16
 80076e6:	431a      	orrs	r2, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076ec:	061b      	lsls	r3, r3, #24
 80076ee:	4313      	orrs	r3, r2
 80076f0:	4a1b      	ldr	r2, [pc, #108]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80076f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80076f6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80076f8:	4b19      	ldr	r3, [pc, #100]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a18      	ldr	r2, [pc, #96]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 80076fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007702:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007704:	f7fb fcbc 	bl	8003080 <HAL_GetTick>
 8007708:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800770a:	e008      	b.n	800771e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800770c:	f7fb fcb8 	bl	8003080 <HAL_GetTick>
 8007710:	4602      	mov	r2, r0
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	1ad3      	subs	r3, r2, r3
 8007716:	2b02      	cmp	r3, #2
 8007718:	d901      	bls.n	800771e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800771a:	2303      	movs	r3, #3
 800771c:	e057      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800771e:	4b10      	ldr	r3, [pc, #64]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007726:	2b00      	cmp	r3, #0
 8007728:	d0f0      	beq.n	800770c <HAL_RCC_OscConfig+0x478>
 800772a:	e04f      	b.n	80077cc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800772c:	4b0c      	ldr	r3, [pc, #48]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0b      	ldr	r2, [pc, #44]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007732:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007736:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007738:	f7fb fca2 	bl	8003080 <HAL_GetTick>
 800773c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800773e:	e008      	b.n	8007752 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007740:	f7fb fc9e 	bl	8003080 <HAL_GetTick>
 8007744:	4602      	mov	r2, r0
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	1ad3      	subs	r3, r2, r3
 800774a:	2b02      	cmp	r3, #2
 800774c:	d901      	bls.n	8007752 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800774e:	2303      	movs	r3, #3
 8007750:	e03d      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007752:	4b03      	ldr	r3, [pc, #12]	; (8007760 <HAL_RCC_OscConfig+0x4cc>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800775a:	2b00      	cmp	r3, #0
 800775c:	d1f0      	bne.n	8007740 <HAL_RCC_OscConfig+0x4ac>
 800775e:	e035      	b.n	80077cc <HAL_RCC_OscConfig+0x538>
 8007760:	40023800 	.word	0x40023800
 8007764:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007768:	4b1b      	ldr	r3, [pc, #108]	; (80077d8 <HAL_RCC_OscConfig+0x544>)
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	2b01      	cmp	r3, #1
 8007774:	d028      	beq.n	80077c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007780:	429a      	cmp	r2, r3
 8007782:	d121      	bne.n	80077c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800778e:	429a      	cmp	r2, r3
 8007790:	d11a      	bne.n	80077c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007792:	68fa      	ldr	r2, [r7, #12]
 8007794:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007798:	4013      	ands	r3, r2
 800779a:	687a      	ldr	r2, [r7, #4]
 800779c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800779e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80077a0:	4293      	cmp	r3, r2
 80077a2:	d111      	bne.n	80077c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ae:	085b      	lsrs	r3, r3, #1
 80077b0:	3b01      	subs	r3, #1
 80077b2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d107      	bne.n	80077c8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d001      	beq.n	80077cc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	e000      	b.n	80077ce <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}
 80077d6:	bf00      	nop
 80077d8:	40023800 	.word	0x40023800

080077dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b084      	sub	sp, #16
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	6078      	str	r0, [r7, #4]
 80077e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80077e6:	2300      	movs	r3, #0
 80077e8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80077f0:	2301      	movs	r3, #1
 80077f2:	e0d0      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80077f4:	4b6a      	ldr	r3, [pc, #424]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f003 030f 	and.w	r3, r3, #15
 80077fc:	683a      	ldr	r2, [r7, #0]
 80077fe:	429a      	cmp	r2, r3
 8007800:	d910      	bls.n	8007824 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007802:	4b67      	ldr	r3, [pc, #412]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f023 020f 	bic.w	r2, r3, #15
 800780a:	4965      	ldr	r1, [pc, #404]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 800780c:	683b      	ldr	r3, [r7, #0]
 800780e:	4313      	orrs	r3, r2
 8007810:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007812:	4b63      	ldr	r3, [pc, #396]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	f003 030f 	and.w	r3, r3, #15
 800781a:	683a      	ldr	r2, [r7, #0]
 800781c:	429a      	cmp	r2, r3
 800781e:	d001      	beq.n	8007824 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007820:	2301      	movs	r3, #1
 8007822:	e0b8      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d020      	beq.n	8007872 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f003 0304 	and.w	r3, r3, #4
 8007838:	2b00      	cmp	r3, #0
 800783a:	d005      	beq.n	8007848 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800783c:	4b59      	ldr	r3, [pc, #356]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	4a58      	ldr	r2, [pc, #352]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007842:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007846:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0308 	and.w	r3, r3, #8
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007854:	4b53      	ldr	r3, [pc, #332]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	4a52      	ldr	r2, [pc, #328]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 800785a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800785e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007860:	4b50      	ldr	r3, [pc, #320]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	494d      	ldr	r1, [pc, #308]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 800786e:	4313      	orrs	r3, r2
 8007870:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f003 0301 	and.w	r3, r3, #1
 800787a:	2b00      	cmp	r3, #0
 800787c:	d040      	beq.n	8007900 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	2b01      	cmp	r3, #1
 8007884:	d107      	bne.n	8007896 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007886:	4b47      	ldr	r3, [pc, #284]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788e:	2b00      	cmp	r3, #0
 8007890:	d115      	bne.n	80078be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007892:	2301      	movs	r3, #1
 8007894:	e07f      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	2b02      	cmp	r3, #2
 800789c:	d107      	bne.n	80078ae <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800789e:	4b41      	ldr	r3, [pc, #260]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d109      	bne.n	80078be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e073      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078ae:	4b3d      	ldr	r3, [pc, #244]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d101      	bne.n	80078be <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	e06b      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80078be:	4b39      	ldr	r3, [pc, #228]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f023 0203 	bic.w	r2, r3, #3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	4936      	ldr	r1, [pc, #216]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 80078cc:	4313      	orrs	r3, r2
 80078ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80078d0:	f7fb fbd6 	bl	8003080 <HAL_GetTick>
 80078d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078d6:	e00a      	b.n	80078ee <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80078d8:	f7fb fbd2 	bl	8003080 <HAL_GetTick>
 80078dc:	4602      	mov	r2, r0
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d901      	bls.n	80078ee <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80078ea:	2303      	movs	r3, #3
 80078ec:	e053      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80078ee:	4b2d      	ldr	r3, [pc, #180]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 80078f0:	689b      	ldr	r3, [r3, #8]
 80078f2:	f003 020c 	and.w	r2, r3, #12
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	685b      	ldr	r3, [r3, #4]
 80078fa:	009b      	lsls	r3, r3, #2
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d1eb      	bne.n	80078d8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007900:	4b27      	ldr	r3, [pc, #156]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 030f 	and.w	r3, r3, #15
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d210      	bcs.n	8007930 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800790e:	4b24      	ldr	r3, [pc, #144]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f023 020f 	bic.w	r2, r3, #15
 8007916:	4922      	ldr	r1, [pc, #136]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	4313      	orrs	r3, r2
 800791c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800791e:	4b20      	ldr	r3, [pc, #128]	; (80079a0 <HAL_RCC_ClockConfig+0x1c4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f003 030f 	and.w	r3, r3, #15
 8007926:	683a      	ldr	r2, [r7, #0]
 8007928:	429a      	cmp	r2, r3
 800792a:	d001      	beq.n	8007930 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800792c:	2301      	movs	r3, #1
 800792e:	e032      	b.n	8007996 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0304 	and.w	r3, r3, #4
 8007938:	2b00      	cmp	r3, #0
 800793a:	d008      	beq.n	800794e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800793c:	4b19      	ldr	r3, [pc, #100]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	4916      	ldr	r1, [pc, #88]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 800794a:	4313      	orrs	r3, r2
 800794c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0308 	and.w	r3, r3, #8
 8007956:	2b00      	cmp	r3, #0
 8007958:	d009      	beq.n	800796e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800795a:	4b12      	ldr	r3, [pc, #72]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 800795c:	689b      	ldr	r3, [r3, #8]
 800795e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	00db      	lsls	r3, r3, #3
 8007968:	490e      	ldr	r1, [pc, #56]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 800796a:	4313      	orrs	r3, r2
 800796c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800796e:	f000 f821 	bl	80079b4 <HAL_RCC_GetSysClockFreq>
 8007972:	4602      	mov	r2, r0
 8007974:	4b0b      	ldr	r3, [pc, #44]	; (80079a4 <HAL_RCC_ClockConfig+0x1c8>)
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	091b      	lsrs	r3, r3, #4
 800797a:	f003 030f 	and.w	r3, r3, #15
 800797e:	490a      	ldr	r1, [pc, #40]	; (80079a8 <HAL_RCC_ClockConfig+0x1cc>)
 8007980:	5ccb      	ldrb	r3, [r1, r3]
 8007982:	fa22 f303 	lsr.w	r3, r2, r3
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <HAL_RCC_ClockConfig+0x1d0>)
 8007988:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800798a:	4b09      	ldr	r3, [pc, #36]	; (80079b0 <HAL_RCC_ClockConfig+0x1d4>)
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	4618      	mov	r0, r3
 8007990:	f7fb fb32 	bl	8002ff8 <HAL_InitTick>

  return HAL_OK;
 8007994:	2300      	movs	r3, #0
}
 8007996:	4618      	mov	r0, r3
 8007998:	3710      	adds	r7, #16
 800799a:	46bd      	mov	sp, r7
 800799c:	bd80      	pop	{r7, pc}
 800799e:	bf00      	nop
 80079a0:	40023c00 	.word	0x40023c00
 80079a4:	40023800 	.word	0x40023800
 80079a8:	08019584 	.word	0x08019584
 80079ac:	20000000 	.word	0x20000000
 80079b0:	20000004 	.word	0x20000004

080079b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80079b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80079b8:	b094      	sub	sp, #80	; 0x50
 80079ba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80079bc:	2300      	movs	r3, #0
 80079be:	647b      	str	r3, [r7, #68]	; 0x44
 80079c0:	2300      	movs	r3, #0
 80079c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80079c4:	2300      	movs	r3, #0
 80079c6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80079c8:	2300      	movs	r3, #0
 80079ca:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80079cc:	4b79      	ldr	r3, [pc, #484]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80079ce:	689b      	ldr	r3, [r3, #8]
 80079d0:	f003 030c 	and.w	r3, r3, #12
 80079d4:	2b08      	cmp	r3, #8
 80079d6:	d00d      	beq.n	80079f4 <HAL_RCC_GetSysClockFreq+0x40>
 80079d8:	2b08      	cmp	r3, #8
 80079da:	f200 80e1 	bhi.w	8007ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <HAL_RCC_GetSysClockFreq+0x34>
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	d003      	beq.n	80079ee <HAL_RCC_GetSysClockFreq+0x3a>
 80079e6:	e0db      	b.n	8007ba0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80079e8:	4b73      	ldr	r3, [pc, #460]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80079ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079ec:	e0db      	b.n	8007ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80079ee:	4b72      	ldr	r3, [pc, #456]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 80079f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80079f2:	e0d8      	b.n	8007ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80079f4:	4b6f      	ldr	r3, [pc, #444]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 80079f6:	685b      	ldr	r3, [r3, #4]
 80079f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80079fc:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80079fe:	4b6d      	ldr	r3, [pc, #436]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d063      	beq.n	8007ad2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007a0a:	4b6a      	ldr	r3, [pc, #424]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	099b      	lsrs	r3, r3, #6
 8007a10:	2200      	movs	r2, #0
 8007a12:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a14:	63fa      	str	r2, [r7, #60]	; 0x3c
 8007a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007a18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a1c:	633b      	str	r3, [r7, #48]	; 0x30
 8007a1e:	2300      	movs	r3, #0
 8007a20:	637b      	str	r3, [r7, #52]	; 0x34
 8007a22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8007a26:	4622      	mov	r2, r4
 8007a28:	462b      	mov	r3, r5
 8007a2a:	f04f 0000 	mov.w	r0, #0
 8007a2e:	f04f 0100 	mov.w	r1, #0
 8007a32:	0159      	lsls	r1, r3, #5
 8007a34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007a38:	0150      	lsls	r0, r2, #5
 8007a3a:	4602      	mov	r2, r0
 8007a3c:	460b      	mov	r3, r1
 8007a3e:	4621      	mov	r1, r4
 8007a40:	1a51      	subs	r1, r2, r1
 8007a42:	6139      	str	r1, [r7, #16]
 8007a44:	4629      	mov	r1, r5
 8007a46:	eb63 0301 	sbc.w	r3, r3, r1
 8007a4a:	617b      	str	r3, [r7, #20]
 8007a4c:	f04f 0200 	mov.w	r2, #0
 8007a50:	f04f 0300 	mov.w	r3, #0
 8007a54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007a58:	4659      	mov	r1, fp
 8007a5a:	018b      	lsls	r3, r1, #6
 8007a5c:	4651      	mov	r1, sl
 8007a5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8007a62:	4651      	mov	r1, sl
 8007a64:	018a      	lsls	r2, r1, #6
 8007a66:	4651      	mov	r1, sl
 8007a68:	ebb2 0801 	subs.w	r8, r2, r1
 8007a6c:	4659      	mov	r1, fp
 8007a6e:	eb63 0901 	sbc.w	r9, r3, r1
 8007a72:	f04f 0200 	mov.w	r2, #0
 8007a76:	f04f 0300 	mov.w	r3, #0
 8007a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a86:	4690      	mov	r8, r2
 8007a88:	4699      	mov	r9, r3
 8007a8a:	4623      	mov	r3, r4
 8007a8c:	eb18 0303 	adds.w	r3, r8, r3
 8007a90:	60bb      	str	r3, [r7, #8]
 8007a92:	462b      	mov	r3, r5
 8007a94:	eb49 0303 	adc.w	r3, r9, r3
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	f04f 0200 	mov.w	r2, #0
 8007a9e:	f04f 0300 	mov.w	r3, #0
 8007aa2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8007aa6:	4629      	mov	r1, r5
 8007aa8:	028b      	lsls	r3, r1, #10
 8007aaa:	4621      	mov	r1, r4
 8007aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007ab0:	4621      	mov	r1, r4
 8007ab2:	028a      	lsls	r2, r1, #10
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	4619      	mov	r1, r3
 8007ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007aba:	2200      	movs	r2, #0
 8007abc:	62bb      	str	r3, [r7, #40]	; 0x28
 8007abe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007ac4:	f7f9 f890 	bl	8000be8 <__aeabi_uldivmod>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	460b      	mov	r3, r1
 8007acc:	4613      	mov	r3, r2
 8007ace:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ad0:	e058      	b.n	8007b84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ad2:	4b38      	ldr	r3, [pc, #224]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	099b      	lsrs	r3, r3, #6
 8007ad8:	2200      	movs	r2, #0
 8007ada:	4618      	mov	r0, r3
 8007adc:	4611      	mov	r1, r2
 8007ade:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8007ae2:	623b      	str	r3, [r7, #32]
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ae8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007aec:	4642      	mov	r2, r8
 8007aee:	464b      	mov	r3, r9
 8007af0:	f04f 0000 	mov.w	r0, #0
 8007af4:	f04f 0100 	mov.w	r1, #0
 8007af8:	0159      	lsls	r1, r3, #5
 8007afa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007afe:	0150      	lsls	r0, r2, #5
 8007b00:	4602      	mov	r2, r0
 8007b02:	460b      	mov	r3, r1
 8007b04:	4641      	mov	r1, r8
 8007b06:	ebb2 0a01 	subs.w	sl, r2, r1
 8007b0a:	4649      	mov	r1, r9
 8007b0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8007b10:	f04f 0200 	mov.w	r2, #0
 8007b14:	f04f 0300 	mov.w	r3, #0
 8007b18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007b1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007b20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007b24:	ebb2 040a 	subs.w	r4, r2, sl
 8007b28:	eb63 050b 	sbc.w	r5, r3, fp
 8007b2c:	f04f 0200 	mov.w	r2, #0
 8007b30:	f04f 0300 	mov.w	r3, #0
 8007b34:	00eb      	lsls	r3, r5, #3
 8007b36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007b3a:	00e2      	lsls	r2, r4, #3
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	461d      	mov	r5, r3
 8007b40:	4643      	mov	r3, r8
 8007b42:	18e3      	adds	r3, r4, r3
 8007b44:	603b      	str	r3, [r7, #0]
 8007b46:	464b      	mov	r3, r9
 8007b48:	eb45 0303 	adc.w	r3, r5, r3
 8007b4c:	607b      	str	r3, [r7, #4]
 8007b4e:	f04f 0200 	mov.w	r2, #0
 8007b52:	f04f 0300 	mov.w	r3, #0
 8007b56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007b5a:	4629      	mov	r1, r5
 8007b5c:	028b      	lsls	r3, r1, #10
 8007b5e:	4621      	mov	r1, r4
 8007b60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007b64:	4621      	mov	r1, r4
 8007b66:	028a      	lsls	r2, r1, #10
 8007b68:	4610      	mov	r0, r2
 8007b6a:	4619      	mov	r1, r3
 8007b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b6e:	2200      	movs	r2, #0
 8007b70:	61bb      	str	r3, [r7, #24]
 8007b72:	61fa      	str	r2, [r7, #28]
 8007b74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007b78:	f7f9 f836 	bl	8000be8 <__aeabi_uldivmod>
 8007b7c:	4602      	mov	r2, r0
 8007b7e:	460b      	mov	r3, r1
 8007b80:	4613      	mov	r3, r2
 8007b82:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007b84:	4b0b      	ldr	r3, [pc, #44]	; (8007bb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	0c1b      	lsrs	r3, r3, #16
 8007b8a:	f003 0303 	and.w	r3, r3, #3
 8007b8e:	3301      	adds	r3, #1
 8007b90:	005b      	lsls	r3, r3, #1
 8007b92:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8007b94:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007b98:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007b9e:	e002      	b.n	8007ba6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ba0:	4b05      	ldr	r3, [pc, #20]	; (8007bb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8007ba2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007ba4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ba6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007ba8:	4618      	mov	r0, r3
 8007baa:	3750      	adds	r7, #80	; 0x50
 8007bac:	46bd      	mov	sp, r7
 8007bae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007bb2:	bf00      	nop
 8007bb4:	40023800 	.word	0x40023800
 8007bb8:	00f42400 	.word	0x00f42400

08007bbc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007bc0:	4b03      	ldr	r3, [pc, #12]	; (8007bd0 <HAL_RCC_GetHCLKFreq+0x14>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bcc:	4770      	bx	lr
 8007bce:	bf00      	nop
 8007bd0:	20000000 	.word	0x20000000

08007bd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007bd4:	b580      	push	{r7, lr}
 8007bd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007bd8:	f7ff fff0 	bl	8007bbc <HAL_RCC_GetHCLKFreq>
 8007bdc:	4602      	mov	r2, r0
 8007bde:	4b05      	ldr	r3, [pc, #20]	; (8007bf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007be0:	689b      	ldr	r3, [r3, #8]
 8007be2:	0a9b      	lsrs	r3, r3, #10
 8007be4:	f003 0307 	and.w	r3, r3, #7
 8007be8:	4903      	ldr	r1, [pc, #12]	; (8007bf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007bea:	5ccb      	ldrb	r3, [r1, r3]
 8007bec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	bd80      	pop	{r7, pc}
 8007bf4:	40023800 	.word	0x40023800
 8007bf8:	08019594 	.word	0x08019594

08007bfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007c00:	f7ff ffdc 	bl	8007bbc <HAL_RCC_GetHCLKFreq>
 8007c04:	4602      	mov	r2, r0
 8007c06:	4b05      	ldr	r3, [pc, #20]	; (8007c1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007c08:	689b      	ldr	r3, [r3, #8]
 8007c0a:	0b5b      	lsrs	r3, r3, #13
 8007c0c:	f003 0307 	and.w	r3, r3, #7
 8007c10:	4903      	ldr	r1, [pc, #12]	; (8007c20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007c12:	5ccb      	ldrb	r3, [r1, r3]
 8007c14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c18:	4618      	mov	r0, r3
 8007c1a:	bd80      	pop	{r7, pc}
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	08019594 	.word	0x08019594

08007c24 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b088      	sub	sp, #32
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007c30:	2300      	movs	r3, #0
 8007c32:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 0301 	and.w	r3, r3, #1
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d012      	beq.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007c4c:	4b69      	ldr	r3, [pc, #420]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c4e:	689b      	ldr	r3, [r3, #8]
 8007c50:	4a68      	ldr	r2, [pc, #416]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c52:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007c56:	6093      	str	r3, [r2, #8]
 8007c58:	4b66      	ldr	r3, [pc, #408]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c5a:	689a      	ldr	r2, [r3, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c60:	4964      	ldr	r1, [pc, #400]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c62:	4313      	orrs	r3, r2
 8007c64:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d101      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d017      	beq.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007c7e:	4b5d      	ldr	r3, [pc, #372]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007c84:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c8c:	4959      	ldr	r1, [pc, #356]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007c8e:	4313      	orrs	r3, r2
 8007c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c98:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c9c:	d101      	bne.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d101      	bne.n	8007cae <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8007caa:	2301      	movs	r3, #1
 8007cac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d017      	beq.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007cba:	4b4e      	ldr	r3, [pc, #312]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007cc0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	494a      	ldr	r1, [pc, #296]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007cd8:	d101      	bne.n	8007cde <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8007cda:	2301      	movs	r3, #1
 8007cdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d101      	bne.n	8007cea <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8007ce6:	2301      	movs	r3, #1
 8007ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d001      	beq.n	8007cfa <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8007cf6:	2301      	movs	r3, #1
 8007cf8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f003 0320 	and.w	r3, r3, #32
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	f000 808b 	beq.w	8007e1e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007d08:	4b3a      	ldr	r3, [pc, #232]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0c:	4a39      	ldr	r2, [pc, #228]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d12:	6413      	str	r3, [r2, #64]	; 0x40
 8007d14:	4b37      	ldr	r3, [pc, #220]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d1c:	60bb      	str	r3, [r7, #8]
 8007d1e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d20:	4b35      	ldr	r3, [pc, #212]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	4a34      	ldr	r2, [pc, #208]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d2a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d2c:	f7fb f9a8 	bl	8003080 <HAL_GetTick>
 8007d30:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d32:	e008      	b.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d34:	f7fb f9a4 	bl	8003080 <HAL_GetTick>
 8007d38:	4602      	mov	r2, r0
 8007d3a:	697b      	ldr	r3, [r7, #20]
 8007d3c:	1ad3      	subs	r3, r2, r3
 8007d3e:	2b64      	cmp	r3, #100	; 0x64
 8007d40:	d901      	bls.n	8007d46 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e31f      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007d46:	4b2c      	ldr	r3, [pc, #176]	; (8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d0f0      	beq.n	8007d34 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007d52:	4b28      	ldr	r3, [pc, #160]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d5a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d035      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d02e      	beq.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007d70:	4b20      	ldr	r3, [pc, #128]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d78:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007d7a:	4b1e      	ldr	r3, [pc, #120]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d7e:	4a1d      	ldr	r2, [pc, #116]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007d84:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007d86:	4b1b      	ldr	r3, [pc, #108]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d8a:	4a1a      	ldr	r2, [pc, #104]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007d90:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007d92:	4a18      	ldr	r2, [pc, #96]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d94:	693b      	ldr	r3, [r7, #16]
 8007d96:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007d98:	4b16      	ldr	r3, [pc, #88]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9c:	f003 0301 	and.w	r3, r3, #1
 8007da0:	2b01      	cmp	r3, #1
 8007da2:	d114      	bne.n	8007dce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007da4:	f7fb f96c 	bl	8003080 <HAL_GetTick>
 8007da8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007daa:	e00a      	b.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007dac:	f7fb f968 	bl	8003080 <HAL_GetTick>
 8007db0:	4602      	mov	r2, r0
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	1ad3      	subs	r3, r2, r3
 8007db6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dba:	4293      	cmp	r3, r2
 8007dbc:	d901      	bls.n	8007dc2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007dbe:	2303      	movs	r3, #3
 8007dc0:	e2e1      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dc2:	4b0c      	ldr	r3, [pc, #48]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dc6:	f003 0302 	and.w	r3, r3, #2
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d0ee      	beq.n	8007dac <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007dd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007dda:	d111      	bne.n	8007e00 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8007ddc:	4b05      	ldr	r3, [pc, #20]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007de8:	4b04      	ldr	r3, [pc, #16]	; (8007dfc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007dea:	400b      	ands	r3, r1
 8007dec:	4901      	ldr	r1, [pc, #4]	; (8007df4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007dee:	4313      	orrs	r3, r2
 8007df0:	608b      	str	r3, [r1, #8]
 8007df2:	e00b      	b.n	8007e0c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8007df4:	40023800 	.word	0x40023800
 8007df8:	40007000 	.word	0x40007000
 8007dfc:	0ffffcff 	.word	0x0ffffcff
 8007e00:	4ba8      	ldr	r3, [pc, #672]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	4aa7      	ldr	r2, [pc, #668]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e06:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007e0a:	6093      	str	r3, [r2, #8]
 8007e0c:	4ba5      	ldr	r3, [pc, #660]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e0e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007e18:	49a2      	ldr	r1, [pc, #648]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e1a:	4313      	orrs	r3, r2
 8007e1c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 0310 	and.w	r3, r3, #16
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d010      	beq.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007e2a:	4b9e      	ldr	r3, [pc, #632]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007e30:	4a9c      	ldr	r2, [pc, #624]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e36:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8007e3a:	4b9a      	ldr	r3, [pc, #616]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e3c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e44:	4997      	ldr	r1, [pc, #604]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e46:	4313      	orrs	r3, r2
 8007e48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007e58:	4b92      	ldr	r3, [pc, #584]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e5e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e66:	498f      	ldr	r1, [pc, #572]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e68:	4313      	orrs	r3, r2
 8007e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007e7a:	4b8a      	ldr	r3, [pc, #552]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e80:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007e88:	4986      	ldr	r1, [pc, #536]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007e9c:	4b81      	ldr	r3, [pc, #516]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007e9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ea2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007eaa:	497e      	ldr	r1, [pc, #504]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007ebe:	4b79      	ldr	r3, [pc, #484]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007ec0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ec4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ecc:	4975      	ldr	r1, [pc, #468]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007ece:	4313      	orrs	r3, r2
 8007ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007ee0:	4b70      	ldr	r3, [pc, #448]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ee6:	f023 0203 	bic.w	r2, r3, #3
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eee:	496d      	ldr	r1, [pc, #436]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007f02:	4b68      	ldr	r3, [pc, #416]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f08:	f023 020c 	bic.w	r2, r3, #12
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007f10:	4964      	ldr	r1, [pc, #400]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f12:	4313      	orrs	r3, r2
 8007f14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00a      	beq.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007f24:	4b5f      	ldr	r3, [pc, #380]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f2a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007f32:	495c      	ldr	r1, [pc, #368]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f34:	4313      	orrs	r3, r2
 8007f36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d00a      	beq.n	8007f5c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007f46:	4b57      	ldr	r3, [pc, #348]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f4c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f54:	4953      	ldr	r1, [pc, #332]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d00a      	beq.n	8007f7e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007f68:	4b4e      	ldr	r3, [pc, #312]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f6e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f76:	494b      	ldr	r1, [pc, #300]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f78:	4313      	orrs	r3, r2
 8007f7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d00a      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8007f8a:	4b46      	ldr	r3, [pc, #280]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f90:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007f98:	4942      	ldr	r1, [pc, #264]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d00a      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007fac:	4b3d      	ldr	r3, [pc, #244]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fb2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007fba:	493a      	ldr	r1, [pc, #232]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007fbc:	4313      	orrs	r3, r2
 8007fbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d00a      	beq.n	8007fe4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8007fce:	4b35      	ldr	r3, [pc, #212]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007fd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007fd4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007fdc:	4931      	ldr	r1, [pc, #196]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d00a      	beq.n	8008006 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007ff0:	4b2c      	ldr	r3, [pc, #176]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007ff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ff6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007ffe:	4929      	ldr	r1, [pc, #164]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008000:	4313      	orrs	r3, r2
 8008002:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800800e:	2b00      	cmp	r3, #0
 8008010:	d011      	beq.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008012:	4b24      	ldr	r3, [pc, #144]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008018:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008020:	4920      	ldr	r1, [pc, #128]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008022:	4313      	orrs	r3, r2
 8008024:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800802c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008030:	d101      	bne.n	8008036 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008032:	2301      	movs	r3, #1
 8008034:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800803e:	2b00      	cmp	r3, #0
 8008040:	d00a      	beq.n	8008058 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8008042:	4b18      	ldr	r3, [pc, #96]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008044:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008048:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008050:	4914      	ldr	r1, [pc, #80]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008052:	4313      	orrs	r3, r2
 8008054:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008060:	2b00      	cmp	r3, #0
 8008062:	d00b      	beq.n	800807c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8008064:	4b0f      	ldr	r3, [pc, #60]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800806a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008074:	490b      	ldr	r1, [pc, #44]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008076:	4313      	orrs	r3, r2
 8008078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d006      	beq.n	8008090 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800808a:	2b00      	cmp	r3, #0
 800808c:	f000 80d8 	beq.w	8008240 <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008090:	4b04      	ldr	r3, [pc, #16]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	4a03      	ldr	r2, [pc, #12]	; (80080a4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8008096:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800809a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800809c:	f7fa fff0 	bl	8003080 <HAL_GetTick>
 80080a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080a2:	e00a      	b.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x496>
 80080a4:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80080a8:	f7fa ffea 	bl	8003080 <HAL_GetTick>
 80080ac:	4602      	mov	r2, r0
 80080ae:	697b      	ldr	r3, [r7, #20]
 80080b0:	1ad3      	subs	r3, r2, r3
 80080b2:	2b64      	cmp	r3, #100	; 0x64
 80080b4:	d901      	bls.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80080b6:	2303      	movs	r3, #3
 80080b8:	e165      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80080ba:	4ba9      	ldr	r3, [pc, #676]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1f0      	bne.n	80080a8 <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f003 0301 	and.w	r3, r3, #1
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d021      	beq.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d11d      	bne.n	8008116 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80080da:	4ba1      	ldr	r3, [pc, #644]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80080dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080e0:	0c1b      	lsrs	r3, r3, #16
 80080e2:	f003 0303 	and.w	r3, r3, #3
 80080e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80080e8:	4b9d      	ldr	r3, [pc, #628]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80080ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80080ee:	0e1b      	lsrs	r3, r3, #24
 80080f0:	f003 030f 	and.w	r3, r3, #15
 80080f4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	019a      	lsls	r2, r3, #6
 80080fc:	693b      	ldr	r3, [r7, #16]
 80080fe:	041b      	lsls	r3, r3, #16
 8008100:	431a      	orrs	r2, r3
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	061b      	lsls	r3, r3, #24
 8008106:	431a      	orrs	r2, r3
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	689b      	ldr	r3, [r3, #8]
 800810c:	071b      	lsls	r3, r3, #28
 800810e:	4994      	ldr	r1, [pc, #592]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008110:	4313      	orrs	r3, r2
 8008112:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800811e:	2b00      	cmp	r3, #0
 8008120:	d004      	beq.n	800812c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008126:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800812a:	d00a      	beq.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008134:	2b00      	cmp	r3, #0
 8008136:	d02e      	beq.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800813c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008140:	d129      	bne.n	8008196 <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008142:	4b87      	ldr	r3, [pc, #540]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008144:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008148:	0c1b      	lsrs	r3, r3, #16
 800814a:	f003 0303 	and.w	r3, r3, #3
 800814e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008150:	4b83      	ldr	r3, [pc, #524]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008152:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008156:	0f1b      	lsrs	r3, r3, #28
 8008158:	f003 0307 	and.w	r3, r3, #7
 800815c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	019a      	lsls	r2, r3, #6
 8008164:	693b      	ldr	r3, [r7, #16]
 8008166:	041b      	lsls	r3, r3, #16
 8008168:	431a      	orrs	r2, r3
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	68db      	ldr	r3, [r3, #12]
 800816e:	061b      	lsls	r3, r3, #24
 8008170:	431a      	orrs	r2, r3
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	071b      	lsls	r3, r3, #28
 8008176:	497a      	ldr	r1, [pc, #488]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008178:	4313      	orrs	r3, r2
 800817a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800817e:	4b78      	ldr	r3, [pc, #480]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008180:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008184:	f023 021f 	bic.w	r2, r3, #31
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818c:	3b01      	subs	r3, #1
 800818e:	4974      	ldr	r1, [pc, #464]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008190:	4313      	orrs	r3, r2
 8008192:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d01d      	beq.n	80081de <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80081a2:	4b6f      	ldr	r3, [pc, #444]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80081a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081a8:	0e1b      	lsrs	r3, r3, #24
 80081aa:	f003 030f 	and.w	r3, r3, #15
 80081ae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80081b0:	4b6b      	ldr	r3, [pc, #428]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80081b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80081b6:	0f1b      	lsrs	r3, r3, #28
 80081b8:	f003 0307 	and.w	r3, r3, #7
 80081bc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	685b      	ldr	r3, [r3, #4]
 80081c2:	019a      	lsls	r2, r3, #6
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	691b      	ldr	r3, [r3, #16]
 80081c8:	041b      	lsls	r3, r3, #16
 80081ca:	431a      	orrs	r2, r3
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	061b      	lsls	r3, r3, #24
 80081d0:	431a      	orrs	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	071b      	lsls	r3, r3, #28
 80081d6:	4962      	ldr	r1, [pc, #392]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80081d8:	4313      	orrs	r3, r2
 80081da:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80081e6:	2b00      	cmp	r3, #0
 80081e8:	d011      	beq.n	800820e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	685b      	ldr	r3, [r3, #4]
 80081ee:	019a      	lsls	r2, r3, #6
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	691b      	ldr	r3, [r3, #16]
 80081f4:	041b      	lsls	r3, r3, #16
 80081f6:	431a      	orrs	r2, r3
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68db      	ldr	r3, [r3, #12]
 80081fc:	061b      	lsls	r3, r3, #24
 80081fe:	431a      	orrs	r2, r3
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	071b      	lsls	r3, r3, #28
 8008206:	4956      	ldr	r1, [pc, #344]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008208:	4313      	orrs	r3, r2
 800820a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800820e:	4b54      	ldr	r3, [pc, #336]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	4a53      	ldr	r2, [pc, #332]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008214:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008218:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800821a:	f7fa ff31 	bl	8003080 <HAL_GetTick>
 800821e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008220:	e008      	b.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008222:	f7fa ff2d 	bl	8003080 <HAL_GetTick>
 8008226:	4602      	mov	r2, r0
 8008228:	697b      	ldr	r3, [r7, #20]
 800822a:	1ad3      	subs	r3, r2, r3
 800822c:	2b64      	cmp	r3, #100	; 0x64
 800822e:	d901      	bls.n	8008234 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008230:	2303      	movs	r3, #3
 8008232:	e0a8      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008234:	4b4a      	ldr	r3, [pc, #296]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800823c:	2b00      	cmp	r3, #0
 800823e:	d0f0      	beq.n	8008222 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8008240:	69bb      	ldr	r3, [r7, #24]
 8008242:	2b01      	cmp	r3, #1
 8008244:	f040 809e 	bne.w	8008384 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008248:	4b45      	ldr	r3, [pc, #276]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a44      	ldr	r2, [pc, #272]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800824e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008252:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008254:	f7fa ff14 	bl	8003080 <HAL_GetTick>
 8008258:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800825a:	e008      	b.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800825c:	f7fa ff10 	bl	8003080 <HAL_GetTick>
 8008260:	4602      	mov	r2, r0
 8008262:	697b      	ldr	r3, [r7, #20]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b64      	cmp	r3, #100	; 0x64
 8008268:	d901      	bls.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800826a:	2303      	movs	r3, #3
 800826c:	e08b      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800826e:	4b3c      	ldr	r3, [pc, #240]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008276:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800827a:	d0ef      	beq.n	800825c <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008284:	2b00      	cmp	r3, #0
 8008286:	d003      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800828c:	2b00      	cmp	r3, #0
 800828e:	d009      	beq.n	80082a4 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008298:	2b00      	cmp	r3, #0
 800829a:	d02e      	beq.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d12a      	bne.n	80082fa <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80082a4:	4b2e      	ldr	r3, [pc, #184]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80082a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082aa:	0c1b      	lsrs	r3, r3, #16
 80082ac:	f003 0303 	and.w	r3, r3, #3
 80082b0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80082b2:	4b2b      	ldr	r3, [pc, #172]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80082b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b8:	0f1b      	lsrs	r3, r3, #28
 80082ba:	f003 0307 	and.w	r3, r3, #7
 80082be:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	695b      	ldr	r3, [r3, #20]
 80082c4:	019a      	lsls	r2, r3, #6
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	041b      	lsls	r3, r3, #16
 80082ca:	431a      	orrs	r2, r3
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	699b      	ldr	r3, [r3, #24]
 80082d0:	061b      	lsls	r3, r3, #24
 80082d2:	431a      	orrs	r2, r3
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	071b      	lsls	r3, r3, #28
 80082d8:	4921      	ldr	r1, [pc, #132]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80082da:	4313      	orrs	r3, r2
 80082dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80082e0:	4b1f      	ldr	r3, [pc, #124]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80082e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082e6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082ee:	3b01      	subs	r3, #1
 80082f0:	021b      	lsls	r3, r3, #8
 80082f2:	491b      	ldr	r1, [pc, #108]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80082f4:	4313      	orrs	r3, r2
 80082f6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008302:	2b00      	cmp	r3, #0
 8008304:	d022      	beq.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800830a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800830e:	d11d      	bne.n	800834c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008310:	4b13      	ldr	r3, [pc, #76]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008316:	0e1b      	lsrs	r3, r3, #24
 8008318:	f003 030f 	and.w	r3, r3, #15
 800831c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800831e:	4b10      	ldr	r3, [pc, #64]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008320:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008324:	0f1b      	lsrs	r3, r3, #28
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	695b      	ldr	r3, [r3, #20]
 8008330:	019a      	lsls	r2, r3, #6
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6a1b      	ldr	r3, [r3, #32]
 8008336:	041b      	lsls	r3, r3, #16
 8008338:	431a      	orrs	r2, r3
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	061b      	lsls	r3, r3, #24
 800833e:	431a      	orrs	r2, r3
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	071b      	lsls	r3, r3, #28
 8008344:	4906      	ldr	r1, [pc, #24]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008346:	4313      	orrs	r3, r2
 8008348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800834c:	4b04      	ldr	r3, [pc, #16]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	4a03      	ldr	r2, [pc, #12]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8008352:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008356:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008358:	f7fa fe92 	bl	8003080 <HAL_GetTick>
 800835c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800835e:	e00a      	b.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x752>
 8008360:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008364:	f7fa fe8c 	bl	8003080 <HAL_GetTick>
 8008368:	4602      	mov	r2, r0
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	2b64      	cmp	r3, #100	; 0x64
 8008370:	d901      	bls.n	8008376 <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008372:	2303      	movs	r3, #3
 8008374:	e007      	b.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008376:	4b06      	ldr	r3, [pc, #24]	; (8008390 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800837e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008382:	d1ef      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8008384:	2300      	movs	r3, #0
}
 8008386:	4618      	mov	r0, r3
 8008388:	3720      	adds	r7, #32
 800838a:	46bd      	mov	sp, r7
 800838c:	bd80      	pop	{r7, pc}
 800838e:	bf00      	nop
 8008390:	40023800 	.word	0x40023800

08008394 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b082      	sub	sp, #8
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d101      	bne.n	80083a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80083a2:	2301      	movs	r3, #1
 80083a4:	e022      	b.n	80083ec <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d105      	bne.n	80083be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80083b8:	6878      	ldr	r0, [r7, #4]
 80083ba:	f7fa fa6b 	bl	8002894 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	2203      	movs	r2, #3
 80083c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f814 	bl	80083f4 <HAL_SD_InitCard>
 80083cc:	4603      	mov	r3, r0
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d001      	beq.n	80083d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e00a      	b.n	80083ec <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2200      	movs	r2, #0
 80083e0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3708      	adds	r7, #8
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80083f4:	b5b0      	push	{r4, r5, r7, lr}
 80083f6:	b08e      	sub	sp, #56	; 0x38
 80083f8:	af04      	add	r7, sp, #16
 80083fa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80083fc:	2300      	movs	r3, #0
 80083fe:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8008400:	2300      	movs	r3, #0
 8008402:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8008404:	2300      	movs	r3, #0
 8008406:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8008408:	2300      	movs	r3, #0
 800840a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800840c:	2300      	movs	r3, #0
 800840e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8008410:	2376      	movs	r3, #118	; 0x76
 8008412:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681d      	ldr	r5, [r3, #0]
 8008418:	466c      	mov	r4, sp
 800841a:	f107 0314 	add.w	r3, r7, #20
 800841e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008422:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008426:	f107 0308 	add.w	r3, r7, #8
 800842a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800842c:	4628      	mov	r0, r5
 800842e:	f002 fbaf 	bl	800ab90 <SDMMC_Init>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8008438:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800843c:	2b00      	cmp	r3, #0
 800843e:	d001      	beq.n	8008444 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8008440:	2301      	movs	r3, #1
 8008442:	e059      	b.n	80084f8 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	685a      	ldr	r2, [r3, #4]
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008452:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	4618      	mov	r0, r3
 800845a:	f002 fbe3 	bl	800ac24 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685a      	ldr	r2, [r3, #4]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800846c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800846e:	2002      	movs	r0, #2
 8008470:	f7fa fe12 	bl	8003098 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8008474:	6878      	ldr	r0, [r7, #4]
 8008476:	f000 fe67 	bl	8009148 <SD_PowerON>
 800847a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800847c:	6a3b      	ldr	r3, [r7, #32]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00b      	beq.n	800849a <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800848e:	6a3b      	ldr	r3, [r7, #32]
 8008490:	431a      	orrs	r2, r3
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e02e      	b.n	80084f8 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800849a:	6878      	ldr	r0, [r7, #4]
 800849c:	f000 fd86 	bl	8008fac <SD_InitCard>
 80084a0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d00b      	beq.n	80084c0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084b4:	6a3b      	ldr	r3, [r7, #32]
 80084b6:	431a      	orrs	r2, r3
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	e01b      	b.n	80084f8 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80084c8:	4618      	mov	r0, r3
 80084ca:	f002 fc3d 	bl	800ad48 <SDMMC_CmdBlockLength>
 80084ce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80084d0:	6a3b      	ldr	r3, [r7, #32]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00f      	beq.n	80084f6 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	4a09      	ldr	r2, [pc, #36]	; (8008500 <HAL_SD_InitCard+0x10c>)
 80084dc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80084e2:	6a3b      	ldr	r3, [r7, #32]
 80084e4:	431a      	orrs	r2, r3
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2201      	movs	r2, #1
 80084ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80084f2:	2301      	movs	r3, #1
 80084f4:	e000      	b.n	80084f8 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80084f6:	2300      	movs	r3, #0
}
 80084f8:	4618      	mov	r0, r3
 80084fa:	3728      	adds	r7, #40	; 0x28
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bdb0      	pop	{r4, r5, r7, pc}
 8008500:	004005ff 	.word	0x004005ff

08008504 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b092      	sub	sp, #72	; 0x48
 8008508:	af00      	add	r7, sp, #0
 800850a:	60f8      	str	r0, [r7, #12]
 800850c:	60b9      	str	r1, [r7, #8]
 800850e:	607a      	str	r2, [r7, #4]
 8008510:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8008512:	f7fa fdb5 	bl	8003080 <HAL_GetTick>
 8008516:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d107      	bne.n	8008536 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800852a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008532:	2301      	movs	r3, #1
 8008534:	e1bd      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8008536:	68fb      	ldr	r3, [r7, #12]
 8008538:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800853c:	b2db      	uxtb	r3, r3
 800853e:	2b01      	cmp	r3, #1
 8008540:	f040 81b0 	bne.w	80088a4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	2200      	movs	r2, #0
 8008548:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800854a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	441a      	add	r2, r3
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008554:	429a      	cmp	r2, r3
 8008556:	d907      	bls.n	8008568 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800855c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008564:	2301      	movs	r3, #1
 8008566:	e1a4      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008568:	68fb      	ldr	r3, [r7, #12]
 800856a:	2203      	movs	r2, #3
 800856c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	2200      	movs	r2, #0
 8008576:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800857c:	2b01      	cmp	r3, #1
 800857e:	d002      	beq.n	8008586 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8008580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008582:	025b      	lsls	r3, r3, #9
 8008584:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008586:	f04f 33ff 	mov.w	r3, #4294967295
 800858a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	025b      	lsls	r3, r3, #9
 8008590:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8008592:	2390      	movs	r3, #144	; 0x90
 8008594:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8008596:	2302      	movs	r3, #2
 8008598:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800859a:	2300      	movs	r3, #0
 800859c:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800859e:	2301      	movs	r3, #1
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f107 0214 	add.w	r2, r7, #20
 80085aa:	4611      	mov	r1, r2
 80085ac:	4618      	mov	r0, r3
 80085ae:	f002 fb9f 	bl	800acf0 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	2b01      	cmp	r3, #1
 80085b6:	d90a      	bls.n	80085ce <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	2202      	movs	r2, #2
 80085bc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085c4:	4618      	mov	r0, r3
 80085c6:	f002 fc03 	bl	800add0 <SDMMC_CmdReadMultiBlock>
 80085ca:	6478      	str	r0, [r7, #68]	; 0x44
 80085cc:	e009      	b.n	80085e2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	2201      	movs	r2, #1
 80085d2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085da:	4618      	mov	r0, r3
 80085dc:	f002 fbd6 	bl	800ad8c <SDMMC_CmdReadSingleBlock>
 80085e0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80085e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d012      	beq.n	800860e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a7a      	ldr	r2, [pc, #488]	; (80087d8 <HAL_SD_ReadBlocks+0x2d4>)
 80085ee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80085f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80085f6:	431a      	orrs	r2, r3
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	2201      	movs	r2, #1
 8008600:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e151      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800860e:	69bb      	ldr	r3, [r7, #24]
 8008610:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008612:	e061      	b.n	80086d8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800861a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800861e:	2b00      	cmp	r3, #0
 8008620:	d03c      	beq.n	800869c <HAL_SD_ReadBlocks+0x198>
 8008622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008624:	2b00      	cmp	r3, #0
 8008626:	d039      	beq.n	800869c <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8008628:	2300      	movs	r3, #0
 800862a:	643b      	str	r3, [r7, #64]	; 0x40
 800862c:	e033      	b.n	8008696 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4618      	mov	r0, r3
 8008634:	f002 fad8 	bl	800abe8 <SDMMC_ReadFIFO>
 8008638:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800863a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800863c:	b2da      	uxtb	r2, r3
 800863e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008640:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008642:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008644:	3301      	adds	r3, #1
 8008646:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008648:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800864a:	3b01      	subs	r3, #1
 800864c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800864e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008650:	0a1b      	lsrs	r3, r3, #8
 8008652:	b2da      	uxtb	r2, r3
 8008654:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008656:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008658:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800865a:	3301      	adds	r3, #1
 800865c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800865e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008660:	3b01      	subs	r3, #1
 8008662:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008666:	0c1b      	lsrs	r3, r3, #16
 8008668:	b2da      	uxtb	r2, r3
 800866a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800866c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800866e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008670:	3301      	adds	r3, #1
 8008672:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008674:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008676:	3b01      	subs	r3, #1
 8008678:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800867a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800867c:	0e1b      	lsrs	r3, r3, #24
 800867e:	b2da      	uxtb	r2, r3
 8008680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008682:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8008684:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008686:	3301      	adds	r3, #1
 8008688:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800868a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800868c:	3b01      	subs	r3, #1
 800868e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8008690:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008692:	3301      	adds	r3, #1
 8008694:	643b      	str	r3, [r7, #64]	; 0x40
 8008696:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008698:	2b07      	cmp	r3, #7
 800869a:	d9c8      	bls.n	800862e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800869c:	f7fa fcf0 	bl	8003080 <HAL_GetTick>
 80086a0:	4602      	mov	r2, r0
 80086a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086a4:	1ad3      	subs	r3, r2, r3
 80086a6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d902      	bls.n	80086b2 <HAL_SD_ReadBlocks+0x1ae>
 80086ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d112      	bne.n	80086d8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	4a48      	ldr	r2, [pc, #288]	; (80087d8 <HAL_SD_ReadBlocks+0x2d4>)
 80086b8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086be:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	2201      	movs	r2, #1
 80086ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	2200      	movs	r2, #0
 80086d2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80086d4:	2303      	movs	r3, #3
 80086d6:	e0ec      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086de:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d096      	beq.n	8008614 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d022      	beq.n	800873a <HAL_SD_ReadBlocks+0x236>
 80086f4:	683b      	ldr	r3, [r7, #0]
 80086f6:	2b01      	cmp	r3, #1
 80086f8:	d91f      	bls.n	800873a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fe:	2b03      	cmp	r3, #3
 8008700:	d01b      	beq.n	800873a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	4618      	mov	r0, r3
 8008708:	f002 fbc8 	bl	800ae9c <SDMMC_CmdStopTransfer>
 800870c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800870e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008710:	2b00      	cmp	r3, #0
 8008712:	d012      	beq.n	800873a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	4a2f      	ldr	r2, [pc, #188]	; (80087d8 <HAL_SD_ReadBlocks+0x2d4>)
 800871a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008720:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008722:	431a      	orrs	r2, r3
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2201      	movs	r2, #1
 800872c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2200      	movs	r2, #0
 8008734:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	e0bb      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800873a:	68fb      	ldr	r3, [r7, #12]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008740:	f003 0308 	and.w	r3, r3, #8
 8008744:	2b00      	cmp	r3, #0
 8008746:	d012      	beq.n	800876e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	4a22      	ldr	r2, [pc, #136]	; (80087d8 <HAL_SD_ReadBlocks+0x2d4>)
 800874e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008754:	f043 0208 	orr.w	r2, r3, #8
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2200      	movs	r2, #0
 8008768:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800876a:	2301      	movs	r3, #1
 800876c:	e0a1      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d012      	beq.n	80087a2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a15      	ldr	r2, [pc, #84]	; (80087d8 <HAL_SD_ReadBlocks+0x2d4>)
 8008782:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008788:	f043 0202 	orr.w	r2, r3, #2
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	2200      	movs	r2, #0
 800879c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800879e:	2301      	movs	r3, #1
 80087a0:	e087      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087a8:	f003 0320 	and.w	r3, r3, #32
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d064      	beq.n	800887a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4a08      	ldr	r2, [pc, #32]	; (80087d8 <HAL_SD_ReadBlocks+0x2d4>)
 80087b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087bc:	f043 0220 	orr.w	r2, r3, #32
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	2201      	movs	r2, #1
 80087c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	2200      	movs	r2, #0
 80087d0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80087d2:	2301      	movs	r3, #1
 80087d4:	e06d      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
 80087d6:	bf00      	nop
 80087d8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4618      	mov	r0, r3
 80087e2:	f002 fa01 	bl	800abe8 <SDMMC_ReadFIFO>
 80087e6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80087e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087ea:	b2da      	uxtb	r2, r3
 80087ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 80087f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087f2:	3301      	adds	r3, #1
 80087f4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 80087f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087f8:	3b01      	subs	r3, #1
 80087fa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80087fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087fe:	0a1b      	lsrs	r3, r3, #8
 8008800:	b2da      	uxtb	r2, r3
 8008802:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008804:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008808:	3301      	adds	r3, #1
 800880a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800880c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800880e:	3b01      	subs	r3, #1
 8008810:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8008812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008814:	0c1b      	lsrs	r3, r3, #16
 8008816:	b2da      	uxtb	r2, r3
 8008818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800881c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800881e:	3301      	adds	r3, #1
 8008820:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008822:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008824:	3b01      	subs	r3, #1
 8008826:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8008828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800882a:	0e1b      	lsrs	r3, r3, #24
 800882c:	b2da      	uxtb	r2, r3
 800882e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008830:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8008832:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008834:	3301      	adds	r3, #1
 8008836:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8008838:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800883a:	3b01      	subs	r3, #1
 800883c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800883e:	f7fa fc1f 	bl	8003080 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800884a:	429a      	cmp	r2, r3
 800884c:	d902      	bls.n	8008854 <HAL_SD_ReadBlocks+0x350>
 800884e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008850:	2b00      	cmp	r3, #0
 8008852:	d112      	bne.n	800887a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a18      	ldr	r2, [pc, #96]	; (80088bc <HAL_SD_ReadBlocks+0x3b8>)
 800885a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008860:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8008868:	68fb      	ldr	r3, [r7, #12]
 800886a:	2201      	movs	r2, #1
 800886c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	2200      	movs	r2, #0
 8008874:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e01b      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008880:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008884:	2b00      	cmp	r3, #0
 8008886:	d002      	beq.n	800888e <HAL_SD_ReadBlocks+0x38a>
 8008888:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800888a:	2b00      	cmp	r3, #0
 800888c:	d1a6      	bne.n	80087dc <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	f240 523a 	movw	r2, #1338	; 0x53a
 8008896:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	2201      	movs	r2, #1
 800889c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80088a0:	2300      	movs	r3, #0
 80088a2:	e006      	b.n	80088b2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088a8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088ac:	68fb      	ldr	r3, [r7, #12]
 80088ae:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088b0:	2301      	movs	r3, #1
  }
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3748      	adds	r7, #72	; 0x48
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	004005ff 	.word	0x004005ff

080088c0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b092      	sub	sp, #72	; 0x48
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	60f8      	str	r0, [r7, #12]
 80088c8:	60b9      	str	r1, [r7, #8]
 80088ca:	607a      	str	r2, [r7, #4]
 80088cc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80088ce:	f7fa fbd7 	bl	8003080 <HAL_GetTick>
 80088d2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80088d8:	68bb      	ldr	r3, [r7, #8]
 80088da:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d107      	bne.n	80088f2 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80088ee:	2301      	movs	r3, #1
 80088f0:	e165      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	2b01      	cmp	r3, #1
 80088fc:	f040 8158 	bne.w	8008bb0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8008906:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008908:	683b      	ldr	r3, [r7, #0]
 800890a:	441a      	add	r2, r3
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008910:	429a      	cmp	r2, r3
 8008912:	d907      	bls.n	8008924 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008918:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8008920:	2301      	movs	r3, #1
 8008922:	e14c      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2203      	movs	r2, #3
 8008928:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	2200      	movs	r2, #0
 8008932:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008938:	2b01      	cmp	r3, #1
 800893a:	d002      	beq.n	8008942 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800893c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800893e:	025b      	lsls	r3, r3, #9
 8008940:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8008942:	f04f 33ff 	mov.w	r3, #4294967295
 8008946:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8008948:	683b      	ldr	r3, [r7, #0]
 800894a:	025b      	lsls	r3, r3, #9
 800894c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800894e:	2390      	movs	r3, #144	; 0x90
 8008950:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8008952:	2300      	movs	r3, #0
 8008954:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8008956:	2300      	movs	r3, #0
 8008958:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800895a:	2301      	movs	r3, #1
 800895c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	f107 0218 	add.w	r2, r7, #24
 8008966:	4611      	mov	r1, r2
 8008968:	4618      	mov	r0, r3
 800896a:	f002 f9c1 	bl	800acf0 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	2b01      	cmp	r3, #1
 8008972:	d90a      	bls.n	800898a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	2220      	movs	r2, #32
 8008978:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008980:	4618      	mov	r0, r3
 8008982:	f002 fa69 	bl	800ae58 <SDMMC_CmdWriteMultiBlock>
 8008986:	6478      	str	r0, [r7, #68]	; 0x44
 8008988:	e009      	b.n	800899e <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2210      	movs	r2, #16
 800898e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008996:	4618      	mov	r0, r3
 8008998:	f002 fa3c 	bl	800ae14 <SDMMC_CmdWriteSingleBlock>
 800899c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800899e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d012      	beq.n	80089ca <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a87      	ldr	r2, [pc, #540]	; (8008bc8 <HAL_SD_WriteBlocks+0x308>)
 80089aa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80089b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089b2:	431a      	orrs	r2, r3
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2201      	movs	r2, #1
 80089bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	2200      	movs	r2, #0
 80089c4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80089c6:	2301      	movs	r3, #1
 80089c8:	e0f9      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80089ca:	69fb      	ldr	r3, [r7, #28]
 80089cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80089ce:	e065      	b.n	8008a9c <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d040      	beq.n	8008a60 <HAL_SD_WriteBlocks+0x1a0>
 80089de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089e0:	2b00      	cmp	r3, #0
 80089e2:	d03d      	beq.n	8008a60 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80089e4:	2300      	movs	r3, #0
 80089e6:	643b      	str	r3, [r7, #64]	; 0x40
 80089e8:	e037      	b.n	8008a5a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80089ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	617b      	str	r3, [r7, #20]
          tempbuff++;
 80089f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089f2:	3301      	adds	r3, #1
 80089f4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80089f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089f8:	3b01      	subs	r3, #1
 80089fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 80089fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80089fe:	781b      	ldrb	r3, [r3, #0]
 8008a00:	021a      	lsls	r2, r3, #8
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	4313      	orrs	r3, r2
 8008a06:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a0a:	3301      	adds	r3, #1
 8008a0c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a0e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a10:	3b01      	subs	r3, #1
 8008a12:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8008a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a16:	781b      	ldrb	r3, [r3, #0]
 8008a18:	041a      	lsls	r2, r3, #16
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a22:	3301      	adds	r3, #1
 8008a24:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8008a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a2e:	781b      	ldrb	r3, [r3, #0]
 8008a30:	061a      	lsls	r2, r3, #24
 8008a32:	697b      	ldr	r3, [r7, #20]
 8008a34:	4313      	orrs	r3, r2
 8008a36:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8008a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a3a:	3301      	adds	r3, #1
 8008a3c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8008a3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008a40:	3b01      	subs	r3, #1
 8008a42:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f107 0214 	add.w	r2, r7, #20
 8008a4c:	4611      	mov	r1, r2
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f002 f8d7 	bl	800ac02 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8008a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a56:	3301      	adds	r3, #1
 8008a58:	643b      	str	r3, [r7, #64]	; 0x40
 8008a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a5c:	2b07      	cmp	r3, #7
 8008a5e:	d9c4      	bls.n	80089ea <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8008a60:	f7fa fb0e 	bl	8003080 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008a6c:	429a      	cmp	r2, r3
 8008a6e:	d902      	bls.n	8008a76 <HAL_SD_WriteBlocks+0x1b6>
 8008a70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d112      	bne.n	8008a9c <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	4a53      	ldr	r2, [pc, #332]	; (8008bc8 <HAL_SD_WriteBlocks+0x308>)
 8008a7c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008a82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008a84:	431a      	orrs	r2, r3
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	2200      	movs	r2, #0
 8008a96:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e090      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008aa2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d092      	beq.n	80089d0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008ab0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	d022      	beq.n	8008afe <HAL_SD_WriteBlocks+0x23e>
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	2b01      	cmp	r3, #1
 8008abc:	d91f      	bls.n	8008afe <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d01b      	beq.n	8008afe <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	4618      	mov	r0, r3
 8008acc:	f002 f9e6 	bl	800ae9c <SDMMC_CmdStopTransfer>
 8008ad0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8008ad2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d012      	beq.n	8008afe <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a3a      	ldr	r2, [pc, #232]	; (8008bc8 <HAL_SD_WriteBlocks+0x308>)
 8008ade:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8008ae0:	68fb      	ldr	r3, [r7, #12]
 8008ae2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008ae4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	2201      	movs	r2, #1
 8008af0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2200      	movs	r2, #0
 8008af8:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e05f      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b04:	f003 0308 	and.w	r3, r3, #8
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d012      	beq.n	8008b32 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a2d      	ldr	r2, [pc, #180]	; (8008bc8 <HAL_SD_WriteBlocks+0x308>)
 8008b12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b18:	f043 0208 	orr.w	r2, r3, #8
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	e045      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b38:	f003 0302 	and.w	r3, r3, #2
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d012      	beq.n	8008b66 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	4a20      	ldr	r2, [pc, #128]	; (8008bc8 <HAL_SD_WriteBlocks+0x308>)
 8008b46:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4c:	f043 0202 	orr.w	r2, r3, #2
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2201      	movs	r2, #1
 8008b58:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b62:	2301      	movs	r3, #1
 8008b64:	e02b      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b6c:	f003 0310 	and.w	r3, r3, #16
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d012      	beq.n	8008b9a <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a13      	ldr	r2, [pc, #76]	; (8008bc8 <HAL_SD_WriteBlocks+0x308>)
 8008b7a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	f043 0210 	orr.w	r2, r3, #16
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	2200      	movs	r2, #0
 8008b94:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e011      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f240 523a 	movw	r2, #1338	; 0x53a
 8008ba2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2201      	movs	r2, #1
 8008ba8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8008bac:	2300      	movs	r3, #0
 8008bae:	e006      	b.n	8008bbe <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8008bbc:	2301      	movs	r3, #1
  }
}
 8008bbe:	4618      	mov	r0, r3
 8008bc0:	3748      	adds	r7, #72	; 0x48
 8008bc2:	46bd      	mov	sp, r7
 8008bc4:	bd80      	pop	{r7, pc}
 8008bc6:	bf00      	nop
 8008bc8:	004005ff 	.word	0x004005ff

08008bcc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8008bcc:	b480      	push	{r7}
 8008bce:	b083      	sub	sp, #12
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
 8008bd4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bda:	0f9b      	lsrs	r3, r3, #30
 8008bdc:	b2da      	uxtb	r2, r3
 8008bde:	683b      	ldr	r3, [r7, #0]
 8008be0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008be6:	0e9b      	lsrs	r3, r3, #26
 8008be8:	b2db      	uxtb	r3, r3
 8008bea:	f003 030f 	and.w	r3, r3, #15
 8008bee:	b2da      	uxtb	r2, r3
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008bf8:	0e1b      	lsrs	r3, r3, #24
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	f003 0303 	and.w	r3, r3, #3
 8008c00:	b2da      	uxtb	r2, r3
 8008c02:	683b      	ldr	r3, [r7, #0]
 8008c04:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c0a:	0c1b      	lsrs	r3, r3, #16
 8008c0c:	b2da      	uxtb	r2, r3
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c16:	0a1b      	lsrs	r3, r3, #8
 8008c18:	b2da      	uxtb	r2, r3
 8008c1a:	683b      	ldr	r3, [r7, #0]
 8008c1c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008c22:	b2da      	uxtb	r2, r3
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c2c:	0d1b      	lsrs	r3, r3, #20
 8008c2e:	b29a      	uxth	r2, r3
 8008c30:	683b      	ldr	r3, [r7, #0]
 8008c32:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c38:	0c1b      	lsrs	r3, r3, #16
 8008c3a:	b2db      	uxtb	r3, r3
 8008c3c:	f003 030f 	and.w	r3, r3, #15
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c4a:	0bdb      	lsrs	r3, r3, #15
 8008c4c:	b2db      	uxtb	r3, r3
 8008c4e:	f003 0301 	and.w	r3, r3, #1
 8008c52:	b2da      	uxtb	r2, r3
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c5c:	0b9b      	lsrs	r3, r3, #14
 8008c5e:	b2db      	uxtb	r3, r3
 8008c60:	f003 0301 	and.w	r3, r3, #1
 8008c64:	b2da      	uxtb	r2, r3
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c6e:	0b5b      	lsrs	r3, r3, #13
 8008c70:	b2db      	uxtb	r3, r3
 8008c72:	f003 0301 	and.w	r3, r3, #1
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008c80:	0b1b      	lsrs	r3, r3, #12
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	f003 0301 	and.w	r3, r3, #1
 8008c88:	b2da      	uxtb	r2, r3
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	2200      	movs	r2, #0
 8008c92:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d163      	bne.n	8008d64 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008ca0:	009a      	lsls	r2, r3, #2
 8008ca2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008ca6:	4013      	ands	r3, r2
 8008ca8:	687a      	ldr	r2, [r7, #4]
 8008caa:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008cac:	0f92      	lsrs	r2, r2, #30
 8008cae:	431a      	orrs	r2, r3
 8008cb0:	683b      	ldr	r3, [r7, #0]
 8008cb2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cb8:	0edb      	lsrs	r3, r3, #27
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	f003 0307 	and.w	r3, r3, #7
 8008cc0:	b2da      	uxtb	r2, r3
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cca:	0e1b      	lsrs	r3, r3, #24
 8008ccc:	b2db      	uxtb	r3, r3
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	b2da      	uxtb	r2, r3
 8008cd4:	683b      	ldr	r3, [r7, #0]
 8008cd6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cdc:	0d5b      	lsrs	r3, r3, #21
 8008cde:	b2db      	uxtb	r3, r3
 8008ce0:	f003 0307 	and.w	r3, r3, #7
 8008ce4:	b2da      	uxtb	r2, r3
 8008ce6:	683b      	ldr	r3, [r7, #0]
 8008ce8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008cee:	0c9b      	lsrs	r3, r3, #18
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	f003 0307 	and.w	r3, r3, #7
 8008cf6:	b2da      	uxtb	r2, r3
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d00:	0bdb      	lsrs	r3, r3, #15
 8008d02:	b2db      	uxtb	r3, r3
 8008d04:	f003 0307 	and.w	r3, r3, #7
 8008d08:	b2da      	uxtb	r2, r3
 8008d0a:	683b      	ldr	r3, [r7, #0]
 8008d0c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	1c5a      	adds	r2, r3, #1
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	7e1b      	ldrb	r3, [r3, #24]
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	f003 0307 	and.w	r3, r3, #7
 8008d22:	3302      	adds	r3, #2
 8008d24:	2201      	movs	r2, #1
 8008d26:	fa02 f303 	lsl.w	r3, r2, r3
 8008d2a:	687a      	ldr	r2, [r7, #4]
 8008d2c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008d2e:	fb03 f202 	mul.w	r2, r3, r2
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8008d36:	683b      	ldr	r3, [r7, #0]
 8008d38:	7a1b      	ldrb	r3, [r3, #8]
 8008d3a:	b2db      	uxtb	r3, r3
 8008d3c:	f003 030f 	and.w	r3, r3, #15
 8008d40:	2201      	movs	r2, #1
 8008d42:	409a      	lsls	r2, r3
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008d50:	0a52      	lsrs	r2, r2, #9
 8008d52:	fb03 f202 	mul.w	r2, r3, r2
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d60:	661a      	str	r2, [r3, #96]	; 0x60
 8008d62:	e031      	b.n	8008dc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d11d      	bne.n	8008da8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008d70:	041b      	lsls	r3, r3, #16
 8008d72:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d7a:	0c1b      	lsrs	r3, r3, #16
 8008d7c:	431a      	orrs	r2, r3
 8008d7e:	683b      	ldr	r3, [r7, #0]
 8008d80:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008d82:	683b      	ldr	r3, [r7, #0]
 8008d84:	691b      	ldr	r3, [r3, #16]
 8008d86:	3301      	adds	r3, #1
 8008d88:	029a      	lsls	r2, r3, #10
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008d9c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	661a      	str	r2, [r3, #96]	; 0x60
 8008da6:	e00f      	b.n	8008dc8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	4a58      	ldr	r2, [pc, #352]	; (8008f10 <HAL_SD_GetCardCSD+0x344>)
 8008dae:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008db4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008dc4:	2301      	movs	r3, #1
 8008dc6:	e09d      	b.n	8008f04 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dcc:	0b9b      	lsrs	r3, r3, #14
 8008dce:	b2db      	uxtb	r3, r3
 8008dd0:	f003 0301 	and.w	r3, r3, #1
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	683b      	ldr	r3, [r7, #0]
 8008dd8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008dde:	09db      	lsrs	r3, r3, #7
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008de6:	b2da      	uxtb	r2, r3
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008df0:	b2db      	uxtb	r3, r3
 8008df2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008df6:	b2da      	uxtb	r2, r3
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e00:	0fdb      	lsrs	r3, r3, #31
 8008e02:	b2da      	uxtb	r2, r3
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0c:	0f5b      	lsrs	r3, r3, #29
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 0303 	and.w	r3, r3, #3
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e1e:	0e9b      	lsrs	r3, r3, #26
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	f003 0307 	and.w	r3, r3, #7
 8008e26:	b2da      	uxtb	r2, r3
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e30:	0d9b      	lsrs	r3, r3, #22
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	f003 030f 	and.w	r3, r3, #15
 8008e38:	b2da      	uxtb	r2, r3
 8008e3a:	683b      	ldr	r3, [r7, #0]
 8008e3c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e42:	0d5b      	lsrs	r3, r3, #21
 8008e44:	b2db      	uxtb	r3, r3
 8008e46:	f003 0301 	and.w	r3, r3, #1
 8008e4a:	b2da      	uxtb	r2, r3
 8008e4c:	683b      	ldr	r3, [r7, #0]
 8008e4e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	2200      	movs	r2, #0
 8008e56:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5e:	0c1b      	lsrs	r3, r3, #16
 8008e60:	b2db      	uxtb	r3, r3
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	b2da      	uxtb	r2, r3
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e72:	0bdb      	lsrs	r3, r3, #15
 8008e74:	b2db      	uxtb	r3, r3
 8008e76:	f003 0301 	and.w	r3, r3, #1
 8008e7a:	b2da      	uxtb	r2, r3
 8008e7c:	683b      	ldr	r3, [r7, #0]
 8008e7e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e86:	0b9b      	lsrs	r3, r3, #14
 8008e88:	b2db      	uxtb	r3, r3
 8008e8a:	f003 0301 	and.w	r3, r3, #1
 8008e8e:	b2da      	uxtb	r2, r3
 8008e90:	683b      	ldr	r3, [r7, #0]
 8008e92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e9a:	0b5b      	lsrs	r3, r3, #13
 8008e9c:	b2db      	uxtb	r3, r3
 8008e9e:	f003 0301 	and.w	r3, r3, #1
 8008ea2:	b2da      	uxtb	r2, r3
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eae:	0b1b      	lsrs	r3, r3, #12
 8008eb0:	b2db      	uxtb	r3, r3
 8008eb2:	f003 0301 	and.w	r3, r3, #1
 8008eb6:	b2da      	uxtb	r2, r3
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec2:	0a9b      	lsrs	r3, r3, #10
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f003 0303 	and.w	r3, r3, #3
 8008eca:	b2da      	uxtb	r2, r3
 8008ecc:	683b      	ldr	r3, [r7, #0]
 8008ece:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed6:	0a1b      	lsrs	r3, r3, #8
 8008ed8:	b2db      	uxtb	r3, r3
 8008eda:	f003 0303 	and.w	r3, r3, #3
 8008ede:	b2da      	uxtb	r2, r3
 8008ee0:	683b      	ldr	r3, [r7, #0]
 8008ee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eea:	085b      	lsrs	r3, r3, #1
 8008eec:	b2db      	uxtb	r3, r3
 8008eee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ef2:	b2da      	uxtb	r2, r3
 8008ef4:	683b      	ldr	r3, [r7, #0]
 8008ef6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	2201      	movs	r2, #1
 8008efe:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8008f02:	2300      	movs	r3, #0
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr
 8008f10:	004005ff 	.word	0x004005ff

08008f14 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8008f14:	b480      	push	{r7}
 8008f16:	b083      	sub	sp, #12
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
 8008f1c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008f22:	683b      	ldr	r3, [r7, #0]
 8008f24:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008f42:	683b      	ldr	r3, [r7, #0]
 8008f44:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008f4a:	683b      	ldr	r3, [r7, #0]
 8008f4c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008f52:	683b      	ldr	r3, [r7, #0]
 8008f54:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8008f5a:	683b      	ldr	r3, [r7, #0]
 8008f5c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008f5e:	2300      	movs	r3, #0
}
 8008f60:	4618      	mov	r0, r3
 8008f62:	370c      	adds	r7, #12
 8008f64:	46bd      	mov	sp, r7
 8008f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6a:	4770      	bx	lr

08008f6c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b086      	sub	sp, #24
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008f74:	2300      	movs	r3, #0
 8008f76:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8008f78:	f107 030c 	add.w	r3, r7, #12
 8008f7c:	4619      	mov	r1, r3
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f000 f970 	bl	8009264 <SD_SendStatus>
 8008f84:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008f86:	697b      	ldr	r3, [r7, #20]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d005      	beq.n	8008f98 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	431a      	orrs	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	0a5b      	lsrs	r3, r3, #9
 8008f9c:	f003 030f 	and.w	r3, r3, #15
 8008fa0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008fa2:	693b      	ldr	r3, [r7, #16]
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3718      	adds	r7, #24
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	bd80      	pop	{r7, pc}

08008fac <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008fac:	b5b0      	push	{r4, r5, r7, lr}
 8008fae:	b094      	sub	sp, #80	; 0x50
 8008fb0:	af04      	add	r7, sp, #16
 8008fb2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f001 fe3f 	bl	800ac40 <SDMMC_GetPowerState>
 8008fc2:	4603      	mov	r3, r0
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d102      	bne.n	8008fce <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008fc8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008fcc:	e0b8      	b.n	8009140 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008fd2:	2b03      	cmp	r3, #3
 8008fd4:	d02f      	beq.n	8009036 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	4618      	mov	r0, r3
 8008fdc:	f002 f826 	bl	800b02c <SDMMC_CmdSendCID>
 8008fe0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008fe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d001      	beq.n	8008fec <SD_InitCard+0x40>
    {
      return errorstate;
 8008fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fea:	e0a9      	b.n	8009140 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	2100      	movs	r1, #0
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	f001 fe69 	bl	800acca <SDMMC_GetResponse>
 8008ff8:	4602      	mov	r2, r0
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	2104      	movs	r1, #4
 8009004:	4618      	mov	r0, r3
 8009006:	f001 fe60 	bl	800acca <SDMMC_GetResponse>
 800900a:	4602      	mov	r2, r0
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2108      	movs	r1, #8
 8009016:	4618      	mov	r0, r3
 8009018:	f001 fe57 	bl	800acca <SDMMC_GetResponse>
 800901c:	4602      	mov	r2, r0
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	210c      	movs	r1, #12
 8009028:	4618      	mov	r0, r3
 800902a:	f001 fe4e 	bl	800acca <SDMMC_GetResponse>
 800902e:	4602      	mov	r2, r0
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800903a:	2b03      	cmp	r3, #3
 800903c:	d00d      	beq.n	800905a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f107 020e 	add.w	r2, r7, #14
 8009046:	4611      	mov	r1, r2
 8009048:	4618      	mov	r0, r3
 800904a:	f002 f82c 	bl	800b0a6 <SDMMC_CmdSetRelAdd>
 800904e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8009050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009052:	2b00      	cmp	r3, #0
 8009054:	d001      	beq.n	800905a <SD_InitCard+0xae>
    {
      return errorstate;
 8009056:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009058:	e072      	b.n	8009140 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800905e:	2b03      	cmp	r3, #3
 8009060:	d036      	beq.n	80090d0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8009062:	89fb      	ldrh	r3, [r7, #14]
 8009064:	461a      	mov	r2, r3
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	681a      	ldr	r2, [r3, #0]
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009072:	041b      	lsls	r3, r3, #16
 8009074:	4619      	mov	r1, r3
 8009076:	4610      	mov	r0, r2
 8009078:	f001 fff6 	bl	800b068 <SDMMC_CmdSendCSD>
 800907c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800907e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009080:	2b00      	cmp	r3, #0
 8009082:	d001      	beq.n	8009088 <SD_InitCard+0xdc>
    {
      return errorstate;
 8009084:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009086:	e05b      	b.n	8009140 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	2100      	movs	r1, #0
 800908e:	4618      	mov	r0, r3
 8009090:	f001 fe1b 	bl	800acca <SDMMC_GetResponse>
 8009094:	4602      	mov	r2, r0
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	2104      	movs	r1, #4
 80090a0:	4618      	mov	r0, r3
 80090a2:	f001 fe12 	bl	800acca <SDMMC_GetResponse>
 80090a6:	4602      	mov	r2, r0
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	2108      	movs	r1, #8
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 fe09 	bl	800acca <SDMMC_GetResponse>
 80090b8:	4602      	mov	r2, r0
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	210c      	movs	r1, #12
 80090c4:	4618      	mov	r0, r3
 80090c6:	f001 fe00 	bl	800acca <SDMMC_GetResponse>
 80090ca:	4602      	mov	r2, r0
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	2104      	movs	r1, #4
 80090d6:	4618      	mov	r0, r3
 80090d8:	f001 fdf7 	bl	800acca <SDMMC_GetResponse>
 80090dc:	4603      	mov	r3, r0
 80090de:	0d1a      	lsrs	r2, r3, #20
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80090e4:	f107 0310 	add.w	r3, r7, #16
 80090e8:	4619      	mov	r1, r3
 80090ea:	6878      	ldr	r0, [r7, #4]
 80090ec:	f7ff fd6e 	bl	8008bcc <HAL_SD_GetCardCSD>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d002      	beq.n	80090fc <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80090f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80090fa:	e021      	b.n	8009140 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	6819      	ldr	r1, [r3, #0]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009104:	041b      	lsls	r3, r3, #16
 8009106:	2200      	movs	r2, #0
 8009108:	461c      	mov	r4, r3
 800910a:	4615      	mov	r5, r2
 800910c:	4622      	mov	r2, r4
 800910e:	462b      	mov	r3, r5
 8009110:	4608      	mov	r0, r1
 8009112:	f001 fee5 	bl	800aee0 <SDMMC_CmdSelDesel>
 8009116:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8009118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800911a:	2b00      	cmp	r3, #0
 800911c:	d001      	beq.n	8009122 <SD_InitCard+0x176>
  {
    return errorstate;
 800911e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009120:	e00e      	b.n	8009140 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	681d      	ldr	r5, [r3, #0]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	466c      	mov	r4, sp
 800912a:	f103 0210 	add.w	r2, r3, #16
 800912e:	ca07      	ldmia	r2, {r0, r1, r2}
 8009130:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8009134:	3304      	adds	r3, #4
 8009136:	cb0e      	ldmia	r3, {r1, r2, r3}
 8009138:	4628      	mov	r0, r5
 800913a:	f001 fd29 	bl	800ab90 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3740      	adds	r7, #64	; 0x40
 8009144:	46bd      	mov	sp, r7
 8009146:	bdb0      	pop	{r4, r5, r7, pc}

08009148 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b086      	sub	sp, #24
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009150:	2300      	movs	r3, #0
 8009152:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
 8009158:	2300      	movs	r3, #0
 800915a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	4618      	mov	r0, r3
 8009162:	f001 fee0 	bl	800af26 <SDMMC_CmdGoIdleState>
 8009166:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	2b00      	cmp	r3, #0
 800916c:	d001      	beq.n	8009172 <SD_PowerON+0x2a>
  {
    return errorstate;
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	e072      	b.n	8009258 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4618      	mov	r0, r3
 8009178:	f001 fef3 	bl	800af62 <SDMMC_CmdOperCond>
 800917c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d00d      	beq.n	80091a0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	2200      	movs	r2, #0
 8009188:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	4618      	mov	r0, r3
 8009190:	f001 fec9 	bl	800af26 <SDMMC_CmdGoIdleState>
 8009194:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	2b00      	cmp	r3, #0
 800919a:	d004      	beq.n	80091a6 <SD_PowerON+0x5e>
    {
      return errorstate;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	e05b      	b.n	8009258 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2201      	movs	r2, #1
 80091a4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d137      	bne.n	800921e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2100      	movs	r1, #0
 80091b4:	4618      	mov	r0, r3
 80091b6:	f001 fef3 	bl	800afa0 <SDMMC_CmdAppCommand>
 80091ba:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d02d      	beq.n	800921e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091c6:	e047      	b.n	8009258 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2100      	movs	r1, #0
 80091ce:	4618      	mov	r0, r3
 80091d0:	f001 fee6 	bl	800afa0 <SDMMC_CmdAppCommand>
 80091d4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2b00      	cmp	r3, #0
 80091da:	d001      	beq.n	80091e0 <SD_PowerON+0x98>
    {
      return errorstate;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	e03b      	b.n	8009258 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	491e      	ldr	r1, [pc, #120]	; (8009260 <SD_PowerON+0x118>)
 80091e6:	4618      	mov	r0, r3
 80091e8:	f001 fefc 	bl	800afe4 <SDMMC_CmdAppOperCommand>
 80091ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d002      	beq.n	80091fa <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80091f4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80091f8:	e02e      	b.n	8009258 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	2100      	movs	r1, #0
 8009200:	4618      	mov	r0, r3
 8009202:	f001 fd62 	bl	800acca <SDMMC_GetResponse>
 8009206:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	0fdb      	lsrs	r3, r3, #31
 800920c:	2b01      	cmp	r3, #1
 800920e:	d101      	bne.n	8009214 <SD_PowerON+0xcc>
 8009210:	2301      	movs	r3, #1
 8009212:	e000      	b.n	8009216 <SD_PowerON+0xce>
 8009214:	2300      	movs	r3, #0
 8009216:	613b      	str	r3, [r7, #16]

    count++;
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	3301      	adds	r3, #1
 800921c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009224:	4293      	cmp	r3, r2
 8009226:	d802      	bhi.n	800922e <SD_PowerON+0xe6>
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	2b00      	cmp	r3, #0
 800922c:	d0cc      	beq.n	80091c8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8009234:	4293      	cmp	r3, r2
 8009236:	d902      	bls.n	800923e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8009238:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800923c:	e00c      	b.n	8009258 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800923e:	697b      	ldr	r3, [r7, #20]
 8009240:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8009244:	2b00      	cmp	r3, #0
 8009246:	d003      	beq.n	8009250 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2201      	movs	r2, #1
 800924c:	645a      	str	r2, [r3, #68]	; 0x44
 800924e:	e002      	b.n	8009256 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	2200      	movs	r2, #0
 8009254:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3718      	adds	r7, #24
 800925c:	46bd      	mov	sp, r7
 800925e:	bd80      	pop	{r7, pc}
 8009260:	c1100000 	.word	0xc1100000

08009264 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8009264:	b580      	push	{r7, lr}
 8009266:	b084      	sub	sp, #16
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
 800926c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d102      	bne.n	800927a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8009274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8009278:	e018      	b.n	80092ac <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681a      	ldr	r2, [r3, #0]
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009282:	041b      	lsls	r3, r3, #16
 8009284:	4619      	mov	r1, r3
 8009286:	4610      	mov	r0, r2
 8009288:	f001 ff2e 	bl	800b0e8 <SDMMC_CmdSendStatus>
 800928c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d001      	beq.n	8009298 <SD_SendStatus+0x34>
  {
    return errorstate;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	e009      	b.n	80092ac <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	2100      	movs	r1, #0
 800929e:	4618      	mov	r0, r3
 80092a0:	f001 fd13 	bl	800acca <SDMMC_GetResponse>
 80092a4:	4602      	mov	r2, r0
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80092aa:	2300      	movs	r3, #0
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3710      	adds	r7, #16
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}

080092b4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b084      	sub	sp, #16
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	60f8      	str	r0, [r7, #12]
 80092bc:	60b9      	str	r1, [r7, #8]
 80092be:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	2b00      	cmp	r3, #0
 80092c4:	d101      	bne.n	80092ca <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80092c6:	2301      	movs	r3, #1
 80092c8:	e038      	b.n	800933c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80092d0:	b2db      	uxtb	r3, r3
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d106      	bne.n	80092e4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	2200      	movs	r2, #0
 80092da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80092de:	68f8      	ldr	r0, [r7, #12]
 80092e0:	f7f9 fd16 	bl	8002d10 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	681a      	ldr	r2, [r3, #0]
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	3308      	adds	r3, #8
 80092ec:	4619      	mov	r1, r3
 80092ee:	4610      	mov	r0, r2
 80092f0:	f001 fb36 	bl	800a960 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	6818      	ldr	r0, [r3, #0]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	689b      	ldr	r3, [r3, #8]
 80092fc:	461a      	mov	r2, r3
 80092fe:	68b9      	ldr	r1, [r7, #8]
 8009300:	f001 fbbe 	bl	800aa80 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	6858      	ldr	r0, [r3, #4]
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	689a      	ldr	r2, [r3, #8]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009310:	6879      	ldr	r1, [r7, #4]
 8009312:	f001 fc05 	bl	800ab20 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	68fa      	ldr	r2, [r7, #12]
 800931c:	6892      	ldr	r2, [r2, #8]
 800931e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68fa      	ldr	r2, [r7, #12]
 8009328:	6892      	ldr	r2, [r2, #8]
 800932a:	f041 0101 	orr.w	r1, r1, #1
 800932e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2201      	movs	r2, #1
 8009336:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800933a:	2300      	movs	r3, #0
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}

08009344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b082      	sub	sp, #8
 8009348:	af00      	add	r7, sp, #0
 800934a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2b00      	cmp	r3, #0
 8009350:	d101      	bne.n	8009356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009352:	2301      	movs	r3, #1
 8009354:	e049      	b.n	80093ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800935c:	b2db      	uxtb	r3, r3
 800935e:	2b00      	cmp	r3, #0
 8009360:	d106      	bne.n	8009370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	2200      	movs	r2, #0
 8009366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	f7f9 fb98 	bl	8002aa0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2202      	movs	r2, #2
 8009374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	3304      	adds	r3, #4
 8009380:	4619      	mov	r1, r3
 8009382:	4610      	mov	r0, r2
 8009384:	f000 fa74 	bl	8009870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2201      	movs	r2, #1
 800938c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2201      	movs	r2, #1
 8009394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2201      	movs	r2, #1
 800939c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	2201      	movs	r2, #1
 80093a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2201      	movs	r2, #1
 80093ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2201      	movs	r2, #1
 80093b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2201      	movs	r2, #1
 80093bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	2201      	movs	r2, #1
 80093c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2201      	movs	r2, #1
 80093cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	2201      	movs	r2, #1
 80093d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	2201      	movs	r2, #1
 80093dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	2201      	movs	r2, #1
 80093e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093e8:	2300      	movs	r3, #0
}
 80093ea:	4618      	mov	r0, r3
 80093ec:	3708      	adds	r7, #8
 80093ee:	46bd      	mov	sp, r7
 80093f0:	bd80      	pop	{r7, pc}

080093f2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d101      	bne.n	8009404 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009400:	2301      	movs	r3, #1
 8009402:	e049      	b.n	8009498 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800940a:	b2db      	uxtb	r3, r3
 800940c:	2b00      	cmp	r3, #0
 800940e:	d106      	bne.n	800941e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	2200      	movs	r2, #0
 8009414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009418:	6878      	ldr	r0, [r7, #4]
 800941a:	f000 f841 	bl	80094a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	2202      	movs	r2, #2
 8009422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	3304      	adds	r3, #4
 800942e:	4619      	mov	r1, r3
 8009430:	4610      	mov	r0, r2
 8009432:	f000 fa1d 	bl	8009870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2201      	movs	r2, #1
 800943a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2201      	movs	r2, #1
 8009442:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2201      	movs	r2, #1
 800944a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2201      	movs	r2, #1
 8009452:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2201      	movs	r2, #1
 8009462:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	2201      	movs	r2, #1
 800946a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	2201      	movs	r2, #1
 8009472:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2201      	movs	r2, #1
 800947a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	2201      	movs	r2, #1
 8009482:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2201      	movs	r2, #1
 8009492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009496:	2300      	movs	r3, #0
}
 8009498:	4618      	mov	r0, r3
 800949a:	3708      	adds	r7, #8
 800949c:	46bd      	mov	sp, r7
 800949e:	bd80      	pop	{r7, pc}

080094a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b083      	sub	sp, #12
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80094a8:	bf00      	nop
 80094aa:	370c      	adds	r7, #12
 80094ac:	46bd      	mov	sp, r7
 80094ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b2:	4770      	bx	lr

080094b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	60f8      	str	r0, [r7, #12]
 80094bc:	60b9      	str	r1, [r7, #8]
 80094be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80094c0:	2300      	movs	r3, #0
 80094c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80094ce:	2302      	movs	r3, #2
 80094d0:	e0ff      	b.n	80096d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2b14      	cmp	r3, #20
 80094de:	f200 80f0 	bhi.w	80096c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80094e2:	a201      	add	r2, pc, #4	; (adr r2, 80094e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80094e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094e8:	0800953d 	.word	0x0800953d
 80094ec:	080096c3 	.word	0x080096c3
 80094f0:	080096c3 	.word	0x080096c3
 80094f4:	080096c3 	.word	0x080096c3
 80094f8:	0800957d 	.word	0x0800957d
 80094fc:	080096c3 	.word	0x080096c3
 8009500:	080096c3 	.word	0x080096c3
 8009504:	080096c3 	.word	0x080096c3
 8009508:	080095bf 	.word	0x080095bf
 800950c:	080096c3 	.word	0x080096c3
 8009510:	080096c3 	.word	0x080096c3
 8009514:	080096c3 	.word	0x080096c3
 8009518:	080095ff 	.word	0x080095ff
 800951c:	080096c3 	.word	0x080096c3
 8009520:	080096c3 	.word	0x080096c3
 8009524:	080096c3 	.word	0x080096c3
 8009528:	08009641 	.word	0x08009641
 800952c:	080096c3 	.word	0x080096c3
 8009530:	080096c3 	.word	0x080096c3
 8009534:	080096c3 	.word	0x080096c3
 8009538:	08009681 	.word	0x08009681
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 fa34 	bl	80099b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f042 0208 	orr.w	r2, r2, #8
 8009556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f022 0204 	bic.w	r2, r2, #4
 8009566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6999      	ldr	r1, [r3, #24]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	691a      	ldr	r2, [r3, #16]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	619a      	str	r2, [r3, #24]
      break;
 800957a:	e0a5      	b.n	80096c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68b9      	ldr	r1, [r7, #8]
 8009582:	4618      	mov	r0, r3
 8009584:	f000 fa86 	bl	8009a94 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	699a      	ldr	r2, [r3, #24]
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009596:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	699a      	ldr	r2, [r3, #24]
 800959e:	68fb      	ldr	r3, [r7, #12]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	6999      	ldr	r1, [r3, #24]
 80095ae:	68bb      	ldr	r3, [r7, #8]
 80095b0:	691b      	ldr	r3, [r3, #16]
 80095b2:	021a      	lsls	r2, r3, #8
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	619a      	str	r2, [r3, #24]
      break;
 80095bc:	e084      	b.n	80096c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68b9      	ldr	r1, [r7, #8]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 fadd 	bl	8009b84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f042 0208 	orr.w	r2, r2, #8
 80095d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f022 0204 	bic.w	r2, r2, #4
 80095e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69d9      	ldr	r1, [r3, #28]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	691a      	ldr	r2, [r3, #16]
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	430a      	orrs	r2, r1
 80095fa:	61da      	str	r2, [r3, #28]
      break;
 80095fc:	e064      	b.n	80096c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	681b      	ldr	r3, [r3, #0]
 8009602:	68b9      	ldr	r1, [r7, #8]
 8009604:	4618      	mov	r0, r3
 8009606:	f000 fb33 	bl	8009c70 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69da      	ldr	r2, [r3, #28]
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009618:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	69da      	ldr	r2, [r3, #28]
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009628:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	69d9      	ldr	r1, [r3, #28]
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	691b      	ldr	r3, [r3, #16]
 8009634:	021a      	lsls	r2, r3, #8
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	61da      	str	r2, [r3, #28]
      break;
 800963e:	e043      	b.n	80096c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fb6a 	bl	8009d20 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f042 0208 	orr.w	r2, r2, #8
 800965a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f022 0204 	bic.w	r2, r2, #4
 800966a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	691a      	ldr	r2, [r3, #16]
 8009676:	68fb      	ldr	r3, [r7, #12]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	430a      	orrs	r2, r1
 800967c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800967e:	e023      	b.n	80096c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009680:	68fb      	ldr	r3, [r7, #12]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	68b9      	ldr	r1, [r7, #8]
 8009686:	4618      	mov	r0, r3
 8009688:	f000 fb9c 	bl	8009dc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800969a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80096aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	691b      	ldr	r3, [r3, #16]
 80096b6:	021a      	lsls	r2, r3, #8
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	430a      	orrs	r2, r1
 80096be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80096c0:	e002      	b.n	80096c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80096c2:	2301      	movs	r3, #1
 80096c4:	75fb      	strb	r3, [r7, #23]
      break;
 80096c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80096d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3718      	adds	r7, #24
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop

080096dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b084      	sub	sp, #16
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
 80096e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80096e6:	2300      	movs	r3, #0
 80096e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096f0:	2b01      	cmp	r3, #1
 80096f2:	d101      	bne.n	80096f8 <HAL_TIM_ConfigClockSource+0x1c>
 80096f4:	2302      	movs	r3, #2
 80096f6:	e0b4      	b.n	8009862 <HAL_TIM_ConfigClockSource+0x186>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	2201      	movs	r2, #1
 80096fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2202      	movs	r2, #2
 8009704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689b      	ldr	r3, [r3, #8]
 800970e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009710:	68ba      	ldr	r2, [r7, #8]
 8009712:	4b56      	ldr	r3, [pc, #344]	; (800986c <HAL_TIM_ConfigClockSource+0x190>)
 8009714:	4013      	ands	r3, r2
 8009716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800971e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009728:	683b      	ldr	r3, [r7, #0]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009730:	d03e      	beq.n	80097b0 <HAL_TIM_ConfigClockSource+0xd4>
 8009732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009736:	f200 8087 	bhi.w	8009848 <HAL_TIM_ConfigClockSource+0x16c>
 800973a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800973e:	f000 8086 	beq.w	800984e <HAL_TIM_ConfigClockSource+0x172>
 8009742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009746:	d87f      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x16c>
 8009748:	2b70      	cmp	r3, #112	; 0x70
 800974a:	d01a      	beq.n	8009782 <HAL_TIM_ConfigClockSource+0xa6>
 800974c:	2b70      	cmp	r3, #112	; 0x70
 800974e:	d87b      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x16c>
 8009750:	2b60      	cmp	r3, #96	; 0x60
 8009752:	d050      	beq.n	80097f6 <HAL_TIM_ConfigClockSource+0x11a>
 8009754:	2b60      	cmp	r3, #96	; 0x60
 8009756:	d877      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x16c>
 8009758:	2b50      	cmp	r3, #80	; 0x50
 800975a:	d03c      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0xfa>
 800975c:	2b50      	cmp	r3, #80	; 0x50
 800975e:	d873      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x16c>
 8009760:	2b40      	cmp	r3, #64	; 0x40
 8009762:	d058      	beq.n	8009816 <HAL_TIM_ConfigClockSource+0x13a>
 8009764:	2b40      	cmp	r3, #64	; 0x40
 8009766:	d86f      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x16c>
 8009768:	2b30      	cmp	r3, #48	; 0x30
 800976a:	d064      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x15a>
 800976c:	2b30      	cmp	r3, #48	; 0x30
 800976e:	d86b      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x16c>
 8009770:	2b20      	cmp	r3, #32
 8009772:	d060      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x15a>
 8009774:	2b20      	cmp	r3, #32
 8009776:	d867      	bhi.n	8009848 <HAL_TIM_ConfigClockSource+0x16c>
 8009778:	2b00      	cmp	r3, #0
 800977a:	d05c      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x15a>
 800977c:	2b10      	cmp	r3, #16
 800977e:	d05a      	beq.n	8009836 <HAL_TIM_ConfigClockSource+0x15a>
 8009780:	e062      	b.n	8009848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6818      	ldr	r0, [r3, #0]
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	6899      	ldr	r1, [r3, #8]
 800978a:	683b      	ldr	r3, [r7, #0]
 800978c:	685a      	ldr	r2, [r3, #4]
 800978e:	683b      	ldr	r3, [r7, #0]
 8009790:	68db      	ldr	r3, [r3, #12]
 8009792:	f000 fbe5 	bl	8009f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	689b      	ldr	r3, [r3, #8]
 800979c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800979e:	68bb      	ldr	r3, [r7, #8]
 80097a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80097a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	68ba      	ldr	r2, [r7, #8]
 80097ac:	609a      	str	r2, [r3, #8]
      break;
 80097ae:	e04f      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6818      	ldr	r0, [r3, #0]
 80097b4:	683b      	ldr	r3, [r7, #0]
 80097b6:	6899      	ldr	r1, [r3, #8]
 80097b8:	683b      	ldr	r3, [r7, #0]
 80097ba:	685a      	ldr	r2, [r3, #4]
 80097bc:	683b      	ldr	r3, [r7, #0]
 80097be:	68db      	ldr	r3, [r3, #12]
 80097c0:	f000 fbce 	bl	8009f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	689a      	ldr	r2, [r3, #8]
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80097d2:	609a      	str	r2, [r3, #8]
      break;
 80097d4:	e03c      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	6859      	ldr	r1, [r3, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f000 fb42 	bl	8009e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2150      	movs	r1, #80	; 0x50
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fb9b 	bl	8009f2a <TIM_ITRx_SetConfig>
      break;
 80097f4:	e02c      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6818      	ldr	r0, [r3, #0]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	6859      	ldr	r1, [r3, #4]
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	68db      	ldr	r3, [r3, #12]
 8009802:	461a      	mov	r2, r3
 8009804:	f000 fb61 	bl	8009eca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	2160      	movs	r1, #96	; 0x60
 800980e:	4618      	mov	r0, r3
 8009810:	f000 fb8b 	bl	8009f2a <TIM_ITRx_SetConfig>
      break;
 8009814:	e01c      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6818      	ldr	r0, [r3, #0]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	6859      	ldr	r1, [r3, #4]
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	68db      	ldr	r3, [r3, #12]
 8009822:	461a      	mov	r2, r3
 8009824:	f000 fb22 	bl	8009e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	681b      	ldr	r3, [r3, #0]
 800982c:	2140      	movs	r1, #64	; 0x40
 800982e:	4618      	mov	r0, r3
 8009830:	f000 fb7b 	bl	8009f2a <TIM_ITRx_SetConfig>
      break;
 8009834:	e00c      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	683b      	ldr	r3, [r7, #0]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	4619      	mov	r1, r3
 8009840:	4610      	mov	r0, r2
 8009842:	f000 fb72 	bl	8009f2a <TIM_ITRx_SetConfig>
      break;
 8009846:	e003      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009848:	2301      	movs	r3, #1
 800984a:	73fb      	strb	r3, [r7, #15]
      break;
 800984c:	e000      	b.n	8009850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800984e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2201      	movs	r2, #1
 8009854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009860:	7bfb      	ldrb	r3, [r7, #15]
}
 8009862:	4618      	mov	r0, r3
 8009864:	3710      	adds	r7, #16
 8009866:	46bd      	mov	sp, r7
 8009868:	bd80      	pop	{r7, pc}
 800986a:	bf00      	nop
 800986c:	fffeff88 	.word	0xfffeff88

08009870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009870:	b480      	push	{r7}
 8009872:	b085      	sub	sp, #20
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a40      	ldr	r2, [pc, #256]	; (8009984 <TIM_Base_SetConfig+0x114>)
 8009884:	4293      	cmp	r3, r2
 8009886:	d013      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800988e:	d00f      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	4a3d      	ldr	r2, [pc, #244]	; (8009988 <TIM_Base_SetConfig+0x118>)
 8009894:	4293      	cmp	r3, r2
 8009896:	d00b      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	4a3c      	ldr	r2, [pc, #240]	; (800998c <TIM_Base_SetConfig+0x11c>)
 800989c:	4293      	cmp	r3, r2
 800989e:	d007      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	4a3b      	ldr	r2, [pc, #236]	; (8009990 <TIM_Base_SetConfig+0x120>)
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d003      	beq.n	80098b0 <TIM_Base_SetConfig+0x40>
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	4a3a      	ldr	r2, [pc, #232]	; (8009994 <TIM_Base_SetConfig+0x124>)
 80098ac:	4293      	cmp	r3, r2
 80098ae:	d108      	bne.n	80098c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	685b      	ldr	r3, [r3, #4]
 80098bc:	68fa      	ldr	r2, [r7, #12]
 80098be:	4313      	orrs	r3, r2
 80098c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	4a2f      	ldr	r2, [pc, #188]	; (8009984 <TIM_Base_SetConfig+0x114>)
 80098c6:	4293      	cmp	r3, r2
 80098c8:	d02b      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80098d0:	d027      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	4a2c      	ldr	r2, [pc, #176]	; (8009988 <TIM_Base_SetConfig+0x118>)
 80098d6:	4293      	cmp	r3, r2
 80098d8:	d023      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	4a2b      	ldr	r2, [pc, #172]	; (800998c <TIM_Base_SetConfig+0x11c>)
 80098de:	4293      	cmp	r3, r2
 80098e0:	d01f      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4a2a      	ldr	r2, [pc, #168]	; (8009990 <TIM_Base_SetConfig+0x120>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d01b      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	4a29      	ldr	r2, [pc, #164]	; (8009994 <TIM_Base_SetConfig+0x124>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d017      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	4a28      	ldr	r2, [pc, #160]	; (8009998 <TIM_Base_SetConfig+0x128>)
 80098f6:	4293      	cmp	r3, r2
 80098f8:	d013      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	4a27      	ldr	r2, [pc, #156]	; (800999c <TIM_Base_SetConfig+0x12c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d00f      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	4a26      	ldr	r2, [pc, #152]	; (80099a0 <TIM_Base_SetConfig+0x130>)
 8009906:	4293      	cmp	r3, r2
 8009908:	d00b      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	4a25      	ldr	r2, [pc, #148]	; (80099a4 <TIM_Base_SetConfig+0x134>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d007      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	4a24      	ldr	r2, [pc, #144]	; (80099a8 <TIM_Base_SetConfig+0x138>)
 8009916:	4293      	cmp	r3, r2
 8009918:	d003      	beq.n	8009922 <TIM_Base_SetConfig+0xb2>
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	4a23      	ldr	r2, [pc, #140]	; (80099ac <TIM_Base_SetConfig+0x13c>)
 800991e:	4293      	cmp	r3, r2
 8009920:	d108      	bne.n	8009934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	68db      	ldr	r3, [r3, #12]
 800992e:	68fa      	ldr	r2, [r7, #12]
 8009930:	4313      	orrs	r3, r2
 8009932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	4313      	orrs	r3, r2
 8009940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	68fa      	ldr	r2, [r7, #12]
 8009946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	689a      	ldr	r2, [r3, #8]
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009950:	683b      	ldr	r3, [r7, #0]
 8009952:	681a      	ldr	r2, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	4a0a      	ldr	r2, [pc, #40]	; (8009984 <TIM_Base_SetConfig+0x114>)
 800995c:	4293      	cmp	r3, r2
 800995e:	d003      	beq.n	8009968 <TIM_Base_SetConfig+0xf8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a0c      	ldr	r2, [pc, #48]	; (8009994 <TIM_Base_SetConfig+0x124>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d103      	bne.n	8009970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	2201      	movs	r2, #1
 8009974:	615a      	str	r2, [r3, #20]
}
 8009976:	bf00      	nop
 8009978:	3714      	adds	r7, #20
 800997a:	46bd      	mov	sp, r7
 800997c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009980:	4770      	bx	lr
 8009982:	bf00      	nop
 8009984:	40010000 	.word	0x40010000
 8009988:	40000400 	.word	0x40000400
 800998c:	40000800 	.word	0x40000800
 8009990:	40000c00 	.word	0x40000c00
 8009994:	40010400 	.word	0x40010400
 8009998:	40014000 	.word	0x40014000
 800999c:	40014400 	.word	0x40014400
 80099a0:	40014800 	.word	0x40014800
 80099a4:	40001800 	.word	0x40001800
 80099a8:	40001c00 	.word	0x40001c00
 80099ac:	40002000 	.word	0x40002000

080099b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b087      	sub	sp, #28
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
 80099b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6a1b      	ldr	r3, [r3, #32]
 80099be:	f023 0201 	bic.w	r2, r3, #1
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	6a1b      	ldr	r3, [r3, #32]
 80099ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	699b      	ldr	r3, [r3, #24]
 80099d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80099d8:	68fa      	ldr	r2, [r7, #12]
 80099da:	4b2b      	ldr	r3, [pc, #172]	; (8009a88 <TIM_OC1_SetConfig+0xd8>)
 80099dc:	4013      	ands	r3, r2
 80099de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f023 0303 	bic.w	r3, r3, #3
 80099e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80099e8:	683b      	ldr	r3, [r7, #0]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80099f2:	697b      	ldr	r3, [r7, #20]
 80099f4:	f023 0302 	bic.w	r3, r3, #2
 80099f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80099fa:	683b      	ldr	r3, [r7, #0]
 80099fc:	689b      	ldr	r3, [r3, #8]
 80099fe:	697a      	ldr	r2, [r7, #20]
 8009a00:	4313      	orrs	r3, r2
 8009a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	4a21      	ldr	r2, [pc, #132]	; (8009a8c <TIM_OC1_SetConfig+0xdc>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d003      	beq.n	8009a14 <TIM_OC1_SetConfig+0x64>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	4a20      	ldr	r2, [pc, #128]	; (8009a90 <TIM_OC1_SetConfig+0xe0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d10c      	bne.n	8009a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009a14:	697b      	ldr	r3, [r7, #20]
 8009a16:	f023 0308 	bic.w	r3, r3, #8
 8009a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	68db      	ldr	r3, [r3, #12]
 8009a20:	697a      	ldr	r2, [r7, #20]
 8009a22:	4313      	orrs	r3, r2
 8009a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009a26:	697b      	ldr	r3, [r7, #20]
 8009a28:	f023 0304 	bic.w	r3, r3, #4
 8009a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	4a16      	ldr	r2, [pc, #88]	; (8009a8c <TIM_OC1_SetConfig+0xdc>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d003      	beq.n	8009a3e <TIM_OC1_SetConfig+0x8e>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	4a15      	ldr	r2, [pc, #84]	; (8009a90 <TIM_OC1_SetConfig+0xe0>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d111      	bne.n	8009a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009a3e:	693b      	ldr	r3, [r7, #16]
 8009a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009a4e:	683b      	ldr	r3, [r7, #0]
 8009a50:	695b      	ldr	r3, [r3, #20]
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	4313      	orrs	r3, r2
 8009a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	699b      	ldr	r3, [r3, #24]
 8009a5c:	693a      	ldr	r2, [r7, #16]
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	693a      	ldr	r2, [r7, #16]
 8009a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	68fa      	ldr	r2, [r7, #12]
 8009a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009a6e:	683b      	ldr	r3, [r7, #0]
 8009a70:	685a      	ldr	r2, [r3, #4]
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	697a      	ldr	r2, [r7, #20]
 8009a7a:	621a      	str	r2, [r3, #32]
}
 8009a7c:	bf00      	nop
 8009a7e:	371c      	adds	r7, #28
 8009a80:	46bd      	mov	sp, r7
 8009a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a86:	4770      	bx	lr
 8009a88:	fffeff8f 	.word	0xfffeff8f
 8009a8c:	40010000 	.word	0x40010000
 8009a90:	40010400 	.word	0x40010400

08009a94 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b087      	sub	sp, #28
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
 8009a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6a1b      	ldr	r3, [r3, #32]
 8009aa2:	f023 0210 	bic.w	r2, r3, #16
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	6a1b      	ldr	r3, [r3, #32]
 8009aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	685b      	ldr	r3, [r3, #4]
 8009ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	699b      	ldr	r3, [r3, #24]
 8009aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009abc:	68fa      	ldr	r2, [r7, #12]
 8009abe:	4b2e      	ldr	r3, [pc, #184]	; (8009b78 <TIM_OC2_SetConfig+0xe4>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009aca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009acc:	683b      	ldr	r3, [r7, #0]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	021b      	lsls	r3, r3, #8
 8009ad2:	68fa      	ldr	r2, [r7, #12]
 8009ad4:	4313      	orrs	r3, r2
 8009ad6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ad8:	697b      	ldr	r3, [r7, #20]
 8009ada:	f023 0320 	bic.w	r3, r3, #32
 8009ade:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009ae0:	683b      	ldr	r3, [r7, #0]
 8009ae2:	689b      	ldr	r3, [r3, #8]
 8009ae4:	011b      	lsls	r3, r3, #4
 8009ae6:	697a      	ldr	r2, [r7, #20]
 8009ae8:	4313      	orrs	r3, r2
 8009aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	4a23      	ldr	r2, [pc, #140]	; (8009b7c <TIM_OC2_SetConfig+0xe8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d003      	beq.n	8009afc <TIM_OC2_SetConfig+0x68>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	4a22      	ldr	r2, [pc, #136]	; (8009b80 <TIM_OC2_SetConfig+0xec>)
 8009af8:	4293      	cmp	r3, r2
 8009afa:	d10d      	bne.n	8009b18 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	68db      	ldr	r3, [r3, #12]
 8009b08:	011b      	lsls	r3, r3, #4
 8009b0a:	697a      	ldr	r2, [r7, #20]
 8009b0c:	4313      	orrs	r3, r2
 8009b0e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b16:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a18      	ldr	r2, [pc, #96]	; (8009b7c <TIM_OC2_SetConfig+0xe8>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d003      	beq.n	8009b28 <TIM_OC2_SetConfig+0x94>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a17      	ldr	r2, [pc, #92]	; (8009b80 <TIM_OC2_SetConfig+0xec>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d113      	bne.n	8009b50 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009b28:	693b      	ldr	r3, [r7, #16]
 8009b2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009b2e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009b30:	693b      	ldr	r3, [r7, #16]
 8009b32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009b36:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009b38:	683b      	ldr	r3, [r7, #0]
 8009b3a:	695b      	ldr	r3, [r3, #20]
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	693a      	ldr	r2, [r7, #16]
 8009b40:	4313      	orrs	r3, r2
 8009b42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	699b      	ldr	r3, [r3, #24]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	693a      	ldr	r2, [r7, #16]
 8009b4c:	4313      	orrs	r3, r2
 8009b4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	693a      	ldr	r2, [r7, #16]
 8009b54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	68fa      	ldr	r2, [r7, #12]
 8009b5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	685a      	ldr	r2, [r3, #4]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	697a      	ldr	r2, [r7, #20]
 8009b68:	621a      	str	r2, [r3, #32]
}
 8009b6a:	bf00      	nop
 8009b6c:	371c      	adds	r7, #28
 8009b6e:	46bd      	mov	sp, r7
 8009b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	feff8fff 	.word	0xfeff8fff
 8009b7c:	40010000 	.word	0x40010000
 8009b80:	40010400 	.word	0x40010400

08009b84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009b84:	b480      	push	{r7}
 8009b86:	b087      	sub	sp, #28
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	6078      	str	r0, [r7, #4]
 8009b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	6a1b      	ldr	r3, [r3, #32]
 8009b92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	6a1b      	ldr	r3, [r3, #32]
 8009b9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	685b      	ldr	r3, [r3, #4]
 8009ba4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	69db      	ldr	r3, [r3, #28]
 8009baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	4b2d      	ldr	r3, [pc, #180]	; (8009c64 <TIM_OC3_SetConfig+0xe0>)
 8009bb0:	4013      	ands	r3, r2
 8009bb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	f023 0303 	bic.w	r3, r3, #3
 8009bba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68fa      	ldr	r2, [r7, #12]
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009bcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009bce:	683b      	ldr	r3, [r7, #0]
 8009bd0:	689b      	ldr	r3, [r3, #8]
 8009bd2:	021b      	lsls	r3, r3, #8
 8009bd4:	697a      	ldr	r2, [r7, #20]
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	4a22      	ldr	r2, [pc, #136]	; (8009c68 <TIM_OC3_SetConfig+0xe4>)
 8009bde:	4293      	cmp	r3, r2
 8009be0:	d003      	beq.n	8009bea <TIM_OC3_SetConfig+0x66>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	4a21      	ldr	r2, [pc, #132]	; (8009c6c <TIM_OC3_SetConfig+0xe8>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d10d      	bne.n	8009c06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009bea:	697b      	ldr	r3, [r7, #20]
 8009bec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	68db      	ldr	r3, [r3, #12]
 8009bf6:	021b      	lsls	r3, r3, #8
 8009bf8:	697a      	ldr	r2, [r7, #20]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009bfe:	697b      	ldr	r3, [r7, #20]
 8009c00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	4a17      	ldr	r2, [pc, #92]	; (8009c68 <TIM_OC3_SetConfig+0xe4>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d003      	beq.n	8009c16 <TIM_OC3_SetConfig+0x92>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	4a16      	ldr	r2, [pc, #88]	; (8009c6c <TIM_OC3_SetConfig+0xe8>)
 8009c12:	4293      	cmp	r3, r2
 8009c14:	d113      	bne.n	8009c3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009c1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009c1e:	693b      	ldr	r3, [r7, #16]
 8009c20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009c24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	695b      	ldr	r3, [r3, #20]
 8009c2a:	011b      	lsls	r3, r3, #4
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	4313      	orrs	r3, r2
 8009c30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009c32:	683b      	ldr	r3, [r7, #0]
 8009c34:	699b      	ldr	r3, [r3, #24]
 8009c36:	011b      	lsls	r3, r3, #4
 8009c38:	693a      	ldr	r2, [r7, #16]
 8009c3a:	4313      	orrs	r3, r2
 8009c3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	693a      	ldr	r2, [r7, #16]
 8009c42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	68fa      	ldr	r2, [r7, #12]
 8009c48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	621a      	str	r2, [r3, #32]
}
 8009c58:	bf00      	nop
 8009c5a:	371c      	adds	r7, #28
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	fffeff8f 	.word	0xfffeff8f
 8009c68:	40010000 	.word	0x40010000
 8009c6c:	40010400 	.word	0x40010400

08009c70 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009c70:	b480      	push	{r7}
 8009c72:	b087      	sub	sp, #28
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a1b      	ldr	r3, [r3, #32]
 8009c7e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	6a1b      	ldr	r3, [r3, #32]
 8009c8a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	685b      	ldr	r3, [r3, #4]
 8009c90:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	69db      	ldr	r3, [r3, #28]
 8009c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009c98:	68fa      	ldr	r2, [r7, #12]
 8009c9a:	4b1e      	ldr	r3, [pc, #120]	; (8009d14 <TIM_OC4_SetConfig+0xa4>)
 8009c9c:	4013      	ands	r3, r2
 8009c9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009ca0:	68fb      	ldr	r3, [r7, #12]
 8009ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ca6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	021b      	lsls	r3, r3, #8
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009cb4:	693b      	ldr	r3, [r7, #16]
 8009cb6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cba:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009cbc:	683b      	ldr	r3, [r7, #0]
 8009cbe:	689b      	ldr	r3, [r3, #8]
 8009cc0:	031b      	lsls	r3, r3, #12
 8009cc2:	693a      	ldr	r2, [r7, #16]
 8009cc4:	4313      	orrs	r3, r2
 8009cc6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	4a13      	ldr	r2, [pc, #76]	; (8009d18 <TIM_OC4_SetConfig+0xa8>)
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d003      	beq.n	8009cd8 <TIM_OC4_SetConfig+0x68>
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	4a12      	ldr	r2, [pc, #72]	; (8009d1c <TIM_OC4_SetConfig+0xac>)
 8009cd4:	4293      	cmp	r3, r2
 8009cd6:	d109      	bne.n	8009cec <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009cd8:	697b      	ldr	r3, [r7, #20]
 8009cda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009cde:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	695b      	ldr	r3, [r3, #20]
 8009ce4:	019b      	lsls	r3, r3, #6
 8009ce6:	697a      	ldr	r2, [r7, #20]
 8009ce8:	4313      	orrs	r3, r2
 8009cea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	697a      	ldr	r2, [r7, #20]
 8009cf0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	68fa      	ldr	r2, [r7, #12]
 8009cf6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009cf8:	683b      	ldr	r3, [r7, #0]
 8009cfa:	685a      	ldr	r2, [r3, #4]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	693a      	ldr	r2, [r7, #16]
 8009d04:	621a      	str	r2, [r3, #32]
}
 8009d06:	bf00      	nop
 8009d08:	371c      	adds	r7, #28
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d10:	4770      	bx	lr
 8009d12:	bf00      	nop
 8009d14:	feff8fff 	.word	0xfeff8fff
 8009d18:	40010000 	.word	0x40010000
 8009d1c:	40010400 	.word	0x40010400

08009d20 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b087      	sub	sp, #28
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
 8009d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	6a1b      	ldr	r3, [r3, #32]
 8009d2e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	6a1b      	ldr	r3, [r3, #32]
 8009d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	685b      	ldr	r3, [r3, #4]
 8009d40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009d48:	68fa      	ldr	r2, [r7, #12]
 8009d4a:	4b1b      	ldr	r3, [pc, #108]	; (8009db8 <TIM_OC5_SetConfig+0x98>)
 8009d4c:	4013      	ands	r3, r2
 8009d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009d50:	683b      	ldr	r3, [r7, #0]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	4313      	orrs	r3, r2
 8009d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009d5a:	693b      	ldr	r3, [r7, #16]
 8009d5c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009d60:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	689b      	ldr	r3, [r3, #8]
 8009d66:	041b      	lsls	r3, r3, #16
 8009d68:	693a      	ldr	r2, [r7, #16]
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	4a12      	ldr	r2, [pc, #72]	; (8009dbc <TIM_OC5_SetConfig+0x9c>)
 8009d72:	4293      	cmp	r3, r2
 8009d74:	d003      	beq.n	8009d7e <TIM_OC5_SetConfig+0x5e>
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	4a11      	ldr	r2, [pc, #68]	; (8009dc0 <TIM_OC5_SetConfig+0xa0>)
 8009d7a:	4293      	cmp	r3, r2
 8009d7c:	d109      	bne.n	8009d92 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	695b      	ldr	r3, [r3, #20]
 8009d8a:	021b      	lsls	r3, r3, #8
 8009d8c:	697a      	ldr	r2, [r7, #20]
 8009d8e:	4313      	orrs	r3, r2
 8009d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	697a      	ldr	r2, [r7, #20]
 8009d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	685a      	ldr	r2, [r3, #4]
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	693a      	ldr	r2, [r7, #16]
 8009daa:	621a      	str	r2, [r3, #32]
}
 8009dac:	bf00      	nop
 8009dae:	371c      	adds	r7, #28
 8009db0:	46bd      	mov	sp, r7
 8009db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db6:	4770      	bx	lr
 8009db8:	fffeff8f 	.word	0xfffeff8f
 8009dbc:	40010000 	.word	0x40010000
 8009dc0:	40010400 	.word	0x40010400

08009dc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009dc4:	b480      	push	{r7}
 8009dc6:	b087      	sub	sp, #28
 8009dc8:	af00      	add	r7, sp, #0
 8009dca:	6078      	str	r0, [r7, #4]
 8009dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	6a1b      	ldr	r3, [r3, #32]
 8009dd2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	6a1b      	ldr	r3, [r3, #32]
 8009dde:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	685b      	ldr	r3, [r3, #4]
 8009de4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009dec:	68fa      	ldr	r2, [r7, #12]
 8009dee:	4b1c      	ldr	r3, [pc, #112]	; (8009e60 <TIM_OC6_SetConfig+0x9c>)
 8009df0:	4013      	ands	r3, r2
 8009df2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009df4:	683b      	ldr	r3, [r7, #0]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	021b      	lsls	r3, r3, #8
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e00:	693b      	ldr	r3, [r7, #16]
 8009e02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	689b      	ldr	r3, [r3, #8]
 8009e0c:	051b      	lsls	r3, r3, #20
 8009e0e:	693a      	ldr	r2, [r7, #16]
 8009e10:	4313      	orrs	r3, r2
 8009e12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	4a13      	ldr	r2, [pc, #76]	; (8009e64 <TIM_OC6_SetConfig+0xa0>)
 8009e18:	4293      	cmp	r3, r2
 8009e1a:	d003      	beq.n	8009e24 <TIM_OC6_SetConfig+0x60>
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	4a12      	ldr	r2, [pc, #72]	; (8009e68 <TIM_OC6_SetConfig+0xa4>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d109      	bne.n	8009e38 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009e24:	697b      	ldr	r3, [r7, #20]
 8009e26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009e2a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	695b      	ldr	r3, [r3, #20]
 8009e30:	029b      	lsls	r3, r3, #10
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	4313      	orrs	r3, r2
 8009e36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	697a      	ldr	r2, [r7, #20]
 8009e3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	68fa      	ldr	r2, [r7, #12]
 8009e42:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	685a      	ldr	r2, [r3, #4]
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	621a      	str	r2, [r3, #32]
}
 8009e52:	bf00      	nop
 8009e54:	371c      	adds	r7, #28
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr
 8009e5e:	bf00      	nop
 8009e60:	feff8fff 	.word	0xfeff8fff
 8009e64:	40010000 	.word	0x40010000
 8009e68:	40010400 	.word	0x40010400

08009e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009e6c:	b480      	push	{r7}
 8009e6e:	b087      	sub	sp, #28
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	60b9      	str	r1, [r7, #8]
 8009e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	6a1b      	ldr	r3, [r3, #32]
 8009e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	6a1b      	ldr	r3, [r3, #32]
 8009e82:	f023 0201 	bic.w	r2, r3, #1
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	699b      	ldr	r3, [r3, #24]
 8009e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	011b      	lsls	r3, r3, #4
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009ea2:	697b      	ldr	r3, [r7, #20]
 8009ea4:	f023 030a 	bic.w	r3, r3, #10
 8009ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009eaa:	697a      	ldr	r2, [r7, #20]
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	693a      	ldr	r2, [r7, #16]
 8009eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	697a      	ldr	r2, [r7, #20]
 8009ebc:	621a      	str	r2, [r3, #32]
}
 8009ebe:	bf00      	nop
 8009ec0:	371c      	adds	r7, #28
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr

08009eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009eca:	b480      	push	{r7}
 8009ecc:	b087      	sub	sp, #28
 8009ece:	af00      	add	r7, sp, #0
 8009ed0:	60f8      	str	r0, [r7, #12]
 8009ed2:	60b9      	str	r1, [r7, #8]
 8009ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	6a1b      	ldr	r3, [r3, #32]
 8009eda:	f023 0210 	bic.w	r2, r3, #16
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	6a1b      	ldr	r3, [r3, #32]
 8009eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009eee:	697b      	ldr	r3, [r7, #20]
 8009ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	031b      	lsls	r3, r3, #12
 8009efa:	697a      	ldr	r2, [r7, #20]
 8009efc:	4313      	orrs	r3, r2
 8009efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009f00:	693b      	ldr	r3, [r7, #16]
 8009f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	011b      	lsls	r3, r3, #4
 8009f0c:	693a      	ldr	r2, [r7, #16]
 8009f0e:	4313      	orrs	r3, r2
 8009f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	697a      	ldr	r2, [r7, #20]
 8009f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	693a      	ldr	r2, [r7, #16]
 8009f1c:	621a      	str	r2, [r3, #32]
}
 8009f1e:	bf00      	nop
 8009f20:	371c      	adds	r7, #28
 8009f22:	46bd      	mov	sp, r7
 8009f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f28:	4770      	bx	lr

08009f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009f2a:	b480      	push	{r7}
 8009f2c:	b085      	sub	sp, #20
 8009f2e:	af00      	add	r7, sp, #0
 8009f30:	6078      	str	r0, [r7, #4]
 8009f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	689b      	ldr	r3, [r3, #8]
 8009f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009f42:	683a      	ldr	r2, [r7, #0]
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	4313      	orrs	r3, r2
 8009f48:	f043 0307 	orr.w	r3, r3, #7
 8009f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	68fa      	ldr	r2, [r7, #12]
 8009f52:	609a      	str	r2, [r3, #8]
}
 8009f54:	bf00      	nop
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr

08009f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009f60:	b480      	push	{r7}
 8009f62:	b087      	sub	sp, #28
 8009f64:	af00      	add	r7, sp, #0
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	607a      	str	r2, [r7, #4]
 8009f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	689b      	ldr	r3, [r3, #8]
 8009f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f74:	697b      	ldr	r3, [r7, #20]
 8009f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	021a      	lsls	r2, r3, #8
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	431a      	orrs	r2, r3
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	4313      	orrs	r3, r2
 8009f88:	697a      	ldr	r2, [r7, #20]
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	609a      	str	r2, [r3, #8]
}
 8009f94:	bf00      	nop
 8009f96:	371c      	adds	r7, #28
 8009f98:	46bd      	mov	sp, r7
 8009f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f9e:	4770      	bx	lr

08009fa0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009fa0:	b480      	push	{r7}
 8009fa2:	b085      	sub	sp, #20
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d101      	bne.n	8009fb8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009fb4:	2302      	movs	r3, #2
 8009fb6:	e06d      	b.n	800a094 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2201      	movs	r2, #1
 8009fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	2202      	movs	r2, #2
 8009fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	689b      	ldr	r3, [r3, #8]
 8009fd6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	4a30      	ldr	r2, [pc, #192]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009fde:	4293      	cmp	r3, r2
 8009fe0:	d004      	beq.n	8009fec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	4a2f      	ldr	r2, [pc, #188]	; (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009fe8:	4293      	cmp	r3, r2
 8009fea:	d108      	bne.n	8009ffe <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ff2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009ff4:	683b      	ldr	r3, [r7, #0]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	4313      	orrs	r3, r2
 8009ffc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a004:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a006:	683b      	ldr	r3, [r7, #0]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	68fa      	ldr	r2, [r7, #12]
 800a00c:	4313      	orrs	r3, r2
 800a00e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68fa      	ldr	r2, [r7, #12]
 800a016:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	4a20      	ldr	r2, [pc, #128]	; (800a0a0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	d022      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a02a:	d01d      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	4a1d      	ldr	r2, [pc, #116]	; (800a0a8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a032:	4293      	cmp	r3, r2
 800a034:	d018      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a1c      	ldr	r2, [pc, #112]	; (800a0ac <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d013      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681b      	ldr	r3, [r3, #0]
 800a044:	4a1a      	ldr	r2, [pc, #104]	; (800a0b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a046:	4293      	cmp	r3, r2
 800a048:	d00e      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a15      	ldr	r2, [pc, #84]	; (800a0a4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a050:	4293      	cmp	r3, r2
 800a052:	d009      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	4a16      	ldr	r2, [pc, #88]	; (800a0b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a05a:	4293      	cmp	r3, r2
 800a05c:	d004      	beq.n	800a068 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	4a15      	ldr	r2, [pc, #84]	; (800a0b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d10c      	bne.n	800a082 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a06e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	68ba      	ldr	r2, [r7, #8]
 800a076:	4313      	orrs	r3, r2
 800a078:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68ba      	ldr	r2, [r7, #8]
 800a080:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	2201      	movs	r2, #1
 800a086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2200      	movs	r2, #0
 800a08e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a092:	2300      	movs	r3, #0
}
 800a094:	4618      	mov	r0, r3
 800a096:	3714      	adds	r7, #20
 800a098:	46bd      	mov	sp, r7
 800a09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09e:	4770      	bx	lr
 800a0a0:	40010000 	.word	0x40010000
 800a0a4:	40010400 	.word	0x40010400
 800a0a8:	40000400 	.word	0x40000400
 800a0ac:	40000800 	.word	0x40000800
 800a0b0:	40000c00 	.word	0x40000c00
 800a0b4:	40014000 	.word	0x40014000
 800a0b8:	40001800 	.word	0x40001800

0800a0bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d101      	bne.n	800a0ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e040      	b.n	800a150 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d106      	bne.n	800a0e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2200      	movs	r2, #0
 800a0da:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a0de:	6878      	ldr	r0, [r7, #4]
 800a0e0:	f7f8 fd4a 	bl	8002b78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	2224      	movs	r2, #36	; 0x24
 800a0e8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	681a      	ldr	r2, [r3, #0]
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f022 0201 	bic.w	r2, r2, #1
 800a0f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a0fa:	6878      	ldr	r0, [r7, #4]
 800a0fc:	f000 f82c 	bl	800a158 <UART_SetConfig>
 800a100:	4603      	mov	r3, r0
 800a102:	2b01      	cmp	r3, #1
 800a104:	d101      	bne.n	800a10a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a106:	2301      	movs	r3, #1
 800a108:	e022      	b.n	800a150 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d002      	beq.n	800a118 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 fa84 	bl	800a620 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	685a      	ldr	r2, [r3, #4]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a126:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	689a      	ldr	r2, [r3, #8]
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a136:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	681a      	ldr	r2, [r3, #0]
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	f042 0201 	orr.w	r2, r2, #1
 800a146:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f000 fb0b 	bl	800a764 <UART_CheckIdleState>
 800a14e:	4603      	mov	r3, r0
}
 800a150:	4618      	mov	r0, r3
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	689a      	ldr	r2, [r3, #8]
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	691b      	ldr	r3, [r3, #16]
 800a16c:	431a      	orrs	r2, r3
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	695b      	ldr	r3, [r3, #20]
 800a172:	431a      	orrs	r2, r3
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	69db      	ldr	r3, [r3, #28]
 800a178:	4313      	orrs	r3, r2
 800a17a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681a      	ldr	r2, [r3, #0]
 800a182:	4ba6      	ldr	r3, [pc, #664]	; (800a41c <UART_SetConfig+0x2c4>)
 800a184:	4013      	ands	r3, r2
 800a186:	687a      	ldr	r2, [r7, #4]
 800a188:	6812      	ldr	r2, [r2, #0]
 800a18a:	6979      	ldr	r1, [r7, #20]
 800a18c:	430b      	orrs	r3, r1
 800a18e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	685b      	ldr	r3, [r3, #4]
 800a196:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	68da      	ldr	r2, [r3, #12]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	430a      	orrs	r2, r1
 800a1a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	699b      	ldr	r3, [r3, #24]
 800a1aa:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	6a1b      	ldr	r3, [r3, #32]
 800a1b0:	697a      	ldr	r2, [r7, #20]
 800a1b2:	4313      	orrs	r3, r2
 800a1b4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	697a      	ldr	r2, [r7, #20]
 800a1c6:	430a      	orrs	r2, r1
 800a1c8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	4a94      	ldr	r2, [pc, #592]	; (800a420 <UART_SetConfig+0x2c8>)
 800a1d0:	4293      	cmp	r3, r2
 800a1d2:	d120      	bne.n	800a216 <UART_SetConfig+0xbe>
 800a1d4:	4b93      	ldr	r3, [pc, #588]	; (800a424 <UART_SetConfig+0x2cc>)
 800a1d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1da:	f003 0303 	and.w	r3, r3, #3
 800a1de:	2b03      	cmp	r3, #3
 800a1e0:	d816      	bhi.n	800a210 <UART_SetConfig+0xb8>
 800a1e2:	a201      	add	r2, pc, #4	; (adr r2, 800a1e8 <UART_SetConfig+0x90>)
 800a1e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1e8:	0800a1f9 	.word	0x0800a1f9
 800a1ec:	0800a205 	.word	0x0800a205
 800a1f0:	0800a1ff 	.word	0x0800a1ff
 800a1f4:	0800a20b 	.word	0x0800a20b
 800a1f8:	2301      	movs	r3, #1
 800a1fa:	77fb      	strb	r3, [r7, #31]
 800a1fc:	e150      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a1fe:	2302      	movs	r3, #2
 800a200:	77fb      	strb	r3, [r7, #31]
 800a202:	e14d      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a204:	2304      	movs	r3, #4
 800a206:	77fb      	strb	r3, [r7, #31]
 800a208:	e14a      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a20a:	2308      	movs	r3, #8
 800a20c:	77fb      	strb	r3, [r7, #31]
 800a20e:	e147      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a210:	2310      	movs	r3, #16
 800a212:	77fb      	strb	r3, [r7, #31]
 800a214:	e144      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4a83      	ldr	r2, [pc, #524]	; (800a428 <UART_SetConfig+0x2d0>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d132      	bne.n	800a286 <UART_SetConfig+0x12e>
 800a220:	4b80      	ldr	r3, [pc, #512]	; (800a424 <UART_SetConfig+0x2cc>)
 800a222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a226:	f003 030c 	and.w	r3, r3, #12
 800a22a:	2b0c      	cmp	r3, #12
 800a22c:	d828      	bhi.n	800a280 <UART_SetConfig+0x128>
 800a22e:	a201      	add	r2, pc, #4	; (adr r2, 800a234 <UART_SetConfig+0xdc>)
 800a230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a234:	0800a269 	.word	0x0800a269
 800a238:	0800a281 	.word	0x0800a281
 800a23c:	0800a281 	.word	0x0800a281
 800a240:	0800a281 	.word	0x0800a281
 800a244:	0800a275 	.word	0x0800a275
 800a248:	0800a281 	.word	0x0800a281
 800a24c:	0800a281 	.word	0x0800a281
 800a250:	0800a281 	.word	0x0800a281
 800a254:	0800a26f 	.word	0x0800a26f
 800a258:	0800a281 	.word	0x0800a281
 800a25c:	0800a281 	.word	0x0800a281
 800a260:	0800a281 	.word	0x0800a281
 800a264:	0800a27b 	.word	0x0800a27b
 800a268:	2300      	movs	r3, #0
 800a26a:	77fb      	strb	r3, [r7, #31]
 800a26c:	e118      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a26e:	2302      	movs	r3, #2
 800a270:	77fb      	strb	r3, [r7, #31]
 800a272:	e115      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a274:	2304      	movs	r3, #4
 800a276:	77fb      	strb	r3, [r7, #31]
 800a278:	e112      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a27a:	2308      	movs	r3, #8
 800a27c:	77fb      	strb	r3, [r7, #31]
 800a27e:	e10f      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a280:	2310      	movs	r3, #16
 800a282:	77fb      	strb	r3, [r7, #31]
 800a284:	e10c      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	4a68      	ldr	r2, [pc, #416]	; (800a42c <UART_SetConfig+0x2d4>)
 800a28c:	4293      	cmp	r3, r2
 800a28e:	d120      	bne.n	800a2d2 <UART_SetConfig+0x17a>
 800a290:	4b64      	ldr	r3, [pc, #400]	; (800a424 <UART_SetConfig+0x2cc>)
 800a292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a296:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a29a:	2b30      	cmp	r3, #48	; 0x30
 800a29c:	d013      	beq.n	800a2c6 <UART_SetConfig+0x16e>
 800a29e:	2b30      	cmp	r3, #48	; 0x30
 800a2a0:	d814      	bhi.n	800a2cc <UART_SetConfig+0x174>
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	d009      	beq.n	800a2ba <UART_SetConfig+0x162>
 800a2a6:	2b20      	cmp	r3, #32
 800a2a8:	d810      	bhi.n	800a2cc <UART_SetConfig+0x174>
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d002      	beq.n	800a2b4 <UART_SetConfig+0x15c>
 800a2ae:	2b10      	cmp	r3, #16
 800a2b0:	d006      	beq.n	800a2c0 <UART_SetConfig+0x168>
 800a2b2:	e00b      	b.n	800a2cc <UART_SetConfig+0x174>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	77fb      	strb	r3, [r7, #31]
 800a2b8:	e0f2      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a2ba:	2302      	movs	r3, #2
 800a2bc:	77fb      	strb	r3, [r7, #31]
 800a2be:	e0ef      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a2c0:	2304      	movs	r3, #4
 800a2c2:	77fb      	strb	r3, [r7, #31]
 800a2c4:	e0ec      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a2c6:	2308      	movs	r3, #8
 800a2c8:	77fb      	strb	r3, [r7, #31]
 800a2ca:	e0e9      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a2cc:	2310      	movs	r3, #16
 800a2ce:	77fb      	strb	r3, [r7, #31]
 800a2d0:	e0e6      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	4a56      	ldr	r2, [pc, #344]	; (800a430 <UART_SetConfig+0x2d8>)
 800a2d8:	4293      	cmp	r3, r2
 800a2da:	d120      	bne.n	800a31e <UART_SetConfig+0x1c6>
 800a2dc:	4b51      	ldr	r3, [pc, #324]	; (800a424 <UART_SetConfig+0x2cc>)
 800a2de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a2e6:	2bc0      	cmp	r3, #192	; 0xc0
 800a2e8:	d013      	beq.n	800a312 <UART_SetConfig+0x1ba>
 800a2ea:	2bc0      	cmp	r3, #192	; 0xc0
 800a2ec:	d814      	bhi.n	800a318 <UART_SetConfig+0x1c0>
 800a2ee:	2b80      	cmp	r3, #128	; 0x80
 800a2f0:	d009      	beq.n	800a306 <UART_SetConfig+0x1ae>
 800a2f2:	2b80      	cmp	r3, #128	; 0x80
 800a2f4:	d810      	bhi.n	800a318 <UART_SetConfig+0x1c0>
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d002      	beq.n	800a300 <UART_SetConfig+0x1a8>
 800a2fa:	2b40      	cmp	r3, #64	; 0x40
 800a2fc:	d006      	beq.n	800a30c <UART_SetConfig+0x1b4>
 800a2fe:	e00b      	b.n	800a318 <UART_SetConfig+0x1c0>
 800a300:	2300      	movs	r3, #0
 800a302:	77fb      	strb	r3, [r7, #31]
 800a304:	e0cc      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a306:	2302      	movs	r3, #2
 800a308:	77fb      	strb	r3, [r7, #31]
 800a30a:	e0c9      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a30c:	2304      	movs	r3, #4
 800a30e:	77fb      	strb	r3, [r7, #31]
 800a310:	e0c6      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a312:	2308      	movs	r3, #8
 800a314:	77fb      	strb	r3, [r7, #31]
 800a316:	e0c3      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a318:	2310      	movs	r3, #16
 800a31a:	77fb      	strb	r3, [r7, #31]
 800a31c:	e0c0      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	4a44      	ldr	r2, [pc, #272]	; (800a434 <UART_SetConfig+0x2dc>)
 800a324:	4293      	cmp	r3, r2
 800a326:	d125      	bne.n	800a374 <UART_SetConfig+0x21c>
 800a328:	4b3e      	ldr	r3, [pc, #248]	; (800a424 <UART_SetConfig+0x2cc>)
 800a32a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a32e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a332:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a336:	d017      	beq.n	800a368 <UART_SetConfig+0x210>
 800a338:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a33c:	d817      	bhi.n	800a36e <UART_SetConfig+0x216>
 800a33e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a342:	d00b      	beq.n	800a35c <UART_SetConfig+0x204>
 800a344:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a348:	d811      	bhi.n	800a36e <UART_SetConfig+0x216>
 800a34a:	2b00      	cmp	r3, #0
 800a34c:	d003      	beq.n	800a356 <UART_SetConfig+0x1fe>
 800a34e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a352:	d006      	beq.n	800a362 <UART_SetConfig+0x20a>
 800a354:	e00b      	b.n	800a36e <UART_SetConfig+0x216>
 800a356:	2300      	movs	r3, #0
 800a358:	77fb      	strb	r3, [r7, #31]
 800a35a:	e0a1      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a35c:	2302      	movs	r3, #2
 800a35e:	77fb      	strb	r3, [r7, #31]
 800a360:	e09e      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a362:	2304      	movs	r3, #4
 800a364:	77fb      	strb	r3, [r7, #31]
 800a366:	e09b      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a368:	2308      	movs	r3, #8
 800a36a:	77fb      	strb	r3, [r7, #31]
 800a36c:	e098      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a36e:	2310      	movs	r3, #16
 800a370:	77fb      	strb	r3, [r7, #31]
 800a372:	e095      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	4a2f      	ldr	r2, [pc, #188]	; (800a438 <UART_SetConfig+0x2e0>)
 800a37a:	4293      	cmp	r3, r2
 800a37c:	d125      	bne.n	800a3ca <UART_SetConfig+0x272>
 800a37e:	4b29      	ldr	r3, [pc, #164]	; (800a424 <UART_SetConfig+0x2cc>)
 800a380:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a384:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a388:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a38c:	d017      	beq.n	800a3be <UART_SetConfig+0x266>
 800a38e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a392:	d817      	bhi.n	800a3c4 <UART_SetConfig+0x26c>
 800a394:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a398:	d00b      	beq.n	800a3b2 <UART_SetConfig+0x25a>
 800a39a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a39e:	d811      	bhi.n	800a3c4 <UART_SetConfig+0x26c>
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d003      	beq.n	800a3ac <UART_SetConfig+0x254>
 800a3a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a3a8:	d006      	beq.n	800a3b8 <UART_SetConfig+0x260>
 800a3aa:	e00b      	b.n	800a3c4 <UART_SetConfig+0x26c>
 800a3ac:	2301      	movs	r3, #1
 800a3ae:	77fb      	strb	r3, [r7, #31]
 800a3b0:	e076      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a3b2:	2302      	movs	r3, #2
 800a3b4:	77fb      	strb	r3, [r7, #31]
 800a3b6:	e073      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	77fb      	strb	r3, [r7, #31]
 800a3bc:	e070      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a3be:	2308      	movs	r3, #8
 800a3c0:	77fb      	strb	r3, [r7, #31]
 800a3c2:	e06d      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a3c4:	2310      	movs	r3, #16
 800a3c6:	77fb      	strb	r3, [r7, #31]
 800a3c8:	e06a      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a1b      	ldr	r2, [pc, #108]	; (800a43c <UART_SetConfig+0x2e4>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d138      	bne.n	800a446 <UART_SetConfig+0x2ee>
 800a3d4:	4b13      	ldr	r3, [pc, #76]	; (800a424 <UART_SetConfig+0x2cc>)
 800a3d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3da:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a3de:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3e2:	d017      	beq.n	800a414 <UART_SetConfig+0x2bc>
 800a3e4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a3e8:	d82a      	bhi.n	800a440 <UART_SetConfig+0x2e8>
 800a3ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3ee:	d00b      	beq.n	800a408 <UART_SetConfig+0x2b0>
 800a3f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f4:	d824      	bhi.n	800a440 <UART_SetConfig+0x2e8>
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d003      	beq.n	800a402 <UART_SetConfig+0x2aa>
 800a3fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3fe:	d006      	beq.n	800a40e <UART_SetConfig+0x2b6>
 800a400:	e01e      	b.n	800a440 <UART_SetConfig+0x2e8>
 800a402:	2300      	movs	r3, #0
 800a404:	77fb      	strb	r3, [r7, #31]
 800a406:	e04b      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a408:	2302      	movs	r3, #2
 800a40a:	77fb      	strb	r3, [r7, #31]
 800a40c:	e048      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a40e:	2304      	movs	r3, #4
 800a410:	77fb      	strb	r3, [r7, #31]
 800a412:	e045      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a414:	2308      	movs	r3, #8
 800a416:	77fb      	strb	r3, [r7, #31]
 800a418:	e042      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a41a:	bf00      	nop
 800a41c:	efff69f3 	.word	0xefff69f3
 800a420:	40011000 	.word	0x40011000
 800a424:	40023800 	.word	0x40023800
 800a428:	40004400 	.word	0x40004400
 800a42c:	40004800 	.word	0x40004800
 800a430:	40004c00 	.word	0x40004c00
 800a434:	40005000 	.word	0x40005000
 800a438:	40011400 	.word	0x40011400
 800a43c:	40007800 	.word	0x40007800
 800a440:	2310      	movs	r3, #16
 800a442:	77fb      	strb	r3, [r7, #31]
 800a444:	e02c      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	4a72      	ldr	r2, [pc, #456]	; (800a614 <UART_SetConfig+0x4bc>)
 800a44c:	4293      	cmp	r3, r2
 800a44e:	d125      	bne.n	800a49c <UART_SetConfig+0x344>
 800a450:	4b71      	ldr	r3, [pc, #452]	; (800a618 <UART_SetConfig+0x4c0>)
 800a452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a456:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a45a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a45e:	d017      	beq.n	800a490 <UART_SetConfig+0x338>
 800a460:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a464:	d817      	bhi.n	800a496 <UART_SetConfig+0x33e>
 800a466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a46a:	d00b      	beq.n	800a484 <UART_SetConfig+0x32c>
 800a46c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a470:	d811      	bhi.n	800a496 <UART_SetConfig+0x33e>
 800a472:	2b00      	cmp	r3, #0
 800a474:	d003      	beq.n	800a47e <UART_SetConfig+0x326>
 800a476:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a47a:	d006      	beq.n	800a48a <UART_SetConfig+0x332>
 800a47c:	e00b      	b.n	800a496 <UART_SetConfig+0x33e>
 800a47e:	2300      	movs	r3, #0
 800a480:	77fb      	strb	r3, [r7, #31]
 800a482:	e00d      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a484:	2302      	movs	r3, #2
 800a486:	77fb      	strb	r3, [r7, #31]
 800a488:	e00a      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a48a:	2304      	movs	r3, #4
 800a48c:	77fb      	strb	r3, [r7, #31]
 800a48e:	e007      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a490:	2308      	movs	r3, #8
 800a492:	77fb      	strb	r3, [r7, #31]
 800a494:	e004      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a496:	2310      	movs	r3, #16
 800a498:	77fb      	strb	r3, [r7, #31]
 800a49a:	e001      	b.n	800a4a0 <UART_SetConfig+0x348>
 800a49c:	2310      	movs	r3, #16
 800a49e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	69db      	ldr	r3, [r3, #28]
 800a4a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4a8:	d15b      	bne.n	800a562 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800a4aa:	7ffb      	ldrb	r3, [r7, #31]
 800a4ac:	2b08      	cmp	r3, #8
 800a4ae:	d828      	bhi.n	800a502 <UART_SetConfig+0x3aa>
 800a4b0:	a201      	add	r2, pc, #4	; (adr r2, 800a4b8 <UART_SetConfig+0x360>)
 800a4b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4b6:	bf00      	nop
 800a4b8:	0800a4dd 	.word	0x0800a4dd
 800a4bc:	0800a4e5 	.word	0x0800a4e5
 800a4c0:	0800a4ed 	.word	0x0800a4ed
 800a4c4:	0800a503 	.word	0x0800a503
 800a4c8:	0800a4f3 	.word	0x0800a4f3
 800a4cc:	0800a503 	.word	0x0800a503
 800a4d0:	0800a503 	.word	0x0800a503
 800a4d4:	0800a503 	.word	0x0800a503
 800a4d8:	0800a4fb 	.word	0x0800a4fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a4dc:	f7fd fb7a 	bl	8007bd4 <HAL_RCC_GetPCLK1Freq>
 800a4e0:	61b8      	str	r0, [r7, #24]
        break;
 800a4e2:	e013      	b.n	800a50c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a4e4:	f7fd fb8a 	bl	8007bfc <HAL_RCC_GetPCLK2Freq>
 800a4e8:	61b8      	str	r0, [r7, #24]
        break;
 800a4ea:	e00f      	b.n	800a50c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a4ec:	4b4b      	ldr	r3, [pc, #300]	; (800a61c <UART_SetConfig+0x4c4>)
 800a4ee:	61bb      	str	r3, [r7, #24]
        break;
 800a4f0:	e00c      	b.n	800a50c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a4f2:	f7fd fa5f 	bl	80079b4 <HAL_RCC_GetSysClockFreq>
 800a4f6:	61b8      	str	r0, [r7, #24]
        break;
 800a4f8:	e008      	b.n	800a50c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a4fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a4fe:	61bb      	str	r3, [r7, #24]
        break;
 800a500:	e004      	b.n	800a50c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800a502:	2300      	movs	r3, #0
 800a504:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a506:	2301      	movs	r3, #1
 800a508:	77bb      	strb	r3, [r7, #30]
        break;
 800a50a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	d074      	beq.n	800a5fc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a512:	69bb      	ldr	r3, [r7, #24]
 800a514:	005a      	lsls	r2, r3, #1
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	685b      	ldr	r3, [r3, #4]
 800a51a:	085b      	lsrs	r3, r3, #1
 800a51c:	441a      	add	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	685b      	ldr	r3, [r3, #4]
 800a522:	fbb2 f3f3 	udiv	r3, r2, r3
 800a526:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	2b0f      	cmp	r3, #15
 800a52c:	d916      	bls.n	800a55c <UART_SetConfig+0x404>
 800a52e:	693b      	ldr	r3, [r7, #16]
 800a530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a534:	d212      	bcs.n	800a55c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a536:	693b      	ldr	r3, [r7, #16]
 800a538:	b29b      	uxth	r3, r3
 800a53a:	f023 030f 	bic.w	r3, r3, #15
 800a53e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a540:	693b      	ldr	r3, [r7, #16]
 800a542:	085b      	lsrs	r3, r3, #1
 800a544:	b29b      	uxth	r3, r3
 800a546:	f003 0307 	and.w	r3, r3, #7
 800a54a:	b29a      	uxth	r2, r3
 800a54c:	89fb      	ldrh	r3, [r7, #14]
 800a54e:	4313      	orrs	r3, r2
 800a550:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	89fa      	ldrh	r2, [r7, #14]
 800a558:	60da      	str	r2, [r3, #12]
 800a55a:	e04f      	b.n	800a5fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a55c:	2301      	movs	r3, #1
 800a55e:	77bb      	strb	r3, [r7, #30]
 800a560:	e04c      	b.n	800a5fc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a562:	7ffb      	ldrb	r3, [r7, #31]
 800a564:	2b08      	cmp	r3, #8
 800a566:	d828      	bhi.n	800a5ba <UART_SetConfig+0x462>
 800a568:	a201      	add	r2, pc, #4	; (adr r2, 800a570 <UART_SetConfig+0x418>)
 800a56a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56e:	bf00      	nop
 800a570:	0800a595 	.word	0x0800a595
 800a574:	0800a59d 	.word	0x0800a59d
 800a578:	0800a5a5 	.word	0x0800a5a5
 800a57c:	0800a5bb 	.word	0x0800a5bb
 800a580:	0800a5ab 	.word	0x0800a5ab
 800a584:	0800a5bb 	.word	0x0800a5bb
 800a588:	0800a5bb 	.word	0x0800a5bb
 800a58c:	0800a5bb 	.word	0x0800a5bb
 800a590:	0800a5b3 	.word	0x0800a5b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a594:	f7fd fb1e 	bl	8007bd4 <HAL_RCC_GetPCLK1Freq>
 800a598:	61b8      	str	r0, [r7, #24]
        break;
 800a59a:	e013      	b.n	800a5c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a59c:	f7fd fb2e 	bl	8007bfc <HAL_RCC_GetPCLK2Freq>
 800a5a0:	61b8      	str	r0, [r7, #24]
        break;
 800a5a2:	e00f      	b.n	800a5c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a5a4:	4b1d      	ldr	r3, [pc, #116]	; (800a61c <UART_SetConfig+0x4c4>)
 800a5a6:	61bb      	str	r3, [r7, #24]
        break;
 800a5a8:	e00c      	b.n	800a5c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a5aa:	f7fd fa03 	bl	80079b4 <HAL_RCC_GetSysClockFreq>
 800a5ae:	61b8      	str	r0, [r7, #24]
        break;
 800a5b0:	e008      	b.n	800a5c4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a5b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a5b6:	61bb      	str	r3, [r7, #24]
        break;
 800a5b8:	e004      	b.n	800a5c4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800a5be:	2301      	movs	r3, #1
 800a5c0:	77bb      	strb	r3, [r7, #30]
        break;
 800a5c2:	bf00      	nop
    }

    if (pclk != 0U)
 800a5c4:	69bb      	ldr	r3, [r7, #24]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d018      	beq.n	800a5fc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	085a      	lsrs	r2, r3, #1
 800a5d0:	69bb      	ldr	r3, [r7, #24]
 800a5d2:	441a      	add	r2, r3
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	685b      	ldr	r3, [r3, #4]
 800a5d8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5dc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2b0f      	cmp	r3, #15
 800a5e2:	d909      	bls.n	800a5f8 <UART_SetConfig+0x4a0>
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a5ea:	d205      	bcs.n	800a5f8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	60da      	str	r2, [r3, #12]
 800a5f6:	e001      	b.n	800a5fc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a5fc:	687b      	ldr	r3, [r7, #4]
 800a5fe:	2200      	movs	r2, #0
 800a600:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	2200      	movs	r2, #0
 800a606:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800a608:	7fbb      	ldrb	r3, [r7, #30]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3720      	adds	r7, #32
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	40007c00 	.word	0x40007c00
 800a618:	40023800 	.word	0x40023800
 800a61c:	00f42400 	.word	0x00f42400

0800a620 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a620:	b480      	push	{r7}
 800a622:	b083      	sub	sp, #12
 800a624:	af00      	add	r7, sp, #0
 800a626:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62c:	f003 0301 	and.w	r3, r3, #1
 800a630:	2b00      	cmp	r3, #0
 800a632:	d00a      	beq.n	800a64a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	430a      	orrs	r2, r1
 800a648:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64e:	f003 0302 	and.w	r3, r3, #2
 800a652:	2b00      	cmp	r3, #0
 800a654:	d00a      	beq.n	800a66c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	685b      	ldr	r3, [r3, #4]
 800a65c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	430a      	orrs	r2, r1
 800a66a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	f003 0304 	and.w	r3, r3, #4
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00a      	beq.n	800a68e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	685b      	ldr	r3, [r3, #4]
 800a67e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	430a      	orrs	r2, r1
 800a68c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a692:	f003 0308 	and.w	r3, r3, #8
 800a696:	2b00      	cmp	r3, #0
 800a698:	d00a      	beq.n	800a6b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	685b      	ldr	r3, [r3, #4]
 800a6a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	430a      	orrs	r2, r1
 800a6ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6b4:	f003 0310 	and.w	r3, r3, #16
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00a      	beq.n	800a6d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	430a      	orrs	r2, r1
 800a6d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	f003 0320 	and.w	r3, r3, #32
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d00a      	beq.n	800a6f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a6de:	687b      	ldr	r3, [r7, #4]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	689b      	ldr	r3, [r3, #8]
 800a6e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	430a      	orrs	r2, r1
 800a6f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d01a      	beq.n	800a736 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	685b      	ldr	r3, [r3, #4]
 800a706:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	430a      	orrs	r2, r1
 800a714:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a71e:	d10a      	bne.n	800a736 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	685b      	ldr	r3, [r3, #4]
 800a726:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	430a      	orrs	r2, r1
 800a734:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a73a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a73e:	2b00      	cmp	r3, #0
 800a740:	d00a      	beq.n	800a758 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	430a      	orrs	r2, r1
 800a756:	605a      	str	r2, [r3, #4]
  }
}
 800a758:	bf00      	nop
 800a75a:	370c      	adds	r7, #12
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr

0800a764 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a764:	b580      	push	{r7, lr}
 800a766:	b086      	sub	sp, #24
 800a768:	af02      	add	r7, sp, #8
 800a76a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	2200      	movs	r2, #0
 800a770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a774:	f7f8 fc84 	bl	8003080 <HAL_GetTick>
 800a778:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	f003 0308 	and.w	r3, r3, #8
 800a784:	2b08      	cmp	r3, #8
 800a786:	d10e      	bne.n	800a7a6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a788:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a78c:	9300      	str	r3, [sp, #0]
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	2200      	movs	r2, #0
 800a792:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a796:	6878      	ldr	r0, [r7, #4]
 800a798:	f000 f81b 	bl	800a7d2 <UART_WaitOnFlagUntilTimeout>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d001      	beq.n	800a7a6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a7a2:	2303      	movs	r3, #3
 800a7a4:	e011      	b.n	800a7ca <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	2220      	movs	r2, #32
 800a7aa:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	2220      	movs	r2, #32
 800a7b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800a7c8:	2300      	movs	r3, #0
}
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	3710      	adds	r7, #16
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b09c      	sub	sp, #112	; 0x70
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	60f8      	str	r0, [r7, #12]
 800a7da:	60b9      	str	r1, [r7, #8]
 800a7dc:	603b      	str	r3, [r7, #0]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a7e2:	e0a7      	b.n	800a934 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a7e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a7e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a7ea:	f000 80a3 	beq.w	800a934 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a7ee:	f7f8 fc47 	bl	8003080 <HAL_GetTick>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	1ad3      	subs	r3, r2, r3
 800a7f8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800a7fa:	429a      	cmp	r2, r3
 800a7fc:	d302      	bcc.n	800a804 <UART_WaitOnFlagUntilTimeout+0x32>
 800a7fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a800:	2b00      	cmp	r3, #0
 800a802:	d13f      	bne.n	800a884 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a804:	68fb      	ldr	r3, [r7, #12]
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a80a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a80c:	e853 3f00 	ldrex	r3, [r3]
 800a810:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800a812:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a814:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a818:	667b      	str	r3, [r7, #100]	; 0x64
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	461a      	mov	r2, r3
 800a820:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a822:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a824:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a826:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800a828:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800a82a:	e841 2300 	strex	r3, r2, [r1]
 800a82e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800a830:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1e6      	bne.n	800a804 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	3308      	adds	r3, #8
 800a83c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a83e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a840:	e853 3f00 	ldrex	r3, [r3]
 800a844:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a846:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a848:	f023 0301 	bic.w	r3, r3, #1
 800a84c:	663b      	str	r3, [r7, #96]	; 0x60
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	3308      	adds	r3, #8
 800a854:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800a856:	64ba      	str	r2, [r7, #72]	; 0x48
 800a858:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a85a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a85c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a85e:	e841 2300 	strex	r3, r2, [r1]
 800a862:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800a864:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a866:	2b00      	cmp	r3, #0
 800a868:	d1e5      	bne.n	800a836 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2220      	movs	r2, #32
 800a86e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2220      	movs	r2, #32
 800a874:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	2200      	movs	r2, #0
 800a87c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800a880:	2303      	movs	r3, #3
 800a882:	e068      	b.n	800a956 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	681b      	ldr	r3, [r3, #0]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	f003 0304 	and.w	r3, r3, #4
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d050      	beq.n	800a934 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a892:	68fb      	ldr	r3, [r7, #12]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	69db      	ldr	r3, [r3, #28]
 800a898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a89c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a8a0:	d148      	bne.n	800a934 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a8aa:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b4:	e853 3f00 	ldrex	r3, [r3]
 800a8b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a8ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a8c0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a8ca:	637b      	str	r3, [r7, #52]	; 0x34
 800a8cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a8ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a8d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a8d2:	e841 2300 	strex	r3, r2, [r1]
 800a8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a8d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d1e6      	bne.n	800a8ac <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	681b      	ldr	r3, [r3, #0]
 800a8e2:	3308      	adds	r3, #8
 800a8e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	e853 3f00 	ldrex	r3, [r3]
 800a8ec:	613b      	str	r3, [r7, #16]
   return(result);
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	f023 0301 	bic.w	r3, r3, #1
 800a8f4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	3308      	adds	r3, #8
 800a8fc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800a8fe:	623a      	str	r2, [r7, #32]
 800a900:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a902:	69f9      	ldr	r1, [r7, #28]
 800a904:	6a3a      	ldr	r2, [r7, #32]
 800a906:	e841 2300 	strex	r3, r2, [r1]
 800a90a:	61bb      	str	r3, [r7, #24]
   return(result);
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d1e5      	bne.n	800a8de <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2220      	movs	r2, #32
 800a916:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2220      	movs	r2, #32
 800a91c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2220      	movs	r2, #32
 800a924:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800a930:	2303      	movs	r3, #3
 800a932:	e010      	b.n	800a956 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	69da      	ldr	r2, [r3, #28]
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	4013      	ands	r3, r2
 800a93e:	68ba      	ldr	r2, [r7, #8]
 800a940:	429a      	cmp	r2, r3
 800a942:	bf0c      	ite	eq
 800a944:	2301      	moveq	r3, #1
 800a946:	2300      	movne	r3, #0
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	461a      	mov	r2, r3
 800a94c:	79fb      	ldrb	r3, [r7, #7]
 800a94e:	429a      	cmp	r2, r3
 800a950:	f43f af48 	beq.w	800a7e4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3770      	adds	r7, #112	; 0x70
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
	...

0800a960 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800a960:	b480      	push	{r7}
 800a962:	b087      	sub	sp, #28
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
 800a968:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800a96a:	683b      	ldr	r3, [r7, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	6812      	ldr	r2, [r2, #0]
 800a978:	f023 0101 	bic.w	r1, r3, #1
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 800a982:	683b      	ldr	r3, [r7, #0]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	2b08      	cmp	r3, #8
 800a988:	d102      	bne.n	800a990 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800a98a:	2340      	movs	r3, #64	; 0x40
 800a98c:	617b      	str	r3, [r7, #20]
 800a98e:	e001      	b.n	800a994 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800a990:	2300      	movs	r3, #0
 800a992:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800a99c:	683b      	ldr	r3, [r7, #0]
 800a99e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800a9a0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 800a9a6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800a9ac:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800a9ae:	683b      	ldr	r3, [r7, #0]
 800a9b0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800a9b2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 800a9b8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 800a9be:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 800a9c0:	683b      	ldr	r3, [r7, #0]
 800a9c2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 800a9c4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 800a9ca:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 800a9d0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800a9d2:	683b      	ldr	r3, [r7, #0]
 800a9d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 800a9d6:	4313      	orrs	r3, r2
 800a9d8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 800a9da:	683b      	ldr	r3, [r7, #0]
 800a9dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9de:	693a      	ldr	r2, [r7, #16]
 800a9e0:	4313      	orrs	r3, r2
 800a9e2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9e8:	693a      	ldr	r2, [r7, #16]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9f2:	693a      	ldr	r2, [r7, #16]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 800a9f8:	4b20      	ldr	r3, [pc, #128]	; (800aa7c <FMC_NORSRAM_Init+0x11c>)
 800a9fa:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa02:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800aa0a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 800aa12:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	681a      	ldr	r2, [r3, #0]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	43db      	mvns	r3, r3
 800aa22:	ea02 0103 	and.w	r1, r2, r3
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	681a      	ldr	r2, [r3, #0]
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	4319      	orrs	r1, r3
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aa3c:	d10c      	bne.n	800aa58 <FMC_NORSRAM_Init+0xf8>
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d008      	beq.n	800aa58 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa52:	431a      	orrs	r2, r3
 800aa54:	687b      	ldr	r3, [r7, #4]
 800aa56:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 800aa58:	683b      	ldr	r3, [r7, #0]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d006      	beq.n	800aa6e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681a      	ldr	r2, [r3, #0]
 800aa64:	683b      	ldr	r3, [r7, #0]
 800aa66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa68:	431a      	orrs	r2, r3
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800aa6e:	2300      	movs	r3, #0
}
 800aa70:	4618      	mov	r0, r3
 800aa72:	371c      	adds	r7, #28
 800aa74:	46bd      	mov	sp, r7
 800aa76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7a:	4770      	bx	lr
 800aa7c:	0008fb7f 	.word	0x0008fb7f

0800aa80 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b087      	sub	sp, #28
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	1c5a      	adds	r2, r3, #1
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa96:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	681a      	ldr	r2, [r3, #0]
 800aa9e:	68bb      	ldr	r3, [r7, #8]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	011b      	lsls	r3, r3, #4
 800aaa4:	431a      	orrs	r2, r3
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	021b      	lsls	r3, r3, #8
 800aaac:	431a      	orrs	r2, r3
 800aaae:	68bb      	ldr	r3, [r7, #8]
 800aab0:	68db      	ldr	r3, [r3, #12]
 800aab2:	041b      	lsls	r3, r3, #16
 800aab4:	431a      	orrs	r2, r3
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	691b      	ldr	r3, [r3, #16]
 800aaba:	3b01      	subs	r3, #1
 800aabc:	051b      	lsls	r3, r3, #20
 800aabe:	431a      	orrs	r2, r3
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	695b      	ldr	r3, [r3, #20]
 800aac4:	3b02      	subs	r3, #2
 800aac6:	061b      	lsls	r3, r3, #24
 800aac8:	431a      	orrs	r2, r3
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	699b      	ldr	r3, [r3, #24]
 800aace:	4313      	orrs	r3, r2
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	3201      	adds	r2, #1
 800aad4:	4319      	orrs	r1, r3
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aae8:	d113      	bne.n	800ab12 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800aaf2:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	691b      	ldr	r3, [r3, #16]
 800aaf8:	3b01      	subs	r3, #1
 800aafa:	051b      	lsls	r3, r3, #20
 800aafc:	697a      	ldr	r2, [r7, #20]
 800aafe:	4313      	orrs	r3, r2
 800ab00:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800ab0a:	697b      	ldr	r3, [r7, #20]
 800ab0c:	431a      	orrs	r2, r3
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800ab12:	2300      	movs	r3, #0
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	371c      	adds	r7, #28
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	60f8      	str	r0, [r7, #12]
 800ab28:	60b9      	str	r1, [r7, #8]
 800ab2a:	607a      	str	r2, [r7, #4]
 800ab2c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 800ab2e:	683b      	ldr	r3, [r7, #0]
 800ab30:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ab34:	d11d      	bne.n	800ab72 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	687a      	ldr	r2, [r7, #4]
 800ab3a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab3e:	4b13      	ldr	r3, [pc, #76]	; (800ab8c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 800ab40:	4013      	ands	r3, r2
 800ab42:	68ba      	ldr	r2, [r7, #8]
 800ab44:	6811      	ldr	r1, [r2, #0]
 800ab46:	68ba      	ldr	r2, [r7, #8]
 800ab48:	6852      	ldr	r2, [r2, #4]
 800ab4a:	0112      	lsls	r2, r2, #4
 800ab4c:	4311      	orrs	r1, r2
 800ab4e:	68ba      	ldr	r2, [r7, #8]
 800ab50:	6892      	ldr	r2, [r2, #8]
 800ab52:	0212      	lsls	r2, r2, #8
 800ab54:	4311      	orrs	r1, r2
 800ab56:	68ba      	ldr	r2, [r7, #8]
 800ab58:	6992      	ldr	r2, [r2, #24]
 800ab5a:	4311      	orrs	r1, r2
 800ab5c:	68ba      	ldr	r2, [r7, #8]
 800ab5e:	68d2      	ldr	r2, [r2, #12]
 800ab60:	0412      	lsls	r2, r2, #16
 800ab62:	430a      	orrs	r2, r1
 800ab64:	ea43 0102 	orr.w	r1, r3, r2
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800ab70:	e005      	b.n	800ab7e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	687a      	ldr	r2, [r7, #4]
 800ab76:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 800ab7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800ab7e:	2300      	movs	r3, #0
}
 800ab80:	4618      	mov	r0, r3
 800ab82:	3714      	adds	r7, #20
 800ab84:	46bd      	mov	sp, r7
 800ab86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab8a:	4770      	bx	lr
 800ab8c:	cff00000 	.word	0xcff00000

0800ab90 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 800ab90:	b084      	sub	sp, #16
 800ab92:	b480      	push	{r7}
 800ab94:	b085      	sub	sp, #20
 800ab96:	af00      	add	r7, sp, #0
 800ab98:	6078      	str	r0, [r7, #4]
 800ab9a:	f107 001c 	add.w	r0, r7, #28
 800ab9e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 800aba6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 800aba8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 800abaa:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 800abac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800abae:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800abb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800abb2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 800abb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 800abb6:	431a      	orrs	r2, r3
             Init.ClockDiv
 800abb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 800abba:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 800abbc:	68fa      	ldr	r2, [r7, #12]
 800abbe:	4313      	orrs	r3, r2
 800abc0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	685a      	ldr	r2, [r3, #4]
 800abc6:	4b07      	ldr	r3, [pc, #28]	; (800abe4 <SDMMC_Init+0x54>)
 800abc8:	4013      	ands	r3, r2
 800abca:	68fa      	ldr	r2, [r7, #12]
 800abcc:	431a      	orrs	r2, r3
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800abd2:	2300      	movs	r3, #0
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	3714      	adds	r7, #20
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	b004      	add	sp, #16
 800abe0:	4770      	bx	lr
 800abe2:	bf00      	nop
 800abe4:	ffff8100 	.word	0xffff8100

0800abe8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 800abe8:	b480      	push	{r7}
 800abea:	b083      	sub	sp, #12
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 800abf6:	4618      	mov	r0, r3
 800abf8:	370c      	adds	r7, #12
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr

0800ac02 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800ac02:	b480      	push	{r7}
 800ac04:	b083      	sub	sp, #12
 800ac06:	af00      	add	r7, sp, #0
 800ac08:	6078      	str	r0, [r7, #4]
 800ac0a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 800ac0c:	683b      	ldr	r3, [r7, #0]
 800ac0e:	681a      	ldr	r2, [r3, #0]
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800ac16:	2300      	movs	r3, #0
}
 800ac18:	4618      	mov	r0, r3
 800ac1a:	370c      	adds	r7, #12
 800ac1c:	46bd      	mov	sp, r7
 800ac1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac22:	4770      	bx	lr

0800ac24 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 800ac24:	b480      	push	{r7}
 800ac26:	b083      	sub	sp, #12
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2203      	movs	r2, #3
 800ac30:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800ac32:	2300      	movs	r3, #0
}
 800ac34:	4618      	mov	r0, r3
 800ac36:	370c      	adds	r7, #12
 800ac38:	46bd      	mov	sp, r7
 800ac3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3e:	4770      	bx	lr

0800ac40 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f003 0303 	and.w	r3, r3, #3
}
 800ac50:	4618      	mov	r0, r3
 800ac52:	370c      	adds	r7, #12
 800ac54:	46bd      	mov	sp, r7
 800ac56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5a:	4770      	bx	lr

0800ac5c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800ac5c:	b480      	push	{r7}
 800ac5e:	b085      	sub	sp, #20
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	6078      	str	r0, [r7, #4]
 800ac64:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800ac66:	2300      	movs	r3, #0
 800ac68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800ac6a:	683b      	ldr	r3, [r7, #0]
 800ac6c:	681a      	ldr	r2, [r3, #0]
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac72:	683b      	ldr	r3, [r7, #0]
 800ac74:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800ac76:	683b      	ldr	r3, [r7, #0]
 800ac78:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac7a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800ac7c:	683b      	ldr	r3, [r7, #0]
 800ac7e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800ac80:	431a      	orrs	r2, r3
                       Command->CPSM);
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800ac86:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	4313      	orrs	r3, r2
 800ac8c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	68da      	ldr	r2, [r3, #12]
 800ac92:	4b06      	ldr	r3, [pc, #24]	; (800acac <SDMMC_SendCommand+0x50>)
 800ac94:	4013      	ands	r3, r2
 800ac96:	68fa      	ldr	r2, [r7, #12]
 800ac98:	431a      	orrs	r2, r3
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800ac9e:	2300      	movs	r3, #0
}
 800aca0:	4618      	mov	r0, r3
 800aca2:	3714      	adds	r7, #20
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr
 800acac:	fffff000 	.word	0xfffff000

0800acb0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800acb0:	b480      	push	{r7}
 800acb2:	b083      	sub	sp, #12
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	691b      	ldr	r3, [r3, #16]
 800acbc:	b2db      	uxtb	r3, r3
}
 800acbe:	4618      	mov	r0, r3
 800acc0:	370c      	adds	r7, #12
 800acc2:	46bd      	mov	sp, r7
 800acc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc8:	4770      	bx	lr

0800acca <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800acca:	b480      	push	{r7}
 800accc:	b085      	sub	sp, #20
 800acce:	af00      	add	r7, sp, #0
 800acd0:	6078      	str	r0, [r7, #4]
 800acd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	3314      	adds	r3, #20
 800acd8:	461a      	mov	r2, r3
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	4413      	add	r3, r2
 800acde:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
}  
 800ace4:	4618      	mov	r0, r3
 800ace6:	3714      	adds	r7, #20
 800ace8:	46bd      	mov	sp, r7
 800acea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acee:	4770      	bx	lr

0800acf0 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b085      	sub	sp, #20
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800acfa:	2300      	movs	r3, #0
 800acfc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	685a      	ldr	r2, [r3, #4]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad16:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800ad18:	683b      	ldr	r3, [r7, #0]
 800ad1a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800ad1c:	431a      	orrs	r2, r3
                       Data->DPSM);
 800ad1e:	683b      	ldr	r3, [r7, #0]
 800ad20:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800ad22:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800ad24:	68fa      	ldr	r2, [r7, #12]
 800ad26:	4313      	orrs	r3, r2
 800ad28:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad2e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	431a      	orrs	r2, r3
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800ad3a:	2300      	movs	r3, #0

}
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	3714      	adds	r7, #20
 800ad40:	46bd      	mov	sp, r7
 800ad42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad46:	4770      	bx	lr

0800ad48 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800ad48:	b580      	push	{r7, lr}
 800ad4a:	b088      	sub	sp, #32
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
 800ad50:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800ad56:	2310      	movs	r3, #16
 800ad58:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad5a:	2340      	movs	r3, #64	; 0x40
 800ad5c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ad5e:	2300      	movs	r3, #0
 800ad60:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ad62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ad66:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ad68:	f107 0308 	add.w	r3, r7, #8
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	6878      	ldr	r0, [r7, #4]
 800ad70:	f7ff ff74 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800ad74:	f241 3288 	movw	r2, #5000	; 0x1388
 800ad78:	2110      	movs	r1, #16
 800ad7a:	6878      	ldr	r0, [r7, #4]
 800ad7c:	f000 f9d6 	bl	800b12c <SDMMC_GetCmdResp1>
 800ad80:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ad82:	69fb      	ldr	r3, [r7, #28]
}
 800ad84:	4618      	mov	r0, r3
 800ad86:	3720      	adds	r7, #32
 800ad88:	46bd      	mov	sp, r7
 800ad8a:	bd80      	pop	{r7, pc}

0800ad8c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	6078      	str	r0, [r7, #4]
 800ad94:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800ad9a:	2311      	movs	r3, #17
 800ad9c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ad9e:	2340      	movs	r3, #64	; 0x40
 800ada0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ada2:	2300      	movs	r3, #0
 800ada4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ada6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adaa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adac:	f107 0308 	add.w	r3, r7, #8
 800adb0:	4619      	mov	r1, r3
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f7ff ff52 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800adb8:	f241 3288 	movw	r2, #5000	; 0x1388
 800adbc:	2111      	movs	r1, #17
 800adbe:	6878      	ldr	r0, [r7, #4]
 800adc0:	f000 f9b4 	bl	800b12c <SDMMC_GetCmdResp1>
 800adc4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800adc6:	69fb      	ldr	r3, [r7, #28]
}
 800adc8:	4618      	mov	r0, r3
 800adca:	3720      	adds	r7, #32
 800adcc:	46bd      	mov	sp, r7
 800adce:	bd80      	pop	{r7, pc}

0800add0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800add0:	b580      	push	{r7, lr}
 800add2:	b088      	sub	sp, #32
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800adda:	683b      	ldr	r3, [r7, #0]
 800addc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800adde:	2312      	movs	r3, #18
 800ade0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ade2:	2340      	movs	r3, #64	; 0x40
 800ade4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ade6:	2300      	movs	r3, #0
 800ade8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800adea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800adee:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800adf0:	f107 0308 	add.w	r3, r7, #8
 800adf4:	4619      	mov	r1, r3
 800adf6:	6878      	ldr	r0, [r7, #4]
 800adf8:	f7ff ff30 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800adfc:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae00:	2112      	movs	r1, #18
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f000 f992 	bl	800b12c <SDMMC_GetCmdResp1>
 800ae08:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae0a:	69fb      	ldr	r3, [r7, #28]
}
 800ae0c:	4618      	mov	r0, r3
 800ae0e:	3720      	adds	r7, #32
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd80      	pop	{r7, pc}

0800ae14 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae14:	b580      	push	{r7, lr}
 800ae16:	b088      	sub	sp, #32
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800ae22:	2318      	movs	r3, #24
 800ae24:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae26:	2340      	movs	r3, #64	; 0x40
 800ae28:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae32:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae34:	f107 0308 	add.w	r3, r7, #8
 800ae38:	4619      	mov	r1, r3
 800ae3a:	6878      	ldr	r0, [r7, #4]
 800ae3c:	f7ff ff0e 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800ae40:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae44:	2118      	movs	r1, #24
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f000 f970 	bl	800b12c <SDMMC_GetCmdResp1>
 800ae4c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae4e:	69fb      	ldr	r3, [r7, #28]
}
 800ae50:	4618      	mov	r0, r3
 800ae52:	3720      	adds	r7, #32
 800ae54:	46bd      	mov	sp, r7
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b088      	sub	sp, #32
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
 800ae60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800ae62:	683b      	ldr	r3, [r7, #0]
 800ae64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800ae66:	2319      	movs	r3, #25
 800ae68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800ae6a:	2340      	movs	r3, #64	; 0x40
 800ae6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800ae72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ae76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800ae78:	f107 0308 	add.w	r3, r7, #8
 800ae7c:	4619      	mov	r1, r3
 800ae7e:	6878      	ldr	r0, [r7, #4]
 800ae80:	f7ff feec 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800ae84:	f241 3288 	movw	r2, #5000	; 0x1388
 800ae88:	2119      	movs	r1, #25
 800ae8a:	6878      	ldr	r0, [r7, #4]
 800ae8c:	f000 f94e 	bl	800b12c <SDMMC_GetCmdResp1>
 800ae90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800ae92:	69fb      	ldr	r3, [r7, #28]
}
 800ae94:	4618      	mov	r0, r3
 800ae96:	3720      	adds	r7, #32
 800ae98:	46bd      	mov	sp, r7
 800ae9a:	bd80      	pop	{r7, pc}

0800ae9c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b088      	sub	sp, #32
 800aea0:	af00      	add	r7, sp, #0
 800aea2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800aea4:	2300      	movs	r3, #0
 800aea6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800aea8:	230c      	movs	r3, #12
 800aeaa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aeac:	2340      	movs	r3, #64	; 0x40
 800aeae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aeb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800aeb8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800aeba:	f107 0308 	add.w	r3, r7, #8
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f7ff fecb 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800aec6:	4a05      	ldr	r2, [pc, #20]	; (800aedc <SDMMC_CmdStopTransfer+0x40>)
 800aec8:	210c      	movs	r1, #12
 800aeca:	6878      	ldr	r0, [r7, #4]
 800aecc:	f000 f92e 	bl	800b12c <SDMMC_GetCmdResp1>
 800aed0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800aed2:	69fb      	ldr	r3, [r7, #28]
}
 800aed4:	4618      	mov	r0, r3
 800aed6:	3720      	adds	r7, #32
 800aed8:	46bd      	mov	sp, r7
 800aeda:	bd80      	pop	{r7, pc}
 800aedc:	05f5e100 	.word	0x05f5e100

0800aee0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800aee0:	b580      	push	{r7, lr}
 800aee2:	b08a      	sub	sp, #40	; 0x28
 800aee4:	af00      	add	r7, sp, #0
 800aee6:	60f8      	str	r0, [r7, #12]
 800aee8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800aef0:	2307      	movs	r3, #7
 800aef2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800aef4:	2340      	movs	r3, #64	; 0x40
 800aef6:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800aef8:	2300      	movs	r3, #0
 800aefa:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800aefc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af00:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af02:	f107 0310 	add.w	r3, r7, #16
 800af06:	4619      	mov	r1, r3
 800af08:	68f8      	ldr	r0, [r7, #12]
 800af0a:	f7ff fea7 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800af0e:	f241 3288 	movw	r2, #5000	; 0x1388
 800af12:	2107      	movs	r1, #7
 800af14:	68f8      	ldr	r0, [r7, #12]
 800af16:	f000 f909 	bl	800b12c <SDMMC_GetCmdResp1>
 800af1a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800af1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3728      	adds	r7, #40	; 0x28
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800af26:	b580      	push	{r7, lr}
 800af28:	b088      	sub	sp, #32
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800af2e:	2300      	movs	r3, #0
 800af30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800af32:	2300      	movs	r3, #0
 800af34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800af36:	2300      	movs	r3, #0
 800af38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af3a:	2300      	movs	r3, #0
 800af3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af44:	f107 0308 	add.w	r3, r7, #8
 800af48:	4619      	mov	r1, r3
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f7ff fe86 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800af50:	6878      	ldr	r0, [r7, #4]
 800af52:	f000 fb23 	bl	800b59c <SDMMC_GetCmdError>
 800af56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af58:	69fb      	ldr	r3, [r7, #28]
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	3720      	adds	r7, #32
 800af5e:	46bd      	mov	sp, r7
 800af60:	bd80      	pop	{r7, pc}

0800af62 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800af62:	b580      	push	{r7, lr}
 800af64:	b088      	sub	sp, #32
 800af66:	af00      	add	r7, sp, #0
 800af68:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800af6a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800af6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800af70:	2308      	movs	r3, #8
 800af72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800af74:	2340      	movs	r3, #64	; 0x40
 800af76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800af78:	2300      	movs	r3, #0
 800af7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800af7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800af80:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800af82:	f107 0308 	add.w	r3, r7, #8
 800af86:	4619      	mov	r1, r3
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f7ff fe67 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800af8e:	6878      	ldr	r0, [r7, #4]
 800af90:	f000 fab6 	bl	800b500 <SDMMC_GetCmdResp7>
 800af94:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800af96:	69fb      	ldr	r3, [r7, #28]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3720      	adds	r7, #32
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b088      	sub	sp, #32
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
 800afa8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800afae:	2337      	movs	r3, #55	; 0x37
 800afb0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800afb2:	2340      	movs	r3, #64	; 0x40
 800afb4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800afb6:	2300      	movs	r3, #0
 800afb8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800afba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800afbe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800afc0:	f107 0308 	add.w	r3, r7, #8
 800afc4:	4619      	mov	r1, r3
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f7ff fe48 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800afcc:	f241 3288 	movw	r2, #5000	; 0x1388
 800afd0:	2137      	movs	r1, #55	; 0x37
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f8aa 	bl	800b12c <SDMMC_GetCmdResp1>
 800afd8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800afda:	69fb      	ldr	r3, [r7, #28]
}
 800afdc:	4618      	mov	r0, r3
 800afde:	3720      	adds	r7, #32
 800afe0:	46bd      	mov	sp, r7
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b088      	sub	sp, #32
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
 800afec:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800afee:	683a      	ldr	r2, [r7, #0]
 800aff0:	4b0d      	ldr	r3, [pc, #52]	; (800b028 <SDMMC_CmdAppOperCommand+0x44>)
 800aff2:	4313      	orrs	r3, r2
 800aff4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800aff6:	2329      	movs	r3, #41	; 0x29
 800aff8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800affa:	2340      	movs	r3, #64	; 0x40
 800affc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800affe:	2300      	movs	r3, #0
 800b000:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b002:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b006:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b008:	f107 0308 	add.w	r3, r7, #8
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7ff fe24 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800b014:	6878      	ldr	r0, [r7, #4]
 800b016:	f000 f9bf 	bl	800b398 <SDMMC_GetCmdResp3>
 800b01a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b01c:	69fb      	ldr	r3, [r7, #28]
}
 800b01e:	4618      	mov	r0, r3
 800b020:	3720      	adds	r7, #32
 800b022:	46bd      	mov	sp, r7
 800b024:	bd80      	pop	{r7, pc}
 800b026:	bf00      	nop
 800b028:	80100000 	.word	0x80100000

0800b02c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800b02c:	b580      	push	{r7, lr}
 800b02e:	b088      	sub	sp, #32
 800b030:	af00      	add	r7, sp, #0
 800b032:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800b034:	2300      	movs	r3, #0
 800b036:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800b038:	2302      	movs	r3, #2
 800b03a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b03c:	23c0      	movs	r3, #192	; 0xc0
 800b03e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b040:	2300      	movs	r3, #0
 800b042:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b044:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b048:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b04a:	f107 0308 	add.w	r3, r7, #8
 800b04e:	4619      	mov	r1, r3
 800b050:	6878      	ldr	r0, [r7, #4]
 800b052:	f7ff fe03 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b056:	6878      	ldr	r0, [r7, #4]
 800b058:	f000 f956 	bl	800b308 <SDMMC_GetCmdResp2>
 800b05c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b05e:	69fb      	ldr	r3, [r7, #28]
}
 800b060:	4618      	mov	r0, r3
 800b062:	3720      	adds	r7, #32
 800b064:	46bd      	mov	sp, r7
 800b066:	bd80      	pop	{r7, pc}

0800b068 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b068:	b580      	push	{r7, lr}
 800b06a:	b088      	sub	sp, #32
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	6078      	str	r0, [r7, #4]
 800b070:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800b076:	2309      	movs	r3, #9
 800b078:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800b07a:	23c0      	movs	r3, #192	; 0xc0
 800b07c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b07e:	2300      	movs	r3, #0
 800b080:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b082:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b086:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b088:	f107 0308 	add.w	r3, r7, #8
 800b08c:	4619      	mov	r1, r3
 800b08e:	6878      	ldr	r0, [r7, #4]
 800b090:	f7ff fde4 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800b094:	6878      	ldr	r0, [r7, #4]
 800b096:	f000 f937 	bl	800b308 <SDMMC_GetCmdResp2>
 800b09a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b09c:	69fb      	ldr	r3, [r7, #28]
}
 800b09e:	4618      	mov	r0, r3
 800b0a0:	3720      	adds	r7, #32
 800b0a2:	46bd      	mov	sp, r7
 800b0a4:	bd80      	pop	{r7, pc}

0800b0a6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800b0a6:	b580      	push	{r7, lr}
 800b0a8:	b088      	sub	sp, #32
 800b0aa:	af00      	add	r7, sp, #0
 800b0ac:	6078      	str	r0, [r7, #4]
 800b0ae:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800b0b4:	2303      	movs	r3, #3
 800b0b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0b8:	2340      	movs	r3, #64	; 0x40
 800b0ba:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0bc:	2300      	movs	r3, #0
 800b0be:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b0c0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b0c4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b0c6:	f107 0308 	add.w	r3, r7, #8
 800b0ca:	4619      	mov	r1, r3
 800b0cc:	6878      	ldr	r0, [r7, #4]
 800b0ce:	f7ff fdc5 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800b0d2:	683a      	ldr	r2, [r7, #0]
 800b0d4:	2103      	movs	r1, #3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 f99c 	bl	800b414 <SDMMC_GetCmdResp6>
 800b0dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b0de:	69fb      	ldr	r3, [r7, #28]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3720      	adds	r7, #32
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800b0e8:	b580      	push	{r7, lr}
 800b0ea:	b088      	sub	sp, #32
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
 800b0f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800b0f2:	683b      	ldr	r3, [r7, #0]
 800b0f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800b0f6:	230d      	movs	r3, #13
 800b0f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800b0fa:	2340      	movs	r3, #64	; 0x40
 800b0fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800b0fe:	2300      	movs	r3, #0
 800b100:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800b102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b106:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800b108:	f107 0308 	add.w	r3, r7, #8
 800b10c:	4619      	mov	r1, r3
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	f7ff fda4 	bl	800ac5c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800b114:	f241 3288 	movw	r2, #5000	; 0x1388
 800b118:	210d      	movs	r1, #13
 800b11a:	6878      	ldr	r0, [r7, #4]
 800b11c:	f000 f806 	bl	800b12c <SDMMC_GetCmdResp1>
 800b120:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800b122:	69fb      	ldr	r3, [r7, #28]
}
 800b124:	4618      	mov	r0, r3
 800b126:	3720      	adds	r7, #32
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	460b      	mov	r3, r1
 800b136:	607a      	str	r2, [r7, #4]
 800b138:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800b13a:	4b70      	ldr	r3, [pc, #448]	; (800b2fc <SDMMC_GetCmdResp1+0x1d0>)
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	4a70      	ldr	r2, [pc, #448]	; (800b300 <SDMMC_GetCmdResp1+0x1d4>)
 800b140:	fba2 2303 	umull	r2, r3, r2, r3
 800b144:	0a5a      	lsrs	r2, r3, #9
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	fb02 f303 	mul.w	r3, r2, r3
 800b14c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b14e:	69fb      	ldr	r3, [r7, #28]
 800b150:	1e5a      	subs	r2, r3, #1
 800b152:	61fa      	str	r2, [r7, #28]
 800b154:	2b00      	cmp	r3, #0
 800b156:	d102      	bne.n	800b15e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b158:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b15c:	e0c9      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b162:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d0ef      	beq.n	800b14e <SDMMC_GetCmdResp1+0x22>
 800b16e:	69bb      	ldr	r3, [r7, #24]
 800b170:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b174:	2b00      	cmp	r3, #0
 800b176:	d1ea      	bne.n	800b14e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b17c:	f003 0304 	and.w	r3, r3, #4
 800b180:	2b00      	cmp	r3, #0
 800b182:	d004      	beq.n	800b18e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	2204      	movs	r2, #4
 800b188:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b18a:	2304      	movs	r3, #4
 800b18c:	e0b1      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b192:	f003 0301 	and.w	r3, r3, #1
 800b196:	2b00      	cmp	r3, #0
 800b198:	d004      	beq.n	800b1a4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b19a:	68fb      	ldr	r3, [r7, #12]
 800b19c:	2201      	movs	r2, #1
 800b19e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e0a6      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	22c5      	movs	r2, #197	; 0xc5
 800b1a8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f7ff fd80 	bl	800acb0 <SDMMC_GetCommandResponse>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	7afb      	ldrb	r3, [r7, #11]
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d001      	beq.n	800b1be <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e099      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b1be:	2100      	movs	r1, #0
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f7ff fd82 	bl	800acca <SDMMC_GetResponse>
 800b1c6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800b1c8:	697a      	ldr	r2, [r7, #20]
 800b1ca:	4b4e      	ldr	r3, [pc, #312]	; (800b304 <SDMMC_GetCmdResp1+0x1d8>)
 800b1cc:	4013      	ands	r3, r2
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d101      	bne.n	800b1d6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	e08d      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	da02      	bge.n	800b1e2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800b1dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b1e0:	e087      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b1e8:	2b00      	cmp	r3, #0
 800b1ea:	d001      	beq.n	800b1f0 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800b1ec:	2340      	movs	r3, #64	; 0x40
 800b1ee:	e080      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800b1f0:	697b      	ldr	r3, [r7, #20]
 800b1f2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d001      	beq.n	800b1fe <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800b1fa:	2380      	movs	r3, #128	; 0x80
 800b1fc:	e079      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b204:	2b00      	cmp	r3, #0
 800b206:	d002      	beq.n	800b20e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800b208:	f44f 7380 	mov.w	r3, #256	; 0x100
 800b20c:	e071      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b214:	2b00      	cmp	r3, #0
 800b216:	d002      	beq.n	800b21e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800b218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b21c:	e069      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b224:	2b00      	cmp	r3, #0
 800b226:	d002      	beq.n	800b22e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800b228:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800b22c:	e061      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800b22e:	697b      	ldr	r3, [r7, #20]
 800b230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800b234:	2b00      	cmp	r3, #0
 800b236:	d002      	beq.n	800b23e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800b238:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800b23c:	e059      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800b23e:	697b      	ldr	r3, [r7, #20]
 800b240:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800b244:	2b00      	cmp	r3, #0
 800b246:	d002      	beq.n	800b24e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b248:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b24c:	e051      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b254:	2b00      	cmp	r3, #0
 800b256:	d002      	beq.n	800b25e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b258:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b25c:	e049      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800b25e:	697b      	ldr	r3, [r7, #20]
 800b260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b264:	2b00      	cmp	r3, #0
 800b266:	d002      	beq.n	800b26e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800b268:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800b26c:	e041      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800b278:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b27c:	e039      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800b27e:	697b      	ldr	r3, [r7, #20]
 800b280:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b284:	2b00      	cmp	r3, #0
 800b286:	d002      	beq.n	800b28e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800b288:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800b28c:	e031      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800b28e:	697b      	ldr	r3, [r7, #20]
 800b290:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b294:	2b00      	cmp	r3, #0
 800b296:	d002      	beq.n	800b29e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800b298:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800b29c:	e029      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800b29e:	697b      	ldr	r3, [r7, #20]
 800b2a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800b2a8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b2ac:	e021      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d002      	beq.n	800b2be <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800b2b8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800b2bc:	e019      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b2c4:	2b00      	cmp	r3, #0
 800b2c6:	d002      	beq.n	800b2ce <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800b2c8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800b2cc:	e011      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800b2ce:	697b      	ldr	r3, [r7, #20]
 800b2d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d002      	beq.n	800b2de <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800b2d8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b2dc:	e009      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	f003 0308 	and.w	r3, r3, #8
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800b2e8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800b2ec:	e001      	b.n	800b2f2 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b2ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3720      	adds	r7, #32
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	bd80      	pop	{r7, pc}
 800b2fa:	bf00      	nop
 800b2fc:	20000000 	.word	0x20000000
 800b300:	10624dd3 	.word	0x10624dd3
 800b304:	fdffe008 	.word	0xfdffe008

0800b308 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800b308:	b480      	push	{r7}
 800b30a:	b085      	sub	sp, #20
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b310:	4b1f      	ldr	r3, [pc, #124]	; (800b390 <SDMMC_GetCmdResp2+0x88>)
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	4a1f      	ldr	r2, [pc, #124]	; (800b394 <SDMMC_GetCmdResp2+0x8c>)
 800b316:	fba2 2303 	umull	r2, r3, r2, r3
 800b31a:	0a5b      	lsrs	r3, r3, #9
 800b31c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b320:	fb02 f303 	mul.w	r3, r2, r3
 800b324:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	1e5a      	subs	r2, r3, #1
 800b32a:	60fa      	str	r2, [r7, #12]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d102      	bne.n	800b336 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b330:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b334:	e026      	b.n	800b384 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b33a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b342:	2b00      	cmp	r3, #0
 800b344:	d0ef      	beq.n	800b326 <SDMMC_GetCmdResp2+0x1e>
 800b346:	68bb      	ldr	r3, [r7, #8]
 800b348:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1ea      	bne.n	800b326 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b354:	f003 0304 	and.w	r3, r3, #4
 800b358:	2b00      	cmp	r3, #0
 800b35a:	d004      	beq.n	800b366 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	2204      	movs	r2, #4
 800b360:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b362:	2304      	movs	r3, #4
 800b364:	e00e      	b.n	800b384 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b36a:	f003 0301 	and.w	r3, r3, #1
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d004      	beq.n	800b37c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	2201      	movs	r2, #1
 800b376:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b378:	2301      	movs	r3, #1
 800b37a:	e003      	b.n	800b384 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	22c5      	movs	r2, #197	; 0xc5
 800b380:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800b382:	2300      	movs	r3, #0
}
 800b384:	4618      	mov	r0, r3
 800b386:	3714      	adds	r7, #20
 800b388:	46bd      	mov	sp, r7
 800b38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b38e:	4770      	bx	lr
 800b390:	20000000 	.word	0x20000000
 800b394:	10624dd3 	.word	0x10624dd3

0800b398 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800b398:	b480      	push	{r7}
 800b39a:	b085      	sub	sp, #20
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b3a0:	4b1a      	ldr	r3, [pc, #104]	; (800b40c <SDMMC_GetCmdResp3+0x74>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	4a1a      	ldr	r2, [pc, #104]	; (800b410 <SDMMC_GetCmdResp3+0x78>)
 800b3a6:	fba2 2303 	umull	r2, r3, r2, r3
 800b3aa:	0a5b      	lsrs	r3, r3, #9
 800b3ac:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3b0:	fb02 f303 	mul.w	r3, r2, r3
 800b3b4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	1e5a      	subs	r2, r3, #1
 800b3ba:	60fa      	str	r2, [r7, #12]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d102      	bne.n	800b3c6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b3c0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b3c4:	e01b      	b.n	800b3fe <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3ca:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3cc:	68bb      	ldr	r3, [r7, #8]
 800b3ce:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d0ef      	beq.n	800b3b6 <SDMMC_GetCmdResp3+0x1e>
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1ea      	bne.n	800b3b6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b3e4:	f003 0304 	and.w	r3, r3, #4
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d004      	beq.n	800b3f6 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	2204      	movs	r2, #4
 800b3f0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b3f2:	2304      	movs	r3, #4
 800b3f4:	e003      	b.n	800b3fe <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	22c5      	movs	r2, #197	; 0xc5
 800b3fa:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b3fc:	2300      	movs	r3, #0
}
 800b3fe:	4618      	mov	r0, r3
 800b400:	3714      	adds	r7, #20
 800b402:	46bd      	mov	sp, r7
 800b404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b408:	4770      	bx	lr
 800b40a:	bf00      	nop
 800b40c:	20000000 	.word	0x20000000
 800b410:	10624dd3 	.word	0x10624dd3

0800b414 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b088      	sub	sp, #32
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	460b      	mov	r3, r1
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b422:	4b35      	ldr	r3, [pc, #212]	; (800b4f8 <SDMMC_GetCmdResp6+0xe4>)
 800b424:	681b      	ldr	r3, [r3, #0]
 800b426:	4a35      	ldr	r2, [pc, #212]	; (800b4fc <SDMMC_GetCmdResp6+0xe8>)
 800b428:	fba2 2303 	umull	r2, r3, r2, r3
 800b42c:	0a5b      	lsrs	r3, r3, #9
 800b42e:	f241 3288 	movw	r2, #5000	; 0x1388
 800b432:	fb02 f303 	mul.w	r3, r2, r3
 800b436:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	1e5a      	subs	r2, r3, #1
 800b43c:	61fa      	str	r2, [r7, #28]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d102      	bne.n	800b448 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b442:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b446:	e052      	b.n	800b4ee <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b44c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b44e:	69bb      	ldr	r3, [r7, #24]
 800b450:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b454:	2b00      	cmp	r3, #0
 800b456:	d0ef      	beq.n	800b438 <SDMMC_GetCmdResp6+0x24>
 800b458:	69bb      	ldr	r3, [r7, #24]
 800b45a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d1ea      	bne.n	800b438 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b466:	f003 0304 	and.w	r3, r3, #4
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d004      	beq.n	800b478 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	2204      	movs	r2, #4
 800b472:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b474:	2304      	movs	r3, #4
 800b476:	e03a      	b.n	800b4ee <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b47c:	f003 0301 	and.w	r3, r3, #1
 800b480:	2b00      	cmp	r3, #0
 800b482:	d004      	beq.n	800b48e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b484:	68fb      	ldr	r3, [r7, #12]
 800b486:	2201      	movs	r2, #1
 800b488:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b48a:	2301      	movs	r3, #1
 800b48c:	e02f      	b.n	800b4ee <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	f7ff fc0e 	bl	800acb0 <SDMMC_GetCommandResponse>
 800b494:	4603      	mov	r3, r0
 800b496:	461a      	mov	r2, r3
 800b498:	7afb      	ldrb	r3, [r7, #11]
 800b49a:	4293      	cmp	r3, r2
 800b49c:	d001      	beq.n	800b4a2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	e025      	b.n	800b4ee <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	22c5      	movs	r2, #197	; 0xc5
 800b4a6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800b4a8:	2100      	movs	r1, #0
 800b4aa:	68f8      	ldr	r0, [r7, #12]
 800b4ac:	f7ff fc0d 	bl	800acca <SDMMC_GetResponse>
 800b4b0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d106      	bne.n	800b4ca <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800b4bc:	697b      	ldr	r3, [r7, #20]
 800b4be:	0c1b      	lsrs	r3, r3, #16
 800b4c0:	b29a      	uxth	r2, r3
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800b4c6:	2300      	movs	r3, #0
 800b4c8:	e011      	b.n	800b4ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800b4ca:	697b      	ldr	r3, [r7, #20]
 800b4cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d002      	beq.n	800b4da <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800b4d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b4d8:	e009      	b.n	800b4ee <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800b4da:	697b      	ldr	r3, [r7, #20]
 800b4dc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d002      	beq.n	800b4ea <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800b4e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800b4e8:	e001      	b.n	800b4ee <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800b4ea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800b4ee:	4618      	mov	r0, r3
 800b4f0:	3720      	adds	r7, #32
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	bd80      	pop	{r7, pc}
 800b4f6:	bf00      	nop
 800b4f8:	20000000 	.word	0x20000000
 800b4fc:	10624dd3 	.word	0x10624dd3

0800b500 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800b500:	b480      	push	{r7}
 800b502:	b085      	sub	sp, #20
 800b504:	af00      	add	r7, sp, #0
 800b506:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b508:	4b22      	ldr	r3, [pc, #136]	; (800b594 <SDMMC_GetCmdResp7+0x94>)
 800b50a:	681b      	ldr	r3, [r3, #0]
 800b50c:	4a22      	ldr	r2, [pc, #136]	; (800b598 <SDMMC_GetCmdResp7+0x98>)
 800b50e:	fba2 2303 	umull	r2, r3, r2, r3
 800b512:	0a5b      	lsrs	r3, r3, #9
 800b514:	f241 3288 	movw	r2, #5000	; 0x1388
 800b518:	fb02 f303 	mul.w	r3, r2, r3
 800b51c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	1e5a      	subs	r2, r3, #1
 800b522:	60fa      	str	r2, [r7, #12]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d102      	bne.n	800b52e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b528:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b52c:	e02c      	b.n	800b588 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b532:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b534:	68bb      	ldr	r3, [r7, #8]
 800b536:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800b53a:	2b00      	cmp	r3, #0
 800b53c:	d0ef      	beq.n	800b51e <SDMMC_GetCmdResp7+0x1e>
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800b544:	2b00      	cmp	r3, #0
 800b546:	d1ea      	bne.n	800b51e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b54c:	f003 0304 	and.w	r3, r3, #4
 800b550:	2b00      	cmp	r3, #0
 800b552:	d004      	beq.n	800b55e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	2204      	movs	r2, #4
 800b558:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800b55a:	2304      	movs	r3, #4
 800b55c:	e014      	b.n	800b588 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b562:	f003 0301 	and.w	r3, r3, #1
 800b566:	2b00      	cmp	r3, #0
 800b568:	d004      	beq.n	800b574 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	2201      	movs	r2, #1
 800b56e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800b570:	2301      	movs	r3, #1
 800b572:	e009      	b.n	800b588 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d002      	beq.n	800b586 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	2240      	movs	r2, #64	; 0x40
 800b584:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800b586:	2300      	movs	r3, #0
  
}
 800b588:	4618      	mov	r0, r3
 800b58a:	3714      	adds	r7, #20
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr
 800b594:	20000000 	.word	0x20000000
 800b598:	10624dd3 	.word	0x10624dd3

0800b59c <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800b59c:	b480      	push	{r7}
 800b59e:	b085      	sub	sp, #20
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800b5a4:	4b11      	ldr	r3, [pc, #68]	; (800b5ec <SDMMC_GetCmdError+0x50>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	4a11      	ldr	r2, [pc, #68]	; (800b5f0 <SDMMC_GetCmdError+0x54>)
 800b5aa:	fba2 2303 	umull	r2, r3, r2, r3
 800b5ae:	0a5b      	lsrs	r3, r3, #9
 800b5b0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b5b4:	fb02 f303 	mul.w	r3, r2, r3
 800b5b8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	1e5a      	subs	r2, r3, #1
 800b5be:	60fa      	str	r2, [r7, #12]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d102      	bne.n	800b5ca <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800b5c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b5c8:	e009      	b.n	800b5de <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b5ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d0f1      	beq.n	800b5ba <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	22c5      	movs	r2, #197	; 0xc5
 800b5da:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800b5dc:	2300      	movs	r3, #0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3714      	adds	r7, #20
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e8:	4770      	bx	lr
 800b5ea:	bf00      	nop
 800b5ec:	20000000 	.word	0x20000000
 800b5f0:	10624dd3 	.word	0x10624dd3

0800b5f4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b5f4:	b084      	sub	sp, #16
 800b5f6:	b580      	push	{r7, lr}
 800b5f8:	b084      	sub	sp, #16
 800b5fa:	af00      	add	r7, sp, #0
 800b5fc:	6078      	str	r0, [r7, #4]
 800b5fe:	f107 001c 	add.w	r0, r7, #28
 800b602:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b608:	2b01      	cmp	r3, #1
 800b60a:	d120      	bne.n	800b64e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b610:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	68da      	ldr	r2, [r3, #12]
 800b61c:	4b20      	ldr	r3, [pc, #128]	; (800b6a0 <USB_CoreInit+0xac>)
 800b61e:	4013      	ands	r3, r2
 800b620:	687a      	ldr	r2, [r7, #4]
 800b622:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	68db      	ldr	r3, [r3, #12]
 800b628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b632:	2b01      	cmp	r3, #1
 800b634:	d105      	bne.n	800b642 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	68db      	ldr	r3, [r3, #12]
 800b63a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f001 fc0e 	bl	800ce64 <USB_CoreReset>
 800b648:	4603      	mov	r3, r0
 800b64a:	73fb      	strb	r3, [r7, #15]
 800b64c:	e010      	b.n	800b670 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	68db      	ldr	r3, [r3, #12]
 800b652:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f001 fc02 	bl	800ce64 <USB_CoreReset>
 800b660:	4603      	mov	r3, r0
 800b662:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b668:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800b670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b672:	2b01      	cmp	r3, #1
 800b674:	d10b      	bne.n	800b68e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	689b      	ldr	r3, [r3, #8]
 800b67a:	f043 0206 	orr.w	r2, r3, #6
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	689b      	ldr	r3, [r3, #8]
 800b686:	f043 0220 	orr.w	r2, r3, #32
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800b68e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b690:	4618      	mov	r0, r3
 800b692:	3710      	adds	r7, #16
 800b694:	46bd      	mov	sp, r7
 800b696:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b69a:	b004      	add	sp, #16
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	ffbdffbf 	.word	0xffbdffbf

0800b6a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800b6a4:	b480      	push	{r7}
 800b6a6:	b087      	sub	sp, #28
 800b6a8:	af00      	add	r7, sp, #0
 800b6aa:	60f8      	str	r0, [r7, #12]
 800b6ac:	60b9      	str	r1, [r7, #8]
 800b6ae:	4613      	mov	r3, r2
 800b6b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800b6b2:	79fb      	ldrb	r3, [r7, #7]
 800b6b4:	2b02      	cmp	r3, #2
 800b6b6:	d165      	bne.n	800b784 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800b6b8:	68bb      	ldr	r3, [r7, #8]
 800b6ba:	4a41      	ldr	r2, [pc, #260]	; (800b7c0 <USB_SetTurnaroundTime+0x11c>)
 800b6bc:	4293      	cmp	r3, r2
 800b6be:	d906      	bls.n	800b6ce <USB_SetTurnaroundTime+0x2a>
 800b6c0:	68bb      	ldr	r3, [r7, #8]
 800b6c2:	4a40      	ldr	r2, [pc, #256]	; (800b7c4 <USB_SetTurnaroundTime+0x120>)
 800b6c4:	4293      	cmp	r3, r2
 800b6c6:	d202      	bcs.n	800b6ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800b6c8:	230f      	movs	r3, #15
 800b6ca:	617b      	str	r3, [r7, #20]
 800b6cc:	e062      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	4a3c      	ldr	r2, [pc, #240]	; (800b7c4 <USB_SetTurnaroundTime+0x120>)
 800b6d2:	4293      	cmp	r3, r2
 800b6d4:	d306      	bcc.n	800b6e4 <USB_SetTurnaroundTime+0x40>
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	4a3b      	ldr	r2, [pc, #236]	; (800b7c8 <USB_SetTurnaroundTime+0x124>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d202      	bcs.n	800b6e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800b6de:	230e      	movs	r3, #14
 800b6e0:	617b      	str	r3, [r7, #20]
 800b6e2:	e057      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	4a38      	ldr	r2, [pc, #224]	; (800b7c8 <USB_SetTurnaroundTime+0x124>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d306      	bcc.n	800b6fa <USB_SetTurnaroundTime+0x56>
 800b6ec:	68bb      	ldr	r3, [r7, #8]
 800b6ee:	4a37      	ldr	r2, [pc, #220]	; (800b7cc <USB_SetTurnaroundTime+0x128>)
 800b6f0:	4293      	cmp	r3, r2
 800b6f2:	d202      	bcs.n	800b6fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800b6f4:	230d      	movs	r3, #13
 800b6f6:	617b      	str	r3, [r7, #20]
 800b6f8:	e04c      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800b6fa:	68bb      	ldr	r3, [r7, #8]
 800b6fc:	4a33      	ldr	r2, [pc, #204]	; (800b7cc <USB_SetTurnaroundTime+0x128>)
 800b6fe:	4293      	cmp	r3, r2
 800b700:	d306      	bcc.n	800b710 <USB_SetTurnaroundTime+0x6c>
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	4a32      	ldr	r2, [pc, #200]	; (800b7d0 <USB_SetTurnaroundTime+0x12c>)
 800b706:	4293      	cmp	r3, r2
 800b708:	d802      	bhi.n	800b710 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800b70a:	230c      	movs	r3, #12
 800b70c:	617b      	str	r3, [r7, #20]
 800b70e:	e041      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800b710:	68bb      	ldr	r3, [r7, #8]
 800b712:	4a2f      	ldr	r2, [pc, #188]	; (800b7d0 <USB_SetTurnaroundTime+0x12c>)
 800b714:	4293      	cmp	r3, r2
 800b716:	d906      	bls.n	800b726 <USB_SetTurnaroundTime+0x82>
 800b718:	68bb      	ldr	r3, [r7, #8]
 800b71a:	4a2e      	ldr	r2, [pc, #184]	; (800b7d4 <USB_SetTurnaroundTime+0x130>)
 800b71c:	4293      	cmp	r3, r2
 800b71e:	d802      	bhi.n	800b726 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800b720:	230b      	movs	r3, #11
 800b722:	617b      	str	r3, [r7, #20]
 800b724:	e036      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	4a2a      	ldr	r2, [pc, #168]	; (800b7d4 <USB_SetTurnaroundTime+0x130>)
 800b72a:	4293      	cmp	r3, r2
 800b72c:	d906      	bls.n	800b73c <USB_SetTurnaroundTime+0x98>
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	4a29      	ldr	r2, [pc, #164]	; (800b7d8 <USB_SetTurnaroundTime+0x134>)
 800b732:	4293      	cmp	r3, r2
 800b734:	d802      	bhi.n	800b73c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800b736:	230a      	movs	r3, #10
 800b738:	617b      	str	r3, [r7, #20]
 800b73a:	e02b      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	4a26      	ldr	r2, [pc, #152]	; (800b7d8 <USB_SetTurnaroundTime+0x134>)
 800b740:	4293      	cmp	r3, r2
 800b742:	d906      	bls.n	800b752 <USB_SetTurnaroundTime+0xae>
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	4a25      	ldr	r2, [pc, #148]	; (800b7dc <USB_SetTurnaroundTime+0x138>)
 800b748:	4293      	cmp	r3, r2
 800b74a:	d202      	bcs.n	800b752 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800b74c:	2309      	movs	r3, #9
 800b74e:	617b      	str	r3, [r7, #20]
 800b750:	e020      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	4a21      	ldr	r2, [pc, #132]	; (800b7dc <USB_SetTurnaroundTime+0x138>)
 800b756:	4293      	cmp	r3, r2
 800b758:	d306      	bcc.n	800b768 <USB_SetTurnaroundTime+0xc4>
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	4a20      	ldr	r2, [pc, #128]	; (800b7e0 <USB_SetTurnaroundTime+0x13c>)
 800b75e:	4293      	cmp	r3, r2
 800b760:	d802      	bhi.n	800b768 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800b762:	2308      	movs	r3, #8
 800b764:	617b      	str	r3, [r7, #20]
 800b766:	e015      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	4a1d      	ldr	r2, [pc, #116]	; (800b7e0 <USB_SetTurnaroundTime+0x13c>)
 800b76c:	4293      	cmp	r3, r2
 800b76e:	d906      	bls.n	800b77e <USB_SetTurnaroundTime+0xda>
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	4a1c      	ldr	r2, [pc, #112]	; (800b7e4 <USB_SetTurnaroundTime+0x140>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d202      	bcs.n	800b77e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800b778:	2307      	movs	r3, #7
 800b77a:	617b      	str	r3, [r7, #20]
 800b77c:	e00a      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800b77e:	2306      	movs	r3, #6
 800b780:	617b      	str	r3, [r7, #20]
 800b782:	e007      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800b784:	79fb      	ldrb	r3, [r7, #7]
 800b786:	2b00      	cmp	r3, #0
 800b788:	d102      	bne.n	800b790 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800b78a:	2309      	movs	r3, #9
 800b78c:	617b      	str	r3, [r7, #20]
 800b78e:	e001      	b.n	800b794 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800b790:	2309      	movs	r3, #9
 800b792:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	68db      	ldr	r3, [r3, #12]
 800b798:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	68da      	ldr	r2, [r3, #12]
 800b7a4:	697b      	ldr	r3, [r7, #20]
 800b7a6:	029b      	lsls	r3, r3, #10
 800b7a8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800b7ac:	431a      	orrs	r2, r3
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b7b2:	2300      	movs	r3, #0
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	371c      	adds	r7, #28
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr
 800b7c0:	00d8acbf 	.word	0x00d8acbf
 800b7c4:	00e4e1c0 	.word	0x00e4e1c0
 800b7c8:	00f42400 	.word	0x00f42400
 800b7cc:	01067380 	.word	0x01067380
 800b7d0:	011a499f 	.word	0x011a499f
 800b7d4:	01312cff 	.word	0x01312cff
 800b7d8:	014ca43f 	.word	0x014ca43f
 800b7dc:	016e3600 	.word	0x016e3600
 800b7e0:	01a6ab1f 	.word	0x01a6ab1f
 800b7e4:	01e84800 	.word	0x01e84800

0800b7e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b083      	sub	sp, #12
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	689b      	ldr	r3, [r3, #8]
 800b7f4:	f043 0201 	orr.w	r2, r3, #1
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b7fc:	2300      	movs	r3, #0
}
 800b7fe:	4618      	mov	r0, r3
 800b800:	370c      	adds	r7, #12
 800b802:	46bd      	mov	sp, r7
 800b804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b808:	4770      	bx	lr

0800b80a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800b80a:	b480      	push	{r7}
 800b80c:	b083      	sub	sp, #12
 800b80e:	af00      	add	r7, sp, #0
 800b810:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	689b      	ldr	r3, [r3, #8]
 800b816:	f023 0201 	bic.w	r2, r3, #1
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800b81e:	2300      	movs	r3, #0
}
 800b820:	4618      	mov	r0, r3
 800b822:	370c      	adds	r7, #12
 800b824:	46bd      	mov	sp, r7
 800b826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82a:	4770      	bx	lr

0800b82c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b084      	sub	sp, #16
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	460b      	mov	r3, r1
 800b836:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800b838:	2300      	movs	r3, #0
 800b83a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800b848:	78fb      	ldrb	r3, [r7, #3]
 800b84a:	2b01      	cmp	r3, #1
 800b84c:	d115      	bne.n	800b87a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	68db      	ldr	r3, [r3, #12]
 800b852:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b85a:	2001      	movs	r0, #1
 800b85c:	f7f7 fc1c 	bl	8003098 <HAL_Delay>
      ms++;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	3301      	adds	r3, #1
 800b864:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800b866:	6878      	ldr	r0, [r7, #4]
 800b868:	f001 fa6c 	bl	800cd44 <USB_GetMode>
 800b86c:	4603      	mov	r3, r0
 800b86e:	2b01      	cmp	r3, #1
 800b870:	d01e      	beq.n	800b8b0 <USB_SetCurrentMode+0x84>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b31      	cmp	r3, #49	; 0x31
 800b876:	d9f0      	bls.n	800b85a <USB_SetCurrentMode+0x2e>
 800b878:	e01a      	b.n	800b8b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800b87a:	78fb      	ldrb	r3, [r7, #3]
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d115      	bne.n	800b8ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800b88c:	2001      	movs	r0, #1
 800b88e:	f7f7 fc03 	bl	8003098 <HAL_Delay>
      ms++;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3301      	adds	r3, #1
 800b896:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f001 fa53 	bl	800cd44 <USB_GetMode>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d005      	beq.n	800b8b0 <USB_SetCurrentMode+0x84>
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2b31      	cmp	r3, #49	; 0x31
 800b8a8:	d9f0      	bls.n	800b88c <USB_SetCurrentMode+0x60>
 800b8aa:	e001      	b.n	800b8b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800b8ac:	2301      	movs	r3, #1
 800b8ae:	e005      	b.n	800b8bc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	2b32      	cmp	r3, #50	; 0x32
 800b8b4:	d101      	bne.n	800b8ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e000      	b.n	800b8bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800b8ba:	2300      	movs	r3, #0
}
 800b8bc:	4618      	mov	r0, r3
 800b8be:	3710      	adds	r7, #16
 800b8c0:	46bd      	mov	sp, r7
 800b8c2:	bd80      	pop	{r7, pc}

0800b8c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b8c4:	b084      	sub	sp, #16
 800b8c6:	b580      	push	{r7, lr}
 800b8c8:	b086      	sub	sp, #24
 800b8ca:	af00      	add	r7, sp, #0
 800b8cc:	6078      	str	r0, [r7, #4]
 800b8ce:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800b8d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800b8d6:	2300      	movs	r3, #0
 800b8d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800b8de:	2300      	movs	r3, #0
 800b8e0:	613b      	str	r3, [r7, #16]
 800b8e2:	e009      	b.n	800b8f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800b8e4:	687a      	ldr	r2, [r7, #4]
 800b8e6:	693b      	ldr	r3, [r7, #16]
 800b8e8:	3340      	adds	r3, #64	; 0x40
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	2200      	movs	r2, #0
 800b8f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	3301      	adds	r3, #1
 800b8f6:	613b      	str	r3, [r7, #16]
 800b8f8:	693b      	ldr	r3, [r7, #16]
 800b8fa:	2b0e      	cmp	r3, #14
 800b8fc:	d9f2      	bls.n	800b8e4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800b8fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b900:	2b00      	cmp	r3, #0
 800b902:	d11c      	bne.n	800b93e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	68fa      	ldr	r2, [r7, #12]
 800b90e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b912:	f043 0302 	orr.w	r3, r3, #2
 800b916:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	601a      	str	r2, [r3, #0]
 800b93c:	e005      	b.n	800b94a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b942:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b94a:	68fb      	ldr	r3, [r7, #12]
 800b94c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b950:	461a      	mov	r2, r3
 800b952:	2300      	movs	r3, #0
 800b954:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b95c:	4619      	mov	r1, r3
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b964:	461a      	mov	r2, r3
 800b966:	680b      	ldr	r3, [r1, #0]
 800b968:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b96a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d10c      	bne.n	800b98a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b972:	2b00      	cmp	r3, #0
 800b974:	d104      	bne.n	800b980 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b976:	2100      	movs	r1, #0
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f000 f965 	bl	800bc48 <USB_SetDevSpeed>
 800b97e:	e008      	b.n	800b992 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b980:	2101      	movs	r1, #1
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 f960 	bl	800bc48 <USB_SetDevSpeed>
 800b988:	e003      	b.n	800b992 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b98a:	2103      	movs	r1, #3
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f95b 	bl	800bc48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b992:	2110      	movs	r1, #16
 800b994:	6878      	ldr	r0, [r7, #4]
 800b996:	f000 f8f3 	bl	800bb80 <USB_FlushTxFifo>
 800b99a:	4603      	mov	r3, r0
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d001      	beq.n	800b9a4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b9a4:	6878      	ldr	r0, [r7, #4]
 800b9a6:	f000 f91f 	bl	800bbe8 <USB_FlushRxFifo>
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d001      	beq.n	800b9b4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b9b0:	2301      	movs	r3, #1
 800b9b2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9ba:	461a      	mov	r2, r3
 800b9bc:	2300      	movs	r3, #0
 800b9be:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9c6:	461a      	mov	r2, r3
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9d2:	461a      	mov	r2, r3
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b9d8:	2300      	movs	r3, #0
 800b9da:	613b      	str	r3, [r7, #16]
 800b9dc:	e043      	b.n	800ba66 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b9de:	693b      	ldr	r3, [r7, #16]
 800b9e0:	015a      	lsls	r2, r3, #5
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	4413      	add	r3, r2
 800b9e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b9f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b9f4:	d118      	bne.n	800ba28 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b9f6:	693b      	ldr	r3, [r7, #16]
 800b9f8:	2b00      	cmp	r3, #0
 800b9fa:	d10a      	bne.n	800ba12 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b9fc:	693b      	ldr	r3, [r7, #16]
 800b9fe:	015a      	lsls	r2, r3, #5
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	4413      	add	r3, r2
 800ba04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba08:	461a      	mov	r2, r3
 800ba0a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ba0e:	6013      	str	r3, [r2, #0]
 800ba10:	e013      	b.n	800ba3a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ba12:	693b      	ldr	r3, [r7, #16]
 800ba14:	015a      	lsls	r2, r3, #5
 800ba16:	68fb      	ldr	r3, [r7, #12]
 800ba18:	4413      	add	r3, r2
 800ba1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba1e:	461a      	mov	r2, r3
 800ba20:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ba24:	6013      	str	r3, [r2, #0]
 800ba26:	e008      	b.n	800ba3a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800ba28:	693b      	ldr	r3, [r7, #16]
 800ba2a:	015a      	lsls	r2, r3, #5
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	4413      	add	r3, r2
 800ba30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba34:	461a      	mov	r2, r3
 800ba36:	2300      	movs	r3, #0
 800ba38:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba46:	461a      	mov	r2, r3
 800ba48:	2300      	movs	r3, #0
 800ba4a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ba4c:	693b      	ldr	r3, [r7, #16]
 800ba4e:	015a      	lsls	r2, r3, #5
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	4413      	add	r3, r2
 800ba54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba58:	461a      	mov	r2, r3
 800ba5a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ba5e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba60:	693b      	ldr	r3, [r7, #16]
 800ba62:	3301      	adds	r3, #1
 800ba64:	613b      	str	r3, [r7, #16]
 800ba66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba68:	693a      	ldr	r2, [r7, #16]
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	d3b7      	bcc.n	800b9de <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ba6e:	2300      	movs	r3, #0
 800ba70:	613b      	str	r3, [r7, #16]
 800ba72:	e043      	b.n	800bafc <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ba74:	693b      	ldr	r3, [r7, #16]
 800ba76:	015a      	lsls	r2, r3, #5
 800ba78:	68fb      	ldr	r3, [r7, #12]
 800ba7a:	4413      	add	r3, r2
 800ba7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ba86:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ba8a:	d118      	bne.n	800babe <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ba8c:	693b      	ldr	r3, [r7, #16]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d10a      	bne.n	800baa8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	015a      	lsls	r2, r3, #5
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	4413      	add	r3, r2
 800ba9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba9e:	461a      	mov	r2, r3
 800baa0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800baa4:	6013      	str	r3, [r2, #0]
 800baa6:	e013      	b.n	800bad0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800baa8:	693b      	ldr	r3, [r7, #16]
 800baaa:	015a      	lsls	r2, r3, #5
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	4413      	add	r3, r2
 800bab0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bab4:	461a      	mov	r2, r3
 800bab6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800baba:	6013      	str	r3, [r2, #0]
 800babc:	e008      	b.n	800bad0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	015a      	lsls	r2, r3, #5
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	4413      	add	r3, r2
 800bac6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baca:	461a      	mov	r2, r3
 800bacc:	2300      	movs	r3, #0
 800bace:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	015a      	lsls	r2, r3, #5
 800bad4:	68fb      	ldr	r3, [r7, #12]
 800bad6:	4413      	add	r3, r2
 800bad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800badc:	461a      	mov	r2, r3
 800bade:	2300      	movs	r3, #0
 800bae0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800bae2:	693b      	ldr	r3, [r7, #16]
 800bae4:	015a      	lsls	r2, r3, #5
 800bae6:	68fb      	ldr	r3, [r7, #12]
 800bae8:	4413      	add	r3, r2
 800baea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baee:	461a      	mov	r2, r3
 800baf0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800baf4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	3301      	adds	r3, #1
 800bafa:	613b      	str	r3, [r7, #16]
 800bafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bafe:	693a      	ldr	r2, [r7, #16]
 800bb00:	429a      	cmp	r2, r3
 800bb02:	d3b7      	bcc.n	800ba74 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb0a:	691b      	ldr	r3, [r3, #16]
 800bb0c:	68fa      	ldr	r2, [r7, #12]
 800bb0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb12:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bb16:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	2200      	movs	r2, #0
 800bb1c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800bb24:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d105      	bne.n	800bb38 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	699b      	ldr	r3, [r3, #24]
 800bb30:	f043 0210 	orr.w	r2, r3, #16
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	699a      	ldr	r2, [r3, #24]
 800bb3c:	4b0e      	ldr	r3, [pc, #56]	; (800bb78 <USB_DevInit+0x2b4>)
 800bb3e:	4313      	orrs	r3, r2
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800bb44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d005      	beq.n	800bb56 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	699b      	ldr	r3, [r3, #24]
 800bb4e:	f043 0208 	orr.w	r2, r3, #8
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800bb56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb58:	2b01      	cmp	r3, #1
 800bb5a:	d105      	bne.n	800bb68 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	699a      	ldr	r2, [r3, #24]
 800bb60:	4b06      	ldr	r3, [pc, #24]	; (800bb7c <USB_DevInit+0x2b8>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	687a      	ldr	r2, [r7, #4]
 800bb66:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800bb68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	3718      	adds	r7, #24
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb74:	b004      	add	sp, #16
 800bb76:	4770      	bx	lr
 800bb78:	803c3800 	.word	0x803c3800
 800bb7c:	40000004 	.word	0x40000004

0800bb80 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b085      	sub	sp, #20
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
 800bb88:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	3301      	adds	r3, #1
 800bb92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	4a13      	ldr	r2, [pc, #76]	; (800bbe4 <USB_FlushTxFifo+0x64>)
 800bb98:	4293      	cmp	r3, r2
 800bb9a:	d901      	bls.n	800bba0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bb9c:	2303      	movs	r3, #3
 800bb9e:	e01b      	b.n	800bbd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	691b      	ldr	r3, [r3, #16]
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	daf2      	bge.n	800bb8e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	019b      	lsls	r3, r3, #6
 800bbb0:	f043 0220 	orr.w	r2, r3, #32
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3301      	adds	r3, #1
 800bbbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	4a08      	ldr	r2, [pc, #32]	; (800bbe4 <USB_FlushTxFifo+0x64>)
 800bbc2:	4293      	cmp	r3, r2
 800bbc4:	d901      	bls.n	800bbca <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bbc6:	2303      	movs	r3, #3
 800bbc8:	e006      	b.n	800bbd8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	f003 0320 	and.w	r3, r3, #32
 800bbd2:	2b20      	cmp	r3, #32
 800bbd4:	d0f0      	beq.n	800bbb8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bbd6:	2300      	movs	r3, #0
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3714      	adds	r7, #20
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbe2:	4770      	bx	lr
 800bbe4:	00030d40 	.word	0x00030d40

0800bbe8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bbe8:	b480      	push	{r7}
 800bbea:	b085      	sub	sp, #20
 800bbec:	af00      	add	r7, sp, #0
 800bbee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bbf0:	2300      	movs	r3, #0
 800bbf2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	4a11      	ldr	r2, [pc, #68]	; (800bc44 <USB_FlushRxFifo+0x5c>)
 800bbfe:	4293      	cmp	r3, r2
 800bc00:	d901      	bls.n	800bc06 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bc02:	2303      	movs	r3, #3
 800bc04:	e018      	b.n	800bc38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	691b      	ldr	r3, [r3, #16]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	daf2      	bge.n	800bbf4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bc0e:	2300      	movs	r3, #0
 800bc10:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	2210      	movs	r2, #16
 800bc16:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bc1e:	68fb      	ldr	r3, [r7, #12]
 800bc20:	4a08      	ldr	r2, [pc, #32]	; (800bc44 <USB_FlushRxFifo+0x5c>)
 800bc22:	4293      	cmp	r3, r2
 800bc24:	d901      	bls.n	800bc2a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bc26:	2303      	movs	r3, #3
 800bc28:	e006      	b.n	800bc38 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	691b      	ldr	r3, [r3, #16]
 800bc2e:	f003 0310 	and.w	r3, r3, #16
 800bc32:	2b10      	cmp	r3, #16
 800bc34:	d0f0      	beq.n	800bc18 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bc36:	2300      	movs	r3, #0
}
 800bc38:	4618      	mov	r0, r3
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr
 800bc44:	00030d40 	.word	0x00030d40

0800bc48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800bc48:	b480      	push	{r7}
 800bc4a:	b085      	sub	sp, #20
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	6078      	str	r0, [r7, #4]
 800bc50:	460b      	mov	r3, r1
 800bc52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc54:	687b      	ldr	r3, [r7, #4]
 800bc56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc5e:	681a      	ldr	r2, [r3, #0]
 800bc60:	78fb      	ldrb	r3, [r7, #3]
 800bc62:	68f9      	ldr	r1, [r7, #12]
 800bc64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bc68:	4313      	orrs	r3, r2
 800bc6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800bc6c:	2300      	movs	r3, #0
}
 800bc6e:	4618      	mov	r0, r3
 800bc70:	3714      	adds	r7, #20
 800bc72:	46bd      	mov	sp, r7
 800bc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc78:	4770      	bx	lr

0800bc7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800bc7a:	b480      	push	{r7}
 800bc7c:	b087      	sub	sp, #28
 800bc7e:	af00      	add	r7, sp, #0
 800bc80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800bc86:	693b      	ldr	r3, [r7, #16]
 800bc88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc8c:	689b      	ldr	r3, [r3, #8]
 800bc8e:	f003 0306 	and.w	r3, r3, #6
 800bc92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d102      	bne.n	800bca0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	75fb      	strb	r3, [r7, #23]
 800bc9e:	e00a      	b.n	800bcb6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	2b02      	cmp	r3, #2
 800bca4:	d002      	beq.n	800bcac <USB_GetDevSpeed+0x32>
 800bca6:	68fb      	ldr	r3, [r7, #12]
 800bca8:	2b06      	cmp	r3, #6
 800bcaa:	d102      	bne.n	800bcb2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800bcac:	2302      	movs	r3, #2
 800bcae:	75fb      	strb	r3, [r7, #23]
 800bcb0:	e001      	b.n	800bcb6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800bcb2:	230f      	movs	r3, #15
 800bcb4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800bcb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	371c      	adds	r7, #28
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bcc4:	b480      	push	{r7}
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	781b      	ldrb	r3, [r3, #0]
 800bcd6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	785b      	ldrb	r3, [r3, #1]
 800bcdc:	2b01      	cmp	r3, #1
 800bcde:	d139      	bne.n	800bd54 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bce6:	69da      	ldr	r2, [r3, #28]
 800bce8:	683b      	ldr	r3, [r7, #0]
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	f003 030f 	and.w	r3, r3, #15
 800bcf0:	2101      	movs	r1, #1
 800bcf2:	fa01 f303 	lsl.w	r3, r1, r3
 800bcf6:	b29b      	uxth	r3, r3
 800bcf8:	68f9      	ldr	r1, [r7, #12]
 800bcfa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bcfe:	4313      	orrs	r3, r2
 800bd00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800bd02:	68bb      	ldr	r3, [r7, #8]
 800bd04:	015a      	lsls	r2, r3, #5
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	4413      	add	r3, r2
 800bd0a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd0e:	681b      	ldr	r3, [r3, #0]
 800bd10:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd14:	2b00      	cmp	r3, #0
 800bd16:	d153      	bne.n	800bdc0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	015a      	lsls	r2, r3, #5
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	4413      	add	r3, r2
 800bd20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	683b      	ldr	r3, [r7, #0]
 800bd28:	68db      	ldr	r3, [r3, #12]
 800bd2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd2e:	683b      	ldr	r3, [r7, #0]
 800bd30:	791b      	ldrb	r3, [r3, #4]
 800bd32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800bd36:	68bb      	ldr	r3, [r7, #8]
 800bd38:	059b      	lsls	r3, r3, #22
 800bd3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800bd3c:	431a      	orrs	r2, r3
 800bd3e:	68bb      	ldr	r3, [r7, #8]
 800bd40:	0159      	lsls	r1, r3, #5
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	440b      	add	r3, r1
 800bd46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd4a:	4619      	mov	r1, r3
 800bd4c:	4b20      	ldr	r3, [pc, #128]	; (800bdd0 <USB_ActivateEndpoint+0x10c>)
 800bd4e:	4313      	orrs	r3, r2
 800bd50:	600b      	str	r3, [r1, #0]
 800bd52:	e035      	b.n	800bdc0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd5a:	69da      	ldr	r2, [r3, #28]
 800bd5c:	683b      	ldr	r3, [r7, #0]
 800bd5e:	781b      	ldrb	r3, [r3, #0]
 800bd60:	f003 030f 	and.w	r3, r3, #15
 800bd64:	2101      	movs	r1, #1
 800bd66:	fa01 f303 	lsl.w	r3, r1, r3
 800bd6a:	041b      	lsls	r3, r3, #16
 800bd6c:	68f9      	ldr	r1, [r7, #12]
 800bd6e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd72:	4313      	orrs	r3, r2
 800bd74:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800bd76:	68bb      	ldr	r3, [r7, #8]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d119      	bne.n	800bdc0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	015a      	lsls	r2, r3, #5
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	791b      	ldrb	r3, [r3, #4]
 800bda6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800bda8:	430b      	orrs	r3, r1
 800bdaa:	431a      	orrs	r2, r3
 800bdac:	68bb      	ldr	r3, [r7, #8]
 800bdae:	0159      	lsls	r1, r3, #5
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	440b      	add	r3, r1
 800bdb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdb8:	4619      	mov	r1, r3
 800bdba:	4b05      	ldr	r3, [pc, #20]	; (800bdd0 <USB_ActivateEndpoint+0x10c>)
 800bdbc:	4313      	orrs	r3, r2
 800bdbe:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800bdc0:	2300      	movs	r3, #0
}
 800bdc2:	4618      	mov	r0, r3
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdcc:	4770      	bx	lr
 800bdce:	bf00      	nop
 800bdd0:	10008000 	.word	0x10008000

0800bdd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bdd4:	b480      	push	{r7}
 800bdd6:	b085      	sub	sp, #20
 800bdd8:	af00      	add	r7, sp, #0
 800bdda:	6078      	str	r0, [r7, #4]
 800bddc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	781b      	ldrb	r3, [r3, #0]
 800bde6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800bde8:	683b      	ldr	r3, [r7, #0]
 800bdea:	785b      	ldrb	r3, [r3, #1]
 800bdec:	2b01      	cmp	r3, #1
 800bdee:	d161      	bne.n	800beb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bdf0:	68bb      	ldr	r3, [r7, #8]
 800bdf2:	015a      	lsls	r2, r3, #5
 800bdf4:	68fb      	ldr	r3, [r7, #12]
 800bdf6:	4413      	add	r3, r2
 800bdf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be06:	d11f      	bne.n	800be48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800be08:	68bb      	ldr	r3, [r7, #8]
 800be0a:	015a      	lsls	r2, r3, #5
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	4413      	add	r3, r2
 800be10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68ba      	ldr	r2, [r7, #8]
 800be18:	0151      	lsls	r1, r2, #5
 800be1a:	68fa      	ldr	r2, [r7, #12]
 800be1c:	440a      	add	r2, r1
 800be1e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800be26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800be28:	68bb      	ldr	r3, [r7, #8]
 800be2a:	015a      	lsls	r2, r3, #5
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	4413      	add	r3, r2
 800be30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	68ba      	ldr	r2, [r7, #8]
 800be38:	0151      	lsls	r1, r2, #5
 800be3a:	68fa      	ldr	r2, [r7, #12]
 800be3c:	440a      	add	r2, r1
 800be3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	781b      	ldrb	r3, [r3, #0]
 800be54:	f003 030f 	and.w	r3, r3, #15
 800be58:	2101      	movs	r1, #1
 800be5a:	fa01 f303 	lsl.w	r3, r1, r3
 800be5e:	b29b      	uxth	r3, r3
 800be60:	43db      	mvns	r3, r3
 800be62:	68f9      	ldr	r1, [r7, #12]
 800be64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be68:	4013      	ands	r3, r2
 800be6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800be72:	69da      	ldr	r2, [r3, #28]
 800be74:	683b      	ldr	r3, [r7, #0]
 800be76:	781b      	ldrb	r3, [r3, #0]
 800be78:	f003 030f 	and.w	r3, r3, #15
 800be7c:	2101      	movs	r1, #1
 800be7e:	fa01 f303 	lsl.w	r3, r1, r3
 800be82:	b29b      	uxth	r3, r3
 800be84:	43db      	mvns	r3, r3
 800be86:	68f9      	ldr	r1, [r7, #12]
 800be88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800be8c:	4013      	ands	r3, r2
 800be8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800be90:	68bb      	ldr	r3, [r7, #8]
 800be92:	015a      	lsls	r2, r3, #5
 800be94:	68fb      	ldr	r3, [r7, #12]
 800be96:	4413      	add	r3, r2
 800be98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be9c:	681a      	ldr	r2, [r3, #0]
 800be9e:	68bb      	ldr	r3, [r7, #8]
 800bea0:	0159      	lsls	r1, r3, #5
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	440b      	add	r3, r1
 800bea6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800beaa:	4619      	mov	r1, r3
 800beac:	4b35      	ldr	r3, [pc, #212]	; (800bf84 <USB_DeactivateEndpoint+0x1b0>)
 800beae:	4013      	ands	r3, r2
 800beb0:	600b      	str	r3, [r1, #0]
 800beb2:	e060      	b.n	800bf76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800beb4:	68bb      	ldr	r3, [r7, #8]
 800beb6:	015a      	lsls	r2, r3, #5
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	4413      	add	r3, r2
 800bebc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bec6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800beca:	d11f      	bne.n	800bf0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	015a      	lsls	r2, r3, #5
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	4413      	add	r3, r2
 800bed4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bed8:	681b      	ldr	r3, [r3, #0]
 800beda:	68ba      	ldr	r2, [r7, #8]
 800bedc:	0151      	lsls	r1, r2, #5
 800bede:	68fa      	ldr	r2, [r7, #12]
 800bee0:	440a      	add	r2, r1
 800bee2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bee6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800beea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800beec:	68bb      	ldr	r3, [r7, #8]
 800beee:	015a      	lsls	r2, r3, #5
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	4413      	add	r3, r2
 800bef4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	0151      	lsls	r1, r2, #5
 800befe:	68fa      	ldr	r2, [r7, #12]
 800bf00:	440a      	add	r2, r1
 800bf02:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf06:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bf0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	781b      	ldrb	r3, [r3, #0]
 800bf18:	f003 030f 	and.w	r3, r3, #15
 800bf1c:	2101      	movs	r1, #1
 800bf1e:	fa01 f303 	lsl.w	r3, r1, r3
 800bf22:	041b      	lsls	r3, r3, #16
 800bf24:	43db      	mvns	r3, r3
 800bf26:	68f9      	ldr	r1, [r7, #12]
 800bf28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf2c:	4013      	ands	r3, r2
 800bf2e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf36:	69da      	ldr	r2, [r3, #28]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	f003 030f 	and.w	r3, r3, #15
 800bf40:	2101      	movs	r1, #1
 800bf42:	fa01 f303 	lsl.w	r3, r1, r3
 800bf46:	041b      	lsls	r3, r3, #16
 800bf48:	43db      	mvns	r3, r3
 800bf4a:	68f9      	ldr	r1, [r7, #12]
 800bf4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf50:	4013      	ands	r3, r2
 800bf52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800bf54:	68bb      	ldr	r3, [r7, #8]
 800bf56:	015a      	lsls	r2, r3, #5
 800bf58:	68fb      	ldr	r3, [r7, #12]
 800bf5a:	4413      	add	r3, r2
 800bf5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf60:	681a      	ldr	r2, [r3, #0]
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	0159      	lsls	r1, r3, #5
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	440b      	add	r3, r1
 800bf6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf6e:	4619      	mov	r1, r3
 800bf70:	4b05      	ldr	r3, [pc, #20]	; (800bf88 <USB_DeactivateEndpoint+0x1b4>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800bf76:	2300      	movs	r3, #0
}
 800bf78:	4618      	mov	r0, r3
 800bf7a:	3714      	adds	r7, #20
 800bf7c:	46bd      	mov	sp, r7
 800bf7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf82:	4770      	bx	lr
 800bf84:	ec337800 	.word	0xec337800
 800bf88:	eff37800 	.word	0xeff37800

0800bf8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b08a      	sub	sp, #40	; 0x28
 800bf90:	af02      	add	r7, sp, #8
 800bf92:	60f8      	str	r0, [r7, #12]
 800bf94:	60b9      	str	r1, [r7, #8]
 800bf96:	4613      	mov	r3, r2
 800bf98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800bf9e:	68bb      	ldr	r3, [r7, #8]
 800bfa0:	781b      	ldrb	r3, [r3, #0]
 800bfa2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bfa4:	68bb      	ldr	r3, [r7, #8]
 800bfa6:	785b      	ldrb	r3, [r3, #1]
 800bfa8:	2b01      	cmp	r3, #1
 800bfaa:	f040 8163 	bne.w	800c274 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	699b      	ldr	r3, [r3, #24]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d132      	bne.n	800c01c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800bfb6:	69bb      	ldr	r3, [r7, #24]
 800bfb8:	015a      	lsls	r2, r3, #5
 800bfba:	69fb      	ldr	r3, [r7, #28]
 800bfbc:	4413      	add	r3, r2
 800bfbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfc2:	691a      	ldr	r2, [r3, #16]
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	0159      	lsls	r1, r3, #5
 800bfc8:	69fb      	ldr	r3, [r7, #28]
 800bfca:	440b      	add	r3, r1
 800bfcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfd0:	4619      	mov	r1, r3
 800bfd2:	4ba5      	ldr	r3, [pc, #660]	; (800c268 <USB_EPStartXfer+0x2dc>)
 800bfd4:	4013      	ands	r3, r2
 800bfd6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	015a      	lsls	r2, r3, #5
 800bfdc:	69fb      	ldr	r3, [r7, #28]
 800bfde:	4413      	add	r3, r2
 800bfe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bfe4:	691b      	ldr	r3, [r3, #16]
 800bfe6:	69ba      	ldr	r2, [r7, #24]
 800bfe8:	0151      	lsls	r1, r2, #5
 800bfea:	69fa      	ldr	r2, [r7, #28]
 800bfec:	440a      	add	r2, r1
 800bfee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bff2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bff6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800bff8:	69bb      	ldr	r3, [r7, #24]
 800bffa:	015a      	lsls	r2, r3, #5
 800bffc:	69fb      	ldr	r3, [r7, #28]
 800bffe:	4413      	add	r3, r2
 800c000:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c004:	691a      	ldr	r2, [r3, #16]
 800c006:	69bb      	ldr	r3, [r7, #24]
 800c008:	0159      	lsls	r1, r3, #5
 800c00a:	69fb      	ldr	r3, [r7, #28]
 800c00c:	440b      	add	r3, r1
 800c00e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c012:	4619      	mov	r1, r3
 800c014:	4b95      	ldr	r3, [pc, #596]	; (800c26c <USB_EPStartXfer+0x2e0>)
 800c016:	4013      	ands	r3, r2
 800c018:	610b      	str	r3, [r1, #16]
 800c01a:	e074      	b.n	800c106 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c01c:	69bb      	ldr	r3, [r7, #24]
 800c01e:	015a      	lsls	r2, r3, #5
 800c020:	69fb      	ldr	r3, [r7, #28]
 800c022:	4413      	add	r3, r2
 800c024:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c028:	691a      	ldr	r2, [r3, #16]
 800c02a:	69bb      	ldr	r3, [r7, #24]
 800c02c:	0159      	lsls	r1, r3, #5
 800c02e:	69fb      	ldr	r3, [r7, #28]
 800c030:	440b      	add	r3, r1
 800c032:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c036:	4619      	mov	r1, r3
 800c038:	4b8c      	ldr	r3, [pc, #560]	; (800c26c <USB_EPStartXfer+0x2e0>)
 800c03a:	4013      	ands	r3, r2
 800c03c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c03e:	69bb      	ldr	r3, [r7, #24]
 800c040:	015a      	lsls	r2, r3, #5
 800c042:	69fb      	ldr	r3, [r7, #28]
 800c044:	4413      	add	r3, r2
 800c046:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c04a:	691a      	ldr	r2, [r3, #16]
 800c04c:	69bb      	ldr	r3, [r7, #24]
 800c04e:	0159      	lsls	r1, r3, #5
 800c050:	69fb      	ldr	r3, [r7, #28]
 800c052:	440b      	add	r3, r1
 800c054:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c058:	4619      	mov	r1, r3
 800c05a:	4b83      	ldr	r3, [pc, #524]	; (800c268 <USB_EPStartXfer+0x2dc>)
 800c05c:	4013      	ands	r3, r2
 800c05e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c060:	69bb      	ldr	r3, [r7, #24]
 800c062:	015a      	lsls	r2, r3, #5
 800c064:	69fb      	ldr	r3, [r7, #28]
 800c066:	4413      	add	r3, r2
 800c068:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c06c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800c06e:	68bb      	ldr	r3, [r7, #8]
 800c070:	6999      	ldr	r1, [r3, #24]
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	68db      	ldr	r3, [r3, #12]
 800c076:	440b      	add	r3, r1
 800c078:	1e59      	subs	r1, r3, #1
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	fbb1 f3f3 	udiv	r3, r1, r3
 800c082:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800c084:	4b7a      	ldr	r3, [pc, #488]	; (800c270 <USB_EPStartXfer+0x2e4>)
 800c086:	400b      	ands	r3, r1
 800c088:	69b9      	ldr	r1, [r7, #24]
 800c08a:	0148      	lsls	r0, r1, #5
 800c08c:	69f9      	ldr	r1, [r7, #28]
 800c08e:	4401      	add	r1, r0
 800c090:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c094:	4313      	orrs	r3, r2
 800c096:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c098:	69bb      	ldr	r3, [r7, #24]
 800c09a:	015a      	lsls	r2, r3, #5
 800c09c:	69fb      	ldr	r3, [r7, #28]
 800c09e:	4413      	add	r3, r2
 800c0a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0a4:	691a      	ldr	r2, [r3, #16]
 800c0a6:	68bb      	ldr	r3, [r7, #8]
 800c0a8:	699b      	ldr	r3, [r3, #24]
 800c0aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c0ae:	69b9      	ldr	r1, [r7, #24]
 800c0b0:	0148      	lsls	r0, r1, #5
 800c0b2:	69f9      	ldr	r1, [r7, #28]
 800c0b4:	4401      	add	r1, r0
 800c0b6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c0ba:	4313      	orrs	r3, r2
 800c0bc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	791b      	ldrb	r3, [r3, #4]
 800c0c2:	2b01      	cmp	r3, #1
 800c0c4:	d11f      	bne.n	800c106 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800c0c6:	69bb      	ldr	r3, [r7, #24]
 800c0c8:	015a      	lsls	r2, r3, #5
 800c0ca:	69fb      	ldr	r3, [r7, #28]
 800c0cc:	4413      	add	r3, r2
 800c0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	69ba      	ldr	r2, [r7, #24]
 800c0d6:	0151      	lsls	r1, r2, #5
 800c0d8:	69fa      	ldr	r2, [r7, #28]
 800c0da:	440a      	add	r2, r1
 800c0dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c0e0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800c0e4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800c0e6:	69bb      	ldr	r3, [r7, #24]
 800c0e8:	015a      	lsls	r2, r3, #5
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	4413      	add	r3, r2
 800c0ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c0f2:	691b      	ldr	r3, [r3, #16]
 800c0f4:	69ba      	ldr	r2, [r7, #24]
 800c0f6:	0151      	lsls	r1, r2, #5
 800c0f8:	69fa      	ldr	r2, [r7, #28]
 800c0fa:	440a      	add	r2, r1
 800c0fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c100:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c104:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800c106:	79fb      	ldrb	r3, [r7, #7]
 800c108:	2b01      	cmp	r3, #1
 800c10a:	d14b      	bne.n	800c1a4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c10c:	68bb      	ldr	r3, [r7, #8]
 800c10e:	695b      	ldr	r3, [r3, #20]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d009      	beq.n	800c128 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c114:	69bb      	ldr	r3, [r7, #24]
 800c116:	015a      	lsls	r2, r3, #5
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	4413      	add	r3, r2
 800c11c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c120:	461a      	mov	r2, r3
 800c122:	68bb      	ldr	r3, [r7, #8]
 800c124:	695b      	ldr	r3, [r3, #20]
 800c126:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	791b      	ldrb	r3, [r3, #4]
 800c12c:	2b01      	cmp	r3, #1
 800c12e:	d128      	bne.n	800c182 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c130:	69fb      	ldr	r3, [r7, #28]
 800c132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c136:	689b      	ldr	r3, [r3, #8]
 800c138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d110      	bne.n	800c162 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	69fb      	ldr	r3, [r7, #28]
 800c146:	4413      	add	r3, r2
 800c148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	69ba      	ldr	r2, [r7, #24]
 800c150:	0151      	lsls	r1, r2, #5
 800c152:	69fa      	ldr	r2, [r7, #28]
 800c154:	440a      	add	r2, r1
 800c156:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c15a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c15e:	6013      	str	r3, [r2, #0]
 800c160:	e00f      	b.n	800c182 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c162:	69bb      	ldr	r3, [r7, #24]
 800c164:	015a      	lsls	r2, r3, #5
 800c166:	69fb      	ldr	r3, [r7, #28]
 800c168:	4413      	add	r3, r2
 800c16a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	69ba      	ldr	r2, [r7, #24]
 800c172:	0151      	lsls	r1, r2, #5
 800c174:	69fa      	ldr	r2, [r7, #28]
 800c176:	440a      	add	r2, r1
 800c178:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c17c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c180:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c182:	69bb      	ldr	r3, [r7, #24]
 800c184:	015a      	lsls	r2, r3, #5
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	4413      	add	r3, r2
 800c18a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c18e:	681b      	ldr	r3, [r3, #0]
 800c190:	69ba      	ldr	r2, [r7, #24]
 800c192:	0151      	lsls	r1, r2, #5
 800c194:	69fa      	ldr	r2, [r7, #28]
 800c196:	440a      	add	r2, r1
 800c198:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c19c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1a0:	6013      	str	r3, [r2, #0]
 800c1a2:	e137      	b.n	800c414 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c1a4:	69bb      	ldr	r3, [r7, #24]
 800c1a6:	015a      	lsls	r2, r3, #5
 800c1a8:	69fb      	ldr	r3, [r7, #28]
 800c1aa:	4413      	add	r3, r2
 800c1ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	69ba      	ldr	r2, [r7, #24]
 800c1b4:	0151      	lsls	r1, r2, #5
 800c1b6:	69fa      	ldr	r2, [r7, #28]
 800c1b8:	440a      	add	r2, r1
 800c1ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c1be:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c1c2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	791b      	ldrb	r3, [r3, #4]
 800c1c8:	2b01      	cmp	r3, #1
 800c1ca:	d015      	beq.n	800c1f8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800c1cc:	68bb      	ldr	r3, [r7, #8]
 800c1ce:	699b      	ldr	r3, [r3, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	f000 811f 	beq.w	800c414 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c1d6:	69fb      	ldr	r3, [r7, #28]
 800c1d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1de:	68bb      	ldr	r3, [r7, #8]
 800c1e0:	781b      	ldrb	r3, [r3, #0]
 800c1e2:	f003 030f 	and.w	r3, r3, #15
 800c1e6:	2101      	movs	r1, #1
 800c1e8:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ec:	69f9      	ldr	r1, [r7, #28]
 800c1ee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c1f2:	4313      	orrs	r3, r2
 800c1f4:	634b      	str	r3, [r1, #52]	; 0x34
 800c1f6:	e10d      	b.n	800c414 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c1f8:	69fb      	ldr	r3, [r7, #28]
 800c1fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c1fe:	689b      	ldr	r3, [r3, #8]
 800c200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c204:	2b00      	cmp	r3, #0
 800c206:	d110      	bne.n	800c22a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	015a      	lsls	r2, r3, #5
 800c20c:	69fb      	ldr	r3, [r7, #28]
 800c20e:	4413      	add	r3, r2
 800c210:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	69ba      	ldr	r2, [r7, #24]
 800c218:	0151      	lsls	r1, r2, #5
 800c21a:	69fa      	ldr	r2, [r7, #28]
 800c21c:	440a      	add	r2, r1
 800c21e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c222:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c226:	6013      	str	r3, [r2, #0]
 800c228:	e00f      	b.n	800c24a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800c22a:	69bb      	ldr	r3, [r7, #24]
 800c22c:	015a      	lsls	r2, r3, #5
 800c22e:	69fb      	ldr	r3, [r7, #28]
 800c230:	4413      	add	r3, r2
 800c232:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	69ba      	ldr	r2, [r7, #24]
 800c23a:	0151      	lsls	r1, r2, #5
 800c23c:	69fa      	ldr	r2, [r7, #28]
 800c23e:	440a      	add	r2, r1
 800c240:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c244:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c248:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	6919      	ldr	r1, [r3, #16]
 800c24e:	68bb      	ldr	r3, [r7, #8]
 800c250:	781a      	ldrb	r2, [r3, #0]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	699b      	ldr	r3, [r3, #24]
 800c256:	b298      	uxth	r0, r3
 800c258:	79fb      	ldrb	r3, [r7, #7]
 800c25a:	9300      	str	r3, [sp, #0]
 800c25c:	4603      	mov	r3, r0
 800c25e:	68f8      	ldr	r0, [r7, #12]
 800c260:	f000 faea 	bl	800c838 <USB_WritePacket>
 800c264:	e0d6      	b.n	800c414 <USB_EPStartXfer+0x488>
 800c266:	bf00      	nop
 800c268:	e007ffff 	.word	0xe007ffff
 800c26c:	fff80000 	.word	0xfff80000
 800c270:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c274:	69bb      	ldr	r3, [r7, #24]
 800c276:	015a      	lsls	r2, r3, #5
 800c278:	69fb      	ldr	r3, [r7, #28]
 800c27a:	4413      	add	r3, r2
 800c27c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c280:	691a      	ldr	r2, [r3, #16]
 800c282:	69bb      	ldr	r3, [r7, #24]
 800c284:	0159      	lsls	r1, r3, #5
 800c286:	69fb      	ldr	r3, [r7, #28]
 800c288:	440b      	add	r3, r1
 800c28a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c28e:	4619      	mov	r1, r3
 800c290:	4b63      	ldr	r3, [pc, #396]	; (800c420 <USB_EPStartXfer+0x494>)
 800c292:	4013      	ands	r3, r2
 800c294:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	015a      	lsls	r2, r3, #5
 800c29a:	69fb      	ldr	r3, [r7, #28]
 800c29c:	4413      	add	r3, r2
 800c29e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2a2:	691a      	ldr	r2, [r3, #16]
 800c2a4:	69bb      	ldr	r3, [r7, #24]
 800c2a6:	0159      	lsls	r1, r3, #5
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	440b      	add	r3, r1
 800c2ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2b0:	4619      	mov	r1, r3
 800c2b2:	4b5c      	ldr	r3, [pc, #368]	; (800c424 <USB_EPStartXfer+0x498>)
 800c2b4:	4013      	ands	r3, r2
 800c2b6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800c2b8:	68bb      	ldr	r3, [r7, #8]
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	d123      	bne.n	800c308 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800c2c0:	69bb      	ldr	r3, [r7, #24]
 800c2c2:	015a      	lsls	r2, r3, #5
 800c2c4:	69fb      	ldr	r3, [r7, #28]
 800c2c6:	4413      	add	r3, r2
 800c2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2cc:	691a      	ldr	r2, [r3, #16]
 800c2ce:	68bb      	ldr	r3, [r7, #8]
 800c2d0:	68db      	ldr	r3, [r3, #12]
 800c2d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c2d6:	69b9      	ldr	r1, [r7, #24]
 800c2d8:	0148      	lsls	r0, r1, #5
 800c2da:	69f9      	ldr	r1, [r7, #28]
 800c2dc:	4401      	add	r1, r0
 800c2de:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c2e6:	69bb      	ldr	r3, [r7, #24]
 800c2e8:	015a      	lsls	r2, r3, #5
 800c2ea:	69fb      	ldr	r3, [r7, #28]
 800c2ec:	4413      	add	r3, r2
 800c2ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2f2:	691b      	ldr	r3, [r3, #16]
 800c2f4:	69ba      	ldr	r2, [r7, #24]
 800c2f6:	0151      	lsls	r1, r2, #5
 800c2f8:	69fa      	ldr	r2, [r7, #28]
 800c2fa:	440a      	add	r2, r1
 800c2fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c300:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c304:	6113      	str	r3, [r2, #16]
 800c306:	e037      	b.n	800c378 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800c308:	68bb      	ldr	r3, [r7, #8]
 800c30a:	699a      	ldr	r2, [r3, #24]
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	68db      	ldr	r3, [r3, #12]
 800c310:	4413      	add	r3, r2
 800c312:	1e5a      	subs	r2, r3, #1
 800c314:	68bb      	ldr	r3, [r7, #8]
 800c316:	68db      	ldr	r3, [r3, #12]
 800c318:	fbb2 f3f3 	udiv	r3, r2, r3
 800c31c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800c31e:	68bb      	ldr	r3, [r7, #8]
 800c320:	68db      	ldr	r3, [r3, #12]
 800c322:	8afa      	ldrh	r2, [r7, #22]
 800c324:	fb03 f202 	mul.w	r2, r3, r2
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800c32c:	69bb      	ldr	r3, [r7, #24]
 800c32e:	015a      	lsls	r2, r3, #5
 800c330:	69fb      	ldr	r3, [r7, #28]
 800c332:	4413      	add	r3, r2
 800c334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c338:	691a      	ldr	r2, [r3, #16]
 800c33a:	8afb      	ldrh	r3, [r7, #22]
 800c33c:	04d9      	lsls	r1, r3, #19
 800c33e:	4b3a      	ldr	r3, [pc, #232]	; (800c428 <USB_EPStartXfer+0x49c>)
 800c340:	400b      	ands	r3, r1
 800c342:	69b9      	ldr	r1, [r7, #24]
 800c344:	0148      	lsls	r0, r1, #5
 800c346:	69f9      	ldr	r1, [r7, #28]
 800c348:	4401      	add	r1, r0
 800c34a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c34e:	4313      	orrs	r3, r2
 800c350:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800c352:	69bb      	ldr	r3, [r7, #24]
 800c354:	015a      	lsls	r2, r3, #5
 800c356:	69fb      	ldr	r3, [r7, #28]
 800c358:	4413      	add	r3, r2
 800c35a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c35e:	691a      	ldr	r2, [r3, #16]
 800c360:	68bb      	ldr	r3, [r7, #8]
 800c362:	69db      	ldr	r3, [r3, #28]
 800c364:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c368:	69b9      	ldr	r1, [r7, #24]
 800c36a:	0148      	lsls	r0, r1, #5
 800c36c:	69f9      	ldr	r1, [r7, #28]
 800c36e:	4401      	add	r1, r0
 800c370:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c374:	4313      	orrs	r3, r2
 800c376:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c378:	79fb      	ldrb	r3, [r7, #7]
 800c37a:	2b01      	cmp	r3, #1
 800c37c:	d10d      	bne.n	800c39a <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c37e:	68bb      	ldr	r3, [r7, #8]
 800c380:	691b      	ldr	r3, [r3, #16]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d009      	beq.n	800c39a <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c386:	68bb      	ldr	r3, [r7, #8]
 800c388:	6919      	ldr	r1, [r3, #16]
 800c38a:	69bb      	ldr	r3, [r7, #24]
 800c38c:	015a      	lsls	r2, r3, #5
 800c38e:	69fb      	ldr	r3, [r7, #28]
 800c390:	4413      	add	r3, r2
 800c392:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c396:	460a      	mov	r2, r1
 800c398:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	791b      	ldrb	r3, [r3, #4]
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d128      	bne.n	800c3f4 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800c3a2:	69fb      	ldr	r3, [r7, #28]
 800c3a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c3a8:	689b      	ldr	r3, [r3, #8]
 800c3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d110      	bne.n	800c3d4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800c3b2:	69bb      	ldr	r3, [r7, #24]
 800c3b4:	015a      	lsls	r2, r3, #5
 800c3b6:	69fb      	ldr	r3, [r7, #28]
 800c3b8:	4413      	add	r3, r2
 800c3ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	69ba      	ldr	r2, [r7, #24]
 800c3c2:	0151      	lsls	r1, r2, #5
 800c3c4:	69fa      	ldr	r2, [r7, #28]
 800c3c6:	440a      	add	r2, r1
 800c3c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3cc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c3d0:	6013      	str	r3, [r2, #0]
 800c3d2:	e00f      	b.n	800c3f4 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800c3d4:	69bb      	ldr	r3, [r7, #24]
 800c3d6:	015a      	lsls	r2, r3, #5
 800c3d8:	69fb      	ldr	r3, [r7, #28]
 800c3da:	4413      	add	r3, r2
 800c3dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	69ba      	ldr	r2, [r7, #24]
 800c3e4:	0151      	lsls	r1, r2, #5
 800c3e6:	69fa      	ldr	r2, [r7, #28]
 800c3e8:	440a      	add	r2, r1
 800c3ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c3ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c3f2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c3f4:	69bb      	ldr	r3, [r7, #24]
 800c3f6:	015a      	lsls	r2, r3, #5
 800c3f8:	69fb      	ldr	r3, [r7, #28]
 800c3fa:	4413      	add	r3, r2
 800c3fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	69ba      	ldr	r2, [r7, #24]
 800c404:	0151      	lsls	r1, r2, #5
 800c406:	69fa      	ldr	r2, [r7, #28]
 800c408:	440a      	add	r2, r1
 800c40a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c40e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c412:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c414:	2300      	movs	r3, #0
}
 800c416:	4618      	mov	r0, r3
 800c418:	3720      	adds	r7, #32
 800c41a:	46bd      	mov	sp, r7
 800c41c:	bd80      	pop	{r7, pc}
 800c41e:	bf00      	nop
 800c420:	fff80000 	.word	0xfff80000
 800c424:	e007ffff 	.word	0xe007ffff
 800c428:	1ff80000 	.word	0x1ff80000

0800c42c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800c42c:	b480      	push	{r7}
 800c42e:	b087      	sub	sp, #28
 800c430:	af00      	add	r7, sp, #0
 800c432:	60f8      	str	r0, [r7, #12]
 800c434:	60b9      	str	r1, [r7, #8]
 800c436:	4613      	mov	r3, r2
 800c438:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c43a:	68fb      	ldr	r3, [r7, #12]
 800c43c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	781b      	ldrb	r3, [r3, #0]
 800c442:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	785b      	ldrb	r3, [r3, #1]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	f040 80ce 	bne.w	800c5ea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800c44e:	68bb      	ldr	r3, [r7, #8]
 800c450:	699b      	ldr	r3, [r3, #24]
 800c452:	2b00      	cmp	r3, #0
 800c454:	d132      	bne.n	800c4bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	697b      	ldr	r3, [r7, #20]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c462:	691a      	ldr	r2, [r3, #16]
 800c464:	693b      	ldr	r3, [r7, #16]
 800c466:	0159      	lsls	r1, r3, #5
 800c468:	697b      	ldr	r3, [r7, #20]
 800c46a:	440b      	add	r3, r1
 800c46c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c470:	4619      	mov	r1, r3
 800c472:	4b9a      	ldr	r3, [pc, #616]	; (800c6dc <USB_EP0StartXfer+0x2b0>)
 800c474:	4013      	ands	r3, r2
 800c476:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c478:	693b      	ldr	r3, [r7, #16]
 800c47a:	015a      	lsls	r2, r3, #5
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	4413      	add	r3, r2
 800c480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c484:	691b      	ldr	r3, [r3, #16]
 800c486:	693a      	ldr	r2, [r7, #16]
 800c488:	0151      	lsls	r1, r2, #5
 800c48a:	697a      	ldr	r2, [r7, #20]
 800c48c:	440a      	add	r2, r1
 800c48e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c492:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c496:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c498:	693b      	ldr	r3, [r7, #16]
 800c49a:	015a      	lsls	r2, r3, #5
 800c49c:	697b      	ldr	r3, [r7, #20]
 800c49e:	4413      	add	r3, r2
 800c4a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4a4:	691a      	ldr	r2, [r3, #16]
 800c4a6:	693b      	ldr	r3, [r7, #16]
 800c4a8:	0159      	lsls	r1, r3, #5
 800c4aa:	697b      	ldr	r3, [r7, #20]
 800c4ac:	440b      	add	r3, r1
 800c4ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4b2:	4619      	mov	r1, r3
 800c4b4:	4b8a      	ldr	r3, [pc, #552]	; (800c6e0 <USB_EP0StartXfer+0x2b4>)
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	610b      	str	r3, [r1, #16]
 800c4ba:	e04e      	b.n	800c55a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800c4bc:	693b      	ldr	r3, [r7, #16]
 800c4be:	015a      	lsls	r2, r3, #5
 800c4c0:	697b      	ldr	r3, [r7, #20]
 800c4c2:	4413      	add	r3, r2
 800c4c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4c8:	691a      	ldr	r2, [r3, #16]
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	0159      	lsls	r1, r3, #5
 800c4ce:	697b      	ldr	r3, [r7, #20]
 800c4d0:	440b      	add	r3, r1
 800c4d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	4b81      	ldr	r3, [pc, #516]	; (800c6e0 <USB_EP0StartXfer+0x2b4>)
 800c4da:	4013      	ands	r3, r2
 800c4dc:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	015a      	lsls	r2, r3, #5
 800c4e2:	697b      	ldr	r3, [r7, #20]
 800c4e4:	4413      	add	r3, r2
 800c4e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4ea:	691a      	ldr	r2, [r3, #16]
 800c4ec:	693b      	ldr	r3, [r7, #16]
 800c4ee:	0159      	lsls	r1, r3, #5
 800c4f0:	697b      	ldr	r3, [r7, #20]
 800c4f2:	440b      	add	r3, r1
 800c4f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c4f8:	4619      	mov	r1, r3
 800c4fa:	4b78      	ldr	r3, [pc, #480]	; (800c6dc <USB_EP0StartXfer+0x2b0>)
 800c4fc:	4013      	ands	r3, r2
 800c4fe:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800c500:	68bb      	ldr	r3, [r7, #8]
 800c502:	699a      	ldr	r2, [r3, #24]
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	429a      	cmp	r2, r3
 800c50a:	d903      	bls.n	800c514 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800c50c:	68bb      	ldr	r3, [r7, #8]
 800c50e:	68da      	ldr	r2, [r3, #12]
 800c510:	68bb      	ldr	r3, [r7, #8]
 800c512:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	015a      	lsls	r2, r3, #5
 800c518:	697b      	ldr	r3, [r7, #20]
 800c51a:	4413      	add	r3, r2
 800c51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c520:	691b      	ldr	r3, [r3, #16]
 800c522:	693a      	ldr	r2, [r7, #16]
 800c524:	0151      	lsls	r1, r2, #5
 800c526:	697a      	ldr	r2, [r7, #20]
 800c528:	440a      	add	r2, r1
 800c52a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c52e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c532:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800c534:	693b      	ldr	r3, [r7, #16]
 800c536:	015a      	lsls	r2, r3, #5
 800c538:	697b      	ldr	r3, [r7, #20]
 800c53a:	4413      	add	r3, r2
 800c53c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c540:	691a      	ldr	r2, [r3, #16]
 800c542:	68bb      	ldr	r3, [r7, #8]
 800c544:	699b      	ldr	r3, [r3, #24]
 800c546:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c54a:	6939      	ldr	r1, [r7, #16]
 800c54c:	0148      	lsls	r0, r1, #5
 800c54e:	6979      	ldr	r1, [r7, #20]
 800c550:	4401      	add	r1, r0
 800c552:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800c556:	4313      	orrs	r3, r2
 800c558:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800c55a:	79fb      	ldrb	r3, [r7, #7]
 800c55c:	2b01      	cmp	r3, #1
 800c55e:	d11e      	bne.n	800c59e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800c560:	68bb      	ldr	r3, [r7, #8]
 800c562:	695b      	ldr	r3, [r3, #20]
 800c564:	2b00      	cmp	r3, #0
 800c566:	d009      	beq.n	800c57c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800c568:	693b      	ldr	r3, [r7, #16]
 800c56a:	015a      	lsls	r2, r3, #5
 800c56c:	697b      	ldr	r3, [r7, #20]
 800c56e:	4413      	add	r3, r2
 800c570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c574:	461a      	mov	r2, r3
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	695b      	ldr	r3, [r3, #20]
 800c57a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c57c:	693b      	ldr	r3, [r7, #16]
 800c57e:	015a      	lsls	r2, r3, #5
 800c580:	697b      	ldr	r3, [r7, #20]
 800c582:	4413      	add	r3, r2
 800c584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c588:	681b      	ldr	r3, [r3, #0]
 800c58a:	693a      	ldr	r2, [r7, #16]
 800c58c:	0151      	lsls	r1, r2, #5
 800c58e:	697a      	ldr	r2, [r7, #20]
 800c590:	440a      	add	r2, r1
 800c592:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c596:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c59a:	6013      	str	r3, [r2, #0]
 800c59c:	e097      	b.n	800c6ce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	015a      	lsls	r2, r3, #5
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	4413      	add	r3, r2
 800c5a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	693a      	ldr	r2, [r7, #16]
 800c5ae:	0151      	lsls	r1, r2, #5
 800c5b0:	697a      	ldr	r2, [r7, #20]
 800c5b2:	440a      	add	r2, r1
 800c5b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c5b8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c5bc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800c5be:	68bb      	ldr	r3, [r7, #8]
 800c5c0:	699b      	ldr	r3, [r3, #24]
 800c5c2:	2b00      	cmp	r3, #0
 800c5c4:	f000 8083 	beq.w	800c6ce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800c5c8:	697b      	ldr	r3, [r7, #20]
 800c5ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c5ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c5d0:	68bb      	ldr	r3, [r7, #8]
 800c5d2:	781b      	ldrb	r3, [r3, #0]
 800c5d4:	f003 030f 	and.w	r3, r3, #15
 800c5d8:	2101      	movs	r1, #1
 800c5da:	fa01 f303 	lsl.w	r3, r1, r3
 800c5de:	6979      	ldr	r1, [r7, #20]
 800c5e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c5e4:	4313      	orrs	r3, r2
 800c5e6:	634b      	str	r3, [r1, #52]	; 0x34
 800c5e8:	e071      	b.n	800c6ce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	015a      	lsls	r2, r3, #5
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	4413      	add	r3, r2
 800c5f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c5f6:	691a      	ldr	r2, [r3, #16]
 800c5f8:	693b      	ldr	r3, [r7, #16]
 800c5fa:	0159      	lsls	r1, r3, #5
 800c5fc:	697b      	ldr	r3, [r7, #20]
 800c5fe:	440b      	add	r3, r1
 800c600:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c604:	4619      	mov	r1, r3
 800c606:	4b36      	ldr	r3, [pc, #216]	; (800c6e0 <USB_EP0StartXfer+0x2b4>)
 800c608:	4013      	ands	r3, r2
 800c60a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	015a      	lsls	r2, r3, #5
 800c610:	697b      	ldr	r3, [r7, #20]
 800c612:	4413      	add	r3, r2
 800c614:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c618:	691a      	ldr	r2, [r3, #16]
 800c61a:	693b      	ldr	r3, [r7, #16]
 800c61c:	0159      	lsls	r1, r3, #5
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	440b      	add	r3, r1
 800c622:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c626:	4619      	mov	r1, r3
 800c628:	4b2c      	ldr	r3, [pc, #176]	; (800c6dc <USB_EP0StartXfer+0x2b0>)
 800c62a:	4013      	ands	r3, r2
 800c62c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800c62e:	68bb      	ldr	r3, [r7, #8]
 800c630:	699b      	ldr	r3, [r3, #24]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d003      	beq.n	800c63e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800c636:	68bb      	ldr	r3, [r7, #8]
 800c638:	68da      	ldr	r2, [r3, #12]
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	68da      	ldr	r2, [r3, #12]
 800c642:	68bb      	ldr	r3, [r7, #8]
 800c644:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	015a      	lsls	r2, r3, #5
 800c64a:	697b      	ldr	r3, [r7, #20]
 800c64c:	4413      	add	r3, r2
 800c64e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c652:	691b      	ldr	r3, [r3, #16]
 800c654:	693a      	ldr	r2, [r7, #16]
 800c656:	0151      	lsls	r1, r2, #5
 800c658:	697a      	ldr	r2, [r7, #20]
 800c65a:	440a      	add	r2, r1
 800c65c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c660:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c664:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800c666:	693b      	ldr	r3, [r7, #16]
 800c668:	015a      	lsls	r2, r3, #5
 800c66a:	697b      	ldr	r3, [r7, #20]
 800c66c:	4413      	add	r3, r2
 800c66e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c672:	691a      	ldr	r2, [r3, #16]
 800c674:	68bb      	ldr	r3, [r7, #8]
 800c676:	69db      	ldr	r3, [r3, #28]
 800c678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800c67c:	6939      	ldr	r1, [r7, #16]
 800c67e:	0148      	lsls	r0, r1, #5
 800c680:	6979      	ldr	r1, [r7, #20]
 800c682:	4401      	add	r1, r0
 800c684:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800c688:	4313      	orrs	r3, r2
 800c68a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800c68c:	79fb      	ldrb	r3, [r7, #7]
 800c68e:	2b01      	cmp	r3, #1
 800c690:	d10d      	bne.n	800c6ae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d009      	beq.n	800c6ae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	6919      	ldr	r1, [r3, #16]
 800c69e:	693b      	ldr	r3, [r7, #16]
 800c6a0:	015a      	lsls	r2, r3, #5
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	4413      	add	r3, r2
 800c6a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6aa:	460a      	mov	r2, r1
 800c6ac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800c6ae:	693b      	ldr	r3, [r7, #16]
 800c6b0:	015a      	lsls	r2, r3, #5
 800c6b2:	697b      	ldr	r3, [r7, #20]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	693a      	ldr	r2, [r7, #16]
 800c6be:	0151      	lsls	r1, r2, #5
 800c6c0:	697a      	ldr	r2, [r7, #20]
 800c6c2:	440a      	add	r2, r1
 800c6c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c6c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800c6cc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c6ce:	2300      	movs	r3, #0
}
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	371c      	adds	r7, #28
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6da:	4770      	bx	lr
 800c6dc:	e007ffff 	.word	0xe007ffff
 800c6e0:	fff80000 	.word	0xfff80000

0800c6e4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b087      	sub	sp, #28
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
 800c6ec:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800c6ee:	2300      	movs	r3, #0
 800c6f0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800c6fa:	683b      	ldr	r3, [r7, #0]
 800c6fc:	785b      	ldrb	r3, [r3, #1]
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d14a      	bne.n	800c798 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800c702:	683b      	ldr	r3, [r7, #0]
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	015a      	lsls	r2, r3, #5
 800c708:	693b      	ldr	r3, [r7, #16]
 800c70a:	4413      	add	r3, r2
 800c70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c716:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c71a:	f040 8086 	bne.w	800c82a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	015a      	lsls	r2, r3, #5
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	4413      	add	r3, r2
 800c728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	683a      	ldr	r2, [r7, #0]
 800c730:	7812      	ldrb	r2, [r2, #0]
 800c732:	0151      	lsls	r1, r2, #5
 800c734:	693a      	ldr	r2, [r7, #16]
 800c736:	440a      	add	r2, r1
 800c738:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c73c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c740:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800c742:	683b      	ldr	r3, [r7, #0]
 800c744:	781b      	ldrb	r3, [r3, #0]
 800c746:	015a      	lsls	r2, r3, #5
 800c748:	693b      	ldr	r3, [r7, #16]
 800c74a:	4413      	add	r3, r2
 800c74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	683a      	ldr	r2, [r7, #0]
 800c754:	7812      	ldrb	r2, [r2, #0]
 800c756:	0151      	lsls	r1, r2, #5
 800c758:	693a      	ldr	r2, [r7, #16]
 800c75a:	440a      	add	r2, r1
 800c75c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c760:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c764:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	3301      	adds	r3, #1
 800c76a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	f242 7210 	movw	r2, #10000	; 0x2710
 800c772:	4293      	cmp	r3, r2
 800c774:	d902      	bls.n	800c77c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800c776:	2301      	movs	r3, #1
 800c778:	75fb      	strb	r3, [r7, #23]
          break;
 800c77a:	e056      	b.n	800c82a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800c77c:	683b      	ldr	r3, [r7, #0]
 800c77e:	781b      	ldrb	r3, [r3, #0]
 800c780:	015a      	lsls	r2, r3, #5
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	4413      	add	r3, r2
 800c786:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c78a:	681b      	ldr	r3, [r3, #0]
 800c78c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c790:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c794:	d0e7      	beq.n	800c766 <USB_EPStopXfer+0x82>
 800c796:	e048      	b.n	800c82a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	781b      	ldrb	r3, [r3, #0]
 800c79c:	015a      	lsls	r2, r3, #5
 800c79e:	693b      	ldr	r3, [r7, #16]
 800c7a0:	4413      	add	r3, r2
 800c7a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7b0:	d13b      	bne.n	800c82a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800c7b2:	683b      	ldr	r3, [r7, #0]
 800c7b4:	781b      	ldrb	r3, [r3, #0]
 800c7b6:	015a      	lsls	r2, r3, #5
 800c7b8:	693b      	ldr	r3, [r7, #16]
 800c7ba:	4413      	add	r3, r2
 800c7bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	683a      	ldr	r2, [r7, #0]
 800c7c4:	7812      	ldrb	r2, [r2, #0]
 800c7c6:	0151      	lsls	r1, r2, #5
 800c7c8:	693a      	ldr	r2, [r7, #16]
 800c7ca:	440a      	add	r2, r1
 800c7cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800c7d4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800c7d6:	683b      	ldr	r3, [r7, #0]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	015a      	lsls	r2, r3, #5
 800c7dc:	693b      	ldr	r3, [r7, #16]
 800c7de:	4413      	add	r3, r2
 800c7e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	683a      	ldr	r2, [r7, #0]
 800c7e8:	7812      	ldrb	r2, [r2, #0]
 800c7ea:	0151      	lsls	r1, r2, #5
 800c7ec:	693a      	ldr	r2, [r7, #16]
 800c7ee:	440a      	add	r2, r1
 800c7f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c7f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c7f8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800c7fa:	68fb      	ldr	r3, [r7, #12]
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	f242 7210 	movw	r2, #10000	; 0x2710
 800c806:	4293      	cmp	r3, r2
 800c808:	d902      	bls.n	800c810 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800c80a:	2301      	movs	r3, #1
 800c80c:	75fb      	strb	r3, [r7, #23]
          break;
 800c80e:	e00c      	b.n	800c82a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800c810:	683b      	ldr	r3, [r7, #0]
 800c812:	781b      	ldrb	r3, [r3, #0]
 800c814:	015a      	lsls	r2, r3, #5
 800c816:	693b      	ldr	r3, [r7, #16]
 800c818:	4413      	add	r3, r2
 800c81a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c824:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c828:	d0e7      	beq.n	800c7fa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800c82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c82c:	4618      	mov	r0, r3
 800c82e:	371c      	adds	r7, #28
 800c830:	46bd      	mov	sp, r7
 800c832:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c836:	4770      	bx	lr

0800c838 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800c838:	b480      	push	{r7}
 800c83a:	b089      	sub	sp, #36	; 0x24
 800c83c:	af00      	add	r7, sp, #0
 800c83e:	60f8      	str	r0, [r7, #12]
 800c840:	60b9      	str	r1, [r7, #8]
 800c842:	4611      	mov	r1, r2
 800c844:	461a      	mov	r2, r3
 800c846:	460b      	mov	r3, r1
 800c848:	71fb      	strb	r3, [r7, #7]
 800c84a:	4613      	mov	r3, r2
 800c84c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800c856:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d123      	bne.n	800c8a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800c85e:	88bb      	ldrh	r3, [r7, #4]
 800c860:	3303      	adds	r3, #3
 800c862:	089b      	lsrs	r3, r3, #2
 800c864:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800c866:	2300      	movs	r3, #0
 800c868:	61bb      	str	r3, [r7, #24]
 800c86a:	e018      	b.n	800c89e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800c86c:	79fb      	ldrb	r3, [r7, #7]
 800c86e:	031a      	lsls	r2, r3, #12
 800c870:	697b      	ldr	r3, [r7, #20]
 800c872:	4413      	add	r3, r2
 800c874:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c878:	461a      	mov	r2, r3
 800c87a:	69fb      	ldr	r3, [r7, #28]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	3301      	adds	r3, #1
 800c884:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	3301      	adds	r3, #1
 800c88a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	3301      	adds	r3, #1
 800c890:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800c892:	69fb      	ldr	r3, [r7, #28]
 800c894:	3301      	adds	r3, #1
 800c896:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800c898:	69bb      	ldr	r3, [r7, #24]
 800c89a:	3301      	adds	r3, #1
 800c89c:	61bb      	str	r3, [r7, #24]
 800c89e:	69ba      	ldr	r2, [r7, #24]
 800c8a0:	693b      	ldr	r3, [r7, #16]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d3e2      	bcc.n	800c86c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800c8a6:	2300      	movs	r3, #0
}
 800c8a8:	4618      	mov	r0, r3
 800c8aa:	3724      	adds	r7, #36	; 0x24
 800c8ac:	46bd      	mov	sp, r7
 800c8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8b2:	4770      	bx	lr

0800c8b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800c8b4:	b480      	push	{r7}
 800c8b6:	b08b      	sub	sp, #44	; 0x2c
 800c8b8:	af00      	add	r7, sp, #0
 800c8ba:	60f8      	str	r0, [r7, #12]
 800c8bc:	60b9      	str	r1, [r7, #8]
 800c8be:	4613      	mov	r3, r2
 800c8c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800c8ca:	88fb      	ldrh	r3, [r7, #6]
 800c8cc:	089b      	lsrs	r3, r3, #2
 800c8ce:	b29b      	uxth	r3, r3
 800c8d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800c8d2:	88fb      	ldrh	r3, [r7, #6]
 800c8d4:	f003 0303 	and.w	r3, r3, #3
 800c8d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800c8da:	2300      	movs	r3, #0
 800c8dc:	623b      	str	r3, [r7, #32]
 800c8de:	e014      	b.n	800c90a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800c8e0:	69bb      	ldr	r3, [r7, #24]
 800c8e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c8e6:	681a      	ldr	r2, [r3, #0]
 800c8e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ea:	601a      	str	r2, [r3, #0]
    pDest++;
 800c8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c8f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8f4:	3301      	adds	r3, #1
 800c8f6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8fa:	3301      	adds	r3, #1
 800c8fc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c900:	3301      	adds	r3, #1
 800c902:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	3301      	adds	r3, #1
 800c908:	623b      	str	r3, [r7, #32]
 800c90a:	6a3a      	ldr	r2, [r7, #32]
 800c90c:	697b      	ldr	r3, [r7, #20]
 800c90e:	429a      	cmp	r2, r3
 800c910:	d3e6      	bcc.n	800c8e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800c912:	8bfb      	ldrh	r3, [r7, #30]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d01e      	beq.n	800c956 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800c918:	2300      	movs	r3, #0
 800c91a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c922:	461a      	mov	r2, r3
 800c924:	f107 0310 	add.w	r3, r7, #16
 800c928:	6812      	ldr	r2, [r2, #0]
 800c92a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	6a3b      	ldr	r3, [r7, #32]
 800c930:	b2db      	uxtb	r3, r3
 800c932:	00db      	lsls	r3, r3, #3
 800c934:	fa22 f303 	lsr.w	r3, r2, r3
 800c938:	b2da      	uxtb	r2, r3
 800c93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c93c:	701a      	strb	r2, [r3, #0]
      i++;
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	3301      	adds	r3, #1
 800c942:	623b      	str	r3, [r7, #32]
      pDest++;
 800c944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c946:	3301      	adds	r3, #1
 800c948:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800c94a:	8bfb      	ldrh	r3, [r7, #30]
 800c94c:	3b01      	subs	r3, #1
 800c94e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800c950:	8bfb      	ldrh	r3, [r7, #30]
 800c952:	2b00      	cmp	r3, #0
 800c954:	d1ea      	bne.n	800c92c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800c956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c958:	4618      	mov	r0, r3
 800c95a:	372c      	adds	r7, #44	; 0x2c
 800c95c:	46bd      	mov	sp, r7
 800c95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c962:	4770      	bx	lr

0800c964 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800c964:	b480      	push	{r7}
 800c966:	b085      	sub	sp, #20
 800c968:	af00      	add	r7, sp, #0
 800c96a:	6078      	str	r0, [r7, #4]
 800c96c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800c978:	683b      	ldr	r3, [r7, #0]
 800c97a:	785b      	ldrb	r3, [r3, #1]
 800c97c:	2b01      	cmp	r3, #1
 800c97e:	d12c      	bne.n	800c9da <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c980:	68bb      	ldr	r3, [r7, #8]
 800c982:	015a      	lsls	r2, r3, #5
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	4413      	add	r3, r2
 800c988:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	db12      	blt.n	800c9b8 <USB_EPSetStall+0x54>
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	2b00      	cmp	r3, #0
 800c996:	d00f      	beq.n	800c9b8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800c998:	68bb      	ldr	r3, [r7, #8]
 800c99a:	015a      	lsls	r2, r3, #5
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	4413      	add	r3, r2
 800c9a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	68ba      	ldr	r2, [r7, #8]
 800c9a8:	0151      	lsls	r1, r2, #5
 800c9aa:	68fa      	ldr	r2, [r7, #12]
 800c9ac:	440a      	add	r2, r1
 800c9ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9b2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c9b6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800c9b8:	68bb      	ldr	r3, [r7, #8]
 800c9ba:	015a      	lsls	r2, r3, #5
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	4413      	add	r3, r2
 800c9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c9c4:	681b      	ldr	r3, [r3, #0]
 800c9c6:	68ba      	ldr	r2, [r7, #8]
 800c9c8:	0151      	lsls	r1, r2, #5
 800c9ca:	68fa      	ldr	r2, [r7, #12]
 800c9cc:	440a      	add	r2, r1
 800c9ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800c9d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c9d6:	6013      	str	r3, [r2, #0]
 800c9d8:	e02b      	b.n	800ca32 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800c9da:	68bb      	ldr	r3, [r7, #8]
 800c9dc:	015a      	lsls	r2, r3, #5
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	4413      	add	r3, r2
 800c9e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	db12      	blt.n	800ca12 <USB_EPSetStall+0xae>
 800c9ec:	68bb      	ldr	r3, [r7, #8]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d00f      	beq.n	800ca12 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800c9f2:	68bb      	ldr	r3, [r7, #8]
 800c9f4:	015a      	lsls	r2, r3, #5
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	4413      	add	r3, r2
 800c9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	68ba      	ldr	r2, [r7, #8]
 800ca02:	0151      	lsls	r1, r2, #5
 800ca04:	68fa      	ldr	r2, [r7, #12]
 800ca06:	440a      	add	r2, r1
 800ca08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca0c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ca10:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	015a      	lsls	r2, r3, #5
 800ca16:	68fb      	ldr	r3, [r7, #12]
 800ca18:	4413      	add	r3, r2
 800ca1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	0151      	lsls	r1, r2, #5
 800ca24:	68fa      	ldr	r2, [r7, #12]
 800ca26:	440a      	add	r2, r1
 800ca28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ca2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ca30:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ca32:	2300      	movs	r3, #0
}
 800ca34:	4618      	mov	r0, r3
 800ca36:	3714      	adds	r7, #20
 800ca38:	46bd      	mov	sp, r7
 800ca3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca3e:	4770      	bx	lr

0800ca40 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b085      	sub	sp, #20
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ca4e:	683b      	ldr	r3, [r7, #0]
 800ca50:	781b      	ldrb	r3, [r3, #0]
 800ca52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	785b      	ldrb	r3, [r3, #1]
 800ca58:	2b01      	cmp	r3, #1
 800ca5a:	d128      	bne.n	800caae <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ca5c:	68bb      	ldr	r3, [r7, #8]
 800ca5e:	015a      	lsls	r2, r3, #5
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	4413      	add	r3, r2
 800ca64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	0151      	lsls	r1, r2, #5
 800ca6e:	68fa      	ldr	r2, [r7, #12]
 800ca70:	440a      	add	r2, r1
 800ca72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ca76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800ca7a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	791b      	ldrb	r3, [r3, #4]
 800ca80:	2b03      	cmp	r3, #3
 800ca82:	d003      	beq.n	800ca8c <USB_EPClearStall+0x4c>
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	791b      	ldrb	r3, [r3, #4]
 800ca88:	2b02      	cmp	r3, #2
 800ca8a:	d138      	bne.n	800cafe <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800ca8c:	68bb      	ldr	r3, [r7, #8]
 800ca8e:	015a      	lsls	r2, r3, #5
 800ca90:	68fb      	ldr	r3, [r7, #12]
 800ca92:	4413      	add	r3, r2
 800ca94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ca98:	681b      	ldr	r3, [r3, #0]
 800ca9a:	68ba      	ldr	r2, [r7, #8]
 800ca9c:	0151      	lsls	r1, r2, #5
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	440a      	add	r2, r1
 800caa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800caa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800caaa:	6013      	str	r3, [r2, #0]
 800caac:	e027      	b.n	800cafe <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800caae:	68bb      	ldr	r3, [r7, #8]
 800cab0:	015a      	lsls	r2, r3, #5
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	4413      	add	r3, r2
 800cab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68ba      	ldr	r2, [r7, #8]
 800cabe:	0151      	lsls	r1, r2, #5
 800cac0:	68fa      	ldr	r2, [r7, #12]
 800cac2:	440a      	add	r2, r1
 800cac4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cac8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800cacc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800cace:	683b      	ldr	r3, [r7, #0]
 800cad0:	791b      	ldrb	r3, [r3, #4]
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d003      	beq.n	800cade <USB_EPClearStall+0x9e>
 800cad6:	683b      	ldr	r3, [r7, #0]
 800cad8:	791b      	ldrb	r3, [r3, #4]
 800cada:	2b02      	cmp	r3, #2
 800cadc:	d10f      	bne.n	800cafe <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	015a      	lsls	r2, r3, #5
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	4413      	add	r3, r2
 800cae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800caea:	681b      	ldr	r3, [r3, #0]
 800caec:	68ba      	ldr	r2, [r7, #8]
 800caee:	0151      	lsls	r1, r2, #5
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	440a      	add	r2, r1
 800caf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800caf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800cafc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800cafe:	2300      	movs	r3, #0
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr

0800cb0c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
 800cb14:	460b      	mov	r3, r1
 800cb16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	68fa      	ldr	r2, [r7, #12]
 800cb26:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb2a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800cb2e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb36:	681a      	ldr	r2, [r3, #0]
 800cb38:	78fb      	ldrb	r3, [r7, #3]
 800cb3a:	011b      	lsls	r3, r3, #4
 800cb3c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800cb40:	68f9      	ldr	r1, [r7, #12]
 800cb42:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800cb46:	4313      	orrs	r3, r2
 800cb48:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800cb4a:	2300      	movs	r3, #0
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	3714      	adds	r7, #20
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr

0800cb58 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cb58:	b480      	push	{r7}
 800cb5a:	b085      	sub	sp, #20
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cb6a:	681b      	ldr	r3, [r3, #0]
 800cb6c:	68fa      	ldr	r2, [r7, #12]
 800cb6e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cb72:	f023 0303 	bic.w	r3, r3, #3
 800cb76:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	68fa      	ldr	r2, [r7, #12]
 800cb82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cb86:	f023 0302 	bic.w	r3, r3, #2
 800cb8a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr

0800cb9a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800cb9a:	b480      	push	{r7}
 800cb9c:	b085      	sub	sp, #20
 800cb9e:	af00      	add	r7, sp, #0
 800cba0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800cbac:	681b      	ldr	r3, [r3, #0]
 800cbae:	68fa      	ldr	r2, [r7, #12]
 800cbb0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800cbb4:	f023 0303 	bic.w	r3, r3, #3
 800cbb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	68fa      	ldr	r2, [r7, #12]
 800cbc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cbc8:	f043 0302 	orr.w	r3, r3, #2
 800cbcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cbce:	2300      	movs	r3, #0
}
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	3714      	adds	r7, #20
 800cbd4:	46bd      	mov	sp, r7
 800cbd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbda:	4770      	bx	lr

0800cbdc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800cbdc:	b480      	push	{r7}
 800cbde:	b085      	sub	sp, #20
 800cbe0:	af00      	add	r7, sp, #0
 800cbe2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	695b      	ldr	r3, [r3, #20]
 800cbe8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	699b      	ldr	r3, [r3, #24]
 800cbee:	68fa      	ldr	r2, [r7, #12]
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800cbf4:	68fb      	ldr	r3, [r7, #12]
}
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	3714      	adds	r7, #20
 800cbfa:	46bd      	mov	sp, r7
 800cbfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc00:	4770      	bx	lr

0800cc02 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800cc02:	b480      	push	{r7}
 800cc04:	b085      	sub	sp, #20
 800cc06:	af00      	add	r7, sp, #0
 800cc08:	6078      	str	r0, [r7, #4]
 800cc0a:	460b      	mov	r3, r1
 800cc0c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800cc12:	78fb      	ldrb	r3, [r7, #3]
 800cc14:	015a      	lsls	r2, r3, #5
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	4413      	add	r3, r2
 800cc1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc1e:	689b      	ldr	r3, [r3, #8]
 800cc20:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800cc22:	78fb      	ldrb	r3, [r7, #3]
 800cc24:	015a      	lsls	r2, r3, #5
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	4413      	add	r3, r2
 800cc2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc2e:	68db      	ldr	r3, [r3, #12]
 800cc30:	68ba      	ldr	r2, [r7, #8]
 800cc32:	4013      	ands	r3, r2
 800cc34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cc36:	68bb      	ldr	r3, [r7, #8]
}
 800cc38:	4618      	mov	r0, r3
 800cc3a:	3714      	adds	r7, #20
 800cc3c:	46bd      	mov	sp, r7
 800cc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc42:	4770      	bx	lr

0800cc44 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc44:	b480      	push	{r7}
 800cc46:	b085      	sub	sp, #20
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc56:	699b      	ldr	r3, [r3, #24]
 800cc58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc5a:	68fb      	ldr	r3, [r7, #12]
 800cc5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc60:	69db      	ldr	r3, [r3, #28]
 800cc62:	68ba      	ldr	r2, [r7, #8]
 800cc64:	4013      	ands	r3, r2
 800cc66:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800cc68:	68bb      	ldr	r3, [r7, #8]
 800cc6a:	0c1b      	lsrs	r3, r3, #16
}
 800cc6c:	4618      	mov	r0, r3
 800cc6e:	3714      	adds	r7, #20
 800cc70:	46bd      	mov	sp, r7
 800cc72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc76:	4770      	bx	lr

0800cc78 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b085      	sub	sp, #20
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc8a:	699b      	ldr	r3, [r3, #24]
 800cc8c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cc94:	69db      	ldr	r3, [r3, #28]
 800cc96:	68ba      	ldr	r2, [r7, #8]
 800cc98:	4013      	ands	r3, r2
 800cc9a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800cc9c:	68bb      	ldr	r3, [r7, #8]
 800cc9e:	b29b      	uxth	r3, r3
}
 800cca0:	4618      	mov	r0, r3
 800cca2:	3714      	adds	r7, #20
 800cca4:	46bd      	mov	sp, r7
 800cca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccaa:	4770      	bx	lr

0800ccac <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800ccac:	b480      	push	{r7}
 800ccae:	b085      	sub	sp, #20
 800ccb0:	af00      	add	r7, sp, #0
 800ccb2:	6078      	str	r0, [r7, #4]
 800ccb4:	460b      	mov	r3, r1
 800ccb6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800ccbc:	78fb      	ldrb	r3, [r7, #3]
 800ccbe:	015a      	lsls	r2, r3, #5
 800ccc0:	68fb      	ldr	r3, [r7, #12]
 800ccc2:	4413      	add	r3, r2
 800ccc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ccc8:	689b      	ldr	r3, [r3, #8]
 800ccca:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccd2:	695b      	ldr	r3, [r3, #20]
 800ccd4:	68ba      	ldr	r2, [r7, #8]
 800ccd6:	4013      	ands	r3, r2
 800ccd8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800ccda:	68bb      	ldr	r3, [r7, #8]
}
 800ccdc:	4618      	mov	r0, r3
 800ccde:	3714      	adds	r7, #20
 800cce0:	46bd      	mov	sp, r7
 800cce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce6:	4770      	bx	lr

0800cce8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800cce8:	b480      	push	{r7}
 800ccea:	b087      	sub	sp, #28
 800ccec:	af00      	add	r7, sp, #0
 800ccee:	6078      	str	r0, [r7, #4]
 800ccf0:	460b      	mov	r3, r1
 800ccf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800ccf8:	697b      	ldr	r3, [r7, #20]
 800ccfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ccfe:	691b      	ldr	r3, [r3, #16]
 800cd00:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800cd02:	697b      	ldr	r3, [r7, #20]
 800cd04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cd0a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800cd0c:	78fb      	ldrb	r3, [r7, #3]
 800cd0e:	f003 030f 	and.w	r3, r3, #15
 800cd12:	68fa      	ldr	r2, [r7, #12]
 800cd14:	fa22 f303 	lsr.w	r3, r2, r3
 800cd18:	01db      	lsls	r3, r3, #7
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	693a      	ldr	r2, [r7, #16]
 800cd1e:	4313      	orrs	r3, r2
 800cd20:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800cd22:	78fb      	ldrb	r3, [r7, #3]
 800cd24:	015a      	lsls	r2, r3, #5
 800cd26:	697b      	ldr	r3, [r7, #20]
 800cd28:	4413      	add	r3, r2
 800cd2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd2e:	689b      	ldr	r3, [r3, #8]
 800cd30:	693a      	ldr	r2, [r7, #16]
 800cd32:	4013      	ands	r3, r2
 800cd34:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800cd36:	68bb      	ldr	r3, [r7, #8]
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	371c      	adds	r7, #28
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd42:	4770      	bx	lr

0800cd44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800cd44:	b480      	push	{r7}
 800cd46:	b083      	sub	sp, #12
 800cd48:	af00      	add	r7, sp, #0
 800cd4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	695b      	ldr	r3, [r3, #20]
 800cd50:	f003 0301 	and.w	r3, r3, #1
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	370c      	adds	r7, #12
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5e:	4770      	bx	lr

0800cd60 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b085      	sub	sp, #20
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800cd6c:	68fb      	ldr	r3, [r7, #12]
 800cd6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd72:	681a      	ldr	r2, [r3, #0]
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800cd7a:	4619      	mov	r1, r3
 800cd7c:	4b09      	ldr	r3, [pc, #36]	; (800cda4 <USB_ActivateSetup+0x44>)
 800cd7e:	4013      	ands	r3, r2
 800cd80:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800cd82:	68fb      	ldr	r3, [r7, #12]
 800cd84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800cd90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cd94:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800cd96:	2300      	movs	r3, #0
}
 800cd98:	4618      	mov	r0, r3
 800cd9a:	3714      	adds	r7, #20
 800cd9c:	46bd      	mov	sp, r7
 800cd9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda2:	4770      	bx	lr
 800cda4:	fffff800 	.word	0xfffff800

0800cda8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800cda8:	b480      	push	{r7}
 800cdaa:	b087      	sub	sp, #28
 800cdac:	af00      	add	r7, sp, #0
 800cdae:	60f8      	str	r0, [r7, #12]
 800cdb0:	460b      	mov	r3, r1
 800cdb2:	607a      	str	r2, [r7, #4]
 800cdb4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cdb6:	68fb      	ldr	r3, [r7, #12]
 800cdb8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	333c      	adds	r3, #60	; 0x3c
 800cdbe:	3304      	adds	r3, #4
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800cdc4:	693b      	ldr	r3, [r7, #16]
 800cdc6:	4a26      	ldr	r2, [pc, #152]	; (800ce60 <USB_EP0_OutStart+0xb8>)
 800cdc8:	4293      	cmp	r3, r2
 800cdca:	d90a      	bls.n	800cde2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800cdcc:	697b      	ldr	r3, [r7, #20]
 800cdce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cddc:	d101      	bne.n	800cde2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800cdde:	2300      	movs	r3, #0
 800cde0:	e037      	b.n	800ce52 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800cde2:	697b      	ldr	r3, [r7, #20]
 800cde4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cde8:	461a      	mov	r2, r3
 800cdea:	2300      	movs	r3, #0
 800cdec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800cdf4:	691b      	ldr	r3, [r3, #16]
 800cdf6:	697a      	ldr	r2, [r7, #20]
 800cdf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800cdfc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ce00:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce08:	691b      	ldr	r3, [r3, #16]
 800ce0a:	697a      	ldr	r2, [r7, #20]
 800ce0c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce10:	f043 0318 	orr.w	r3, r3, #24
 800ce14:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800ce16:	697b      	ldr	r3, [r7, #20]
 800ce18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	697a      	ldr	r2, [r7, #20]
 800ce20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce24:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800ce28:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800ce2a:	7afb      	ldrb	r3, [r7, #11]
 800ce2c:	2b01      	cmp	r3, #1
 800ce2e:	d10f      	bne.n	800ce50 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800ce30:	697b      	ldr	r3, [r7, #20]
 800ce32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce36:	461a      	mov	r2, r3
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800ce3c:	697b      	ldr	r3, [r7, #20]
 800ce3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	697a      	ldr	r2, [r7, #20]
 800ce46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ce4a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800ce4e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ce50:	2300      	movs	r3, #0
}
 800ce52:	4618      	mov	r0, r3
 800ce54:	371c      	adds	r7, #28
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	4f54300a 	.word	0x4f54300a

0800ce64 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800ce64:	b480      	push	{r7}
 800ce66:	b085      	sub	sp, #20
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	3301      	adds	r3, #1
 800ce74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ce76:	68fb      	ldr	r3, [r7, #12]
 800ce78:	4a13      	ldr	r2, [pc, #76]	; (800cec8 <USB_CoreReset+0x64>)
 800ce7a:	4293      	cmp	r3, r2
 800ce7c:	d901      	bls.n	800ce82 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800ce7e:	2303      	movs	r3, #3
 800ce80:	e01b      	b.n	800ceba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	691b      	ldr	r3, [r3, #16]
 800ce86:	2b00      	cmp	r3, #0
 800ce88:	daf2      	bge.n	800ce70 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	691b      	ldr	r3, [r3, #16]
 800ce92:	f043 0201 	orr.w	r2, r3, #1
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800cea0:	68fb      	ldr	r3, [r7, #12]
 800cea2:	4a09      	ldr	r2, [pc, #36]	; (800cec8 <USB_CoreReset+0x64>)
 800cea4:	4293      	cmp	r3, r2
 800cea6:	d901      	bls.n	800ceac <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800cea8:	2303      	movs	r3, #3
 800ceaa:	e006      	b.n	800ceba <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	691b      	ldr	r3, [r3, #16]
 800ceb0:	f003 0301 	and.w	r3, r3, #1
 800ceb4:	2b01      	cmp	r3, #1
 800ceb6:	d0f0      	beq.n	800ce9a <USB_CoreReset+0x36>

  return HAL_OK;
 800ceb8:	2300      	movs	r3, #0
}
 800ceba:	4618      	mov	r0, r3
 800cebc:	3714      	adds	r7, #20
 800cebe:	46bd      	mov	sp, r7
 800cec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec4:	4770      	bx	lr
 800cec6:	bf00      	nop
 800cec8:	00030d40 	.word	0x00030d40

0800cecc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800cecc:	b084      	sub	sp, #16
 800cece:	b580      	push	{r7, lr}
 800ced0:	b086      	sub	sp, #24
 800ced2:	af00      	add	r7, sp, #0
 800ced4:	6078      	str	r0, [r7, #4]
 800ced6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800ceda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800cede:	2300      	movs	r3, #0
 800cee0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ceec:	461a      	mov	r2, r3
 800ceee:	2300      	movs	r3, #0
 800cef0:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cef6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cefe:	687b      	ldr	r3, [r7, #4]
 800cf00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d018      	beq.n	800cf3c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800cf0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf0c:	2b01      	cmp	r3, #1
 800cf0e:	d10a      	bne.n	800cf26 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf1e:	f043 0304 	orr.w	r3, r3, #4
 800cf22:	6013      	str	r3, [r2, #0]
 800cf24:	e014      	b.n	800cf50 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf34:	f023 0304 	bic.w	r3, r3, #4
 800cf38:	6013      	str	r3, [r2, #0]
 800cf3a:	e009      	b.n	800cf50 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800cf3c:	68fb      	ldr	r3, [r7, #12]
 800cf3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800cf4a:	f023 0304 	bic.w	r3, r3, #4
 800cf4e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cf50:	2110      	movs	r1, #16
 800cf52:	6878      	ldr	r0, [r7, #4]
 800cf54:	f7fe fe14 	bl	800bb80 <USB_FlushTxFifo>
 800cf58:	4603      	mov	r3, r0
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d001      	beq.n	800cf62 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800cf5e:	2301      	movs	r3, #1
 800cf60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	f7fe fe40 	bl	800bbe8 <USB_FlushRxFifo>
 800cf68:	4603      	mov	r3, r0
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d001      	beq.n	800cf72 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800cf72:	2300      	movs	r3, #0
 800cf74:	613b      	str	r3, [r7, #16]
 800cf76:	e015      	b.n	800cfa4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800cf78:	693b      	ldr	r3, [r7, #16]
 800cf7a:	015a      	lsls	r2, r3, #5
 800cf7c:	68fb      	ldr	r3, [r7, #12]
 800cf7e:	4413      	add	r3, r2
 800cf80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf84:	461a      	mov	r2, r3
 800cf86:	f04f 33ff 	mov.w	r3, #4294967295
 800cf8a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800cf8c:	693b      	ldr	r3, [r7, #16]
 800cf8e:	015a      	lsls	r2, r3, #5
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	4413      	add	r3, r2
 800cf94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cf98:	461a      	mov	r2, r3
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800cf9e:	693b      	ldr	r3, [r7, #16]
 800cfa0:	3301      	adds	r3, #1
 800cfa2:	613b      	str	r3, [r7, #16]
 800cfa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cfa6:	693a      	ldr	r2, [r7, #16]
 800cfa8:	429a      	cmp	r2, r3
 800cfaa:	d3e5      	bcc.n	800cf78 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	2200      	movs	r2, #0
 800cfb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cfbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d00b      	beq.n	800cfde <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cfcc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	4a13      	ldr	r2, [pc, #76]	; (800d020 <USB_HostInit+0x154>)
 800cfd2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800cfd4:	687b      	ldr	r3, [r7, #4]
 800cfd6:	4a13      	ldr	r2, [pc, #76]	; (800d024 <USB_HostInit+0x158>)
 800cfd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800cfdc:	e009      	b.n	800cff2 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2280      	movs	r2, #128	; 0x80
 800cfe2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	4a10      	ldr	r2, [pc, #64]	; (800d028 <USB_HostInit+0x15c>)
 800cfe8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	4a0f      	ldr	r2, [pc, #60]	; (800d02c <USB_HostInit+0x160>)
 800cfee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800cff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d105      	bne.n	800d004 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	699b      	ldr	r3, [r3, #24]
 800cffc:	f043 0210 	orr.w	r2, r3, #16
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	699a      	ldr	r2, [r3, #24]
 800d008:	4b09      	ldr	r3, [pc, #36]	; (800d030 <USB_HostInit+0x164>)
 800d00a:	4313      	orrs	r3, r2
 800d00c:	687a      	ldr	r2, [r7, #4]
 800d00e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800d010:	7dfb      	ldrb	r3, [r7, #23]
}
 800d012:	4618      	mov	r0, r3
 800d014:	3718      	adds	r7, #24
 800d016:	46bd      	mov	sp, r7
 800d018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800d01c:	b004      	add	sp, #16
 800d01e:	4770      	bx	lr
 800d020:	01000200 	.word	0x01000200
 800d024:	00e00300 	.word	0x00e00300
 800d028:	00600080 	.word	0x00600080
 800d02c:	004000e0 	.word	0x004000e0
 800d030:	a3200008 	.word	0xa3200008

0800d034 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800d034:	b480      	push	{r7}
 800d036:	b085      	sub	sp, #20
 800d038:	af00      	add	r7, sp, #0
 800d03a:	6078      	str	r0, [r7, #4]
 800d03c:	460b      	mov	r3, r1
 800d03e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800d052:	f023 0303 	bic.w	r3, r3, #3
 800d056:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d05e:	681a      	ldr	r2, [r3, #0]
 800d060:	78fb      	ldrb	r3, [r7, #3]
 800d062:	f003 0303 	and.w	r3, r3, #3
 800d066:	68f9      	ldr	r1, [r7, #12]
 800d068:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d06c:	4313      	orrs	r3, r2
 800d06e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800d070:	78fb      	ldrb	r3, [r7, #3]
 800d072:	2b01      	cmp	r3, #1
 800d074:	d107      	bne.n	800d086 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d07c:	461a      	mov	r2, r3
 800d07e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800d082:	6053      	str	r3, [r2, #4]
 800d084:	e009      	b.n	800d09a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800d086:	78fb      	ldrb	r3, [r7, #3]
 800d088:	2b02      	cmp	r3, #2
 800d08a:	d106      	bne.n	800d09a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d092:	461a      	mov	r2, r3
 800d094:	f241 7370 	movw	r3, #6000	; 0x1770
 800d098:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800d09a:	2300      	movs	r3, #0
}
 800d09c:	4618      	mov	r0, r3
 800d09e:	3714      	adds	r7, #20
 800d0a0:	46bd      	mov	sp, r7
 800d0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0a6:	4770      	bx	lr

0800d0a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b084      	sub	sp, #16
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d0b0:	687b      	ldr	r3, [r7, #4]
 800d0b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800d0b4:	2300      	movs	r3, #0
 800d0b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d0c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800d0ca:	68bb      	ldr	r3, [r7, #8]
 800d0cc:	68fa      	ldr	r2, [r7, #12]
 800d0ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d0d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d0d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800d0d8:	2064      	movs	r0, #100	; 0x64
 800d0da:	f7f5 ffdd 	bl	8003098 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	68fa      	ldr	r2, [r7, #12]
 800d0e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d0e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d0ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800d0ec:	200a      	movs	r0, #10
 800d0ee:	f7f5 ffd3 	bl	8003098 <HAL_Delay>

  return HAL_OK;
 800d0f2:	2300      	movs	r3, #0
}
 800d0f4:	4618      	mov	r0, r3
 800d0f6:	3710      	adds	r7, #16
 800d0f8:	46bd      	mov	sp, r7
 800d0fa:	bd80      	pop	{r7, pc}

0800d0fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800d0fc:	b480      	push	{r7}
 800d0fe:	b085      	sub	sp, #20
 800d100:	af00      	add	r7, sp, #0
 800d102:	6078      	str	r0, [r7, #4]
 800d104:	460b      	mov	r3, r1
 800d106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d10c:	2300      	movs	r3, #0
 800d10e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800d11a:	68bb      	ldr	r3, [r7, #8]
 800d11c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800d120:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d109      	bne.n	800d140 <USB_DriveVbus+0x44>
 800d12c:	78fb      	ldrb	r3, [r7, #3]
 800d12e:	2b01      	cmp	r3, #1
 800d130:	d106      	bne.n	800d140 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d13a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800d13e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800d140:	68bb      	ldr	r3, [r7, #8]
 800d142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d14a:	d109      	bne.n	800d160 <USB_DriveVbus+0x64>
 800d14c:	78fb      	ldrb	r3, [r7, #3]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d106      	bne.n	800d160 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800d152:	68bb      	ldr	r3, [r7, #8]
 800d154:	68fa      	ldr	r2, [r7, #12]
 800d156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800d15a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d15e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800d160:	2300      	movs	r3, #0
}
 800d162:	4618      	mov	r0, r3
 800d164:	3714      	adds	r7, #20
 800d166:	46bd      	mov	sp, r7
 800d168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d16c:	4770      	bx	lr

0800d16e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800d16e:	b480      	push	{r7}
 800d170:	b085      	sub	sp, #20
 800d172:	af00      	add	r7, sp, #0
 800d174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800d17a:	2300      	movs	r3, #0
 800d17c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	0c5b      	lsrs	r3, r3, #17
 800d18c:	f003 0303 	and.w	r3, r3, #3
}
 800d190:	4618      	mov	r0, r3
 800d192:	3714      	adds	r7, #20
 800d194:	46bd      	mov	sp, r7
 800d196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800d19c:	b480      	push	{r7}
 800d19e:	b085      	sub	sp, #20
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d1ae:	689b      	ldr	r3, [r3, #8]
 800d1b0:	b29b      	uxth	r3, r3
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3714      	adds	r7, #20
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1bc:	4770      	bx	lr
	...

0800d1c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b088      	sub	sp, #32
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
 800d1c8:	4608      	mov	r0, r1
 800d1ca:	4611      	mov	r1, r2
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	4603      	mov	r3, r0
 800d1d0:	70fb      	strb	r3, [r7, #3]
 800d1d2:	460b      	mov	r3, r1
 800d1d4:	70bb      	strb	r3, [r7, #2]
 800d1d6:	4613      	mov	r3, r2
 800d1d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800d1da:	2300      	movs	r3, #0
 800d1dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800d1e2:	78fb      	ldrb	r3, [r7, #3]
 800d1e4:	015a      	lsls	r2, r3, #5
 800d1e6:	693b      	ldr	r3, [r7, #16]
 800d1e8:	4413      	add	r3, r2
 800d1ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d1ee:	461a      	mov	r2, r3
 800d1f0:	f04f 33ff 	mov.w	r3, #4294967295
 800d1f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800d1f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d1fa:	2b03      	cmp	r3, #3
 800d1fc:	d87e      	bhi.n	800d2fc <USB_HC_Init+0x13c>
 800d1fe:	a201      	add	r2, pc, #4	; (adr r2, 800d204 <USB_HC_Init+0x44>)
 800d200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d204:	0800d215 	.word	0x0800d215
 800d208:	0800d2bf 	.word	0x0800d2bf
 800d20c:	0800d215 	.word	0x0800d215
 800d210:	0800d281 	.word	0x0800d281
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d214:	78fb      	ldrb	r3, [r7, #3]
 800d216:	015a      	lsls	r2, r3, #5
 800d218:	693b      	ldr	r3, [r7, #16]
 800d21a:	4413      	add	r3, r2
 800d21c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d220:	461a      	mov	r2, r3
 800d222:	f240 439d 	movw	r3, #1181	; 0x49d
 800d226:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800d228:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	da10      	bge.n	800d252 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d230:	78fb      	ldrb	r3, [r7, #3]
 800d232:	015a      	lsls	r2, r3, #5
 800d234:	693b      	ldr	r3, [r7, #16]
 800d236:	4413      	add	r3, r2
 800d238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	78fa      	ldrb	r2, [r7, #3]
 800d240:	0151      	lsls	r1, r2, #5
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	440a      	add	r2, r1
 800d246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d24a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d24e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800d250:	e057      	b.n	800d302 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d25a:	2b00      	cmp	r3, #0
 800d25c:	d051      	beq.n	800d302 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800d25e:	78fb      	ldrb	r3, [r7, #3]
 800d260:	015a      	lsls	r2, r3, #5
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	4413      	add	r3, r2
 800d266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d26a:	68db      	ldr	r3, [r3, #12]
 800d26c:	78fa      	ldrb	r2, [r7, #3]
 800d26e:	0151      	lsls	r1, r2, #5
 800d270:	693a      	ldr	r2, [r7, #16]
 800d272:	440a      	add	r2, r1
 800d274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d278:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d27c:	60d3      	str	r3, [r2, #12]
      break;
 800d27e:	e040      	b.n	800d302 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d280:	78fb      	ldrb	r3, [r7, #3]
 800d282:	015a      	lsls	r2, r3, #5
 800d284:	693b      	ldr	r3, [r7, #16]
 800d286:	4413      	add	r3, r2
 800d288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d28c:	461a      	mov	r2, r3
 800d28e:	f240 639d 	movw	r3, #1693	; 0x69d
 800d292:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d294:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	da34      	bge.n	800d306 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800d29c:	78fb      	ldrb	r3, [r7, #3]
 800d29e:	015a      	lsls	r2, r3, #5
 800d2a0:	693b      	ldr	r3, [r7, #16]
 800d2a2:	4413      	add	r3, r2
 800d2a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2a8:	68db      	ldr	r3, [r3, #12]
 800d2aa:	78fa      	ldrb	r2, [r7, #3]
 800d2ac:	0151      	lsls	r1, r2, #5
 800d2ae:	693a      	ldr	r2, [r7, #16]
 800d2b0:	440a      	add	r2, r1
 800d2b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d2ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 800d2bc:	e023      	b.n	800d306 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800d2be:	78fb      	ldrb	r3, [r7, #3]
 800d2c0:	015a      	lsls	r2, r3, #5
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	4413      	add	r3, r2
 800d2c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2ca:	461a      	mov	r2, r3
 800d2cc:	f240 2325 	movw	r3, #549	; 0x225
 800d2d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800d2d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	da17      	bge.n	800d30a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800d2da:	78fb      	ldrb	r3, [r7, #3]
 800d2dc:	015a      	lsls	r2, r3, #5
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	4413      	add	r3, r2
 800d2e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d2e6:	68db      	ldr	r3, [r3, #12]
 800d2e8:	78fa      	ldrb	r2, [r7, #3]
 800d2ea:	0151      	lsls	r1, r2, #5
 800d2ec:	693a      	ldr	r2, [r7, #16]
 800d2ee:	440a      	add	r2, r1
 800d2f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d2f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800d2f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 800d2fa:	e006      	b.n	800d30a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	77fb      	strb	r3, [r7, #31]
      break;
 800d300:	e004      	b.n	800d30c <USB_HC_Init+0x14c>
      break;
 800d302:	bf00      	nop
 800d304:	e002      	b.n	800d30c <USB_HC_Init+0x14c>
      break;
 800d306:	bf00      	nop
 800d308:	e000      	b.n	800d30c <USB_HC_Init+0x14c>
      break;
 800d30a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800d30c:	78fb      	ldrb	r3, [r7, #3]
 800d30e:	015a      	lsls	r2, r3, #5
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	4413      	add	r3, r2
 800d314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d318:	68db      	ldr	r3, [r3, #12]
 800d31a:	78fa      	ldrb	r2, [r7, #3]
 800d31c:	0151      	lsls	r1, r2, #5
 800d31e:	693a      	ldr	r2, [r7, #16]
 800d320:	440a      	add	r2, r1
 800d322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d326:	f043 0302 	orr.w	r3, r3, #2
 800d32a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800d32c:	693b      	ldr	r3, [r7, #16]
 800d32e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d332:	699a      	ldr	r2, [r3, #24]
 800d334:	78fb      	ldrb	r3, [r7, #3]
 800d336:	f003 030f 	and.w	r3, r3, #15
 800d33a:	2101      	movs	r1, #1
 800d33c:	fa01 f303 	lsl.w	r3, r1, r3
 800d340:	6939      	ldr	r1, [r7, #16]
 800d342:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800d346:	4313      	orrs	r3, r2
 800d348:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800d34a:	687b      	ldr	r3, [r7, #4]
 800d34c:	699b      	ldr	r3, [r3, #24]
 800d34e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800d356:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	da03      	bge.n	800d366 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800d35e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d362:	61bb      	str	r3, [r7, #24]
 800d364:	e001      	b.n	800d36a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800d366:	2300      	movs	r3, #0
 800d368:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800d36a:	6878      	ldr	r0, [r7, #4]
 800d36c:	f7ff feff 	bl	800d16e <USB_GetHostSpeed>
 800d370:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800d372:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800d376:	2b02      	cmp	r3, #2
 800d378:	d106      	bne.n	800d388 <USB_HC_Init+0x1c8>
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	2b02      	cmp	r3, #2
 800d37e:	d003      	beq.n	800d388 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800d380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800d384:	617b      	str	r3, [r7, #20]
 800d386:	e001      	b.n	800d38c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800d388:	2300      	movs	r3, #0
 800d38a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d38c:	787b      	ldrb	r3, [r7, #1]
 800d38e:	059b      	lsls	r3, r3, #22
 800d390:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d394:	78bb      	ldrb	r3, [r7, #2]
 800d396:	02db      	lsls	r3, r3, #11
 800d398:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d39c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d39e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3a2:	049b      	lsls	r3, r3, #18
 800d3a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800d3a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d3aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800d3ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800d3b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d3b2:	69bb      	ldr	r3, [r7, #24]
 800d3b4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d3b6:	78fb      	ldrb	r3, [r7, #3]
 800d3b8:	0159      	lsls	r1, r3, #5
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	440b      	add	r3, r1
 800d3be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3c2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800d3c8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800d3ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3ce:	2b03      	cmp	r3, #3
 800d3d0:	d003      	beq.n	800d3da <USB_HC_Init+0x21a>
 800d3d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d3d6:	2b01      	cmp	r3, #1
 800d3d8:	d10f      	bne.n	800d3fa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800d3da:	78fb      	ldrb	r3, [r7, #3]
 800d3dc:	015a      	lsls	r2, r3, #5
 800d3de:	693b      	ldr	r3, [r7, #16]
 800d3e0:	4413      	add	r3, r2
 800d3e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d3e6:	681b      	ldr	r3, [r3, #0]
 800d3e8:	78fa      	ldrb	r2, [r7, #3]
 800d3ea:	0151      	lsls	r1, r2, #5
 800d3ec:	693a      	ldr	r2, [r7, #16]
 800d3ee:	440a      	add	r2, r1
 800d3f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d3f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800d3f8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800d3fa:	7ffb      	ldrb	r3, [r7, #31]
}
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	3720      	adds	r7, #32
 800d400:	46bd      	mov	sp, r7
 800d402:	bd80      	pop	{r7, pc}

0800d404 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800d404:	b580      	push	{r7, lr}
 800d406:	b08c      	sub	sp, #48	; 0x30
 800d408:	af02      	add	r7, sp, #8
 800d40a:	60f8      	str	r0, [r7, #12]
 800d40c:	60b9      	str	r1, [r7, #8]
 800d40e:	4613      	mov	r3, r2
 800d410:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d412:	68fb      	ldr	r3, [r7, #12]
 800d414:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800d416:	68bb      	ldr	r3, [r7, #8]
 800d418:	785b      	ldrb	r3, [r3, #1]
 800d41a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800d41c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800d420:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d42a:	2b00      	cmp	r3, #0
 800d42c:	d02d      	beq.n	800d48a <USB_HC_StartXfer+0x86>
 800d42e:	68bb      	ldr	r3, [r7, #8]
 800d430:	791b      	ldrb	r3, [r3, #4]
 800d432:	2b00      	cmp	r3, #0
 800d434:	d129      	bne.n	800d48a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800d436:	79fb      	ldrb	r3, [r7, #7]
 800d438:	2b01      	cmp	r3, #1
 800d43a:	d117      	bne.n	800d46c <USB_HC_StartXfer+0x68>
 800d43c:	68bb      	ldr	r3, [r7, #8]
 800d43e:	79db      	ldrb	r3, [r3, #7]
 800d440:	2b00      	cmp	r3, #0
 800d442:	d003      	beq.n	800d44c <USB_HC_StartXfer+0x48>
 800d444:	68bb      	ldr	r3, [r7, #8]
 800d446:	79db      	ldrb	r3, [r3, #7]
 800d448:	2b02      	cmp	r3, #2
 800d44a:	d10f      	bne.n	800d46c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800d44c:	69fb      	ldr	r3, [r7, #28]
 800d44e:	015a      	lsls	r2, r3, #5
 800d450:	6a3b      	ldr	r3, [r7, #32]
 800d452:	4413      	add	r3, r2
 800d454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d458:	68db      	ldr	r3, [r3, #12]
 800d45a:	69fa      	ldr	r2, [r7, #28]
 800d45c:	0151      	lsls	r1, r2, #5
 800d45e:	6a3a      	ldr	r2, [r7, #32]
 800d460:	440a      	add	r2, r1
 800d462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d46a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800d46c:	79fb      	ldrb	r3, [r7, #7]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d10b      	bne.n	800d48a <USB_HC_StartXfer+0x86>
 800d472:	68bb      	ldr	r3, [r7, #8]
 800d474:	795b      	ldrb	r3, [r3, #5]
 800d476:	2b01      	cmp	r3, #1
 800d478:	d107      	bne.n	800d48a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800d47a:	68bb      	ldr	r3, [r7, #8]
 800d47c:	785b      	ldrb	r3, [r3, #1]
 800d47e:	4619      	mov	r1, r3
 800d480:	68f8      	ldr	r0, [r7, #12]
 800d482:	f000 fa0f 	bl	800d8a4 <USB_DoPing>
      return HAL_OK;
 800d486:	2300      	movs	r3, #0
 800d488:	e0f8      	b.n	800d67c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800d48a:	68bb      	ldr	r3, [r7, #8]
 800d48c:	695b      	ldr	r3, [r3, #20]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d018      	beq.n	800d4c4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	695b      	ldr	r3, [r3, #20]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	8912      	ldrh	r2, [r2, #8]
 800d49a:	4413      	add	r3, r2
 800d49c:	3b01      	subs	r3, #1
 800d49e:	68ba      	ldr	r2, [r7, #8]
 800d4a0:	8912      	ldrh	r2, [r2, #8]
 800d4a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800d4a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800d4a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800d4aa:	8b7b      	ldrh	r3, [r7, #26]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d90b      	bls.n	800d4c8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800d4b0:	8b7b      	ldrh	r3, [r7, #26]
 800d4b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d4b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4b6:	68ba      	ldr	r2, [r7, #8]
 800d4b8:	8912      	ldrh	r2, [r2, #8]
 800d4ba:	fb03 f202 	mul.w	r2, r3, r2
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	611a      	str	r2, [r3, #16]
 800d4c2:	e001      	b.n	800d4c8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800d4c4:	2301      	movs	r3, #1
 800d4c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800d4c8:	68bb      	ldr	r3, [r7, #8]
 800d4ca:	78db      	ldrb	r3, [r3, #3]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d007      	beq.n	800d4e0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800d4d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4d2:	68ba      	ldr	r2, [r7, #8]
 800d4d4:	8912      	ldrh	r2, [r2, #8]
 800d4d6:	fb03 f202 	mul.w	r2, r3, r2
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	611a      	str	r2, [r3, #16]
 800d4de:	e003      	b.n	800d4e8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800d4e0:	68bb      	ldr	r3, [r7, #8]
 800d4e2:	695a      	ldr	r2, [r3, #20]
 800d4e4:	68bb      	ldr	r3, [r7, #8]
 800d4e6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d4e8:	68bb      	ldr	r3, [r7, #8]
 800d4ea:	691b      	ldr	r3, [r3, #16]
 800d4ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d4f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800d4f2:	04d9      	lsls	r1, r3, #19
 800d4f4:	4b63      	ldr	r3, [pc, #396]	; (800d684 <USB_HC_StartXfer+0x280>)
 800d4f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d4f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800d4fa:	68bb      	ldr	r3, [r7, #8]
 800d4fc:	7a9b      	ldrb	r3, [r3, #10]
 800d4fe:	075b      	lsls	r3, r3, #29
 800d500:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d504:	69f9      	ldr	r1, [r7, #28]
 800d506:	0148      	lsls	r0, r1, #5
 800d508:	6a39      	ldr	r1, [r7, #32]
 800d50a:	4401      	add	r1, r0
 800d50c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d510:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800d512:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800d514:	79fb      	ldrb	r3, [r7, #7]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d009      	beq.n	800d52e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800d51a:	68bb      	ldr	r3, [r7, #8]
 800d51c:	68d9      	ldr	r1, [r3, #12]
 800d51e:	69fb      	ldr	r3, [r7, #28]
 800d520:	015a      	lsls	r2, r3, #5
 800d522:	6a3b      	ldr	r3, [r7, #32]
 800d524:	4413      	add	r3, r2
 800d526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d52a:	460a      	mov	r2, r1
 800d52c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800d52e:	6a3b      	ldr	r3, [r7, #32]
 800d530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d534:	689b      	ldr	r3, [r3, #8]
 800d536:	f003 0301 	and.w	r3, r3, #1
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	bf0c      	ite	eq
 800d53e:	2301      	moveq	r3, #1
 800d540:	2300      	movne	r3, #0
 800d542:	b2db      	uxtb	r3, r3
 800d544:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800d546:	69fb      	ldr	r3, [r7, #28]
 800d548:	015a      	lsls	r2, r3, #5
 800d54a:	6a3b      	ldr	r3, [r7, #32]
 800d54c:	4413      	add	r3, r2
 800d54e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	69fa      	ldr	r2, [r7, #28]
 800d556:	0151      	lsls	r1, r2, #5
 800d558:	6a3a      	ldr	r2, [r7, #32]
 800d55a:	440a      	add	r2, r1
 800d55c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d560:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d564:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	015a      	lsls	r2, r3, #5
 800d56a:	6a3b      	ldr	r3, [r7, #32]
 800d56c:	4413      	add	r3, r2
 800d56e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d572:	681a      	ldr	r2, [r3, #0]
 800d574:	7e7b      	ldrb	r3, [r7, #25]
 800d576:	075b      	lsls	r3, r3, #29
 800d578:	69f9      	ldr	r1, [r7, #28]
 800d57a:	0148      	lsls	r0, r1, #5
 800d57c:	6a39      	ldr	r1, [r7, #32]
 800d57e:	4401      	add	r1, r0
 800d580:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800d584:	4313      	orrs	r3, r2
 800d586:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800d588:	69fb      	ldr	r3, [r7, #28]
 800d58a:	015a      	lsls	r2, r3, #5
 800d58c:	6a3b      	ldr	r3, [r7, #32]
 800d58e:	4413      	add	r3, r2
 800d590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d594:	681b      	ldr	r3, [r3, #0]
 800d596:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d59e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800d5a0:	68bb      	ldr	r3, [r7, #8]
 800d5a2:	78db      	ldrb	r3, [r3, #3]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d004      	beq.n	800d5b2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800d5a8:	693b      	ldr	r3, [r7, #16]
 800d5aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800d5ae:	613b      	str	r3, [r7, #16]
 800d5b0:	e003      	b.n	800d5ba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d5b8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d5c0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800d5c2:	69fb      	ldr	r3, [r7, #28]
 800d5c4:	015a      	lsls	r2, r3, #5
 800d5c6:	6a3b      	ldr	r3, [r7, #32]
 800d5c8:	4413      	add	r3, r2
 800d5ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d5ce:	461a      	mov	r2, r3
 800d5d0:	693b      	ldr	r3, [r7, #16]
 800d5d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800d5d4:	79fb      	ldrb	r3, [r7, #7]
 800d5d6:	2b00      	cmp	r3, #0
 800d5d8:	d001      	beq.n	800d5de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	e04e      	b.n	800d67c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800d5de:	68bb      	ldr	r3, [r7, #8]
 800d5e0:	78db      	ldrb	r3, [r3, #3]
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d149      	bne.n	800d67a <USB_HC_StartXfer+0x276>
 800d5e6:	68bb      	ldr	r3, [r7, #8]
 800d5e8:	695b      	ldr	r3, [r3, #20]
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d045      	beq.n	800d67a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	79db      	ldrb	r3, [r3, #7]
 800d5f2:	2b03      	cmp	r3, #3
 800d5f4:	d830      	bhi.n	800d658 <USB_HC_StartXfer+0x254>
 800d5f6:	a201      	add	r2, pc, #4	; (adr r2, 800d5fc <USB_HC_StartXfer+0x1f8>)
 800d5f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5fc:	0800d60d 	.word	0x0800d60d
 800d600:	0800d631 	.word	0x0800d631
 800d604:	0800d60d 	.word	0x0800d60d
 800d608:	0800d631 	.word	0x0800d631
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	695b      	ldr	r3, [r3, #20]
 800d610:	3303      	adds	r3, #3
 800d612:	089b      	lsrs	r3, r3, #2
 800d614:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800d616:	8afa      	ldrh	r2, [r7, #22]
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d61c:	b29b      	uxth	r3, r3
 800d61e:	429a      	cmp	r2, r3
 800d620:	d91c      	bls.n	800d65c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	699b      	ldr	r3, [r3, #24]
 800d626:	f043 0220 	orr.w	r2, r3, #32
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	619a      	str	r2, [r3, #24]
        }
        break;
 800d62e:	e015      	b.n	800d65c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	695b      	ldr	r3, [r3, #20]
 800d634:	3303      	adds	r3, #3
 800d636:	089b      	lsrs	r3, r3, #2
 800d638:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800d63a:	8afa      	ldrh	r2, [r7, #22]
 800d63c:	6a3b      	ldr	r3, [r7, #32]
 800d63e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d642:	691b      	ldr	r3, [r3, #16]
 800d644:	b29b      	uxth	r3, r3
 800d646:	429a      	cmp	r2, r3
 800d648:	d90a      	bls.n	800d660 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	699b      	ldr	r3, [r3, #24]
 800d64e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	619a      	str	r2, [r3, #24]
        }
        break;
 800d656:	e003      	b.n	800d660 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800d658:	bf00      	nop
 800d65a:	e002      	b.n	800d662 <USB_HC_StartXfer+0x25e>
        break;
 800d65c:	bf00      	nop
 800d65e:	e000      	b.n	800d662 <USB_HC_StartXfer+0x25e>
        break;
 800d660:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	68d9      	ldr	r1, [r3, #12]
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	785a      	ldrb	r2, [r3, #1]
 800d66a:	68bb      	ldr	r3, [r7, #8]
 800d66c:	695b      	ldr	r3, [r3, #20]
 800d66e:	b29b      	uxth	r3, r3
 800d670:	2000      	movs	r0, #0
 800d672:	9000      	str	r0, [sp, #0]
 800d674:	68f8      	ldr	r0, [r7, #12]
 800d676:	f7ff f8df 	bl	800c838 <USB_WritePacket>
  }

  return HAL_OK;
 800d67a:	2300      	movs	r3, #0
}
 800d67c:	4618      	mov	r0, r3
 800d67e:	3728      	adds	r7, #40	; 0x28
 800d680:	46bd      	mov	sp, r7
 800d682:	bd80      	pop	{r7, pc}
 800d684:	1ff80000 	.word	0x1ff80000

0800d688 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800d688:	b480      	push	{r7}
 800d68a:	b085      	sub	sp, #20
 800d68c:	af00      	add	r7, sp, #0
 800d68e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d69a:	695b      	ldr	r3, [r3, #20]
 800d69c:	b29b      	uxth	r3, r3
}
 800d69e:	4618      	mov	r0, r3
 800d6a0:	3714      	adds	r7, #20
 800d6a2:	46bd      	mov	sp, r7
 800d6a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6a8:	4770      	bx	lr

0800d6aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800d6aa:	b480      	push	{r7}
 800d6ac:	b089      	sub	sp, #36	; 0x24
 800d6ae:	af00      	add	r7, sp, #0
 800d6b0:	6078      	str	r0, [r7, #4]
 800d6b2:	460b      	mov	r3, r1
 800d6b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800d6ba:	78fb      	ldrb	r3, [r7, #3]
 800d6bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800d6be:	2300      	movs	r3, #0
 800d6c0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800d6c2:	69bb      	ldr	r3, [r7, #24]
 800d6c4:	015a      	lsls	r2, r3, #5
 800d6c6:	69fb      	ldr	r3, [r7, #28]
 800d6c8:	4413      	add	r3, r2
 800d6ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6ce:	681b      	ldr	r3, [r3, #0]
 800d6d0:	0c9b      	lsrs	r3, r3, #18
 800d6d2:	f003 0303 	and.w	r3, r3, #3
 800d6d6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800d6d8:	69bb      	ldr	r3, [r7, #24]
 800d6da:	015a      	lsls	r2, r3, #5
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	4413      	add	r3, r2
 800d6e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d6e4:	681b      	ldr	r3, [r3, #0]
 800d6e6:	0fdb      	lsrs	r3, r3, #31
 800d6e8:	f003 0301 	and.w	r3, r3, #1
 800d6ec:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	689b      	ldr	r3, [r3, #8]
 800d6f2:	f003 0320 	and.w	r3, r3, #32
 800d6f6:	2b20      	cmp	r3, #32
 800d6f8:	d104      	bne.n	800d704 <USB_HC_Halt+0x5a>
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	2b00      	cmp	r3, #0
 800d6fe:	d101      	bne.n	800d704 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800d700:	2300      	movs	r3, #0
 800d702:	e0c8      	b.n	800d896 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800d704:	697b      	ldr	r3, [r7, #20]
 800d706:	2b00      	cmp	r3, #0
 800d708:	d002      	beq.n	800d710 <USB_HC_Halt+0x66>
 800d70a:	697b      	ldr	r3, [r7, #20]
 800d70c:	2b02      	cmp	r3, #2
 800d70e:	d163      	bne.n	800d7d8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d710:	69bb      	ldr	r3, [r7, #24]
 800d712:	015a      	lsls	r2, r3, #5
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	4413      	add	r3, r2
 800d718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d71c:	681b      	ldr	r3, [r3, #0]
 800d71e:	69ba      	ldr	r2, [r7, #24]
 800d720:	0151      	lsls	r1, r2, #5
 800d722:	69fa      	ldr	r2, [r7, #28]
 800d724:	440a      	add	r2, r1
 800d726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d72a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d72e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d730:	687b      	ldr	r3, [r7, #4]
 800d732:	689b      	ldr	r3, [r3, #8]
 800d734:	f003 0320 	and.w	r3, r3, #32
 800d738:	2b00      	cmp	r3, #0
 800d73a:	f040 80ab 	bne.w	800d894 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d746:	2b00      	cmp	r3, #0
 800d748:	d133      	bne.n	800d7b2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d74a:	69bb      	ldr	r3, [r7, #24]
 800d74c:	015a      	lsls	r2, r3, #5
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	4413      	add	r3, r2
 800d752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d756:	681b      	ldr	r3, [r3, #0]
 800d758:	69ba      	ldr	r2, [r7, #24]
 800d75a:	0151      	lsls	r1, r2, #5
 800d75c:	69fa      	ldr	r2, [r7, #28]
 800d75e:	440a      	add	r2, r1
 800d760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d768:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d76a:	69bb      	ldr	r3, [r7, #24]
 800d76c:	015a      	lsls	r2, r3, #5
 800d76e:	69fb      	ldr	r3, [r7, #28]
 800d770:	4413      	add	r3, r2
 800d772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	69ba      	ldr	r2, [r7, #24]
 800d77a:	0151      	lsls	r1, r2, #5
 800d77c:	69fa      	ldr	r2, [r7, #28]
 800d77e:	440a      	add	r2, r1
 800d780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d788:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800d78a:	68fb      	ldr	r3, [r7, #12]
 800d78c:	3301      	adds	r3, #1
 800d78e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d796:	d81d      	bhi.n	800d7d4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d798:	69bb      	ldr	r3, [r7, #24]
 800d79a:	015a      	lsls	r2, r3, #5
 800d79c:	69fb      	ldr	r3, [r7, #28]
 800d79e:	4413      	add	r3, r2
 800d7a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d7aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d7ae:	d0ec      	beq.n	800d78a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d7b0:	e070      	b.n	800d894 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d7b2:	69bb      	ldr	r3, [r7, #24]
 800d7b4:	015a      	lsls	r2, r3, #5
 800d7b6:	69fb      	ldr	r3, [r7, #28]
 800d7b8:	4413      	add	r3, r2
 800d7ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	69ba      	ldr	r2, [r7, #24]
 800d7c2:	0151      	lsls	r1, r2, #5
 800d7c4:	69fa      	ldr	r2, [r7, #28]
 800d7c6:	440a      	add	r2, r1
 800d7c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d7d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d7d2:	e05f      	b.n	800d894 <USB_HC_Halt+0x1ea>
            break;
 800d7d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800d7d6:	e05d      	b.n	800d894 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800d7d8:	69bb      	ldr	r3, [r7, #24]
 800d7da:	015a      	lsls	r2, r3, #5
 800d7dc:	69fb      	ldr	r3, [r7, #28]
 800d7de:	4413      	add	r3, r2
 800d7e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d7e4:	681b      	ldr	r3, [r3, #0]
 800d7e6:	69ba      	ldr	r2, [r7, #24]
 800d7e8:	0151      	lsls	r1, r2, #5
 800d7ea:	69fa      	ldr	r2, [r7, #28]
 800d7ec:	440a      	add	r2, r1
 800d7ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d7f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d7f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800d7f8:	69fb      	ldr	r3, [r7, #28]
 800d7fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800d804:	2b00      	cmp	r3, #0
 800d806:	d133      	bne.n	800d870 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800d808:	69bb      	ldr	r3, [r7, #24]
 800d80a:	015a      	lsls	r2, r3, #5
 800d80c:	69fb      	ldr	r3, [r7, #28]
 800d80e:	4413      	add	r3, r2
 800d810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d814:	681b      	ldr	r3, [r3, #0]
 800d816:	69ba      	ldr	r2, [r7, #24]
 800d818:	0151      	lsls	r1, r2, #5
 800d81a:	69fa      	ldr	r2, [r7, #28]
 800d81c:	440a      	add	r2, r1
 800d81e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d826:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d828:	69bb      	ldr	r3, [r7, #24]
 800d82a:	015a      	lsls	r2, r3, #5
 800d82c:	69fb      	ldr	r3, [r7, #28]
 800d82e:	4413      	add	r3, r2
 800d830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	69ba      	ldr	r2, [r7, #24]
 800d838:	0151      	lsls	r1, r2, #5
 800d83a:	69fa      	ldr	r2, [r7, #28]
 800d83c:	440a      	add	r2, r1
 800d83e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d842:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d846:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800d848:	68fb      	ldr	r3, [r7, #12]
 800d84a:	3301      	adds	r3, #1
 800d84c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d854:	d81d      	bhi.n	800d892 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d856:	69bb      	ldr	r3, [r7, #24]
 800d858:	015a      	lsls	r2, r3, #5
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	4413      	add	r3, r2
 800d85e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d86c:	d0ec      	beq.n	800d848 <USB_HC_Halt+0x19e>
 800d86e:	e011      	b.n	800d894 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800d870:	69bb      	ldr	r3, [r7, #24]
 800d872:	015a      	lsls	r2, r3, #5
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	4413      	add	r3, r2
 800d878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d87c:	681b      	ldr	r3, [r3, #0]
 800d87e:	69ba      	ldr	r2, [r7, #24]
 800d880:	0151      	lsls	r1, r2, #5
 800d882:	69fa      	ldr	r2, [r7, #28]
 800d884:	440a      	add	r2, r1
 800d886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d88a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d88e:	6013      	str	r3, [r2, #0]
 800d890:	e000      	b.n	800d894 <USB_HC_Halt+0x1ea>
          break;
 800d892:	bf00      	nop
    }
  }

  return HAL_OK;
 800d894:	2300      	movs	r3, #0
}
 800d896:	4618      	mov	r0, r3
 800d898:	3724      	adds	r7, #36	; 0x24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a0:	4770      	bx	lr
	...

0800d8a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800d8a4:	b480      	push	{r7}
 800d8a6:	b087      	sub	sp, #28
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
 800d8ac:	460b      	mov	r3, r1
 800d8ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800d8b4:	78fb      	ldrb	r3, [r7, #3]
 800d8b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800d8b8:	2301      	movs	r3, #1
 800d8ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800d8bc:	68fb      	ldr	r3, [r7, #12]
 800d8be:	04da      	lsls	r2, r3, #19
 800d8c0:	4b15      	ldr	r3, [pc, #84]	; (800d918 <USB_DoPing+0x74>)
 800d8c2:	4013      	ands	r3, r2
 800d8c4:	693a      	ldr	r2, [r7, #16]
 800d8c6:	0151      	lsls	r1, r2, #5
 800d8c8:	697a      	ldr	r2, [r7, #20]
 800d8ca:	440a      	add	r2, r1
 800d8cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800d8d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d8d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	015a      	lsls	r2, r3, #5
 800d8da:	697b      	ldr	r3, [r7, #20]
 800d8dc:	4413      	add	r3, r2
 800d8de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800d8e6:	68bb      	ldr	r3, [r7, #8]
 800d8e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800d8ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800d8ee:	68bb      	ldr	r3, [r7, #8]
 800d8f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d8f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	015a      	lsls	r2, r3, #5
 800d8fa:	697b      	ldr	r3, [r7, #20]
 800d8fc:	4413      	add	r3, r2
 800d8fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d902:	461a      	mov	r2, r3
 800d904:	68bb      	ldr	r3, [r7, #8]
 800d906:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800d908:	2300      	movs	r3, #0
}
 800d90a:	4618      	mov	r0, r3
 800d90c:	371c      	adds	r7, #28
 800d90e:	46bd      	mov	sp, r7
 800d910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d914:	4770      	bx	lr
 800d916:	bf00      	nop
 800d918:	1ff80000 	.word	0x1ff80000

0800d91c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800d91c:	b580      	push	{r7, lr}
 800d91e:	b088      	sub	sp, #32
 800d920:	af00      	add	r7, sp, #0
 800d922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800d924:	2300      	movs	r3, #0
 800d926:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800d928:	687b      	ldr	r3, [r7, #4]
 800d92a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800d92c:	2300      	movs	r3, #0
 800d92e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800d930:	6878      	ldr	r0, [r7, #4]
 800d932:	f7fd ff6a 	bl	800b80a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800d936:	2110      	movs	r1, #16
 800d938:	6878      	ldr	r0, [r7, #4]
 800d93a:	f7fe f921 	bl	800bb80 <USB_FlushTxFifo>
 800d93e:	4603      	mov	r3, r0
 800d940:	2b00      	cmp	r3, #0
 800d942:	d001      	beq.n	800d948 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800d944:	2301      	movs	r3, #1
 800d946:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800d948:	6878      	ldr	r0, [r7, #4]
 800d94a:	f7fe f94d 	bl	800bbe8 <USB_FlushRxFifo>
 800d94e:	4603      	mov	r3, r0
 800d950:	2b00      	cmp	r3, #0
 800d952:	d001      	beq.n	800d958 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800d954:	2301      	movs	r3, #1
 800d956:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800d958:	2300      	movs	r3, #0
 800d95a:	61bb      	str	r3, [r7, #24]
 800d95c:	e01f      	b.n	800d99e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800d95e:	69bb      	ldr	r3, [r7, #24]
 800d960:	015a      	lsls	r2, r3, #5
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	4413      	add	r3, r2
 800d966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d974:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800d976:	693b      	ldr	r3, [r7, #16]
 800d978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d97c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d97e:	693b      	ldr	r3, [r7, #16]
 800d980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d984:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d986:	69bb      	ldr	r3, [r7, #24]
 800d988:	015a      	lsls	r2, r3, #5
 800d98a:	697b      	ldr	r3, [r7, #20]
 800d98c:	4413      	add	r3, r2
 800d98e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d992:	461a      	mov	r2, r3
 800d994:	693b      	ldr	r3, [r7, #16]
 800d996:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	3301      	adds	r3, #1
 800d99c:	61bb      	str	r3, [r7, #24]
 800d99e:	69bb      	ldr	r3, [r7, #24]
 800d9a0:	2b0f      	cmp	r3, #15
 800d9a2:	d9dc      	bls.n	800d95e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800d9a4:	2300      	movs	r3, #0
 800d9a6:	61bb      	str	r3, [r7, #24]
 800d9a8:	e034      	b.n	800da14 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800d9aa:	69bb      	ldr	r3, [r7, #24]
 800d9ac:	015a      	lsls	r2, r3, #5
 800d9ae:	697b      	ldr	r3, [r7, #20]
 800d9b0:	4413      	add	r3, r2
 800d9b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9b6:	681b      	ldr	r3, [r3, #0]
 800d9b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800d9ba:	693b      	ldr	r3, [r7, #16]
 800d9bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800d9c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800d9c2:	693b      	ldr	r3, [r7, #16]
 800d9c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800d9c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800d9ca:	693b      	ldr	r3, [r7, #16]
 800d9cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d9d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800d9d2:	69bb      	ldr	r3, [r7, #24]
 800d9d4:	015a      	lsls	r2, r3, #5
 800d9d6:	697b      	ldr	r3, [r7, #20]
 800d9d8:	4413      	add	r3, r2
 800d9da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9de:	461a      	mov	r2, r3
 800d9e0:	693b      	ldr	r3, [r7, #16]
 800d9e2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800d9f0:	d80c      	bhi.n	800da0c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800d9f2:	69bb      	ldr	r3, [r7, #24]
 800d9f4:	015a      	lsls	r2, r3, #5
 800d9f6:	697b      	ldr	r3, [r7, #20]
 800d9f8:	4413      	add	r3, r2
 800d9fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800da04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800da08:	d0ec      	beq.n	800d9e4 <USB_StopHost+0xc8>
 800da0a:	e000      	b.n	800da0e <USB_StopHost+0xf2>
        break;
 800da0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800da0e:	69bb      	ldr	r3, [r7, #24]
 800da10:	3301      	adds	r3, #1
 800da12:	61bb      	str	r3, [r7, #24]
 800da14:	69bb      	ldr	r3, [r7, #24]
 800da16:	2b0f      	cmp	r3, #15
 800da18:	d9c7      	bls.n	800d9aa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800da20:	461a      	mov	r2, r3
 800da22:	f04f 33ff 	mov.w	r3, #4294967295
 800da26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	f04f 32ff 	mov.w	r2, #4294967295
 800da2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800da30:	6878      	ldr	r0, [r7, #4]
 800da32:	f7fd fed9 	bl	800b7e8 <USB_EnableGlobalInt>

  return ret;
 800da36:	7ffb      	ldrb	r3, [r7, #31]
}
 800da38:	4618      	mov	r0, r3
 800da3a:	3720      	adds	r7, #32
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}

0800da40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800da40:	b580      	push	{r7, lr}
 800da42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800da44:	4904      	ldr	r1, [pc, #16]	; (800da58 <MX_FATFS_Init+0x18>)
 800da46:	4805      	ldr	r0, [pc, #20]	; (800da5c <MX_FATFS_Init+0x1c>)
 800da48:	f007 f8fa 	bl	8014c40 <FATFS_LinkDriver>
 800da4c:	4603      	mov	r3, r0
 800da4e:	461a      	mov	r2, r3
 800da50:	4b03      	ldr	r3, [pc, #12]	; (800da60 <MX_FATFS_Init+0x20>)
 800da52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800da54:	bf00      	nop
 800da56:	bd80      	pop	{r7, pc}
 800da58:	20002b5c 	.word	0x20002b5c
 800da5c:	080195a4 	.word	0x080195a4
 800da60:	20002b58 	.word	0x20002b58

0800da64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800da64:	b480      	push	{r7}
 800da66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800da68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800da6a:	4618      	mov	r0, r3
 800da6c:	46bd      	mov	sp, r7
 800da6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da72:	4770      	bx	lr

0800da74 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b082      	sub	sp, #8
 800da78:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800da7a:	2300      	movs	r3, #0
 800da7c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800da7e:	f000 f86b 	bl	800db58 <BSP_SD_IsDetected>
 800da82:	4603      	mov	r3, r0
 800da84:	2b01      	cmp	r3, #1
 800da86:	d001      	beq.n	800da8c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800da88:	2302      	movs	r3, #2
 800da8a:	e005      	b.n	800da98 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800da8c:	4804      	ldr	r0, [pc, #16]	; (800daa0 <BSP_SD_Init+0x2c>)
 800da8e:	f7fa fc81 	bl	8008394 <HAL_SD_Init>
 800da92:	4603      	mov	r3, r0
 800da94:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800da96:	79fb      	ldrb	r3, [r7, #7]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	3708      	adds	r7, #8
 800da9c:	46bd      	mov	sp, r7
 800da9e:	bd80      	pop	{r7, pc}
 800daa0:	200003c0 	.word	0x200003c0

0800daa4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b088      	sub	sp, #32
 800daa8:	af02      	add	r7, sp, #8
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800dab2:	2300      	movs	r3, #0
 800dab4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800dab6:	683b      	ldr	r3, [r7, #0]
 800dab8:	9300      	str	r3, [sp, #0]
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	68ba      	ldr	r2, [r7, #8]
 800dabe:	68f9      	ldr	r1, [r7, #12]
 800dac0:	4806      	ldr	r0, [pc, #24]	; (800dadc <BSP_SD_ReadBlocks+0x38>)
 800dac2:	f7fa fd1f 	bl	8008504 <HAL_SD_ReadBlocks>
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800dacc:	2301      	movs	r3, #1
 800dace:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800dad0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dad2:	4618      	mov	r0, r3
 800dad4:	3718      	adds	r7, #24
 800dad6:	46bd      	mov	sp, r7
 800dad8:	bd80      	pop	{r7, pc}
 800dada:	bf00      	nop
 800dadc:	200003c0 	.word	0x200003c0

0800dae0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800dae0:	b580      	push	{r7, lr}
 800dae2:	b088      	sub	sp, #32
 800dae4:	af02      	add	r7, sp, #8
 800dae6:	60f8      	str	r0, [r7, #12]
 800dae8:	60b9      	str	r1, [r7, #8]
 800daea:	607a      	str	r2, [r7, #4]
 800daec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800daee:	2300      	movs	r3, #0
 800daf0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	9300      	str	r3, [sp, #0]
 800daf6:	687b      	ldr	r3, [r7, #4]
 800daf8:	68ba      	ldr	r2, [r7, #8]
 800dafa:	68f9      	ldr	r1, [r7, #12]
 800dafc:	4806      	ldr	r0, [pc, #24]	; (800db18 <BSP_SD_WriteBlocks+0x38>)
 800dafe:	f7fa fedf 	bl	80088c0 <HAL_SD_WriteBlocks>
 800db02:	4603      	mov	r3, r0
 800db04:	2b00      	cmp	r3, #0
 800db06:	d001      	beq.n	800db0c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800db08:	2301      	movs	r3, #1
 800db0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800db0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800db0e:	4618      	mov	r0, r3
 800db10:	3718      	adds	r7, #24
 800db12:	46bd      	mov	sp, r7
 800db14:	bd80      	pop	{r7, pc}
 800db16:	bf00      	nop
 800db18:	200003c0 	.word	0x200003c0

0800db1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800db1c:	b580      	push	{r7, lr}
 800db1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800db20:	4805      	ldr	r0, [pc, #20]	; (800db38 <BSP_SD_GetCardState+0x1c>)
 800db22:	f7fb fa23 	bl	8008f6c <HAL_SD_GetCardState>
 800db26:	4603      	mov	r3, r0
 800db28:	2b04      	cmp	r3, #4
 800db2a:	bf14      	ite	ne
 800db2c:	2301      	movne	r3, #1
 800db2e:	2300      	moveq	r3, #0
 800db30:	b2db      	uxtb	r3, r3
}
 800db32:	4618      	mov	r0, r3
 800db34:	bd80      	pop	{r7, pc}
 800db36:	bf00      	nop
 800db38:	200003c0 	.word	0x200003c0

0800db3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b082      	sub	sp, #8
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800db44:	6879      	ldr	r1, [r7, #4]
 800db46:	4803      	ldr	r0, [pc, #12]	; (800db54 <BSP_SD_GetCardInfo+0x18>)
 800db48:	f7fb f9e4 	bl	8008f14 <HAL_SD_GetCardInfo>
}
 800db4c:	bf00      	nop
 800db4e:	3708      	adds	r7, #8
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	200003c0 	.word	0x200003c0

0800db58 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800db58:	b580      	push	{r7, lr}
 800db5a:	b082      	sub	sp, #8
 800db5c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800db5e:	2301      	movs	r3, #1
 800db60:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800db62:	f000 f80b 	bl	800db7c <BSP_PlatformIsDetected>
 800db66:	4603      	mov	r3, r0
 800db68:	2b00      	cmp	r3, #0
 800db6a:	d101      	bne.n	800db70 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800db6c:	2300      	movs	r3, #0
 800db6e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800db70:	79fb      	ldrb	r3, [r7, #7]
 800db72:	b2db      	uxtb	r3, r3
}
 800db74:	4618      	mov	r0, r3
 800db76:	3708      	adds	r7, #8
 800db78:	46bd      	mov	sp, r7
 800db7a:	bd80      	pop	{r7, pc}

0800db7c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800db7c:	b580      	push	{r7, lr}
 800db7e:	b082      	sub	sp, #8
 800db80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800db82:	2301      	movs	r3, #1
 800db84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800db86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800db8a:	4806      	ldr	r0, [pc, #24]	; (800dba4 <BSP_PlatformIsDetected+0x28>)
 800db8c:	f7f6 fae4 	bl	8004158 <HAL_GPIO_ReadPin>
 800db90:	4603      	mov	r3, r0
 800db92:	2b00      	cmp	r3, #0
 800db94:	d001      	beq.n	800db9a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800db96:	2300      	movs	r3, #0
 800db98:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800db9a:	79fb      	ldrb	r3, [r7, #7]
}
 800db9c:	4618      	mov	r0, r3
 800db9e:	3708      	adds	r7, #8
 800dba0:	46bd      	mov	sp, r7
 800dba2:	bd80      	pop	{r7, pc}
 800dba4:	40020000 	.word	0x40020000

0800dba8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800dba8:	b580      	push	{r7, lr}
 800dbaa:	b082      	sub	sp, #8
 800dbac:	af00      	add	r7, sp, #0
 800dbae:	4603      	mov	r3, r0
 800dbb0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800dbb2:	4b0b      	ldr	r3, [pc, #44]	; (800dbe0 <SD_CheckStatus+0x38>)
 800dbb4:	2201      	movs	r2, #1
 800dbb6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800dbb8:	f7ff ffb0 	bl	800db1c <BSP_SD_GetCardState>
 800dbbc:	4603      	mov	r3, r0
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d107      	bne.n	800dbd2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800dbc2:	4b07      	ldr	r3, [pc, #28]	; (800dbe0 <SD_CheckStatus+0x38>)
 800dbc4:	781b      	ldrb	r3, [r3, #0]
 800dbc6:	b2db      	uxtb	r3, r3
 800dbc8:	f023 0301 	bic.w	r3, r3, #1
 800dbcc:	b2da      	uxtb	r2, r3
 800dbce:	4b04      	ldr	r3, [pc, #16]	; (800dbe0 <SD_CheckStatus+0x38>)
 800dbd0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800dbd2:	4b03      	ldr	r3, [pc, #12]	; (800dbe0 <SD_CheckStatus+0x38>)
 800dbd4:	781b      	ldrb	r3, [r3, #0]
 800dbd6:	b2db      	uxtb	r3, r3
}
 800dbd8:	4618      	mov	r0, r3
 800dbda:	3708      	adds	r7, #8
 800dbdc:	46bd      	mov	sp, r7
 800dbde:	bd80      	pop	{r7, pc}
 800dbe0:	20000009 	.word	0x20000009

0800dbe4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b082      	sub	sp, #8
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	4603      	mov	r3, r0
 800dbec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800dbee:	4b0b      	ldr	r3, [pc, #44]	; (800dc1c <SD_initialize+0x38>)
 800dbf0:	2201      	movs	r2, #1
 800dbf2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800dbf4:	f7ff ff3e 	bl	800da74 <BSP_SD_Init>
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d107      	bne.n	800dc0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800dbfe:	79fb      	ldrb	r3, [r7, #7]
 800dc00:	4618      	mov	r0, r3
 800dc02:	f7ff ffd1 	bl	800dba8 <SD_CheckStatus>
 800dc06:	4603      	mov	r3, r0
 800dc08:	461a      	mov	r2, r3
 800dc0a:	4b04      	ldr	r3, [pc, #16]	; (800dc1c <SD_initialize+0x38>)
 800dc0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800dc0e:	4b03      	ldr	r3, [pc, #12]	; (800dc1c <SD_initialize+0x38>)
 800dc10:	781b      	ldrb	r3, [r3, #0]
 800dc12:	b2db      	uxtb	r3, r3
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	20000009 	.word	0x20000009

0800dc20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800dc20:	b580      	push	{r7, lr}
 800dc22:	b082      	sub	sp, #8
 800dc24:	af00      	add	r7, sp, #0
 800dc26:	4603      	mov	r3, r0
 800dc28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800dc2a:	79fb      	ldrb	r3, [r7, #7]
 800dc2c:	4618      	mov	r0, r3
 800dc2e:	f7ff ffbb 	bl	800dba8 <SD_CheckStatus>
 800dc32:	4603      	mov	r3, r0
}
 800dc34:	4618      	mov	r0, r3
 800dc36:	3708      	adds	r7, #8
 800dc38:	46bd      	mov	sp, r7
 800dc3a:	bd80      	pop	{r7, pc}

0800dc3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800dc3c:	b580      	push	{r7, lr}
 800dc3e:	b086      	sub	sp, #24
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	60b9      	str	r1, [r7, #8]
 800dc44:	607a      	str	r2, [r7, #4]
 800dc46:	603b      	str	r3, [r7, #0]
 800dc48:	4603      	mov	r3, r0
 800dc4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc4c:	2301      	movs	r3, #1
 800dc4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800dc50:	f04f 33ff 	mov.w	r3, #4294967295
 800dc54:	683a      	ldr	r2, [r7, #0]
 800dc56:	6879      	ldr	r1, [r7, #4]
 800dc58:	68b8      	ldr	r0, [r7, #8]
 800dc5a:	f7ff ff23 	bl	800daa4 <BSP_SD_ReadBlocks>
 800dc5e:	4603      	mov	r3, r0
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d107      	bne.n	800dc74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800dc64:	bf00      	nop
 800dc66:	f7ff ff59 	bl	800db1c <BSP_SD_GetCardState>
 800dc6a:	4603      	mov	r3, r0
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1fa      	bne.n	800dc66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800dc70:	2300      	movs	r3, #0
 800dc72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dc74:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc76:	4618      	mov	r0, r3
 800dc78:	3718      	adds	r7, #24
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	bd80      	pop	{r7, pc}

0800dc7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800dc7e:	b580      	push	{r7, lr}
 800dc80:	b086      	sub	sp, #24
 800dc82:	af00      	add	r7, sp, #0
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
 800dc88:	603b      	str	r3, [r7, #0]
 800dc8a:	4603      	mov	r3, r0
 800dc8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800dc8e:	2301      	movs	r3, #1
 800dc90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800dc92:	f04f 33ff 	mov.w	r3, #4294967295
 800dc96:	683a      	ldr	r2, [r7, #0]
 800dc98:	6879      	ldr	r1, [r7, #4]
 800dc9a:	68b8      	ldr	r0, [r7, #8]
 800dc9c:	f7ff ff20 	bl	800dae0 <BSP_SD_WriteBlocks>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d107      	bne.n	800dcb6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800dca6:	bf00      	nop
 800dca8:	f7ff ff38 	bl	800db1c <BSP_SD_GetCardState>
 800dcac:	4603      	mov	r3, r0
 800dcae:	2b00      	cmp	r3, #0
 800dcb0:	d1fa      	bne.n	800dca8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800dcb2:	2300      	movs	r3, #0
 800dcb4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800dcb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dcb8:	4618      	mov	r0, r3
 800dcba:	3718      	adds	r7, #24
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	bd80      	pop	{r7, pc}

0800dcc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800dcc0:	b580      	push	{r7, lr}
 800dcc2:	b08c      	sub	sp, #48	; 0x30
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	4603      	mov	r3, r0
 800dcc8:	603a      	str	r2, [r7, #0]
 800dcca:	71fb      	strb	r3, [r7, #7]
 800dccc:	460b      	mov	r3, r1
 800dcce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800dcd6:	4b25      	ldr	r3, [pc, #148]	; (800dd6c <SD_ioctl+0xac>)
 800dcd8:	781b      	ldrb	r3, [r3, #0]
 800dcda:	b2db      	uxtb	r3, r3
 800dcdc:	f003 0301 	and.w	r3, r3, #1
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d001      	beq.n	800dce8 <SD_ioctl+0x28>
 800dce4:	2303      	movs	r3, #3
 800dce6:	e03c      	b.n	800dd62 <SD_ioctl+0xa2>

  switch (cmd)
 800dce8:	79bb      	ldrb	r3, [r7, #6]
 800dcea:	2b03      	cmp	r3, #3
 800dcec:	d834      	bhi.n	800dd58 <SD_ioctl+0x98>
 800dcee:	a201      	add	r2, pc, #4	; (adr r2, 800dcf4 <SD_ioctl+0x34>)
 800dcf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dcf4:	0800dd05 	.word	0x0800dd05
 800dcf8:	0800dd0d 	.word	0x0800dd0d
 800dcfc:	0800dd25 	.word	0x0800dd25
 800dd00:	0800dd3f 	.word	0x0800dd3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800dd04:	2300      	movs	r3, #0
 800dd06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd0a:	e028      	b.n	800dd5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd0c:	f107 030c 	add.w	r3, r7, #12
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7ff ff13 	bl	800db3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800dd16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dd18:	683b      	ldr	r3, [r7, #0]
 800dd1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd22:	e01c      	b.n	800dd5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd24:	f107 030c 	add.w	r3, r7, #12
 800dd28:	4618      	mov	r0, r3
 800dd2a:	f7ff ff07 	bl	800db3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800dd2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd30:	b29a      	uxth	r2, r3
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800dd36:	2300      	movs	r3, #0
 800dd38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd3c:	e00f      	b.n	800dd5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800dd3e:	f107 030c 	add.w	r3, r7, #12
 800dd42:	4618      	mov	r0, r3
 800dd44:	f7ff fefa 	bl	800db3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800dd48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd4a:	0a5a      	lsrs	r2, r3, #9
 800dd4c:	683b      	ldr	r3, [r7, #0]
 800dd4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800dd50:	2300      	movs	r3, #0
 800dd52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800dd56:	e002      	b.n	800dd5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800dd58:	2304      	movs	r3, #4
 800dd5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800dd5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800dd62:	4618      	mov	r0, r3
 800dd64:	3730      	adds	r7, #48	; 0x30
 800dd66:	46bd      	mov	sp, r7
 800dd68:	bd80      	pop	{r7, pc}
 800dd6a:	bf00      	nop
 800dd6c:	20000009 	.word	0x20000009

0800dd70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b084      	sub	sp, #16
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	460b      	mov	r3, r1
 800dd7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800dd7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800dd80:	f008 f916 	bl	8015fb0 <malloc>
 800dd84:	4603      	mov	r3, r0
 800dd86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d109      	bne.n	800dda2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd94:	687b      	ldr	r3, [r7, #4]
 800dd96:	32b0      	adds	r2, #176	; 0xb0
 800dd98:	2100      	movs	r1, #0
 800dd9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800dd9e:	2302      	movs	r3, #2
 800dda0:	e0d4      	b.n	800df4c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800dda2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800dda6:	2100      	movs	r1, #0
 800dda8:	68f8      	ldr	r0, [r7, #12]
 800ddaa:	f008 f91f 	bl	8015fec <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ddae:	687b      	ldr	r3, [r7, #4]
 800ddb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	32b0      	adds	r2, #176	; 0xb0
 800ddb8:	68f9      	ldr	r1, [r7, #12]
 800ddba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	32b0      	adds	r2, #176	; 0xb0
 800ddc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	7c1b      	ldrb	r3, [r3, #16]
 800ddd6:	2b00      	cmp	r3, #0
 800ddd8:	d138      	bne.n	800de4c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ddda:	4b5e      	ldr	r3, [pc, #376]	; (800df54 <USBD_CDC_Init+0x1e4>)
 800dddc:	7819      	ldrb	r1, [r3, #0]
 800ddde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800dde2:	2202      	movs	r2, #2
 800dde4:	6878      	ldr	r0, [r7, #4]
 800dde6:	f007 fbfa 	bl	80155de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ddea:	4b5a      	ldr	r3, [pc, #360]	; (800df54 <USBD_CDC_Init+0x1e4>)
 800ddec:	781b      	ldrb	r3, [r3, #0]
 800ddee:	f003 020f 	and.w	r2, r3, #15
 800ddf2:	6879      	ldr	r1, [r7, #4]
 800ddf4:	4613      	mov	r3, r2
 800ddf6:	009b      	lsls	r3, r3, #2
 800ddf8:	4413      	add	r3, r2
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	440b      	add	r3, r1
 800ddfe:	3324      	adds	r3, #36	; 0x24
 800de00:	2201      	movs	r2, #1
 800de02:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de04:	4b54      	ldr	r3, [pc, #336]	; (800df58 <USBD_CDC_Init+0x1e8>)
 800de06:	7819      	ldrb	r1, [r3, #0]
 800de08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800de0c:	2202      	movs	r2, #2
 800de0e:	6878      	ldr	r0, [r7, #4]
 800de10:	f007 fbe5 	bl	80155de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de14:	4b50      	ldr	r3, [pc, #320]	; (800df58 <USBD_CDC_Init+0x1e8>)
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	f003 020f 	and.w	r2, r3, #15
 800de1c:	6879      	ldr	r1, [r7, #4]
 800de1e:	4613      	mov	r3, r2
 800de20:	009b      	lsls	r3, r3, #2
 800de22:	4413      	add	r3, r2
 800de24:	009b      	lsls	r3, r3, #2
 800de26:	440b      	add	r3, r1
 800de28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de2c:	2201      	movs	r2, #1
 800de2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800de30:	4b4a      	ldr	r3, [pc, #296]	; (800df5c <USBD_CDC_Init+0x1ec>)
 800de32:	781b      	ldrb	r3, [r3, #0]
 800de34:	f003 020f 	and.w	r2, r3, #15
 800de38:	6879      	ldr	r1, [r7, #4]
 800de3a:	4613      	mov	r3, r2
 800de3c:	009b      	lsls	r3, r3, #2
 800de3e:	4413      	add	r3, r2
 800de40:	009b      	lsls	r3, r3, #2
 800de42:	440b      	add	r3, r1
 800de44:	3326      	adds	r3, #38	; 0x26
 800de46:	2210      	movs	r2, #16
 800de48:	801a      	strh	r2, [r3, #0]
 800de4a:	e035      	b.n	800deb8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800de4c:	4b41      	ldr	r3, [pc, #260]	; (800df54 <USBD_CDC_Init+0x1e4>)
 800de4e:	7819      	ldrb	r1, [r3, #0]
 800de50:	2340      	movs	r3, #64	; 0x40
 800de52:	2202      	movs	r2, #2
 800de54:	6878      	ldr	r0, [r7, #4]
 800de56:	f007 fbc2 	bl	80155de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800de5a:	4b3e      	ldr	r3, [pc, #248]	; (800df54 <USBD_CDC_Init+0x1e4>)
 800de5c:	781b      	ldrb	r3, [r3, #0]
 800de5e:	f003 020f 	and.w	r2, r3, #15
 800de62:	6879      	ldr	r1, [r7, #4]
 800de64:	4613      	mov	r3, r2
 800de66:	009b      	lsls	r3, r3, #2
 800de68:	4413      	add	r3, r2
 800de6a:	009b      	lsls	r3, r3, #2
 800de6c:	440b      	add	r3, r1
 800de6e:	3324      	adds	r3, #36	; 0x24
 800de70:	2201      	movs	r2, #1
 800de72:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800de74:	4b38      	ldr	r3, [pc, #224]	; (800df58 <USBD_CDC_Init+0x1e8>)
 800de76:	7819      	ldrb	r1, [r3, #0]
 800de78:	2340      	movs	r3, #64	; 0x40
 800de7a:	2202      	movs	r2, #2
 800de7c:	6878      	ldr	r0, [r7, #4]
 800de7e:	f007 fbae 	bl	80155de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800de82:	4b35      	ldr	r3, [pc, #212]	; (800df58 <USBD_CDC_Init+0x1e8>)
 800de84:	781b      	ldrb	r3, [r3, #0]
 800de86:	f003 020f 	and.w	r2, r3, #15
 800de8a:	6879      	ldr	r1, [r7, #4]
 800de8c:	4613      	mov	r3, r2
 800de8e:	009b      	lsls	r3, r3, #2
 800de90:	4413      	add	r3, r2
 800de92:	009b      	lsls	r3, r3, #2
 800de94:	440b      	add	r3, r1
 800de96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800de9a:	2201      	movs	r2, #1
 800de9c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800de9e:	4b2f      	ldr	r3, [pc, #188]	; (800df5c <USBD_CDC_Init+0x1ec>)
 800dea0:	781b      	ldrb	r3, [r3, #0]
 800dea2:	f003 020f 	and.w	r2, r3, #15
 800dea6:	6879      	ldr	r1, [r7, #4]
 800dea8:	4613      	mov	r3, r2
 800deaa:	009b      	lsls	r3, r3, #2
 800deac:	4413      	add	r3, r2
 800deae:	009b      	lsls	r3, r3, #2
 800deb0:	440b      	add	r3, r1
 800deb2:	3326      	adds	r3, #38	; 0x26
 800deb4:	2210      	movs	r2, #16
 800deb6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800deb8:	4b28      	ldr	r3, [pc, #160]	; (800df5c <USBD_CDC_Init+0x1ec>)
 800deba:	7819      	ldrb	r1, [r3, #0]
 800debc:	2308      	movs	r3, #8
 800debe:	2203      	movs	r2, #3
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f007 fb8c 	bl	80155de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800dec6:	4b25      	ldr	r3, [pc, #148]	; (800df5c <USBD_CDC_Init+0x1ec>)
 800dec8:	781b      	ldrb	r3, [r3, #0]
 800deca:	f003 020f 	and.w	r2, r3, #15
 800dece:	6879      	ldr	r1, [r7, #4]
 800ded0:	4613      	mov	r3, r2
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	4413      	add	r3, r2
 800ded6:	009b      	lsls	r3, r3, #2
 800ded8:	440b      	add	r3, r1
 800deda:	3324      	adds	r3, #36	; 0x24
 800dedc:	2201      	movs	r2, #1
 800dede:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2200      	movs	r2, #0
 800dee4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800deee:	687a      	ldr	r2, [r7, #4]
 800def0:	33b0      	adds	r3, #176	; 0xb0
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4413      	add	r3, r2
 800def6:	685b      	ldr	r3, [r3, #4]
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800defc:	68fb      	ldr	r3, [r7, #12]
 800defe:	2200      	movs	r2, #0
 800df00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	2200      	movs	r2, #0
 800df08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800df0c:	68fb      	ldr	r3, [r7, #12]
 800df0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800df12:	2b00      	cmp	r3, #0
 800df14:	d101      	bne.n	800df1a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800df16:	2302      	movs	r3, #2
 800df18:	e018      	b.n	800df4c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	7c1b      	ldrb	r3, [r3, #16]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d10a      	bne.n	800df38 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df22:	4b0d      	ldr	r3, [pc, #52]	; (800df58 <USBD_CDC_Init+0x1e8>)
 800df24:	7819      	ldrb	r1, [r3, #0]
 800df26:	68fb      	ldr	r3, [r7, #12]
 800df28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f007 fc43 	bl	80157bc <USBD_LL_PrepareReceive>
 800df36:	e008      	b.n	800df4a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800df38:	4b07      	ldr	r3, [pc, #28]	; (800df58 <USBD_CDC_Init+0x1e8>)
 800df3a:	7819      	ldrb	r1, [r3, #0]
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800df42:	2340      	movs	r3, #64	; 0x40
 800df44:	6878      	ldr	r0, [r7, #4]
 800df46:	f007 fc39 	bl	80157bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800df4a:	2300      	movs	r3, #0
}
 800df4c:	4618      	mov	r0, r3
 800df4e:	3710      	adds	r7, #16
 800df50:	46bd      	mov	sp, r7
 800df52:	bd80      	pop	{r7, pc}
 800df54:	20000093 	.word	0x20000093
 800df58:	20000094 	.word	0x20000094
 800df5c:	20000095 	.word	0x20000095

0800df60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800df60:	b580      	push	{r7, lr}
 800df62:	b082      	sub	sp, #8
 800df64:	af00      	add	r7, sp, #0
 800df66:	6078      	str	r0, [r7, #4]
 800df68:	460b      	mov	r3, r1
 800df6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800df6c:	4b3a      	ldr	r3, [pc, #232]	; (800e058 <USBD_CDC_DeInit+0xf8>)
 800df6e:	781b      	ldrb	r3, [r3, #0]
 800df70:	4619      	mov	r1, r3
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	f007 fb59 	bl	801562a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800df78:	4b37      	ldr	r3, [pc, #220]	; (800e058 <USBD_CDC_DeInit+0xf8>)
 800df7a:	781b      	ldrb	r3, [r3, #0]
 800df7c:	f003 020f 	and.w	r2, r3, #15
 800df80:	6879      	ldr	r1, [r7, #4]
 800df82:	4613      	mov	r3, r2
 800df84:	009b      	lsls	r3, r3, #2
 800df86:	4413      	add	r3, r2
 800df88:	009b      	lsls	r3, r3, #2
 800df8a:	440b      	add	r3, r1
 800df8c:	3324      	adds	r3, #36	; 0x24
 800df8e:	2200      	movs	r2, #0
 800df90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800df92:	4b32      	ldr	r3, [pc, #200]	; (800e05c <USBD_CDC_DeInit+0xfc>)
 800df94:	781b      	ldrb	r3, [r3, #0]
 800df96:	4619      	mov	r1, r3
 800df98:	6878      	ldr	r0, [r7, #4]
 800df9a:	f007 fb46 	bl	801562a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800df9e:	4b2f      	ldr	r3, [pc, #188]	; (800e05c <USBD_CDC_DeInit+0xfc>)
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	f003 020f 	and.w	r2, r3, #15
 800dfa6:	6879      	ldr	r1, [r7, #4]
 800dfa8:	4613      	mov	r3, r2
 800dfaa:	009b      	lsls	r3, r3, #2
 800dfac:	4413      	add	r3, r2
 800dfae:	009b      	lsls	r3, r3, #2
 800dfb0:	440b      	add	r3, r1
 800dfb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800dfba:	4b29      	ldr	r3, [pc, #164]	; (800e060 <USBD_CDC_DeInit+0x100>)
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	4619      	mov	r1, r3
 800dfc0:	6878      	ldr	r0, [r7, #4]
 800dfc2:	f007 fb32 	bl	801562a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800dfc6:	4b26      	ldr	r3, [pc, #152]	; (800e060 <USBD_CDC_DeInit+0x100>)
 800dfc8:	781b      	ldrb	r3, [r3, #0]
 800dfca:	f003 020f 	and.w	r2, r3, #15
 800dfce:	6879      	ldr	r1, [r7, #4]
 800dfd0:	4613      	mov	r3, r2
 800dfd2:	009b      	lsls	r3, r3, #2
 800dfd4:	4413      	add	r3, r2
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	440b      	add	r3, r1
 800dfda:	3324      	adds	r3, #36	; 0x24
 800dfdc:	2200      	movs	r2, #0
 800dfde:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800dfe0:	4b1f      	ldr	r3, [pc, #124]	; (800e060 <USBD_CDC_DeInit+0x100>)
 800dfe2:	781b      	ldrb	r3, [r3, #0]
 800dfe4:	f003 020f 	and.w	r2, r3, #15
 800dfe8:	6879      	ldr	r1, [r7, #4]
 800dfea:	4613      	mov	r3, r2
 800dfec:	009b      	lsls	r3, r3, #2
 800dfee:	4413      	add	r3, r2
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	440b      	add	r3, r1
 800dff4:	3326      	adds	r3, #38	; 0x26
 800dff6:	2200      	movs	r2, #0
 800dff8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	32b0      	adds	r2, #176	; 0xb0
 800e004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e008:	2b00      	cmp	r3, #0
 800e00a:	d01f      	beq.n	800e04c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e012:	687a      	ldr	r2, [r7, #4]
 800e014:	33b0      	adds	r3, #176	; 0xb0
 800e016:	009b      	lsls	r3, r3, #2
 800e018:	4413      	add	r3, r2
 800e01a:	685b      	ldr	r3, [r3, #4]
 800e01c:	685b      	ldr	r3, [r3, #4]
 800e01e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	32b0      	adds	r2, #176	; 0xb0
 800e02a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e02e:	4618      	mov	r0, r3
 800e030:	f007 ffc6 	bl	8015fc0 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	32b0      	adds	r2, #176	; 0xb0
 800e03e:	2100      	movs	r1, #0
 800e040:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2200      	movs	r2, #0
 800e048:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800e04c:	2300      	movs	r3, #0
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3708      	adds	r7, #8
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	20000093 	.word	0x20000093
 800e05c:	20000094 	.word	0x20000094
 800e060:	20000095 	.word	0x20000095

0800e064 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b086      	sub	sp, #24
 800e068:	af00      	add	r7, sp, #0
 800e06a:	6078      	str	r0, [r7, #4]
 800e06c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	32b0      	adds	r2, #176	; 0xb0
 800e078:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e07c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800e07e:	2300      	movs	r3, #0
 800e080:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800e082:	2300      	movs	r3, #0
 800e084:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800e086:	2300      	movs	r3, #0
 800e088:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800e08a:	693b      	ldr	r3, [r7, #16]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d101      	bne.n	800e094 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800e090:	2303      	movs	r3, #3
 800e092:	e0bf      	b.n	800e214 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e094:	683b      	ldr	r3, [r7, #0]
 800e096:	781b      	ldrb	r3, [r3, #0]
 800e098:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d050      	beq.n	800e142 <USBD_CDC_Setup+0xde>
 800e0a0:	2b20      	cmp	r3, #32
 800e0a2:	f040 80af 	bne.w	800e204 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800e0a6:	683b      	ldr	r3, [r7, #0]
 800e0a8:	88db      	ldrh	r3, [r3, #6]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d03a      	beq.n	800e124 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800e0ae:	683b      	ldr	r3, [r7, #0]
 800e0b0:	781b      	ldrb	r3, [r3, #0]
 800e0b2:	b25b      	sxtb	r3, r3
 800e0b4:	2b00      	cmp	r3, #0
 800e0b6:	da1b      	bge.n	800e0f0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	33b0      	adds	r3, #176	; 0xb0
 800e0c2:	009b      	lsls	r3, r3, #2
 800e0c4:	4413      	add	r3, r2
 800e0c6:	685b      	ldr	r3, [r3, #4]
 800e0c8:	689b      	ldr	r3, [r3, #8]
 800e0ca:	683a      	ldr	r2, [r7, #0]
 800e0cc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800e0ce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e0d0:	683a      	ldr	r2, [r7, #0]
 800e0d2:	88d2      	ldrh	r2, [r2, #6]
 800e0d4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800e0d6:	683b      	ldr	r3, [r7, #0]
 800e0d8:	88db      	ldrh	r3, [r3, #6]
 800e0da:	2b07      	cmp	r3, #7
 800e0dc:	bf28      	it	cs
 800e0de:	2307      	movcs	r3, #7
 800e0e0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	89fa      	ldrh	r2, [r7, #14]
 800e0e6:	4619      	mov	r1, r3
 800e0e8:	6878      	ldr	r0, [r7, #4]
 800e0ea:	f001 fdad 	bl	800fc48 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800e0ee:	e090      	b.n	800e212 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800e0f0:	683b      	ldr	r3, [r7, #0]
 800e0f2:	785a      	ldrb	r2, [r3, #1]
 800e0f4:	693b      	ldr	r3, [r7, #16]
 800e0f6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800e0fa:	683b      	ldr	r3, [r7, #0]
 800e0fc:	88db      	ldrh	r3, [r3, #6]
 800e0fe:	2b3f      	cmp	r3, #63	; 0x3f
 800e100:	d803      	bhi.n	800e10a <USBD_CDC_Setup+0xa6>
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	88db      	ldrh	r3, [r3, #6]
 800e106:	b2da      	uxtb	r2, r3
 800e108:	e000      	b.n	800e10c <USBD_CDC_Setup+0xa8>
 800e10a:	2240      	movs	r2, #64	; 0x40
 800e10c:	693b      	ldr	r3, [r7, #16]
 800e10e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800e112:	6939      	ldr	r1, [r7, #16]
 800e114:	693b      	ldr	r3, [r7, #16]
 800e116:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800e11a:	461a      	mov	r2, r3
 800e11c:	6878      	ldr	r0, [r7, #4]
 800e11e:	f001 fdbf 	bl	800fca0 <USBD_CtlPrepareRx>
      break;
 800e122:	e076      	b.n	800e212 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800e124:	687b      	ldr	r3, [r7, #4]
 800e126:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	33b0      	adds	r3, #176	; 0xb0
 800e12e:	009b      	lsls	r3, r3, #2
 800e130:	4413      	add	r3, r2
 800e132:	685b      	ldr	r3, [r3, #4]
 800e134:	689b      	ldr	r3, [r3, #8]
 800e136:	683a      	ldr	r2, [r7, #0]
 800e138:	7850      	ldrb	r0, [r2, #1]
 800e13a:	2200      	movs	r2, #0
 800e13c:	6839      	ldr	r1, [r7, #0]
 800e13e:	4798      	blx	r3
      break;
 800e140:	e067      	b.n	800e212 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	785b      	ldrb	r3, [r3, #1]
 800e146:	2b0b      	cmp	r3, #11
 800e148:	d851      	bhi.n	800e1ee <USBD_CDC_Setup+0x18a>
 800e14a:	a201      	add	r2, pc, #4	; (adr r2, 800e150 <USBD_CDC_Setup+0xec>)
 800e14c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e150:	0800e181 	.word	0x0800e181
 800e154:	0800e1fd 	.word	0x0800e1fd
 800e158:	0800e1ef 	.word	0x0800e1ef
 800e15c:	0800e1ef 	.word	0x0800e1ef
 800e160:	0800e1ef 	.word	0x0800e1ef
 800e164:	0800e1ef 	.word	0x0800e1ef
 800e168:	0800e1ef 	.word	0x0800e1ef
 800e16c:	0800e1ef 	.word	0x0800e1ef
 800e170:	0800e1ef 	.word	0x0800e1ef
 800e174:	0800e1ef 	.word	0x0800e1ef
 800e178:	0800e1ab 	.word	0x0800e1ab
 800e17c:	0800e1d5 	.word	0x0800e1d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e186:	b2db      	uxtb	r3, r3
 800e188:	2b03      	cmp	r3, #3
 800e18a:	d107      	bne.n	800e19c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800e18c:	f107 030a 	add.w	r3, r7, #10
 800e190:	2202      	movs	r2, #2
 800e192:	4619      	mov	r1, r3
 800e194:	6878      	ldr	r0, [r7, #4]
 800e196:	f001 fd57 	bl	800fc48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e19a:	e032      	b.n	800e202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e19c:	6839      	ldr	r1, [r7, #0]
 800e19e:	6878      	ldr	r0, [r7, #4]
 800e1a0:	f001 fce1 	bl	800fb66 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1a4:	2303      	movs	r3, #3
 800e1a6:	75fb      	strb	r3, [r7, #23]
          break;
 800e1a8:	e02b      	b.n	800e202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1b0:	b2db      	uxtb	r3, r3
 800e1b2:	2b03      	cmp	r3, #3
 800e1b4:	d107      	bne.n	800e1c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800e1b6:	f107 030d 	add.w	r3, r7, #13
 800e1ba:	2201      	movs	r2, #1
 800e1bc:	4619      	mov	r1, r3
 800e1be:	6878      	ldr	r0, [r7, #4]
 800e1c0:	f001 fd42 	bl	800fc48 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800e1c4:	e01d      	b.n	800e202 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	f001 fccc 	bl	800fb66 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1ce:	2303      	movs	r3, #3
 800e1d0:	75fb      	strb	r3, [r7, #23]
          break;
 800e1d2:	e016      	b.n	800e202 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e1da:	b2db      	uxtb	r3, r3
 800e1dc:	2b03      	cmp	r3, #3
 800e1de:	d00f      	beq.n	800e200 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800e1e0:	6839      	ldr	r1, [r7, #0]
 800e1e2:	6878      	ldr	r0, [r7, #4]
 800e1e4:	f001 fcbf 	bl	800fb66 <USBD_CtlError>
            ret = USBD_FAIL;
 800e1e8:	2303      	movs	r3, #3
 800e1ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800e1ec:	e008      	b.n	800e200 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800e1ee:	6839      	ldr	r1, [r7, #0]
 800e1f0:	6878      	ldr	r0, [r7, #4]
 800e1f2:	f001 fcb8 	bl	800fb66 <USBD_CtlError>
          ret = USBD_FAIL;
 800e1f6:	2303      	movs	r3, #3
 800e1f8:	75fb      	strb	r3, [r7, #23]
          break;
 800e1fa:	e002      	b.n	800e202 <USBD_CDC_Setup+0x19e>
          break;
 800e1fc:	bf00      	nop
 800e1fe:	e008      	b.n	800e212 <USBD_CDC_Setup+0x1ae>
          break;
 800e200:	bf00      	nop
      }
      break;
 800e202:	e006      	b.n	800e212 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800e204:	6839      	ldr	r1, [r7, #0]
 800e206:	6878      	ldr	r0, [r7, #4]
 800e208:	f001 fcad 	bl	800fb66 <USBD_CtlError>
      ret = USBD_FAIL;
 800e20c:	2303      	movs	r3, #3
 800e20e:	75fb      	strb	r3, [r7, #23]
      break;
 800e210:	bf00      	nop
  }

  return (uint8_t)ret;
 800e212:	7dfb      	ldrb	r3, [r7, #23]
}
 800e214:	4618      	mov	r0, r3
 800e216:	3718      	adds	r7, #24
 800e218:	46bd      	mov	sp, r7
 800e21a:	bd80      	pop	{r7, pc}

0800e21c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e21c:	b580      	push	{r7, lr}
 800e21e:	b084      	sub	sp, #16
 800e220:	af00      	add	r7, sp, #0
 800e222:	6078      	str	r0, [r7, #4]
 800e224:	460b      	mov	r3, r1
 800e226:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800e228:	687b      	ldr	r3, [r7, #4]
 800e22a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800e22e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e236:	687b      	ldr	r3, [r7, #4]
 800e238:	32b0      	adds	r2, #176	; 0xb0
 800e23a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d101      	bne.n	800e246 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800e242:	2303      	movs	r3, #3
 800e244:	e065      	b.n	800e312 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e246:	687b      	ldr	r3, [r7, #4]
 800e248:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	32b0      	adds	r2, #176	; 0xb0
 800e250:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e254:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e256:	78fb      	ldrb	r3, [r7, #3]
 800e258:	f003 020f 	and.w	r2, r3, #15
 800e25c:	6879      	ldr	r1, [r7, #4]
 800e25e:	4613      	mov	r3, r2
 800e260:	009b      	lsls	r3, r3, #2
 800e262:	4413      	add	r3, r2
 800e264:	009b      	lsls	r3, r3, #2
 800e266:	440b      	add	r3, r1
 800e268:	3318      	adds	r3, #24
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d02f      	beq.n	800e2d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800e270:	78fb      	ldrb	r3, [r7, #3]
 800e272:	f003 020f 	and.w	r2, r3, #15
 800e276:	6879      	ldr	r1, [r7, #4]
 800e278:	4613      	mov	r3, r2
 800e27a:	009b      	lsls	r3, r3, #2
 800e27c:	4413      	add	r3, r2
 800e27e:	009b      	lsls	r3, r3, #2
 800e280:	440b      	add	r3, r1
 800e282:	3318      	adds	r3, #24
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	78fb      	ldrb	r3, [r7, #3]
 800e288:	f003 010f 	and.w	r1, r3, #15
 800e28c:	68f8      	ldr	r0, [r7, #12]
 800e28e:	460b      	mov	r3, r1
 800e290:	00db      	lsls	r3, r3, #3
 800e292:	440b      	add	r3, r1
 800e294:	009b      	lsls	r3, r3, #2
 800e296:	4403      	add	r3, r0
 800e298:	3348      	adds	r3, #72	; 0x48
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	fbb2 f1f3 	udiv	r1, r2, r3
 800e2a0:	fb01 f303 	mul.w	r3, r1, r3
 800e2a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d112      	bne.n	800e2d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800e2aa:	78fb      	ldrb	r3, [r7, #3]
 800e2ac:	f003 020f 	and.w	r2, r3, #15
 800e2b0:	6879      	ldr	r1, [r7, #4]
 800e2b2:	4613      	mov	r3, r2
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	009b      	lsls	r3, r3, #2
 800e2ba:	440b      	add	r3, r1
 800e2bc:	3318      	adds	r3, #24
 800e2be:	2200      	movs	r2, #0
 800e2c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800e2c2:	78f9      	ldrb	r1, [r7, #3]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	2200      	movs	r2, #0
 800e2c8:	6878      	ldr	r0, [r7, #4]
 800e2ca:	f007 fa56 	bl	801577a <USBD_LL_Transmit>
 800e2ce:	e01f      	b.n	800e310 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800e2d0:	68bb      	ldr	r3, [r7, #8]
 800e2d2:	2200      	movs	r2, #0
 800e2d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2de:	687a      	ldr	r2, [r7, #4]
 800e2e0:	33b0      	adds	r3, #176	; 0xb0
 800e2e2:	009b      	lsls	r3, r3, #2
 800e2e4:	4413      	add	r3, r2
 800e2e6:	685b      	ldr	r3, [r3, #4]
 800e2e8:	691b      	ldr	r3, [r3, #16]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d010      	beq.n	800e310 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800e2ee:	687b      	ldr	r3, [r7, #4]
 800e2f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e2f4:	687a      	ldr	r2, [r7, #4]
 800e2f6:	33b0      	adds	r3, #176	; 0xb0
 800e2f8:	009b      	lsls	r3, r3, #2
 800e2fa:	4413      	add	r3, r2
 800e2fc:	685b      	ldr	r3, [r3, #4]
 800e2fe:	691b      	ldr	r3, [r3, #16]
 800e300:	68ba      	ldr	r2, [r7, #8]
 800e302:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800e306:	68ba      	ldr	r2, [r7, #8]
 800e308:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800e30c:	78fa      	ldrb	r2, [r7, #3]
 800e30e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b084      	sub	sp, #16
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
 800e322:	460b      	mov	r3, r1
 800e324:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	32b0      	adds	r2, #176	; 0xb0
 800e330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e334:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e33c:	687b      	ldr	r3, [r7, #4]
 800e33e:	32b0      	adds	r2, #176	; 0xb0
 800e340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d101      	bne.n	800e34c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800e348:	2303      	movs	r3, #3
 800e34a:	e01a      	b.n	800e382 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800e34c:	78fb      	ldrb	r3, [r7, #3]
 800e34e:	4619      	mov	r1, r3
 800e350:	6878      	ldr	r0, [r7, #4]
 800e352:	f007 fa54 	bl	80157fe <USBD_LL_GetRxDataSize>
 800e356:	4602      	mov	r2, r0
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e364:	687a      	ldr	r2, [r7, #4]
 800e366:	33b0      	adds	r3, #176	; 0xb0
 800e368:	009b      	lsls	r3, r3, #2
 800e36a:	4413      	add	r3, r2
 800e36c:	685b      	ldr	r3, [r3, #4]
 800e36e:	68db      	ldr	r3, [r3, #12]
 800e370:	68fa      	ldr	r2, [r7, #12]
 800e372:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800e376:	68fa      	ldr	r2, [r7, #12]
 800e378:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800e37c:	4611      	mov	r1, r2
 800e37e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800e380:	2300      	movs	r3, #0
}
 800e382:	4618      	mov	r0, r3
 800e384:	3710      	adds	r7, #16
 800e386:	46bd      	mov	sp, r7
 800e388:	bd80      	pop	{r7, pc}

0800e38a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800e38a:	b580      	push	{r7, lr}
 800e38c:	b084      	sub	sp, #16
 800e38e:	af00      	add	r7, sp, #0
 800e390:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	32b0      	adds	r2, #176	; 0xb0
 800e39c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e3a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e3a2:	68fb      	ldr	r3, [r7, #12]
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d101      	bne.n	800e3ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800e3a8:	2303      	movs	r3, #3
 800e3aa:	e025      	b.n	800e3f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e3b2:	687a      	ldr	r2, [r7, #4]
 800e3b4:	33b0      	adds	r3, #176	; 0xb0
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	685b      	ldr	r3, [r3, #4]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d01a      	beq.n	800e3f6 <USBD_CDC_EP0_RxReady+0x6c>
 800e3c0:	68fb      	ldr	r3, [r7, #12]
 800e3c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800e3c6:	2bff      	cmp	r3, #255	; 0xff
 800e3c8:	d015      	beq.n	800e3f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e3d0:	687a      	ldr	r2, [r7, #4]
 800e3d2:	33b0      	adds	r3, #176	; 0xb0
 800e3d4:	009b      	lsls	r3, r3, #2
 800e3d6:	4413      	add	r3, r2
 800e3d8:	685b      	ldr	r3, [r3, #4]
 800e3da:	689b      	ldr	r3, [r3, #8]
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800e3e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800e3e4:	68fa      	ldr	r2, [r7, #12]
 800e3e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800e3ea:	b292      	uxth	r2, r2
 800e3ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	22ff      	movs	r2, #255	; 0xff
 800e3f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800e3f6:	2300      	movs	r3, #0
}
 800e3f8:	4618      	mov	r0, r3
 800e3fa:	3710      	adds	r7, #16
 800e3fc:	46bd      	mov	sp, r7
 800e3fe:	bd80      	pop	{r7, pc}

0800e400 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b086      	sub	sp, #24
 800e404:	af00      	add	r7, sp, #0
 800e406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e408:	2182      	movs	r1, #130	; 0x82
 800e40a:	4818      	ldr	r0, [pc, #96]	; (800e46c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e40c:	f000 fd49 	bl	800eea2 <USBD_GetEpDesc>
 800e410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e412:	2101      	movs	r1, #1
 800e414:	4815      	ldr	r0, [pc, #84]	; (800e46c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e416:	f000 fd44 	bl	800eea2 <USBD_GetEpDesc>
 800e41a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e41c:	2181      	movs	r1, #129	; 0x81
 800e41e:	4813      	ldr	r0, [pc, #76]	; (800e46c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800e420:	f000 fd3f 	bl	800eea2 <USBD_GetEpDesc>
 800e424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e426:	697b      	ldr	r3, [r7, #20]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d002      	beq.n	800e432 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e42c:	697b      	ldr	r3, [r7, #20]
 800e42e:	2210      	movs	r2, #16
 800e430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e432:	693b      	ldr	r3, [r7, #16]
 800e434:	2b00      	cmp	r3, #0
 800e436:	d006      	beq.n	800e446 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e438:	693b      	ldr	r3, [r7, #16]
 800e43a:	2200      	movs	r2, #0
 800e43c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e440:	711a      	strb	r2, [r3, #4]
 800e442:	2200      	movs	r2, #0
 800e444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	2b00      	cmp	r3, #0
 800e44a:	d006      	beq.n	800e45a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	2200      	movs	r2, #0
 800e450:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e454:	711a      	strb	r2, [r3, #4]
 800e456:	2200      	movs	r2, #0
 800e458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	2243      	movs	r2, #67	; 0x43
 800e45e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e460:	4b02      	ldr	r3, [pc, #8]	; (800e46c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800e462:	4618      	mov	r0, r3
 800e464:	3718      	adds	r7, #24
 800e466:	46bd      	mov	sp, r7
 800e468:	bd80      	pop	{r7, pc}
 800e46a:	bf00      	nop
 800e46c:	20000050 	.word	0x20000050

0800e470 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b086      	sub	sp, #24
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e478:	2182      	movs	r1, #130	; 0x82
 800e47a:	4818      	ldr	r0, [pc, #96]	; (800e4dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e47c:	f000 fd11 	bl	800eea2 <USBD_GetEpDesc>
 800e480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e482:	2101      	movs	r1, #1
 800e484:	4815      	ldr	r0, [pc, #84]	; (800e4dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e486:	f000 fd0c 	bl	800eea2 <USBD_GetEpDesc>
 800e48a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e48c:	2181      	movs	r1, #129	; 0x81
 800e48e:	4813      	ldr	r0, [pc, #76]	; (800e4dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800e490:	f000 fd07 	bl	800eea2 <USBD_GetEpDesc>
 800e494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e496:	697b      	ldr	r3, [r7, #20]
 800e498:	2b00      	cmp	r3, #0
 800e49a:	d002      	beq.n	800e4a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800e49c:	697b      	ldr	r3, [r7, #20]
 800e49e:	2210      	movs	r2, #16
 800e4a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e4a2:	693b      	ldr	r3, [r7, #16]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d006      	beq.n	800e4b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e4a8:	693b      	ldr	r3, [r7, #16]
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	711a      	strb	r2, [r3, #4]
 800e4ae:	2200      	movs	r2, #0
 800e4b0:	f042 0202 	orr.w	r2, r2, #2
 800e4b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e4b6:	68fb      	ldr	r3, [r7, #12]
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d006      	beq.n	800e4ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	2200      	movs	r2, #0
 800e4c0:	711a      	strb	r2, [r3, #4]
 800e4c2:	2200      	movs	r2, #0
 800e4c4:	f042 0202 	orr.w	r2, r2, #2
 800e4c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	2243      	movs	r2, #67	; 0x43
 800e4ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e4d0:	4b02      	ldr	r3, [pc, #8]	; (800e4dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800e4d2:	4618      	mov	r0, r3
 800e4d4:	3718      	adds	r7, #24
 800e4d6:	46bd      	mov	sp, r7
 800e4d8:	bd80      	pop	{r7, pc}
 800e4da:	bf00      	nop
 800e4dc:	20000050 	.word	0x20000050

0800e4e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b086      	sub	sp, #24
 800e4e4:	af00      	add	r7, sp, #0
 800e4e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800e4e8:	2182      	movs	r1, #130	; 0x82
 800e4ea:	4818      	ldr	r0, [pc, #96]	; (800e54c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e4ec:	f000 fcd9 	bl	800eea2 <USBD_GetEpDesc>
 800e4f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800e4f2:	2101      	movs	r1, #1
 800e4f4:	4815      	ldr	r0, [pc, #84]	; (800e54c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e4f6:	f000 fcd4 	bl	800eea2 <USBD_GetEpDesc>
 800e4fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800e4fc:	2181      	movs	r1, #129	; 0x81
 800e4fe:	4813      	ldr	r0, [pc, #76]	; (800e54c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800e500:	f000 fccf 	bl	800eea2 <USBD_GetEpDesc>
 800e504:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800e506:	697b      	ldr	r3, [r7, #20]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d002      	beq.n	800e512 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800e50c:	697b      	ldr	r3, [r7, #20]
 800e50e:	2210      	movs	r2, #16
 800e510:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d006      	beq.n	800e526 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e518:	693b      	ldr	r3, [r7, #16]
 800e51a:	2200      	movs	r2, #0
 800e51c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e520:	711a      	strb	r2, [r3, #4]
 800e522:	2200      	movs	r2, #0
 800e524:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800e526:	68fb      	ldr	r3, [r7, #12]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	d006      	beq.n	800e53a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	2200      	movs	r2, #0
 800e530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800e534:	711a      	strb	r2, [r3, #4]
 800e536:	2200      	movs	r2, #0
 800e538:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	2243      	movs	r2, #67	; 0x43
 800e53e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800e540:	4b02      	ldr	r3, [pc, #8]	; (800e54c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800e542:	4618      	mov	r0, r3
 800e544:	3718      	adds	r7, #24
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}
 800e54a:	bf00      	nop
 800e54c:	20000050 	.word	0x20000050

0800e550 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800e550:	b480      	push	{r7}
 800e552:	b083      	sub	sp, #12
 800e554:	af00      	add	r7, sp, #0
 800e556:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800e558:	687b      	ldr	r3, [r7, #4]
 800e55a:	220a      	movs	r2, #10
 800e55c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800e55e:	4b03      	ldr	r3, [pc, #12]	; (800e56c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800e560:	4618      	mov	r0, r3
 800e562:	370c      	adds	r7, #12
 800e564:	46bd      	mov	sp, r7
 800e566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56a:	4770      	bx	lr
 800e56c:	2000000c 	.word	0x2000000c

0800e570 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800e570:	b480      	push	{r7}
 800e572:	b083      	sub	sp, #12
 800e574:	af00      	add	r7, sp, #0
 800e576:	6078      	str	r0, [r7, #4]
 800e578:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800e57a:	683b      	ldr	r3, [r7, #0]
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	d101      	bne.n	800e584 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800e580:	2303      	movs	r3, #3
 800e582:	e009      	b.n	800e598 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800e58a:	687a      	ldr	r2, [r7, #4]
 800e58c:	33b0      	adds	r3, #176	; 0xb0
 800e58e:	009b      	lsls	r3, r3, #2
 800e590:	4413      	add	r3, r2
 800e592:	683a      	ldr	r2, [r7, #0]
 800e594:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800e596:	2300      	movs	r3, #0
}
 800e598:	4618      	mov	r0, r3
 800e59a:	370c      	adds	r7, #12
 800e59c:	46bd      	mov	sp, r7
 800e59e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a2:	4770      	bx	lr

0800e5a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800e5a4:	b480      	push	{r7}
 800e5a6:	b087      	sub	sp, #28
 800e5a8:	af00      	add	r7, sp, #0
 800e5aa:	60f8      	str	r0, [r7, #12]
 800e5ac:	60b9      	str	r1, [r7, #8]
 800e5ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5b0:	68fb      	ldr	r3, [r7, #12]
 800e5b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	32b0      	adds	r2, #176	; 0xb0
 800e5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e5be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e5c0:	697b      	ldr	r3, [r7, #20]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d101      	bne.n	800e5ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e5c6:	2303      	movs	r3, #3
 800e5c8:	e008      	b.n	800e5dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800e5ca:	697b      	ldr	r3, [r7, #20]
 800e5cc:	68ba      	ldr	r2, [r7, #8]
 800e5ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800e5d2:	697b      	ldr	r3, [r7, #20]
 800e5d4:	687a      	ldr	r2, [r7, #4]
 800e5d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800e5da:	2300      	movs	r3, #0
}
 800e5dc:	4618      	mov	r0, r3
 800e5de:	371c      	adds	r7, #28
 800e5e0:	46bd      	mov	sp, r7
 800e5e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800e5e8:	b480      	push	{r7}
 800e5ea:	b085      	sub	sp, #20
 800e5ec:	af00      	add	r7, sp, #0
 800e5ee:	6078      	str	r0, [r7, #4]
 800e5f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	32b0      	adds	r2, #176	; 0xb0
 800e5fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e600:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800e602:	68fb      	ldr	r3, [r7, #12]
 800e604:	2b00      	cmp	r3, #0
 800e606:	d101      	bne.n	800e60c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800e608:	2303      	movs	r3, #3
 800e60a:	e004      	b.n	800e616 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800e60c:	68fb      	ldr	r3, [r7, #12]
 800e60e:	683a      	ldr	r2, [r7, #0]
 800e610:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800e614:	2300      	movs	r3, #0
}
 800e616:	4618      	mov	r0, r3
 800e618:	3714      	adds	r7, #20
 800e61a:	46bd      	mov	sp, r7
 800e61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e620:	4770      	bx	lr
	...

0800e624 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	32b0      	adds	r2, #176	; 0xb0
 800e636:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e63a:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800e63c:	2301      	movs	r3, #1
 800e63e:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800e640:	68bb      	ldr	r3, [r7, #8]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d101      	bne.n	800e64a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800e646:	2303      	movs	r3, #3
 800e648:	e025      	b.n	800e696 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800e64a:	68bb      	ldr	r3, [r7, #8]
 800e64c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800e650:	2b00      	cmp	r3, #0
 800e652:	d11f      	bne.n	800e694 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800e654:	68bb      	ldr	r3, [r7, #8]
 800e656:	2201      	movs	r2, #1
 800e658:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800e65c:	4b10      	ldr	r3, [pc, #64]	; (800e6a0 <USBD_CDC_TransmitPacket+0x7c>)
 800e65e:	781b      	ldrb	r3, [r3, #0]
 800e660:	f003 020f 	and.w	r2, r3, #15
 800e664:	68bb      	ldr	r3, [r7, #8]
 800e666:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800e66a:	6878      	ldr	r0, [r7, #4]
 800e66c:	4613      	mov	r3, r2
 800e66e:	009b      	lsls	r3, r3, #2
 800e670:	4413      	add	r3, r2
 800e672:	009b      	lsls	r3, r3, #2
 800e674:	4403      	add	r3, r0
 800e676:	3318      	adds	r3, #24
 800e678:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800e67a:	4b09      	ldr	r3, [pc, #36]	; (800e6a0 <USBD_CDC_TransmitPacket+0x7c>)
 800e67c:	7819      	ldrb	r1, [r3, #0]
 800e67e:	68bb      	ldr	r3, [r7, #8]
 800e680:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800e684:	68bb      	ldr	r3, [r7, #8]
 800e686:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f007 f875 	bl	801577a <USBD_LL_Transmit>

    ret = USBD_OK;
 800e690:	2300      	movs	r3, #0
 800e692:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800e694:	7bfb      	ldrb	r3, [r7, #15]
}
 800e696:	4618      	mov	r0, r3
 800e698:	3710      	adds	r7, #16
 800e69a:	46bd      	mov	sp, r7
 800e69c:	bd80      	pop	{r7, pc}
 800e69e:	bf00      	nop
 800e6a0:	20000093 	.word	0x20000093

0800e6a4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800e6a4:	b580      	push	{r7, lr}
 800e6a6:	b084      	sub	sp, #16
 800e6a8:	af00      	add	r7, sp, #0
 800e6aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	32b0      	adds	r2, #176	; 0xb0
 800e6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ba:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	32b0      	adds	r2, #176	; 0xb0
 800e6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d101      	bne.n	800e6d2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800e6ce:	2303      	movs	r3, #3
 800e6d0:	e018      	b.n	800e704 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6d2:	687b      	ldr	r3, [r7, #4]
 800e6d4:	7c1b      	ldrb	r3, [r3, #16]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d10a      	bne.n	800e6f0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6da:	4b0c      	ldr	r3, [pc, #48]	; (800e70c <USBD_CDC_ReceivePacket+0x68>)
 800e6dc:	7819      	ldrb	r1, [r3, #0]
 800e6de:	68fb      	ldr	r3, [r7, #12]
 800e6e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800e6e8:	6878      	ldr	r0, [r7, #4]
 800e6ea:	f007 f867 	bl	80157bc <USBD_LL_PrepareReceive>
 800e6ee:	e008      	b.n	800e702 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800e6f0:	4b06      	ldr	r3, [pc, #24]	; (800e70c <USBD_CDC_ReceivePacket+0x68>)
 800e6f2:	7819      	ldrb	r1, [r3, #0]
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800e6fa:	2340      	movs	r3, #64	; 0x40
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f007 f85d 	bl	80157bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800e702:	2300      	movs	r3, #0
}
 800e704:	4618      	mov	r0, r3
 800e706:	3710      	adds	r7, #16
 800e708:	46bd      	mov	sp, r7
 800e70a:	bd80      	pop	{r7, pc}
 800e70c:	20000094 	.word	0x20000094

0800e710 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800e710:	b580      	push	{r7, lr}
 800e712:	b086      	sub	sp, #24
 800e714:	af00      	add	r7, sp, #0
 800e716:	60f8      	str	r0, [r7, #12]
 800e718:	60b9      	str	r1, [r7, #8]
 800e71a:	4613      	mov	r3, r2
 800e71c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800e71e:	68fb      	ldr	r3, [r7, #12]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d101      	bne.n	800e728 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e724:	2303      	movs	r3, #3
 800e726:	e01f      	b.n	800e768 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	2200      	movs	r2, #0
 800e72c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800e730:	68fb      	ldr	r3, [r7, #12]
 800e732:	2200      	movs	r2, #0
 800e734:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800e738:	68fb      	ldr	r3, [r7, #12]
 800e73a:	2200      	movs	r2, #0
 800e73c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800e740:	68bb      	ldr	r3, [r7, #8]
 800e742:	2b00      	cmp	r3, #0
 800e744:	d003      	beq.n	800e74e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	68ba      	ldr	r2, [r7, #8]
 800e74a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e74e:	68fb      	ldr	r3, [r7, #12]
 800e750:	2201      	movs	r2, #1
 800e752:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	79fa      	ldrb	r2, [r7, #7]
 800e75a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800e75c:	68f8      	ldr	r0, [r7, #12]
 800e75e:	f006 fed1 	bl	8015504 <USBD_LL_Init>
 800e762:	4603      	mov	r3, r0
 800e764:	75fb      	strb	r3, [r7, #23]

  return ret;
 800e766:	7dfb      	ldrb	r3, [r7, #23]
}
 800e768:	4618      	mov	r0, r3
 800e76a:	3718      	adds	r7, #24
 800e76c:	46bd      	mov	sp, r7
 800e76e:	bd80      	pop	{r7, pc}

0800e770 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
 800e778:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e77a:	2300      	movs	r3, #0
 800e77c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800e77e:	683b      	ldr	r3, [r7, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d101      	bne.n	800e788 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800e784:	2303      	movs	r3, #3
 800e786:	e025      	b.n	800e7d4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	683a      	ldr	r2, [r7, #0]
 800e78c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	32ae      	adds	r2, #174	; 0xae
 800e79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e79e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d00f      	beq.n	800e7c4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	32ae      	adds	r2, #174	; 0xae
 800e7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e7b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7b4:	f107 020e 	add.w	r2, r7, #14
 800e7b8:	4610      	mov	r0, r2
 800e7ba:	4798      	blx	r3
 800e7bc:	4602      	mov	r2, r0
 800e7be:	687b      	ldr	r3, [r7, #4]
 800e7c0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800e7ca:	1c5a      	adds	r2, r3, #1
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800e7d2:	2300      	movs	r3, #0
}
 800e7d4:	4618      	mov	r0, r3
 800e7d6:	3710      	adds	r7, #16
 800e7d8:	46bd      	mov	sp, r7
 800e7da:	bd80      	pop	{r7, pc}

0800e7dc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800e7dc:	b580      	push	{r7, lr}
 800e7de:	b082      	sub	sp, #8
 800e7e0:	af00      	add	r7, sp, #0
 800e7e2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800e7e4:	6878      	ldr	r0, [r7, #4]
 800e7e6:	f006 fedf 	bl	80155a8 <USBD_LL_Start>
 800e7ea:	4603      	mov	r3, r0
}
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	3708      	adds	r7, #8
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}

0800e7f4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800e7f4:	b480      	push	{r7}
 800e7f6:	b083      	sub	sp, #12
 800e7f8:	af00      	add	r7, sp, #0
 800e7fa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e7fc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	370c      	adds	r7, #12
 800e802:	46bd      	mov	sp, r7
 800e804:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e808:	4770      	bx	lr

0800e80a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e80a:	b580      	push	{r7, lr}
 800e80c:	b084      	sub	sp, #16
 800e80e:	af00      	add	r7, sp, #0
 800e810:	6078      	str	r0, [r7, #4]
 800e812:	460b      	mov	r3, r1
 800e814:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e816:	2300      	movs	r3, #0
 800e818:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e820:	2b00      	cmp	r3, #0
 800e822:	d009      	beq.n	800e838 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e82a:	681b      	ldr	r3, [r3, #0]
 800e82c:	78fa      	ldrb	r2, [r7, #3]
 800e82e:	4611      	mov	r1, r2
 800e830:	6878      	ldr	r0, [r7, #4]
 800e832:	4798      	blx	r3
 800e834:	4603      	mov	r3, r0
 800e836:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e838:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83a:	4618      	mov	r0, r3
 800e83c:	3710      	adds	r7, #16
 800e83e:	46bd      	mov	sp, r7
 800e840:	bd80      	pop	{r7, pc}

0800e842 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800e842:	b580      	push	{r7, lr}
 800e844:	b084      	sub	sp, #16
 800e846:	af00      	add	r7, sp, #0
 800e848:	6078      	str	r0, [r7, #4]
 800e84a:	460b      	mov	r3, r1
 800e84c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800e84e:	2300      	movs	r3, #0
 800e850:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e858:	685b      	ldr	r3, [r3, #4]
 800e85a:	78fa      	ldrb	r2, [r7, #3]
 800e85c:	4611      	mov	r1, r2
 800e85e:	6878      	ldr	r0, [r7, #4]
 800e860:	4798      	blx	r3
 800e862:	4603      	mov	r3, r0
 800e864:	2b00      	cmp	r3, #0
 800e866:	d001      	beq.n	800e86c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800e868:	2303      	movs	r3, #3
 800e86a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e86c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e86e:	4618      	mov	r0, r3
 800e870:	3710      	adds	r7, #16
 800e872:	46bd      	mov	sp, r7
 800e874:	bd80      	pop	{r7, pc}

0800e876 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800e876:	b580      	push	{r7, lr}
 800e878:	b084      	sub	sp, #16
 800e87a:	af00      	add	r7, sp, #0
 800e87c:	6078      	str	r0, [r7, #4]
 800e87e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e886:	6839      	ldr	r1, [r7, #0]
 800e888:	4618      	mov	r0, r3
 800e88a:	f001 f932 	bl	800faf2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	2201      	movs	r2, #1
 800e892:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800e896:	687b      	ldr	r3, [r7, #4]
 800e898:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800e89c:	461a      	mov	r2, r3
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e8aa:	f003 031f 	and.w	r3, r3, #31
 800e8ae:	2b02      	cmp	r3, #2
 800e8b0:	d01a      	beq.n	800e8e8 <USBD_LL_SetupStage+0x72>
 800e8b2:	2b02      	cmp	r3, #2
 800e8b4:	d822      	bhi.n	800e8fc <USBD_LL_SetupStage+0x86>
 800e8b6:	2b00      	cmp	r3, #0
 800e8b8:	d002      	beq.n	800e8c0 <USBD_LL_SetupStage+0x4a>
 800e8ba:	2b01      	cmp	r3, #1
 800e8bc:	d00a      	beq.n	800e8d4 <USBD_LL_SetupStage+0x5e>
 800e8be:	e01d      	b.n	800e8fc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e8c6:	4619      	mov	r1, r3
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f000 fb5f 	bl	800ef8c <USBD_StdDevReq>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	73fb      	strb	r3, [r7, #15]
      break;
 800e8d2:	e020      	b.n	800e916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e8da:	4619      	mov	r1, r3
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 fbc7 	bl	800f070 <USBD_StdItfReq>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	73fb      	strb	r3, [r7, #15]
      break;
 800e8e6:	e016      	b.n	800e916 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	6878      	ldr	r0, [r7, #4]
 800e8f2:	f000 fc29 	bl	800f148 <USBD_StdEPReq>
 800e8f6:	4603      	mov	r3, r0
 800e8f8:	73fb      	strb	r3, [r7, #15]
      break;
 800e8fa:	e00c      	b.n	800e916 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e902:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800e906:	b2db      	uxtb	r3, r3
 800e908:	4619      	mov	r1, r3
 800e90a:	6878      	ldr	r0, [r7, #4]
 800e90c:	f006 feac 	bl	8015668 <USBD_LL_StallEP>
 800e910:	4603      	mov	r3, r0
 800e912:	73fb      	strb	r3, [r7, #15]
      break;
 800e914:	bf00      	nop
  }

  return ret;
 800e916:	7bfb      	ldrb	r3, [r7, #15]
}
 800e918:	4618      	mov	r0, r3
 800e91a:	3710      	adds	r7, #16
 800e91c:	46bd      	mov	sp, r7
 800e91e:	bd80      	pop	{r7, pc}

0800e920 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800e920:	b580      	push	{r7, lr}
 800e922:	b086      	sub	sp, #24
 800e924:	af00      	add	r7, sp, #0
 800e926:	60f8      	str	r0, [r7, #12]
 800e928:	460b      	mov	r3, r1
 800e92a:	607a      	str	r2, [r7, #4]
 800e92c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800e92e:	2300      	movs	r3, #0
 800e930:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800e932:	7afb      	ldrb	r3, [r7, #11]
 800e934:	2b00      	cmp	r3, #0
 800e936:	d16e      	bne.n	800ea16 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800e93e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800e946:	2b03      	cmp	r3, #3
 800e948:	f040 8098 	bne.w	800ea7c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800e94c:	693b      	ldr	r3, [r7, #16]
 800e94e:	689a      	ldr	r2, [r3, #8]
 800e950:	693b      	ldr	r3, [r7, #16]
 800e952:	68db      	ldr	r3, [r3, #12]
 800e954:	429a      	cmp	r2, r3
 800e956:	d913      	bls.n	800e980 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800e958:	693b      	ldr	r3, [r7, #16]
 800e95a:	689a      	ldr	r2, [r3, #8]
 800e95c:	693b      	ldr	r3, [r7, #16]
 800e95e:	68db      	ldr	r3, [r3, #12]
 800e960:	1ad2      	subs	r2, r2, r3
 800e962:	693b      	ldr	r3, [r7, #16]
 800e964:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800e966:	693b      	ldr	r3, [r7, #16]
 800e968:	68da      	ldr	r2, [r3, #12]
 800e96a:	693b      	ldr	r3, [r7, #16]
 800e96c:	689b      	ldr	r3, [r3, #8]
 800e96e:	4293      	cmp	r3, r2
 800e970:	bf28      	it	cs
 800e972:	4613      	movcs	r3, r2
 800e974:	461a      	mov	r2, r3
 800e976:	6879      	ldr	r1, [r7, #4]
 800e978:	68f8      	ldr	r0, [r7, #12]
 800e97a:	f001 f9ae 	bl	800fcda <USBD_CtlContinueRx>
 800e97e:	e07d      	b.n	800ea7c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800e986:	f003 031f 	and.w	r3, r3, #31
 800e98a:	2b02      	cmp	r3, #2
 800e98c:	d014      	beq.n	800e9b8 <USBD_LL_DataOutStage+0x98>
 800e98e:	2b02      	cmp	r3, #2
 800e990:	d81d      	bhi.n	800e9ce <USBD_LL_DataOutStage+0xae>
 800e992:	2b00      	cmp	r3, #0
 800e994:	d002      	beq.n	800e99c <USBD_LL_DataOutStage+0x7c>
 800e996:	2b01      	cmp	r3, #1
 800e998:	d003      	beq.n	800e9a2 <USBD_LL_DataOutStage+0x82>
 800e99a:	e018      	b.n	800e9ce <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800e99c:	2300      	movs	r3, #0
 800e99e:	75bb      	strb	r3, [r7, #22]
            break;
 800e9a0:	e018      	b.n	800e9d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800e9a2:	68fb      	ldr	r3, [r7, #12]
 800e9a4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	4619      	mov	r1, r3
 800e9ac:	68f8      	ldr	r0, [r7, #12]
 800e9ae:	f000 fa5e 	bl	800ee6e <USBD_CoreFindIF>
 800e9b2:	4603      	mov	r3, r0
 800e9b4:	75bb      	strb	r3, [r7, #22]
            break;
 800e9b6:	e00d      	b.n	800e9d4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800e9be:	b2db      	uxtb	r3, r3
 800e9c0:	4619      	mov	r1, r3
 800e9c2:	68f8      	ldr	r0, [r7, #12]
 800e9c4:	f000 fa60 	bl	800ee88 <USBD_CoreFindEP>
 800e9c8:	4603      	mov	r3, r0
 800e9ca:	75bb      	strb	r3, [r7, #22]
            break;
 800e9cc:	e002      	b.n	800e9d4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800e9ce:	2300      	movs	r3, #0
 800e9d0:	75bb      	strb	r3, [r7, #22]
            break;
 800e9d2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800e9d4:	7dbb      	ldrb	r3, [r7, #22]
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d119      	bne.n	800ea0e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9e0:	b2db      	uxtb	r3, r3
 800e9e2:	2b03      	cmp	r3, #3
 800e9e4:	d113      	bne.n	800ea0e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800e9e6:	7dba      	ldrb	r2, [r7, #22]
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	32ae      	adds	r2, #174	; 0xae
 800e9ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e9f0:	691b      	ldr	r3, [r3, #16]
 800e9f2:	2b00      	cmp	r3, #0
 800e9f4:	d00b      	beq.n	800ea0e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800e9f6:	7dba      	ldrb	r2, [r7, #22]
 800e9f8:	68fb      	ldr	r3, [r7, #12]
 800e9fa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800e9fe:	7dba      	ldrb	r2, [r7, #22]
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	32ae      	adds	r2, #174	; 0xae
 800ea04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea08:	691b      	ldr	r3, [r3, #16]
 800ea0a:	68f8      	ldr	r0, [r7, #12]
 800ea0c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ea0e:	68f8      	ldr	r0, [r7, #12]
 800ea10:	f001 f974 	bl	800fcfc <USBD_CtlSendStatus>
 800ea14:	e032      	b.n	800ea7c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ea16:	7afb      	ldrb	r3, [r7, #11]
 800ea18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ea1c:	b2db      	uxtb	r3, r3
 800ea1e:	4619      	mov	r1, r3
 800ea20:	68f8      	ldr	r0, [r7, #12]
 800ea22:	f000 fa31 	bl	800ee88 <USBD_CoreFindEP>
 800ea26:	4603      	mov	r3, r0
 800ea28:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ea2a:	7dbb      	ldrb	r3, [r7, #22]
 800ea2c:	2bff      	cmp	r3, #255	; 0xff
 800ea2e:	d025      	beq.n	800ea7c <USBD_LL_DataOutStage+0x15c>
 800ea30:	7dbb      	ldrb	r3, [r7, #22]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d122      	bne.n	800ea7c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ea36:	68fb      	ldr	r3, [r7, #12]
 800ea38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea3c:	b2db      	uxtb	r3, r3
 800ea3e:	2b03      	cmp	r3, #3
 800ea40:	d117      	bne.n	800ea72 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ea42:	7dba      	ldrb	r2, [r7, #22]
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	32ae      	adds	r2, #174	; 0xae
 800ea48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea4c:	699b      	ldr	r3, [r3, #24]
 800ea4e:	2b00      	cmp	r3, #0
 800ea50:	d00f      	beq.n	800ea72 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ea52:	7dba      	ldrb	r2, [r7, #22]
 800ea54:	68fb      	ldr	r3, [r7, #12]
 800ea56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ea5a:	7dba      	ldrb	r2, [r7, #22]
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	32ae      	adds	r2, #174	; 0xae
 800ea60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea64:	699b      	ldr	r3, [r3, #24]
 800ea66:	7afa      	ldrb	r2, [r7, #11]
 800ea68:	4611      	mov	r1, r2
 800ea6a:	68f8      	ldr	r0, [r7, #12]
 800ea6c:	4798      	blx	r3
 800ea6e:	4603      	mov	r3, r0
 800ea70:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ea72:	7dfb      	ldrb	r3, [r7, #23]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d001      	beq.n	800ea7c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ea78:	7dfb      	ldrb	r3, [r7, #23]
 800ea7a:	e000      	b.n	800ea7e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ea7c:	2300      	movs	r3, #0
}
 800ea7e:	4618      	mov	r0, r3
 800ea80:	3718      	adds	r7, #24
 800ea82:	46bd      	mov	sp, r7
 800ea84:	bd80      	pop	{r7, pc}

0800ea86 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ea86:	b580      	push	{r7, lr}
 800ea88:	b086      	sub	sp, #24
 800ea8a:	af00      	add	r7, sp, #0
 800ea8c:	60f8      	str	r0, [r7, #12]
 800ea8e:	460b      	mov	r3, r1
 800ea90:	607a      	str	r2, [r7, #4]
 800ea92:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ea94:	7afb      	ldrb	r3, [r7, #11]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d16f      	bne.n	800eb7a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ea9a:	68fb      	ldr	r3, [r7, #12]
 800ea9c:	3314      	adds	r3, #20
 800ea9e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800eaa0:	68fb      	ldr	r3, [r7, #12]
 800eaa2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800eaa6:	2b02      	cmp	r3, #2
 800eaa8:	d15a      	bne.n	800eb60 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800eaaa:	693b      	ldr	r3, [r7, #16]
 800eaac:	689a      	ldr	r2, [r3, #8]
 800eaae:	693b      	ldr	r3, [r7, #16]
 800eab0:	68db      	ldr	r3, [r3, #12]
 800eab2:	429a      	cmp	r2, r3
 800eab4:	d914      	bls.n	800eae0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800eab6:	693b      	ldr	r3, [r7, #16]
 800eab8:	689a      	ldr	r2, [r3, #8]
 800eaba:	693b      	ldr	r3, [r7, #16]
 800eabc:	68db      	ldr	r3, [r3, #12]
 800eabe:	1ad2      	subs	r2, r2, r3
 800eac0:	693b      	ldr	r3, [r7, #16]
 800eac2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800eac4:	693b      	ldr	r3, [r7, #16]
 800eac6:	689b      	ldr	r3, [r3, #8]
 800eac8:	461a      	mov	r2, r3
 800eaca:	6879      	ldr	r1, [r7, #4]
 800eacc:	68f8      	ldr	r0, [r7, #12]
 800eace:	f001 f8d6 	bl	800fc7e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ead2:	2300      	movs	r3, #0
 800ead4:	2200      	movs	r2, #0
 800ead6:	2100      	movs	r1, #0
 800ead8:	68f8      	ldr	r0, [r7, #12]
 800eada:	f006 fe6f 	bl	80157bc <USBD_LL_PrepareReceive>
 800eade:	e03f      	b.n	800eb60 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800eae0:	693b      	ldr	r3, [r7, #16]
 800eae2:	68da      	ldr	r2, [r3, #12]
 800eae4:	693b      	ldr	r3, [r7, #16]
 800eae6:	689b      	ldr	r3, [r3, #8]
 800eae8:	429a      	cmp	r2, r3
 800eaea:	d11c      	bne.n	800eb26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800eaec:	693b      	ldr	r3, [r7, #16]
 800eaee:	685a      	ldr	r2, [r3, #4]
 800eaf0:	693b      	ldr	r3, [r7, #16]
 800eaf2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800eaf4:	429a      	cmp	r2, r3
 800eaf6:	d316      	bcc.n	800eb26 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800eaf8:	693b      	ldr	r3, [r7, #16]
 800eafa:	685a      	ldr	r2, [r3, #4]
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800eb02:	429a      	cmp	r2, r3
 800eb04:	d20f      	bcs.n	800eb26 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800eb06:	2200      	movs	r2, #0
 800eb08:	2100      	movs	r1, #0
 800eb0a:	68f8      	ldr	r0, [r7, #12]
 800eb0c:	f001 f8b7 	bl	800fc7e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800eb10:	68fb      	ldr	r3, [r7, #12]
 800eb12:	2200      	movs	r2, #0
 800eb14:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800eb18:	2300      	movs	r3, #0
 800eb1a:	2200      	movs	r2, #0
 800eb1c:	2100      	movs	r1, #0
 800eb1e:	68f8      	ldr	r0, [r7, #12]
 800eb20:	f006 fe4c 	bl	80157bc <USBD_LL_PrepareReceive>
 800eb24:	e01c      	b.n	800eb60 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb26:	68fb      	ldr	r3, [r7, #12]
 800eb28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eb2c:	b2db      	uxtb	r3, r3
 800eb2e:	2b03      	cmp	r3, #3
 800eb30:	d10f      	bne.n	800eb52 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb38:	68db      	ldr	r3, [r3, #12]
 800eb3a:	2b00      	cmp	r3, #0
 800eb3c:	d009      	beq.n	800eb52 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	2200      	movs	r2, #0
 800eb42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800eb46:	68fb      	ldr	r3, [r7, #12]
 800eb48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eb4c:	68db      	ldr	r3, [r3, #12]
 800eb4e:	68f8      	ldr	r0, [r7, #12]
 800eb50:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb52:	2180      	movs	r1, #128	; 0x80
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	f006 fd87 	bl	8015668 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800eb5a:	68f8      	ldr	r0, [r7, #12]
 800eb5c:	f001 f8e1 	bl	800fd22 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800eb60:	68fb      	ldr	r3, [r7, #12]
 800eb62:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d03a      	beq.n	800ebe0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800eb6a:	68f8      	ldr	r0, [r7, #12]
 800eb6c:	f7ff fe42 	bl	800e7f4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	2200      	movs	r2, #0
 800eb74:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800eb78:	e032      	b.n	800ebe0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800eb7a:	7afb      	ldrb	r3, [r7, #11]
 800eb7c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800eb80:	b2db      	uxtb	r3, r3
 800eb82:	4619      	mov	r1, r3
 800eb84:	68f8      	ldr	r0, [r7, #12]
 800eb86:	f000 f97f 	bl	800ee88 <USBD_CoreFindEP>
 800eb8a:	4603      	mov	r3, r0
 800eb8c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800eb8e:	7dfb      	ldrb	r3, [r7, #23]
 800eb90:	2bff      	cmp	r3, #255	; 0xff
 800eb92:	d025      	beq.n	800ebe0 <USBD_LL_DataInStage+0x15a>
 800eb94:	7dfb      	ldrb	r3, [r7, #23]
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d122      	bne.n	800ebe0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eba0:	b2db      	uxtb	r3, r3
 800eba2:	2b03      	cmp	r3, #3
 800eba4:	d11c      	bne.n	800ebe0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800eba6:	7dfa      	ldrb	r2, [r7, #23]
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	32ae      	adds	r2, #174	; 0xae
 800ebac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebb0:	695b      	ldr	r3, [r3, #20]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d014      	beq.n	800ebe0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ebb6:	7dfa      	ldrb	r2, [r7, #23]
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ebbe:	7dfa      	ldrb	r2, [r7, #23]
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	32ae      	adds	r2, #174	; 0xae
 800ebc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ebc8:	695b      	ldr	r3, [r3, #20]
 800ebca:	7afa      	ldrb	r2, [r7, #11]
 800ebcc:	4611      	mov	r1, r2
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	4798      	blx	r3
 800ebd2:	4603      	mov	r3, r0
 800ebd4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ebd6:	7dbb      	ldrb	r3, [r7, #22]
 800ebd8:	2b00      	cmp	r3, #0
 800ebda:	d001      	beq.n	800ebe0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800ebdc:	7dbb      	ldrb	r3, [r7, #22]
 800ebde:	e000      	b.n	800ebe2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800ebe0:	2300      	movs	r3, #0
}
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	3718      	adds	r7, #24
 800ebe6:	46bd      	mov	sp, r7
 800ebe8:	bd80      	pop	{r7, pc}

0800ebea <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800ebea:	b580      	push	{r7, lr}
 800ebec:	b084      	sub	sp, #16
 800ebee:	af00      	add	r7, sp, #0
 800ebf0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800ebf2:	2300      	movs	r3, #0
 800ebf4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ebf6:	687b      	ldr	r3, [r7, #4]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	2200      	movs	r2, #0
 800ec02:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	2200      	movs	r2, #0
 800ec10:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2200      	movs	r2, #0
 800ec18:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec22:	2b00      	cmp	r3, #0
 800ec24:	d014      	beq.n	800ec50 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec2c:	685b      	ldr	r3, [r3, #4]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d00e      	beq.n	800ec50 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ec38:	685b      	ldr	r3, [r3, #4]
 800ec3a:	687a      	ldr	r2, [r7, #4]
 800ec3c:	6852      	ldr	r2, [r2, #4]
 800ec3e:	b2d2      	uxtb	r2, r2
 800ec40:	4611      	mov	r1, r2
 800ec42:	6878      	ldr	r0, [r7, #4]
 800ec44:	4798      	blx	r3
 800ec46:	4603      	mov	r3, r0
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d001      	beq.n	800ec50 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ec4c:	2303      	movs	r3, #3
 800ec4e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec50:	2340      	movs	r3, #64	; 0x40
 800ec52:	2200      	movs	r2, #0
 800ec54:	2100      	movs	r1, #0
 800ec56:	6878      	ldr	r0, [r7, #4]
 800ec58:	f006 fcc1 	bl	80155de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	2201      	movs	r2, #1
 800ec60:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2240      	movs	r2, #64	; 0x40
 800ec68:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ec6c:	2340      	movs	r3, #64	; 0x40
 800ec6e:	2200      	movs	r2, #0
 800ec70:	2180      	movs	r1, #128	; 0x80
 800ec72:	6878      	ldr	r0, [r7, #4]
 800ec74:	f006 fcb3 	bl	80155de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ec7e:	687b      	ldr	r3, [r7, #4]
 800ec80:	2240      	movs	r2, #64	; 0x40
 800ec82:	621a      	str	r2, [r3, #32]

  return ret;
 800ec84:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	3710      	adds	r7, #16
 800ec8a:	46bd      	mov	sp, r7
 800ec8c:	bd80      	pop	{r7, pc}

0800ec8e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ec8e:	b480      	push	{r7}
 800ec90:	b083      	sub	sp, #12
 800ec92:	af00      	add	r7, sp, #0
 800ec94:	6078      	str	r0, [r7, #4]
 800ec96:	460b      	mov	r3, r1
 800ec98:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	78fa      	ldrb	r2, [r7, #3]
 800ec9e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	370c      	adds	r7, #12
 800eca6:	46bd      	mov	sp, r7
 800eca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecac:	4770      	bx	lr

0800ecae <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ecae:	b480      	push	{r7}
 800ecb0:	b083      	sub	sp, #12
 800ecb2:	af00      	add	r7, sp, #0
 800ecb4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ecb6:	687b      	ldr	r3, [r7, #4]
 800ecb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ecbc:	b2da      	uxtb	r2, r3
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2204      	movs	r2, #4
 800ecc8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800eccc:	2300      	movs	r3, #0
}
 800ecce:	4618      	mov	r0, r3
 800ecd0:	370c      	adds	r7, #12
 800ecd2:	46bd      	mov	sp, r7
 800ecd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecd8:	4770      	bx	lr

0800ecda <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ecda:	b480      	push	{r7}
 800ecdc:	b083      	sub	sp, #12
 800ecde:	af00      	add	r7, sp, #0
 800ece0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ece8:	b2db      	uxtb	r3, r3
 800ecea:	2b04      	cmp	r3, #4
 800ecec:	d106      	bne.n	800ecfc <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800ecf4:	b2da      	uxtb	r2, r3
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800ecfc:	2300      	movs	r3, #0
}
 800ecfe:	4618      	mov	r0, r3
 800ed00:	370c      	adds	r7, #12
 800ed02:	46bd      	mov	sp, r7
 800ed04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed08:	4770      	bx	lr

0800ed0a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800ed0a:	b580      	push	{r7, lr}
 800ed0c:	b082      	sub	sp, #8
 800ed0e:	af00      	add	r7, sp, #0
 800ed10:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed18:	b2db      	uxtb	r3, r3
 800ed1a:	2b03      	cmp	r3, #3
 800ed1c:	d110      	bne.n	800ed40 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d00b      	beq.n	800ed40 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed2e:	69db      	ldr	r3, [r3, #28]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d005      	beq.n	800ed40 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ed3a:	69db      	ldr	r3, [r3, #28]
 800ed3c:	6878      	ldr	r0, [r7, #4]
 800ed3e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ed40:	2300      	movs	r3, #0
}
 800ed42:	4618      	mov	r0, r3
 800ed44:	3708      	adds	r7, #8
 800ed46:	46bd      	mov	sp, r7
 800ed48:	bd80      	pop	{r7, pc}

0800ed4a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ed4a:	b580      	push	{r7, lr}
 800ed4c:	b082      	sub	sp, #8
 800ed4e:	af00      	add	r7, sp, #0
 800ed50:	6078      	str	r0, [r7, #4]
 800ed52:	460b      	mov	r3, r1
 800ed54:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed5c:	687b      	ldr	r3, [r7, #4]
 800ed5e:	32ae      	adds	r2, #174	; 0xae
 800ed60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed64:	2b00      	cmp	r3, #0
 800ed66:	d101      	bne.n	800ed6c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ed68:	2303      	movs	r3, #3
 800ed6a:	e01c      	b.n	800eda6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed72:	b2db      	uxtb	r3, r3
 800ed74:	2b03      	cmp	r3, #3
 800ed76:	d115      	bne.n	800eda4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	32ae      	adds	r2, #174	; 0xae
 800ed82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed86:	6a1b      	ldr	r3, [r3, #32]
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d00b      	beq.n	800eda4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	32ae      	adds	r2, #174	; 0xae
 800ed96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ed9a:	6a1b      	ldr	r3, [r3, #32]
 800ed9c:	78fa      	ldrb	r2, [r7, #3]
 800ed9e:	4611      	mov	r1, r2
 800eda0:	6878      	ldr	r0, [r7, #4]
 800eda2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3708      	adds	r7, #8
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b082      	sub	sp, #8
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	460b      	mov	r3, r1
 800edb8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800edba:	687b      	ldr	r3, [r7, #4]
 800edbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	32ae      	adds	r2, #174	; 0xae
 800edc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edc8:	2b00      	cmp	r3, #0
 800edca:	d101      	bne.n	800edd0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800edcc:	2303      	movs	r3, #3
 800edce:	e01c      	b.n	800ee0a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edd6:	b2db      	uxtb	r3, r3
 800edd8:	2b03      	cmp	r3, #3
 800edda:	d115      	bne.n	800ee08 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800eddc:	687b      	ldr	r3, [r7, #4]
 800edde:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	32ae      	adds	r2, #174	; 0xae
 800ede6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800edec:	2b00      	cmp	r3, #0
 800edee:	d00b      	beq.n	800ee08 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	32ae      	adds	r2, #174	; 0xae
 800edfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee00:	78fa      	ldrb	r2, [r7, #3]
 800ee02:	4611      	mov	r1, r2
 800ee04:	6878      	ldr	r0, [r7, #4]
 800ee06:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ee08:	2300      	movs	r3, #0
}
 800ee0a:	4618      	mov	r0, r3
 800ee0c:	3708      	adds	r7, #8
 800ee0e:	46bd      	mov	sp, r7
 800ee10:	bd80      	pop	{r7, pc}

0800ee12 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ee12:	b480      	push	{r7}
 800ee14:	b083      	sub	sp, #12
 800ee16:	af00      	add	r7, sp, #0
 800ee18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ee1a:	2300      	movs	r3, #0
}
 800ee1c:	4618      	mov	r0, r3
 800ee1e:	370c      	adds	r7, #12
 800ee20:	46bd      	mov	sp, r7
 800ee22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee26:	4770      	bx	lr

0800ee28 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b084      	sub	sp, #16
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800ee30:	2300      	movs	r3, #0
 800ee32:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2201      	movs	r2, #1
 800ee38:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d00e      	beq.n	800ee64 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ee4c:	685b      	ldr	r3, [r3, #4]
 800ee4e:	687a      	ldr	r2, [r7, #4]
 800ee50:	6852      	ldr	r2, [r2, #4]
 800ee52:	b2d2      	uxtb	r2, r2
 800ee54:	4611      	mov	r1, r2
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	4798      	blx	r3
 800ee5a:	4603      	mov	r3, r0
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d001      	beq.n	800ee64 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800ee60:	2303      	movs	r3, #3
 800ee62:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ee64:	7bfb      	ldrb	r3, [r7, #15]
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}

0800ee6e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ee6e:	b480      	push	{r7}
 800ee70:	b083      	sub	sp, #12
 800ee72:	af00      	add	r7, sp, #0
 800ee74:	6078      	str	r0, [r7, #4]
 800ee76:	460b      	mov	r3, r1
 800ee78:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ee7a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ee7c:	4618      	mov	r0, r3
 800ee7e:	370c      	adds	r7, #12
 800ee80:	46bd      	mov	sp, r7
 800ee82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee86:	4770      	bx	lr

0800ee88 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800ee88:	b480      	push	{r7}
 800ee8a:	b083      	sub	sp, #12
 800ee8c:	af00      	add	r7, sp, #0
 800ee8e:	6078      	str	r0, [r7, #4]
 800ee90:	460b      	mov	r3, r1
 800ee92:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800ee94:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800ee96:	4618      	mov	r0, r3
 800ee98:	370c      	adds	r7, #12
 800ee9a:	46bd      	mov	sp, r7
 800ee9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eea0:	4770      	bx	lr

0800eea2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800eea2:	b580      	push	{r7, lr}
 800eea4:	b086      	sub	sp, #24
 800eea6:	af00      	add	r7, sp, #0
 800eea8:	6078      	str	r0, [r7, #4]
 800eeaa:	460b      	mov	r3, r1
 800eeac:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800eeb6:	2300      	movs	r3, #0
 800eeb8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800eeba:	68fb      	ldr	r3, [r7, #12]
 800eebc:	885b      	ldrh	r3, [r3, #2]
 800eebe:	b29a      	uxth	r2, r3
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	781b      	ldrb	r3, [r3, #0]
 800eec4:	b29b      	uxth	r3, r3
 800eec6:	429a      	cmp	r2, r3
 800eec8:	d920      	bls.n	800ef0c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800eeca:	68fb      	ldr	r3, [r7, #12]
 800eecc:	781b      	ldrb	r3, [r3, #0]
 800eece:	b29b      	uxth	r3, r3
 800eed0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800eed2:	e013      	b.n	800eefc <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800eed4:	f107 030a 	add.w	r3, r7, #10
 800eed8:	4619      	mov	r1, r3
 800eeda:	6978      	ldr	r0, [r7, #20]
 800eedc:	f000 f81b 	bl	800ef16 <USBD_GetNextDesc>
 800eee0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800eee2:	697b      	ldr	r3, [r7, #20]
 800eee4:	785b      	ldrb	r3, [r3, #1]
 800eee6:	2b05      	cmp	r3, #5
 800eee8:	d108      	bne.n	800eefc <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800eeea:	697b      	ldr	r3, [r7, #20]
 800eeec:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800eeee:	693b      	ldr	r3, [r7, #16]
 800eef0:	789b      	ldrb	r3, [r3, #2]
 800eef2:	78fa      	ldrb	r2, [r7, #3]
 800eef4:	429a      	cmp	r2, r3
 800eef6:	d008      	beq.n	800ef0a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800eef8:	2300      	movs	r3, #0
 800eefa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	885b      	ldrh	r3, [r3, #2]
 800ef00:	b29a      	uxth	r2, r3
 800ef02:	897b      	ldrh	r3, [r7, #10]
 800ef04:	429a      	cmp	r2, r3
 800ef06:	d8e5      	bhi.n	800eed4 <USBD_GetEpDesc+0x32>
 800ef08:	e000      	b.n	800ef0c <USBD_GetEpDesc+0x6a>
          break;
 800ef0a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800ef0c:	693b      	ldr	r3, [r7, #16]
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	3718      	adds	r7, #24
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bd80      	pop	{r7, pc}

0800ef16 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800ef16:	b480      	push	{r7}
 800ef18:	b085      	sub	sp, #20
 800ef1a:	af00      	add	r7, sp, #0
 800ef1c:	6078      	str	r0, [r7, #4]
 800ef1e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ef24:	683b      	ldr	r3, [r7, #0]
 800ef26:	881a      	ldrh	r2, [r3, #0]
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	781b      	ldrb	r3, [r3, #0]
 800ef2c:	b29b      	uxth	r3, r3
 800ef2e:	4413      	add	r3, r2
 800ef30:	b29a      	uxth	r2, r3
 800ef32:	683b      	ldr	r3, [r7, #0]
 800ef34:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	781b      	ldrb	r3, [r3, #0]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	4413      	add	r3, r2
 800ef40:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ef42:	68fb      	ldr	r3, [r7, #12]
}
 800ef44:	4618      	mov	r0, r3
 800ef46:	3714      	adds	r7, #20
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef4e:	4770      	bx	lr

0800ef50 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ef50:	b480      	push	{r7}
 800ef52:	b087      	sub	sp, #28
 800ef54:	af00      	add	r7, sp, #0
 800ef56:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ef5c:	697b      	ldr	r3, [r7, #20]
 800ef5e:	781b      	ldrb	r3, [r3, #0]
 800ef60:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ef62:	697b      	ldr	r3, [r7, #20]
 800ef64:	3301      	adds	r3, #1
 800ef66:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ef68:	697b      	ldr	r3, [r7, #20]
 800ef6a:	781b      	ldrb	r3, [r3, #0]
 800ef6c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ef6e:	8a3b      	ldrh	r3, [r7, #16]
 800ef70:	021b      	lsls	r3, r3, #8
 800ef72:	b21a      	sxth	r2, r3
 800ef74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ef78:	4313      	orrs	r3, r2
 800ef7a:	b21b      	sxth	r3, r3
 800ef7c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ef7e:	89fb      	ldrh	r3, [r7, #14]
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	371c      	adds	r7, #28
 800ef84:	46bd      	mov	sp, r7
 800ef86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef8a:	4770      	bx	lr

0800ef8c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
 800ef94:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ef96:	2300      	movs	r3, #0
 800ef98:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ef9a:	683b      	ldr	r3, [r7, #0]
 800ef9c:	781b      	ldrb	r3, [r3, #0]
 800ef9e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800efa2:	2b40      	cmp	r3, #64	; 0x40
 800efa4:	d005      	beq.n	800efb2 <USBD_StdDevReq+0x26>
 800efa6:	2b40      	cmp	r3, #64	; 0x40
 800efa8:	d857      	bhi.n	800f05a <USBD_StdDevReq+0xce>
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d00f      	beq.n	800efce <USBD_StdDevReq+0x42>
 800efae:	2b20      	cmp	r3, #32
 800efb0:	d153      	bne.n	800f05a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	32ae      	adds	r2, #174	; 0xae
 800efbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800efc0:	689b      	ldr	r3, [r3, #8]
 800efc2:	6839      	ldr	r1, [r7, #0]
 800efc4:	6878      	ldr	r0, [r7, #4]
 800efc6:	4798      	blx	r3
 800efc8:	4603      	mov	r3, r0
 800efca:	73fb      	strb	r3, [r7, #15]
      break;
 800efcc:	e04a      	b.n	800f064 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800efce:	683b      	ldr	r3, [r7, #0]
 800efd0:	785b      	ldrb	r3, [r3, #1]
 800efd2:	2b09      	cmp	r3, #9
 800efd4:	d83b      	bhi.n	800f04e <USBD_StdDevReq+0xc2>
 800efd6:	a201      	add	r2, pc, #4	; (adr r2, 800efdc <USBD_StdDevReq+0x50>)
 800efd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800efdc:	0800f031 	.word	0x0800f031
 800efe0:	0800f045 	.word	0x0800f045
 800efe4:	0800f04f 	.word	0x0800f04f
 800efe8:	0800f03b 	.word	0x0800f03b
 800efec:	0800f04f 	.word	0x0800f04f
 800eff0:	0800f00f 	.word	0x0800f00f
 800eff4:	0800f005 	.word	0x0800f005
 800eff8:	0800f04f 	.word	0x0800f04f
 800effc:	0800f027 	.word	0x0800f027
 800f000:	0800f019 	.word	0x0800f019
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800f004:	6839      	ldr	r1, [r7, #0]
 800f006:	6878      	ldr	r0, [r7, #4]
 800f008:	f000 fa3c 	bl	800f484 <USBD_GetDescriptor>
          break;
 800f00c:	e024      	b.n	800f058 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800f00e:	6839      	ldr	r1, [r7, #0]
 800f010:	6878      	ldr	r0, [r7, #4]
 800f012:	f000 fbcb 	bl	800f7ac <USBD_SetAddress>
          break;
 800f016:	e01f      	b.n	800f058 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800f018:	6839      	ldr	r1, [r7, #0]
 800f01a:	6878      	ldr	r0, [r7, #4]
 800f01c:	f000 fc0a 	bl	800f834 <USBD_SetConfig>
 800f020:	4603      	mov	r3, r0
 800f022:	73fb      	strb	r3, [r7, #15]
          break;
 800f024:	e018      	b.n	800f058 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800f026:	6839      	ldr	r1, [r7, #0]
 800f028:	6878      	ldr	r0, [r7, #4]
 800f02a:	f000 fcad 	bl	800f988 <USBD_GetConfig>
          break;
 800f02e:	e013      	b.n	800f058 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800f030:	6839      	ldr	r1, [r7, #0]
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 fcde 	bl	800f9f4 <USBD_GetStatus>
          break;
 800f038:	e00e      	b.n	800f058 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800f03a:	6839      	ldr	r1, [r7, #0]
 800f03c:	6878      	ldr	r0, [r7, #4]
 800f03e:	f000 fd0d 	bl	800fa5c <USBD_SetFeature>
          break;
 800f042:	e009      	b.n	800f058 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800f044:	6839      	ldr	r1, [r7, #0]
 800f046:	6878      	ldr	r0, [r7, #4]
 800f048:	f000 fd31 	bl	800faae <USBD_ClrFeature>
          break;
 800f04c:	e004      	b.n	800f058 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800f04e:	6839      	ldr	r1, [r7, #0]
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 fd88 	bl	800fb66 <USBD_CtlError>
          break;
 800f056:	bf00      	nop
      }
      break;
 800f058:	e004      	b.n	800f064 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800f05a:	6839      	ldr	r1, [r7, #0]
 800f05c:	6878      	ldr	r0, [r7, #4]
 800f05e:	f000 fd82 	bl	800fb66 <USBD_CtlError>
      break;
 800f062:	bf00      	nop
  }

  return ret;
 800f064:	7bfb      	ldrb	r3, [r7, #15]
}
 800f066:	4618      	mov	r0, r3
 800f068:	3710      	adds	r7, #16
 800f06a:	46bd      	mov	sp, r7
 800f06c:	bd80      	pop	{r7, pc}
 800f06e:	bf00      	nop

0800f070 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b084      	sub	sp, #16
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f07a:	2300      	movs	r3, #0
 800f07c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f07e:	683b      	ldr	r3, [r7, #0]
 800f080:	781b      	ldrb	r3, [r3, #0]
 800f082:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f086:	2b40      	cmp	r3, #64	; 0x40
 800f088:	d005      	beq.n	800f096 <USBD_StdItfReq+0x26>
 800f08a:	2b40      	cmp	r3, #64	; 0x40
 800f08c:	d852      	bhi.n	800f134 <USBD_StdItfReq+0xc4>
 800f08e:	2b00      	cmp	r3, #0
 800f090:	d001      	beq.n	800f096 <USBD_StdItfReq+0x26>
 800f092:	2b20      	cmp	r3, #32
 800f094:	d14e      	bne.n	800f134 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f09c:	b2db      	uxtb	r3, r3
 800f09e:	3b01      	subs	r3, #1
 800f0a0:	2b02      	cmp	r3, #2
 800f0a2:	d840      	bhi.n	800f126 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800f0a4:	683b      	ldr	r3, [r7, #0]
 800f0a6:	889b      	ldrh	r3, [r3, #4]
 800f0a8:	b2db      	uxtb	r3, r3
 800f0aa:	2b01      	cmp	r3, #1
 800f0ac:	d836      	bhi.n	800f11c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	889b      	ldrh	r3, [r3, #4]
 800f0b2:	b2db      	uxtb	r3, r3
 800f0b4:	4619      	mov	r1, r3
 800f0b6:	6878      	ldr	r0, [r7, #4]
 800f0b8:	f7ff fed9 	bl	800ee6e <USBD_CoreFindIF>
 800f0bc:	4603      	mov	r3, r0
 800f0be:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f0c0:	7bbb      	ldrb	r3, [r7, #14]
 800f0c2:	2bff      	cmp	r3, #255	; 0xff
 800f0c4:	d01d      	beq.n	800f102 <USBD_StdItfReq+0x92>
 800f0c6:	7bbb      	ldrb	r3, [r7, #14]
 800f0c8:	2b00      	cmp	r3, #0
 800f0ca:	d11a      	bne.n	800f102 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800f0cc:	7bba      	ldrb	r2, [r7, #14]
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	32ae      	adds	r2, #174	; 0xae
 800f0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0d6:	689b      	ldr	r3, [r3, #8]
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d00f      	beq.n	800f0fc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800f0dc:	7bba      	ldrb	r2, [r7, #14]
 800f0de:	687b      	ldr	r3, [r7, #4]
 800f0e0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f0e4:	7bba      	ldrb	r2, [r7, #14]
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	32ae      	adds	r2, #174	; 0xae
 800f0ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f0ee:	689b      	ldr	r3, [r3, #8]
 800f0f0:	6839      	ldr	r1, [r7, #0]
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	4798      	blx	r3
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f0fa:	e004      	b.n	800f106 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800f0fc:	2303      	movs	r3, #3
 800f0fe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800f100:	e001      	b.n	800f106 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800f102:	2303      	movs	r3, #3
 800f104:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800f106:	683b      	ldr	r3, [r7, #0]
 800f108:	88db      	ldrh	r3, [r3, #6]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d110      	bne.n	800f130 <USBD_StdItfReq+0xc0>
 800f10e:	7bfb      	ldrb	r3, [r7, #15]
 800f110:	2b00      	cmp	r3, #0
 800f112:	d10d      	bne.n	800f130 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800f114:	6878      	ldr	r0, [r7, #4]
 800f116:	f000 fdf1 	bl	800fcfc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800f11a:	e009      	b.n	800f130 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800f11c:	6839      	ldr	r1, [r7, #0]
 800f11e:	6878      	ldr	r0, [r7, #4]
 800f120:	f000 fd21 	bl	800fb66 <USBD_CtlError>
          break;
 800f124:	e004      	b.n	800f130 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800f126:	6839      	ldr	r1, [r7, #0]
 800f128:	6878      	ldr	r0, [r7, #4]
 800f12a:	f000 fd1c 	bl	800fb66 <USBD_CtlError>
          break;
 800f12e:	e000      	b.n	800f132 <USBD_StdItfReq+0xc2>
          break;
 800f130:	bf00      	nop
      }
      break;
 800f132:	e004      	b.n	800f13e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800f134:	6839      	ldr	r1, [r7, #0]
 800f136:	6878      	ldr	r0, [r7, #4]
 800f138:	f000 fd15 	bl	800fb66 <USBD_CtlError>
      break;
 800f13c:	bf00      	nop
  }

  return ret;
 800f13e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f140:	4618      	mov	r0, r3
 800f142:	3710      	adds	r7, #16
 800f144:	46bd      	mov	sp, r7
 800f146:	bd80      	pop	{r7, pc}

0800f148 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b084      	sub	sp, #16
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	6078      	str	r0, [r7, #4]
 800f150:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800f152:	2300      	movs	r3, #0
 800f154:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800f156:	683b      	ldr	r3, [r7, #0]
 800f158:	889b      	ldrh	r3, [r3, #4]
 800f15a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800f15c:	683b      	ldr	r3, [r7, #0]
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800f164:	2b40      	cmp	r3, #64	; 0x40
 800f166:	d007      	beq.n	800f178 <USBD_StdEPReq+0x30>
 800f168:	2b40      	cmp	r3, #64	; 0x40
 800f16a:	f200 817f 	bhi.w	800f46c <USBD_StdEPReq+0x324>
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d02a      	beq.n	800f1c8 <USBD_StdEPReq+0x80>
 800f172:	2b20      	cmp	r3, #32
 800f174:	f040 817a 	bne.w	800f46c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800f178:	7bbb      	ldrb	r3, [r7, #14]
 800f17a:	4619      	mov	r1, r3
 800f17c:	6878      	ldr	r0, [r7, #4]
 800f17e:	f7ff fe83 	bl	800ee88 <USBD_CoreFindEP>
 800f182:	4603      	mov	r3, r0
 800f184:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f186:	7b7b      	ldrb	r3, [r7, #13]
 800f188:	2bff      	cmp	r3, #255	; 0xff
 800f18a:	f000 8174 	beq.w	800f476 <USBD_StdEPReq+0x32e>
 800f18e:	7b7b      	ldrb	r3, [r7, #13]
 800f190:	2b00      	cmp	r3, #0
 800f192:	f040 8170 	bne.w	800f476 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800f196:	7b7a      	ldrb	r2, [r7, #13]
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800f19e:	7b7a      	ldrb	r2, [r7, #13]
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	32ae      	adds	r2, #174	; 0xae
 800f1a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1a8:	689b      	ldr	r3, [r3, #8]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	f000 8163 	beq.w	800f476 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800f1b0:	7b7a      	ldrb	r2, [r7, #13]
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	32ae      	adds	r2, #174	; 0xae
 800f1b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1ba:	689b      	ldr	r3, [r3, #8]
 800f1bc:	6839      	ldr	r1, [r7, #0]
 800f1be:	6878      	ldr	r0, [r7, #4]
 800f1c0:	4798      	blx	r3
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800f1c6:	e156      	b.n	800f476 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800f1c8:	683b      	ldr	r3, [r7, #0]
 800f1ca:	785b      	ldrb	r3, [r3, #1]
 800f1cc:	2b03      	cmp	r3, #3
 800f1ce:	d008      	beq.n	800f1e2 <USBD_StdEPReq+0x9a>
 800f1d0:	2b03      	cmp	r3, #3
 800f1d2:	f300 8145 	bgt.w	800f460 <USBD_StdEPReq+0x318>
 800f1d6:	2b00      	cmp	r3, #0
 800f1d8:	f000 809b 	beq.w	800f312 <USBD_StdEPReq+0x1ca>
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d03c      	beq.n	800f25a <USBD_StdEPReq+0x112>
 800f1e0:	e13e      	b.n	800f460 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f1e8:	b2db      	uxtb	r3, r3
 800f1ea:	2b02      	cmp	r3, #2
 800f1ec:	d002      	beq.n	800f1f4 <USBD_StdEPReq+0xac>
 800f1ee:	2b03      	cmp	r3, #3
 800f1f0:	d016      	beq.n	800f220 <USBD_StdEPReq+0xd8>
 800f1f2:	e02c      	b.n	800f24e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f1f4:	7bbb      	ldrb	r3, [r7, #14]
 800f1f6:	2b00      	cmp	r3, #0
 800f1f8:	d00d      	beq.n	800f216 <USBD_StdEPReq+0xce>
 800f1fa:	7bbb      	ldrb	r3, [r7, #14]
 800f1fc:	2b80      	cmp	r3, #128	; 0x80
 800f1fe:	d00a      	beq.n	800f216 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f200:	7bbb      	ldrb	r3, [r7, #14]
 800f202:	4619      	mov	r1, r3
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f006 fa2f 	bl	8015668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f20a:	2180      	movs	r1, #128	; 0x80
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f006 fa2b 	bl	8015668 <USBD_LL_StallEP>
 800f212:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f214:	e020      	b.n	800f258 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800f216:	6839      	ldr	r1, [r7, #0]
 800f218:	6878      	ldr	r0, [r7, #4]
 800f21a:	f000 fca4 	bl	800fb66 <USBD_CtlError>
              break;
 800f21e:	e01b      	b.n	800f258 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f220:	683b      	ldr	r3, [r7, #0]
 800f222:	885b      	ldrh	r3, [r3, #2]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d10e      	bne.n	800f246 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800f228:	7bbb      	ldrb	r3, [r7, #14]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d00b      	beq.n	800f246 <USBD_StdEPReq+0xfe>
 800f22e:	7bbb      	ldrb	r3, [r7, #14]
 800f230:	2b80      	cmp	r3, #128	; 0x80
 800f232:	d008      	beq.n	800f246 <USBD_StdEPReq+0xfe>
 800f234:	683b      	ldr	r3, [r7, #0]
 800f236:	88db      	ldrh	r3, [r3, #6]
 800f238:	2b00      	cmp	r3, #0
 800f23a:	d104      	bne.n	800f246 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800f23c:	7bbb      	ldrb	r3, [r7, #14]
 800f23e:	4619      	mov	r1, r3
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f006 fa11 	bl	8015668 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800f246:	6878      	ldr	r0, [r7, #4]
 800f248:	f000 fd58 	bl	800fcfc <USBD_CtlSendStatus>

              break;
 800f24c:	e004      	b.n	800f258 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800f24e:	6839      	ldr	r1, [r7, #0]
 800f250:	6878      	ldr	r0, [r7, #4]
 800f252:	f000 fc88 	bl	800fb66 <USBD_CtlError>
              break;
 800f256:	bf00      	nop
          }
          break;
 800f258:	e107      	b.n	800f46a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f260:	b2db      	uxtb	r3, r3
 800f262:	2b02      	cmp	r3, #2
 800f264:	d002      	beq.n	800f26c <USBD_StdEPReq+0x124>
 800f266:	2b03      	cmp	r3, #3
 800f268:	d016      	beq.n	800f298 <USBD_StdEPReq+0x150>
 800f26a:	e04b      	b.n	800f304 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f26c:	7bbb      	ldrb	r3, [r7, #14]
 800f26e:	2b00      	cmp	r3, #0
 800f270:	d00d      	beq.n	800f28e <USBD_StdEPReq+0x146>
 800f272:	7bbb      	ldrb	r3, [r7, #14]
 800f274:	2b80      	cmp	r3, #128	; 0x80
 800f276:	d00a      	beq.n	800f28e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800f278:	7bbb      	ldrb	r3, [r7, #14]
 800f27a:	4619      	mov	r1, r3
 800f27c:	6878      	ldr	r0, [r7, #4]
 800f27e:	f006 f9f3 	bl	8015668 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800f282:	2180      	movs	r1, #128	; 0x80
 800f284:	6878      	ldr	r0, [r7, #4]
 800f286:	f006 f9ef 	bl	8015668 <USBD_LL_StallEP>
 800f28a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800f28c:	e040      	b.n	800f310 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800f28e:	6839      	ldr	r1, [r7, #0]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f000 fc68 	bl	800fb66 <USBD_CtlError>
              break;
 800f296:	e03b      	b.n	800f310 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	885b      	ldrh	r3, [r3, #2]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d136      	bne.n	800f30e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800f2a0:	7bbb      	ldrb	r3, [r7, #14]
 800f2a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	d004      	beq.n	800f2b4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800f2aa:	7bbb      	ldrb	r3, [r7, #14]
 800f2ac:	4619      	mov	r1, r3
 800f2ae:	6878      	ldr	r0, [r7, #4]
 800f2b0:	f006 f9f9 	bl	80156a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 fd21 	bl	800fcfc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800f2ba:	7bbb      	ldrb	r3, [r7, #14]
 800f2bc:	4619      	mov	r1, r3
 800f2be:	6878      	ldr	r0, [r7, #4]
 800f2c0:	f7ff fde2 	bl	800ee88 <USBD_CoreFindEP>
 800f2c4:	4603      	mov	r3, r0
 800f2c6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800f2c8:	7b7b      	ldrb	r3, [r7, #13]
 800f2ca:	2bff      	cmp	r3, #255	; 0xff
 800f2cc:	d01f      	beq.n	800f30e <USBD_StdEPReq+0x1c6>
 800f2ce:	7b7b      	ldrb	r3, [r7, #13]
 800f2d0:	2b00      	cmp	r3, #0
 800f2d2:	d11c      	bne.n	800f30e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800f2d4:	7b7a      	ldrb	r2, [r7, #13]
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800f2dc:	7b7a      	ldrb	r2, [r7, #13]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	32ae      	adds	r2, #174	; 0xae
 800f2e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2e6:	689b      	ldr	r3, [r3, #8]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d010      	beq.n	800f30e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800f2ec:	7b7a      	ldrb	r2, [r7, #13]
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	32ae      	adds	r2, #174	; 0xae
 800f2f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f2f6:	689b      	ldr	r3, [r3, #8]
 800f2f8:	6839      	ldr	r1, [r7, #0]
 800f2fa:	6878      	ldr	r0, [r7, #4]
 800f2fc:	4798      	blx	r3
 800f2fe:	4603      	mov	r3, r0
 800f300:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800f302:	e004      	b.n	800f30e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800f304:	6839      	ldr	r1, [r7, #0]
 800f306:	6878      	ldr	r0, [r7, #4]
 800f308:	f000 fc2d 	bl	800fb66 <USBD_CtlError>
              break;
 800f30c:	e000      	b.n	800f310 <USBD_StdEPReq+0x1c8>
              break;
 800f30e:	bf00      	nop
          }
          break;
 800f310:	e0ab      	b.n	800f46a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f318:	b2db      	uxtb	r3, r3
 800f31a:	2b02      	cmp	r3, #2
 800f31c:	d002      	beq.n	800f324 <USBD_StdEPReq+0x1dc>
 800f31e:	2b03      	cmp	r3, #3
 800f320:	d032      	beq.n	800f388 <USBD_StdEPReq+0x240>
 800f322:	e097      	b.n	800f454 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800f324:	7bbb      	ldrb	r3, [r7, #14]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d007      	beq.n	800f33a <USBD_StdEPReq+0x1f2>
 800f32a:	7bbb      	ldrb	r3, [r7, #14]
 800f32c:	2b80      	cmp	r3, #128	; 0x80
 800f32e:	d004      	beq.n	800f33a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800f330:	6839      	ldr	r1, [r7, #0]
 800f332:	6878      	ldr	r0, [r7, #4]
 800f334:	f000 fc17 	bl	800fb66 <USBD_CtlError>
                break;
 800f338:	e091      	b.n	800f45e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f33a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f33e:	2b00      	cmp	r3, #0
 800f340:	da0b      	bge.n	800f35a <USBD_StdEPReq+0x212>
 800f342:	7bbb      	ldrb	r3, [r7, #14]
 800f344:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f348:	4613      	mov	r3, r2
 800f34a:	009b      	lsls	r3, r3, #2
 800f34c:	4413      	add	r3, r2
 800f34e:	009b      	lsls	r3, r3, #2
 800f350:	3310      	adds	r3, #16
 800f352:	687a      	ldr	r2, [r7, #4]
 800f354:	4413      	add	r3, r2
 800f356:	3304      	adds	r3, #4
 800f358:	e00b      	b.n	800f372 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f35a:	7bbb      	ldrb	r3, [r7, #14]
 800f35c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f360:	4613      	mov	r3, r2
 800f362:	009b      	lsls	r3, r3, #2
 800f364:	4413      	add	r3, r2
 800f366:	009b      	lsls	r3, r3, #2
 800f368:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f36c:	687a      	ldr	r2, [r7, #4]
 800f36e:	4413      	add	r3, r2
 800f370:	3304      	adds	r3, #4
 800f372:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800f374:	68bb      	ldr	r3, [r7, #8]
 800f376:	2200      	movs	r2, #0
 800f378:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	2202      	movs	r2, #2
 800f37e:	4619      	mov	r1, r3
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 fc61 	bl	800fc48 <USBD_CtlSendData>
              break;
 800f386:	e06a      	b.n	800f45e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800f388:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f38c:	2b00      	cmp	r3, #0
 800f38e:	da11      	bge.n	800f3b4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800f390:	7bbb      	ldrb	r3, [r7, #14]
 800f392:	f003 020f 	and.w	r2, r3, #15
 800f396:	6879      	ldr	r1, [r7, #4]
 800f398:	4613      	mov	r3, r2
 800f39a:	009b      	lsls	r3, r3, #2
 800f39c:	4413      	add	r3, r2
 800f39e:	009b      	lsls	r3, r3, #2
 800f3a0:	440b      	add	r3, r1
 800f3a2:	3324      	adds	r3, #36	; 0x24
 800f3a4:	881b      	ldrh	r3, [r3, #0]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	d117      	bne.n	800f3da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f3aa:	6839      	ldr	r1, [r7, #0]
 800f3ac:	6878      	ldr	r0, [r7, #4]
 800f3ae:	f000 fbda 	bl	800fb66 <USBD_CtlError>
                  break;
 800f3b2:	e054      	b.n	800f45e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800f3b4:	7bbb      	ldrb	r3, [r7, #14]
 800f3b6:	f003 020f 	and.w	r2, r3, #15
 800f3ba:	6879      	ldr	r1, [r7, #4]
 800f3bc:	4613      	mov	r3, r2
 800f3be:	009b      	lsls	r3, r3, #2
 800f3c0:	4413      	add	r3, r2
 800f3c2:	009b      	lsls	r3, r3, #2
 800f3c4:	440b      	add	r3, r1
 800f3c6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800f3ca:	881b      	ldrh	r3, [r3, #0]
 800f3cc:	2b00      	cmp	r3, #0
 800f3ce:	d104      	bne.n	800f3da <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800f3d0:	6839      	ldr	r1, [r7, #0]
 800f3d2:	6878      	ldr	r0, [r7, #4]
 800f3d4:	f000 fbc7 	bl	800fb66 <USBD_CtlError>
                  break;
 800f3d8:	e041      	b.n	800f45e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f3da:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	da0b      	bge.n	800f3fa <USBD_StdEPReq+0x2b2>
 800f3e2:	7bbb      	ldrb	r3, [r7, #14]
 800f3e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f3e8:	4613      	mov	r3, r2
 800f3ea:	009b      	lsls	r3, r3, #2
 800f3ec:	4413      	add	r3, r2
 800f3ee:	009b      	lsls	r3, r3, #2
 800f3f0:	3310      	adds	r3, #16
 800f3f2:	687a      	ldr	r2, [r7, #4]
 800f3f4:	4413      	add	r3, r2
 800f3f6:	3304      	adds	r3, #4
 800f3f8:	e00b      	b.n	800f412 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800f3fa:	7bbb      	ldrb	r3, [r7, #14]
 800f3fc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800f400:	4613      	mov	r3, r2
 800f402:	009b      	lsls	r3, r3, #2
 800f404:	4413      	add	r3, r2
 800f406:	009b      	lsls	r3, r3, #2
 800f408:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	4413      	add	r3, r2
 800f410:	3304      	adds	r3, #4
 800f412:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800f414:	7bbb      	ldrb	r3, [r7, #14]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d002      	beq.n	800f420 <USBD_StdEPReq+0x2d8>
 800f41a:	7bbb      	ldrb	r3, [r7, #14]
 800f41c:	2b80      	cmp	r3, #128	; 0x80
 800f41e:	d103      	bne.n	800f428 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800f420:	68bb      	ldr	r3, [r7, #8]
 800f422:	2200      	movs	r2, #0
 800f424:	601a      	str	r2, [r3, #0]
 800f426:	e00e      	b.n	800f446 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800f428:	7bbb      	ldrb	r3, [r7, #14]
 800f42a:	4619      	mov	r1, r3
 800f42c:	6878      	ldr	r0, [r7, #4]
 800f42e:	f006 f959 	bl	80156e4 <USBD_LL_IsStallEP>
 800f432:	4603      	mov	r3, r0
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800f438:	68bb      	ldr	r3, [r7, #8]
 800f43a:	2201      	movs	r2, #1
 800f43c:	601a      	str	r2, [r3, #0]
 800f43e:	e002      	b.n	800f446 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800f440:	68bb      	ldr	r3, [r7, #8]
 800f442:	2200      	movs	r2, #0
 800f444:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800f446:	68bb      	ldr	r3, [r7, #8]
 800f448:	2202      	movs	r2, #2
 800f44a:	4619      	mov	r1, r3
 800f44c:	6878      	ldr	r0, [r7, #4]
 800f44e:	f000 fbfb 	bl	800fc48 <USBD_CtlSendData>
              break;
 800f452:	e004      	b.n	800f45e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800f454:	6839      	ldr	r1, [r7, #0]
 800f456:	6878      	ldr	r0, [r7, #4]
 800f458:	f000 fb85 	bl	800fb66 <USBD_CtlError>
              break;
 800f45c:	bf00      	nop
          }
          break;
 800f45e:	e004      	b.n	800f46a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800f460:	6839      	ldr	r1, [r7, #0]
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f000 fb7f 	bl	800fb66 <USBD_CtlError>
          break;
 800f468:	bf00      	nop
      }
      break;
 800f46a:	e005      	b.n	800f478 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800f46c:	6839      	ldr	r1, [r7, #0]
 800f46e:	6878      	ldr	r0, [r7, #4]
 800f470:	f000 fb79 	bl	800fb66 <USBD_CtlError>
      break;
 800f474:	e000      	b.n	800f478 <USBD_StdEPReq+0x330>
      break;
 800f476:	bf00      	nop
  }

  return ret;
 800f478:	7bfb      	ldrb	r3, [r7, #15]
}
 800f47a:	4618      	mov	r0, r3
 800f47c:	3710      	adds	r7, #16
 800f47e:	46bd      	mov	sp, r7
 800f480:	bd80      	pop	{r7, pc}
	...

0800f484 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f484:	b580      	push	{r7, lr}
 800f486:	b084      	sub	sp, #16
 800f488:	af00      	add	r7, sp, #0
 800f48a:	6078      	str	r0, [r7, #4]
 800f48c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800f48e:	2300      	movs	r3, #0
 800f490:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800f492:	2300      	movs	r3, #0
 800f494:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800f496:	2300      	movs	r3, #0
 800f498:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	885b      	ldrh	r3, [r3, #2]
 800f49e:	0a1b      	lsrs	r3, r3, #8
 800f4a0:	b29b      	uxth	r3, r3
 800f4a2:	3b01      	subs	r3, #1
 800f4a4:	2b0e      	cmp	r3, #14
 800f4a6:	f200 8152 	bhi.w	800f74e <USBD_GetDescriptor+0x2ca>
 800f4aa:	a201      	add	r2, pc, #4	; (adr r2, 800f4b0 <USBD_GetDescriptor+0x2c>)
 800f4ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4b0:	0800f521 	.word	0x0800f521
 800f4b4:	0800f539 	.word	0x0800f539
 800f4b8:	0800f579 	.word	0x0800f579
 800f4bc:	0800f74f 	.word	0x0800f74f
 800f4c0:	0800f74f 	.word	0x0800f74f
 800f4c4:	0800f6ef 	.word	0x0800f6ef
 800f4c8:	0800f71b 	.word	0x0800f71b
 800f4cc:	0800f74f 	.word	0x0800f74f
 800f4d0:	0800f74f 	.word	0x0800f74f
 800f4d4:	0800f74f 	.word	0x0800f74f
 800f4d8:	0800f74f 	.word	0x0800f74f
 800f4dc:	0800f74f 	.word	0x0800f74f
 800f4e0:	0800f74f 	.word	0x0800f74f
 800f4e4:	0800f74f 	.word	0x0800f74f
 800f4e8:	0800f4ed 	.word	0x0800f4ed
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4f2:	69db      	ldr	r3, [r3, #28]
 800f4f4:	2b00      	cmp	r3, #0
 800f4f6:	d00b      	beq.n	800f510 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f4fe:	69db      	ldr	r3, [r3, #28]
 800f500:	687a      	ldr	r2, [r7, #4]
 800f502:	7c12      	ldrb	r2, [r2, #16]
 800f504:	f107 0108 	add.w	r1, r7, #8
 800f508:	4610      	mov	r0, r2
 800f50a:	4798      	blx	r3
 800f50c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f50e:	e126      	b.n	800f75e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f510:	6839      	ldr	r1, [r7, #0]
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 fb27 	bl	800fb66 <USBD_CtlError>
        err++;
 800f518:	7afb      	ldrb	r3, [r7, #11]
 800f51a:	3301      	adds	r3, #1
 800f51c:	72fb      	strb	r3, [r7, #11]
      break;
 800f51e:	e11e      	b.n	800f75e <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	687a      	ldr	r2, [r7, #4]
 800f52a:	7c12      	ldrb	r2, [r2, #16]
 800f52c:	f107 0108 	add.w	r1, r7, #8
 800f530:	4610      	mov	r0, r2
 800f532:	4798      	blx	r3
 800f534:	60f8      	str	r0, [r7, #12]
      break;
 800f536:	e112      	b.n	800f75e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	7c1b      	ldrb	r3, [r3, #16]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d10d      	bne.n	800f55c <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f548:	f107 0208 	add.w	r2, r7, #8
 800f54c:	4610      	mov	r0, r2
 800f54e:	4798      	blx	r3
 800f550:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f552:	68fb      	ldr	r3, [r7, #12]
 800f554:	3301      	adds	r3, #1
 800f556:	2202      	movs	r2, #2
 800f558:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800f55a:	e100      	b.n	800f75e <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f564:	f107 0208 	add.w	r2, r7, #8
 800f568:	4610      	mov	r0, r2
 800f56a:	4798      	blx	r3
 800f56c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	3301      	adds	r3, #1
 800f572:	2202      	movs	r2, #2
 800f574:	701a      	strb	r2, [r3, #0]
      break;
 800f576:	e0f2      	b.n	800f75e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800f578:	683b      	ldr	r3, [r7, #0]
 800f57a:	885b      	ldrh	r3, [r3, #2]
 800f57c:	b2db      	uxtb	r3, r3
 800f57e:	2b05      	cmp	r3, #5
 800f580:	f200 80ac 	bhi.w	800f6dc <USBD_GetDescriptor+0x258>
 800f584:	a201      	add	r2, pc, #4	; (adr r2, 800f58c <USBD_GetDescriptor+0x108>)
 800f586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f58a:	bf00      	nop
 800f58c:	0800f5a5 	.word	0x0800f5a5
 800f590:	0800f5d9 	.word	0x0800f5d9
 800f594:	0800f60d 	.word	0x0800f60d
 800f598:	0800f641 	.word	0x0800f641
 800f59c:	0800f675 	.word	0x0800f675
 800f5a0:	0800f6a9 	.word	0x0800f6a9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5aa:	685b      	ldr	r3, [r3, #4]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d00b      	beq.n	800f5c8 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5b6:	685b      	ldr	r3, [r3, #4]
 800f5b8:	687a      	ldr	r2, [r7, #4]
 800f5ba:	7c12      	ldrb	r2, [r2, #16]
 800f5bc:	f107 0108 	add.w	r1, r7, #8
 800f5c0:	4610      	mov	r0, r2
 800f5c2:	4798      	blx	r3
 800f5c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5c6:	e091      	b.n	800f6ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5c8:	6839      	ldr	r1, [r7, #0]
 800f5ca:	6878      	ldr	r0, [r7, #4]
 800f5cc:	f000 facb 	bl	800fb66 <USBD_CtlError>
            err++;
 800f5d0:	7afb      	ldrb	r3, [r7, #11]
 800f5d2:	3301      	adds	r3, #1
 800f5d4:	72fb      	strb	r3, [r7, #11]
          break;
 800f5d6:	e089      	b.n	800f6ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800f5d8:	687b      	ldr	r3, [r7, #4]
 800f5da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5de:	689b      	ldr	r3, [r3, #8]
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d00b      	beq.n	800f5fc <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f5ea:	689b      	ldr	r3, [r3, #8]
 800f5ec:	687a      	ldr	r2, [r7, #4]
 800f5ee:	7c12      	ldrb	r2, [r2, #16]
 800f5f0:	f107 0108 	add.w	r1, r7, #8
 800f5f4:	4610      	mov	r0, r2
 800f5f6:	4798      	blx	r3
 800f5f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f5fa:	e077      	b.n	800f6ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f5fc:	6839      	ldr	r1, [r7, #0]
 800f5fe:	6878      	ldr	r0, [r7, #4]
 800f600:	f000 fab1 	bl	800fb66 <USBD_CtlError>
            err++;
 800f604:	7afb      	ldrb	r3, [r7, #11]
 800f606:	3301      	adds	r3, #1
 800f608:	72fb      	strb	r3, [r7, #11]
          break;
 800f60a:	e06f      	b.n	800f6ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f612:	68db      	ldr	r3, [r3, #12]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d00b      	beq.n	800f630 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f61e:	68db      	ldr	r3, [r3, #12]
 800f620:	687a      	ldr	r2, [r7, #4]
 800f622:	7c12      	ldrb	r2, [r2, #16]
 800f624:	f107 0108 	add.w	r1, r7, #8
 800f628:	4610      	mov	r0, r2
 800f62a:	4798      	blx	r3
 800f62c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f62e:	e05d      	b.n	800f6ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f630:	6839      	ldr	r1, [r7, #0]
 800f632:	6878      	ldr	r0, [r7, #4]
 800f634:	f000 fa97 	bl	800fb66 <USBD_CtlError>
            err++;
 800f638:	7afb      	ldrb	r3, [r7, #11]
 800f63a:	3301      	adds	r3, #1
 800f63c:	72fb      	strb	r3, [r7, #11]
          break;
 800f63e:	e055      	b.n	800f6ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f646:	691b      	ldr	r3, [r3, #16]
 800f648:	2b00      	cmp	r3, #0
 800f64a:	d00b      	beq.n	800f664 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800f64c:	687b      	ldr	r3, [r7, #4]
 800f64e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f652:	691b      	ldr	r3, [r3, #16]
 800f654:	687a      	ldr	r2, [r7, #4]
 800f656:	7c12      	ldrb	r2, [r2, #16]
 800f658:	f107 0108 	add.w	r1, r7, #8
 800f65c:	4610      	mov	r0, r2
 800f65e:	4798      	blx	r3
 800f660:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f662:	e043      	b.n	800f6ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f664:	6839      	ldr	r1, [r7, #0]
 800f666:	6878      	ldr	r0, [r7, #4]
 800f668:	f000 fa7d 	bl	800fb66 <USBD_CtlError>
            err++;
 800f66c:	7afb      	ldrb	r3, [r7, #11]
 800f66e:	3301      	adds	r3, #1
 800f670:	72fb      	strb	r3, [r7, #11]
          break;
 800f672:	e03b      	b.n	800f6ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f67a:	695b      	ldr	r3, [r3, #20]
 800f67c:	2b00      	cmp	r3, #0
 800f67e:	d00b      	beq.n	800f698 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f686:	695b      	ldr	r3, [r3, #20]
 800f688:	687a      	ldr	r2, [r7, #4]
 800f68a:	7c12      	ldrb	r2, [r2, #16]
 800f68c:	f107 0108 	add.w	r1, r7, #8
 800f690:	4610      	mov	r0, r2
 800f692:	4798      	blx	r3
 800f694:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f696:	e029      	b.n	800f6ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f698:	6839      	ldr	r1, [r7, #0]
 800f69a:	6878      	ldr	r0, [r7, #4]
 800f69c:	f000 fa63 	bl	800fb66 <USBD_CtlError>
            err++;
 800f6a0:	7afb      	ldrb	r3, [r7, #11]
 800f6a2:	3301      	adds	r3, #1
 800f6a4:	72fb      	strb	r3, [r7, #11]
          break;
 800f6a6:	e021      	b.n	800f6ec <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800f6a8:	687b      	ldr	r3, [r7, #4]
 800f6aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ae:	699b      	ldr	r3, [r3, #24]
 800f6b0:	2b00      	cmp	r3, #0
 800f6b2:	d00b      	beq.n	800f6cc <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800f6ba:	699b      	ldr	r3, [r3, #24]
 800f6bc:	687a      	ldr	r2, [r7, #4]
 800f6be:	7c12      	ldrb	r2, [r2, #16]
 800f6c0:	f107 0108 	add.w	r1, r7, #8
 800f6c4:	4610      	mov	r0, r2
 800f6c6:	4798      	blx	r3
 800f6c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800f6ca:	e00f      	b.n	800f6ec <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800f6cc:	6839      	ldr	r1, [r7, #0]
 800f6ce:	6878      	ldr	r0, [r7, #4]
 800f6d0:	f000 fa49 	bl	800fb66 <USBD_CtlError>
            err++;
 800f6d4:	7afb      	ldrb	r3, [r7, #11]
 800f6d6:	3301      	adds	r3, #1
 800f6d8:	72fb      	strb	r3, [r7, #11]
          break;
 800f6da:	e007      	b.n	800f6ec <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800f6dc:	6839      	ldr	r1, [r7, #0]
 800f6de:	6878      	ldr	r0, [r7, #4]
 800f6e0:	f000 fa41 	bl	800fb66 <USBD_CtlError>
          err++;
 800f6e4:	7afb      	ldrb	r3, [r7, #11]
 800f6e6:	3301      	adds	r3, #1
 800f6e8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800f6ea:	bf00      	nop
      }
      break;
 800f6ec:	e037      	b.n	800f75e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	7c1b      	ldrb	r3, [r3, #16]
 800f6f2:	2b00      	cmp	r3, #0
 800f6f4:	d109      	bne.n	800f70a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f6fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800f6fe:	f107 0208 	add.w	r2, r7, #8
 800f702:	4610      	mov	r0, r2
 800f704:	4798      	blx	r3
 800f706:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f708:	e029      	b.n	800f75e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f70a:	6839      	ldr	r1, [r7, #0]
 800f70c:	6878      	ldr	r0, [r7, #4]
 800f70e:	f000 fa2a 	bl	800fb66 <USBD_CtlError>
        err++;
 800f712:	7afb      	ldrb	r3, [r7, #11]
 800f714:	3301      	adds	r3, #1
 800f716:	72fb      	strb	r3, [r7, #11]
      break;
 800f718:	e021      	b.n	800f75e <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	7c1b      	ldrb	r3, [r3, #16]
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d10d      	bne.n	800f73e <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800f728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f72a:	f107 0208 	add.w	r2, r7, #8
 800f72e:	4610      	mov	r0, r2
 800f730:	4798      	blx	r3
 800f732:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	3301      	adds	r3, #1
 800f738:	2207      	movs	r2, #7
 800f73a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800f73c:	e00f      	b.n	800f75e <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800f73e:	6839      	ldr	r1, [r7, #0]
 800f740:	6878      	ldr	r0, [r7, #4]
 800f742:	f000 fa10 	bl	800fb66 <USBD_CtlError>
        err++;
 800f746:	7afb      	ldrb	r3, [r7, #11]
 800f748:	3301      	adds	r3, #1
 800f74a:	72fb      	strb	r3, [r7, #11]
      break;
 800f74c:	e007      	b.n	800f75e <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800f74e:	6839      	ldr	r1, [r7, #0]
 800f750:	6878      	ldr	r0, [r7, #4]
 800f752:	f000 fa08 	bl	800fb66 <USBD_CtlError>
      err++;
 800f756:	7afb      	ldrb	r3, [r7, #11]
 800f758:	3301      	adds	r3, #1
 800f75a:	72fb      	strb	r3, [r7, #11]
      break;
 800f75c:	bf00      	nop
  }

  if (err != 0U)
 800f75e:	7afb      	ldrb	r3, [r7, #11]
 800f760:	2b00      	cmp	r3, #0
 800f762:	d11e      	bne.n	800f7a2 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	88db      	ldrh	r3, [r3, #6]
 800f768:	2b00      	cmp	r3, #0
 800f76a:	d016      	beq.n	800f79a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800f76c:	893b      	ldrh	r3, [r7, #8]
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d00e      	beq.n	800f790 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800f772:	683b      	ldr	r3, [r7, #0]
 800f774:	88da      	ldrh	r2, [r3, #6]
 800f776:	893b      	ldrh	r3, [r7, #8]
 800f778:	4293      	cmp	r3, r2
 800f77a:	bf28      	it	cs
 800f77c:	4613      	movcs	r3, r2
 800f77e:	b29b      	uxth	r3, r3
 800f780:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800f782:	893b      	ldrh	r3, [r7, #8]
 800f784:	461a      	mov	r2, r3
 800f786:	68f9      	ldr	r1, [r7, #12]
 800f788:	6878      	ldr	r0, [r7, #4]
 800f78a:	f000 fa5d 	bl	800fc48 <USBD_CtlSendData>
 800f78e:	e009      	b.n	800f7a4 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800f790:	6839      	ldr	r1, [r7, #0]
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f000 f9e7 	bl	800fb66 <USBD_CtlError>
 800f798:	e004      	b.n	800f7a4 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f000 faae 	bl	800fcfc <USBD_CtlSendStatus>
 800f7a0:	e000      	b.n	800f7a4 <USBD_GetDescriptor+0x320>
    return;
 800f7a2:	bf00      	nop
  }
}
 800f7a4:	3710      	adds	r7, #16
 800f7a6:	46bd      	mov	sp, r7
 800f7a8:	bd80      	pop	{r7, pc}
 800f7aa:	bf00      	nop

0800f7ac <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f7ac:	b580      	push	{r7, lr}
 800f7ae:	b084      	sub	sp, #16
 800f7b0:	af00      	add	r7, sp, #0
 800f7b2:	6078      	str	r0, [r7, #4]
 800f7b4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800f7b6:	683b      	ldr	r3, [r7, #0]
 800f7b8:	889b      	ldrh	r3, [r3, #4]
 800f7ba:	2b00      	cmp	r3, #0
 800f7bc:	d131      	bne.n	800f822 <USBD_SetAddress+0x76>
 800f7be:	683b      	ldr	r3, [r7, #0]
 800f7c0:	88db      	ldrh	r3, [r3, #6]
 800f7c2:	2b00      	cmp	r3, #0
 800f7c4:	d12d      	bne.n	800f822 <USBD_SetAddress+0x76>
 800f7c6:	683b      	ldr	r3, [r7, #0]
 800f7c8:	885b      	ldrh	r3, [r3, #2]
 800f7ca:	2b7f      	cmp	r3, #127	; 0x7f
 800f7cc:	d829      	bhi.n	800f822 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800f7ce:	683b      	ldr	r3, [r7, #0]
 800f7d0:	885b      	ldrh	r3, [r3, #2]
 800f7d2:	b2db      	uxtb	r3, r3
 800f7d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800f7d8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7da:	687b      	ldr	r3, [r7, #4]
 800f7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f7e0:	b2db      	uxtb	r3, r3
 800f7e2:	2b03      	cmp	r3, #3
 800f7e4:	d104      	bne.n	800f7f0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800f7e6:	6839      	ldr	r1, [r7, #0]
 800f7e8:	6878      	ldr	r0, [r7, #4]
 800f7ea:	f000 f9bc 	bl	800fb66 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f7ee:	e01d      	b.n	800f82c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	7bfa      	ldrb	r2, [r7, #15]
 800f7f4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800f7f8:	7bfb      	ldrb	r3, [r7, #15]
 800f7fa:	4619      	mov	r1, r3
 800f7fc:	6878      	ldr	r0, [r7, #4]
 800f7fe:	f005 ff9d 	bl	801573c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f000 fa7a 	bl	800fcfc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800f808:	7bfb      	ldrb	r3, [r7, #15]
 800f80a:	2b00      	cmp	r3, #0
 800f80c:	d004      	beq.n	800f818 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	2202      	movs	r2, #2
 800f812:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f816:	e009      	b.n	800f82c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	2201      	movs	r2, #1
 800f81c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800f820:	e004      	b.n	800f82c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800f822:	6839      	ldr	r1, [r7, #0]
 800f824:	6878      	ldr	r0, [r7, #4]
 800f826:	f000 f99e 	bl	800fb66 <USBD_CtlError>
  }
}
 800f82a:	bf00      	nop
 800f82c:	bf00      	nop
 800f82e:	3710      	adds	r7, #16
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}

0800f834 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f834:	b580      	push	{r7, lr}
 800f836:	b084      	sub	sp, #16
 800f838:	af00      	add	r7, sp, #0
 800f83a:	6078      	str	r0, [r7, #4]
 800f83c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800f83e:	2300      	movs	r3, #0
 800f840:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800f842:	683b      	ldr	r3, [r7, #0]
 800f844:	885b      	ldrh	r3, [r3, #2]
 800f846:	b2da      	uxtb	r2, r3
 800f848:	4b4e      	ldr	r3, [pc, #312]	; (800f984 <USBD_SetConfig+0x150>)
 800f84a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800f84c:	4b4d      	ldr	r3, [pc, #308]	; (800f984 <USBD_SetConfig+0x150>)
 800f84e:	781b      	ldrb	r3, [r3, #0]
 800f850:	2b01      	cmp	r3, #1
 800f852:	d905      	bls.n	800f860 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800f854:	6839      	ldr	r1, [r7, #0]
 800f856:	6878      	ldr	r0, [r7, #4]
 800f858:	f000 f985 	bl	800fb66 <USBD_CtlError>
    return USBD_FAIL;
 800f85c:	2303      	movs	r3, #3
 800f85e:	e08c      	b.n	800f97a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f866:	b2db      	uxtb	r3, r3
 800f868:	2b02      	cmp	r3, #2
 800f86a:	d002      	beq.n	800f872 <USBD_SetConfig+0x3e>
 800f86c:	2b03      	cmp	r3, #3
 800f86e:	d029      	beq.n	800f8c4 <USBD_SetConfig+0x90>
 800f870:	e075      	b.n	800f95e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800f872:	4b44      	ldr	r3, [pc, #272]	; (800f984 <USBD_SetConfig+0x150>)
 800f874:	781b      	ldrb	r3, [r3, #0]
 800f876:	2b00      	cmp	r3, #0
 800f878:	d020      	beq.n	800f8bc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800f87a:	4b42      	ldr	r3, [pc, #264]	; (800f984 <USBD_SetConfig+0x150>)
 800f87c:	781b      	ldrb	r3, [r3, #0]
 800f87e:	461a      	mov	r2, r3
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f884:	4b3f      	ldr	r3, [pc, #252]	; (800f984 <USBD_SetConfig+0x150>)
 800f886:	781b      	ldrb	r3, [r3, #0]
 800f888:	4619      	mov	r1, r3
 800f88a:	6878      	ldr	r0, [r7, #4]
 800f88c:	f7fe ffbd 	bl	800e80a <USBD_SetClassConfig>
 800f890:	4603      	mov	r3, r0
 800f892:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800f894:	7bfb      	ldrb	r3, [r7, #15]
 800f896:	2b00      	cmp	r3, #0
 800f898:	d008      	beq.n	800f8ac <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800f89a:	6839      	ldr	r1, [r7, #0]
 800f89c:	6878      	ldr	r0, [r7, #4]
 800f89e:	f000 f962 	bl	800fb66 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8a2:	687b      	ldr	r3, [r7, #4]
 800f8a4:	2202      	movs	r2, #2
 800f8a6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f8aa:	e065      	b.n	800f978 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	f000 fa25 	bl	800fcfc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	2203      	movs	r2, #3
 800f8b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f8ba:	e05d      	b.n	800f978 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f8bc:	6878      	ldr	r0, [r7, #4]
 800f8be:	f000 fa1d 	bl	800fcfc <USBD_CtlSendStatus>
      break;
 800f8c2:	e059      	b.n	800f978 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800f8c4:	4b2f      	ldr	r3, [pc, #188]	; (800f984 <USBD_SetConfig+0x150>)
 800f8c6:	781b      	ldrb	r3, [r3, #0]
 800f8c8:	2b00      	cmp	r3, #0
 800f8ca:	d112      	bne.n	800f8f2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800f8cc:	687b      	ldr	r3, [r7, #4]
 800f8ce:	2202      	movs	r2, #2
 800f8d0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800f8d4:	4b2b      	ldr	r3, [pc, #172]	; (800f984 <USBD_SetConfig+0x150>)
 800f8d6:	781b      	ldrb	r3, [r3, #0]
 800f8d8:	461a      	mov	r2, r3
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f8de:	4b29      	ldr	r3, [pc, #164]	; (800f984 <USBD_SetConfig+0x150>)
 800f8e0:	781b      	ldrb	r3, [r3, #0]
 800f8e2:	4619      	mov	r1, r3
 800f8e4:	6878      	ldr	r0, [r7, #4]
 800f8e6:	f7fe ffac 	bl	800e842 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 fa06 	bl	800fcfc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800f8f0:	e042      	b.n	800f978 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800f8f2:	4b24      	ldr	r3, [pc, #144]	; (800f984 <USBD_SetConfig+0x150>)
 800f8f4:	781b      	ldrb	r3, [r3, #0]
 800f8f6:	461a      	mov	r2, r3
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	685b      	ldr	r3, [r3, #4]
 800f8fc:	429a      	cmp	r2, r3
 800f8fe:	d02a      	beq.n	800f956 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	685b      	ldr	r3, [r3, #4]
 800f904:	b2db      	uxtb	r3, r3
 800f906:	4619      	mov	r1, r3
 800f908:	6878      	ldr	r0, [r7, #4]
 800f90a:	f7fe ff9a 	bl	800e842 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800f90e:	4b1d      	ldr	r3, [pc, #116]	; (800f984 <USBD_SetConfig+0x150>)
 800f910:	781b      	ldrb	r3, [r3, #0]
 800f912:	461a      	mov	r2, r3
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800f918:	4b1a      	ldr	r3, [pc, #104]	; (800f984 <USBD_SetConfig+0x150>)
 800f91a:	781b      	ldrb	r3, [r3, #0]
 800f91c:	4619      	mov	r1, r3
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7fe ff73 	bl	800e80a <USBD_SetClassConfig>
 800f924:	4603      	mov	r3, r0
 800f926:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800f928:	7bfb      	ldrb	r3, [r7, #15]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	d00f      	beq.n	800f94e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800f92e:	6839      	ldr	r1, [r7, #0]
 800f930:	6878      	ldr	r0, [r7, #4]
 800f932:	f000 f918 	bl	800fb66 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800f936:	687b      	ldr	r3, [r7, #4]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	b2db      	uxtb	r3, r3
 800f93c:	4619      	mov	r1, r3
 800f93e:	6878      	ldr	r0, [r7, #4]
 800f940:	f7fe ff7f 	bl	800e842 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	2202      	movs	r2, #2
 800f948:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800f94c:	e014      	b.n	800f978 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800f94e:	6878      	ldr	r0, [r7, #4]
 800f950:	f000 f9d4 	bl	800fcfc <USBD_CtlSendStatus>
      break;
 800f954:	e010      	b.n	800f978 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800f956:	6878      	ldr	r0, [r7, #4]
 800f958:	f000 f9d0 	bl	800fcfc <USBD_CtlSendStatus>
      break;
 800f95c:	e00c      	b.n	800f978 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800f95e:	6839      	ldr	r1, [r7, #0]
 800f960:	6878      	ldr	r0, [r7, #4]
 800f962:	f000 f900 	bl	800fb66 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800f966:	4b07      	ldr	r3, [pc, #28]	; (800f984 <USBD_SetConfig+0x150>)
 800f968:	781b      	ldrb	r3, [r3, #0]
 800f96a:	4619      	mov	r1, r3
 800f96c:	6878      	ldr	r0, [r7, #4]
 800f96e:	f7fe ff68 	bl	800e842 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800f972:	2303      	movs	r3, #3
 800f974:	73fb      	strb	r3, [r7, #15]
      break;
 800f976:	bf00      	nop
  }

  return ret;
 800f978:	7bfb      	ldrb	r3, [r7, #15]
}
 800f97a:	4618      	mov	r0, r3
 800f97c:	3710      	adds	r7, #16
 800f97e:	46bd      	mov	sp, r7
 800f980:	bd80      	pop	{r7, pc}
 800f982:	bf00      	nop
 800f984:	20002b60 	.word	0x20002b60

0800f988 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f988:	b580      	push	{r7, lr}
 800f98a:	b082      	sub	sp, #8
 800f98c:	af00      	add	r7, sp, #0
 800f98e:	6078      	str	r0, [r7, #4]
 800f990:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800f992:	683b      	ldr	r3, [r7, #0]
 800f994:	88db      	ldrh	r3, [r3, #6]
 800f996:	2b01      	cmp	r3, #1
 800f998:	d004      	beq.n	800f9a4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800f99a:	6839      	ldr	r1, [r7, #0]
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f000 f8e2 	bl	800fb66 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800f9a2:	e023      	b.n	800f9ec <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800f9aa:	b2db      	uxtb	r3, r3
 800f9ac:	2b02      	cmp	r3, #2
 800f9ae:	dc02      	bgt.n	800f9b6 <USBD_GetConfig+0x2e>
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	dc03      	bgt.n	800f9bc <USBD_GetConfig+0x34>
 800f9b4:	e015      	b.n	800f9e2 <USBD_GetConfig+0x5a>
 800f9b6:	2b03      	cmp	r3, #3
 800f9b8:	d00b      	beq.n	800f9d2 <USBD_GetConfig+0x4a>
 800f9ba:	e012      	b.n	800f9e2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	2200      	movs	r2, #0
 800f9c0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	3308      	adds	r3, #8
 800f9c6:	2201      	movs	r2, #1
 800f9c8:	4619      	mov	r1, r3
 800f9ca:	6878      	ldr	r0, [r7, #4]
 800f9cc:	f000 f93c 	bl	800fc48 <USBD_CtlSendData>
        break;
 800f9d0:	e00c      	b.n	800f9ec <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	3304      	adds	r3, #4
 800f9d6:	2201      	movs	r2, #1
 800f9d8:	4619      	mov	r1, r3
 800f9da:	6878      	ldr	r0, [r7, #4]
 800f9dc:	f000 f934 	bl	800fc48 <USBD_CtlSendData>
        break;
 800f9e0:	e004      	b.n	800f9ec <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800f9e2:	6839      	ldr	r1, [r7, #0]
 800f9e4:	6878      	ldr	r0, [r7, #4]
 800f9e6:	f000 f8be 	bl	800fb66 <USBD_CtlError>
        break;
 800f9ea:	bf00      	nop
}
 800f9ec:	bf00      	nop
 800f9ee:	3708      	adds	r7, #8
 800f9f0:	46bd      	mov	sp, r7
 800f9f2:	bd80      	pop	{r7, pc}

0800f9f4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800f9f4:	b580      	push	{r7, lr}
 800f9f6:	b082      	sub	sp, #8
 800f9f8:	af00      	add	r7, sp, #0
 800f9fa:	6078      	str	r0, [r7, #4]
 800f9fc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fa04:	b2db      	uxtb	r3, r3
 800fa06:	3b01      	subs	r3, #1
 800fa08:	2b02      	cmp	r3, #2
 800fa0a:	d81e      	bhi.n	800fa4a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800fa0c:	683b      	ldr	r3, [r7, #0]
 800fa0e:	88db      	ldrh	r3, [r3, #6]
 800fa10:	2b02      	cmp	r3, #2
 800fa12:	d004      	beq.n	800fa1e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800fa14:	6839      	ldr	r1, [r7, #0]
 800fa16:	6878      	ldr	r0, [r7, #4]
 800fa18:	f000 f8a5 	bl	800fb66 <USBD_CtlError>
        break;
 800fa1c:	e01a      	b.n	800fa54 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	2201      	movs	r2, #1
 800fa22:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d005      	beq.n	800fa3a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	68db      	ldr	r3, [r3, #12]
 800fa32:	f043 0202 	orr.w	r2, r3, #2
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	330c      	adds	r3, #12
 800fa3e:	2202      	movs	r2, #2
 800fa40:	4619      	mov	r1, r3
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	f000 f900 	bl	800fc48 <USBD_CtlSendData>
      break;
 800fa48:	e004      	b.n	800fa54 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800fa4a:	6839      	ldr	r1, [r7, #0]
 800fa4c:	6878      	ldr	r0, [r7, #4]
 800fa4e:	f000 f88a 	bl	800fb66 <USBD_CtlError>
      break;
 800fa52:	bf00      	nop
  }
}
 800fa54:	bf00      	nop
 800fa56:	3708      	adds	r7, #8
 800fa58:	46bd      	mov	sp, r7
 800fa5a:	bd80      	pop	{r7, pc}

0800fa5c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fa5c:	b580      	push	{r7, lr}
 800fa5e:	b082      	sub	sp, #8
 800fa60:	af00      	add	r7, sp, #0
 800fa62:	6078      	str	r0, [r7, #4]
 800fa64:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fa66:	683b      	ldr	r3, [r7, #0]
 800fa68:	885b      	ldrh	r3, [r3, #2]
 800fa6a:	2b01      	cmp	r3, #1
 800fa6c:	d107      	bne.n	800fa7e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	2201      	movs	r2, #1
 800fa72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800fa76:	6878      	ldr	r0, [r7, #4]
 800fa78:	f000 f940 	bl	800fcfc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800fa7c:	e013      	b.n	800faa6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800fa7e:	683b      	ldr	r3, [r7, #0]
 800fa80:	885b      	ldrh	r3, [r3, #2]
 800fa82:	2b02      	cmp	r3, #2
 800fa84:	d10b      	bne.n	800fa9e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800fa86:	683b      	ldr	r3, [r7, #0]
 800fa88:	889b      	ldrh	r3, [r3, #4]
 800fa8a:	0a1b      	lsrs	r3, r3, #8
 800fa8c:	b29b      	uxth	r3, r3
 800fa8e:	b2da      	uxtb	r2, r3
 800fa90:	687b      	ldr	r3, [r7, #4]
 800fa92:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800fa96:	6878      	ldr	r0, [r7, #4]
 800fa98:	f000 f930 	bl	800fcfc <USBD_CtlSendStatus>
}
 800fa9c:	e003      	b.n	800faa6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	6878      	ldr	r0, [r7, #4]
 800faa2:	f000 f860 	bl	800fb66 <USBD_CtlError>
}
 800faa6:	bf00      	nop
 800faa8:	3708      	adds	r7, #8
 800faaa:	46bd      	mov	sp, r7
 800faac:	bd80      	pop	{r7, pc}

0800faae <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800faae:	b580      	push	{r7, lr}
 800fab0:	b082      	sub	sp, #8
 800fab2:	af00      	add	r7, sp, #0
 800fab4:	6078      	str	r0, [r7, #4]
 800fab6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800fabe:	b2db      	uxtb	r3, r3
 800fac0:	3b01      	subs	r3, #1
 800fac2:	2b02      	cmp	r3, #2
 800fac4:	d80b      	bhi.n	800fade <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800fac6:	683b      	ldr	r3, [r7, #0]
 800fac8:	885b      	ldrh	r3, [r3, #2]
 800faca:	2b01      	cmp	r3, #1
 800facc:	d10c      	bne.n	800fae8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	2200      	movs	r2, #0
 800fad2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 f910 	bl	800fcfc <USBD_CtlSendStatus>
      }
      break;
 800fadc:	e004      	b.n	800fae8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800fade:	6839      	ldr	r1, [r7, #0]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	f000 f840 	bl	800fb66 <USBD_CtlError>
      break;
 800fae6:	e000      	b.n	800faea <USBD_ClrFeature+0x3c>
      break;
 800fae8:	bf00      	nop
  }
}
 800faea:	bf00      	nop
 800faec:	3708      	adds	r7, #8
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b084      	sub	sp, #16
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
 800fafa:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800fafc:	683b      	ldr	r3, [r7, #0]
 800fafe:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	781a      	ldrb	r2, [r3, #0]
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	3301      	adds	r3, #1
 800fb0c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	781a      	ldrb	r2, [r3, #0]
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800fb16:	68fb      	ldr	r3, [r7, #12]
 800fb18:	3301      	adds	r3, #1
 800fb1a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800fb1c:	68f8      	ldr	r0, [r7, #12]
 800fb1e:	f7ff fa17 	bl	800ef50 <SWAPBYTE>
 800fb22:	4603      	mov	r3, r0
 800fb24:	461a      	mov	r2, r3
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800fb2a:	68fb      	ldr	r3, [r7, #12]
 800fb2c:	3301      	adds	r3, #1
 800fb2e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb30:	68fb      	ldr	r3, [r7, #12]
 800fb32:	3301      	adds	r3, #1
 800fb34:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800fb36:	68f8      	ldr	r0, [r7, #12]
 800fb38:	f7ff fa0a 	bl	800ef50 <SWAPBYTE>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	461a      	mov	r2, r3
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800fb44:	68fb      	ldr	r3, [r7, #12]
 800fb46:	3301      	adds	r3, #1
 800fb48:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800fb4a:	68fb      	ldr	r3, [r7, #12]
 800fb4c:	3301      	adds	r3, #1
 800fb4e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800fb50:	68f8      	ldr	r0, [r7, #12]
 800fb52:	f7ff f9fd 	bl	800ef50 <SWAPBYTE>
 800fb56:	4603      	mov	r3, r0
 800fb58:	461a      	mov	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	80da      	strh	r2, [r3, #6]
}
 800fb5e:	bf00      	nop
 800fb60:	3710      	adds	r7, #16
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b082      	sub	sp, #8
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
 800fb6e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800fb70:	2180      	movs	r1, #128	; 0x80
 800fb72:	6878      	ldr	r0, [r7, #4]
 800fb74:	f005 fd78 	bl	8015668 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800fb78:	2100      	movs	r1, #0
 800fb7a:	6878      	ldr	r0, [r7, #4]
 800fb7c:	f005 fd74 	bl	8015668 <USBD_LL_StallEP>
}
 800fb80:	bf00      	nop
 800fb82:	3708      	adds	r7, #8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b086      	sub	sp, #24
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	60f8      	str	r0, [r7, #12]
 800fb90:	60b9      	str	r1, [r7, #8]
 800fb92:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800fb94:	2300      	movs	r3, #0
 800fb96:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800fb98:	68fb      	ldr	r3, [r7, #12]
 800fb9a:	2b00      	cmp	r3, #0
 800fb9c:	d036      	beq.n	800fc0c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800fba2:	6938      	ldr	r0, [r7, #16]
 800fba4:	f000 f836 	bl	800fc14 <USBD_GetLen>
 800fba8:	4603      	mov	r3, r0
 800fbaa:	3301      	adds	r3, #1
 800fbac:	b29b      	uxth	r3, r3
 800fbae:	005b      	lsls	r3, r3, #1
 800fbb0:	b29a      	uxth	r2, r3
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800fbb6:	7dfb      	ldrb	r3, [r7, #23]
 800fbb8:	68ba      	ldr	r2, [r7, #8]
 800fbba:	4413      	add	r3, r2
 800fbbc:	687a      	ldr	r2, [r7, #4]
 800fbbe:	7812      	ldrb	r2, [r2, #0]
 800fbc0:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbc2:	7dfb      	ldrb	r3, [r7, #23]
 800fbc4:	3301      	adds	r3, #1
 800fbc6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800fbc8:	7dfb      	ldrb	r3, [r7, #23]
 800fbca:	68ba      	ldr	r2, [r7, #8]
 800fbcc:	4413      	add	r3, r2
 800fbce:	2203      	movs	r2, #3
 800fbd0:	701a      	strb	r2, [r3, #0]
  idx++;
 800fbd2:	7dfb      	ldrb	r3, [r7, #23]
 800fbd4:	3301      	adds	r3, #1
 800fbd6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800fbd8:	e013      	b.n	800fc02 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800fbda:	7dfb      	ldrb	r3, [r7, #23]
 800fbdc:	68ba      	ldr	r2, [r7, #8]
 800fbde:	4413      	add	r3, r2
 800fbe0:	693a      	ldr	r2, [r7, #16]
 800fbe2:	7812      	ldrb	r2, [r2, #0]
 800fbe4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800fbe6:	693b      	ldr	r3, [r7, #16]
 800fbe8:	3301      	adds	r3, #1
 800fbea:	613b      	str	r3, [r7, #16]
    idx++;
 800fbec:	7dfb      	ldrb	r3, [r7, #23]
 800fbee:	3301      	adds	r3, #1
 800fbf0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800fbf2:	7dfb      	ldrb	r3, [r7, #23]
 800fbf4:	68ba      	ldr	r2, [r7, #8]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	2200      	movs	r2, #0
 800fbfa:	701a      	strb	r2, [r3, #0]
    idx++;
 800fbfc:	7dfb      	ldrb	r3, [r7, #23]
 800fbfe:	3301      	adds	r3, #1
 800fc00:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800fc02:	693b      	ldr	r3, [r7, #16]
 800fc04:	781b      	ldrb	r3, [r3, #0]
 800fc06:	2b00      	cmp	r3, #0
 800fc08:	d1e7      	bne.n	800fbda <USBD_GetString+0x52>
 800fc0a:	e000      	b.n	800fc0e <USBD_GetString+0x86>
    return;
 800fc0c:	bf00      	nop
  }
}
 800fc0e:	3718      	adds	r7, #24
 800fc10:	46bd      	mov	sp, r7
 800fc12:	bd80      	pop	{r7, pc}

0800fc14 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800fc14:	b480      	push	{r7}
 800fc16:	b085      	sub	sp, #20
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800fc24:	e005      	b.n	800fc32 <USBD_GetLen+0x1e>
  {
    len++;
 800fc26:	7bfb      	ldrb	r3, [r7, #15]
 800fc28:	3301      	adds	r3, #1
 800fc2a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800fc2c:	68bb      	ldr	r3, [r7, #8]
 800fc2e:	3301      	adds	r3, #1
 800fc30:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	781b      	ldrb	r3, [r3, #0]
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	d1f5      	bne.n	800fc26 <USBD_GetLen+0x12>
  }

  return len;
 800fc3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	3714      	adds	r7, #20
 800fc40:	46bd      	mov	sp, r7
 800fc42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc46:	4770      	bx	lr

0800fc48 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800fc48:	b580      	push	{r7, lr}
 800fc4a:	b084      	sub	sp, #16
 800fc4c:	af00      	add	r7, sp, #0
 800fc4e:	60f8      	str	r0, [r7, #12]
 800fc50:	60b9      	str	r1, [r7, #8]
 800fc52:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	2202      	movs	r2, #2
 800fc58:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800fc62:	68fb      	ldr	r3, [r7, #12]
 800fc64:	687a      	ldr	r2, [r7, #4]
 800fc66:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	68ba      	ldr	r2, [r7, #8]
 800fc6c:	2100      	movs	r1, #0
 800fc6e:	68f8      	ldr	r0, [r7, #12]
 800fc70:	f005 fd83 	bl	801577a <USBD_LL_Transmit>

  return USBD_OK;
 800fc74:	2300      	movs	r3, #0
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3710      	adds	r7, #16
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b084      	sub	sp, #16
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	60f8      	str	r0, [r7, #12]
 800fc86:	60b9      	str	r1, [r7, #8]
 800fc88:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800fc8a:	687b      	ldr	r3, [r7, #4]
 800fc8c:	68ba      	ldr	r2, [r7, #8]
 800fc8e:	2100      	movs	r1, #0
 800fc90:	68f8      	ldr	r0, [r7, #12]
 800fc92:	f005 fd72 	bl	801577a <USBD_LL_Transmit>

  return USBD_OK;
 800fc96:	2300      	movs	r3, #0
}
 800fc98:	4618      	mov	r0, r3
 800fc9a:	3710      	adds	r7, #16
 800fc9c:	46bd      	mov	sp, r7
 800fc9e:	bd80      	pop	{r7, pc}

0800fca0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800fca0:	b580      	push	{r7, lr}
 800fca2:	b084      	sub	sp, #16
 800fca4:	af00      	add	r7, sp, #0
 800fca6:	60f8      	str	r0, [r7, #12]
 800fca8:	60b9      	str	r1, [r7, #8]
 800fcaa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800fcac:	68fb      	ldr	r3, [r7, #12]
 800fcae:	2203      	movs	r2, #3
 800fcb0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	687a      	ldr	r2, [r7, #4]
 800fcb8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800fcbc:	68fb      	ldr	r3, [r7, #12]
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	68ba      	ldr	r2, [r7, #8]
 800fcc8:	2100      	movs	r1, #0
 800fcca:	68f8      	ldr	r0, [r7, #12]
 800fccc:	f005 fd76 	bl	80157bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fcd0:	2300      	movs	r3, #0
}
 800fcd2:	4618      	mov	r0, r3
 800fcd4:	3710      	adds	r7, #16
 800fcd6:	46bd      	mov	sp, r7
 800fcd8:	bd80      	pop	{r7, pc}

0800fcda <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800fcda:	b580      	push	{r7, lr}
 800fcdc:	b084      	sub	sp, #16
 800fcde:	af00      	add	r7, sp, #0
 800fce0:	60f8      	str	r0, [r7, #12]
 800fce2:	60b9      	str	r1, [r7, #8]
 800fce4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	68ba      	ldr	r2, [r7, #8]
 800fcea:	2100      	movs	r1, #0
 800fcec:	68f8      	ldr	r0, [r7, #12]
 800fcee:	f005 fd65 	bl	80157bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fcf2:	2300      	movs	r3, #0
}
 800fcf4:	4618      	mov	r0, r3
 800fcf6:	3710      	adds	r7, #16
 800fcf8:	46bd      	mov	sp, r7
 800fcfa:	bd80      	pop	{r7, pc}

0800fcfc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800fcfc:	b580      	push	{r7, lr}
 800fcfe:	b082      	sub	sp, #8
 800fd00:	af00      	add	r7, sp, #0
 800fd02:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	2204      	movs	r2, #4
 800fd08:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	2200      	movs	r2, #0
 800fd10:	2100      	movs	r1, #0
 800fd12:	6878      	ldr	r0, [r7, #4]
 800fd14:	f005 fd31 	bl	801577a <USBD_LL_Transmit>

  return USBD_OK;
 800fd18:	2300      	movs	r3, #0
}
 800fd1a:	4618      	mov	r0, r3
 800fd1c:	3708      	adds	r7, #8
 800fd1e:	46bd      	mov	sp, r7
 800fd20:	bd80      	pop	{r7, pc}

0800fd22 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800fd22:	b580      	push	{r7, lr}
 800fd24:	b082      	sub	sp, #8
 800fd26:	af00      	add	r7, sp, #0
 800fd28:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2205      	movs	r2, #5
 800fd2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800fd32:	2300      	movs	r3, #0
 800fd34:	2200      	movs	r2, #0
 800fd36:	2100      	movs	r1, #0
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	f005 fd3f 	bl	80157bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800fd3e:	2300      	movs	r3, #0
}
 800fd40:	4618      	mov	r0, r3
 800fd42:	3708      	adds	r7, #8
 800fd44:	46bd      	mov	sp, r7
 800fd46:	bd80      	pop	{r7, pc}

0800fd48 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800fd48:	b590      	push	{r4, r7, lr}
 800fd4a:	b089      	sub	sp, #36	; 0x24
 800fd4c:	af04      	add	r7, sp, #16
 800fd4e:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800fd50:	2301      	movs	r3, #1
 800fd52:	2202      	movs	r2, #2
 800fd54:	2102      	movs	r1, #2
 800fd56:	6878      	ldr	r0, [r7, #4]
 800fd58:	f000 fc85 	bl	8010666 <USBH_FindInterface>
 800fd5c:	4603      	mov	r3, r0
 800fd5e:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fd60:	7bfb      	ldrb	r3, [r7, #15]
 800fd62:	2bff      	cmp	r3, #255	; 0xff
 800fd64:	d002      	beq.n	800fd6c <USBH_CDC_InterfaceInit+0x24>
 800fd66:	7bfb      	ldrb	r3, [r7, #15]
 800fd68:	2b01      	cmp	r3, #1
 800fd6a:	d901      	bls.n	800fd70 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fd6c:	2302      	movs	r3, #2
 800fd6e:	e13d      	b.n	800ffec <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800fd70:	7bfb      	ldrb	r3, [r7, #15]
 800fd72:	4619      	mov	r1, r3
 800fd74:	6878      	ldr	r0, [r7, #4]
 800fd76:	f000 fc5a 	bl	801062e <USBH_SelectInterface>
 800fd7a:	4603      	mov	r3, r0
 800fd7c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800fd7e:	7bbb      	ldrb	r3, [r7, #14]
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d001      	beq.n	800fd88 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800fd84:	2302      	movs	r3, #2
 800fd86:	e131      	b.n	800ffec <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800fd8e:	2050      	movs	r0, #80	; 0x50
 800fd90:	f006 f90e 	bl	8015fb0 <malloc>
 800fd94:	4603      	mov	r3, r0
 800fd96:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fd9e:	69db      	ldr	r3, [r3, #28]
 800fda0:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800fda2:	68bb      	ldr	r3, [r7, #8]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	d101      	bne.n	800fdac <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800fda8:	2302      	movs	r3, #2
 800fdaa:	e11f      	b.n	800ffec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800fdac:	2250      	movs	r2, #80	; 0x50
 800fdae:	2100      	movs	r1, #0
 800fdb0:	68b8      	ldr	r0, [r7, #8]
 800fdb2:	f006 f91b 	bl	8015fec <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800fdb6:	7bfb      	ldrb	r3, [r7, #15]
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	211a      	movs	r1, #26
 800fdbc:	fb01 f303 	mul.w	r3, r1, r3
 800fdc0:	4413      	add	r3, r2
 800fdc2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fdc6:	781b      	ldrb	r3, [r3, #0]
 800fdc8:	b25b      	sxtb	r3, r3
 800fdca:	2b00      	cmp	r3, #0
 800fdcc:	da15      	bge.n	800fdfa <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fdce:	7bfb      	ldrb	r3, [r7, #15]
 800fdd0:	687a      	ldr	r2, [r7, #4]
 800fdd2:	211a      	movs	r1, #26
 800fdd4:	fb01 f303 	mul.w	r3, r1, r3
 800fdd8:	4413      	add	r3, r2
 800fdda:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fdde:	781a      	ldrb	r2, [r3, #0]
 800fde0:	68bb      	ldr	r3, [r7, #8]
 800fde2:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fde4:	7bfb      	ldrb	r3, [r7, #15]
 800fde6:	687a      	ldr	r2, [r7, #4]
 800fde8:	211a      	movs	r1, #26
 800fdea:	fb01 f303 	mul.w	r3, r1, r3
 800fdee:	4413      	add	r3, r2
 800fdf0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fdf4:	881a      	ldrh	r2, [r3, #0]
 800fdf6:	68bb      	ldr	r3, [r7, #8]
 800fdf8:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800fdfa:	68bb      	ldr	r3, [r7, #8]
 800fdfc:	785b      	ldrb	r3, [r3, #1]
 800fdfe:	4619      	mov	r1, r3
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f001 ff26 	bl	8011c52 <USBH_AllocPipe>
 800fe06:	4603      	mov	r3, r0
 800fe08:	461a      	mov	r2, r3
 800fe0a:	68bb      	ldr	r3, [r7, #8]
 800fe0c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800fe0e:	68bb      	ldr	r3, [r7, #8]
 800fe10:	7819      	ldrb	r1, [r3, #0]
 800fe12:	68bb      	ldr	r3, [r7, #8]
 800fe14:	7858      	ldrb	r0, [r3, #1]
 800fe16:	687b      	ldr	r3, [r7, #4]
 800fe18:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800fe22:	68ba      	ldr	r2, [r7, #8]
 800fe24:	8952      	ldrh	r2, [r2, #10]
 800fe26:	9202      	str	r2, [sp, #8]
 800fe28:	2203      	movs	r2, #3
 800fe2a:	9201      	str	r2, [sp, #4]
 800fe2c:	9300      	str	r3, [sp, #0]
 800fe2e:	4623      	mov	r3, r4
 800fe30:	4602      	mov	r2, r0
 800fe32:	6878      	ldr	r0, [r7, #4]
 800fe34:	f001 fede 	bl	8011bf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	781b      	ldrb	r3, [r3, #0]
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	4619      	mov	r1, r3
 800fe40:	6878      	ldr	r0, [r7, #4]
 800fe42:	f006 f803 	bl	8015e4c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800fe46:	2300      	movs	r3, #0
 800fe48:	2200      	movs	r2, #0
 800fe4a:	210a      	movs	r1, #10
 800fe4c:	6878      	ldr	r0, [r7, #4]
 800fe4e:	f000 fc0a 	bl	8010666 <USBH_FindInterface>
 800fe52:	4603      	mov	r3, r0
 800fe54:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800fe56:	7bfb      	ldrb	r3, [r7, #15]
 800fe58:	2bff      	cmp	r3, #255	; 0xff
 800fe5a:	d002      	beq.n	800fe62 <USBH_CDC_InterfaceInit+0x11a>
 800fe5c:	7bfb      	ldrb	r3, [r7, #15]
 800fe5e:	2b01      	cmp	r3, #1
 800fe60:	d901      	bls.n	800fe66 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800fe62:	2302      	movs	r3, #2
 800fe64:	e0c2      	b.n	800ffec <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800fe66:	7bfb      	ldrb	r3, [r7, #15]
 800fe68:	687a      	ldr	r2, [r7, #4]
 800fe6a:	211a      	movs	r1, #26
 800fe6c:	fb01 f303 	mul.w	r3, r1, r3
 800fe70:	4413      	add	r3, r2
 800fe72:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fe76:	781b      	ldrb	r3, [r3, #0]
 800fe78:	b25b      	sxtb	r3, r3
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	da16      	bge.n	800feac <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800fe7e:	7bfb      	ldrb	r3, [r7, #15]
 800fe80:	687a      	ldr	r2, [r7, #4]
 800fe82:	211a      	movs	r1, #26
 800fe84:	fb01 f303 	mul.w	r3, r1, r3
 800fe88:	4413      	add	r3, r2
 800fe8a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800fe8e:	781a      	ldrb	r2, [r3, #0]
 800fe90:	68bb      	ldr	r3, [r7, #8]
 800fe92:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fe94:	7bfb      	ldrb	r3, [r7, #15]
 800fe96:	687a      	ldr	r2, [r7, #4]
 800fe98:	211a      	movs	r1, #26
 800fe9a:	fb01 f303 	mul.w	r3, r1, r3
 800fe9e:	4413      	add	r3, r2
 800fea0:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fea4:	881a      	ldrh	r2, [r3, #0]
 800fea6:	68bb      	ldr	r3, [r7, #8]
 800fea8:	835a      	strh	r2, [r3, #26]
 800feaa:	e015      	b.n	800fed8 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800feac:	7bfb      	ldrb	r3, [r7, #15]
 800feae:	687a      	ldr	r2, [r7, #4]
 800feb0:	211a      	movs	r1, #26
 800feb2:	fb01 f303 	mul.w	r3, r1, r3
 800feb6:	4413      	add	r3, r2
 800feb8:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800febc:	781a      	ldrb	r2, [r3, #0]
 800febe:	68bb      	ldr	r3, [r7, #8]
 800fec0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800fec2:	7bfb      	ldrb	r3, [r7, #15]
 800fec4:	687a      	ldr	r2, [r7, #4]
 800fec6:	211a      	movs	r1, #26
 800fec8:	fb01 f303 	mul.w	r3, r1, r3
 800fecc:	4413      	add	r3, r2
 800fece:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800fed2:	881a      	ldrh	r2, [r3, #0]
 800fed4:	68bb      	ldr	r3, [r7, #8]
 800fed6:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800fed8:	7bfb      	ldrb	r3, [r7, #15]
 800feda:	687a      	ldr	r2, [r7, #4]
 800fedc:	211a      	movs	r1, #26
 800fede:	fb01 f303 	mul.w	r3, r1, r3
 800fee2:	4413      	add	r3, r2
 800fee4:	f203 3356 	addw	r3, r3, #854	; 0x356
 800fee8:	781b      	ldrb	r3, [r3, #0]
 800feea:	b25b      	sxtb	r3, r3
 800feec:	2b00      	cmp	r3, #0
 800feee:	da16      	bge.n	800ff1e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800fef0:	7bfb      	ldrb	r3, [r7, #15]
 800fef2:	687a      	ldr	r2, [r7, #4]
 800fef4:	211a      	movs	r1, #26
 800fef6:	fb01 f303 	mul.w	r3, r1, r3
 800fefa:	4413      	add	r3, r2
 800fefc:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ff00:	781a      	ldrb	r2, [r3, #0]
 800ff02:	68bb      	ldr	r3, [r7, #8]
 800ff04:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ff06:	7bfb      	ldrb	r3, [r7, #15]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	211a      	movs	r1, #26
 800ff0c:	fb01 f303 	mul.w	r3, r1, r3
 800ff10:	4413      	add	r3, r2
 800ff12:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ff16:	881a      	ldrh	r2, [r3, #0]
 800ff18:	68bb      	ldr	r3, [r7, #8]
 800ff1a:	835a      	strh	r2, [r3, #26]
 800ff1c:	e015      	b.n	800ff4a <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ff1e:	7bfb      	ldrb	r3, [r7, #15]
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	211a      	movs	r1, #26
 800ff24:	fb01 f303 	mul.w	r3, r1, r3
 800ff28:	4413      	add	r3, r2
 800ff2a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ff2e:	781a      	ldrb	r2, [r3, #0]
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ff34:	7bfb      	ldrb	r3, [r7, #15]
 800ff36:	687a      	ldr	r2, [r7, #4]
 800ff38:	211a      	movs	r1, #26
 800ff3a:	fb01 f303 	mul.w	r3, r1, r3
 800ff3e:	4413      	add	r3, r2
 800ff40:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ff44:	881a      	ldrh	r2, [r3, #0]
 800ff46:	68bb      	ldr	r3, [r7, #8]
 800ff48:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ff4a:	68bb      	ldr	r3, [r7, #8]
 800ff4c:	7b9b      	ldrb	r3, [r3, #14]
 800ff4e:	4619      	mov	r1, r3
 800ff50:	6878      	ldr	r0, [r7, #4]
 800ff52:	f001 fe7e 	bl	8011c52 <USBH_AllocPipe>
 800ff56:	4603      	mov	r3, r0
 800ff58:	461a      	mov	r2, r3
 800ff5a:	68bb      	ldr	r3, [r7, #8]
 800ff5c:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ff5e:	68bb      	ldr	r3, [r7, #8]
 800ff60:	7bdb      	ldrb	r3, [r3, #15]
 800ff62:	4619      	mov	r1, r3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f001 fe74 	bl	8011c52 <USBH_AllocPipe>
 800ff6a:	4603      	mov	r3, r0
 800ff6c:	461a      	mov	r2, r3
 800ff6e:	68bb      	ldr	r3, [r7, #8]
 800ff70:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ff72:	68bb      	ldr	r3, [r7, #8]
 800ff74:	7b59      	ldrb	r1, [r3, #13]
 800ff76:	68bb      	ldr	r3, [r7, #8]
 800ff78:	7b98      	ldrb	r0, [r3, #14]
 800ff7a:	687b      	ldr	r3, [r7, #4]
 800ff7c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	8b12      	ldrh	r2, [r2, #24]
 800ff8a:	9202      	str	r2, [sp, #8]
 800ff8c:	2202      	movs	r2, #2
 800ff8e:	9201      	str	r2, [sp, #4]
 800ff90:	9300      	str	r3, [sp, #0]
 800ff92:	4623      	mov	r3, r4
 800ff94:	4602      	mov	r2, r0
 800ff96:	6878      	ldr	r0, [r7, #4]
 800ff98:	f001 fe2c 	bl	8011bf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ff9c:	68bb      	ldr	r3, [r7, #8]
 800ff9e:	7b19      	ldrb	r1, [r3, #12]
 800ffa0:	68bb      	ldr	r3, [r7, #8]
 800ffa2:	7bd8      	ldrb	r0, [r3, #15]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ffb0:	68ba      	ldr	r2, [r7, #8]
 800ffb2:	8b52      	ldrh	r2, [r2, #26]
 800ffb4:	9202      	str	r2, [sp, #8]
 800ffb6:	2202      	movs	r2, #2
 800ffb8:	9201      	str	r2, [sp, #4]
 800ffba:	9300      	str	r3, [sp, #0]
 800ffbc:	4623      	mov	r3, r4
 800ffbe:	4602      	mov	r2, r0
 800ffc0:	6878      	ldr	r0, [r7, #4]
 800ffc2:	f001 fe17 	bl	8011bf4 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ffc6:	68bb      	ldr	r3, [r7, #8]
 800ffc8:	2200      	movs	r2, #0
 800ffca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ffce:	68bb      	ldr	r3, [r7, #8]
 800ffd0:	7b5b      	ldrb	r3, [r3, #13]
 800ffd2:	2200      	movs	r2, #0
 800ffd4:	4619      	mov	r1, r3
 800ffd6:	6878      	ldr	r0, [r7, #4]
 800ffd8:	f005 ff38 	bl	8015e4c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ffdc:	68bb      	ldr	r3, [r7, #8]
 800ffde:	7b1b      	ldrb	r3, [r3, #12]
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f005 ff31 	bl	8015e4c <USBH_LL_SetToggle>

  return USBH_OK;
 800ffea:	2300      	movs	r3, #0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3714      	adds	r7, #20
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd90      	pop	{r4, r7, pc}

0800fff4 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b084      	sub	sp, #16
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010002:	69db      	ldr	r3, [r3, #28]
 8010004:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	781b      	ldrb	r3, [r3, #0]
 801000a:	2b00      	cmp	r3, #0
 801000c:	d00e      	beq.n	801002c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801000e:	68fb      	ldr	r3, [r7, #12]
 8010010:	781b      	ldrb	r3, [r3, #0]
 8010012:	4619      	mov	r1, r3
 8010014:	6878      	ldr	r0, [r7, #4]
 8010016:	f001 fe0c 	bl	8011c32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	781b      	ldrb	r3, [r3, #0]
 801001e:	4619      	mov	r1, r3
 8010020:	6878      	ldr	r0, [r7, #4]
 8010022:	f001 fe37 	bl	8011c94 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	2200      	movs	r2, #0
 801002a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 801002c:	68fb      	ldr	r3, [r7, #12]
 801002e:	7b1b      	ldrb	r3, [r3, #12]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00e      	beq.n	8010052 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8010034:	68fb      	ldr	r3, [r7, #12]
 8010036:	7b1b      	ldrb	r3, [r3, #12]
 8010038:	4619      	mov	r1, r3
 801003a:	6878      	ldr	r0, [r7, #4]
 801003c:	f001 fdf9 	bl	8011c32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8010040:	68fb      	ldr	r3, [r7, #12]
 8010042:	7b1b      	ldrb	r3, [r3, #12]
 8010044:	4619      	mov	r1, r3
 8010046:	6878      	ldr	r0, [r7, #4]
 8010048:	f001 fe24 	bl	8011c94 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2200      	movs	r2, #0
 8010050:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8010052:	68fb      	ldr	r3, [r7, #12]
 8010054:	7b5b      	ldrb	r3, [r3, #13]
 8010056:	2b00      	cmp	r3, #0
 8010058:	d00e      	beq.n	8010078 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	7b5b      	ldrb	r3, [r3, #13]
 801005e:	4619      	mov	r1, r3
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f001 fde6 	bl	8011c32 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	7b5b      	ldrb	r3, [r3, #13]
 801006a:	4619      	mov	r1, r3
 801006c:	6878      	ldr	r0, [r7, #4]
 801006e:	f001 fe11 	bl	8011c94 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8010072:	68fb      	ldr	r3, [r7, #12]
 8010074:	2200      	movs	r2, #0
 8010076:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801007e:	69db      	ldr	r3, [r3, #28]
 8010080:	2b00      	cmp	r3, #0
 8010082:	d00b      	beq.n	801009c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8010084:	687b      	ldr	r3, [r7, #4]
 8010086:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801008a:	69db      	ldr	r3, [r3, #28]
 801008c:	4618      	mov	r0, r3
 801008e:	f005 ff97 	bl	8015fc0 <free>
    phost->pActiveClass->pData = 0U;
 8010092:	687b      	ldr	r3, [r7, #4]
 8010094:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010098:	2200      	movs	r2, #0
 801009a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 801009c:	2300      	movs	r3, #0
}
 801009e:	4618      	mov	r0, r3
 80100a0:	3710      	adds	r7, #16
 80100a2:	46bd      	mov	sp, r7
 80100a4:	bd80      	pop	{r7, pc}

080100a6 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80100a6:	b580      	push	{r7, lr}
 80100a8:	b084      	sub	sp, #16
 80100aa:	af00      	add	r7, sp, #0
 80100ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100b4:	69db      	ldr	r3, [r3, #28]
 80100b6:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80100b8:	68fb      	ldr	r3, [r7, #12]
 80100ba:	3340      	adds	r3, #64	; 0x40
 80100bc:	4619      	mov	r1, r3
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	f000 f8b1 	bl	8010226 <GetLineCoding>
 80100c4:	4603      	mov	r3, r0
 80100c6:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80100c8:	7afb      	ldrb	r3, [r7, #11]
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d105      	bne.n	80100da <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80100ce:	687b      	ldr	r3, [r7, #4]
 80100d0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80100d4:	2102      	movs	r1, #2
 80100d6:	6878      	ldr	r0, [r7, #4]
 80100d8:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80100da:	7afb      	ldrb	r3, [r7, #11]
}
 80100dc:	4618      	mov	r0, r3
 80100de:	3710      	adds	r7, #16
 80100e0:	46bd      	mov	sp, r7
 80100e2:	bd80      	pop	{r7, pc}

080100e4 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80100e4:	b580      	push	{r7, lr}
 80100e6:	b084      	sub	sp, #16
 80100e8:	af00      	add	r7, sp, #0
 80100ea:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80100ec:	2301      	movs	r3, #1
 80100ee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80100f0:	2300      	movs	r3, #0
 80100f2:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80100f4:	687b      	ldr	r3, [r7, #4]
 80100f6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80100fa:	69db      	ldr	r3, [r3, #28]
 80100fc:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8010104:	2b04      	cmp	r3, #4
 8010106:	d877      	bhi.n	80101f8 <USBH_CDC_Process+0x114>
 8010108:	a201      	add	r2, pc, #4	; (adr r2, 8010110 <USBH_CDC_Process+0x2c>)
 801010a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801010e:	bf00      	nop
 8010110:	08010125 	.word	0x08010125
 8010114:	0801012b 	.word	0x0801012b
 8010118:	0801015b 	.word	0x0801015b
 801011c:	080101cf 	.word	0x080101cf
 8010120:	080101dd 	.word	0x080101dd
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8010124:	2300      	movs	r3, #0
 8010126:	73fb      	strb	r3, [r7, #15]
      break;
 8010128:	e06d      	b.n	8010206 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 801012a:	68bb      	ldr	r3, [r7, #8]
 801012c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801012e:	4619      	mov	r1, r3
 8010130:	6878      	ldr	r0, [r7, #4]
 8010132:	f000 f897 	bl	8010264 <SetLineCoding>
 8010136:	4603      	mov	r3, r0
 8010138:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801013a:	7bbb      	ldrb	r3, [r7, #14]
 801013c:	2b00      	cmp	r3, #0
 801013e:	d104      	bne.n	801014a <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	2202      	movs	r2, #2
 8010144:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8010148:	e058      	b.n	80101fc <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 801014a:	7bbb      	ldrb	r3, [r7, #14]
 801014c:	2b01      	cmp	r3, #1
 801014e:	d055      	beq.n	80101fc <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8010150:	68bb      	ldr	r3, [r7, #8]
 8010152:	2204      	movs	r2, #4
 8010154:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8010158:	e050      	b.n	80101fc <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 801015a:	68bb      	ldr	r3, [r7, #8]
 801015c:	3340      	adds	r3, #64	; 0x40
 801015e:	4619      	mov	r1, r3
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 f860 	bl	8010226 <GetLineCoding>
 8010166:	4603      	mov	r3, r0
 8010168:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 801016a:	7bbb      	ldrb	r3, [r7, #14]
 801016c:	2b00      	cmp	r3, #0
 801016e:	d126      	bne.n	80101be <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	2200      	movs	r2, #0
 8010174:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 801017e:	68bb      	ldr	r3, [r7, #8]
 8010180:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010182:	791b      	ldrb	r3, [r3, #4]
 8010184:	429a      	cmp	r2, r3
 8010186:	d13b      	bne.n	8010200 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8010188:	68bb      	ldr	r3, [r7, #8]
 801018a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 801018e:	68bb      	ldr	r3, [r7, #8]
 8010190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010192:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8010194:	429a      	cmp	r2, r3
 8010196:	d133      	bne.n	8010200 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8010198:	68bb      	ldr	r3, [r7, #8]
 801019a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 801019e:	68bb      	ldr	r3, [r7, #8]
 80101a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101a2:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80101a4:	429a      	cmp	r2, r3
 80101a6:	d12b      	bne.n	8010200 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80101ac:	68bb      	ldr	r3, [r7, #8]
 80101ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80101b0:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80101b2:	429a      	cmp	r2, r3
 80101b4:	d124      	bne.n	8010200 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80101b6:	6878      	ldr	r0, [r7, #4]
 80101b8:	f000 f958 	bl	801046c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80101bc:	e020      	b.n	8010200 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80101be:	7bbb      	ldrb	r3, [r7, #14]
 80101c0:	2b01      	cmp	r3, #1
 80101c2:	d01d      	beq.n	8010200 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	2204      	movs	r2, #4
 80101c8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80101cc:	e018      	b.n	8010200 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80101ce:	6878      	ldr	r0, [r7, #4]
 80101d0:	f000 f867 	bl	80102a2 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80101d4:	6878      	ldr	r0, [r7, #4]
 80101d6:	f000 f8da 	bl	801038e <CDC_ProcessReception>
      break;
 80101da:	e014      	b.n	8010206 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80101dc:	2100      	movs	r1, #0
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f001 f80f 	bl	8011202 <USBH_ClrFeature>
 80101e4:	4603      	mov	r3, r0
 80101e6:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80101e8:	7bbb      	ldrb	r3, [r7, #14]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d10a      	bne.n	8010204 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80101ee:	68bb      	ldr	r3, [r7, #8]
 80101f0:	2200      	movs	r2, #0
 80101f2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80101f6:	e005      	b.n	8010204 <USBH_CDC_Process+0x120>

    default:
      break;
 80101f8:	bf00      	nop
 80101fa:	e004      	b.n	8010206 <USBH_CDC_Process+0x122>
      break;
 80101fc:	bf00      	nop
 80101fe:	e002      	b.n	8010206 <USBH_CDC_Process+0x122>
      break;
 8010200:	bf00      	nop
 8010202:	e000      	b.n	8010206 <USBH_CDC_Process+0x122>
      break;
 8010204:	bf00      	nop

  }

  return status;
 8010206:	7bfb      	ldrb	r3, [r7, #15]
}
 8010208:	4618      	mov	r0, r3
 801020a:	3710      	adds	r7, #16
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}

08010210 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8010210:	b480      	push	{r7}
 8010212:	b083      	sub	sp, #12
 8010214:	af00      	add	r7, sp, #0
 8010216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8010218:	2300      	movs	r3, #0
}
 801021a:	4618      	mov	r0, r3
 801021c:	370c      	adds	r7, #12
 801021e:	46bd      	mov	sp, r7
 8010220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010224:	4770      	bx	lr

08010226 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8010226:	b580      	push	{r7, lr}
 8010228:	b082      	sub	sp, #8
 801022a:	af00      	add	r7, sp, #0
 801022c:	6078      	str	r0, [r7, #4]
 801022e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8010230:	687b      	ldr	r3, [r7, #4]
 8010232:	22a1      	movs	r2, #161	; 0xa1
 8010234:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8010236:	687b      	ldr	r3, [r7, #4]
 8010238:	2221      	movs	r2, #33	; 0x21
 801023a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	2200      	movs	r2, #0
 8010240:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	2200      	movs	r2, #0
 8010246:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	2207      	movs	r2, #7
 801024c:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801024e:	683b      	ldr	r3, [r7, #0]
 8010250:	2207      	movs	r2, #7
 8010252:	4619      	mov	r1, r3
 8010254:	6878      	ldr	r0, [r7, #4]
 8010256:	f001 fa7b 	bl	8011750 <USBH_CtlReq>
 801025a:	4603      	mov	r3, r0
}
 801025c:	4618      	mov	r0, r3
 801025e:	3708      	adds	r7, #8
 8010260:	46bd      	mov	sp, r7
 8010262:	bd80      	pop	{r7, pc}

08010264 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8010264:	b580      	push	{r7, lr}
 8010266:	b082      	sub	sp, #8
 8010268:	af00      	add	r7, sp, #0
 801026a:	6078      	str	r0, [r7, #4]
 801026c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 801026e:	687b      	ldr	r3, [r7, #4]
 8010270:	2221      	movs	r2, #33	; 0x21
 8010272:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8010274:	687b      	ldr	r3, [r7, #4]
 8010276:	2220      	movs	r2, #32
 8010278:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 801027a:	687b      	ldr	r3, [r7, #4]
 801027c:	2200      	movs	r2, #0
 801027e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8010280:	687b      	ldr	r3, [r7, #4]
 8010282:	2200      	movs	r2, #0
 8010284:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2207      	movs	r2, #7
 801028a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 801028c:	683b      	ldr	r3, [r7, #0]
 801028e:	2207      	movs	r2, #7
 8010290:	4619      	mov	r1, r3
 8010292:	6878      	ldr	r0, [r7, #4]
 8010294:	f001 fa5c 	bl	8011750 <USBH_CtlReq>
 8010298:	4603      	mov	r3, r0
}
 801029a:	4618      	mov	r0, r3
 801029c:	3708      	adds	r7, #8
 801029e:	46bd      	mov	sp, r7
 80102a0:	bd80      	pop	{r7, pc}

080102a2 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80102a2:	b580      	push	{r7, lr}
 80102a4:	b086      	sub	sp, #24
 80102a6:	af02      	add	r7, sp, #8
 80102a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80102b0:	69db      	ldr	r3, [r3, #28]
 80102b2:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80102b4:	2300      	movs	r3, #0
 80102b6:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80102be:	2b01      	cmp	r3, #1
 80102c0:	d002      	beq.n	80102c8 <CDC_ProcessTransmission+0x26>
 80102c2:	2b02      	cmp	r3, #2
 80102c4:	d023      	beq.n	801030e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80102c6:	e05e      	b.n	8010386 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102cc:	68fa      	ldr	r2, [r7, #12]
 80102ce:	8b12      	ldrh	r2, [r2, #24]
 80102d0:	4293      	cmp	r3, r2
 80102d2:	d90b      	bls.n	80102ec <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	69d9      	ldr	r1, [r3, #28]
 80102d8:	68fb      	ldr	r3, [r7, #12]
 80102da:	8b1a      	ldrh	r2, [r3, #24]
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	7b5b      	ldrb	r3, [r3, #13]
 80102e0:	2001      	movs	r0, #1
 80102e2:	9000      	str	r0, [sp, #0]
 80102e4:	6878      	ldr	r0, [r7, #4]
 80102e6:	f001 fc42 	bl	8011b6e <USBH_BulkSendData>
 80102ea:	e00b      	b.n	8010304 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80102f4:	b29a      	uxth	r2, r3
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	7b5b      	ldrb	r3, [r3, #13]
 80102fa:	2001      	movs	r0, #1
 80102fc:	9000      	str	r0, [sp, #0]
 80102fe:	6878      	ldr	r0, [r7, #4]
 8010300:	f001 fc35 	bl	8011b6e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	2202      	movs	r2, #2
 8010308:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 801030c:	e03b      	b.n	8010386 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	7b5b      	ldrb	r3, [r3, #13]
 8010312:	4619      	mov	r1, r3
 8010314:	6878      	ldr	r0, [r7, #4]
 8010316:	f005 fd6f 	bl	8015df8 <USBH_LL_GetURBState>
 801031a:	4603      	mov	r3, r0
 801031c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 801031e:	7afb      	ldrb	r3, [r7, #11]
 8010320:	2b01      	cmp	r3, #1
 8010322:	d128      	bne.n	8010376 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010328:	68fa      	ldr	r2, [r7, #12]
 801032a:	8b12      	ldrh	r2, [r2, #24]
 801032c:	4293      	cmp	r3, r2
 801032e:	d90e      	bls.n	801034e <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8010330:	68fb      	ldr	r3, [r7, #12]
 8010332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010334:	68fa      	ldr	r2, [r7, #12]
 8010336:	8b12      	ldrh	r2, [r2, #24]
 8010338:	1a9a      	subs	r2, r3, r2
 801033a:	68fb      	ldr	r3, [r7, #12]
 801033c:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 801033e:	68fb      	ldr	r3, [r7, #12]
 8010340:	69db      	ldr	r3, [r3, #28]
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	8b12      	ldrh	r2, [r2, #24]
 8010346:	441a      	add	r2, r3
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	61da      	str	r2, [r3, #28]
 801034c:	e002      	b.n	8010354 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	2200      	movs	r2, #0
 8010352:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010358:	2b00      	cmp	r3, #0
 801035a:	d004      	beq.n	8010366 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	2201      	movs	r2, #1
 8010360:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010364:	e00e      	b.n	8010384 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8010366:	68fb      	ldr	r3, [r7, #12]
 8010368:	2200      	movs	r2, #0
 801036a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 801036e:	6878      	ldr	r0, [r7, #4]
 8010370:	f000 f868 	bl	8010444 <USBH_CDC_TransmitCallback>
      break;
 8010374:	e006      	b.n	8010384 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8010376:	7afb      	ldrb	r3, [r7, #11]
 8010378:	2b02      	cmp	r3, #2
 801037a:	d103      	bne.n	8010384 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	2201      	movs	r2, #1
 8010380:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8010384:	bf00      	nop
  }
}
 8010386:	bf00      	nop
 8010388:	3710      	adds	r7, #16
 801038a:	46bd      	mov	sp, r7
 801038c:	bd80      	pop	{r7, pc}

0801038e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 801038e:	b580      	push	{r7, lr}
 8010390:	b086      	sub	sp, #24
 8010392:	af00      	add	r7, sp, #0
 8010394:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 801039c:	69db      	ldr	r3, [r3, #28]
 801039e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80103a0:	2300      	movs	r3, #0
 80103a2:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80103a4:	697b      	ldr	r3, [r7, #20]
 80103a6:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80103aa:	2b03      	cmp	r3, #3
 80103ac:	d002      	beq.n	80103b4 <CDC_ProcessReception+0x26>
 80103ae:	2b04      	cmp	r3, #4
 80103b0:	d00e      	beq.n	80103d0 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80103b2:	e043      	b.n	801043c <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80103b4:	697b      	ldr	r3, [r7, #20]
 80103b6:	6a19      	ldr	r1, [r3, #32]
 80103b8:	697b      	ldr	r3, [r7, #20]
 80103ba:	8b5a      	ldrh	r2, [r3, #26]
 80103bc:	697b      	ldr	r3, [r7, #20]
 80103be:	7b1b      	ldrb	r3, [r3, #12]
 80103c0:	6878      	ldr	r0, [r7, #4]
 80103c2:	f001 fbf9 	bl	8011bb8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80103c6:	697b      	ldr	r3, [r7, #20]
 80103c8:	2204      	movs	r2, #4
 80103ca:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80103ce:	e035      	b.n	801043c <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80103d0:	697b      	ldr	r3, [r7, #20]
 80103d2:	7b1b      	ldrb	r3, [r3, #12]
 80103d4:	4619      	mov	r1, r3
 80103d6:	6878      	ldr	r0, [r7, #4]
 80103d8:	f005 fd0e 	bl	8015df8 <USBH_LL_GetURBState>
 80103dc:	4603      	mov	r3, r0
 80103de:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80103e0:	7cfb      	ldrb	r3, [r7, #19]
 80103e2:	2b01      	cmp	r3, #1
 80103e4:	d129      	bne.n	801043a <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80103e6:	697b      	ldr	r3, [r7, #20]
 80103e8:	7b1b      	ldrb	r3, [r3, #12]
 80103ea:	4619      	mov	r1, r3
 80103ec:	6878      	ldr	r0, [r7, #4]
 80103ee:	f005 fc71 	bl	8015cd4 <USBH_LL_GetLastXferSize>
 80103f2:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80103f4:	697b      	ldr	r3, [r7, #20]
 80103f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80103f8:	68fa      	ldr	r2, [r7, #12]
 80103fa:	429a      	cmp	r2, r3
 80103fc:	d016      	beq.n	801042c <CDC_ProcessReception+0x9e>
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	8b5b      	ldrh	r3, [r3, #26]
 8010402:	461a      	mov	r2, r3
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	4293      	cmp	r3, r2
 8010408:	d910      	bls.n	801042c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 801040a:	697b      	ldr	r3, [r7, #20]
 801040c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801040e:	68fb      	ldr	r3, [r7, #12]
 8010410:	1ad2      	subs	r2, r2, r3
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8010416:	697b      	ldr	r3, [r7, #20]
 8010418:	6a1a      	ldr	r2, [r3, #32]
 801041a:	68fb      	ldr	r3, [r7, #12]
 801041c:	441a      	add	r2, r3
 801041e:	697b      	ldr	r3, [r7, #20]
 8010420:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8010422:	697b      	ldr	r3, [r7, #20]
 8010424:	2203      	movs	r2, #3
 8010426:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 801042a:	e006      	b.n	801043a <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 801042c:	697b      	ldr	r3, [r7, #20]
 801042e:	2200      	movs	r2, #0
 8010430:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8010434:	6878      	ldr	r0, [r7, #4]
 8010436:	f000 f80f 	bl	8010458 <USBH_CDC_ReceiveCallback>
      break;
 801043a:	bf00      	nop
  }
}
 801043c:	bf00      	nop
 801043e:	3718      	adds	r7, #24
 8010440:	46bd      	mov	sp, r7
 8010442:	bd80      	pop	{r7, pc}

08010444 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8010444:	b480      	push	{r7}
 8010446:	b083      	sub	sp, #12
 8010448:	af00      	add	r7, sp, #0
 801044a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 801044c:	bf00      	nop
 801044e:	370c      	adds	r7, #12
 8010450:	46bd      	mov	sp, r7
 8010452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010456:	4770      	bx	lr

08010458 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8010458:	b480      	push	{r7}
 801045a:	b083      	sub	sp, #12
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010460:	bf00      	nop
 8010462:	370c      	adds	r7, #12
 8010464:	46bd      	mov	sp, r7
 8010466:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046a:	4770      	bx	lr

0801046c <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 801046c:	b480      	push	{r7}
 801046e:	b083      	sub	sp, #12
 8010470:	af00      	add	r7, sp, #0
 8010472:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8010474:	bf00      	nop
 8010476:	370c      	adds	r7, #12
 8010478:	46bd      	mov	sp, r7
 801047a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801047e:	4770      	bx	lr

08010480 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8010480:	b580      	push	{r7, lr}
 8010482:	b084      	sub	sp, #16
 8010484:	af00      	add	r7, sp, #0
 8010486:	60f8      	str	r0, [r7, #12]
 8010488:	60b9      	str	r1, [r7, #8]
 801048a:	4613      	mov	r3, r2
 801048c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 801048e:	68fb      	ldr	r3, [r7, #12]
 8010490:	2b00      	cmp	r3, #0
 8010492:	d101      	bne.n	8010498 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8010494:	2302      	movs	r3, #2
 8010496:	e029      	b.n	80104ec <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	79fa      	ldrb	r2, [r7, #7]
 801049c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80104a0:	68fb      	ldr	r3, [r7, #12]
 80104a2:	2200      	movs	r2, #0
 80104a4:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	2200      	movs	r2, #0
 80104ac:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80104b0:	68f8      	ldr	r0, [r7, #12]
 80104b2:	f000 f81f 	bl	80104f4 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80104b6:	68fb      	ldr	r3, [r7, #12]
 80104b8:	2200      	movs	r2, #0
 80104ba:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80104be:	68fb      	ldr	r3, [r7, #12]
 80104c0:	2200      	movs	r2, #0
 80104c2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80104c6:	68fb      	ldr	r3, [r7, #12]
 80104c8:	2200      	movs	r2, #0
 80104ca:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d003      	beq.n	80104e4 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80104dc:	68fb      	ldr	r3, [r7, #12]
 80104de:	68ba      	ldr	r2, [r7, #8]
 80104e0:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80104e4:	68f8      	ldr	r0, [r7, #12]
 80104e6:	f005 fb41 	bl	8015b6c <USBH_LL_Init>

  return USBH_OK;
 80104ea:	2300      	movs	r3, #0
}
 80104ec:	4618      	mov	r0, r3
 80104ee:	3710      	adds	r7, #16
 80104f0:	46bd      	mov	sp, r7
 80104f2:	bd80      	pop	{r7, pc}

080104f4 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80104f4:	b580      	push	{r7, lr}
 80104f6:	b084      	sub	sp, #16
 80104f8:	af00      	add	r7, sp, #0
 80104fa:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80104fc:	2300      	movs	r3, #0
 80104fe:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010500:	2300      	movs	r3, #0
 8010502:	60fb      	str	r3, [r7, #12]
 8010504:	e009      	b.n	801051a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8010506:	687a      	ldr	r2, [r7, #4]
 8010508:	68fb      	ldr	r3, [r7, #12]
 801050a:	33e0      	adds	r3, #224	; 0xe0
 801050c:	009b      	lsls	r3, r3, #2
 801050e:	4413      	add	r3, r2
 8010510:	2200      	movs	r2, #0
 8010512:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8010514:	68fb      	ldr	r3, [r7, #12]
 8010516:	3301      	adds	r3, #1
 8010518:	60fb      	str	r3, [r7, #12]
 801051a:	68fb      	ldr	r3, [r7, #12]
 801051c:	2b0f      	cmp	r3, #15
 801051e:	d9f2      	bls.n	8010506 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010520:	2300      	movs	r3, #0
 8010522:	60fb      	str	r3, [r7, #12]
 8010524:	e009      	b.n	801053a <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8010526:	687a      	ldr	r2, [r7, #4]
 8010528:	68fb      	ldr	r3, [r7, #12]
 801052a:	4413      	add	r3, r2
 801052c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010530:	2200      	movs	r2, #0
 8010532:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8010534:	68fb      	ldr	r3, [r7, #12]
 8010536:	3301      	adds	r3, #1
 8010538:	60fb      	str	r3, [r7, #12]
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010540:	d3f1      	bcc.n	8010526 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	2200      	movs	r2, #0
 8010546:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	2200      	movs	r2, #0
 801054c:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 801054e:	687b      	ldr	r3, [r7, #4]
 8010550:	2201      	movs	r2, #1
 8010552:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	2200      	movs	r2, #0
 8010558:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	2201      	movs	r2, #1
 8010560:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8010562:	687b      	ldr	r3, [r7, #4]
 8010564:	2240      	movs	r2, #64	; 0x40
 8010566:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8010568:	687b      	ldr	r3, [r7, #4]
 801056a:	2200      	movs	r2, #0
 801056c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2200      	movs	r2, #0
 8010572:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2201      	movs	r2, #1
 801057a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 801057e:	687b      	ldr	r3, [r7, #4]
 8010580:	2200      	movs	r2, #0
 8010582:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	2200      	movs	r2, #0
 801058a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	331c      	adds	r3, #28
 8010592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010596:	2100      	movs	r1, #0
 8010598:	4618      	mov	r0, r3
 801059a:	f005 fd27 	bl	8015fec <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80105a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80105a8:	2100      	movs	r1, #0
 80105aa:	4618      	mov	r0, r3
 80105ac:	f005 fd1e 	bl	8015fec <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80105b0:	687b      	ldr	r3, [r7, #4]
 80105b2:	f203 3326 	addw	r3, r3, #806	; 0x326
 80105b6:	2212      	movs	r2, #18
 80105b8:	2100      	movs	r1, #0
 80105ba:	4618      	mov	r0, r3
 80105bc:	f005 fd16 	bl	8015fec <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80105c6:	223e      	movs	r2, #62	; 0x3e
 80105c8:	2100      	movs	r1, #0
 80105ca:	4618      	mov	r0, r3
 80105cc:	f005 fd0e 	bl	8015fec <memset>

  return USBH_OK;
 80105d0:	2300      	movs	r3, #0
}
 80105d2:	4618      	mov	r0, r3
 80105d4:	3710      	adds	r7, #16
 80105d6:	46bd      	mov	sp, r7
 80105d8:	bd80      	pop	{r7, pc}

080105da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80105da:	b480      	push	{r7}
 80105dc:	b085      	sub	sp, #20
 80105de:	af00      	add	r7, sp, #0
 80105e0:	6078      	str	r0, [r7, #4]
 80105e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80105e4:	2300      	movs	r3, #0
 80105e6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80105e8:	683b      	ldr	r3, [r7, #0]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d016      	beq.n	801061c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d10e      	bne.n	8010616 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80105f8:	687b      	ldr	r3, [r7, #4]
 80105fa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80105fe:	1c59      	adds	r1, r3, #1
 8010600:	687a      	ldr	r2, [r7, #4]
 8010602:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8010606:	687a      	ldr	r2, [r7, #4]
 8010608:	33de      	adds	r3, #222	; 0xde
 801060a:	6839      	ldr	r1, [r7, #0]
 801060c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8010610:	2300      	movs	r3, #0
 8010612:	73fb      	strb	r3, [r7, #15]
 8010614:	e004      	b.n	8010620 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8010616:	2302      	movs	r3, #2
 8010618:	73fb      	strb	r3, [r7, #15]
 801061a:	e001      	b.n	8010620 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 801061c:	2302      	movs	r3, #2
 801061e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010620:	7bfb      	ldrb	r3, [r7, #15]
}
 8010622:	4618      	mov	r0, r3
 8010624:	3714      	adds	r7, #20
 8010626:	46bd      	mov	sp, r7
 8010628:	f85d 7b04 	ldr.w	r7, [sp], #4
 801062c:	4770      	bx	lr

0801062e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 801062e:	b480      	push	{r7}
 8010630:	b085      	sub	sp, #20
 8010632:	af00      	add	r7, sp, #0
 8010634:	6078      	str	r0, [r7, #4]
 8010636:	460b      	mov	r3, r1
 8010638:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 801063a:	2300      	movs	r3, #0
 801063c:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 801063e:	687b      	ldr	r3, [r7, #4]
 8010640:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8010644:	78fa      	ldrb	r2, [r7, #3]
 8010646:	429a      	cmp	r2, r3
 8010648:	d204      	bcs.n	8010654 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 801064a:	687b      	ldr	r3, [r7, #4]
 801064c:	78fa      	ldrb	r2, [r7, #3]
 801064e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8010652:	e001      	b.n	8010658 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8010654:	2302      	movs	r3, #2
 8010656:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010658:	7bfb      	ldrb	r3, [r7, #15]
}
 801065a:	4618      	mov	r0, r3
 801065c:	3714      	adds	r7, #20
 801065e:	46bd      	mov	sp, r7
 8010660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010664:	4770      	bx	lr

08010666 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8010666:	b480      	push	{r7}
 8010668:	b087      	sub	sp, #28
 801066a:	af00      	add	r7, sp, #0
 801066c:	6078      	str	r0, [r7, #4]
 801066e:	4608      	mov	r0, r1
 8010670:	4611      	mov	r1, r2
 8010672:	461a      	mov	r2, r3
 8010674:	4603      	mov	r3, r0
 8010676:	70fb      	strb	r3, [r7, #3]
 8010678:	460b      	mov	r3, r1
 801067a:	70bb      	strb	r3, [r7, #2]
 801067c:	4613      	mov	r3, r2
 801067e:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8010680:	2300      	movs	r3, #0
 8010682:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010684:	2300      	movs	r3, #0
 8010686:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801068e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8010690:	e025      	b.n	80106de <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8010692:	7dfb      	ldrb	r3, [r7, #23]
 8010694:	221a      	movs	r2, #26
 8010696:	fb02 f303 	mul.w	r3, r2, r3
 801069a:	3308      	adds	r3, #8
 801069c:	68fa      	ldr	r2, [r7, #12]
 801069e:	4413      	add	r3, r2
 80106a0:	3302      	adds	r3, #2
 80106a2:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80106a4:	693b      	ldr	r3, [r7, #16]
 80106a6:	795b      	ldrb	r3, [r3, #5]
 80106a8:	78fa      	ldrb	r2, [r7, #3]
 80106aa:	429a      	cmp	r2, r3
 80106ac:	d002      	beq.n	80106b4 <USBH_FindInterface+0x4e>
 80106ae:	78fb      	ldrb	r3, [r7, #3]
 80106b0:	2bff      	cmp	r3, #255	; 0xff
 80106b2:	d111      	bne.n	80106d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80106b4:	693b      	ldr	r3, [r7, #16]
 80106b6:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80106b8:	78ba      	ldrb	r2, [r7, #2]
 80106ba:	429a      	cmp	r2, r3
 80106bc:	d002      	beq.n	80106c4 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80106be:	78bb      	ldrb	r3, [r7, #2]
 80106c0:	2bff      	cmp	r3, #255	; 0xff
 80106c2:	d109      	bne.n	80106d8 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80106c4:	693b      	ldr	r3, [r7, #16]
 80106c6:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80106c8:	787a      	ldrb	r2, [r7, #1]
 80106ca:	429a      	cmp	r2, r3
 80106cc:	d002      	beq.n	80106d4 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80106ce:	787b      	ldrb	r3, [r7, #1]
 80106d0:	2bff      	cmp	r3, #255	; 0xff
 80106d2:	d101      	bne.n	80106d8 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80106d4:	7dfb      	ldrb	r3, [r7, #23]
 80106d6:	e006      	b.n	80106e6 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80106d8:	7dfb      	ldrb	r3, [r7, #23]
 80106da:	3301      	adds	r3, #1
 80106dc:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80106de:	7dfb      	ldrb	r3, [r7, #23]
 80106e0:	2b01      	cmp	r3, #1
 80106e2:	d9d6      	bls.n	8010692 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80106e4:	23ff      	movs	r3, #255	; 0xff
}
 80106e6:	4618      	mov	r0, r3
 80106e8:	371c      	adds	r7, #28
 80106ea:	46bd      	mov	sp, r7
 80106ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106f0:	4770      	bx	lr

080106f2 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80106f2:	b580      	push	{r7, lr}
 80106f4:	b082      	sub	sp, #8
 80106f6:	af00      	add	r7, sp, #0
 80106f8:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80106fa:	6878      	ldr	r0, [r7, #4]
 80106fc:	f005 fa72 	bl	8015be4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8010700:	2101      	movs	r1, #1
 8010702:	6878      	ldr	r0, [r7, #4]
 8010704:	f005 fb8b 	bl	8015e1e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8010708:	2300      	movs	r3, #0
}
 801070a:	4618      	mov	r0, r3
 801070c:	3708      	adds	r7, #8
 801070e:	46bd      	mov	sp, r7
 8010710:	bd80      	pop	{r7, pc}
	...

08010714 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8010714:	b580      	push	{r7, lr}
 8010716:	b088      	sub	sp, #32
 8010718:	af04      	add	r7, sp, #16
 801071a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 801071c:	2302      	movs	r3, #2
 801071e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8010720:	2300      	movs	r3, #0
 8010722:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8010724:	687b      	ldr	r3, [r7, #4]
 8010726:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 801072a:	b2db      	uxtb	r3, r3
 801072c:	2b01      	cmp	r3, #1
 801072e:	d102      	bne.n	8010736 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	2203      	movs	r2, #3
 8010734:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8010736:	687b      	ldr	r3, [r7, #4]
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	b2db      	uxtb	r3, r3
 801073c:	2b0b      	cmp	r3, #11
 801073e:	f200 81be 	bhi.w	8010abe <USBH_Process+0x3aa>
 8010742:	a201      	add	r2, pc, #4	; (adr r2, 8010748 <USBH_Process+0x34>)
 8010744:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010748:	08010779 	.word	0x08010779
 801074c:	080107ab 	.word	0x080107ab
 8010750:	08010813 	.word	0x08010813
 8010754:	08010a59 	.word	0x08010a59
 8010758:	08010abf 	.word	0x08010abf
 801075c:	080108b7 	.word	0x080108b7
 8010760:	080109ff 	.word	0x080109ff
 8010764:	080108ed 	.word	0x080108ed
 8010768:	0801090d 	.word	0x0801090d
 801076c:	0801092d 	.word	0x0801092d
 8010770:	08010971 	.word	0x08010971
 8010774:	08010a41 	.word	0x08010a41
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8010778:	687b      	ldr	r3, [r7, #4]
 801077a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 801077e:	b2db      	uxtb	r3, r3
 8010780:	2b00      	cmp	r3, #0
 8010782:	f000 819e 	beq.w	8010ac2 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	2201      	movs	r2, #1
 801078a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 801078c:	20c8      	movs	r0, #200	; 0xc8
 801078e:	f005 fb8d 	bl	8015eac <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8010792:	6878      	ldr	r0, [r7, #4]
 8010794:	f005 fa83 	bl	8015c9e <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	2200      	movs	r2, #0
 801079c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2200      	movs	r2, #0
 80107a4:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80107a8:	e18b      	b.n	8010ac2 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80107aa:	687b      	ldr	r3, [r7, #4]
 80107ac:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80107b0:	2b01      	cmp	r3, #1
 80107b2:	d107      	bne.n	80107c4 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80107b4:	687b      	ldr	r3, [r7, #4]
 80107b6:	2200      	movs	r2, #0
 80107b8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80107bc:	687b      	ldr	r3, [r7, #4]
 80107be:	2202      	movs	r2, #2
 80107c0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80107c2:	e18d      	b.n	8010ae0 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80107c4:	687b      	ldr	r3, [r7, #4]
 80107c6:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80107ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80107ce:	d914      	bls.n	80107fa <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80107d0:	687b      	ldr	r3, [r7, #4]
 80107d2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80107d6:	3301      	adds	r3, #1
 80107d8:	b2da      	uxtb	r2, r3
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80107e0:	687b      	ldr	r3, [r7, #4]
 80107e2:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80107e6:	2b03      	cmp	r3, #3
 80107e8:	d903      	bls.n	80107f2 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	220d      	movs	r2, #13
 80107ee:	701a      	strb	r2, [r3, #0]
      break;
 80107f0:	e176      	b.n	8010ae0 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2200      	movs	r2, #0
 80107f6:	701a      	strb	r2, [r3, #0]
      break;
 80107f8:	e172      	b.n	8010ae0 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8010800:	f103 020a 	add.w	r2, r3, #10
 8010804:	687b      	ldr	r3, [r7, #4]
 8010806:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 801080a:	200a      	movs	r0, #10
 801080c:	f005 fb4e 	bl	8015eac <USBH_Delay>
      break;
 8010810:	e166      	b.n	8010ae0 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010818:	2b00      	cmp	r3, #0
 801081a:	d005      	beq.n	8010828 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010822:	2104      	movs	r1, #4
 8010824:	6878      	ldr	r0, [r7, #4]
 8010826:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8010828:	2064      	movs	r0, #100	; 0x64
 801082a:	f005 fb3f 	bl	8015eac <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 801082e:	6878      	ldr	r0, [r7, #4]
 8010830:	f005 fa0e 	bl	8015c50 <USBH_LL_GetSpeed>
 8010834:	4603      	mov	r3, r0
 8010836:	461a      	mov	r2, r3
 8010838:	687b      	ldr	r3, [r7, #4]
 801083a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	2205      	movs	r2, #5
 8010842:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8010844:	2100      	movs	r1, #0
 8010846:	6878      	ldr	r0, [r7, #4]
 8010848:	f001 fa03 	bl	8011c52 <USBH_AllocPipe>
 801084c:	4603      	mov	r3, r0
 801084e:	461a      	mov	r2, r3
 8010850:	687b      	ldr	r3, [r7, #4]
 8010852:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8010854:	2180      	movs	r1, #128	; 0x80
 8010856:	6878      	ldr	r0, [r7, #4]
 8010858:	f001 f9fb 	bl	8011c52 <USBH_AllocPipe>
 801085c:	4603      	mov	r3, r0
 801085e:	461a      	mov	r2, r3
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	7919      	ldrb	r1, [r3, #4]
 8010868:	687b      	ldr	r3, [r7, #4]
 801086a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 801086e:	687b      	ldr	r3, [r7, #4]
 8010870:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8010874:	687a      	ldr	r2, [r7, #4]
 8010876:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8010878:	b292      	uxth	r2, r2
 801087a:	9202      	str	r2, [sp, #8]
 801087c:	2200      	movs	r2, #0
 801087e:	9201      	str	r2, [sp, #4]
 8010880:	9300      	str	r3, [sp, #0]
 8010882:	4603      	mov	r3, r0
 8010884:	2280      	movs	r2, #128	; 0x80
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f001 f9b4 	bl	8011bf4 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	7959      	ldrb	r1, [r3, #5]
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 801089c:	687a      	ldr	r2, [r7, #4]
 801089e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80108a0:	b292      	uxth	r2, r2
 80108a2:	9202      	str	r2, [sp, #8]
 80108a4:	2200      	movs	r2, #0
 80108a6:	9201      	str	r2, [sp, #4]
 80108a8:	9300      	str	r3, [sp, #0]
 80108aa:	4603      	mov	r3, r0
 80108ac:	2200      	movs	r2, #0
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f001 f9a0 	bl	8011bf4 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80108b4:	e114      	b.n	8010ae0 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80108b6:	6878      	ldr	r0, [r7, #4]
 80108b8:	f000 f918 	bl	8010aec <USBH_HandleEnum>
 80108bc:	4603      	mov	r3, r0
 80108be:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80108c0:	7bbb      	ldrb	r3, [r7, #14]
 80108c2:	b2db      	uxtb	r3, r3
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	f040 80fe 	bne.w	8010ac6 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	2200      	movs	r2, #0
 80108ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80108d8:	2b01      	cmp	r3, #1
 80108da:	d103      	bne.n	80108e4 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2208      	movs	r2, #8
 80108e0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80108e2:	e0f0      	b.n	8010ac6 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	2207      	movs	r2, #7
 80108e8:	701a      	strb	r2, [r3, #0]
      break;
 80108ea:	e0ec      	b.n	8010ac6 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	f000 80e9 	beq.w	8010aca <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80108fe:	2101      	movs	r1, #1
 8010900:	6878      	ldr	r0, [r7, #4]
 8010902:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8010904:	687b      	ldr	r3, [r7, #4]
 8010906:	2208      	movs	r2, #8
 8010908:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 801090a:	e0de      	b.n	8010aca <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 801090c:	687b      	ldr	r3, [r7, #4]
 801090e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8010912:	b29b      	uxth	r3, r3
 8010914:	4619      	mov	r1, r3
 8010916:	6878      	ldr	r0, [r7, #4]
 8010918:	f000 fc2c 	bl	8011174 <USBH_SetCfg>
 801091c:	4603      	mov	r3, r0
 801091e:	2b00      	cmp	r3, #0
 8010920:	f040 80d5 	bne.w	8010ace <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	2209      	movs	r2, #9
 8010928:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 801092a:	e0d0      	b.n	8010ace <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8010932:	f003 0320 	and.w	r3, r3, #32
 8010936:	2b00      	cmp	r3, #0
 8010938:	d016      	beq.n	8010968 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 801093a:	2101      	movs	r1, #1
 801093c:	6878      	ldr	r0, [r7, #4]
 801093e:	f000 fc3c 	bl	80111ba <USBH_SetFeature>
 8010942:	4603      	mov	r3, r0
 8010944:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010946:	7bbb      	ldrb	r3, [r7, #14]
 8010948:	b2db      	uxtb	r3, r3
 801094a:	2b00      	cmp	r3, #0
 801094c:	d103      	bne.n	8010956 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 801094e:	687b      	ldr	r3, [r7, #4]
 8010950:	220a      	movs	r2, #10
 8010952:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010954:	e0bd      	b.n	8010ad2 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8010956:	7bbb      	ldrb	r3, [r7, #14]
 8010958:	b2db      	uxtb	r3, r3
 801095a:	2b03      	cmp	r3, #3
 801095c:	f040 80b9 	bne.w	8010ad2 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8010960:	687b      	ldr	r3, [r7, #4]
 8010962:	220a      	movs	r2, #10
 8010964:	701a      	strb	r2, [r3, #0]
      break;
 8010966:	e0b4      	b.n	8010ad2 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	220a      	movs	r2, #10
 801096c:	701a      	strb	r2, [r3, #0]
      break;
 801096e:	e0b0      	b.n	8010ad2 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8010976:	2b00      	cmp	r3, #0
 8010978:	f000 80ad 	beq.w	8010ad6 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8010984:	2300      	movs	r3, #0
 8010986:	73fb      	strb	r3, [r7, #15]
 8010988:	e016      	b.n	80109b8 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 801098a:	7bfa      	ldrb	r2, [r7, #15]
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	32de      	adds	r2, #222	; 0xde
 8010990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010994:	791a      	ldrb	r2, [r3, #4]
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 801099c:	429a      	cmp	r2, r3
 801099e:	d108      	bne.n	80109b2 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80109a0:	7bfa      	ldrb	r2, [r7, #15]
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	32de      	adds	r2, #222	; 0xde
 80109a6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80109b0:	e005      	b.n	80109be <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80109b2:	7bfb      	ldrb	r3, [r7, #15]
 80109b4:	3301      	adds	r3, #1
 80109b6:	73fb      	strb	r3, [r7, #15]
 80109b8:	7bfb      	ldrb	r3, [r7, #15]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d0e5      	beq.n	801098a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80109be:	687b      	ldr	r3, [r7, #4]
 80109c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80109c4:	2b00      	cmp	r3, #0
 80109c6:	d016      	beq.n	80109f6 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80109ce:	689b      	ldr	r3, [r3, #8]
 80109d0:	6878      	ldr	r0, [r7, #4]
 80109d2:	4798      	blx	r3
 80109d4:	4603      	mov	r3, r0
 80109d6:	2b00      	cmp	r3, #0
 80109d8:	d109      	bne.n	80109ee <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80109da:	687b      	ldr	r3, [r7, #4]
 80109dc:	2206      	movs	r2, #6
 80109de:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80109e6:	2103      	movs	r1, #3
 80109e8:	6878      	ldr	r0, [r7, #4]
 80109ea:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80109ec:	e073      	b.n	8010ad6 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	220d      	movs	r2, #13
 80109f2:	701a      	strb	r2, [r3, #0]
      break;
 80109f4:	e06f      	b.n	8010ad6 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 80109f6:	687b      	ldr	r3, [r7, #4]
 80109f8:	220d      	movs	r2, #13
 80109fa:	701a      	strb	r2, [r3, #0]
      break;
 80109fc:	e06b      	b.n	8010ad6 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a04:	2b00      	cmp	r3, #0
 8010a06:	d017      	beq.n	8010a38 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a0e:	691b      	ldr	r3, [r3, #16]
 8010a10:	6878      	ldr	r0, [r7, #4]
 8010a12:	4798      	blx	r3
 8010a14:	4603      	mov	r3, r0
 8010a16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8010a18:	7bbb      	ldrb	r3, [r7, #14]
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	d103      	bne.n	8010a28 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8010a20:	687b      	ldr	r3, [r7, #4]
 8010a22:	220b      	movs	r2, #11
 8010a24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010a26:	e058      	b.n	8010ada <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8010a28:	7bbb      	ldrb	r3, [r7, #14]
 8010a2a:	b2db      	uxtb	r3, r3
 8010a2c:	2b02      	cmp	r3, #2
 8010a2e:	d154      	bne.n	8010ada <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8010a30:	687b      	ldr	r3, [r7, #4]
 8010a32:	220d      	movs	r2, #13
 8010a34:	701a      	strb	r2, [r3, #0]
      break;
 8010a36:	e050      	b.n	8010ada <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	220d      	movs	r2, #13
 8010a3c:	701a      	strb	r2, [r3, #0]
      break;
 8010a3e:	e04c      	b.n	8010ada <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8010a40:	687b      	ldr	r3, [r7, #4]
 8010a42:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a46:	2b00      	cmp	r3, #0
 8010a48:	d049      	beq.n	8010ade <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a50:	695b      	ldr	r3, [r3, #20]
 8010a52:	6878      	ldr	r0, [r7, #4]
 8010a54:	4798      	blx	r3
      }
      break;
 8010a56:	e042      	b.n	8010ade <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	2200      	movs	r2, #0
 8010a5c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8010a60:	6878      	ldr	r0, [r7, #4]
 8010a62:	f7ff fd47 	bl	80104f4 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8010a66:	687b      	ldr	r3, [r7, #4]
 8010a68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d009      	beq.n	8010a84 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8010a70:	687b      	ldr	r3, [r7, #4]
 8010a72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010a76:	68db      	ldr	r3, [r3, #12]
 8010a78:	6878      	ldr	r0, [r7, #4]
 8010a7a:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	2200      	movs	r2, #0
 8010a80:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d005      	beq.n	8010a9a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a94:	2105      	movs	r1, #5
 8010a96:	6878      	ldr	r0, [r7, #4]
 8010a98:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8010aa0:	b2db      	uxtb	r3, r3
 8010aa2:	2b01      	cmp	r3, #1
 8010aa4:	d107      	bne.n	8010ab6 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8010aa6:	687b      	ldr	r3, [r7, #4]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8010aae:	6878      	ldr	r0, [r7, #4]
 8010ab0:	f7ff fe1f 	bl	80106f2 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8010ab4:	e014      	b.n	8010ae0 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8010ab6:	6878      	ldr	r0, [r7, #4]
 8010ab8:	f005 f894 	bl	8015be4 <USBH_LL_Start>
      break;
 8010abc:	e010      	b.n	8010ae0 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8010abe:	bf00      	nop
 8010ac0:	e00e      	b.n	8010ae0 <USBH_Process+0x3cc>
      break;
 8010ac2:	bf00      	nop
 8010ac4:	e00c      	b.n	8010ae0 <USBH_Process+0x3cc>
      break;
 8010ac6:	bf00      	nop
 8010ac8:	e00a      	b.n	8010ae0 <USBH_Process+0x3cc>
    break;
 8010aca:	bf00      	nop
 8010acc:	e008      	b.n	8010ae0 <USBH_Process+0x3cc>
      break;
 8010ace:	bf00      	nop
 8010ad0:	e006      	b.n	8010ae0 <USBH_Process+0x3cc>
      break;
 8010ad2:	bf00      	nop
 8010ad4:	e004      	b.n	8010ae0 <USBH_Process+0x3cc>
      break;
 8010ad6:	bf00      	nop
 8010ad8:	e002      	b.n	8010ae0 <USBH_Process+0x3cc>
      break;
 8010ada:	bf00      	nop
 8010adc:	e000      	b.n	8010ae0 <USBH_Process+0x3cc>
      break;
 8010ade:	bf00      	nop
  }
  return USBH_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3710      	adds	r7, #16
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop

08010aec <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b088      	sub	sp, #32
 8010af0:	af04      	add	r7, sp, #16
 8010af2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8010af4:	2301      	movs	r3, #1
 8010af6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8010af8:	2301      	movs	r3, #1
 8010afa:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8010afc:	687b      	ldr	r3, [r7, #4]
 8010afe:	785b      	ldrb	r3, [r3, #1]
 8010b00:	2b07      	cmp	r3, #7
 8010b02:	f200 81c1 	bhi.w	8010e88 <USBH_HandleEnum+0x39c>
 8010b06:	a201      	add	r2, pc, #4	; (adr r2, 8010b0c <USBH_HandleEnum+0x20>)
 8010b08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010b0c:	08010b2d 	.word	0x08010b2d
 8010b10:	08010beb 	.word	0x08010beb
 8010b14:	08010c55 	.word	0x08010c55
 8010b18:	08010ce3 	.word	0x08010ce3
 8010b1c:	08010d4d 	.word	0x08010d4d
 8010b20:	08010dbd 	.word	0x08010dbd
 8010b24:	08010e03 	.word	0x08010e03
 8010b28:	08010e49 	.word	0x08010e49
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8010b2c:	2108      	movs	r1, #8
 8010b2e:	6878      	ldr	r0, [r7, #4]
 8010b30:	f000 fa50 	bl	8010fd4 <USBH_Get_DevDesc>
 8010b34:	4603      	mov	r3, r0
 8010b36:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010b38:	7bbb      	ldrb	r3, [r7, #14]
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d130      	bne.n	8010ba0 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8010b3e:	687b      	ldr	r3, [r7, #4]
 8010b40:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	2201      	movs	r2, #1
 8010b4c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010b4e:	687b      	ldr	r3, [r7, #4]
 8010b50:	7919      	ldrb	r1, [r3, #4]
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010b5e:	687a      	ldr	r2, [r7, #4]
 8010b60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8010b62:	b292      	uxth	r2, r2
 8010b64:	9202      	str	r2, [sp, #8]
 8010b66:	2200      	movs	r2, #0
 8010b68:	9201      	str	r2, [sp, #4]
 8010b6a:	9300      	str	r3, [sp, #0]
 8010b6c:	4603      	mov	r3, r0
 8010b6e:	2280      	movs	r2, #128	; 0x80
 8010b70:	6878      	ldr	r0, [r7, #4]
 8010b72:	f001 f83f 	bl	8011bf4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010b76:	687b      	ldr	r3, [r7, #4]
 8010b78:	7959      	ldrb	r1, [r3, #5]
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010b86:	687a      	ldr	r2, [r7, #4]
 8010b88:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010b8a:	b292      	uxth	r2, r2
 8010b8c:	9202      	str	r2, [sp, #8]
 8010b8e:	2200      	movs	r2, #0
 8010b90:	9201      	str	r2, [sp, #4]
 8010b92:	9300      	str	r3, [sp, #0]
 8010b94:	4603      	mov	r3, r0
 8010b96:	2200      	movs	r2, #0
 8010b98:	6878      	ldr	r0, [r7, #4]
 8010b9a:	f001 f82b 	bl	8011bf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010b9e:	e175      	b.n	8010e8c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010ba0:	7bbb      	ldrb	r3, [r7, #14]
 8010ba2:	2b03      	cmp	r3, #3
 8010ba4:	f040 8172 	bne.w	8010e8c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010bae:	3301      	adds	r3, #1
 8010bb0:	b2da      	uxtb	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010bbe:	2b03      	cmp	r3, #3
 8010bc0:	d903      	bls.n	8010bca <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	220d      	movs	r2, #13
 8010bc6:	701a      	strb	r2, [r3, #0]
      break;
 8010bc8:	e160      	b.n	8010e8c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	795b      	ldrb	r3, [r3, #5]
 8010bce:	4619      	mov	r1, r3
 8010bd0:	6878      	ldr	r0, [r7, #4]
 8010bd2:	f001 f85f 	bl	8011c94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	791b      	ldrb	r3, [r3, #4]
 8010bda:	4619      	mov	r1, r3
 8010bdc:	6878      	ldr	r0, [r7, #4]
 8010bde:	f001 f859 	bl	8011c94 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	2200      	movs	r2, #0
 8010be6:	701a      	strb	r2, [r3, #0]
      break;
 8010be8:	e150      	b.n	8010e8c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8010bea:	2112      	movs	r1, #18
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 f9f1 	bl	8010fd4 <USBH_Get_DevDesc>
 8010bf2:	4603      	mov	r3, r0
 8010bf4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010bf6:	7bbb      	ldrb	r3, [r7, #14]
 8010bf8:	2b00      	cmp	r3, #0
 8010bfa:	d103      	bne.n	8010c04 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8010bfc:	687b      	ldr	r3, [r7, #4]
 8010bfe:	2202      	movs	r2, #2
 8010c00:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010c02:	e145      	b.n	8010e90 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010c04:	7bbb      	ldrb	r3, [r7, #14]
 8010c06:	2b03      	cmp	r3, #3
 8010c08:	f040 8142 	bne.w	8010e90 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8010c0c:	687b      	ldr	r3, [r7, #4]
 8010c0e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010c12:	3301      	adds	r3, #1
 8010c14:	b2da      	uxtb	r2, r3
 8010c16:	687b      	ldr	r3, [r7, #4]
 8010c18:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010c1c:	687b      	ldr	r3, [r7, #4]
 8010c1e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010c22:	2b03      	cmp	r3, #3
 8010c24:	d903      	bls.n	8010c2e <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8010c26:	687b      	ldr	r3, [r7, #4]
 8010c28:	220d      	movs	r2, #13
 8010c2a:	701a      	strb	r2, [r3, #0]
      break;
 8010c2c:	e130      	b.n	8010e90 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010c2e:	687b      	ldr	r3, [r7, #4]
 8010c30:	795b      	ldrb	r3, [r3, #5]
 8010c32:	4619      	mov	r1, r3
 8010c34:	6878      	ldr	r0, [r7, #4]
 8010c36:	f001 f82d 	bl	8011c94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010c3a:	687b      	ldr	r3, [r7, #4]
 8010c3c:	791b      	ldrb	r3, [r3, #4]
 8010c3e:	4619      	mov	r1, r3
 8010c40:	6878      	ldr	r0, [r7, #4]
 8010c42:	f001 f827 	bl	8011c94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2200      	movs	r2, #0
 8010c4a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	2200      	movs	r2, #0
 8010c50:	701a      	strb	r2, [r3, #0]
      break;
 8010c52:	e11d      	b.n	8010e90 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010c54:	2101      	movs	r1, #1
 8010c56:	6878      	ldr	r0, [r7, #4]
 8010c58:	f000 fa68 	bl	801112c <USBH_SetAddress>
 8010c5c:	4603      	mov	r3, r0
 8010c5e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010c60:	7bbb      	ldrb	r3, [r7, #14]
 8010c62:	2b00      	cmp	r3, #0
 8010c64:	d132      	bne.n	8010ccc <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8010c66:	2002      	movs	r0, #2
 8010c68:	f005 f920 	bl	8015eac <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2201      	movs	r2, #1
 8010c70:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	2203      	movs	r2, #3
 8010c78:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010c7a:	687b      	ldr	r3, [r7, #4]
 8010c7c:	7919      	ldrb	r1, [r3, #4]
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010c84:	687b      	ldr	r3, [r7, #4]
 8010c86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010c8a:	687a      	ldr	r2, [r7, #4]
 8010c8c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010c8e:	b292      	uxth	r2, r2
 8010c90:	9202      	str	r2, [sp, #8]
 8010c92:	2200      	movs	r2, #0
 8010c94:	9201      	str	r2, [sp, #4]
 8010c96:	9300      	str	r3, [sp, #0]
 8010c98:	4603      	mov	r3, r0
 8010c9a:	2280      	movs	r2, #128	; 0x80
 8010c9c:	6878      	ldr	r0, [r7, #4]
 8010c9e:	f000 ffa9 	bl	8011bf4 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	7959      	ldrb	r1, [r3, #5]
 8010ca6:	687b      	ldr	r3, [r7, #4]
 8010ca8:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010cac:	687b      	ldr	r3, [r7, #4]
 8010cae:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010cb2:	687a      	ldr	r2, [r7, #4]
 8010cb4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010cb6:	b292      	uxth	r2, r2
 8010cb8:	9202      	str	r2, [sp, #8]
 8010cba:	2200      	movs	r2, #0
 8010cbc:	9201      	str	r2, [sp, #4]
 8010cbe:	9300      	str	r3, [sp, #0]
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	2200      	movs	r2, #0
 8010cc4:	6878      	ldr	r0, [r7, #4]
 8010cc6:	f000 ff95 	bl	8011bf4 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8010cca:	e0e3      	b.n	8010e94 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010ccc:	7bbb      	ldrb	r3, [r7, #14]
 8010cce:	2b03      	cmp	r3, #3
 8010cd0:	f040 80e0 	bne.w	8010e94 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	220d      	movs	r2, #13
 8010cd8:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8010cda:	687b      	ldr	r3, [r7, #4]
 8010cdc:	2200      	movs	r2, #0
 8010cde:	705a      	strb	r2, [r3, #1]
      break;
 8010ce0:	e0d8      	b.n	8010e94 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8010ce2:	2109      	movs	r1, #9
 8010ce4:	6878      	ldr	r0, [r7, #4]
 8010ce6:	f000 f99d 	bl	8011024 <USBH_Get_CfgDesc>
 8010cea:	4603      	mov	r3, r0
 8010cec:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010cee:	7bbb      	ldrb	r3, [r7, #14]
 8010cf0:	2b00      	cmp	r3, #0
 8010cf2:	d103      	bne.n	8010cfc <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8010cf4:	687b      	ldr	r3, [r7, #4]
 8010cf6:	2204      	movs	r2, #4
 8010cf8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010cfa:	e0cd      	b.n	8010e98 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010cfc:	7bbb      	ldrb	r3, [r7, #14]
 8010cfe:	2b03      	cmp	r3, #3
 8010d00:	f040 80ca 	bne.w	8010e98 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d0a:	3301      	adds	r3, #1
 8010d0c:	b2da      	uxtb	r2, r3
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010d14:	687b      	ldr	r3, [r7, #4]
 8010d16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d1a:	2b03      	cmp	r3, #3
 8010d1c:	d903      	bls.n	8010d26 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	220d      	movs	r2, #13
 8010d22:	701a      	strb	r2, [r3, #0]
      break;
 8010d24:	e0b8      	b.n	8010e98 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	795b      	ldrb	r3, [r3, #5]
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f000 ffb1 	bl	8011c94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	791b      	ldrb	r3, [r3, #4]
 8010d36:	4619      	mov	r1, r3
 8010d38:	6878      	ldr	r0, [r7, #4]
 8010d3a:	f000 ffab 	bl	8011c94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	2200      	movs	r2, #0
 8010d42:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	2200      	movs	r2, #0
 8010d48:	701a      	strb	r2, [r3, #0]
      break;
 8010d4a:	e0a5      	b.n	8010e98 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8010d52:	4619      	mov	r1, r3
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f000 f965 	bl	8011024 <USBH_Get_CfgDesc>
 8010d5a:	4603      	mov	r3, r0
 8010d5c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010d5e:	7bbb      	ldrb	r3, [r7, #14]
 8010d60:	2b00      	cmp	r3, #0
 8010d62:	d103      	bne.n	8010d6c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010d64:	687b      	ldr	r3, [r7, #4]
 8010d66:	2205      	movs	r2, #5
 8010d68:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8010d6a:	e097      	b.n	8010e9c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010d6c:	7bbb      	ldrb	r3, [r7, #14]
 8010d6e:	2b03      	cmp	r3, #3
 8010d70:	f040 8094 	bne.w	8010e9c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d7a:	3301      	adds	r3, #1
 8010d7c:	b2da      	uxtb	r2, r3
 8010d7e:	687b      	ldr	r3, [r7, #4]
 8010d80:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8010d8a:	2b03      	cmp	r3, #3
 8010d8c:	d903      	bls.n	8010d96 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	220d      	movs	r2, #13
 8010d92:	701a      	strb	r2, [r3, #0]
      break;
 8010d94:	e082      	b.n	8010e9c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010d96:	687b      	ldr	r3, [r7, #4]
 8010d98:	795b      	ldrb	r3, [r3, #5]
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f000 ff79 	bl	8011c94 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	791b      	ldrb	r3, [r3, #4]
 8010da6:	4619      	mov	r1, r3
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 ff73 	bl	8011c94 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	2200      	movs	r2, #0
 8010db2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	701a      	strb	r2, [r3, #0]
      break;
 8010dba:	e06f      	b.n	8010e9c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010dbc:	687b      	ldr	r3, [r7, #4]
 8010dbe:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010dc2:	2b00      	cmp	r3, #0
 8010dc4:	d019      	beq.n	8010dfa <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010dc6:	687b      	ldr	r3, [r7, #4]
 8010dc8:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010dd2:	23ff      	movs	r3, #255	; 0xff
 8010dd4:	6878      	ldr	r0, [r7, #4]
 8010dd6:	f000 f949 	bl	801106c <USBH_Get_StringDesc>
 8010dda:	4603      	mov	r3, r0
 8010ddc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010dde:	7bbb      	ldrb	r3, [r7, #14]
 8010de0:	2b00      	cmp	r3, #0
 8010de2:	d103      	bne.n	8010dec <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	2206      	movs	r2, #6
 8010de8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010dea:	e059      	b.n	8010ea0 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010dec:	7bbb      	ldrb	r3, [r7, #14]
 8010dee:	2b03      	cmp	r3, #3
 8010df0:	d156      	bne.n	8010ea0 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	2206      	movs	r2, #6
 8010df6:	705a      	strb	r2, [r3, #1]
      break;
 8010df8:	e052      	b.n	8010ea0 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	2206      	movs	r2, #6
 8010dfe:	705a      	strb	r2, [r3, #1]
      break;
 8010e00:	e04e      	b.n	8010ea0 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d019      	beq.n	8010e40 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8010e18:	23ff      	movs	r3, #255	; 0xff
 8010e1a:	6878      	ldr	r0, [r7, #4]
 8010e1c:	f000 f926 	bl	801106c <USBH_Get_StringDesc>
 8010e20:	4603      	mov	r3, r0
 8010e22:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010e24:	7bbb      	ldrb	r3, [r7, #14]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d103      	bne.n	8010e32 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2207      	movs	r2, #7
 8010e2e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8010e30:	e038      	b.n	8010ea4 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010e32:	7bbb      	ldrb	r3, [r7, #14]
 8010e34:	2b03      	cmp	r3, #3
 8010e36:	d135      	bne.n	8010ea4 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	2207      	movs	r2, #7
 8010e3c:	705a      	strb	r2, [r3, #1]
      break;
 8010e3e:	e031      	b.n	8010ea4 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	2207      	movs	r2, #7
 8010e44:	705a      	strb	r2, [r3, #1]
      break;
 8010e46:	e02d      	b.n	8010ea4 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d017      	beq.n	8010e82 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010e5e:	23ff      	movs	r3, #255	; 0xff
 8010e60:	6878      	ldr	r0, [r7, #4]
 8010e62:	f000 f903 	bl	801106c <USBH_Get_StringDesc>
 8010e66:	4603      	mov	r3, r0
 8010e68:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8010e6a:	7bbb      	ldrb	r3, [r7, #14]
 8010e6c:	2b00      	cmp	r3, #0
 8010e6e:	d102      	bne.n	8010e76 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010e70:	2300      	movs	r3, #0
 8010e72:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010e74:	e018      	b.n	8010ea8 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010e76:	7bbb      	ldrb	r3, [r7, #14]
 8010e78:	2b03      	cmp	r3, #3
 8010e7a:	d115      	bne.n	8010ea8 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8010e7c:	2300      	movs	r3, #0
 8010e7e:	73fb      	strb	r3, [r7, #15]
      break;
 8010e80:	e012      	b.n	8010ea8 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8010e82:	2300      	movs	r3, #0
 8010e84:	73fb      	strb	r3, [r7, #15]
      break;
 8010e86:	e00f      	b.n	8010ea8 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8010e88:	bf00      	nop
 8010e8a:	e00e      	b.n	8010eaa <USBH_HandleEnum+0x3be>
      break;
 8010e8c:	bf00      	nop
 8010e8e:	e00c      	b.n	8010eaa <USBH_HandleEnum+0x3be>
      break;
 8010e90:	bf00      	nop
 8010e92:	e00a      	b.n	8010eaa <USBH_HandleEnum+0x3be>
      break;
 8010e94:	bf00      	nop
 8010e96:	e008      	b.n	8010eaa <USBH_HandleEnum+0x3be>
      break;
 8010e98:	bf00      	nop
 8010e9a:	e006      	b.n	8010eaa <USBH_HandleEnum+0x3be>
      break;
 8010e9c:	bf00      	nop
 8010e9e:	e004      	b.n	8010eaa <USBH_HandleEnum+0x3be>
      break;
 8010ea0:	bf00      	nop
 8010ea2:	e002      	b.n	8010eaa <USBH_HandleEnum+0x3be>
      break;
 8010ea4:	bf00      	nop
 8010ea6:	e000      	b.n	8010eaa <USBH_HandleEnum+0x3be>
      break;
 8010ea8:	bf00      	nop
  }
  return Status;
 8010eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8010eac:	4618      	mov	r0, r3
 8010eae:	3710      	adds	r7, #16
 8010eb0:	46bd      	mov	sp, r7
 8010eb2:	bd80      	pop	{r7, pc}

08010eb4 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b083      	sub	sp, #12
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	6078      	str	r0, [r7, #4]
 8010ebc:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010ebe:	687b      	ldr	r3, [r7, #4]
 8010ec0:	683a      	ldr	r2, [r7, #0]
 8010ec2:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8010ec6:	bf00      	nop
 8010ec8:	370c      	adds	r7, #12
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed0:	4770      	bx	lr

08010ed2 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010ed2:	b580      	push	{r7, lr}
 8010ed4:	b082      	sub	sp, #8
 8010ed6:	af00      	add	r7, sp, #0
 8010ed8:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010ee0:	1c5a      	adds	r2, r3, #1
 8010ee2:	687b      	ldr	r3, [r7, #4]
 8010ee4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 f804 	bl	8010ef6 <USBH_HandleSof>
}
 8010eee:	bf00      	nop
 8010ef0:	3708      	adds	r7, #8
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}

08010ef6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8010ef6:	b580      	push	{r7, lr}
 8010ef8:	b082      	sub	sp, #8
 8010efa:	af00      	add	r7, sp, #0
 8010efc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	781b      	ldrb	r3, [r3, #0]
 8010f02:	b2db      	uxtb	r3, r3
 8010f04:	2b0b      	cmp	r3, #11
 8010f06:	d10a      	bne.n	8010f1e <USBH_HandleSof+0x28>
 8010f08:	687b      	ldr	r3, [r7, #4]
 8010f0a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010f0e:	2b00      	cmp	r3, #0
 8010f10:	d005      	beq.n	8010f1e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8010f12:	687b      	ldr	r3, [r7, #4]
 8010f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8010f18:	699b      	ldr	r3, [r3, #24]
 8010f1a:	6878      	ldr	r0, [r7, #4]
 8010f1c:	4798      	blx	r3
  }
}
 8010f1e:	bf00      	nop
 8010f20:	3708      	adds	r7, #8
 8010f22:	46bd      	mov	sp, r7
 8010f24:	bd80      	pop	{r7, pc}

08010f26 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8010f26:	b480      	push	{r7}
 8010f28:	b083      	sub	sp, #12
 8010f2a:	af00      	add	r7, sp, #0
 8010f2c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	2201      	movs	r2, #1
 8010f32:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8010f36:	bf00      	nop
}
 8010f38:	370c      	adds	r7, #12
 8010f3a:	46bd      	mov	sp, r7
 8010f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f40:	4770      	bx	lr

08010f42 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010f42:	b480      	push	{r7}
 8010f44:	b083      	sub	sp, #12
 8010f46:	af00      	add	r7, sp, #0
 8010f48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8010f52:	bf00      	nop
}
 8010f54:	370c      	adds	r7, #12
 8010f56:	46bd      	mov	sp, r7
 8010f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f5c:	4770      	bx	lr

08010f5e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010f5e:	b480      	push	{r7}
 8010f60:	b083      	sub	sp, #12
 8010f62:	af00      	add	r7, sp, #0
 8010f64:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	2201      	movs	r2, #1
 8010f6a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2200      	movs	r2, #0
 8010f72:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	2200      	movs	r2, #0
 8010f7a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010f7e:	2300      	movs	r3, #0
}
 8010f80:	4618      	mov	r0, r3
 8010f82:	370c      	adds	r7, #12
 8010f84:	46bd      	mov	sp, r7
 8010f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f8a:	4770      	bx	lr

08010f8c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010f8c:	b580      	push	{r7, lr}
 8010f8e:	b082      	sub	sp, #8
 8010f90:	af00      	add	r7, sp, #0
 8010f92:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010f94:	687b      	ldr	r3, [r7, #4]
 8010f96:	2201      	movs	r2, #1
 8010f98:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8010f9c:	687b      	ldr	r3, [r7, #4]
 8010f9e:	2200      	movs	r2, #0
 8010fa0:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	2200      	movs	r2, #0
 8010fa8:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010fac:	6878      	ldr	r0, [r7, #4]
 8010fae:	f004 fe34 	bl	8015c1a <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	791b      	ldrb	r3, [r3, #4]
 8010fb6:	4619      	mov	r1, r3
 8010fb8:	6878      	ldr	r0, [r7, #4]
 8010fba:	f000 fe6b 	bl	8011c94 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	795b      	ldrb	r3, [r3, #5]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	6878      	ldr	r0, [r7, #4]
 8010fc6:	f000 fe65 	bl	8011c94 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010fca:	2300      	movs	r3, #0
}
 8010fcc:	4618      	mov	r0, r3
 8010fce:	3708      	adds	r7, #8
 8010fd0:	46bd      	mov	sp, r7
 8010fd2:	bd80      	pop	{r7, pc}

08010fd4 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8010fd4:	b580      	push	{r7, lr}
 8010fd6:	b086      	sub	sp, #24
 8010fd8:	af02      	add	r7, sp, #8
 8010fda:	6078      	str	r0, [r7, #4]
 8010fdc:	460b      	mov	r3, r1
 8010fde:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8010fe6:	78fb      	ldrb	r3, [r7, #3]
 8010fe8:	b29b      	uxth	r3, r3
 8010fea:	9300      	str	r3, [sp, #0]
 8010fec:	4613      	mov	r3, r2
 8010fee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010ff2:	2100      	movs	r1, #0
 8010ff4:	6878      	ldr	r0, [r7, #4]
 8010ff6:	f000 f864 	bl	80110c2 <USBH_GetDescriptor>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8010ffe:	7bfb      	ldrb	r3, [r7, #15]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d10a      	bne.n	801101a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f203 3026 	addw	r0, r3, #806	; 0x326
 801100a:	687b      	ldr	r3, [r7, #4]
 801100c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8011010:	78fa      	ldrb	r2, [r7, #3]
 8011012:	b292      	uxth	r2, r2
 8011014:	4619      	mov	r1, r3
 8011016:	f000 f919 	bl	801124c <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 801101a:	7bfb      	ldrb	r3, [r7, #15]
}
 801101c:	4618      	mov	r0, r3
 801101e:	3710      	adds	r7, #16
 8011020:	46bd      	mov	sp, r7
 8011022:	bd80      	pop	{r7, pc}

08011024 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8011024:	b580      	push	{r7, lr}
 8011026:	b086      	sub	sp, #24
 8011028:	af02      	add	r7, sp, #8
 801102a:	6078      	str	r0, [r7, #4]
 801102c:	460b      	mov	r3, r1
 801102e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8011030:	687b      	ldr	r3, [r7, #4]
 8011032:	331c      	adds	r3, #28
 8011034:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8011036:	887b      	ldrh	r3, [r7, #2]
 8011038:	9300      	str	r3, [sp, #0]
 801103a:	68bb      	ldr	r3, [r7, #8]
 801103c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011040:	2100      	movs	r1, #0
 8011042:	6878      	ldr	r0, [r7, #4]
 8011044:	f000 f83d 	bl	80110c2 <USBH_GetDescriptor>
 8011048:	4603      	mov	r3, r0
 801104a:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 801104c:	7bfb      	ldrb	r3, [r7, #15]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d107      	bne.n	8011062 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8011052:	887b      	ldrh	r3, [r7, #2]
 8011054:	461a      	mov	r2, r3
 8011056:	68b9      	ldr	r1, [r7, #8]
 8011058:	6878      	ldr	r0, [r7, #4]
 801105a:	f000 f987 	bl	801136c <USBH_ParseCfgDesc>
 801105e:	4603      	mov	r3, r0
 8011060:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8011062:	7bfb      	ldrb	r3, [r7, #15]
}
 8011064:	4618      	mov	r0, r3
 8011066:	3710      	adds	r7, #16
 8011068:	46bd      	mov	sp, r7
 801106a:	bd80      	pop	{r7, pc}

0801106c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 801106c:	b580      	push	{r7, lr}
 801106e:	b088      	sub	sp, #32
 8011070:	af02      	add	r7, sp, #8
 8011072:	60f8      	str	r0, [r7, #12]
 8011074:	607a      	str	r2, [r7, #4]
 8011076:	461a      	mov	r2, r3
 8011078:	460b      	mov	r3, r1
 801107a:	72fb      	strb	r3, [r7, #11]
 801107c:	4613      	mov	r3, r2
 801107e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8011080:	7afb      	ldrb	r3, [r7, #11]
 8011082:	b29b      	uxth	r3, r3
 8011084:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8011088:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8011090:	893b      	ldrh	r3, [r7, #8]
 8011092:	9300      	str	r3, [sp, #0]
 8011094:	460b      	mov	r3, r1
 8011096:	2100      	movs	r1, #0
 8011098:	68f8      	ldr	r0, [r7, #12]
 801109a:	f000 f812 	bl	80110c2 <USBH_GetDescriptor>
 801109e:	4603      	mov	r3, r0
 80110a0:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80110a2:	7dfb      	ldrb	r3, [r7, #23]
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d107      	bne.n	80110b8 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80110ae:	893a      	ldrh	r2, [r7, #8]
 80110b0:	6879      	ldr	r1, [r7, #4]
 80110b2:	4618      	mov	r0, r3
 80110b4:	f000 fafe 	bl	80116b4 <USBH_ParseStringDesc>
  }

  return status;
 80110b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80110ba:	4618      	mov	r0, r3
 80110bc:	3718      	adds	r7, #24
 80110be:	46bd      	mov	sp, r7
 80110c0:	bd80      	pop	{r7, pc}

080110c2 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 80110c2:	b580      	push	{r7, lr}
 80110c4:	b084      	sub	sp, #16
 80110c6:	af00      	add	r7, sp, #0
 80110c8:	60f8      	str	r0, [r7, #12]
 80110ca:	607b      	str	r3, [r7, #4]
 80110cc:	460b      	mov	r3, r1
 80110ce:	72fb      	strb	r3, [r7, #11]
 80110d0:	4613      	mov	r3, r2
 80110d2:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80110d4:	68fb      	ldr	r3, [r7, #12]
 80110d6:	789b      	ldrb	r3, [r3, #2]
 80110d8:	2b01      	cmp	r3, #1
 80110da:	d11c      	bne.n	8011116 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80110dc:	7afb      	ldrb	r3, [r7, #11]
 80110de:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80110e2:	b2da      	uxtb	r2, r3
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80110e8:	68fb      	ldr	r3, [r7, #12]
 80110ea:	2206      	movs	r2, #6
 80110ec:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	893a      	ldrh	r2, [r7, #8]
 80110f2:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80110f4:	893b      	ldrh	r3, [r7, #8]
 80110f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80110fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80110fe:	d104      	bne.n	801110a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	f240 4209 	movw	r2, #1033	; 0x409
 8011106:	829a      	strh	r2, [r3, #20]
 8011108:	e002      	b.n	8011110 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 801110a:	68fb      	ldr	r3, [r7, #12]
 801110c:	2200      	movs	r2, #0
 801110e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	8b3a      	ldrh	r2, [r7, #24]
 8011114:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8011116:	8b3b      	ldrh	r3, [r7, #24]
 8011118:	461a      	mov	r2, r3
 801111a:	6879      	ldr	r1, [r7, #4]
 801111c:	68f8      	ldr	r0, [r7, #12]
 801111e:	f000 fb17 	bl	8011750 <USBH_CtlReq>
 8011122:	4603      	mov	r3, r0
}
 8011124:	4618      	mov	r0, r3
 8011126:	3710      	adds	r7, #16
 8011128:	46bd      	mov	sp, r7
 801112a:	bd80      	pop	{r7, pc}

0801112c <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b082      	sub	sp, #8
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
 8011134:	460b      	mov	r3, r1
 8011136:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8011138:	687b      	ldr	r3, [r7, #4]
 801113a:	789b      	ldrb	r3, [r3, #2]
 801113c:	2b01      	cmp	r3, #1
 801113e:	d10f      	bne.n	8011160 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8011140:	687b      	ldr	r3, [r7, #4]
 8011142:	2200      	movs	r2, #0
 8011144:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8011146:	687b      	ldr	r3, [r7, #4]
 8011148:	2205      	movs	r2, #5
 801114a:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 801114c:	78fb      	ldrb	r3, [r7, #3]
 801114e:	b29a      	uxth	r2, r3
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2200      	movs	r2, #0
 8011158:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2200      	movs	r2, #0
 801115e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8011160:	2200      	movs	r2, #0
 8011162:	2100      	movs	r1, #0
 8011164:	6878      	ldr	r0, [r7, #4]
 8011166:	f000 faf3 	bl	8011750 <USBH_CtlReq>
 801116a:	4603      	mov	r3, r0
}
 801116c:	4618      	mov	r0, r3
 801116e:	3708      	adds	r7, #8
 8011170:	46bd      	mov	sp, r7
 8011172:	bd80      	pop	{r7, pc}

08011174 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	460b      	mov	r3, r1
 801117e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	789b      	ldrb	r3, [r3, #2]
 8011184:	2b01      	cmp	r3, #1
 8011186:	d10e      	bne.n	80111a6 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8011188:	687b      	ldr	r3, [r7, #4]
 801118a:	2200      	movs	r2, #0
 801118c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	2209      	movs	r2, #9
 8011192:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8011194:	687b      	ldr	r3, [r7, #4]
 8011196:	887a      	ldrh	r2, [r7, #2]
 8011198:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	2200      	movs	r2, #0
 801119e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	2200      	movs	r2, #0
 80111a4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80111a6:	2200      	movs	r2, #0
 80111a8:	2100      	movs	r1, #0
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f000 fad0 	bl	8011750 <USBH_CtlReq>
 80111b0:	4603      	mov	r3, r0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}

080111ba <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80111ba:	b580      	push	{r7, lr}
 80111bc:	b082      	sub	sp, #8
 80111be:	af00      	add	r7, sp, #0
 80111c0:	6078      	str	r0, [r7, #4]
 80111c2:	460b      	mov	r3, r1
 80111c4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80111c6:	687b      	ldr	r3, [r7, #4]
 80111c8:	789b      	ldrb	r3, [r3, #2]
 80111ca:	2b01      	cmp	r3, #1
 80111cc:	d10f      	bne.n	80111ee <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80111ce:	687b      	ldr	r3, [r7, #4]
 80111d0:	2200      	movs	r2, #0
 80111d2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80111d4:	687b      	ldr	r3, [r7, #4]
 80111d6:	2203      	movs	r2, #3
 80111d8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80111da:	78fb      	ldrb	r3, [r7, #3]
 80111dc:	b29a      	uxth	r2, r3
 80111de:	687b      	ldr	r3, [r7, #4]
 80111e0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2200      	movs	r2, #0
 80111e6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	2200      	movs	r2, #0
 80111ec:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80111ee:	2200      	movs	r2, #0
 80111f0:	2100      	movs	r1, #0
 80111f2:	6878      	ldr	r0, [r7, #4]
 80111f4:	f000 faac 	bl	8011750 <USBH_CtlReq>
 80111f8:	4603      	mov	r3, r0
}
 80111fa:	4618      	mov	r0, r3
 80111fc:	3708      	adds	r7, #8
 80111fe:	46bd      	mov	sp, r7
 8011200:	bd80      	pop	{r7, pc}

08011202 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8011202:	b580      	push	{r7, lr}
 8011204:	b082      	sub	sp, #8
 8011206:	af00      	add	r7, sp, #0
 8011208:	6078      	str	r0, [r7, #4]
 801120a:	460b      	mov	r3, r1
 801120c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	789b      	ldrb	r3, [r3, #2]
 8011212:	2b01      	cmp	r3, #1
 8011214:	d10f      	bne.n	8011236 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8011216:	687b      	ldr	r3, [r7, #4]
 8011218:	2202      	movs	r2, #2
 801121a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	2201      	movs	r2, #1
 8011220:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8011222:	687b      	ldr	r3, [r7, #4]
 8011224:	2200      	movs	r2, #0
 8011226:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8011228:	78fb      	ldrb	r3, [r7, #3]
 801122a:	b29a      	uxth	r2, r3
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8011230:	687b      	ldr	r3, [r7, #4]
 8011232:	2200      	movs	r2, #0
 8011234:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8011236:	2200      	movs	r2, #0
 8011238:	2100      	movs	r1, #0
 801123a:	6878      	ldr	r0, [r7, #4]
 801123c:	f000 fa88 	bl	8011750 <USBH_CtlReq>
 8011240:	4603      	mov	r3, r0
}
 8011242:	4618      	mov	r0, r3
 8011244:	3708      	adds	r7, #8
 8011246:	46bd      	mov	sp, r7
 8011248:	bd80      	pop	{r7, pc}
	...

0801124c <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 801124c:	b480      	push	{r7}
 801124e:	b085      	sub	sp, #20
 8011250:	af00      	add	r7, sp, #0
 8011252:	60f8      	str	r0, [r7, #12]
 8011254:	60b9      	str	r1, [r7, #8]
 8011256:	4613      	mov	r3, r2
 8011258:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 801125a:	68bb      	ldr	r3, [r7, #8]
 801125c:	781a      	ldrb	r2, [r3, #0]
 801125e:	68fb      	ldr	r3, [r7, #12]
 8011260:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8011262:	68bb      	ldr	r3, [r7, #8]
 8011264:	785a      	ldrb	r2, [r3, #1]
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 801126a:	68bb      	ldr	r3, [r7, #8]
 801126c:	3302      	adds	r3, #2
 801126e:	781b      	ldrb	r3, [r3, #0]
 8011270:	b29a      	uxth	r2, r3
 8011272:	68bb      	ldr	r3, [r7, #8]
 8011274:	3303      	adds	r3, #3
 8011276:	781b      	ldrb	r3, [r3, #0]
 8011278:	b29b      	uxth	r3, r3
 801127a:	021b      	lsls	r3, r3, #8
 801127c:	b29b      	uxth	r3, r3
 801127e:	4313      	orrs	r3, r2
 8011280:	b29a      	uxth	r2, r3
 8011282:	68fb      	ldr	r3, [r7, #12]
 8011284:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8011286:	68bb      	ldr	r3, [r7, #8]
 8011288:	791a      	ldrb	r2, [r3, #4]
 801128a:	68fb      	ldr	r3, [r7, #12]
 801128c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	795a      	ldrb	r2, [r3, #5]
 8011292:	68fb      	ldr	r3, [r7, #12]
 8011294:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8011296:	68bb      	ldr	r3, [r7, #8]
 8011298:	799a      	ldrb	r2, [r3, #6]
 801129a:	68fb      	ldr	r3, [r7, #12]
 801129c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 801129e:	68bb      	ldr	r3, [r7, #8]
 80112a0:	79da      	ldrb	r2, [r3, #7]
 80112a2:	68fb      	ldr	r3, [r7, #12]
 80112a4:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 80112a6:	68fb      	ldr	r3, [r7, #12]
 80112a8:	79db      	ldrb	r3, [r3, #7]
 80112aa:	2b20      	cmp	r3, #32
 80112ac:	dc0e      	bgt.n	80112cc <USBH_ParseDevDesc+0x80>
 80112ae:	2b08      	cmp	r3, #8
 80112b0:	db13      	blt.n	80112da <USBH_ParseDevDesc+0x8e>
 80112b2:	3b08      	subs	r3, #8
 80112b4:	2201      	movs	r2, #1
 80112b6:	409a      	lsls	r2, r3
 80112b8:	4b2b      	ldr	r3, [pc, #172]	; (8011368 <USBH_ParseDevDesc+0x11c>)
 80112ba:	4013      	ands	r3, r2
 80112bc:	2b00      	cmp	r3, #0
 80112be:	bf14      	ite	ne
 80112c0:	2301      	movne	r3, #1
 80112c2:	2300      	moveq	r3, #0
 80112c4:	b2db      	uxtb	r3, r3
 80112c6:	2b00      	cmp	r3, #0
 80112c8:	d102      	bne.n	80112d0 <USBH_ParseDevDesc+0x84>
 80112ca:	e006      	b.n	80112da <USBH_ParseDevDesc+0x8e>
 80112cc:	2b40      	cmp	r3, #64	; 0x40
 80112ce:	d104      	bne.n	80112da <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 80112d0:	68fb      	ldr	r3, [r7, #12]
 80112d2:	79da      	ldrb	r2, [r3, #7]
 80112d4:	68fb      	ldr	r3, [r7, #12]
 80112d6:	71da      	strb	r2, [r3, #7]
      break;
 80112d8:	e003      	b.n	80112e2 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 80112da:	68fb      	ldr	r3, [r7, #12]
 80112dc:	2240      	movs	r2, #64	; 0x40
 80112de:	71da      	strb	r2, [r3, #7]
      break;
 80112e0:	bf00      	nop
  }

  if (length > 8U)
 80112e2:	88fb      	ldrh	r3, [r7, #6]
 80112e4:	2b08      	cmp	r3, #8
 80112e6:	d939      	bls.n	801135c <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80112e8:	68bb      	ldr	r3, [r7, #8]
 80112ea:	3308      	adds	r3, #8
 80112ec:	781b      	ldrb	r3, [r3, #0]
 80112ee:	b29a      	uxth	r2, r3
 80112f0:	68bb      	ldr	r3, [r7, #8]
 80112f2:	3309      	adds	r3, #9
 80112f4:	781b      	ldrb	r3, [r3, #0]
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	021b      	lsls	r3, r3, #8
 80112fa:	b29b      	uxth	r3, r3
 80112fc:	4313      	orrs	r3, r2
 80112fe:	b29a      	uxth	r2, r3
 8011300:	68fb      	ldr	r3, [r7, #12]
 8011302:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8011304:	68bb      	ldr	r3, [r7, #8]
 8011306:	330a      	adds	r3, #10
 8011308:	781b      	ldrb	r3, [r3, #0]
 801130a:	b29a      	uxth	r2, r3
 801130c:	68bb      	ldr	r3, [r7, #8]
 801130e:	330b      	adds	r3, #11
 8011310:	781b      	ldrb	r3, [r3, #0]
 8011312:	b29b      	uxth	r3, r3
 8011314:	021b      	lsls	r3, r3, #8
 8011316:	b29b      	uxth	r3, r3
 8011318:	4313      	orrs	r3, r2
 801131a:	b29a      	uxth	r2, r3
 801131c:	68fb      	ldr	r3, [r7, #12]
 801131e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8011320:	68bb      	ldr	r3, [r7, #8]
 8011322:	330c      	adds	r3, #12
 8011324:	781b      	ldrb	r3, [r3, #0]
 8011326:	b29a      	uxth	r2, r3
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	330d      	adds	r3, #13
 801132c:	781b      	ldrb	r3, [r3, #0]
 801132e:	b29b      	uxth	r3, r3
 8011330:	021b      	lsls	r3, r3, #8
 8011332:	b29b      	uxth	r3, r3
 8011334:	4313      	orrs	r3, r2
 8011336:	b29a      	uxth	r2, r3
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 801133c:	68bb      	ldr	r3, [r7, #8]
 801133e:	7b9a      	ldrb	r2, [r3, #14]
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8011344:	68bb      	ldr	r3, [r7, #8]
 8011346:	7bda      	ldrb	r2, [r3, #15]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	7c1a      	ldrb	r2, [r3, #16]
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8011354:	68bb      	ldr	r3, [r7, #8]
 8011356:	7c5a      	ldrb	r2, [r3, #17]
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	745a      	strb	r2, [r3, #17]
  }
}
 801135c:	bf00      	nop
 801135e:	3714      	adds	r7, #20
 8011360:	46bd      	mov	sp, r7
 8011362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011366:	4770      	bx	lr
 8011368:	01000101 	.word	0x01000101

0801136c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 801136c:	b580      	push	{r7, lr}
 801136e:	b08c      	sub	sp, #48	; 0x30
 8011370:	af00      	add	r7, sp, #0
 8011372:	60f8      	str	r0, [r7, #12]
 8011374:	60b9      	str	r1, [r7, #8]
 8011376:	4613      	mov	r3, r2
 8011378:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801137a:	68fb      	ldr	r3, [r7, #12]
 801137c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8011380:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8011382:	2300      	movs	r3, #0
 8011384:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8011388:	68bb      	ldr	r3, [r7, #8]
 801138a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801138c:	2300      	movs	r3, #0
 801138e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8011392:	2300      	movs	r3, #0
 8011394:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8011398:	68bb      	ldr	r3, [r7, #8]
 801139a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801139c:	68bb      	ldr	r3, [r7, #8]
 801139e:	781a      	ldrb	r2, [r3, #0]
 80113a0:	6a3b      	ldr	r3, [r7, #32]
 80113a2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80113a4:	68bb      	ldr	r3, [r7, #8]
 80113a6:	785a      	ldrb	r2, [r3, #1]
 80113a8:	6a3b      	ldr	r3, [r7, #32]
 80113aa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	3302      	adds	r3, #2
 80113b0:	781b      	ldrb	r3, [r3, #0]
 80113b2:	b29a      	uxth	r2, r3
 80113b4:	68bb      	ldr	r3, [r7, #8]
 80113b6:	3303      	adds	r3, #3
 80113b8:	781b      	ldrb	r3, [r3, #0]
 80113ba:	b29b      	uxth	r3, r3
 80113bc:	021b      	lsls	r3, r3, #8
 80113be:	b29b      	uxth	r3, r3
 80113c0:	4313      	orrs	r3, r2
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80113c8:	bf28      	it	cs
 80113ca:	f44f 7380 	movcs.w	r3, #256	; 0x100
 80113ce:	b29a      	uxth	r2, r3
 80113d0:	6a3b      	ldr	r3, [r7, #32]
 80113d2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 80113d4:	68bb      	ldr	r3, [r7, #8]
 80113d6:	791a      	ldrb	r2, [r3, #4]
 80113d8:	6a3b      	ldr	r3, [r7, #32]
 80113da:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80113dc:	68bb      	ldr	r3, [r7, #8]
 80113de:	795a      	ldrb	r2, [r3, #5]
 80113e0:	6a3b      	ldr	r3, [r7, #32]
 80113e2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80113e4:	68bb      	ldr	r3, [r7, #8]
 80113e6:	799a      	ldrb	r2, [r3, #6]
 80113e8:	6a3b      	ldr	r3, [r7, #32]
 80113ea:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80113ec:	68bb      	ldr	r3, [r7, #8]
 80113ee:	79da      	ldrb	r2, [r3, #7]
 80113f0:	6a3b      	ldr	r3, [r7, #32]
 80113f2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80113f4:	68bb      	ldr	r3, [r7, #8]
 80113f6:	7a1a      	ldrb	r2, [r3, #8]
 80113f8:	6a3b      	ldr	r3, [r7, #32]
 80113fa:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80113fc:	6a3b      	ldr	r3, [r7, #32]
 80113fe:	781b      	ldrb	r3, [r3, #0]
 8011400:	2b09      	cmp	r3, #9
 8011402:	d002      	beq.n	801140a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8011404:	6a3b      	ldr	r3, [r7, #32]
 8011406:	2209      	movs	r2, #9
 8011408:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801140a:	88fb      	ldrh	r3, [r7, #6]
 801140c:	2b09      	cmp	r3, #9
 801140e:	f240 8099 	bls.w	8011544 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8011412:	2309      	movs	r3, #9
 8011414:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8011416:	2300      	movs	r3, #0
 8011418:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801141a:	e07d      	b.n	8011518 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801141c:	f107 0316 	add.w	r3, r7, #22
 8011420:	4619      	mov	r1, r3
 8011422:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011424:	f000 f979 	bl	801171a <USBH_GetNextDesc>
 8011428:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 801142a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142c:	785b      	ldrb	r3, [r3, #1]
 801142e:	2b04      	cmp	r3, #4
 8011430:	d172      	bne.n	8011518 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8011432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011434:	781b      	ldrb	r3, [r3, #0]
 8011436:	2b09      	cmp	r3, #9
 8011438:	d002      	beq.n	8011440 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 801143a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801143c:	2209      	movs	r2, #9
 801143e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8011440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011444:	221a      	movs	r2, #26
 8011446:	fb02 f303 	mul.w	r3, r2, r3
 801144a:	3308      	adds	r3, #8
 801144c:	6a3a      	ldr	r2, [r7, #32]
 801144e:	4413      	add	r3, r2
 8011450:	3302      	adds	r3, #2
 8011452:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8011454:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011456:	69f8      	ldr	r0, [r7, #28]
 8011458:	f000 f87a 	bl	8011550 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 801145c:	2300      	movs	r3, #0
 801145e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8011462:	2300      	movs	r3, #0
 8011464:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8011466:	e03f      	b.n	80114e8 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8011468:	f107 0316 	add.w	r3, r7, #22
 801146c:	4619      	mov	r1, r3
 801146e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8011470:	f000 f953 	bl	801171a <USBH_GetNextDesc>
 8011474:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8011476:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011478:	785b      	ldrb	r3, [r3, #1]
 801147a:	2b05      	cmp	r3, #5
 801147c:	d134      	bne.n	80114e8 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 801147e:	69fb      	ldr	r3, [r7, #28]
 8011480:	795b      	ldrb	r3, [r3, #5]
 8011482:	2b01      	cmp	r3, #1
 8011484:	d10f      	bne.n	80114a6 <USBH_ParseCfgDesc+0x13a>
 8011486:	69fb      	ldr	r3, [r7, #28]
 8011488:	799b      	ldrb	r3, [r3, #6]
 801148a:	2b02      	cmp	r3, #2
 801148c:	d10b      	bne.n	80114a6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801148e:	69fb      	ldr	r3, [r7, #28]
 8011490:	79db      	ldrb	r3, [r3, #7]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d10b      	bne.n	80114ae <USBH_ParseCfgDesc+0x142>
 8011496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011498:	781b      	ldrb	r3, [r3, #0]
 801149a:	2b09      	cmp	r3, #9
 801149c:	d007      	beq.n	80114ae <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 801149e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a0:	2209      	movs	r2, #9
 80114a2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80114a4:	e003      	b.n	80114ae <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80114a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80114a8:	2207      	movs	r2, #7
 80114aa:	701a      	strb	r2, [r3, #0]
 80114ac:	e000      	b.n	80114b0 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80114ae:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80114b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114b4:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80114b8:	3201      	adds	r2, #1
 80114ba:	00d2      	lsls	r2, r2, #3
 80114bc:	211a      	movs	r1, #26
 80114be:	fb01 f303 	mul.w	r3, r1, r3
 80114c2:	4413      	add	r3, r2
 80114c4:	3308      	adds	r3, #8
 80114c6:	6a3a      	ldr	r2, [r7, #32]
 80114c8:	4413      	add	r3, r2
 80114ca:	3304      	adds	r3, #4
 80114cc:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 80114ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80114d0:	69b9      	ldr	r1, [r7, #24]
 80114d2:	68f8      	ldr	r0, [r7, #12]
 80114d4:	f000 f86c 	bl	80115b0 <USBH_ParseEPDesc>
 80114d8:	4603      	mov	r3, r0
 80114da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80114de:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80114e2:	3301      	adds	r3, #1
 80114e4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80114e8:	69fb      	ldr	r3, [r7, #28]
 80114ea:	791b      	ldrb	r3, [r3, #4]
 80114ec:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80114f0:	429a      	cmp	r2, r3
 80114f2:	d204      	bcs.n	80114fe <USBH_ParseCfgDesc+0x192>
 80114f4:	6a3b      	ldr	r3, [r7, #32]
 80114f6:	885a      	ldrh	r2, [r3, #2]
 80114f8:	8afb      	ldrh	r3, [r7, #22]
 80114fa:	429a      	cmp	r2, r3
 80114fc:	d8b4      	bhi.n	8011468 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80114fe:	69fb      	ldr	r3, [r7, #28]
 8011500:	791b      	ldrb	r3, [r3, #4]
 8011502:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8011506:	429a      	cmp	r2, r3
 8011508:	d201      	bcs.n	801150e <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 801150a:	2303      	movs	r3, #3
 801150c:	e01c      	b.n	8011548 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 801150e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011512:	3301      	adds	r3, #1
 8011514:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8011518:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801151c:	2b01      	cmp	r3, #1
 801151e:	d805      	bhi.n	801152c <USBH_ParseCfgDesc+0x1c0>
 8011520:	6a3b      	ldr	r3, [r7, #32]
 8011522:	885a      	ldrh	r2, [r3, #2]
 8011524:	8afb      	ldrh	r3, [r7, #22]
 8011526:	429a      	cmp	r2, r3
 8011528:	f63f af78 	bhi.w	801141c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 801152c:	6a3b      	ldr	r3, [r7, #32]
 801152e:	791b      	ldrb	r3, [r3, #4]
 8011530:	2b02      	cmp	r3, #2
 8011532:	bf28      	it	cs
 8011534:	2302      	movcs	r3, #2
 8011536:	b2db      	uxtb	r3, r3
 8011538:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801153c:	429a      	cmp	r2, r3
 801153e:	d201      	bcs.n	8011544 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 8011540:	2303      	movs	r3, #3
 8011542:	e001      	b.n	8011548 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8011544:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8011548:	4618      	mov	r0, r3
 801154a:	3730      	adds	r7, #48	; 0x30
 801154c:	46bd      	mov	sp, r7
 801154e:	bd80      	pop	{r7, pc}

08011550 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8011550:	b480      	push	{r7}
 8011552:	b083      	sub	sp, #12
 8011554:	af00      	add	r7, sp, #0
 8011556:	6078      	str	r0, [r7, #4]
 8011558:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 801155a:	683b      	ldr	r3, [r7, #0]
 801155c:	781a      	ldrb	r2, [r3, #0]
 801155e:	687b      	ldr	r3, [r7, #4]
 8011560:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8011562:	683b      	ldr	r3, [r7, #0]
 8011564:	785a      	ldrb	r2, [r3, #1]
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 801156a:	683b      	ldr	r3, [r7, #0]
 801156c:	789a      	ldrb	r2, [r3, #2]
 801156e:	687b      	ldr	r3, [r7, #4]
 8011570:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8011572:	683b      	ldr	r3, [r7, #0]
 8011574:	78da      	ldrb	r2, [r3, #3]
 8011576:	687b      	ldr	r3, [r7, #4]
 8011578:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 801157a:	683b      	ldr	r3, [r7, #0]
 801157c:	791a      	ldrb	r2, [r3, #4]
 801157e:	687b      	ldr	r3, [r7, #4]
 8011580:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8011582:	683b      	ldr	r3, [r7, #0]
 8011584:	795a      	ldrb	r2, [r3, #5]
 8011586:	687b      	ldr	r3, [r7, #4]
 8011588:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 801158a:	683b      	ldr	r3, [r7, #0]
 801158c:	799a      	ldrb	r2, [r3, #6]
 801158e:	687b      	ldr	r3, [r7, #4]
 8011590:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8011592:	683b      	ldr	r3, [r7, #0]
 8011594:	79da      	ldrb	r2, [r3, #7]
 8011596:	687b      	ldr	r3, [r7, #4]
 8011598:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801159a:	683b      	ldr	r3, [r7, #0]
 801159c:	7a1a      	ldrb	r2, [r3, #8]
 801159e:	687b      	ldr	r3, [r7, #4]
 80115a0:	721a      	strb	r2, [r3, #8]
}
 80115a2:	bf00      	nop
 80115a4:	370c      	adds	r7, #12
 80115a6:	46bd      	mov	sp, r7
 80115a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ac:	4770      	bx	lr
	...

080115b0 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 80115b0:	b480      	push	{r7}
 80115b2:	b087      	sub	sp, #28
 80115b4:	af00      	add	r7, sp, #0
 80115b6:	60f8      	str	r0, [r7, #12]
 80115b8:	60b9      	str	r1, [r7, #8]
 80115ba:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80115bc:	2300      	movs	r3, #0
 80115be:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	781a      	ldrb	r2, [r3, #0]
 80115c4:	68bb      	ldr	r3, [r7, #8]
 80115c6:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	785a      	ldrb	r2, [r3, #1]
 80115cc:	68bb      	ldr	r3, [r7, #8]
 80115ce:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	789a      	ldrb	r2, [r3, #2]
 80115d4:	68bb      	ldr	r3, [r7, #8]
 80115d6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 80115d8:	687b      	ldr	r3, [r7, #4]
 80115da:	78da      	ldrb	r2, [r3, #3]
 80115dc:	68bb      	ldr	r3, [r7, #8]
 80115de:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80115e0:	687b      	ldr	r3, [r7, #4]
 80115e2:	3304      	adds	r3, #4
 80115e4:	781b      	ldrb	r3, [r3, #0]
 80115e6:	b29a      	uxth	r2, r3
 80115e8:	687b      	ldr	r3, [r7, #4]
 80115ea:	3305      	adds	r3, #5
 80115ec:	781b      	ldrb	r3, [r3, #0]
 80115ee:	b29b      	uxth	r3, r3
 80115f0:	021b      	lsls	r3, r3, #8
 80115f2:	b29b      	uxth	r3, r3
 80115f4:	4313      	orrs	r3, r2
 80115f6:	b29a      	uxth	r2, r3
 80115f8:	68bb      	ldr	r3, [r7, #8]
 80115fa:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	799a      	ldrb	r2, [r3, #6]
 8011600:	68bb      	ldr	r3, [r7, #8]
 8011602:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	889b      	ldrh	r3, [r3, #4]
 8011608:	2b00      	cmp	r3, #0
 801160a:	d102      	bne.n	8011612 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 801160c:	2303      	movs	r3, #3
 801160e:	75fb      	strb	r3, [r7, #23]
 8011610:	e00d      	b.n	801162e <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8011612:	68bb      	ldr	r3, [r7, #8]
 8011614:	889a      	ldrh	r2, [r3, #4]
 8011616:	4b26      	ldr	r3, [pc, #152]	; (80116b0 <USBH_ParseEPDesc+0x100>)
 8011618:	4013      	ands	r3, r2
 801161a:	b29a      	uxth	r2, r3
 801161c:	68bb      	ldr	r3, [r7, #8]
 801161e:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 8011620:	68bb      	ldr	r3, [r7, #8]
 8011622:	889b      	ldrh	r3, [r3, #4]
 8011624:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8011628:	b29a      	uxth	r2, r3
 801162a:	68bb      	ldr	r3, [r7, #8]
 801162c:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011634:	2b00      	cmp	r3, #0
 8011636:	d116      	bne.n	8011666 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8011638:	68bb      	ldr	r3, [r7, #8]
 801163a:	78db      	ldrb	r3, [r3, #3]
 801163c:	f003 0303 	and.w	r3, r3, #3
 8011640:	2b01      	cmp	r3, #1
 8011642:	d005      	beq.n	8011650 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8011644:	68bb      	ldr	r3, [r7, #8]
 8011646:	78db      	ldrb	r3, [r3, #3]
 8011648:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 801164c:	2b03      	cmp	r3, #3
 801164e:	d127      	bne.n	80116a0 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011650:	68bb      	ldr	r3, [r7, #8]
 8011652:	799b      	ldrb	r3, [r3, #6]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d003      	beq.n	8011660 <USBH_ParseEPDesc+0xb0>
 8011658:	68bb      	ldr	r3, [r7, #8]
 801165a:	799b      	ldrb	r3, [r3, #6]
 801165c:	2b10      	cmp	r3, #16
 801165e:	d91f      	bls.n	80116a0 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011660:	2303      	movs	r3, #3
 8011662:	75fb      	strb	r3, [r7, #23]
 8011664:	e01c      	b.n	80116a0 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8011666:	68bb      	ldr	r3, [r7, #8]
 8011668:	78db      	ldrb	r3, [r3, #3]
 801166a:	f003 0303 	and.w	r3, r3, #3
 801166e:	2b01      	cmp	r3, #1
 8011670:	d10a      	bne.n	8011688 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8011672:	68bb      	ldr	r3, [r7, #8]
 8011674:	799b      	ldrb	r3, [r3, #6]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d003      	beq.n	8011682 <USBH_ParseEPDesc+0xd2>
 801167a:	68bb      	ldr	r3, [r7, #8]
 801167c:	799b      	ldrb	r3, [r3, #6]
 801167e:	2b10      	cmp	r3, #16
 8011680:	d90e      	bls.n	80116a0 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8011682:	2303      	movs	r3, #3
 8011684:	75fb      	strb	r3, [r7, #23]
 8011686:	e00b      	b.n	80116a0 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8011688:	68bb      	ldr	r3, [r7, #8]
 801168a:	78db      	ldrb	r3, [r3, #3]
 801168c:	f003 0303 	and.w	r3, r3, #3
 8011690:	2b03      	cmp	r3, #3
 8011692:	d105      	bne.n	80116a0 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8011694:	68bb      	ldr	r3, [r7, #8]
 8011696:	799b      	ldrb	r3, [r3, #6]
 8011698:	2b00      	cmp	r3, #0
 801169a:	d101      	bne.n	80116a0 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801169c:	2303      	movs	r3, #3
 801169e:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 80116a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80116a2:	4618      	mov	r0, r3
 80116a4:	371c      	adds	r7, #28
 80116a6:	46bd      	mov	sp, r7
 80116a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116ac:	4770      	bx	lr
 80116ae:	bf00      	nop
 80116b0:	fffff800 	.word	0xfffff800

080116b4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80116b4:	b480      	push	{r7}
 80116b6:	b087      	sub	sp, #28
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	60f8      	str	r0, [r7, #12]
 80116bc:	60b9      	str	r1, [r7, #8]
 80116be:	4613      	mov	r3, r2
 80116c0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80116c2:	68fb      	ldr	r3, [r7, #12]
 80116c4:	3301      	adds	r3, #1
 80116c6:	781b      	ldrb	r3, [r3, #0]
 80116c8:	2b03      	cmp	r3, #3
 80116ca:	d120      	bne.n	801170e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80116cc:	68fb      	ldr	r3, [r7, #12]
 80116ce:	781b      	ldrb	r3, [r3, #0]
 80116d0:	1e9a      	subs	r2, r3, #2
 80116d2:	88fb      	ldrh	r3, [r7, #6]
 80116d4:	4293      	cmp	r3, r2
 80116d6:	bf28      	it	cs
 80116d8:	4613      	movcs	r3, r2
 80116da:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	3302      	adds	r3, #2
 80116e0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80116e2:	2300      	movs	r3, #0
 80116e4:	82fb      	strh	r3, [r7, #22]
 80116e6:	e00b      	b.n	8011700 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80116e8:	8afb      	ldrh	r3, [r7, #22]
 80116ea:	68fa      	ldr	r2, [r7, #12]
 80116ec:	4413      	add	r3, r2
 80116ee:	781a      	ldrb	r2, [r3, #0]
 80116f0:	68bb      	ldr	r3, [r7, #8]
 80116f2:	701a      	strb	r2, [r3, #0]
      pdest++;
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	3301      	adds	r3, #1
 80116f8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80116fa:	8afb      	ldrh	r3, [r7, #22]
 80116fc:	3302      	adds	r3, #2
 80116fe:	82fb      	strh	r3, [r7, #22]
 8011700:	8afa      	ldrh	r2, [r7, #22]
 8011702:	8abb      	ldrh	r3, [r7, #20]
 8011704:	429a      	cmp	r2, r3
 8011706:	d3ef      	bcc.n	80116e8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8011708:	68bb      	ldr	r3, [r7, #8]
 801170a:	2200      	movs	r2, #0
 801170c:	701a      	strb	r2, [r3, #0]
  }
}
 801170e:	bf00      	nop
 8011710:	371c      	adds	r7, #28
 8011712:	46bd      	mov	sp, r7
 8011714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011718:	4770      	bx	lr

0801171a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801171a:	b480      	push	{r7}
 801171c:	b085      	sub	sp, #20
 801171e:	af00      	add	r7, sp, #0
 8011720:	6078      	str	r0, [r7, #4]
 8011722:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8011724:	683b      	ldr	r3, [r7, #0]
 8011726:	881a      	ldrh	r2, [r3, #0]
 8011728:	687b      	ldr	r3, [r7, #4]
 801172a:	781b      	ldrb	r3, [r3, #0]
 801172c:	b29b      	uxth	r3, r3
 801172e:	4413      	add	r3, r2
 8011730:	b29a      	uxth	r2, r3
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8011736:	687b      	ldr	r3, [r7, #4]
 8011738:	781b      	ldrb	r3, [r3, #0]
 801173a:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 801173c:	687b      	ldr	r3, [r7, #4]
 801173e:	4413      	add	r3, r2
 8011740:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8011742:	68fb      	ldr	r3, [r7, #12]
}
 8011744:	4618      	mov	r0, r3
 8011746:	3714      	adds	r7, #20
 8011748:	46bd      	mov	sp, r7
 801174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801174e:	4770      	bx	lr

08011750 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8011750:	b580      	push	{r7, lr}
 8011752:	b086      	sub	sp, #24
 8011754:	af00      	add	r7, sp, #0
 8011756:	60f8      	str	r0, [r7, #12]
 8011758:	60b9      	str	r1, [r7, #8]
 801175a:	4613      	mov	r3, r2
 801175c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801175e:	2301      	movs	r3, #1
 8011760:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8011762:	68fb      	ldr	r3, [r7, #12]
 8011764:	789b      	ldrb	r3, [r3, #2]
 8011766:	2b01      	cmp	r3, #1
 8011768:	d002      	beq.n	8011770 <USBH_CtlReq+0x20>
 801176a:	2b02      	cmp	r3, #2
 801176c:	d00f      	beq.n	801178e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801176e:	e027      	b.n	80117c0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8011770:	68fb      	ldr	r3, [r7, #12]
 8011772:	68ba      	ldr	r2, [r7, #8]
 8011774:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	88fa      	ldrh	r2, [r7, #6]
 801177a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 801177c:	68fb      	ldr	r3, [r7, #12]
 801177e:	2201      	movs	r2, #1
 8011780:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	2202      	movs	r2, #2
 8011786:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8011788:	2301      	movs	r3, #1
 801178a:	75fb      	strb	r3, [r7, #23]
      break;
 801178c:	e018      	b.n	80117c0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801178e:	68f8      	ldr	r0, [r7, #12]
 8011790:	f000 f81c 	bl	80117cc <USBH_HandleControl>
 8011794:	4603      	mov	r3, r0
 8011796:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8011798:	7dfb      	ldrb	r3, [r7, #23]
 801179a:	2b00      	cmp	r3, #0
 801179c:	d002      	beq.n	80117a4 <USBH_CtlReq+0x54>
 801179e:	7dfb      	ldrb	r3, [r7, #23]
 80117a0:	2b03      	cmp	r3, #3
 80117a2:	d106      	bne.n	80117b2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80117a4:	68fb      	ldr	r3, [r7, #12]
 80117a6:	2201      	movs	r2, #1
 80117a8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80117aa:	68fb      	ldr	r3, [r7, #12]
 80117ac:	2200      	movs	r2, #0
 80117ae:	761a      	strb	r2, [r3, #24]
      break;
 80117b0:	e005      	b.n	80117be <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80117b2:	7dfb      	ldrb	r3, [r7, #23]
 80117b4:	2b02      	cmp	r3, #2
 80117b6:	d102      	bne.n	80117be <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80117b8:	68fb      	ldr	r3, [r7, #12]
 80117ba:	2201      	movs	r2, #1
 80117bc:	709a      	strb	r2, [r3, #2]
      break;
 80117be:	bf00      	nop
  }
  return status;
 80117c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80117c2:	4618      	mov	r0, r3
 80117c4:	3718      	adds	r7, #24
 80117c6:	46bd      	mov	sp, r7
 80117c8:	bd80      	pop	{r7, pc}
	...

080117cc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80117cc:	b580      	push	{r7, lr}
 80117ce:	b086      	sub	sp, #24
 80117d0:	af02      	add	r7, sp, #8
 80117d2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80117d4:	2301      	movs	r3, #1
 80117d6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80117d8:	2300      	movs	r3, #0
 80117da:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80117dc:	687b      	ldr	r3, [r7, #4]
 80117de:	7e1b      	ldrb	r3, [r3, #24]
 80117e0:	3b01      	subs	r3, #1
 80117e2:	2b0a      	cmp	r3, #10
 80117e4:	f200 8156 	bhi.w	8011a94 <USBH_HandleControl+0x2c8>
 80117e8:	a201      	add	r2, pc, #4	; (adr r2, 80117f0 <USBH_HandleControl+0x24>)
 80117ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117ee:	bf00      	nop
 80117f0:	0801181d 	.word	0x0801181d
 80117f4:	08011837 	.word	0x08011837
 80117f8:	080118a1 	.word	0x080118a1
 80117fc:	080118c7 	.word	0x080118c7
 8011800:	080118ff 	.word	0x080118ff
 8011804:	08011929 	.word	0x08011929
 8011808:	0801197b 	.word	0x0801197b
 801180c:	0801199d 	.word	0x0801199d
 8011810:	080119d9 	.word	0x080119d9
 8011814:	080119ff 	.word	0x080119ff
 8011818:	08011a3d 	.word	0x08011a3d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	f103 0110 	add.w	r1, r3, #16
 8011822:	687b      	ldr	r3, [r7, #4]
 8011824:	795b      	ldrb	r3, [r3, #5]
 8011826:	461a      	mov	r2, r3
 8011828:	6878      	ldr	r0, [r7, #4]
 801182a:	f000 f943 	bl	8011ab4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	2202      	movs	r2, #2
 8011832:	761a      	strb	r2, [r3, #24]
      break;
 8011834:	e139      	b.n	8011aaa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011836:	687b      	ldr	r3, [r7, #4]
 8011838:	795b      	ldrb	r3, [r3, #5]
 801183a:	4619      	mov	r1, r3
 801183c:	6878      	ldr	r0, [r7, #4]
 801183e:	f004 fadb 	bl	8015df8 <USBH_LL_GetURBState>
 8011842:	4603      	mov	r3, r0
 8011844:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8011846:	7bbb      	ldrb	r3, [r7, #14]
 8011848:	2b01      	cmp	r3, #1
 801184a:	d11e      	bne.n	801188a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 801184c:	687b      	ldr	r3, [r7, #4]
 801184e:	7c1b      	ldrb	r3, [r3, #16]
 8011850:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011854:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8011856:	687b      	ldr	r3, [r7, #4]
 8011858:	8adb      	ldrh	r3, [r3, #22]
 801185a:	2b00      	cmp	r3, #0
 801185c:	d00a      	beq.n	8011874 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801185e:	7b7b      	ldrb	r3, [r7, #13]
 8011860:	2b80      	cmp	r3, #128	; 0x80
 8011862:	d103      	bne.n	801186c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2203      	movs	r2, #3
 8011868:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801186a:	e115      	b.n	8011a98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 801186c:	687b      	ldr	r3, [r7, #4]
 801186e:	2205      	movs	r2, #5
 8011870:	761a      	strb	r2, [r3, #24]
      break;
 8011872:	e111      	b.n	8011a98 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8011874:	7b7b      	ldrb	r3, [r7, #13]
 8011876:	2b80      	cmp	r3, #128	; 0x80
 8011878:	d103      	bne.n	8011882 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 801187a:	687b      	ldr	r3, [r7, #4]
 801187c:	2209      	movs	r2, #9
 801187e:	761a      	strb	r2, [r3, #24]
      break;
 8011880:	e10a      	b.n	8011a98 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8011882:	687b      	ldr	r3, [r7, #4]
 8011884:	2207      	movs	r2, #7
 8011886:	761a      	strb	r2, [r3, #24]
      break;
 8011888:	e106      	b.n	8011a98 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801188a:	7bbb      	ldrb	r3, [r7, #14]
 801188c:	2b04      	cmp	r3, #4
 801188e:	d003      	beq.n	8011898 <USBH_HandleControl+0xcc>
 8011890:	7bbb      	ldrb	r3, [r7, #14]
 8011892:	2b02      	cmp	r3, #2
 8011894:	f040 8100 	bne.w	8011a98 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8011898:	687b      	ldr	r3, [r7, #4]
 801189a:	220b      	movs	r2, #11
 801189c:	761a      	strb	r2, [r3, #24]
      break;
 801189e:	e0fb      	b.n	8011a98 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80118a0:	687b      	ldr	r3, [r7, #4]
 80118a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80118a6:	b29a      	uxth	r2, r3
 80118a8:	687b      	ldr	r3, [r7, #4]
 80118aa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 80118ac:	687b      	ldr	r3, [r7, #4]
 80118ae:	6899      	ldr	r1, [r3, #8]
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	899a      	ldrh	r2, [r3, #12]
 80118b4:	687b      	ldr	r3, [r7, #4]
 80118b6:	791b      	ldrb	r3, [r3, #4]
 80118b8:	6878      	ldr	r0, [r7, #4]
 80118ba:	f000 f93a 	bl	8011b32 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80118be:	687b      	ldr	r3, [r7, #4]
 80118c0:	2204      	movs	r2, #4
 80118c2:	761a      	strb	r2, [r3, #24]
      break;
 80118c4:	e0f1      	b.n	8011aaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	791b      	ldrb	r3, [r3, #4]
 80118ca:	4619      	mov	r1, r3
 80118cc:	6878      	ldr	r0, [r7, #4]
 80118ce:	f004 fa93 	bl	8015df8 <USBH_LL_GetURBState>
 80118d2:	4603      	mov	r3, r0
 80118d4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80118d6:	7bbb      	ldrb	r3, [r7, #14]
 80118d8:	2b01      	cmp	r3, #1
 80118da:	d102      	bne.n	80118e2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	2209      	movs	r2, #9
 80118e0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80118e2:	7bbb      	ldrb	r3, [r7, #14]
 80118e4:	2b05      	cmp	r3, #5
 80118e6:	d102      	bne.n	80118ee <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80118e8:	2303      	movs	r3, #3
 80118ea:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80118ec:	e0d6      	b.n	8011a9c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 80118ee:	7bbb      	ldrb	r3, [r7, #14]
 80118f0:	2b04      	cmp	r3, #4
 80118f2:	f040 80d3 	bne.w	8011a9c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	220b      	movs	r2, #11
 80118fa:	761a      	strb	r2, [r3, #24]
      break;
 80118fc:	e0ce      	b.n	8011a9c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	6899      	ldr	r1, [r3, #8]
 8011902:	687b      	ldr	r3, [r7, #4]
 8011904:	899a      	ldrh	r2, [r3, #12]
 8011906:	687b      	ldr	r3, [r7, #4]
 8011908:	795b      	ldrb	r3, [r3, #5]
 801190a:	2001      	movs	r0, #1
 801190c:	9000      	str	r0, [sp, #0]
 801190e:	6878      	ldr	r0, [r7, #4]
 8011910:	f000 f8ea 	bl	8011ae8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8011914:	687b      	ldr	r3, [r7, #4]
 8011916:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801191a:	b29a      	uxth	r2, r3
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	2206      	movs	r2, #6
 8011924:	761a      	strb	r2, [r3, #24]
      break;
 8011926:	e0c0      	b.n	8011aaa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	795b      	ldrb	r3, [r3, #5]
 801192c:	4619      	mov	r1, r3
 801192e:	6878      	ldr	r0, [r7, #4]
 8011930:	f004 fa62 	bl	8015df8 <USBH_LL_GetURBState>
 8011934:	4603      	mov	r3, r0
 8011936:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8011938:	7bbb      	ldrb	r3, [r7, #14]
 801193a:	2b01      	cmp	r3, #1
 801193c:	d103      	bne.n	8011946 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	2207      	movs	r2, #7
 8011942:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011944:	e0ac      	b.n	8011aa0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8011946:	7bbb      	ldrb	r3, [r7, #14]
 8011948:	2b05      	cmp	r3, #5
 801194a:	d105      	bne.n	8011958 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 801194c:	687b      	ldr	r3, [r7, #4]
 801194e:	220c      	movs	r2, #12
 8011950:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8011952:	2303      	movs	r3, #3
 8011954:	73fb      	strb	r3, [r7, #15]
      break;
 8011956:	e0a3      	b.n	8011aa0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011958:	7bbb      	ldrb	r3, [r7, #14]
 801195a:	2b02      	cmp	r3, #2
 801195c:	d103      	bne.n	8011966 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	2205      	movs	r2, #5
 8011962:	761a      	strb	r2, [r3, #24]
      break;
 8011964:	e09c      	b.n	8011aa0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8011966:	7bbb      	ldrb	r3, [r7, #14]
 8011968:	2b04      	cmp	r3, #4
 801196a:	f040 8099 	bne.w	8011aa0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	220b      	movs	r2, #11
 8011972:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8011974:	2302      	movs	r3, #2
 8011976:	73fb      	strb	r3, [r7, #15]
      break;
 8011978:	e092      	b.n	8011aa0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	791b      	ldrb	r3, [r3, #4]
 801197e:	2200      	movs	r2, #0
 8011980:	2100      	movs	r1, #0
 8011982:	6878      	ldr	r0, [r7, #4]
 8011984:	f000 f8d5 	bl	8011b32 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8011988:	687b      	ldr	r3, [r7, #4]
 801198a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801198e:	b29a      	uxth	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8011994:	687b      	ldr	r3, [r7, #4]
 8011996:	2208      	movs	r2, #8
 8011998:	761a      	strb	r2, [r3, #24]

      break;
 801199a:	e086      	b.n	8011aaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801199c:	687b      	ldr	r3, [r7, #4]
 801199e:	791b      	ldrb	r3, [r3, #4]
 80119a0:	4619      	mov	r1, r3
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f004 fa28 	bl	8015df8 <USBH_LL_GetURBState>
 80119a8:	4603      	mov	r3, r0
 80119aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80119ac:	7bbb      	ldrb	r3, [r7, #14]
 80119ae:	2b01      	cmp	r3, #1
 80119b0:	d105      	bne.n	80119be <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	220d      	movs	r2, #13
 80119b6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80119b8:	2300      	movs	r3, #0
 80119ba:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80119bc:	e072      	b.n	8011aa4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 80119be:	7bbb      	ldrb	r3, [r7, #14]
 80119c0:	2b04      	cmp	r3, #4
 80119c2:	d103      	bne.n	80119cc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 80119c4:	687b      	ldr	r3, [r7, #4]
 80119c6:	220b      	movs	r2, #11
 80119c8:	761a      	strb	r2, [r3, #24]
      break;
 80119ca:	e06b      	b.n	8011aa4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 80119cc:	7bbb      	ldrb	r3, [r7, #14]
 80119ce:	2b05      	cmp	r3, #5
 80119d0:	d168      	bne.n	8011aa4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 80119d2:	2303      	movs	r3, #3
 80119d4:	73fb      	strb	r3, [r7, #15]
      break;
 80119d6:	e065      	b.n	8011aa4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	795b      	ldrb	r3, [r3, #5]
 80119dc:	2201      	movs	r2, #1
 80119de:	9200      	str	r2, [sp, #0]
 80119e0:	2200      	movs	r2, #0
 80119e2:	2100      	movs	r1, #0
 80119e4:	6878      	ldr	r0, [r7, #4]
 80119e6:	f000 f87f 	bl	8011ae8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80119ea:	687b      	ldr	r3, [r7, #4]
 80119ec:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	687b      	ldr	r3, [r7, #4]
 80119f4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80119f6:	687b      	ldr	r3, [r7, #4]
 80119f8:	220a      	movs	r2, #10
 80119fa:	761a      	strb	r2, [r3, #24]
      break;
 80119fc:	e055      	b.n	8011aaa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	795b      	ldrb	r3, [r3, #5]
 8011a02:	4619      	mov	r1, r3
 8011a04:	6878      	ldr	r0, [r7, #4]
 8011a06:	f004 f9f7 	bl	8015df8 <USBH_LL_GetURBState>
 8011a0a:	4603      	mov	r3, r0
 8011a0c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8011a0e:	7bbb      	ldrb	r3, [r7, #14]
 8011a10:	2b01      	cmp	r3, #1
 8011a12:	d105      	bne.n	8011a20 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8011a14:	2300      	movs	r3, #0
 8011a16:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8011a18:	687b      	ldr	r3, [r7, #4]
 8011a1a:	220d      	movs	r2, #13
 8011a1c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8011a1e:	e043      	b.n	8011aa8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8011a20:	7bbb      	ldrb	r3, [r7, #14]
 8011a22:	2b02      	cmp	r3, #2
 8011a24:	d103      	bne.n	8011a2e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8011a26:	687b      	ldr	r3, [r7, #4]
 8011a28:	2209      	movs	r2, #9
 8011a2a:	761a      	strb	r2, [r3, #24]
      break;
 8011a2c:	e03c      	b.n	8011aa8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8011a2e:	7bbb      	ldrb	r3, [r7, #14]
 8011a30:	2b04      	cmp	r3, #4
 8011a32:	d139      	bne.n	8011aa8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8011a34:	687b      	ldr	r3, [r7, #4]
 8011a36:	220b      	movs	r2, #11
 8011a38:	761a      	strb	r2, [r3, #24]
      break;
 8011a3a:	e035      	b.n	8011aa8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8011a3c:	687b      	ldr	r3, [r7, #4]
 8011a3e:	7e5b      	ldrb	r3, [r3, #25]
 8011a40:	3301      	adds	r3, #1
 8011a42:	b2da      	uxtb	r2, r3
 8011a44:	687b      	ldr	r3, [r7, #4]
 8011a46:	765a      	strb	r2, [r3, #25]
 8011a48:	687b      	ldr	r3, [r7, #4]
 8011a4a:	7e5b      	ldrb	r3, [r3, #25]
 8011a4c:	2b02      	cmp	r3, #2
 8011a4e:	d806      	bhi.n	8011a5e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	2201      	movs	r2, #1
 8011a54:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8011a56:	687b      	ldr	r3, [r7, #4]
 8011a58:	2201      	movs	r2, #1
 8011a5a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8011a5c:	e025      	b.n	8011aaa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8011a5e:	687b      	ldr	r3, [r7, #4]
 8011a60:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8011a64:	2106      	movs	r1, #6
 8011a66:	6878      	ldr	r0, [r7, #4]
 8011a68:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8011a6a:	687b      	ldr	r3, [r7, #4]
 8011a6c:	2200      	movs	r2, #0
 8011a6e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8011a70:	687b      	ldr	r3, [r7, #4]
 8011a72:	795b      	ldrb	r3, [r3, #5]
 8011a74:	4619      	mov	r1, r3
 8011a76:	6878      	ldr	r0, [r7, #4]
 8011a78:	f000 f90c 	bl	8011c94 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8011a7c:	687b      	ldr	r3, [r7, #4]
 8011a7e:	791b      	ldrb	r3, [r3, #4]
 8011a80:	4619      	mov	r1, r3
 8011a82:	6878      	ldr	r0, [r7, #4]
 8011a84:	f000 f906 	bl	8011c94 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	2200      	movs	r2, #0
 8011a8c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8011a8e:	2302      	movs	r3, #2
 8011a90:	73fb      	strb	r3, [r7, #15]
      break;
 8011a92:	e00a      	b.n	8011aaa <USBH_HandleControl+0x2de>

    default:
      break;
 8011a94:	bf00      	nop
 8011a96:	e008      	b.n	8011aaa <USBH_HandleControl+0x2de>
      break;
 8011a98:	bf00      	nop
 8011a9a:	e006      	b.n	8011aaa <USBH_HandleControl+0x2de>
      break;
 8011a9c:	bf00      	nop
 8011a9e:	e004      	b.n	8011aaa <USBH_HandleControl+0x2de>
      break;
 8011aa0:	bf00      	nop
 8011aa2:	e002      	b.n	8011aaa <USBH_HandleControl+0x2de>
      break;
 8011aa4:	bf00      	nop
 8011aa6:	e000      	b.n	8011aaa <USBH_HandleControl+0x2de>
      break;
 8011aa8:	bf00      	nop
  }

  return status;
 8011aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8011aac:	4618      	mov	r0, r3
 8011aae:	3710      	adds	r7, #16
 8011ab0:	46bd      	mov	sp, r7
 8011ab2:	bd80      	pop	{r7, pc}

08011ab4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	b088      	sub	sp, #32
 8011ab8:	af04      	add	r7, sp, #16
 8011aba:	60f8      	str	r0, [r7, #12]
 8011abc:	60b9      	str	r1, [r7, #8]
 8011abe:	4613      	mov	r3, r2
 8011ac0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011ac2:	79f9      	ldrb	r1, [r7, #7]
 8011ac4:	2300      	movs	r3, #0
 8011ac6:	9303      	str	r3, [sp, #12]
 8011ac8:	2308      	movs	r3, #8
 8011aca:	9302      	str	r3, [sp, #8]
 8011acc:	68bb      	ldr	r3, [r7, #8]
 8011ace:	9301      	str	r3, [sp, #4]
 8011ad0:	2300      	movs	r3, #0
 8011ad2:	9300      	str	r3, [sp, #0]
 8011ad4:	2300      	movs	r3, #0
 8011ad6:	2200      	movs	r2, #0
 8011ad8:	68f8      	ldr	r0, [r7, #12]
 8011ada:	f004 f95c 	bl	8015d96 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8011ade:	2300      	movs	r3, #0
}
 8011ae0:	4618      	mov	r0, r3
 8011ae2:	3710      	adds	r7, #16
 8011ae4:	46bd      	mov	sp, r7
 8011ae6:	bd80      	pop	{r7, pc}

08011ae8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8011ae8:	b580      	push	{r7, lr}
 8011aea:	b088      	sub	sp, #32
 8011aec:	af04      	add	r7, sp, #16
 8011aee:	60f8      	str	r0, [r7, #12]
 8011af0:	60b9      	str	r1, [r7, #8]
 8011af2:	4611      	mov	r1, r2
 8011af4:	461a      	mov	r2, r3
 8011af6:	460b      	mov	r3, r1
 8011af8:	80fb      	strh	r3, [r7, #6]
 8011afa:	4613      	mov	r3, r2
 8011afc:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011afe:	68fb      	ldr	r3, [r7, #12]
 8011b00:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d001      	beq.n	8011b0c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011b0c:	7979      	ldrb	r1, [r7, #5]
 8011b0e:	7e3b      	ldrb	r3, [r7, #24]
 8011b10:	9303      	str	r3, [sp, #12]
 8011b12:	88fb      	ldrh	r3, [r7, #6]
 8011b14:	9302      	str	r3, [sp, #8]
 8011b16:	68bb      	ldr	r3, [r7, #8]
 8011b18:	9301      	str	r3, [sp, #4]
 8011b1a:	2301      	movs	r3, #1
 8011b1c:	9300      	str	r3, [sp, #0]
 8011b1e:	2300      	movs	r3, #0
 8011b20:	2200      	movs	r2, #0
 8011b22:	68f8      	ldr	r0, [r7, #12]
 8011b24:	f004 f937 	bl	8015d96 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8011b28:	2300      	movs	r3, #0
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3710      	adds	r7, #16
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bd80      	pop	{r7, pc}

08011b32 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8011b32:	b580      	push	{r7, lr}
 8011b34:	b088      	sub	sp, #32
 8011b36:	af04      	add	r7, sp, #16
 8011b38:	60f8      	str	r0, [r7, #12]
 8011b3a:	60b9      	str	r1, [r7, #8]
 8011b3c:	4611      	mov	r1, r2
 8011b3e:	461a      	mov	r2, r3
 8011b40:	460b      	mov	r3, r1
 8011b42:	80fb      	strh	r3, [r7, #6]
 8011b44:	4613      	mov	r3, r2
 8011b46:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011b48:	7979      	ldrb	r1, [r7, #5]
 8011b4a:	2300      	movs	r3, #0
 8011b4c:	9303      	str	r3, [sp, #12]
 8011b4e:	88fb      	ldrh	r3, [r7, #6]
 8011b50:	9302      	str	r3, [sp, #8]
 8011b52:	68bb      	ldr	r3, [r7, #8]
 8011b54:	9301      	str	r3, [sp, #4]
 8011b56:	2301      	movs	r3, #1
 8011b58:	9300      	str	r3, [sp, #0]
 8011b5a:	2300      	movs	r3, #0
 8011b5c:	2201      	movs	r2, #1
 8011b5e:	68f8      	ldr	r0, [r7, #12]
 8011b60:	f004 f919 	bl	8015d96 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011b64:	2300      	movs	r3, #0

}
 8011b66:	4618      	mov	r0, r3
 8011b68:	3710      	adds	r7, #16
 8011b6a:	46bd      	mov	sp, r7
 8011b6c:	bd80      	pop	{r7, pc}

08011b6e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8011b6e:	b580      	push	{r7, lr}
 8011b70:	b088      	sub	sp, #32
 8011b72:	af04      	add	r7, sp, #16
 8011b74:	60f8      	str	r0, [r7, #12]
 8011b76:	60b9      	str	r1, [r7, #8]
 8011b78:	4611      	mov	r1, r2
 8011b7a:	461a      	mov	r2, r3
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	80fb      	strh	r3, [r7, #6]
 8011b80:	4613      	mov	r3, r2
 8011b82:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8011b84:	68fb      	ldr	r3, [r7, #12]
 8011b86:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d001      	beq.n	8011b92 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8011b8e:	2300      	movs	r3, #0
 8011b90:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011b92:	7979      	ldrb	r1, [r7, #5]
 8011b94:	7e3b      	ldrb	r3, [r7, #24]
 8011b96:	9303      	str	r3, [sp, #12]
 8011b98:	88fb      	ldrh	r3, [r7, #6]
 8011b9a:	9302      	str	r3, [sp, #8]
 8011b9c:	68bb      	ldr	r3, [r7, #8]
 8011b9e:	9301      	str	r3, [sp, #4]
 8011ba0:	2301      	movs	r3, #1
 8011ba2:	9300      	str	r3, [sp, #0]
 8011ba4:	2302      	movs	r3, #2
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	68f8      	ldr	r0, [r7, #12]
 8011baa:	f004 f8f4 	bl	8015d96 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8011bae:	2300      	movs	r3, #0
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3710      	adds	r7, #16
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b088      	sub	sp, #32
 8011bbc:	af04      	add	r7, sp, #16
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	60b9      	str	r1, [r7, #8]
 8011bc2:	4611      	mov	r1, r2
 8011bc4:	461a      	mov	r2, r3
 8011bc6:	460b      	mov	r3, r1
 8011bc8:	80fb      	strh	r3, [r7, #6]
 8011bca:	4613      	mov	r3, r2
 8011bcc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8011bce:	7979      	ldrb	r1, [r7, #5]
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	9303      	str	r3, [sp, #12]
 8011bd4:	88fb      	ldrh	r3, [r7, #6]
 8011bd6:	9302      	str	r3, [sp, #8]
 8011bd8:	68bb      	ldr	r3, [r7, #8]
 8011bda:	9301      	str	r3, [sp, #4]
 8011bdc:	2301      	movs	r3, #1
 8011bde:	9300      	str	r3, [sp, #0]
 8011be0:	2302      	movs	r3, #2
 8011be2:	2201      	movs	r2, #1
 8011be4:	68f8      	ldr	r0, [r7, #12]
 8011be6:	f004 f8d6 	bl	8015d96 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8011bea:	2300      	movs	r3, #0
}
 8011bec:	4618      	mov	r0, r3
 8011bee:	3710      	adds	r7, #16
 8011bf0:	46bd      	mov	sp, r7
 8011bf2:	bd80      	pop	{r7, pc}

08011bf4 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011bf4:	b580      	push	{r7, lr}
 8011bf6:	b086      	sub	sp, #24
 8011bf8:	af04      	add	r7, sp, #16
 8011bfa:	6078      	str	r0, [r7, #4]
 8011bfc:	4608      	mov	r0, r1
 8011bfe:	4611      	mov	r1, r2
 8011c00:	461a      	mov	r2, r3
 8011c02:	4603      	mov	r3, r0
 8011c04:	70fb      	strb	r3, [r7, #3]
 8011c06:	460b      	mov	r3, r1
 8011c08:	70bb      	strb	r3, [r7, #2]
 8011c0a:	4613      	mov	r3, r2
 8011c0c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8011c0e:	7878      	ldrb	r0, [r7, #1]
 8011c10:	78ba      	ldrb	r2, [r7, #2]
 8011c12:	78f9      	ldrb	r1, [r7, #3]
 8011c14:	8b3b      	ldrh	r3, [r7, #24]
 8011c16:	9302      	str	r3, [sp, #8]
 8011c18:	7d3b      	ldrb	r3, [r7, #20]
 8011c1a:	9301      	str	r3, [sp, #4]
 8011c1c:	7c3b      	ldrb	r3, [r7, #16]
 8011c1e:	9300      	str	r3, [sp, #0]
 8011c20:	4603      	mov	r3, r0
 8011c22:	6878      	ldr	r0, [r7, #4]
 8011c24:	f004 f869 	bl	8015cfa <USBH_LL_OpenPipe>

  return USBH_OK;
 8011c28:	2300      	movs	r3, #0
}
 8011c2a:	4618      	mov	r0, r3
 8011c2c:	3708      	adds	r7, #8
 8011c2e:	46bd      	mov	sp, r7
 8011c30:	bd80      	pop	{r7, pc}

08011c32 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8011c32:	b580      	push	{r7, lr}
 8011c34:	b082      	sub	sp, #8
 8011c36:	af00      	add	r7, sp, #0
 8011c38:	6078      	str	r0, [r7, #4]
 8011c3a:	460b      	mov	r3, r1
 8011c3c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011c3e:	78fb      	ldrb	r3, [r7, #3]
 8011c40:	4619      	mov	r1, r3
 8011c42:	6878      	ldr	r0, [r7, #4]
 8011c44:	f004 f888 	bl	8015d58 <USBH_LL_ClosePipe>

  return USBH_OK;
 8011c48:	2300      	movs	r3, #0
}
 8011c4a:	4618      	mov	r0, r3
 8011c4c:	3708      	adds	r7, #8
 8011c4e:	46bd      	mov	sp, r7
 8011c50:	bd80      	pop	{r7, pc}

08011c52 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011c52:	b580      	push	{r7, lr}
 8011c54:	b084      	sub	sp, #16
 8011c56:	af00      	add	r7, sp, #0
 8011c58:	6078      	str	r0, [r7, #4]
 8011c5a:	460b      	mov	r3, r1
 8011c5c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011c5e:	6878      	ldr	r0, [r7, #4]
 8011c60:	f000 f836 	bl	8011cd0 <USBH_GetFreePipe>
 8011c64:	4603      	mov	r3, r0
 8011c66:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8011c68:	89fb      	ldrh	r3, [r7, #14]
 8011c6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011c6e:	4293      	cmp	r3, r2
 8011c70:	d00a      	beq.n	8011c88 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011c72:	78fa      	ldrb	r2, [r7, #3]
 8011c74:	89fb      	ldrh	r3, [r7, #14]
 8011c76:	f003 030f 	and.w	r3, r3, #15
 8011c7a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011c7e:	6879      	ldr	r1, [r7, #4]
 8011c80:	33e0      	adds	r3, #224	; 0xe0
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	440b      	add	r3, r1
 8011c86:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8011c88:	89fb      	ldrh	r3, [r7, #14]
 8011c8a:	b2db      	uxtb	r3, r3
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3710      	adds	r7, #16
 8011c90:	46bd      	mov	sp, r7
 8011c92:	bd80      	pop	{r7, pc}

08011c94 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011c94:	b480      	push	{r7}
 8011c96:	b083      	sub	sp, #12
 8011c98:	af00      	add	r7, sp, #0
 8011c9a:	6078      	str	r0, [r7, #4]
 8011c9c:	460b      	mov	r3, r1
 8011c9e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011ca0:	78fb      	ldrb	r3, [r7, #3]
 8011ca2:	2b0f      	cmp	r3, #15
 8011ca4:	d80d      	bhi.n	8011cc2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8011ca6:	78fb      	ldrb	r3, [r7, #3]
 8011ca8:	687a      	ldr	r2, [r7, #4]
 8011caa:	33e0      	adds	r3, #224	; 0xe0
 8011cac:	009b      	lsls	r3, r3, #2
 8011cae:	4413      	add	r3, r2
 8011cb0:	685a      	ldr	r2, [r3, #4]
 8011cb2:	78fb      	ldrb	r3, [r7, #3]
 8011cb4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8011cb8:	6879      	ldr	r1, [r7, #4]
 8011cba:	33e0      	adds	r3, #224	; 0xe0
 8011cbc:	009b      	lsls	r3, r3, #2
 8011cbe:	440b      	add	r3, r1
 8011cc0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011cc2:	2300      	movs	r3, #0
}
 8011cc4:	4618      	mov	r0, r3
 8011cc6:	370c      	adds	r7, #12
 8011cc8:	46bd      	mov	sp, r7
 8011cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cce:	4770      	bx	lr

08011cd0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011cd0:	b480      	push	{r7}
 8011cd2:	b085      	sub	sp, #20
 8011cd4:	af00      	add	r7, sp, #0
 8011cd6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8011cd8:	2300      	movs	r3, #0
 8011cda:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011cdc:	2300      	movs	r3, #0
 8011cde:	73fb      	strb	r3, [r7, #15]
 8011ce0:	e00f      	b.n	8011d02 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8011ce2:	7bfb      	ldrb	r3, [r7, #15]
 8011ce4:	687a      	ldr	r2, [r7, #4]
 8011ce6:	33e0      	adds	r3, #224	; 0xe0
 8011ce8:	009b      	lsls	r3, r3, #2
 8011cea:	4413      	add	r3, r2
 8011cec:	685b      	ldr	r3, [r3, #4]
 8011cee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8011cf2:	2b00      	cmp	r3, #0
 8011cf4:	d102      	bne.n	8011cfc <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8011cf6:	7bfb      	ldrb	r3, [r7, #15]
 8011cf8:	b29b      	uxth	r3, r3
 8011cfa:	e007      	b.n	8011d0c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8011cfc:	7bfb      	ldrb	r3, [r7, #15]
 8011cfe:	3301      	adds	r3, #1
 8011d00:	73fb      	strb	r3, [r7, #15]
 8011d02:	7bfb      	ldrb	r3, [r7, #15]
 8011d04:	2b0f      	cmp	r3, #15
 8011d06:	d9ec      	bls.n	8011ce2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8011d08:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	3714      	adds	r7, #20
 8011d10:	46bd      	mov	sp, r7
 8011d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d16:	4770      	bx	lr

08011d18 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8011d18:	b580      	push	{r7, lr}
 8011d1a:	b084      	sub	sp, #16
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	4603      	mov	r3, r0
 8011d20:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8011d22:	79fb      	ldrb	r3, [r7, #7]
 8011d24:	4a08      	ldr	r2, [pc, #32]	; (8011d48 <disk_status+0x30>)
 8011d26:	009b      	lsls	r3, r3, #2
 8011d28:	4413      	add	r3, r2
 8011d2a:	685b      	ldr	r3, [r3, #4]
 8011d2c:	685b      	ldr	r3, [r3, #4]
 8011d2e:	79fa      	ldrb	r2, [r7, #7]
 8011d30:	4905      	ldr	r1, [pc, #20]	; (8011d48 <disk_status+0x30>)
 8011d32:	440a      	add	r2, r1
 8011d34:	7a12      	ldrb	r2, [r2, #8]
 8011d36:	4610      	mov	r0, r2
 8011d38:	4798      	blx	r3
 8011d3a:	4603      	mov	r3, r0
 8011d3c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8011d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d40:	4618      	mov	r0, r3
 8011d42:	3710      	adds	r7, #16
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd80      	pop	{r7, pc}
 8011d48:	20002d8c 	.word	0x20002d8c

08011d4c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	4603      	mov	r3, r0
 8011d54:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8011d56:	2300      	movs	r3, #0
 8011d58:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8011d5a:	79fb      	ldrb	r3, [r7, #7]
 8011d5c:	4a0d      	ldr	r2, [pc, #52]	; (8011d94 <disk_initialize+0x48>)
 8011d5e:	5cd3      	ldrb	r3, [r2, r3]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d111      	bne.n	8011d88 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8011d64:	79fb      	ldrb	r3, [r7, #7]
 8011d66:	4a0b      	ldr	r2, [pc, #44]	; (8011d94 <disk_initialize+0x48>)
 8011d68:	2101      	movs	r1, #1
 8011d6a:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8011d6c:	79fb      	ldrb	r3, [r7, #7]
 8011d6e:	4a09      	ldr	r2, [pc, #36]	; (8011d94 <disk_initialize+0x48>)
 8011d70:	009b      	lsls	r3, r3, #2
 8011d72:	4413      	add	r3, r2
 8011d74:	685b      	ldr	r3, [r3, #4]
 8011d76:	681b      	ldr	r3, [r3, #0]
 8011d78:	79fa      	ldrb	r2, [r7, #7]
 8011d7a:	4906      	ldr	r1, [pc, #24]	; (8011d94 <disk_initialize+0x48>)
 8011d7c:	440a      	add	r2, r1
 8011d7e:	7a12      	ldrb	r2, [r2, #8]
 8011d80:	4610      	mov	r0, r2
 8011d82:	4798      	blx	r3
 8011d84:	4603      	mov	r3, r0
 8011d86:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8011d88:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	3710      	adds	r7, #16
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	bd80      	pop	{r7, pc}
 8011d92:	bf00      	nop
 8011d94:	20002d8c 	.word	0x20002d8c

08011d98 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8011d98:	b590      	push	{r4, r7, lr}
 8011d9a:	b087      	sub	sp, #28
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	60b9      	str	r1, [r7, #8]
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	603b      	str	r3, [r7, #0]
 8011da4:	4603      	mov	r3, r0
 8011da6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8011da8:	7bfb      	ldrb	r3, [r7, #15]
 8011daa:	4a0a      	ldr	r2, [pc, #40]	; (8011dd4 <disk_read+0x3c>)
 8011dac:	009b      	lsls	r3, r3, #2
 8011dae:	4413      	add	r3, r2
 8011db0:	685b      	ldr	r3, [r3, #4]
 8011db2:	689c      	ldr	r4, [r3, #8]
 8011db4:	7bfb      	ldrb	r3, [r7, #15]
 8011db6:	4a07      	ldr	r2, [pc, #28]	; (8011dd4 <disk_read+0x3c>)
 8011db8:	4413      	add	r3, r2
 8011dba:	7a18      	ldrb	r0, [r3, #8]
 8011dbc:	683b      	ldr	r3, [r7, #0]
 8011dbe:	687a      	ldr	r2, [r7, #4]
 8011dc0:	68b9      	ldr	r1, [r7, #8]
 8011dc2:	47a0      	blx	r4
 8011dc4:	4603      	mov	r3, r0
 8011dc6:	75fb      	strb	r3, [r7, #23]
  return res;
 8011dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8011dca:	4618      	mov	r0, r3
 8011dcc:	371c      	adds	r7, #28
 8011dce:	46bd      	mov	sp, r7
 8011dd0:	bd90      	pop	{r4, r7, pc}
 8011dd2:	bf00      	nop
 8011dd4:	20002d8c 	.word	0x20002d8c

08011dd8 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8011dd8:	b590      	push	{r4, r7, lr}
 8011dda:	b087      	sub	sp, #28
 8011ddc:	af00      	add	r7, sp, #0
 8011dde:	60b9      	str	r1, [r7, #8]
 8011de0:	607a      	str	r2, [r7, #4]
 8011de2:	603b      	str	r3, [r7, #0]
 8011de4:	4603      	mov	r3, r0
 8011de6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8011de8:	7bfb      	ldrb	r3, [r7, #15]
 8011dea:	4a0a      	ldr	r2, [pc, #40]	; (8011e14 <disk_write+0x3c>)
 8011dec:	009b      	lsls	r3, r3, #2
 8011dee:	4413      	add	r3, r2
 8011df0:	685b      	ldr	r3, [r3, #4]
 8011df2:	68dc      	ldr	r4, [r3, #12]
 8011df4:	7bfb      	ldrb	r3, [r7, #15]
 8011df6:	4a07      	ldr	r2, [pc, #28]	; (8011e14 <disk_write+0x3c>)
 8011df8:	4413      	add	r3, r2
 8011dfa:	7a18      	ldrb	r0, [r3, #8]
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	687a      	ldr	r2, [r7, #4]
 8011e00:	68b9      	ldr	r1, [r7, #8]
 8011e02:	47a0      	blx	r4
 8011e04:	4603      	mov	r3, r0
 8011e06:	75fb      	strb	r3, [r7, #23]
  return res;
 8011e08:	7dfb      	ldrb	r3, [r7, #23]
}
 8011e0a:	4618      	mov	r0, r3
 8011e0c:	371c      	adds	r7, #28
 8011e0e:	46bd      	mov	sp, r7
 8011e10:	bd90      	pop	{r4, r7, pc}
 8011e12:	bf00      	nop
 8011e14:	20002d8c 	.word	0x20002d8c

08011e18 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b084      	sub	sp, #16
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	4603      	mov	r3, r0
 8011e20:	603a      	str	r2, [r7, #0]
 8011e22:	71fb      	strb	r3, [r7, #7]
 8011e24:	460b      	mov	r3, r1
 8011e26:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8011e28:	79fb      	ldrb	r3, [r7, #7]
 8011e2a:	4a09      	ldr	r2, [pc, #36]	; (8011e50 <disk_ioctl+0x38>)
 8011e2c:	009b      	lsls	r3, r3, #2
 8011e2e:	4413      	add	r3, r2
 8011e30:	685b      	ldr	r3, [r3, #4]
 8011e32:	691b      	ldr	r3, [r3, #16]
 8011e34:	79fa      	ldrb	r2, [r7, #7]
 8011e36:	4906      	ldr	r1, [pc, #24]	; (8011e50 <disk_ioctl+0x38>)
 8011e38:	440a      	add	r2, r1
 8011e3a:	7a10      	ldrb	r0, [r2, #8]
 8011e3c:	79b9      	ldrb	r1, [r7, #6]
 8011e3e:	683a      	ldr	r2, [r7, #0]
 8011e40:	4798      	blx	r3
 8011e42:	4603      	mov	r3, r0
 8011e44:	73fb      	strb	r3, [r7, #15]
  return res;
 8011e46:	7bfb      	ldrb	r3, [r7, #15]
}
 8011e48:	4618      	mov	r0, r3
 8011e4a:	3710      	adds	r7, #16
 8011e4c:	46bd      	mov	sp, r7
 8011e4e:	bd80      	pop	{r7, pc}
 8011e50:	20002d8c 	.word	0x20002d8c

08011e54 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8011e54:	b480      	push	{r7}
 8011e56:	b085      	sub	sp, #20
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	3301      	adds	r3, #1
 8011e60:	781b      	ldrb	r3, [r3, #0]
 8011e62:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8011e64:	89fb      	ldrh	r3, [r7, #14]
 8011e66:	021b      	lsls	r3, r3, #8
 8011e68:	b21a      	sxth	r2, r3
 8011e6a:	687b      	ldr	r3, [r7, #4]
 8011e6c:	781b      	ldrb	r3, [r3, #0]
 8011e6e:	b21b      	sxth	r3, r3
 8011e70:	4313      	orrs	r3, r2
 8011e72:	b21b      	sxth	r3, r3
 8011e74:	81fb      	strh	r3, [r7, #14]
	return rv;
 8011e76:	89fb      	ldrh	r3, [r7, #14]
}
 8011e78:	4618      	mov	r0, r3
 8011e7a:	3714      	adds	r7, #20
 8011e7c:	46bd      	mov	sp, r7
 8011e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e82:	4770      	bx	lr

08011e84 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8011e84:	b480      	push	{r7}
 8011e86:	b085      	sub	sp, #20
 8011e88:	af00      	add	r7, sp, #0
 8011e8a:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	3303      	adds	r3, #3
 8011e90:	781b      	ldrb	r3, [r3, #0]
 8011e92:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8011e94:	68fb      	ldr	r3, [r7, #12]
 8011e96:	021b      	lsls	r3, r3, #8
 8011e98:	687a      	ldr	r2, [r7, #4]
 8011e9a:	3202      	adds	r2, #2
 8011e9c:	7812      	ldrb	r2, [r2, #0]
 8011e9e:	4313      	orrs	r3, r2
 8011ea0:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8011ea2:	68fb      	ldr	r3, [r7, #12]
 8011ea4:	021b      	lsls	r3, r3, #8
 8011ea6:	687a      	ldr	r2, [r7, #4]
 8011ea8:	3201      	adds	r2, #1
 8011eaa:	7812      	ldrb	r2, [r2, #0]
 8011eac:	4313      	orrs	r3, r2
 8011eae:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8011eb0:	68fb      	ldr	r3, [r7, #12]
 8011eb2:	021b      	lsls	r3, r3, #8
 8011eb4:	687a      	ldr	r2, [r7, #4]
 8011eb6:	7812      	ldrb	r2, [r2, #0]
 8011eb8:	4313      	orrs	r3, r2
 8011eba:	60fb      	str	r3, [r7, #12]
	return rv;
 8011ebc:	68fb      	ldr	r3, [r7, #12]
}
 8011ebe:	4618      	mov	r0, r3
 8011ec0:	3714      	adds	r7, #20
 8011ec2:	46bd      	mov	sp, r7
 8011ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ec8:	4770      	bx	lr

08011eca <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8011eca:	b480      	push	{r7}
 8011ecc:	b083      	sub	sp, #12
 8011ece:	af00      	add	r7, sp, #0
 8011ed0:	6078      	str	r0, [r7, #4]
 8011ed2:	460b      	mov	r3, r1
 8011ed4:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8011ed6:	687b      	ldr	r3, [r7, #4]
 8011ed8:	1c5a      	adds	r2, r3, #1
 8011eda:	607a      	str	r2, [r7, #4]
 8011edc:	887a      	ldrh	r2, [r7, #2]
 8011ede:	b2d2      	uxtb	r2, r2
 8011ee0:	701a      	strb	r2, [r3, #0]
 8011ee2:	887b      	ldrh	r3, [r7, #2]
 8011ee4:	0a1b      	lsrs	r3, r3, #8
 8011ee6:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	1c5a      	adds	r2, r3, #1
 8011eec:	607a      	str	r2, [r7, #4]
 8011eee:	887a      	ldrh	r2, [r7, #2]
 8011ef0:	b2d2      	uxtb	r2, r2
 8011ef2:	701a      	strb	r2, [r3, #0]
}
 8011ef4:	bf00      	nop
 8011ef6:	370c      	adds	r7, #12
 8011ef8:	46bd      	mov	sp, r7
 8011efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011efe:	4770      	bx	lr

08011f00 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8011f00:	b480      	push	{r7}
 8011f02:	b083      	sub	sp, #12
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f0a:	687b      	ldr	r3, [r7, #4]
 8011f0c:	1c5a      	adds	r2, r3, #1
 8011f0e:	607a      	str	r2, [r7, #4]
 8011f10:	683a      	ldr	r2, [r7, #0]
 8011f12:	b2d2      	uxtb	r2, r2
 8011f14:	701a      	strb	r2, [r3, #0]
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	0a1b      	lsrs	r3, r3, #8
 8011f1a:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	1c5a      	adds	r2, r3, #1
 8011f20:	607a      	str	r2, [r7, #4]
 8011f22:	683a      	ldr	r2, [r7, #0]
 8011f24:	b2d2      	uxtb	r2, r2
 8011f26:	701a      	strb	r2, [r3, #0]
 8011f28:	683b      	ldr	r3, [r7, #0]
 8011f2a:	0a1b      	lsrs	r3, r3, #8
 8011f2c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	1c5a      	adds	r2, r3, #1
 8011f32:	607a      	str	r2, [r7, #4]
 8011f34:	683a      	ldr	r2, [r7, #0]
 8011f36:	b2d2      	uxtb	r2, r2
 8011f38:	701a      	strb	r2, [r3, #0]
 8011f3a:	683b      	ldr	r3, [r7, #0]
 8011f3c:	0a1b      	lsrs	r3, r3, #8
 8011f3e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8011f40:	687b      	ldr	r3, [r7, #4]
 8011f42:	1c5a      	adds	r2, r3, #1
 8011f44:	607a      	str	r2, [r7, #4]
 8011f46:	683a      	ldr	r2, [r7, #0]
 8011f48:	b2d2      	uxtb	r2, r2
 8011f4a:	701a      	strb	r2, [r3, #0]
}
 8011f4c:	bf00      	nop
 8011f4e:	370c      	adds	r7, #12
 8011f50:	46bd      	mov	sp, r7
 8011f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f56:	4770      	bx	lr

08011f58 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8011f58:	b480      	push	{r7}
 8011f5a:	b087      	sub	sp, #28
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	60f8      	str	r0, [r7, #12]
 8011f60:	60b9      	str	r1, [r7, #8]
 8011f62:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011f64:	68fb      	ldr	r3, [r7, #12]
 8011f66:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8011f68:	68bb      	ldr	r3, [r7, #8]
 8011f6a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8011f6c:	687b      	ldr	r3, [r7, #4]
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d00d      	beq.n	8011f8e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8011f72:	693a      	ldr	r2, [r7, #16]
 8011f74:	1c53      	adds	r3, r2, #1
 8011f76:	613b      	str	r3, [r7, #16]
 8011f78:	697b      	ldr	r3, [r7, #20]
 8011f7a:	1c59      	adds	r1, r3, #1
 8011f7c:	6179      	str	r1, [r7, #20]
 8011f7e:	7812      	ldrb	r2, [r2, #0]
 8011f80:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8011f82:	687b      	ldr	r3, [r7, #4]
 8011f84:	3b01      	subs	r3, #1
 8011f86:	607b      	str	r3, [r7, #4]
 8011f88:	687b      	ldr	r3, [r7, #4]
 8011f8a:	2b00      	cmp	r3, #0
 8011f8c:	d1f1      	bne.n	8011f72 <mem_cpy+0x1a>
	}
}
 8011f8e:	bf00      	nop
 8011f90:	371c      	adds	r7, #28
 8011f92:	46bd      	mov	sp, r7
 8011f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f98:	4770      	bx	lr

08011f9a <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8011f9a:	b480      	push	{r7}
 8011f9c:	b087      	sub	sp, #28
 8011f9e:	af00      	add	r7, sp, #0
 8011fa0:	60f8      	str	r0, [r7, #12]
 8011fa2:	60b9      	str	r1, [r7, #8]
 8011fa4:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8011faa:	697b      	ldr	r3, [r7, #20]
 8011fac:	1c5a      	adds	r2, r3, #1
 8011fae:	617a      	str	r2, [r7, #20]
 8011fb0:	68ba      	ldr	r2, [r7, #8]
 8011fb2:	b2d2      	uxtb	r2, r2
 8011fb4:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	3b01      	subs	r3, #1
 8011fba:	607b      	str	r3, [r7, #4]
 8011fbc:	687b      	ldr	r3, [r7, #4]
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d1f3      	bne.n	8011faa <mem_set+0x10>
}
 8011fc2:	bf00      	nop
 8011fc4:	bf00      	nop
 8011fc6:	371c      	adds	r7, #28
 8011fc8:	46bd      	mov	sp, r7
 8011fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011fce:	4770      	bx	lr

08011fd0 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8011fd0:	b480      	push	{r7}
 8011fd2:	b089      	sub	sp, #36	; 0x24
 8011fd4:	af00      	add	r7, sp, #0
 8011fd6:	60f8      	str	r0, [r7, #12]
 8011fd8:	60b9      	str	r1, [r7, #8]
 8011fda:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	61fb      	str	r3, [r7, #28]
 8011fe0:	68bb      	ldr	r3, [r7, #8]
 8011fe2:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8011fe4:	2300      	movs	r3, #0
 8011fe6:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8011fe8:	69fb      	ldr	r3, [r7, #28]
 8011fea:	1c5a      	adds	r2, r3, #1
 8011fec:	61fa      	str	r2, [r7, #28]
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	4619      	mov	r1, r3
 8011ff2:	69bb      	ldr	r3, [r7, #24]
 8011ff4:	1c5a      	adds	r2, r3, #1
 8011ff6:	61ba      	str	r2, [r7, #24]
 8011ff8:	781b      	ldrb	r3, [r3, #0]
 8011ffa:	1acb      	subs	r3, r1, r3
 8011ffc:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	3b01      	subs	r3, #1
 8012002:	607b      	str	r3, [r7, #4]
 8012004:	687b      	ldr	r3, [r7, #4]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d002      	beq.n	8012010 <mem_cmp+0x40>
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	2b00      	cmp	r3, #0
 801200e:	d0eb      	beq.n	8011fe8 <mem_cmp+0x18>

	return r;
 8012010:	697b      	ldr	r3, [r7, #20]
}
 8012012:	4618      	mov	r0, r3
 8012014:	3724      	adds	r7, #36	; 0x24
 8012016:	46bd      	mov	sp, r7
 8012018:	f85d 7b04 	ldr.w	r7, [sp], #4
 801201c:	4770      	bx	lr

0801201e <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 801201e:	b480      	push	{r7}
 8012020:	b083      	sub	sp, #12
 8012022:	af00      	add	r7, sp, #0
 8012024:	6078      	str	r0, [r7, #4]
 8012026:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8012028:	e002      	b.n	8012030 <chk_chr+0x12>
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	3301      	adds	r3, #1
 801202e:	607b      	str	r3, [r7, #4]
 8012030:	687b      	ldr	r3, [r7, #4]
 8012032:	781b      	ldrb	r3, [r3, #0]
 8012034:	2b00      	cmp	r3, #0
 8012036:	d005      	beq.n	8012044 <chk_chr+0x26>
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	781b      	ldrb	r3, [r3, #0]
 801203c:	461a      	mov	r2, r3
 801203e:	683b      	ldr	r3, [r7, #0]
 8012040:	4293      	cmp	r3, r2
 8012042:	d1f2      	bne.n	801202a <chk_chr+0xc>
	return *str;
 8012044:	687b      	ldr	r3, [r7, #4]
 8012046:	781b      	ldrb	r3, [r3, #0]
}
 8012048:	4618      	mov	r0, r3
 801204a:	370c      	adds	r7, #12
 801204c:	46bd      	mov	sp, r7
 801204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012052:	4770      	bx	lr

08012054 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012054:	b480      	push	{r7}
 8012056:	b085      	sub	sp, #20
 8012058:	af00      	add	r7, sp, #0
 801205a:	6078      	str	r0, [r7, #4]
 801205c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 801205e:	2300      	movs	r3, #0
 8012060:	60bb      	str	r3, [r7, #8]
 8012062:	68bb      	ldr	r3, [r7, #8]
 8012064:	60fb      	str	r3, [r7, #12]
 8012066:	e029      	b.n	80120bc <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8012068:	4a27      	ldr	r2, [pc, #156]	; (8012108 <chk_lock+0xb4>)
 801206a:	68fb      	ldr	r3, [r7, #12]
 801206c:	011b      	lsls	r3, r3, #4
 801206e:	4413      	add	r3, r2
 8012070:	681b      	ldr	r3, [r3, #0]
 8012072:	2b00      	cmp	r3, #0
 8012074:	d01d      	beq.n	80120b2 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012076:	4a24      	ldr	r2, [pc, #144]	; (8012108 <chk_lock+0xb4>)
 8012078:	68fb      	ldr	r3, [r7, #12]
 801207a:	011b      	lsls	r3, r3, #4
 801207c:	4413      	add	r3, r2
 801207e:	681a      	ldr	r2, [r3, #0]
 8012080:	687b      	ldr	r3, [r7, #4]
 8012082:	681b      	ldr	r3, [r3, #0]
 8012084:	429a      	cmp	r2, r3
 8012086:	d116      	bne.n	80120b6 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8012088:	4a1f      	ldr	r2, [pc, #124]	; (8012108 <chk_lock+0xb4>)
 801208a:	68fb      	ldr	r3, [r7, #12]
 801208c:	011b      	lsls	r3, r3, #4
 801208e:	4413      	add	r3, r2
 8012090:	3304      	adds	r3, #4
 8012092:	681a      	ldr	r2, [r3, #0]
 8012094:	687b      	ldr	r3, [r7, #4]
 8012096:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8012098:	429a      	cmp	r2, r3
 801209a:	d10c      	bne.n	80120b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 801209c:	4a1a      	ldr	r2, [pc, #104]	; (8012108 <chk_lock+0xb4>)
 801209e:	68fb      	ldr	r3, [r7, #12]
 80120a0:	011b      	lsls	r3, r3, #4
 80120a2:	4413      	add	r3, r2
 80120a4:	3308      	adds	r3, #8
 80120a6:	681a      	ldr	r2, [r3, #0]
 80120a8:	687b      	ldr	r3, [r7, #4]
 80120aa:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80120ac:	429a      	cmp	r2, r3
 80120ae:	d102      	bne.n	80120b6 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80120b0:	e007      	b.n	80120c2 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80120b2:	2301      	movs	r3, #1
 80120b4:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80120b6:	68fb      	ldr	r3, [r7, #12]
 80120b8:	3301      	adds	r3, #1
 80120ba:	60fb      	str	r3, [r7, #12]
 80120bc:	68fb      	ldr	r3, [r7, #12]
 80120be:	2b01      	cmp	r3, #1
 80120c0:	d9d2      	bls.n	8012068 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80120c2:	68fb      	ldr	r3, [r7, #12]
 80120c4:	2b02      	cmp	r3, #2
 80120c6:	d109      	bne.n	80120dc <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80120c8:	68bb      	ldr	r3, [r7, #8]
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d102      	bne.n	80120d4 <chk_lock+0x80>
 80120ce:	683b      	ldr	r3, [r7, #0]
 80120d0:	2b02      	cmp	r3, #2
 80120d2:	d101      	bne.n	80120d8 <chk_lock+0x84>
 80120d4:	2300      	movs	r3, #0
 80120d6:	e010      	b.n	80120fa <chk_lock+0xa6>
 80120d8:	2312      	movs	r3, #18
 80120da:	e00e      	b.n	80120fa <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80120dc:	683b      	ldr	r3, [r7, #0]
 80120de:	2b00      	cmp	r3, #0
 80120e0:	d108      	bne.n	80120f4 <chk_lock+0xa0>
 80120e2:	4a09      	ldr	r2, [pc, #36]	; (8012108 <chk_lock+0xb4>)
 80120e4:	68fb      	ldr	r3, [r7, #12]
 80120e6:	011b      	lsls	r3, r3, #4
 80120e8:	4413      	add	r3, r2
 80120ea:	330c      	adds	r3, #12
 80120ec:	881b      	ldrh	r3, [r3, #0]
 80120ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80120f2:	d101      	bne.n	80120f8 <chk_lock+0xa4>
 80120f4:	2310      	movs	r3, #16
 80120f6:	e000      	b.n	80120fa <chk_lock+0xa6>
 80120f8:	2300      	movs	r3, #0
}
 80120fa:	4618      	mov	r0, r3
 80120fc:	3714      	adds	r7, #20
 80120fe:	46bd      	mov	sp, r7
 8012100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012104:	4770      	bx	lr
 8012106:	bf00      	nop
 8012108:	20002b6c 	.word	0x20002b6c

0801210c <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 801210c:	b480      	push	{r7}
 801210e:	b083      	sub	sp, #12
 8012110:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8012112:	2300      	movs	r3, #0
 8012114:	607b      	str	r3, [r7, #4]
 8012116:	e002      	b.n	801211e <enq_lock+0x12>
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	3301      	adds	r3, #1
 801211c:	607b      	str	r3, [r7, #4]
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	2b01      	cmp	r3, #1
 8012122:	d806      	bhi.n	8012132 <enq_lock+0x26>
 8012124:	4a09      	ldr	r2, [pc, #36]	; (801214c <enq_lock+0x40>)
 8012126:	687b      	ldr	r3, [r7, #4]
 8012128:	011b      	lsls	r3, r3, #4
 801212a:	4413      	add	r3, r2
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	2b00      	cmp	r3, #0
 8012130:	d1f2      	bne.n	8012118 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	2b02      	cmp	r3, #2
 8012136:	bf14      	ite	ne
 8012138:	2301      	movne	r3, #1
 801213a:	2300      	moveq	r3, #0
 801213c:	b2db      	uxtb	r3, r3
}
 801213e:	4618      	mov	r0, r3
 8012140:	370c      	adds	r7, #12
 8012142:	46bd      	mov	sp, r7
 8012144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012148:	4770      	bx	lr
 801214a:	bf00      	nop
 801214c:	20002b6c 	.word	0x20002b6c

08012150 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8012150:	b480      	push	{r7}
 8012152:	b085      	sub	sp, #20
 8012154:	af00      	add	r7, sp, #0
 8012156:	6078      	str	r0, [r7, #4]
 8012158:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801215a:	2300      	movs	r3, #0
 801215c:	60fb      	str	r3, [r7, #12]
 801215e:	e01f      	b.n	80121a0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8012160:	4a41      	ldr	r2, [pc, #260]	; (8012268 <inc_lock+0x118>)
 8012162:	68fb      	ldr	r3, [r7, #12]
 8012164:	011b      	lsls	r3, r3, #4
 8012166:	4413      	add	r3, r2
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	681b      	ldr	r3, [r3, #0]
 801216e:	429a      	cmp	r2, r3
 8012170:	d113      	bne.n	801219a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8012172:	4a3d      	ldr	r2, [pc, #244]	; (8012268 <inc_lock+0x118>)
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	011b      	lsls	r3, r3, #4
 8012178:	4413      	add	r3, r2
 801217a:	3304      	adds	r3, #4
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8012182:	429a      	cmp	r2, r3
 8012184:	d109      	bne.n	801219a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8012186:	4a38      	ldr	r2, [pc, #224]	; (8012268 <inc_lock+0x118>)
 8012188:	68fb      	ldr	r3, [r7, #12]
 801218a:	011b      	lsls	r3, r3, #4
 801218c:	4413      	add	r3, r2
 801218e:	3308      	adds	r3, #8
 8012190:	681a      	ldr	r2, [r3, #0]
 8012192:	687b      	ldr	r3, [r7, #4]
 8012194:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8012196:	429a      	cmp	r2, r3
 8012198:	d006      	beq.n	80121a8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 801219a:	68fb      	ldr	r3, [r7, #12]
 801219c:	3301      	adds	r3, #1
 801219e:	60fb      	str	r3, [r7, #12]
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d9dc      	bls.n	8012160 <inc_lock+0x10>
 80121a6:	e000      	b.n	80121aa <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80121a8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80121aa:	68fb      	ldr	r3, [r7, #12]
 80121ac:	2b02      	cmp	r3, #2
 80121ae:	d132      	bne.n	8012216 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80121b0:	2300      	movs	r3, #0
 80121b2:	60fb      	str	r3, [r7, #12]
 80121b4:	e002      	b.n	80121bc <inc_lock+0x6c>
 80121b6:	68fb      	ldr	r3, [r7, #12]
 80121b8:	3301      	adds	r3, #1
 80121ba:	60fb      	str	r3, [r7, #12]
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	2b01      	cmp	r3, #1
 80121c0:	d806      	bhi.n	80121d0 <inc_lock+0x80>
 80121c2:	4a29      	ldr	r2, [pc, #164]	; (8012268 <inc_lock+0x118>)
 80121c4:	68fb      	ldr	r3, [r7, #12]
 80121c6:	011b      	lsls	r3, r3, #4
 80121c8:	4413      	add	r3, r2
 80121ca:	681b      	ldr	r3, [r3, #0]
 80121cc:	2b00      	cmp	r3, #0
 80121ce:	d1f2      	bne.n	80121b6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	2b02      	cmp	r3, #2
 80121d4:	d101      	bne.n	80121da <inc_lock+0x8a>
 80121d6:	2300      	movs	r3, #0
 80121d8:	e040      	b.n	801225c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	681a      	ldr	r2, [r3, #0]
 80121de:	4922      	ldr	r1, [pc, #136]	; (8012268 <inc_lock+0x118>)
 80121e0:	68fb      	ldr	r3, [r7, #12]
 80121e2:	011b      	lsls	r3, r3, #4
 80121e4:	440b      	add	r3, r1
 80121e6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	689a      	ldr	r2, [r3, #8]
 80121ec:	491e      	ldr	r1, [pc, #120]	; (8012268 <inc_lock+0x118>)
 80121ee:	68fb      	ldr	r3, [r7, #12]
 80121f0:	011b      	lsls	r3, r3, #4
 80121f2:	440b      	add	r3, r1
 80121f4:	3304      	adds	r3, #4
 80121f6:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 80121f8:	687b      	ldr	r3, [r7, #4]
 80121fa:	695a      	ldr	r2, [r3, #20]
 80121fc:	491a      	ldr	r1, [pc, #104]	; (8012268 <inc_lock+0x118>)
 80121fe:	68fb      	ldr	r3, [r7, #12]
 8012200:	011b      	lsls	r3, r3, #4
 8012202:	440b      	add	r3, r1
 8012204:	3308      	adds	r3, #8
 8012206:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8012208:	4a17      	ldr	r2, [pc, #92]	; (8012268 <inc_lock+0x118>)
 801220a:	68fb      	ldr	r3, [r7, #12]
 801220c:	011b      	lsls	r3, r3, #4
 801220e:	4413      	add	r3, r2
 8012210:	330c      	adds	r3, #12
 8012212:	2200      	movs	r2, #0
 8012214:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	2b00      	cmp	r3, #0
 801221a:	d009      	beq.n	8012230 <inc_lock+0xe0>
 801221c:	4a12      	ldr	r2, [pc, #72]	; (8012268 <inc_lock+0x118>)
 801221e:	68fb      	ldr	r3, [r7, #12]
 8012220:	011b      	lsls	r3, r3, #4
 8012222:	4413      	add	r3, r2
 8012224:	330c      	adds	r3, #12
 8012226:	881b      	ldrh	r3, [r3, #0]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d001      	beq.n	8012230 <inc_lock+0xe0>
 801222c:	2300      	movs	r3, #0
 801222e:	e015      	b.n	801225c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8012230:	683b      	ldr	r3, [r7, #0]
 8012232:	2b00      	cmp	r3, #0
 8012234:	d108      	bne.n	8012248 <inc_lock+0xf8>
 8012236:	4a0c      	ldr	r2, [pc, #48]	; (8012268 <inc_lock+0x118>)
 8012238:	68fb      	ldr	r3, [r7, #12]
 801223a:	011b      	lsls	r3, r3, #4
 801223c:	4413      	add	r3, r2
 801223e:	330c      	adds	r3, #12
 8012240:	881b      	ldrh	r3, [r3, #0]
 8012242:	3301      	adds	r3, #1
 8012244:	b29a      	uxth	r2, r3
 8012246:	e001      	b.n	801224c <inc_lock+0xfc>
 8012248:	f44f 7280 	mov.w	r2, #256	; 0x100
 801224c:	4906      	ldr	r1, [pc, #24]	; (8012268 <inc_lock+0x118>)
 801224e:	68fb      	ldr	r3, [r7, #12]
 8012250:	011b      	lsls	r3, r3, #4
 8012252:	440b      	add	r3, r1
 8012254:	330c      	adds	r3, #12
 8012256:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8012258:	68fb      	ldr	r3, [r7, #12]
 801225a:	3301      	adds	r3, #1
}
 801225c:	4618      	mov	r0, r3
 801225e:	3714      	adds	r7, #20
 8012260:	46bd      	mov	sp, r7
 8012262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012266:	4770      	bx	lr
 8012268:	20002b6c 	.word	0x20002b6c

0801226c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 801226c:	b480      	push	{r7}
 801226e:	b085      	sub	sp, #20
 8012270:	af00      	add	r7, sp, #0
 8012272:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8012274:	687b      	ldr	r3, [r7, #4]
 8012276:	3b01      	subs	r3, #1
 8012278:	607b      	str	r3, [r7, #4]
 801227a:	687b      	ldr	r3, [r7, #4]
 801227c:	2b01      	cmp	r3, #1
 801227e:	d825      	bhi.n	80122cc <dec_lock+0x60>
		n = Files[i].ctr;
 8012280:	4a17      	ldr	r2, [pc, #92]	; (80122e0 <dec_lock+0x74>)
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	011b      	lsls	r3, r3, #4
 8012286:	4413      	add	r3, r2
 8012288:	330c      	adds	r3, #12
 801228a:	881b      	ldrh	r3, [r3, #0]
 801228c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 801228e:	89fb      	ldrh	r3, [r7, #14]
 8012290:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8012294:	d101      	bne.n	801229a <dec_lock+0x2e>
 8012296:	2300      	movs	r3, #0
 8012298:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 801229a:	89fb      	ldrh	r3, [r7, #14]
 801229c:	2b00      	cmp	r3, #0
 801229e:	d002      	beq.n	80122a6 <dec_lock+0x3a>
 80122a0:	89fb      	ldrh	r3, [r7, #14]
 80122a2:	3b01      	subs	r3, #1
 80122a4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80122a6:	4a0e      	ldr	r2, [pc, #56]	; (80122e0 <dec_lock+0x74>)
 80122a8:	687b      	ldr	r3, [r7, #4]
 80122aa:	011b      	lsls	r3, r3, #4
 80122ac:	4413      	add	r3, r2
 80122ae:	330c      	adds	r3, #12
 80122b0:	89fa      	ldrh	r2, [r7, #14]
 80122b2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80122b4:	89fb      	ldrh	r3, [r7, #14]
 80122b6:	2b00      	cmp	r3, #0
 80122b8:	d105      	bne.n	80122c6 <dec_lock+0x5a>
 80122ba:	4a09      	ldr	r2, [pc, #36]	; (80122e0 <dec_lock+0x74>)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	011b      	lsls	r3, r3, #4
 80122c0:	4413      	add	r3, r2
 80122c2:	2200      	movs	r2, #0
 80122c4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80122c6:	2300      	movs	r3, #0
 80122c8:	737b      	strb	r3, [r7, #13]
 80122ca:	e001      	b.n	80122d0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80122cc:	2302      	movs	r3, #2
 80122ce:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80122d0:	7b7b      	ldrb	r3, [r7, #13]
}
 80122d2:	4618      	mov	r0, r3
 80122d4:	3714      	adds	r7, #20
 80122d6:	46bd      	mov	sp, r7
 80122d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122dc:	4770      	bx	lr
 80122de:	bf00      	nop
 80122e0:	20002b6c 	.word	0x20002b6c

080122e4 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80122e4:	b480      	push	{r7}
 80122e6:	b085      	sub	sp, #20
 80122e8:	af00      	add	r7, sp, #0
 80122ea:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 80122ec:	2300      	movs	r3, #0
 80122ee:	60fb      	str	r3, [r7, #12]
 80122f0:	e010      	b.n	8012314 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 80122f2:	4a0d      	ldr	r2, [pc, #52]	; (8012328 <clear_lock+0x44>)
 80122f4:	68fb      	ldr	r3, [r7, #12]
 80122f6:	011b      	lsls	r3, r3, #4
 80122f8:	4413      	add	r3, r2
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	687a      	ldr	r2, [r7, #4]
 80122fe:	429a      	cmp	r2, r3
 8012300:	d105      	bne.n	801230e <clear_lock+0x2a>
 8012302:	4a09      	ldr	r2, [pc, #36]	; (8012328 <clear_lock+0x44>)
 8012304:	68fb      	ldr	r3, [r7, #12]
 8012306:	011b      	lsls	r3, r3, #4
 8012308:	4413      	add	r3, r2
 801230a:	2200      	movs	r2, #0
 801230c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	3301      	adds	r3, #1
 8012312:	60fb      	str	r3, [r7, #12]
 8012314:	68fb      	ldr	r3, [r7, #12]
 8012316:	2b01      	cmp	r3, #1
 8012318:	d9eb      	bls.n	80122f2 <clear_lock+0xe>
	}
}
 801231a:	bf00      	nop
 801231c:	bf00      	nop
 801231e:	3714      	adds	r7, #20
 8012320:	46bd      	mov	sp, r7
 8012322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012326:	4770      	bx	lr
 8012328:	20002b6c 	.word	0x20002b6c

0801232c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 801232c:	b580      	push	{r7, lr}
 801232e:	b086      	sub	sp, #24
 8012330:	af00      	add	r7, sp, #0
 8012332:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8012334:	2300      	movs	r3, #0
 8012336:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8012338:	687b      	ldr	r3, [r7, #4]
 801233a:	78db      	ldrb	r3, [r3, #3]
 801233c:	2b00      	cmp	r3, #0
 801233e:	d034      	beq.n	80123aa <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8012340:	687b      	ldr	r3, [r7, #4]
 8012342:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012344:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	7858      	ldrb	r0, [r3, #1]
 801234a:	687b      	ldr	r3, [r7, #4]
 801234c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012350:	2301      	movs	r3, #1
 8012352:	697a      	ldr	r2, [r7, #20]
 8012354:	f7ff fd40 	bl	8011dd8 <disk_write>
 8012358:	4603      	mov	r3, r0
 801235a:	2b00      	cmp	r3, #0
 801235c:	d002      	beq.n	8012364 <sync_window+0x38>
			res = FR_DISK_ERR;
 801235e:	2301      	movs	r3, #1
 8012360:	73fb      	strb	r3, [r7, #15]
 8012362:	e022      	b.n	80123aa <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	2200      	movs	r2, #0
 8012368:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 801236a:	687b      	ldr	r3, [r7, #4]
 801236c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801236e:	697a      	ldr	r2, [r7, #20]
 8012370:	1ad2      	subs	r2, r2, r3
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	6a1b      	ldr	r3, [r3, #32]
 8012376:	429a      	cmp	r2, r3
 8012378:	d217      	bcs.n	80123aa <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	789b      	ldrb	r3, [r3, #2]
 801237e:	613b      	str	r3, [r7, #16]
 8012380:	e010      	b.n	80123a4 <sync_window+0x78>
					wsect += fs->fsize;
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	6a1b      	ldr	r3, [r3, #32]
 8012386:	697a      	ldr	r2, [r7, #20]
 8012388:	4413      	add	r3, r2
 801238a:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	7858      	ldrb	r0, [r3, #1]
 8012390:	687b      	ldr	r3, [r7, #4]
 8012392:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012396:	2301      	movs	r3, #1
 8012398:	697a      	ldr	r2, [r7, #20]
 801239a:	f7ff fd1d 	bl	8011dd8 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 801239e:	693b      	ldr	r3, [r7, #16]
 80123a0:	3b01      	subs	r3, #1
 80123a2:	613b      	str	r3, [r7, #16]
 80123a4:	693b      	ldr	r3, [r7, #16]
 80123a6:	2b01      	cmp	r3, #1
 80123a8:	d8eb      	bhi.n	8012382 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80123aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80123ac:	4618      	mov	r0, r3
 80123ae:	3718      	adds	r7, #24
 80123b0:	46bd      	mov	sp, r7
 80123b2:	bd80      	pop	{r7, pc}

080123b4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	b084      	sub	sp, #16
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
 80123bc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80123be:	2300      	movs	r3, #0
 80123c0:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80123c2:	687b      	ldr	r3, [r7, #4]
 80123c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80123c6:	683a      	ldr	r2, [r7, #0]
 80123c8:	429a      	cmp	r2, r3
 80123ca:	d01b      	beq.n	8012404 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80123cc:	6878      	ldr	r0, [r7, #4]
 80123ce:	f7ff ffad 	bl	801232c <sync_window>
 80123d2:	4603      	mov	r3, r0
 80123d4:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80123d6:	7bfb      	ldrb	r3, [r7, #15]
 80123d8:	2b00      	cmp	r3, #0
 80123da:	d113      	bne.n	8012404 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	7858      	ldrb	r0, [r3, #1]
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80123e6:	2301      	movs	r3, #1
 80123e8:	683a      	ldr	r2, [r7, #0]
 80123ea:	f7ff fcd5 	bl	8011d98 <disk_read>
 80123ee:	4603      	mov	r3, r0
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d004      	beq.n	80123fe <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 80123f4:	f04f 33ff 	mov.w	r3, #4294967295
 80123f8:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 80123fa:	2301      	movs	r3, #1
 80123fc:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	683a      	ldr	r2, [r7, #0]
 8012402:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8012404:	7bfb      	ldrb	r3, [r7, #15]
}
 8012406:	4618      	mov	r0, r3
 8012408:	3710      	adds	r7, #16
 801240a:	46bd      	mov	sp, r7
 801240c:	bd80      	pop	{r7, pc}
	...

08012410 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8012410:	b580      	push	{r7, lr}
 8012412:	b084      	sub	sp, #16
 8012414:	af00      	add	r7, sp, #0
 8012416:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8012418:	6878      	ldr	r0, [r7, #4]
 801241a:	f7ff ff87 	bl	801232c <sync_window>
 801241e:	4603      	mov	r3, r0
 8012420:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8012422:	7bfb      	ldrb	r3, [r7, #15]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d159      	bne.n	80124dc <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	781b      	ldrb	r3, [r3, #0]
 801242c:	2b03      	cmp	r3, #3
 801242e:	d149      	bne.n	80124c4 <sync_fs+0xb4>
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	791b      	ldrb	r3, [r3, #4]
 8012434:	2b01      	cmp	r3, #1
 8012436:	d145      	bne.n	80124c4 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 801243e:	687b      	ldr	r3, [r7, #4]
 8012440:	899b      	ldrh	r3, [r3, #12]
 8012442:	461a      	mov	r2, r3
 8012444:	2100      	movs	r1, #0
 8012446:	f7ff fda8 	bl	8011f9a <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	3338      	adds	r3, #56	; 0x38
 801244e:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8012452:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8012456:	4618      	mov	r0, r3
 8012458:	f7ff fd37 	bl	8011eca <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 801245c:	687b      	ldr	r3, [r7, #4]
 801245e:	3338      	adds	r3, #56	; 0x38
 8012460:	4921      	ldr	r1, [pc, #132]	; (80124e8 <sync_fs+0xd8>)
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff fd4c 	bl	8011f00 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8012468:	687b      	ldr	r3, [r7, #4]
 801246a:	3338      	adds	r3, #56	; 0x38
 801246c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8012470:	491e      	ldr	r1, [pc, #120]	; (80124ec <sync_fs+0xdc>)
 8012472:	4618      	mov	r0, r3
 8012474:	f7ff fd44 	bl	8011f00 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8012478:	687b      	ldr	r3, [r7, #4]
 801247a:	3338      	adds	r3, #56	; 0x38
 801247c:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8012480:	687b      	ldr	r3, [r7, #4]
 8012482:	699b      	ldr	r3, [r3, #24]
 8012484:	4619      	mov	r1, r3
 8012486:	4610      	mov	r0, r2
 8012488:	f7ff fd3a 	bl	8011f00 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	3338      	adds	r3, #56	; 0x38
 8012490:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	695b      	ldr	r3, [r3, #20]
 8012498:	4619      	mov	r1, r3
 801249a:	4610      	mov	r0, r2
 801249c:	f7ff fd30 	bl	8011f00 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80124a0:	687b      	ldr	r3, [r7, #4]
 80124a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124a4:	1c5a      	adds	r2, r3, #1
 80124a6:	687b      	ldr	r3, [r7, #4]
 80124a8:	635a      	str	r2, [r3, #52]	; 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	7858      	ldrb	r0, [r3, #1]
 80124ae:	687b      	ldr	r3, [r7, #4]
 80124b0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80124b8:	2301      	movs	r3, #1
 80124ba:	f7ff fc8d 	bl	8011dd8 <disk_write>
			fs->fsi_flag = 0;
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	2200      	movs	r2, #0
 80124c2:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	785b      	ldrb	r3, [r3, #1]
 80124c8:	2200      	movs	r2, #0
 80124ca:	2100      	movs	r1, #0
 80124cc:	4618      	mov	r0, r3
 80124ce:	f7ff fca3 	bl	8011e18 <disk_ioctl>
 80124d2:	4603      	mov	r3, r0
 80124d4:	2b00      	cmp	r3, #0
 80124d6:	d001      	beq.n	80124dc <sync_fs+0xcc>
 80124d8:	2301      	movs	r3, #1
 80124da:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80124dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80124de:	4618      	mov	r0, r3
 80124e0:	3710      	adds	r7, #16
 80124e2:	46bd      	mov	sp, r7
 80124e4:	bd80      	pop	{r7, pc}
 80124e6:	bf00      	nop
 80124e8:	41615252 	.word	0x41615252
 80124ec:	61417272 	.word	0x61417272

080124f0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80124f0:	b480      	push	{r7}
 80124f2:	b083      	sub	sp, #12
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80124fa:	683b      	ldr	r3, [r7, #0]
 80124fc:	3b02      	subs	r3, #2
 80124fe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8012500:	687b      	ldr	r3, [r7, #4]
 8012502:	69db      	ldr	r3, [r3, #28]
 8012504:	3b02      	subs	r3, #2
 8012506:	683a      	ldr	r2, [r7, #0]
 8012508:	429a      	cmp	r2, r3
 801250a:	d301      	bcc.n	8012510 <clust2sect+0x20>
 801250c:	2300      	movs	r3, #0
 801250e:	e008      	b.n	8012522 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	895b      	ldrh	r3, [r3, #10]
 8012514:	461a      	mov	r2, r3
 8012516:	683b      	ldr	r3, [r7, #0]
 8012518:	fb03 f202 	mul.w	r2, r3, r2
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012520:	4413      	add	r3, r2
}
 8012522:	4618      	mov	r0, r3
 8012524:	370c      	adds	r7, #12
 8012526:	46bd      	mov	sp, r7
 8012528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252c:	4770      	bx	lr

0801252e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 801252e:	b580      	push	{r7, lr}
 8012530:	b086      	sub	sp, #24
 8012532:	af00      	add	r7, sp, #0
 8012534:	6078      	str	r0, [r7, #4]
 8012536:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	681b      	ldr	r3, [r3, #0]
 801253c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 801253e:	683b      	ldr	r3, [r7, #0]
 8012540:	2b01      	cmp	r3, #1
 8012542:	d904      	bls.n	801254e <get_fat+0x20>
 8012544:	693b      	ldr	r3, [r7, #16]
 8012546:	69db      	ldr	r3, [r3, #28]
 8012548:	683a      	ldr	r2, [r7, #0]
 801254a:	429a      	cmp	r2, r3
 801254c:	d302      	bcc.n	8012554 <get_fat+0x26>
		val = 1;	/* Internal error */
 801254e:	2301      	movs	r3, #1
 8012550:	617b      	str	r3, [r7, #20]
 8012552:	e0bb      	b.n	80126cc <get_fat+0x19e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8012554:	f04f 33ff 	mov.w	r3, #4294967295
 8012558:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 801255a:	693b      	ldr	r3, [r7, #16]
 801255c:	781b      	ldrb	r3, [r3, #0]
 801255e:	2b03      	cmp	r3, #3
 8012560:	f000 8083 	beq.w	801266a <get_fat+0x13c>
 8012564:	2b03      	cmp	r3, #3
 8012566:	f300 80a7 	bgt.w	80126b8 <get_fat+0x18a>
 801256a:	2b01      	cmp	r3, #1
 801256c:	d002      	beq.n	8012574 <get_fat+0x46>
 801256e:	2b02      	cmp	r3, #2
 8012570:	d056      	beq.n	8012620 <get_fat+0xf2>
 8012572:	e0a1      	b.n	80126b8 <get_fat+0x18a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8012574:	683b      	ldr	r3, [r7, #0]
 8012576:	60fb      	str	r3, [r7, #12]
 8012578:	68fb      	ldr	r3, [r7, #12]
 801257a:	085b      	lsrs	r3, r3, #1
 801257c:	68fa      	ldr	r2, [r7, #12]
 801257e:	4413      	add	r3, r2
 8012580:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8012582:	693b      	ldr	r3, [r7, #16]
 8012584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012586:	693b      	ldr	r3, [r7, #16]
 8012588:	899b      	ldrh	r3, [r3, #12]
 801258a:	4619      	mov	r1, r3
 801258c:	68fb      	ldr	r3, [r7, #12]
 801258e:	fbb3 f3f1 	udiv	r3, r3, r1
 8012592:	4413      	add	r3, r2
 8012594:	4619      	mov	r1, r3
 8012596:	6938      	ldr	r0, [r7, #16]
 8012598:	f7ff ff0c 	bl	80123b4 <move_window>
 801259c:	4603      	mov	r3, r0
 801259e:	2b00      	cmp	r3, #0
 80125a0:	f040 808d 	bne.w	80126be <get_fat+0x190>
			wc = fs->win[bc++ % SS(fs)];
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	1c5a      	adds	r2, r3, #1
 80125a8:	60fa      	str	r2, [r7, #12]
 80125aa:	693a      	ldr	r2, [r7, #16]
 80125ac:	8992      	ldrh	r2, [r2, #12]
 80125ae:	fbb3 f1f2 	udiv	r1, r3, r2
 80125b2:	fb01 f202 	mul.w	r2, r1, r2
 80125b6:	1a9b      	subs	r3, r3, r2
 80125b8:	693a      	ldr	r2, [r7, #16]
 80125ba:	4413      	add	r3, r2
 80125bc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80125c0:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80125c6:	693b      	ldr	r3, [r7, #16]
 80125c8:	899b      	ldrh	r3, [r3, #12]
 80125ca:	4619      	mov	r1, r3
 80125cc:	68fb      	ldr	r3, [r7, #12]
 80125ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80125d2:	4413      	add	r3, r2
 80125d4:	4619      	mov	r1, r3
 80125d6:	6938      	ldr	r0, [r7, #16]
 80125d8:	f7ff feec 	bl	80123b4 <move_window>
 80125dc:	4603      	mov	r3, r0
 80125de:	2b00      	cmp	r3, #0
 80125e0:	d16f      	bne.n	80126c2 <get_fat+0x194>
			wc |= fs->win[bc % SS(fs)] << 8;
 80125e2:	693b      	ldr	r3, [r7, #16]
 80125e4:	899b      	ldrh	r3, [r3, #12]
 80125e6:	461a      	mov	r2, r3
 80125e8:	68fb      	ldr	r3, [r7, #12]
 80125ea:	fbb3 f1f2 	udiv	r1, r3, r2
 80125ee:	fb01 f202 	mul.w	r2, r1, r2
 80125f2:	1a9b      	subs	r3, r3, r2
 80125f4:	693a      	ldr	r2, [r7, #16]
 80125f6:	4413      	add	r3, r2
 80125f8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80125fc:	021b      	lsls	r3, r3, #8
 80125fe:	461a      	mov	r2, r3
 8012600:	68bb      	ldr	r3, [r7, #8]
 8012602:	4313      	orrs	r3, r2
 8012604:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8012606:	683b      	ldr	r3, [r7, #0]
 8012608:	f003 0301 	and.w	r3, r3, #1
 801260c:	2b00      	cmp	r3, #0
 801260e:	d002      	beq.n	8012616 <get_fat+0xe8>
 8012610:	68bb      	ldr	r3, [r7, #8]
 8012612:	091b      	lsrs	r3, r3, #4
 8012614:	e002      	b.n	801261c <get_fat+0xee>
 8012616:	68bb      	ldr	r3, [r7, #8]
 8012618:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801261c:	617b      	str	r3, [r7, #20]
			break;
 801261e:	e055      	b.n	80126cc <get_fat+0x19e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8012620:	693b      	ldr	r3, [r7, #16]
 8012622:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012624:	693b      	ldr	r3, [r7, #16]
 8012626:	899b      	ldrh	r3, [r3, #12]
 8012628:	085b      	lsrs	r3, r3, #1
 801262a:	b29b      	uxth	r3, r3
 801262c:	4619      	mov	r1, r3
 801262e:	683b      	ldr	r3, [r7, #0]
 8012630:	fbb3 f3f1 	udiv	r3, r3, r1
 8012634:	4413      	add	r3, r2
 8012636:	4619      	mov	r1, r3
 8012638:	6938      	ldr	r0, [r7, #16]
 801263a:	f7ff febb 	bl	80123b4 <move_window>
 801263e:	4603      	mov	r3, r0
 8012640:	2b00      	cmp	r3, #0
 8012642:	d140      	bne.n	80126c6 <get_fat+0x198>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8012644:	693b      	ldr	r3, [r7, #16]
 8012646:	f103 0138 	add.w	r1, r3, #56	; 0x38
 801264a:	683b      	ldr	r3, [r7, #0]
 801264c:	005b      	lsls	r3, r3, #1
 801264e:	693a      	ldr	r2, [r7, #16]
 8012650:	8992      	ldrh	r2, [r2, #12]
 8012652:	fbb3 f0f2 	udiv	r0, r3, r2
 8012656:	fb00 f202 	mul.w	r2, r0, r2
 801265a:	1a9b      	subs	r3, r3, r2
 801265c:	440b      	add	r3, r1
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff fbf8 	bl	8011e54 <ld_word>
 8012664:	4603      	mov	r3, r0
 8012666:	617b      	str	r3, [r7, #20]
			break;
 8012668:	e030      	b.n	80126cc <get_fat+0x19e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 801266a:	693b      	ldr	r3, [r7, #16]
 801266c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801266e:	693b      	ldr	r3, [r7, #16]
 8012670:	899b      	ldrh	r3, [r3, #12]
 8012672:	089b      	lsrs	r3, r3, #2
 8012674:	b29b      	uxth	r3, r3
 8012676:	4619      	mov	r1, r3
 8012678:	683b      	ldr	r3, [r7, #0]
 801267a:	fbb3 f3f1 	udiv	r3, r3, r1
 801267e:	4413      	add	r3, r2
 8012680:	4619      	mov	r1, r3
 8012682:	6938      	ldr	r0, [r7, #16]
 8012684:	f7ff fe96 	bl	80123b4 <move_window>
 8012688:	4603      	mov	r3, r0
 801268a:	2b00      	cmp	r3, #0
 801268c:	d11d      	bne.n	80126ca <get_fat+0x19c>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 801268e:	693b      	ldr	r3, [r7, #16]
 8012690:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012694:	683b      	ldr	r3, [r7, #0]
 8012696:	009b      	lsls	r3, r3, #2
 8012698:	693a      	ldr	r2, [r7, #16]
 801269a:	8992      	ldrh	r2, [r2, #12]
 801269c:	fbb3 f0f2 	udiv	r0, r3, r2
 80126a0:	fb00 f202 	mul.w	r2, r0, r2
 80126a4:	1a9b      	subs	r3, r3, r2
 80126a6:	440b      	add	r3, r1
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7ff fbeb 	bl	8011e84 <ld_dword>
 80126ae:	4603      	mov	r3, r0
 80126b0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80126b4:	617b      	str	r3, [r7, #20]
			break;
 80126b6:	e009      	b.n	80126cc <get_fat+0x19e>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80126b8:	2301      	movs	r3, #1
 80126ba:	617b      	str	r3, [r7, #20]
 80126bc:	e006      	b.n	80126cc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80126be:	bf00      	nop
 80126c0:	e004      	b.n	80126cc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80126c2:	bf00      	nop
 80126c4:	e002      	b.n	80126cc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80126c6:	bf00      	nop
 80126c8:	e000      	b.n	80126cc <get_fat+0x19e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80126ca:	bf00      	nop
		}
	}

	return val;
 80126cc:	697b      	ldr	r3, [r7, #20]
}
 80126ce:	4618      	mov	r0, r3
 80126d0:	3718      	adds	r7, #24
 80126d2:	46bd      	mov	sp, r7
 80126d4:	bd80      	pop	{r7, pc}

080126d6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80126d6:	b590      	push	{r4, r7, lr}
 80126d8:	b089      	sub	sp, #36	; 0x24
 80126da:	af00      	add	r7, sp, #0
 80126dc:	60f8      	str	r0, [r7, #12]
 80126de:	60b9      	str	r1, [r7, #8]
 80126e0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80126e2:	2302      	movs	r3, #2
 80126e4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80126e6:	68bb      	ldr	r3, [r7, #8]
 80126e8:	2b01      	cmp	r3, #1
 80126ea:	f240 8102 	bls.w	80128f2 <put_fat+0x21c>
 80126ee:	68fb      	ldr	r3, [r7, #12]
 80126f0:	69db      	ldr	r3, [r3, #28]
 80126f2:	68ba      	ldr	r2, [r7, #8]
 80126f4:	429a      	cmp	r2, r3
 80126f6:	f080 80fc 	bcs.w	80128f2 <put_fat+0x21c>
		switch (fs->fs_type) {
 80126fa:	68fb      	ldr	r3, [r7, #12]
 80126fc:	781b      	ldrb	r3, [r3, #0]
 80126fe:	2b03      	cmp	r3, #3
 8012700:	f000 80b6 	beq.w	8012870 <put_fat+0x19a>
 8012704:	2b03      	cmp	r3, #3
 8012706:	f300 80fd 	bgt.w	8012904 <put_fat+0x22e>
 801270a:	2b01      	cmp	r3, #1
 801270c:	d003      	beq.n	8012716 <put_fat+0x40>
 801270e:	2b02      	cmp	r3, #2
 8012710:	f000 8083 	beq.w	801281a <put_fat+0x144>
 8012714:	e0f6      	b.n	8012904 <put_fat+0x22e>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	61bb      	str	r3, [r7, #24]
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	085b      	lsrs	r3, r3, #1
 801271e:	69ba      	ldr	r2, [r7, #24]
 8012720:	4413      	add	r3, r2
 8012722:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012728:	68fb      	ldr	r3, [r7, #12]
 801272a:	899b      	ldrh	r3, [r3, #12]
 801272c:	4619      	mov	r1, r3
 801272e:	69bb      	ldr	r3, [r7, #24]
 8012730:	fbb3 f3f1 	udiv	r3, r3, r1
 8012734:	4413      	add	r3, r2
 8012736:	4619      	mov	r1, r3
 8012738:	68f8      	ldr	r0, [r7, #12]
 801273a:	f7ff fe3b 	bl	80123b4 <move_window>
 801273e:	4603      	mov	r3, r0
 8012740:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012742:	7ffb      	ldrb	r3, [r7, #31]
 8012744:	2b00      	cmp	r3, #0
 8012746:	f040 80d6 	bne.w	80128f6 <put_fat+0x220>
			p = fs->win + bc++ % SS(fs);
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012750:	69bb      	ldr	r3, [r7, #24]
 8012752:	1c5a      	adds	r2, r3, #1
 8012754:	61ba      	str	r2, [r7, #24]
 8012756:	68fa      	ldr	r2, [r7, #12]
 8012758:	8992      	ldrh	r2, [r2, #12]
 801275a:	fbb3 f0f2 	udiv	r0, r3, r2
 801275e:	fb00 f202 	mul.w	r2, r0, r2
 8012762:	1a9b      	subs	r3, r3, r2
 8012764:	440b      	add	r3, r1
 8012766:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8012768:	68bb      	ldr	r3, [r7, #8]
 801276a:	f003 0301 	and.w	r3, r3, #1
 801276e:	2b00      	cmp	r3, #0
 8012770:	d00d      	beq.n	801278e <put_fat+0xb8>
 8012772:	697b      	ldr	r3, [r7, #20]
 8012774:	781b      	ldrb	r3, [r3, #0]
 8012776:	b25b      	sxtb	r3, r3
 8012778:	f003 030f 	and.w	r3, r3, #15
 801277c:	b25a      	sxtb	r2, r3
 801277e:	687b      	ldr	r3, [r7, #4]
 8012780:	b2db      	uxtb	r3, r3
 8012782:	011b      	lsls	r3, r3, #4
 8012784:	b25b      	sxtb	r3, r3
 8012786:	4313      	orrs	r3, r2
 8012788:	b25b      	sxtb	r3, r3
 801278a:	b2db      	uxtb	r3, r3
 801278c:	e001      	b.n	8012792 <put_fat+0xbc>
 801278e:	687b      	ldr	r3, [r7, #4]
 8012790:	b2db      	uxtb	r3, r3
 8012792:	697a      	ldr	r2, [r7, #20]
 8012794:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012796:	68fb      	ldr	r3, [r7, #12]
 8012798:	2201      	movs	r2, #1
 801279a:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 801279c:	68fb      	ldr	r3, [r7, #12]
 801279e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80127a0:	68fb      	ldr	r3, [r7, #12]
 80127a2:	899b      	ldrh	r3, [r3, #12]
 80127a4:	4619      	mov	r1, r3
 80127a6:	69bb      	ldr	r3, [r7, #24]
 80127a8:	fbb3 f3f1 	udiv	r3, r3, r1
 80127ac:	4413      	add	r3, r2
 80127ae:	4619      	mov	r1, r3
 80127b0:	68f8      	ldr	r0, [r7, #12]
 80127b2:	f7ff fdff 	bl	80123b4 <move_window>
 80127b6:	4603      	mov	r3, r0
 80127b8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80127ba:	7ffb      	ldrb	r3, [r7, #31]
 80127bc:	2b00      	cmp	r3, #0
 80127be:	f040 809c 	bne.w	80128fa <put_fat+0x224>
			p = fs->win + bc % SS(fs);
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	899b      	ldrh	r3, [r3, #12]
 80127cc:	461a      	mov	r2, r3
 80127ce:	69bb      	ldr	r3, [r7, #24]
 80127d0:	fbb3 f0f2 	udiv	r0, r3, r2
 80127d4:	fb00 f202 	mul.w	r2, r0, r2
 80127d8:	1a9b      	subs	r3, r3, r2
 80127da:	440b      	add	r3, r1
 80127dc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	f003 0301 	and.w	r3, r3, #1
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d003      	beq.n	80127f0 <put_fat+0x11a>
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	091b      	lsrs	r3, r3, #4
 80127ec:	b2db      	uxtb	r3, r3
 80127ee:	e00e      	b.n	801280e <put_fat+0x138>
 80127f0:	697b      	ldr	r3, [r7, #20]
 80127f2:	781b      	ldrb	r3, [r3, #0]
 80127f4:	b25b      	sxtb	r3, r3
 80127f6:	f023 030f 	bic.w	r3, r3, #15
 80127fa:	b25a      	sxtb	r2, r3
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	0a1b      	lsrs	r3, r3, #8
 8012800:	b25b      	sxtb	r3, r3
 8012802:	f003 030f 	and.w	r3, r3, #15
 8012806:	b25b      	sxtb	r3, r3
 8012808:	4313      	orrs	r3, r2
 801280a:	b25b      	sxtb	r3, r3
 801280c:	b2db      	uxtb	r3, r3
 801280e:	697a      	ldr	r2, [r7, #20]
 8012810:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8012812:	68fb      	ldr	r3, [r7, #12]
 8012814:	2201      	movs	r2, #1
 8012816:	70da      	strb	r2, [r3, #3]
			break;
 8012818:	e074      	b.n	8012904 <put_fat+0x22e>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 801281a:	68fb      	ldr	r3, [r7, #12]
 801281c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	899b      	ldrh	r3, [r3, #12]
 8012822:	085b      	lsrs	r3, r3, #1
 8012824:	b29b      	uxth	r3, r3
 8012826:	4619      	mov	r1, r3
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	fbb3 f3f1 	udiv	r3, r3, r1
 801282e:	4413      	add	r3, r2
 8012830:	4619      	mov	r1, r3
 8012832:	68f8      	ldr	r0, [r7, #12]
 8012834:	f7ff fdbe 	bl	80123b4 <move_window>
 8012838:	4603      	mov	r3, r0
 801283a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 801283c:	7ffb      	ldrb	r3, [r7, #31]
 801283e:	2b00      	cmp	r3, #0
 8012840:	d15d      	bne.n	80128fe <put_fat+0x228>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8012842:	68fb      	ldr	r3, [r7, #12]
 8012844:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012848:	68bb      	ldr	r3, [r7, #8]
 801284a:	005b      	lsls	r3, r3, #1
 801284c:	68fa      	ldr	r2, [r7, #12]
 801284e:	8992      	ldrh	r2, [r2, #12]
 8012850:	fbb3 f0f2 	udiv	r0, r3, r2
 8012854:	fb00 f202 	mul.w	r2, r0, r2
 8012858:	1a9b      	subs	r3, r3, r2
 801285a:	440b      	add	r3, r1
 801285c:	687a      	ldr	r2, [r7, #4]
 801285e:	b292      	uxth	r2, r2
 8012860:	4611      	mov	r1, r2
 8012862:	4618      	mov	r0, r3
 8012864:	f7ff fb31 	bl	8011eca <st_word>
			fs->wflag = 1;
 8012868:	68fb      	ldr	r3, [r7, #12]
 801286a:	2201      	movs	r2, #1
 801286c:	70da      	strb	r2, [r3, #3]
			break;
 801286e:	e049      	b.n	8012904 <put_fat+0x22e>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8012870:	68fb      	ldr	r3, [r7, #12]
 8012872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8012874:	68fb      	ldr	r3, [r7, #12]
 8012876:	899b      	ldrh	r3, [r3, #12]
 8012878:	089b      	lsrs	r3, r3, #2
 801287a:	b29b      	uxth	r3, r3
 801287c:	4619      	mov	r1, r3
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	fbb3 f3f1 	udiv	r3, r3, r1
 8012884:	4413      	add	r3, r2
 8012886:	4619      	mov	r1, r3
 8012888:	68f8      	ldr	r0, [r7, #12]
 801288a:	f7ff fd93 	bl	80123b4 <move_window>
 801288e:	4603      	mov	r3, r0
 8012890:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8012892:	7ffb      	ldrb	r3, [r7, #31]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d134      	bne.n	8012902 <put_fat+0x22c>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80128a4:	68bb      	ldr	r3, [r7, #8]
 80128a6:	009b      	lsls	r3, r3, #2
 80128a8:	68fa      	ldr	r2, [r7, #12]
 80128aa:	8992      	ldrh	r2, [r2, #12]
 80128ac:	fbb3 f0f2 	udiv	r0, r3, r2
 80128b0:	fb00 f202 	mul.w	r2, r0, r2
 80128b4:	1a9b      	subs	r3, r3, r2
 80128b6:	440b      	add	r3, r1
 80128b8:	4618      	mov	r0, r3
 80128ba:	f7ff fae3 	bl	8011e84 <ld_dword>
 80128be:	4603      	mov	r3, r0
 80128c0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80128c4:	4323      	orrs	r3, r4
 80128c6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80128c8:	68fb      	ldr	r3, [r7, #12]
 80128ca:	f103 0138 	add.w	r1, r3, #56	; 0x38
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	009b      	lsls	r3, r3, #2
 80128d2:	68fa      	ldr	r2, [r7, #12]
 80128d4:	8992      	ldrh	r2, [r2, #12]
 80128d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80128da:	fb00 f202 	mul.w	r2, r0, r2
 80128de:	1a9b      	subs	r3, r3, r2
 80128e0:	440b      	add	r3, r1
 80128e2:	6879      	ldr	r1, [r7, #4]
 80128e4:	4618      	mov	r0, r3
 80128e6:	f7ff fb0b 	bl	8011f00 <st_dword>
			fs->wflag = 1;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	2201      	movs	r2, #1
 80128ee:	70da      	strb	r2, [r3, #3]
			break;
 80128f0:	e008      	b.n	8012904 <put_fat+0x22e>
		}
	}
 80128f2:	bf00      	nop
 80128f4:	e006      	b.n	8012904 <put_fat+0x22e>
			if (res != FR_OK) break;
 80128f6:	bf00      	nop
 80128f8:	e004      	b.n	8012904 <put_fat+0x22e>
			if (res != FR_OK) break;
 80128fa:	bf00      	nop
 80128fc:	e002      	b.n	8012904 <put_fat+0x22e>
			if (res != FR_OK) break;
 80128fe:	bf00      	nop
 8012900:	e000      	b.n	8012904 <put_fat+0x22e>
			if (res != FR_OK) break;
 8012902:	bf00      	nop
	return res;
 8012904:	7ffb      	ldrb	r3, [r7, #31]
}
 8012906:	4618      	mov	r0, r3
 8012908:	3724      	adds	r7, #36	; 0x24
 801290a:	46bd      	mov	sp, r7
 801290c:	bd90      	pop	{r4, r7, pc}

0801290e <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 801290e:	b580      	push	{r7, lr}
 8012910:	b088      	sub	sp, #32
 8012912:	af00      	add	r7, sp, #0
 8012914:	60f8      	str	r0, [r7, #12]
 8012916:	60b9      	str	r1, [r7, #8]
 8012918:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 801291a:	2300      	movs	r3, #0
 801291c:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	681b      	ldr	r3, [r3, #0]
 8012922:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	2b01      	cmp	r3, #1
 8012928:	d904      	bls.n	8012934 <remove_chain+0x26>
 801292a:	69bb      	ldr	r3, [r7, #24]
 801292c:	69db      	ldr	r3, [r3, #28]
 801292e:	68ba      	ldr	r2, [r7, #8]
 8012930:	429a      	cmp	r2, r3
 8012932:	d301      	bcc.n	8012938 <remove_chain+0x2a>
 8012934:	2302      	movs	r3, #2
 8012936:	e04b      	b.n	80129d0 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d00c      	beq.n	8012958 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 801293e:	f04f 32ff 	mov.w	r2, #4294967295
 8012942:	6879      	ldr	r1, [r7, #4]
 8012944:	69b8      	ldr	r0, [r7, #24]
 8012946:	f7ff fec6 	bl	80126d6 <put_fat>
 801294a:	4603      	mov	r3, r0
 801294c:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 801294e:	7ffb      	ldrb	r3, [r7, #31]
 8012950:	2b00      	cmp	r3, #0
 8012952:	d001      	beq.n	8012958 <remove_chain+0x4a>
 8012954:	7ffb      	ldrb	r3, [r7, #31]
 8012956:	e03b      	b.n	80129d0 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8012958:	68b9      	ldr	r1, [r7, #8]
 801295a:	68f8      	ldr	r0, [r7, #12]
 801295c:	f7ff fde7 	bl	801252e <get_fat>
 8012960:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8012962:	697b      	ldr	r3, [r7, #20]
 8012964:	2b00      	cmp	r3, #0
 8012966:	d031      	beq.n	80129cc <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8012968:	697b      	ldr	r3, [r7, #20]
 801296a:	2b01      	cmp	r3, #1
 801296c:	d101      	bne.n	8012972 <remove_chain+0x64>
 801296e:	2302      	movs	r3, #2
 8012970:	e02e      	b.n	80129d0 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8012972:	697b      	ldr	r3, [r7, #20]
 8012974:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012978:	d101      	bne.n	801297e <remove_chain+0x70>
 801297a:	2301      	movs	r3, #1
 801297c:	e028      	b.n	80129d0 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 801297e:	2200      	movs	r2, #0
 8012980:	68b9      	ldr	r1, [r7, #8]
 8012982:	69b8      	ldr	r0, [r7, #24]
 8012984:	f7ff fea7 	bl	80126d6 <put_fat>
 8012988:	4603      	mov	r3, r0
 801298a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 801298c:	7ffb      	ldrb	r3, [r7, #31]
 801298e:	2b00      	cmp	r3, #0
 8012990:	d001      	beq.n	8012996 <remove_chain+0x88>
 8012992:	7ffb      	ldrb	r3, [r7, #31]
 8012994:	e01c      	b.n	80129d0 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8012996:	69bb      	ldr	r3, [r7, #24]
 8012998:	699a      	ldr	r2, [r3, #24]
 801299a:	69bb      	ldr	r3, [r7, #24]
 801299c:	69db      	ldr	r3, [r3, #28]
 801299e:	3b02      	subs	r3, #2
 80129a0:	429a      	cmp	r2, r3
 80129a2:	d20b      	bcs.n	80129bc <remove_chain+0xae>
			fs->free_clst++;
 80129a4:	69bb      	ldr	r3, [r7, #24]
 80129a6:	699b      	ldr	r3, [r3, #24]
 80129a8:	1c5a      	adds	r2, r3, #1
 80129aa:	69bb      	ldr	r3, [r7, #24]
 80129ac:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80129ae:	69bb      	ldr	r3, [r7, #24]
 80129b0:	791b      	ldrb	r3, [r3, #4]
 80129b2:	f043 0301 	orr.w	r3, r3, #1
 80129b6:	b2da      	uxtb	r2, r3
 80129b8:	69bb      	ldr	r3, [r7, #24]
 80129ba:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80129bc:	697b      	ldr	r3, [r7, #20]
 80129be:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80129c0:	69bb      	ldr	r3, [r7, #24]
 80129c2:	69db      	ldr	r3, [r3, #28]
 80129c4:	68ba      	ldr	r2, [r7, #8]
 80129c6:	429a      	cmp	r2, r3
 80129c8:	d3c6      	bcc.n	8012958 <remove_chain+0x4a>
 80129ca:	e000      	b.n	80129ce <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80129cc:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80129ce:	2300      	movs	r3, #0
}
 80129d0:	4618      	mov	r0, r3
 80129d2:	3720      	adds	r7, #32
 80129d4:	46bd      	mov	sp, r7
 80129d6:	bd80      	pop	{r7, pc}

080129d8 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80129d8:	b580      	push	{r7, lr}
 80129da:	b088      	sub	sp, #32
 80129dc:	af00      	add	r7, sp, #0
 80129de:	6078      	str	r0, [r7, #4]
 80129e0:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	681b      	ldr	r3, [r3, #0]
 80129e6:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80129e8:	683b      	ldr	r3, [r7, #0]
 80129ea:	2b00      	cmp	r3, #0
 80129ec:	d10d      	bne.n	8012a0a <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80129ee:	693b      	ldr	r3, [r7, #16]
 80129f0:	695b      	ldr	r3, [r3, #20]
 80129f2:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80129f4:	69bb      	ldr	r3, [r7, #24]
 80129f6:	2b00      	cmp	r3, #0
 80129f8:	d004      	beq.n	8012a04 <create_chain+0x2c>
 80129fa:	693b      	ldr	r3, [r7, #16]
 80129fc:	69db      	ldr	r3, [r3, #28]
 80129fe:	69ba      	ldr	r2, [r7, #24]
 8012a00:	429a      	cmp	r2, r3
 8012a02:	d31b      	bcc.n	8012a3c <create_chain+0x64>
 8012a04:	2301      	movs	r3, #1
 8012a06:	61bb      	str	r3, [r7, #24]
 8012a08:	e018      	b.n	8012a3c <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8012a0a:	6839      	ldr	r1, [r7, #0]
 8012a0c:	6878      	ldr	r0, [r7, #4]
 8012a0e:	f7ff fd8e 	bl	801252e <get_fat>
 8012a12:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8012a14:	68fb      	ldr	r3, [r7, #12]
 8012a16:	2b01      	cmp	r3, #1
 8012a18:	d801      	bhi.n	8012a1e <create_chain+0x46>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e070      	b.n	8012b00 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8012a1e:	68fb      	ldr	r3, [r7, #12]
 8012a20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a24:	d101      	bne.n	8012a2a <create_chain+0x52>
 8012a26:	68fb      	ldr	r3, [r7, #12]
 8012a28:	e06a      	b.n	8012b00 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	69db      	ldr	r3, [r3, #28]
 8012a2e:	68fa      	ldr	r2, [r7, #12]
 8012a30:	429a      	cmp	r2, r3
 8012a32:	d201      	bcs.n	8012a38 <create_chain+0x60>
 8012a34:	68fb      	ldr	r3, [r7, #12]
 8012a36:	e063      	b.n	8012b00 <create_chain+0x128>
		scl = clst;
 8012a38:	683b      	ldr	r3, [r7, #0]
 8012a3a:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8012a3c:	69bb      	ldr	r3, [r7, #24]
 8012a3e:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8012a40:	69fb      	ldr	r3, [r7, #28]
 8012a42:	3301      	adds	r3, #1
 8012a44:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8012a46:	693b      	ldr	r3, [r7, #16]
 8012a48:	69db      	ldr	r3, [r3, #28]
 8012a4a:	69fa      	ldr	r2, [r7, #28]
 8012a4c:	429a      	cmp	r2, r3
 8012a4e:	d307      	bcc.n	8012a60 <create_chain+0x88>
				ncl = 2;
 8012a50:	2302      	movs	r3, #2
 8012a52:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8012a54:	69fa      	ldr	r2, [r7, #28]
 8012a56:	69bb      	ldr	r3, [r7, #24]
 8012a58:	429a      	cmp	r2, r3
 8012a5a:	d901      	bls.n	8012a60 <create_chain+0x88>
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	e04f      	b.n	8012b00 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8012a60:	69f9      	ldr	r1, [r7, #28]
 8012a62:	6878      	ldr	r0, [r7, #4]
 8012a64:	f7ff fd63 	bl	801252e <get_fat>
 8012a68:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8012a6a:	68fb      	ldr	r3, [r7, #12]
 8012a6c:	2b00      	cmp	r3, #0
 8012a6e:	d00e      	beq.n	8012a8e <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	2b01      	cmp	r3, #1
 8012a74:	d003      	beq.n	8012a7e <create_chain+0xa6>
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012a7c:	d101      	bne.n	8012a82 <create_chain+0xaa>
 8012a7e:	68fb      	ldr	r3, [r7, #12]
 8012a80:	e03e      	b.n	8012b00 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8012a82:	69fa      	ldr	r2, [r7, #28]
 8012a84:	69bb      	ldr	r3, [r7, #24]
 8012a86:	429a      	cmp	r2, r3
 8012a88:	d1da      	bne.n	8012a40 <create_chain+0x68>
 8012a8a:	2300      	movs	r3, #0
 8012a8c:	e038      	b.n	8012b00 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8012a8e:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8012a90:	f04f 32ff 	mov.w	r2, #4294967295
 8012a94:	69f9      	ldr	r1, [r7, #28]
 8012a96:	6938      	ldr	r0, [r7, #16]
 8012a98:	f7ff fe1d 	bl	80126d6 <put_fat>
 8012a9c:	4603      	mov	r3, r0
 8012a9e:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8012aa0:	7dfb      	ldrb	r3, [r7, #23]
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d109      	bne.n	8012aba <create_chain+0xe2>
 8012aa6:	683b      	ldr	r3, [r7, #0]
 8012aa8:	2b00      	cmp	r3, #0
 8012aaa:	d006      	beq.n	8012aba <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8012aac:	69fa      	ldr	r2, [r7, #28]
 8012aae:	6839      	ldr	r1, [r7, #0]
 8012ab0:	6938      	ldr	r0, [r7, #16]
 8012ab2:	f7ff fe10 	bl	80126d6 <put_fat>
 8012ab6:	4603      	mov	r3, r0
 8012ab8:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8012aba:	7dfb      	ldrb	r3, [r7, #23]
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	d116      	bne.n	8012aee <create_chain+0x116>
		fs->last_clst = ncl;
 8012ac0:	693b      	ldr	r3, [r7, #16]
 8012ac2:	69fa      	ldr	r2, [r7, #28]
 8012ac4:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	699a      	ldr	r2, [r3, #24]
 8012aca:	693b      	ldr	r3, [r7, #16]
 8012acc:	69db      	ldr	r3, [r3, #28]
 8012ace:	3b02      	subs	r3, #2
 8012ad0:	429a      	cmp	r2, r3
 8012ad2:	d804      	bhi.n	8012ade <create_chain+0x106>
 8012ad4:	693b      	ldr	r3, [r7, #16]
 8012ad6:	699b      	ldr	r3, [r3, #24]
 8012ad8:	1e5a      	subs	r2, r3, #1
 8012ada:	693b      	ldr	r3, [r7, #16]
 8012adc:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8012ade:	693b      	ldr	r3, [r7, #16]
 8012ae0:	791b      	ldrb	r3, [r3, #4]
 8012ae2:	f043 0301 	orr.w	r3, r3, #1
 8012ae6:	b2da      	uxtb	r2, r3
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	711a      	strb	r2, [r3, #4]
 8012aec:	e007      	b.n	8012afe <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8012aee:	7dfb      	ldrb	r3, [r7, #23]
 8012af0:	2b01      	cmp	r3, #1
 8012af2:	d102      	bne.n	8012afa <create_chain+0x122>
 8012af4:	f04f 33ff 	mov.w	r3, #4294967295
 8012af8:	e000      	b.n	8012afc <create_chain+0x124>
 8012afa:	2301      	movs	r3, #1
 8012afc:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8012afe:	69fb      	ldr	r3, [r7, #28]
}
 8012b00:	4618      	mov	r0, r3
 8012b02:	3720      	adds	r7, #32
 8012b04:	46bd      	mov	sp, r7
 8012b06:	bd80      	pop	{r7, pc}

08012b08 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8012b08:	b480      	push	{r7}
 8012b0a:	b087      	sub	sp, #28
 8012b0c:	af00      	add	r7, sp, #0
 8012b0e:	6078      	str	r0, [r7, #4]
 8012b10:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012b1c:	3304      	adds	r3, #4
 8012b1e:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8012b20:	68fb      	ldr	r3, [r7, #12]
 8012b22:	899b      	ldrh	r3, [r3, #12]
 8012b24:	461a      	mov	r2, r3
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b2c:	68fa      	ldr	r2, [r7, #12]
 8012b2e:	8952      	ldrh	r2, [r2, #10]
 8012b30:	fbb3 f3f2 	udiv	r3, r3, r2
 8012b34:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012b36:	693b      	ldr	r3, [r7, #16]
 8012b38:	1d1a      	adds	r2, r3, #4
 8012b3a:	613a      	str	r2, [r7, #16]
 8012b3c:	681b      	ldr	r3, [r3, #0]
 8012b3e:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8012b40:	68bb      	ldr	r3, [r7, #8]
 8012b42:	2b00      	cmp	r3, #0
 8012b44:	d101      	bne.n	8012b4a <clmt_clust+0x42>
 8012b46:	2300      	movs	r3, #0
 8012b48:	e010      	b.n	8012b6c <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8012b4a:	697a      	ldr	r2, [r7, #20]
 8012b4c:	68bb      	ldr	r3, [r7, #8]
 8012b4e:	429a      	cmp	r2, r3
 8012b50:	d307      	bcc.n	8012b62 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8012b52:	697a      	ldr	r2, [r7, #20]
 8012b54:	68bb      	ldr	r3, [r7, #8]
 8012b56:	1ad3      	subs	r3, r2, r3
 8012b58:	617b      	str	r3, [r7, #20]
 8012b5a:	693b      	ldr	r3, [r7, #16]
 8012b5c:	3304      	adds	r3, #4
 8012b5e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8012b60:	e7e9      	b.n	8012b36 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8012b62:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8012b64:	693b      	ldr	r3, [r7, #16]
 8012b66:	681a      	ldr	r2, [r3, #0]
 8012b68:	697b      	ldr	r3, [r7, #20]
 8012b6a:	4413      	add	r3, r2
}
 8012b6c:	4618      	mov	r0, r3
 8012b6e:	371c      	adds	r7, #28
 8012b70:	46bd      	mov	sp, r7
 8012b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b76:	4770      	bx	lr

08012b78 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8012b78:	b580      	push	{r7, lr}
 8012b7a:	b086      	sub	sp, #24
 8012b7c:	af00      	add	r7, sp, #0
 8012b7e:	6078      	str	r0, [r7, #4]
 8012b80:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8012b88:	683b      	ldr	r3, [r7, #0]
 8012b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012b8e:	d204      	bcs.n	8012b9a <dir_sdi+0x22>
 8012b90:	683b      	ldr	r3, [r7, #0]
 8012b92:	f003 031f 	and.w	r3, r3, #31
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d001      	beq.n	8012b9e <dir_sdi+0x26>
		return FR_INT_ERR;
 8012b9a:	2302      	movs	r3, #2
 8012b9c:	e071      	b.n	8012c82 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8012b9e:	687b      	ldr	r3, [r7, #4]
 8012ba0:	683a      	ldr	r2, [r7, #0]
 8012ba2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8012ba4:	687b      	ldr	r3, [r7, #4]
 8012ba6:	689b      	ldr	r3, [r3, #8]
 8012ba8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8012baa:	697b      	ldr	r3, [r7, #20]
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d106      	bne.n	8012bbe <dir_sdi+0x46>
 8012bb0:	693b      	ldr	r3, [r7, #16]
 8012bb2:	781b      	ldrb	r3, [r3, #0]
 8012bb4:	2b02      	cmp	r3, #2
 8012bb6:	d902      	bls.n	8012bbe <dir_sdi+0x46>
		clst = fs->dirbase;
 8012bb8:	693b      	ldr	r3, [r7, #16]
 8012bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012bbc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d10c      	bne.n	8012bde <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	095b      	lsrs	r3, r3, #5
 8012bc8:	693a      	ldr	r2, [r7, #16]
 8012bca:	8912      	ldrh	r2, [r2, #8]
 8012bcc:	4293      	cmp	r3, r2
 8012bce:	d301      	bcc.n	8012bd4 <dir_sdi+0x5c>
 8012bd0:	2302      	movs	r3, #2
 8012bd2:	e056      	b.n	8012c82 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8012bd4:	693b      	ldr	r3, [r7, #16]
 8012bd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012bd8:	687b      	ldr	r3, [r7, #4]
 8012bda:	61da      	str	r2, [r3, #28]
 8012bdc:	e02d      	b.n	8012c3a <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	895b      	ldrh	r3, [r3, #10]
 8012be2:	461a      	mov	r2, r3
 8012be4:	693b      	ldr	r3, [r7, #16]
 8012be6:	899b      	ldrh	r3, [r3, #12]
 8012be8:	fb02 f303 	mul.w	r3, r2, r3
 8012bec:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012bee:	e019      	b.n	8012c24 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	6979      	ldr	r1, [r7, #20]
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7ff fc9a 	bl	801252e <get_fat>
 8012bfa:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c02:	d101      	bne.n	8012c08 <dir_sdi+0x90>
 8012c04:	2301      	movs	r3, #1
 8012c06:	e03c      	b.n	8012c82 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	d904      	bls.n	8012c18 <dir_sdi+0xa0>
 8012c0e:	693b      	ldr	r3, [r7, #16]
 8012c10:	69db      	ldr	r3, [r3, #28]
 8012c12:	697a      	ldr	r2, [r7, #20]
 8012c14:	429a      	cmp	r2, r3
 8012c16:	d301      	bcc.n	8012c1c <dir_sdi+0xa4>
 8012c18:	2302      	movs	r3, #2
 8012c1a:	e032      	b.n	8012c82 <dir_sdi+0x10a>
			ofs -= csz;
 8012c1c:	683a      	ldr	r2, [r7, #0]
 8012c1e:	68fb      	ldr	r3, [r7, #12]
 8012c20:	1ad3      	subs	r3, r2, r3
 8012c22:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8012c24:	683a      	ldr	r2, [r7, #0]
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	429a      	cmp	r2, r3
 8012c2a:	d2e1      	bcs.n	8012bf0 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8012c2c:	6979      	ldr	r1, [r7, #20]
 8012c2e:	6938      	ldr	r0, [r7, #16]
 8012c30:	f7ff fc5e 	bl	80124f0 <clust2sect>
 8012c34:	4602      	mov	r2, r0
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	697a      	ldr	r2, [r7, #20]
 8012c3e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	69db      	ldr	r3, [r3, #28]
 8012c44:	2b00      	cmp	r3, #0
 8012c46:	d101      	bne.n	8012c4c <dir_sdi+0xd4>
 8012c48:	2302      	movs	r3, #2
 8012c4a:	e01a      	b.n	8012c82 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	69da      	ldr	r2, [r3, #28]
 8012c50:	693b      	ldr	r3, [r7, #16]
 8012c52:	899b      	ldrh	r3, [r3, #12]
 8012c54:	4619      	mov	r1, r3
 8012c56:	683b      	ldr	r3, [r7, #0]
 8012c58:	fbb3 f3f1 	udiv	r3, r3, r1
 8012c5c:	441a      	add	r2, r3
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8012c62:	693b      	ldr	r3, [r7, #16]
 8012c64:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012c68:	693b      	ldr	r3, [r7, #16]
 8012c6a:	899b      	ldrh	r3, [r3, #12]
 8012c6c:	461a      	mov	r2, r3
 8012c6e:	683b      	ldr	r3, [r7, #0]
 8012c70:	fbb3 f0f2 	udiv	r0, r3, r2
 8012c74:	fb00 f202 	mul.w	r2, r0, r2
 8012c78:	1a9b      	subs	r3, r3, r2
 8012c7a:	18ca      	adds	r2, r1, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012c80:	2300      	movs	r3, #0
}
 8012c82:	4618      	mov	r0, r3
 8012c84:	3718      	adds	r7, #24
 8012c86:	46bd      	mov	sp, r7
 8012c88:	bd80      	pop	{r7, pc}

08012c8a <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8012c8a:	b580      	push	{r7, lr}
 8012c8c:	b086      	sub	sp, #24
 8012c8e:	af00      	add	r7, sp, #0
 8012c90:	6078      	str	r0, [r7, #4]
 8012c92:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	681b      	ldr	r3, [r3, #0]
 8012c98:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	695b      	ldr	r3, [r3, #20]
 8012c9e:	3320      	adds	r3, #32
 8012ca0:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	69db      	ldr	r3, [r3, #28]
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	d003      	beq.n	8012cb2 <dir_next+0x28>
 8012caa:	68bb      	ldr	r3, [r7, #8]
 8012cac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8012cb0:	d301      	bcc.n	8012cb6 <dir_next+0x2c>
 8012cb2:	2304      	movs	r3, #4
 8012cb4:	e0bb      	b.n	8012e2e <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8012cb6:	68fb      	ldr	r3, [r7, #12]
 8012cb8:	899b      	ldrh	r3, [r3, #12]
 8012cba:	461a      	mov	r2, r3
 8012cbc:	68bb      	ldr	r3, [r7, #8]
 8012cbe:	fbb3 f1f2 	udiv	r1, r3, r2
 8012cc2:	fb01 f202 	mul.w	r2, r1, r2
 8012cc6:	1a9b      	subs	r3, r3, r2
 8012cc8:	2b00      	cmp	r3, #0
 8012cca:	f040 809d 	bne.w	8012e08 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8012cce:	687b      	ldr	r3, [r7, #4]
 8012cd0:	69db      	ldr	r3, [r3, #28]
 8012cd2:	1c5a      	adds	r2, r3, #1
 8012cd4:	687b      	ldr	r3, [r7, #4]
 8012cd6:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8012cd8:	687b      	ldr	r3, [r7, #4]
 8012cda:	699b      	ldr	r3, [r3, #24]
 8012cdc:	2b00      	cmp	r3, #0
 8012cde:	d10b      	bne.n	8012cf8 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8012ce0:	68bb      	ldr	r3, [r7, #8]
 8012ce2:	095b      	lsrs	r3, r3, #5
 8012ce4:	68fa      	ldr	r2, [r7, #12]
 8012ce6:	8912      	ldrh	r2, [r2, #8]
 8012ce8:	4293      	cmp	r3, r2
 8012cea:	f0c0 808d 	bcc.w	8012e08 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2200      	movs	r2, #0
 8012cf2:	61da      	str	r2, [r3, #28]
 8012cf4:	2304      	movs	r3, #4
 8012cf6:	e09a      	b.n	8012e2e <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8012cf8:	68fb      	ldr	r3, [r7, #12]
 8012cfa:	899b      	ldrh	r3, [r3, #12]
 8012cfc:	461a      	mov	r2, r3
 8012cfe:	68bb      	ldr	r3, [r7, #8]
 8012d00:	fbb3 f3f2 	udiv	r3, r3, r2
 8012d04:	68fa      	ldr	r2, [r7, #12]
 8012d06:	8952      	ldrh	r2, [r2, #10]
 8012d08:	3a01      	subs	r2, #1
 8012d0a:	4013      	ands	r3, r2
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d17b      	bne.n	8012e08 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8012d10:	687a      	ldr	r2, [r7, #4]
 8012d12:	687b      	ldr	r3, [r7, #4]
 8012d14:	699b      	ldr	r3, [r3, #24]
 8012d16:	4619      	mov	r1, r3
 8012d18:	4610      	mov	r0, r2
 8012d1a:	f7ff fc08 	bl	801252e <get_fat>
 8012d1e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8012d20:	697b      	ldr	r3, [r7, #20]
 8012d22:	2b01      	cmp	r3, #1
 8012d24:	d801      	bhi.n	8012d2a <dir_next+0xa0>
 8012d26:	2302      	movs	r3, #2
 8012d28:	e081      	b.n	8012e2e <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8012d2a:	697b      	ldr	r3, [r7, #20]
 8012d2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d30:	d101      	bne.n	8012d36 <dir_next+0xac>
 8012d32:	2301      	movs	r3, #1
 8012d34:	e07b      	b.n	8012e2e <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8012d36:	68fb      	ldr	r3, [r7, #12]
 8012d38:	69db      	ldr	r3, [r3, #28]
 8012d3a:	697a      	ldr	r2, [r7, #20]
 8012d3c:	429a      	cmp	r2, r3
 8012d3e:	d359      	bcc.n	8012df4 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8012d40:	683b      	ldr	r3, [r7, #0]
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d104      	bne.n	8012d50 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	2200      	movs	r2, #0
 8012d4a:	61da      	str	r2, [r3, #28]
 8012d4c:	2304      	movs	r3, #4
 8012d4e:	e06e      	b.n	8012e2e <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8012d50:	687a      	ldr	r2, [r7, #4]
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	699b      	ldr	r3, [r3, #24]
 8012d56:	4619      	mov	r1, r3
 8012d58:	4610      	mov	r0, r2
 8012d5a:	f7ff fe3d 	bl	80129d8 <create_chain>
 8012d5e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d101      	bne.n	8012d6a <dir_next+0xe0>
 8012d66:	2307      	movs	r3, #7
 8012d68:	e061      	b.n	8012e2e <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	2b01      	cmp	r3, #1
 8012d6e:	d101      	bne.n	8012d74 <dir_next+0xea>
 8012d70:	2302      	movs	r3, #2
 8012d72:	e05c      	b.n	8012e2e <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8012d74:	697b      	ldr	r3, [r7, #20]
 8012d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012d7a:	d101      	bne.n	8012d80 <dir_next+0xf6>
 8012d7c:	2301      	movs	r3, #1
 8012d7e:	e056      	b.n	8012e2e <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8012d80:	68f8      	ldr	r0, [r7, #12]
 8012d82:	f7ff fad3 	bl	801232c <sync_window>
 8012d86:	4603      	mov	r3, r0
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d001      	beq.n	8012d90 <dir_next+0x106>
 8012d8c:	2301      	movs	r3, #1
 8012d8e:	e04e      	b.n	8012e2e <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8012d90:	68fb      	ldr	r3, [r7, #12]
 8012d92:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8012d96:	68fb      	ldr	r3, [r7, #12]
 8012d98:	899b      	ldrh	r3, [r3, #12]
 8012d9a:	461a      	mov	r2, r3
 8012d9c:	2100      	movs	r1, #0
 8012d9e:	f7ff f8fc 	bl	8011f9a <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012da2:	2300      	movs	r3, #0
 8012da4:	613b      	str	r3, [r7, #16]
 8012da6:	6979      	ldr	r1, [r7, #20]
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f7ff fba1 	bl	80124f0 <clust2sect>
 8012dae:	4602      	mov	r2, r0
 8012db0:	68fb      	ldr	r3, [r7, #12]
 8012db2:	635a      	str	r2, [r3, #52]	; 0x34
 8012db4:	e012      	b.n	8012ddc <dir_next+0x152>
						fs->wflag = 1;
 8012db6:	68fb      	ldr	r3, [r7, #12]
 8012db8:	2201      	movs	r2, #1
 8012dba:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8012dbc:	68f8      	ldr	r0, [r7, #12]
 8012dbe:	f7ff fab5 	bl	801232c <sync_window>
 8012dc2:	4603      	mov	r3, r0
 8012dc4:	2b00      	cmp	r3, #0
 8012dc6:	d001      	beq.n	8012dcc <dir_next+0x142>
 8012dc8:	2301      	movs	r3, #1
 8012dca:	e030      	b.n	8012e2e <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8012dcc:	693b      	ldr	r3, [r7, #16]
 8012dce:	3301      	adds	r3, #1
 8012dd0:	613b      	str	r3, [r7, #16]
 8012dd2:	68fb      	ldr	r3, [r7, #12]
 8012dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012dd6:	1c5a      	adds	r2, r3, #1
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	635a      	str	r2, [r3, #52]	; 0x34
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	895b      	ldrh	r3, [r3, #10]
 8012de0:	461a      	mov	r2, r3
 8012de2:	693b      	ldr	r3, [r7, #16]
 8012de4:	4293      	cmp	r3, r2
 8012de6:	d3e6      	bcc.n	8012db6 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8012de8:	68fb      	ldr	r3, [r7, #12]
 8012dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8012dec:	693b      	ldr	r3, [r7, #16]
 8012dee:	1ad2      	subs	r2, r2, r3
 8012df0:	68fb      	ldr	r3, [r7, #12]
 8012df2:	635a      	str	r2, [r3, #52]	; 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	697a      	ldr	r2, [r7, #20]
 8012df8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8012dfa:	6979      	ldr	r1, [r7, #20]
 8012dfc:	68f8      	ldr	r0, [r7, #12]
 8012dfe:	f7ff fb77 	bl	80124f0 <clust2sect>
 8012e02:	4602      	mov	r2, r0
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8012e08:	687b      	ldr	r3, [r7, #4]
 8012e0a:	68ba      	ldr	r2, [r7, #8]
 8012e0c:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8012e0e:	68fb      	ldr	r3, [r7, #12]
 8012e10:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8012e14:	68fb      	ldr	r3, [r7, #12]
 8012e16:	899b      	ldrh	r3, [r3, #12]
 8012e18:	461a      	mov	r2, r3
 8012e1a:	68bb      	ldr	r3, [r7, #8]
 8012e1c:	fbb3 f0f2 	udiv	r0, r3, r2
 8012e20:	fb00 f202 	mul.w	r2, r0, r2
 8012e24:	1a9b      	subs	r3, r3, r2
 8012e26:	18ca      	adds	r2, r1, r3
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8012e2c:	2300      	movs	r3, #0
}
 8012e2e:	4618      	mov	r0, r3
 8012e30:	3718      	adds	r7, #24
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}

08012e36 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8012e36:	b580      	push	{r7, lr}
 8012e38:	b086      	sub	sp, #24
 8012e3a:	af00      	add	r7, sp, #0
 8012e3c:	6078      	str	r0, [r7, #4]
 8012e3e:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8012e40:	687b      	ldr	r3, [r7, #4]
 8012e42:	681b      	ldr	r3, [r3, #0]
 8012e44:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8012e46:	2100      	movs	r1, #0
 8012e48:	6878      	ldr	r0, [r7, #4]
 8012e4a:	f7ff fe95 	bl	8012b78 <dir_sdi>
 8012e4e:	4603      	mov	r3, r0
 8012e50:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8012e52:	7dfb      	ldrb	r3, [r7, #23]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d12b      	bne.n	8012eb0 <dir_alloc+0x7a>
		n = 0;
 8012e58:	2300      	movs	r3, #0
 8012e5a:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	69db      	ldr	r3, [r3, #28]
 8012e60:	4619      	mov	r1, r3
 8012e62:	68f8      	ldr	r0, [r7, #12]
 8012e64:	f7ff faa6 	bl	80123b4 <move_window>
 8012e68:	4603      	mov	r3, r0
 8012e6a:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8012e6c:	7dfb      	ldrb	r3, [r7, #23]
 8012e6e:	2b00      	cmp	r3, #0
 8012e70:	d11d      	bne.n	8012eae <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	6a1b      	ldr	r3, [r3, #32]
 8012e76:	781b      	ldrb	r3, [r3, #0]
 8012e78:	2be5      	cmp	r3, #229	; 0xe5
 8012e7a:	d004      	beq.n	8012e86 <dir_alloc+0x50>
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	6a1b      	ldr	r3, [r3, #32]
 8012e80:	781b      	ldrb	r3, [r3, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d107      	bne.n	8012e96 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8012e86:	693b      	ldr	r3, [r7, #16]
 8012e88:	3301      	adds	r3, #1
 8012e8a:	613b      	str	r3, [r7, #16]
 8012e8c:	693a      	ldr	r2, [r7, #16]
 8012e8e:	683b      	ldr	r3, [r7, #0]
 8012e90:	429a      	cmp	r2, r3
 8012e92:	d102      	bne.n	8012e9a <dir_alloc+0x64>
 8012e94:	e00c      	b.n	8012eb0 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8012e96:	2300      	movs	r3, #0
 8012e98:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8012e9a:	2101      	movs	r1, #1
 8012e9c:	6878      	ldr	r0, [r7, #4]
 8012e9e:	f7ff fef4 	bl	8012c8a <dir_next>
 8012ea2:	4603      	mov	r3, r0
 8012ea4:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8012ea6:	7dfb      	ldrb	r3, [r7, #23]
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d0d7      	beq.n	8012e5c <dir_alloc+0x26>
 8012eac:	e000      	b.n	8012eb0 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8012eae:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8012eb0:	7dfb      	ldrb	r3, [r7, #23]
 8012eb2:	2b04      	cmp	r3, #4
 8012eb4:	d101      	bne.n	8012eba <dir_alloc+0x84>
 8012eb6:	2307      	movs	r3, #7
 8012eb8:	75fb      	strb	r3, [r7, #23]
	return res;
 8012eba:	7dfb      	ldrb	r3, [r7, #23]
}
 8012ebc:	4618      	mov	r0, r3
 8012ebe:	3718      	adds	r7, #24
 8012ec0:	46bd      	mov	sp, r7
 8012ec2:	bd80      	pop	{r7, pc}

08012ec4 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8012ec4:	b580      	push	{r7, lr}
 8012ec6:	b084      	sub	sp, #16
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
 8012ecc:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8012ece:	683b      	ldr	r3, [r7, #0]
 8012ed0:	331a      	adds	r3, #26
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	f7fe ffbe 	bl	8011e54 <ld_word>
 8012ed8:	4603      	mov	r3, r0
 8012eda:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	781b      	ldrb	r3, [r3, #0]
 8012ee0:	2b03      	cmp	r3, #3
 8012ee2:	d109      	bne.n	8012ef8 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	3314      	adds	r3, #20
 8012ee8:	4618      	mov	r0, r3
 8012eea:	f7fe ffb3 	bl	8011e54 <ld_word>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	041b      	lsls	r3, r3, #16
 8012ef2:	68fa      	ldr	r2, [r7, #12]
 8012ef4:	4313      	orrs	r3, r2
 8012ef6:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8012ef8:	68fb      	ldr	r3, [r7, #12]
}
 8012efa:	4618      	mov	r0, r3
 8012efc:	3710      	adds	r7, #16
 8012efe:	46bd      	mov	sp, r7
 8012f00:	bd80      	pop	{r7, pc}

08012f02 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8012f02:	b580      	push	{r7, lr}
 8012f04:	b084      	sub	sp, #16
 8012f06:	af00      	add	r7, sp, #0
 8012f08:	60f8      	str	r0, [r7, #12]
 8012f0a:	60b9      	str	r1, [r7, #8]
 8012f0c:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	331a      	adds	r3, #26
 8012f12:	687a      	ldr	r2, [r7, #4]
 8012f14:	b292      	uxth	r2, r2
 8012f16:	4611      	mov	r1, r2
 8012f18:	4618      	mov	r0, r3
 8012f1a:	f7fe ffd6 	bl	8011eca <st_word>
	if (fs->fs_type == FS_FAT32) {
 8012f1e:	68fb      	ldr	r3, [r7, #12]
 8012f20:	781b      	ldrb	r3, [r3, #0]
 8012f22:	2b03      	cmp	r3, #3
 8012f24:	d109      	bne.n	8012f3a <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	f103 0214 	add.w	r2, r3, #20
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	0c1b      	lsrs	r3, r3, #16
 8012f30:	b29b      	uxth	r3, r3
 8012f32:	4619      	mov	r1, r3
 8012f34:	4610      	mov	r0, r2
 8012f36:	f7fe ffc8 	bl	8011eca <st_word>
	}
}
 8012f3a:	bf00      	nop
 8012f3c:	3710      	adds	r7, #16
 8012f3e:	46bd      	mov	sp, r7
 8012f40:	bd80      	pop	{r7, pc}
	...

08012f44 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8012f44:	b590      	push	{r4, r7, lr}
 8012f46:	b087      	sub	sp, #28
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	6078      	str	r0, [r7, #4]
 8012f4c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8012f4e:	683b      	ldr	r3, [r7, #0]
 8012f50:	331a      	adds	r3, #26
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fe ff7e 	bl	8011e54 <ld_word>
 8012f58:	4603      	mov	r3, r0
 8012f5a:	2b00      	cmp	r3, #0
 8012f5c:	d001      	beq.n	8012f62 <cmp_lfn+0x1e>
 8012f5e:	2300      	movs	r3, #0
 8012f60:	e059      	b.n	8013016 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8012f62:	683b      	ldr	r3, [r7, #0]
 8012f64:	781b      	ldrb	r3, [r3, #0]
 8012f66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f6a:	1e5a      	subs	r2, r3, #1
 8012f6c:	4613      	mov	r3, r2
 8012f6e:	005b      	lsls	r3, r3, #1
 8012f70:	4413      	add	r3, r2
 8012f72:	009b      	lsls	r3, r3, #2
 8012f74:	4413      	add	r3, r2
 8012f76:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012f78:	2301      	movs	r3, #1
 8012f7a:	81fb      	strh	r3, [r7, #14]
 8012f7c:	2300      	movs	r3, #0
 8012f7e:	613b      	str	r3, [r7, #16]
 8012f80:	e033      	b.n	8012fea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8012f82:	4a27      	ldr	r2, [pc, #156]	; (8013020 <cmp_lfn+0xdc>)
 8012f84:	693b      	ldr	r3, [r7, #16]
 8012f86:	4413      	add	r3, r2
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	461a      	mov	r2, r3
 8012f8c:	683b      	ldr	r3, [r7, #0]
 8012f8e:	4413      	add	r3, r2
 8012f90:	4618      	mov	r0, r3
 8012f92:	f7fe ff5f 	bl	8011e54 <ld_word>
 8012f96:	4603      	mov	r3, r0
 8012f98:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8012f9a:	89fb      	ldrh	r3, [r7, #14]
 8012f9c:	2b00      	cmp	r3, #0
 8012f9e:	d01a      	beq.n	8012fd6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	2bfe      	cmp	r3, #254	; 0xfe
 8012fa4:	d812      	bhi.n	8012fcc <cmp_lfn+0x88>
 8012fa6:	89bb      	ldrh	r3, [r7, #12]
 8012fa8:	4618      	mov	r0, r3
 8012faa:	f001 fe95 	bl	8014cd8 <ff_wtoupper>
 8012fae:	4603      	mov	r3, r0
 8012fb0:	461c      	mov	r4, r3
 8012fb2:	697b      	ldr	r3, [r7, #20]
 8012fb4:	1c5a      	adds	r2, r3, #1
 8012fb6:	617a      	str	r2, [r7, #20]
 8012fb8:	005b      	lsls	r3, r3, #1
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	4413      	add	r3, r2
 8012fbe:	881b      	ldrh	r3, [r3, #0]
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	f001 fe89 	bl	8014cd8 <ff_wtoupper>
 8012fc6:	4603      	mov	r3, r0
 8012fc8:	429c      	cmp	r4, r3
 8012fca:	d001      	beq.n	8012fd0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8012fcc:	2300      	movs	r3, #0
 8012fce:	e022      	b.n	8013016 <cmp_lfn+0xd2>
			}
			wc = uc;
 8012fd0:	89bb      	ldrh	r3, [r7, #12]
 8012fd2:	81fb      	strh	r3, [r7, #14]
 8012fd4:	e006      	b.n	8012fe4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8012fd6:	89bb      	ldrh	r3, [r7, #12]
 8012fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fdc:	4293      	cmp	r3, r2
 8012fde:	d001      	beq.n	8012fe4 <cmp_lfn+0xa0>
 8012fe0:	2300      	movs	r3, #0
 8012fe2:	e018      	b.n	8013016 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8012fe4:	693b      	ldr	r3, [r7, #16]
 8012fe6:	3301      	adds	r3, #1
 8012fe8:	613b      	str	r3, [r7, #16]
 8012fea:	693b      	ldr	r3, [r7, #16]
 8012fec:	2b0c      	cmp	r3, #12
 8012fee:	d9c8      	bls.n	8012f82 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8012ff0:	683b      	ldr	r3, [r7, #0]
 8012ff2:	781b      	ldrb	r3, [r3, #0]
 8012ff4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012ff8:	2b00      	cmp	r3, #0
 8012ffa:	d00b      	beq.n	8013014 <cmp_lfn+0xd0>
 8012ffc:	89fb      	ldrh	r3, [r7, #14]
 8012ffe:	2b00      	cmp	r3, #0
 8013000:	d008      	beq.n	8013014 <cmp_lfn+0xd0>
 8013002:	697b      	ldr	r3, [r7, #20]
 8013004:	005b      	lsls	r3, r3, #1
 8013006:	687a      	ldr	r2, [r7, #4]
 8013008:	4413      	add	r3, r2
 801300a:	881b      	ldrh	r3, [r3, #0]
 801300c:	2b00      	cmp	r3, #0
 801300e:	d001      	beq.n	8013014 <cmp_lfn+0xd0>
 8013010:	2300      	movs	r3, #0
 8013012:	e000      	b.n	8013016 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8013014:	2301      	movs	r3, #1
}
 8013016:	4618      	mov	r0, r3
 8013018:	371c      	adds	r7, #28
 801301a:	46bd      	mov	sp, r7
 801301c:	bd90      	pop	{r4, r7, pc}
 801301e:	bf00      	nop
 8013020:	08019638 	.word	0x08019638

08013024 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8013024:	b580      	push	{r7, lr}
 8013026:	b088      	sub	sp, #32
 8013028:	af00      	add	r7, sp, #0
 801302a:	60f8      	str	r0, [r7, #12]
 801302c:	60b9      	str	r1, [r7, #8]
 801302e:	4611      	mov	r1, r2
 8013030:	461a      	mov	r2, r3
 8013032:	460b      	mov	r3, r1
 8013034:	71fb      	strb	r3, [r7, #7]
 8013036:	4613      	mov	r3, r2
 8013038:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 801303a:	68bb      	ldr	r3, [r7, #8]
 801303c:	330d      	adds	r3, #13
 801303e:	79ba      	ldrb	r2, [r7, #6]
 8013040:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8013042:	68bb      	ldr	r3, [r7, #8]
 8013044:	330b      	adds	r3, #11
 8013046:	220f      	movs	r2, #15
 8013048:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 801304a:	68bb      	ldr	r3, [r7, #8]
 801304c:	330c      	adds	r3, #12
 801304e:	2200      	movs	r2, #0
 8013050:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8013052:	68bb      	ldr	r3, [r7, #8]
 8013054:	331a      	adds	r3, #26
 8013056:	2100      	movs	r1, #0
 8013058:	4618      	mov	r0, r3
 801305a:	f7fe ff36 	bl	8011eca <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 801305e:	79fb      	ldrb	r3, [r7, #7]
 8013060:	1e5a      	subs	r2, r3, #1
 8013062:	4613      	mov	r3, r2
 8013064:	005b      	lsls	r3, r3, #1
 8013066:	4413      	add	r3, r2
 8013068:	009b      	lsls	r3, r3, #2
 801306a:	4413      	add	r3, r2
 801306c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 801306e:	2300      	movs	r3, #0
 8013070:	82fb      	strh	r3, [r7, #22]
 8013072:	2300      	movs	r3, #0
 8013074:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8013076:	8afb      	ldrh	r3, [r7, #22]
 8013078:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801307c:	4293      	cmp	r3, r2
 801307e:	d007      	beq.n	8013090 <put_lfn+0x6c>
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	1c5a      	adds	r2, r3, #1
 8013084:	61fa      	str	r2, [r7, #28]
 8013086:	005b      	lsls	r3, r3, #1
 8013088:	68fa      	ldr	r2, [r7, #12]
 801308a:	4413      	add	r3, r2
 801308c:	881b      	ldrh	r3, [r3, #0]
 801308e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8013090:	4a17      	ldr	r2, [pc, #92]	; (80130f0 <put_lfn+0xcc>)
 8013092:	69bb      	ldr	r3, [r7, #24]
 8013094:	4413      	add	r3, r2
 8013096:	781b      	ldrb	r3, [r3, #0]
 8013098:	461a      	mov	r2, r3
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	4413      	add	r3, r2
 801309e:	8afa      	ldrh	r2, [r7, #22]
 80130a0:	4611      	mov	r1, r2
 80130a2:	4618      	mov	r0, r3
 80130a4:	f7fe ff11 	bl	8011eca <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80130a8:	8afb      	ldrh	r3, [r7, #22]
 80130aa:	2b00      	cmp	r3, #0
 80130ac:	d102      	bne.n	80130b4 <put_lfn+0x90>
 80130ae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80130b2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80130b4:	69bb      	ldr	r3, [r7, #24]
 80130b6:	3301      	adds	r3, #1
 80130b8:	61bb      	str	r3, [r7, #24]
 80130ba:	69bb      	ldr	r3, [r7, #24]
 80130bc:	2b0c      	cmp	r3, #12
 80130be:	d9da      	bls.n	8013076 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80130c0:	8afb      	ldrh	r3, [r7, #22]
 80130c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80130c6:	4293      	cmp	r3, r2
 80130c8:	d006      	beq.n	80130d8 <put_lfn+0xb4>
 80130ca:	69fb      	ldr	r3, [r7, #28]
 80130cc:	005b      	lsls	r3, r3, #1
 80130ce:	68fa      	ldr	r2, [r7, #12]
 80130d0:	4413      	add	r3, r2
 80130d2:	881b      	ldrh	r3, [r3, #0]
 80130d4:	2b00      	cmp	r3, #0
 80130d6:	d103      	bne.n	80130e0 <put_lfn+0xbc>
 80130d8:	79fb      	ldrb	r3, [r7, #7]
 80130da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80130de:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80130e0:	68bb      	ldr	r3, [r7, #8]
 80130e2:	79fa      	ldrb	r2, [r7, #7]
 80130e4:	701a      	strb	r2, [r3, #0]
}
 80130e6:	bf00      	nop
 80130e8:	3720      	adds	r7, #32
 80130ea:	46bd      	mov	sp, r7
 80130ec:	bd80      	pop	{r7, pc}
 80130ee:	bf00      	nop
 80130f0:	08019638 	.word	0x08019638

080130f4 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 80130f4:	b580      	push	{r7, lr}
 80130f6:	b08c      	sub	sp, #48	; 0x30
 80130f8:	af00      	add	r7, sp, #0
 80130fa:	60f8      	str	r0, [r7, #12]
 80130fc:	60b9      	str	r1, [r7, #8]
 80130fe:	607a      	str	r2, [r7, #4]
 8013100:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8013102:	220b      	movs	r2, #11
 8013104:	68b9      	ldr	r1, [r7, #8]
 8013106:	68f8      	ldr	r0, [r7, #12]
 8013108:	f7fe ff26 	bl	8011f58 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 801310c:	683b      	ldr	r3, [r7, #0]
 801310e:	2b05      	cmp	r3, #5
 8013110:	d929      	bls.n	8013166 <gen_numname+0x72>
		sr = seq;
 8013112:	683b      	ldr	r3, [r7, #0]
 8013114:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8013116:	e020      	b.n	801315a <gen_numname+0x66>
			wc = *lfn++;
 8013118:	687b      	ldr	r3, [r7, #4]
 801311a:	1c9a      	adds	r2, r3, #2
 801311c:	607a      	str	r2, [r7, #4]
 801311e:	881b      	ldrh	r3, [r3, #0]
 8013120:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8013122:	2300      	movs	r3, #0
 8013124:	62bb      	str	r3, [r7, #40]	; 0x28
 8013126:	e015      	b.n	8013154 <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8013128:	69fb      	ldr	r3, [r7, #28]
 801312a:	005a      	lsls	r2, r3, #1
 801312c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801312e:	f003 0301 	and.w	r3, r3, #1
 8013132:	4413      	add	r3, r2
 8013134:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8013136:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013138:	085b      	lsrs	r3, r3, #1
 801313a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 801313c:	69fb      	ldr	r3, [r7, #28]
 801313e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8013142:	2b00      	cmp	r3, #0
 8013144:	d003      	beq.n	801314e <gen_numname+0x5a>
 8013146:	69fa      	ldr	r2, [r7, #28]
 8013148:	4b30      	ldr	r3, [pc, #192]	; (801320c <gen_numname+0x118>)
 801314a:	4053      	eors	r3, r2
 801314c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 801314e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013150:	3301      	adds	r3, #1
 8013152:	62bb      	str	r3, [r7, #40]	; 0x28
 8013154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013156:	2b0f      	cmp	r3, #15
 8013158:	d9e6      	bls.n	8013128 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	881b      	ldrh	r3, [r3, #0]
 801315e:	2b00      	cmp	r3, #0
 8013160:	d1da      	bne.n	8013118 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8013162:	69fb      	ldr	r3, [r7, #28]
 8013164:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8013166:	2307      	movs	r3, #7
 8013168:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 801316a:	683b      	ldr	r3, [r7, #0]
 801316c:	b2db      	uxtb	r3, r3
 801316e:	f003 030f 	and.w	r3, r3, #15
 8013172:	b2db      	uxtb	r3, r3
 8013174:	3330      	adds	r3, #48	; 0x30
 8013176:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 801317a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801317e:	2b39      	cmp	r3, #57	; 0x39
 8013180:	d904      	bls.n	801318c <gen_numname+0x98>
 8013182:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013186:	3307      	adds	r3, #7
 8013188:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 801318c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801318e:	1e5a      	subs	r2, r3, #1
 8013190:	62ba      	str	r2, [r7, #40]	; 0x28
 8013192:	3330      	adds	r3, #48	; 0x30
 8013194:	443b      	add	r3, r7
 8013196:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 801319a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 801319e:	683b      	ldr	r3, [r7, #0]
 80131a0:	091b      	lsrs	r3, r3, #4
 80131a2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80131a4:	683b      	ldr	r3, [r7, #0]
 80131a6:	2b00      	cmp	r3, #0
 80131a8:	d1df      	bne.n	801316a <gen_numname+0x76>
	ns[i] = '~';
 80131aa:	f107 0214 	add.w	r2, r7, #20
 80131ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131b0:	4413      	add	r3, r2
 80131b2:	227e      	movs	r2, #126	; 0x7e
 80131b4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80131b6:	2300      	movs	r3, #0
 80131b8:	627b      	str	r3, [r7, #36]	; 0x24
 80131ba:	e002      	b.n	80131c2 <gen_numname+0xce>
 80131bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131be:	3301      	adds	r3, #1
 80131c0:	627b      	str	r3, [r7, #36]	; 0x24
 80131c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80131c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d205      	bcs.n	80131d6 <gen_numname+0xe2>
 80131ca:	68fa      	ldr	r2, [r7, #12]
 80131cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ce:	4413      	add	r3, r2
 80131d0:	781b      	ldrb	r3, [r3, #0]
 80131d2:	2b20      	cmp	r3, #32
 80131d4:	d1f2      	bne.n	80131bc <gen_numname+0xc8>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80131d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131d8:	2b07      	cmp	r3, #7
 80131da:	d807      	bhi.n	80131ec <gen_numname+0xf8>
 80131dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80131de:	1c5a      	adds	r2, r3, #1
 80131e0:	62ba      	str	r2, [r7, #40]	; 0x28
 80131e2:	3330      	adds	r3, #48	; 0x30
 80131e4:	443b      	add	r3, r7
 80131e6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80131ea:	e000      	b.n	80131ee <gen_numname+0xfa>
 80131ec:	2120      	movs	r1, #32
 80131ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131f0:	1c5a      	adds	r2, r3, #1
 80131f2:	627a      	str	r2, [r7, #36]	; 0x24
 80131f4:	68fa      	ldr	r2, [r7, #12]
 80131f6:	4413      	add	r3, r2
 80131f8:	460a      	mov	r2, r1
 80131fa:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 80131fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131fe:	2b07      	cmp	r3, #7
 8013200:	d9e9      	bls.n	80131d6 <gen_numname+0xe2>
}
 8013202:	bf00      	nop
 8013204:	bf00      	nop
 8013206:	3730      	adds	r7, #48	; 0x30
 8013208:	46bd      	mov	sp, r7
 801320a:	bd80      	pop	{r7, pc}
 801320c:	00011021 	.word	0x00011021

08013210 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8013210:	b480      	push	{r7}
 8013212:	b085      	sub	sp, #20
 8013214:	af00      	add	r7, sp, #0
 8013216:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8013218:	2300      	movs	r3, #0
 801321a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 801321c:	230b      	movs	r3, #11
 801321e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8013220:	7bfb      	ldrb	r3, [r7, #15]
 8013222:	b2da      	uxtb	r2, r3
 8013224:	0852      	lsrs	r2, r2, #1
 8013226:	01db      	lsls	r3, r3, #7
 8013228:	4313      	orrs	r3, r2
 801322a:	b2da      	uxtb	r2, r3
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	1c59      	adds	r1, r3, #1
 8013230:	6079      	str	r1, [r7, #4]
 8013232:	781b      	ldrb	r3, [r3, #0]
 8013234:	4413      	add	r3, r2
 8013236:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	3b01      	subs	r3, #1
 801323c:	60bb      	str	r3, [r7, #8]
 801323e:	68bb      	ldr	r3, [r7, #8]
 8013240:	2b00      	cmp	r3, #0
 8013242:	d1ed      	bne.n	8013220 <sum_sfn+0x10>
	return sum;
 8013244:	7bfb      	ldrb	r3, [r7, #15]
}
 8013246:	4618      	mov	r0, r3
 8013248:	3714      	adds	r7, #20
 801324a:	46bd      	mov	sp, r7
 801324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013250:	4770      	bx	lr

08013252 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8013252:	b580      	push	{r7, lr}
 8013254:	b086      	sub	sp, #24
 8013256:	af00      	add	r7, sp, #0
 8013258:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8013260:	2100      	movs	r1, #0
 8013262:	6878      	ldr	r0, [r7, #4]
 8013264:	f7ff fc88 	bl	8012b78 <dir_sdi>
 8013268:	4603      	mov	r3, r0
 801326a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 801326c:	7dfb      	ldrb	r3, [r7, #23]
 801326e:	2b00      	cmp	r3, #0
 8013270:	d001      	beq.n	8013276 <dir_find+0x24>
 8013272:	7dfb      	ldrb	r3, [r7, #23]
 8013274:	e0a9      	b.n	80133ca <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8013276:	23ff      	movs	r3, #255	; 0xff
 8013278:	753b      	strb	r3, [r7, #20]
 801327a:	7d3b      	ldrb	r3, [r7, #20]
 801327c:	757b      	strb	r3, [r7, #21]
 801327e:	687b      	ldr	r3, [r7, #4]
 8013280:	f04f 32ff 	mov.w	r2, #4294967295
 8013284:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8013286:	687b      	ldr	r3, [r7, #4]
 8013288:	69db      	ldr	r3, [r3, #28]
 801328a:	4619      	mov	r1, r3
 801328c:	6938      	ldr	r0, [r7, #16]
 801328e:	f7ff f891 	bl	80123b4 <move_window>
 8013292:	4603      	mov	r3, r0
 8013294:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8013296:	7dfb      	ldrb	r3, [r7, #23]
 8013298:	2b00      	cmp	r3, #0
 801329a:	f040 8090 	bne.w	80133be <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	6a1b      	ldr	r3, [r3, #32]
 80132a2:	781b      	ldrb	r3, [r3, #0]
 80132a4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80132a6:	7dbb      	ldrb	r3, [r7, #22]
 80132a8:	2b00      	cmp	r3, #0
 80132aa:	d102      	bne.n	80132b2 <dir_find+0x60>
 80132ac:	2304      	movs	r3, #4
 80132ae:	75fb      	strb	r3, [r7, #23]
 80132b0:	e08a      	b.n	80133c8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	6a1b      	ldr	r3, [r3, #32]
 80132b6:	330b      	adds	r3, #11
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80132be:	73fb      	strb	r3, [r7, #15]
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	7bfa      	ldrb	r2, [r7, #15]
 80132c4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80132c6:	7dbb      	ldrb	r3, [r7, #22]
 80132c8:	2be5      	cmp	r3, #229	; 0xe5
 80132ca:	d007      	beq.n	80132dc <dir_find+0x8a>
 80132cc:	7bfb      	ldrb	r3, [r7, #15]
 80132ce:	f003 0308 	and.w	r3, r3, #8
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d009      	beq.n	80132ea <dir_find+0x98>
 80132d6:	7bfb      	ldrb	r3, [r7, #15]
 80132d8:	2b0f      	cmp	r3, #15
 80132da:	d006      	beq.n	80132ea <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80132dc:	23ff      	movs	r3, #255	; 0xff
 80132de:	757b      	strb	r3, [r7, #21]
 80132e0:	687b      	ldr	r3, [r7, #4]
 80132e2:	f04f 32ff 	mov.w	r2, #4294967295
 80132e6:	631a      	str	r2, [r3, #48]	; 0x30
 80132e8:	e05e      	b.n	80133a8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80132ea:	7bfb      	ldrb	r3, [r7, #15]
 80132ec:	2b0f      	cmp	r3, #15
 80132ee:	d136      	bne.n	801335e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80132f0:	687b      	ldr	r3, [r7, #4]
 80132f2:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80132f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d154      	bne.n	80133a8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 80132fe:	7dbb      	ldrb	r3, [r7, #22]
 8013300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8013304:	2b00      	cmp	r3, #0
 8013306:	d00d      	beq.n	8013324 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	6a1b      	ldr	r3, [r3, #32]
 801330c:	7b5b      	ldrb	r3, [r3, #13]
 801330e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8013310:	7dbb      	ldrb	r3, [r7, #22]
 8013312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013316:	75bb      	strb	r3, [r7, #22]
 8013318:	7dbb      	ldrb	r3, [r7, #22]
 801331a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 801331c:	687b      	ldr	r3, [r7, #4]
 801331e:	695a      	ldr	r2, [r3, #20]
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8013324:	7dba      	ldrb	r2, [r7, #22]
 8013326:	7d7b      	ldrb	r3, [r7, #21]
 8013328:	429a      	cmp	r2, r3
 801332a:	d115      	bne.n	8013358 <dir_find+0x106>
 801332c:	687b      	ldr	r3, [r7, #4]
 801332e:	6a1b      	ldr	r3, [r3, #32]
 8013330:	330d      	adds	r3, #13
 8013332:	781b      	ldrb	r3, [r3, #0]
 8013334:	7d3a      	ldrb	r2, [r7, #20]
 8013336:	429a      	cmp	r2, r3
 8013338:	d10e      	bne.n	8013358 <dir_find+0x106>
 801333a:	693b      	ldr	r3, [r7, #16]
 801333c:	691a      	ldr	r2, [r3, #16]
 801333e:	687b      	ldr	r3, [r7, #4]
 8013340:	6a1b      	ldr	r3, [r3, #32]
 8013342:	4619      	mov	r1, r3
 8013344:	4610      	mov	r0, r2
 8013346:	f7ff fdfd 	bl	8012f44 <cmp_lfn>
 801334a:	4603      	mov	r3, r0
 801334c:	2b00      	cmp	r3, #0
 801334e:	d003      	beq.n	8013358 <dir_find+0x106>
 8013350:	7d7b      	ldrb	r3, [r7, #21]
 8013352:	3b01      	subs	r3, #1
 8013354:	b2db      	uxtb	r3, r3
 8013356:	e000      	b.n	801335a <dir_find+0x108>
 8013358:	23ff      	movs	r3, #255	; 0xff
 801335a:	757b      	strb	r3, [r7, #21]
 801335c:	e024      	b.n	80133a8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 801335e:	7d7b      	ldrb	r3, [r7, #21]
 8013360:	2b00      	cmp	r3, #0
 8013362:	d109      	bne.n	8013378 <dir_find+0x126>
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	6a1b      	ldr	r3, [r3, #32]
 8013368:	4618      	mov	r0, r3
 801336a:	f7ff ff51 	bl	8013210 <sum_sfn>
 801336e:	4603      	mov	r3, r0
 8013370:	461a      	mov	r2, r3
 8013372:	7d3b      	ldrb	r3, [r7, #20]
 8013374:	4293      	cmp	r3, r2
 8013376:	d024      	beq.n	80133c2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 801337e:	f003 0301 	and.w	r3, r3, #1
 8013382:	2b00      	cmp	r3, #0
 8013384:	d10a      	bne.n	801339c <dir_find+0x14a>
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	6a18      	ldr	r0, [r3, #32]
 801338a:	687b      	ldr	r3, [r7, #4]
 801338c:	3324      	adds	r3, #36	; 0x24
 801338e:	220b      	movs	r2, #11
 8013390:	4619      	mov	r1, r3
 8013392:	f7fe fe1d 	bl	8011fd0 <mem_cmp>
 8013396:	4603      	mov	r3, r0
 8013398:	2b00      	cmp	r3, #0
 801339a:	d014      	beq.n	80133c6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 801339c:	23ff      	movs	r3, #255	; 0xff
 801339e:	757b      	strb	r3, [r7, #21]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	f04f 32ff 	mov.w	r2, #4294967295
 80133a6:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80133a8:	2100      	movs	r1, #0
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7ff fc6d 	bl	8012c8a <dir_next>
 80133b0:	4603      	mov	r3, r0
 80133b2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80133b4:	7dfb      	ldrb	r3, [r7, #23]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	f43f af65 	beq.w	8013286 <dir_find+0x34>
 80133bc:	e004      	b.n	80133c8 <dir_find+0x176>
		if (res != FR_OK) break;
 80133be:	bf00      	nop
 80133c0:	e002      	b.n	80133c8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80133c2:	bf00      	nop
 80133c4:	e000      	b.n	80133c8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80133c6:	bf00      	nop

	return res;
 80133c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80133ca:	4618      	mov	r0, r3
 80133cc:	3718      	adds	r7, #24
 80133ce:	46bd      	mov	sp, r7
 80133d0:	bd80      	pop	{r7, pc}
	...

080133d4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b08c      	sub	sp, #48	; 0x30
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80133e8:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80133ec:	2b00      	cmp	r3, #0
 80133ee:	d001      	beq.n	80133f4 <dir_register+0x20>
 80133f0:	2306      	movs	r3, #6
 80133f2:	e0e0      	b.n	80135b6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 80133f4:	2300      	movs	r3, #0
 80133f6:	627b      	str	r3, [r7, #36]	; 0x24
 80133f8:	e002      	b.n	8013400 <dir_register+0x2c>
 80133fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133fc:	3301      	adds	r3, #1
 80133fe:	627b      	str	r3, [r7, #36]	; 0x24
 8013400:	69fb      	ldr	r3, [r7, #28]
 8013402:	691a      	ldr	r2, [r3, #16]
 8013404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013406:	005b      	lsls	r3, r3, #1
 8013408:	4413      	add	r3, r2
 801340a:	881b      	ldrh	r3, [r3, #0]
 801340c:	2b00      	cmp	r3, #0
 801340e:	d1f4      	bne.n	80133fa <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8013416:	f107 030c 	add.w	r3, r7, #12
 801341a:	220c      	movs	r2, #12
 801341c:	4618      	mov	r0, r3
 801341e:	f7fe fd9b 	bl	8011f58 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8013422:	7dfb      	ldrb	r3, [r7, #23]
 8013424:	f003 0301 	and.w	r3, r3, #1
 8013428:	2b00      	cmp	r3, #0
 801342a:	d032      	beq.n	8013492 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 801342c:	687b      	ldr	r3, [r7, #4]
 801342e:	2240      	movs	r2, #64	; 0x40
 8013430:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8013434:	2301      	movs	r3, #1
 8013436:	62bb      	str	r3, [r7, #40]	; 0x28
 8013438:	e016      	b.n	8013468 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8013440:	69fb      	ldr	r3, [r7, #28]
 8013442:	691a      	ldr	r2, [r3, #16]
 8013444:	f107 010c 	add.w	r1, r7, #12
 8013448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344a:	f7ff fe53 	bl	80130f4 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 801344e:	6878      	ldr	r0, [r7, #4]
 8013450:	f7ff feff 	bl	8013252 <dir_find>
 8013454:	4603      	mov	r3, r0
 8013456:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 801345a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801345e:	2b00      	cmp	r3, #0
 8013460:	d106      	bne.n	8013470 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8013462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013464:	3301      	adds	r3, #1
 8013466:	62bb      	str	r3, [r7, #40]	; 0x28
 8013468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801346a:	2b63      	cmp	r3, #99	; 0x63
 801346c:	d9e5      	bls.n	801343a <dir_register+0x66>
 801346e:	e000      	b.n	8013472 <dir_register+0x9e>
			if (res != FR_OK) break;
 8013470:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8013472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013474:	2b64      	cmp	r3, #100	; 0x64
 8013476:	d101      	bne.n	801347c <dir_register+0xa8>
 8013478:	2307      	movs	r3, #7
 801347a:	e09c      	b.n	80135b6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 801347c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013480:	2b04      	cmp	r3, #4
 8013482:	d002      	beq.n	801348a <dir_register+0xb6>
 8013484:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013488:	e095      	b.n	80135b6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 801348a:	7dfa      	ldrb	r2, [r7, #23]
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8013492:	7dfb      	ldrb	r3, [r7, #23]
 8013494:	f003 0302 	and.w	r3, r3, #2
 8013498:	2b00      	cmp	r3, #0
 801349a:	d007      	beq.n	80134ac <dir_register+0xd8>
 801349c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801349e:	330c      	adds	r3, #12
 80134a0:	4a47      	ldr	r2, [pc, #284]	; (80135c0 <dir_register+0x1ec>)
 80134a2:	fba2 2303 	umull	r2, r3, r2, r3
 80134a6:	089b      	lsrs	r3, r3, #2
 80134a8:	3301      	adds	r3, #1
 80134aa:	e000      	b.n	80134ae <dir_register+0xda>
 80134ac:	2301      	movs	r3, #1
 80134ae:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80134b0:	6a39      	ldr	r1, [r7, #32]
 80134b2:	6878      	ldr	r0, [r7, #4]
 80134b4:	f7ff fcbf 	bl	8012e36 <dir_alloc>
 80134b8:	4603      	mov	r3, r0
 80134ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80134be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134c2:	2b00      	cmp	r3, #0
 80134c4:	d148      	bne.n	8013558 <dir_register+0x184>
 80134c6:	6a3b      	ldr	r3, [r7, #32]
 80134c8:	3b01      	subs	r3, #1
 80134ca:	623b      	str	r3, [r7, #32]
 80134cc:	6a3b      	ldr	r3, [r7, #32]
 80134ce:	2b00      	cmp	r3, #0
 80134d0:	d042      	beq.n	8013558 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	695a      	ldr	r2, [r3, #20]
 80134d6:	6a3b      	ldr	r3, [r7, #32]
 80134d8:	015b      	lsls	r3, r3, #5
 80134da:	1ad3      	subs	r3, r2, r3
 80134dc:	4619      	mov	r1, r3
 80134de:	6878      	ldr	r0, [r7, #4]
 80134e0:	f7ff fb4a 	bl	8012b78 <dir_sdi>
 80134e4:	4603      	mov	r3, r0
 80134e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80134ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	d132      	bne.n	8013558 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80134f2:	687b      	ldr	r3, [r7, #4]
 80134f4:	3324      	adds	r3, #36	; 0x24
 80134f6:	4618      	mov	r0, r3
 80134f8:	f7ff fe8a 	bl	8013210 <sum_sfn>
 80134fc:	4603      	mov	r3, r0
 80134fe:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8013500:	687b      	ldr	r3, [r7, #4]
 8013502:	69db      	ldr	r3, [r3, #28]
 8013504:	4619      	mov	r1, r3
 8013506:	69f8      	ldr	r0, [r7, #28]
 8013508:	f7fe ff54 	bl	80123b4 <move_window>
 801350c:	4603      	mov	r3, r0
 801350e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8013512:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013516:	2b00      	cmp	r3, #0
 8013518:	d11d      	bne.n	8013556 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 801351a:	69fb      	ldr	r3, [r7, #28]
 801351c:	6918      	ldr	r0, [r3, #16]
 801351e:	687b      	ldr	r3, [r7, #4]
 8013520:	6a19      	ldr	r1, [r3, #32]
 8013522:	6a3b      	ldr	r3, [r7, #32]
 8013524:	b2da      	uxtb	r2, r3
 8013526:	7efb      	ldrb	r3, [r7, #27]
 8013528:	f7ff fd7c 	bl	8013024 <put_lfn>
				fs->wflag = 1;
 801352c:	69fb      	ldr	r3, [r7, #28]
 801352e:	2201      	movs	r2, #1
 8013530:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8013532:	2100      	movs	r1, #0
 8013534:	6878      	ldr	r0, [r7, #4]
 8013536:	f7ff fba8 	bl	8012c8a <dir_next>
 801353a:	4603      	mov	r3, r0
 801353c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8013540:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013544:	2b00      	cmp	r3, #0
 8013546:	d107      	bne.n	8013558 <dir_register+0x184>
 8013548:	6a3b      	ldr	r3, [r7, #32]
 801354a:	3b01      	subs	r3, #1
 801354c:	623b      	str	r3, [r7, #32]
 801354e:	6a3b      	ldr	r3, [r7, #32]
 8013550:	2b00      	cmp	r3, #0
 8013552:	d1d5      	bne.n	8013500 <dir_register+0x12c>
 8013554:	e000      	b.n	8013558 <dir_register+0x184>
				if (res != FR_OK) break;
 8013556:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8013558:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 801355c:	2b00      	cmp	r3, #0
 801355e:	d128      	bne.n	80135b2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8013560:	687b      	ldr	r3, [r7, #4]
 8013562:	69db      	ldr	r3, [r3, #28]
 8013564:	4619      	mov	r1, r3
 8013566:	69f8      	ldr	r0, [r7, #28]
 8013568:	f7fe ff24 	bl	80123b4 <move_window>
 801356c:	4603      	mov	r3, r0
 801356e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8013572:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8013576:	2b00      	cmp	r3, #0
 8013578:	d11b      	bne.n	80135b2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	6a1b      	ldr	r3, [r3, #32]
 801357e:	2220      	movs	r2, #32
 8013580:	2100      	movs	r1, #0
 8013582:	4618      	mov	r0, r3
 8013584:	f7fe fd09 	bl	8011f9a <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6a18      	ldr	r0, [r3, #32]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	3324      	adds	r3, #36	; 0x24
 8013590:	220b      	movs	r2, #11
 8013592:	4619      	mov	r1, r3
 8013594:	f7fe fce0 	bl	8011f58 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	6a1b      	ldr	r3, [r3, #32]
 80135a2:	330c      	adds	r3, #12
 80135a4:	f002 0218 	and.w	r2, r2, #24
 80135a8:	b2d2      	uxtb	r2, r2
 80135aa:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80135ac:	69fb      	ldr	r3, [r7, #28]
 80135ae:	2201      	movs	r2, #1
 80135b0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80135b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80135b6:	4618      	mov	r0, r3
 80135b8:	3730      	adds	r7, #48	; 0x30
 80135ba:	46bd      	mov	sp, r7
 80135bc:	bd80      	pop	{r7, pc}
 80135be:	bf00      	nop
 80135c0:	4ec4ec4f 	.word	0x4ec4ec4f

080135c4 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b088      	sub	sp, #32
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
 80135cc:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 80135ce:	687b      	ldr	r3, [r7, #4]
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 80135d4:	683b      	ldr	r3, [r7, #0]
 80135d6:	2200      	movs	r2, #0
 80135d8:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	69db      	ldr	r3, [r3, #28]
 80135de:	2b00      	cmp	r3, #0
 80135e0:	f000 80c9 	beq.w	8013776 <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80135e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80135ec:	d032      	beq.n	8013654 <get_fileinfo+0x90>
			i = j = 0;
 80135ee:	2300      	movs	r3, #0
 80135f0:	61bb      	str	r3, [r7, #24]
 80135f2:	69bb      	ldr	r3, [r7, #24]
 80135f4:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 80135f6:	e01b      	b.n	8013630 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 80135f8:	89fb      	ldrh	r3, [r7, #14]
 80135fa:	2100      	movs	r1, #0
 80135fc:	4618      	mov	r0, r3
 80135fe:	f001 fb2f 	bl	8014c60 <ff_convert>
 8013602:	4603      	mov	r3, r0
 8013604:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 8013606:	89fb      	ldrh	r3, [r7, #14]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d102      	bne.n	8013612 <get_fileinfo+0x4e>
 801360c:	2300      	movs	r3, #0
 801360e:	61fb      	str	r3, [r7, #28]
 8013610:	e01a      	b.n	8013648 <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 8013612:	69fb      	ldr	r3, [r7, #28]
 8013614:	2bfe      	cmp	r3, #254	; 0xfe
 8013616:	d902      	bls.n	801361e <get_fileinfo+0x5a>
 8013618:	2300      	movs	r3, #0
 801361a:	61fb      	str	r3, [r7, #28]
 801361c:	e014      	b.n	8013648 <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	1c5a      	adds	r2, r3, #1
 8013622:	61fa      	str	r2, [r7, #28]
 8013624:	89fa      	ldrh	r2, [r7, #14]
 8013626:	b2d1      	uxtb	r1, r2
 8013628:	683a      	ldr	r2, [r7, #0]
 801362a:	4413      	add	r3, r2
 801362c:	460a      	mov	r2, r1
 801362e:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 8013630:	693b      	ldr	r3, [r7, #16]
 8013632:	691a      	ldr	r2, [r3, #16]
 8013634:	69bb      	ldr	r3, [r7, #24]
 8013636:	1c59      	adds	r1, r3, #1
 8013638:	61b9      	str	r1, [r7, #24]
 801363a:	005b      	lsls	r3, r3, #1
 801363c:	4413      	add	r3, r2
 801363e:	881b      	ldrh	r3, [r3, #0]
 8013640:	81fb      	strh	r3, [r7, #14]
 8013642:	89fb      	ldrh	r3, [r7, #14]
 8013644:	2b00      	cmp	r3, #0
 8013646:	d1d7      	bne.n	80135f8 <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 8013648:	683a      	ldr	r2, [r7, #0]
 801364a:	69fb      	ldr	r3, [r7, #28]
 801364c:	4413      	add	r3, r2
 801364e:	3316      	adds	r3, #22
 8013650:	2200      	movs	r2, #0
 8013652:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 8013654:	2300      	movs	r3, #0
 8013656:	61bb      	str	r3, [r7, #24]
 8013658:	69bb      	ldr	r3, [r7, #24]
 801365a:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 801365c:	683a      	ldr	r2, [r7, #0]
 801365e:	69fb      	ldr	r3, [r7, #28]
 8013660:	4413      	add	r3, r2
 8013662:	3316      	adds	r3, #22
 8013664:	781b      	ldrb	r3, [r3, #0]
 8013666:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 8013668:	e04c      	b.n	8013704 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	6a1a      	ldr	r2, [r3, #32]
 801366e:	69fb      	ldr	r3, [r7, #28]
 8013670:	1c59      	adds	r1, r3, #1
 8013672:	61f9      	str	r1, [r7, #28]
 8013674:	4413      	add	r3, r2
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 801367a:	7dfb      	ldrb	r3, [r7, #23]
 801367c:	2b20      	cmp	r3, #32
 801367e:	d100      	bne.n	8013682 <get_fileinfo+0xbe>
 8013680:	e040      	b.n	8013704 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8013682:	7dfb      	ldrb	r3, [r7, #23]
 8013684:	2b05      	cmp	r3, #5
 8013686:	d101      	bne.n	801368c <get_fileinfo+0xc8>
 8013688:	23e5      	movs	r3, #229	; 0xe5
 801368a:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 801368c:	69fb      	ldr	r3, [r7, #28]
 801368e:	2b09      	cmp	r3, #9
 8013690:	d10f      	bne.n	80136b2 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 8013692:	89bb      	ldrh	r3, [r7, #12]
 8013694:	2b00      	cmp	r3, #0
 8013696:	d105      	bne.n	80136a4 <get_fileinfo+0xe0>
 8013698:	683a      	ldr	r2, [r7, #0]
 801369a:	69bb      	ldr	r3, [r7, #24]
 801369c:	4413      	add	r3, r2
 801369e:	3316      	adds	r3, #22
 80136a0:	222e      	movs	r2, #46	; 0x2e
 80136a2:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 80136a4:	69bb      	ldr	r3, [r7, #24]
 80136a6:	1c5a      	adds	r2, r3, #1
 80136a8:	61ba      	str	r2, [r7, #24]
 80136aa:	683a      	ldr	r2, [r7, #0]
 80136ac:	4413      	add	r3, r2
 80136ae:	222e      	movs	r2, #46	; 0x2e
 80136b0:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 80136b2:	683a      	ldr	r2, [r7, #0]
 80136b4:	69bb      	ldr	r3, [r7, #24]
 80136b6:	4413      	add	r3, r2
 80136b8:	3309      	adds	r3, #9
 80136ba:	7dfa      	ldrb	r2, [r7, #23]
 80136bc:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 80136be:	89bb      	ldrh	r3, [r7, #12]
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	d11c      	bne.n	80136fe <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 80136c4:	7dfb      	ldrb	r3, [r7, #23]
 80136c6:	2b40      	cmp	r3, #64	; 0x40
 80136c8:	d913      	bls.n	80136f2 <get_fileinfo+0x12e>
 80136ca:	7dfb      	ldrb	r3, [r7, #23]
 80136cc:	2b5a      	cmp	r3, #90	; 0x5a
 80136ce:	d810      	bhi.n	80136f2 <get_fileinfo+0x12e>
 80136d0:	687b      	ldr	r3, [r7, #4]
 80136d2:	6a1b      	ldr	r3, [r3, #32]
 80136d4:	330c      	adds	r3, #12
 80136d6:	781b      	ldrb	r3, [r3, #0]
 80136d8:	461a      	mov	r2, r3
 80136da:	69fb      	ldr	r3, [r7, #28]
 80136dc:	2b08      	cmp	r3, #8
 80136de:	d901      	bls.n	80136e4 <get_fileinfo+0x120>
 80136e0:	2310      	movs	r3, #16
 80136e2:	e000      	b.n	80136e6 <get_fileinfo+0x122>
 80136e4:	2308      	movs	r3, #8
 80136e6:	4013      	ands	r3, r2
 80136e8:	2b00      	cmp	r3, #0
 80136ea:	d002      	beq.n	80136f2 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 80136ec:	7dfb      	ldrb	r3, [r7, #23]
 80136ee:	3320      	adds	r3, #32
 80136f0:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 80136f2:	683a      	ldr	r2, [r7, #0]
 80136f4:	69bb      	ldr	r3, [r7, #24]
 80136f6:	4413      	add	r3, r2
 80136f8:	3316      	adds	r3, #22
 80136fa:	7dfa      	ldrb	r2, [r7, #23]
 80136fc:	701a      	strb	r2, [r3, #0]
		}
		j++;
 80136fe:	69bb      	ldr	r3, [r7, #24]
 8013700:	3301      	adds	r3, #1
 8013702:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 8013704:	69fb      	ldr	r3, [r7, #28]
 8013706:	2b0a      	cmp	r3, #10
 8013708:	d9af      	bls.n	801366a <get_fileinfo+0xa6>
	}
	if (!lfv) {
 801370a:	89bb      	ldrh	r3, [r7, #12]
 801370c:	2b00      	cmp	r3, #0
 801370e:	d10d      	bne.n	801372c <get_fileinfo+0x168>
		fno->fname[j] = 0;
 8013710:	683a      	ldr	r2, [r7, #0]
 8013712:	69bb      	ldr	r3, [r7, #24]
 8013714:	4413      	add	r3, r2
 8013716:	3316      	adds	r3, #22
 8013718:	2200      	movs	r2, #0
 801371a:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 801371c:	687b      	ldr	r3, [r7, #4]
 801371e:	6a1b      	ldr	r3, [r3, #32]
 8013720:	330c      	adds	r3, #12
 8013722:	781b      	ldrb	r3, [r3, #0]
 8013724:	2b00      	cmp	r3, #0
 8013726:	d101      	bne.n	801372c <get_fileinfo+0x168>
 8013728:	2300      	movs	r3, #0
 801372a:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 801372c:	683a      	ldr	r2, [r7, #0]
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	4413      	add	r3, r2
 8013732:	3309      	adds	r3, #9
 8013734:	2200      	movs	r2, #0
 8013736:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6a1b      	ldr	r3, [r3, #32]
 801373c:	7ada      	ldrb	r2, [r3, #11]
 801373e:	683b      	ldr	r3, [r7, #0]
 8013740:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	6a1b      	ldr	r3, [r3, #32]
 8013746:	331c      	adds	r3, #28
 8013748:	4618      	mov	r0, r3
 801374a:	f7fe fb9b 	bl	8011e84 <ld_dword>
 801374e:	4602      	mov	r2, r0
 8013750:	683b      	ldr	r3, [r7, #0]
 8013752:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6a1b      	ldr	r3, [r3, #32]
 8013758:	3316      	adds	r3, #22
 801375a:	4618      	mov	r0, r3
 801375c:	f7fe fb92 	bl	8011e84 <ld_dword>
 8013760:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	b29a      	uxth	r2, r3
 8013766:	683b      	ldr	r3, [r7, #0]
 8013768:	80da      	strh	r2, [r3, #6]
 801376a:	68bb      	ldr	r3, [r7, #8]
 801376c:	0c1b      	lsrs	r3, r3, #16
 801376e:	b29a      	uxth	r2, r3
 8013770:	683b      	ldr	r3, [r7, #0]
 8013772:	809a      	strh	r2, [r3, #4]
 8013774:	e000      	b.n	8013778 <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8013776:	bf00      	nop
}
 8013778:	3720      	adds	r7, #32
 801377a:	46bd      	mov	sp, r7
 801377c:	bd80      	pop	{r7, pc}
	...

08013780 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8013780:	b580      	push	{r7, lr}
 8013782:	b08a      	sub	sp, #40	; 0x28
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 801378a:	683b      	ldr	r3, [r7, #0]
 801378c:	681b      	ldr	r3, [r3, #0]
 801378e:	613b      	str	r3, [r7, #16]
 8013790:	687b      	ldr	r3, [r7, #4]
 8013792:	681b      	ldr	r3, [r3, #0]
 8013794:	691b      	ldr	r3, [r3, #16]
 8013796:	60fb      	str	r3, [r7, #12]
 8013798:	2300      	movs	r3, #0
 801379a:	617b      	str	r3, [r7, #20]
 801379c:	697b      	ldr	r3, [r7, #20]
 801379e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80137a0:	69bb      	ldr	r3, [r7, #24]
 80137a2:	1c5a      	adds	r2, r3, #1
 80137a4:	61ba      	str	r2, [r7, #24]
 80137a6:	693a      	ldr	r2, [r7, #16]
 80137a8:	4413      	add	r3, r2
 80137aa:	781b      	ldrb	r3, [r3, #0]
 80137ac:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80137ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137b0:	2b1f      	cmp	r3, #31
 80137b2:	d940      	bls.n	8013836 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 80137b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137b6:	2b2f      	cmp	r3, #47	; 0x2f
 80137b8:	d006      	beq.n	80137c8 <create_name+0x48>
 80137ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137bc:	2b5c      	cmp	r3, #92	; 0x5c
 80137be:	d110      	bne.n	80137e2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80137c0:	e002      	b.n	80137c8 <create_name+0x48>
 80137c2:	69bb      	ldr	r3, [r7, #24]
 80137c4:	3301      	adds	r3, #1
 80137c6:	61bb      	str	r3, [r7, #24]
 80137c8:	693a      	ldr	r2, [r7, #16]
 80137ca:	69bb      	ldr	r3, [r7, #24]
 80137cc:	4413      	add	r3, r2
 80137ce:	781b      	ldrb	r3, [r3, #0]
 80137d0:	2b2f      	cmp	r3, #47	; 0x2f
 80137d2:	d0f6      	beq.n	80137c2 <create_name+0x42>
 80137d4:	693a      	ldr	r2, [r7, #16]
 80137d6:	69bb      	ldr	r3, [r7, #24]
 80137d8:	4413      	add	r3, r2
 80137da:	781b      	ldrb	r3, [r3, #0]
 80137dc:	2b5c      	cmp	r3, #92	; 0x5c
 80137de:	d0f0      	beq.n	80137c2 <create_name+0x42>
			break;
 80137e0:	e02a      	b.n	8013838 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 80137e2:	697b      	ldr	r3, [r7, #20]
 80137e4:	2bfe      	cmp	r3, #254	; 0xfe
 80137e6:	d901      	bls.n	80137ec <create_name+0x6c>
 80137e8:	2306      	movs	r3, #6
 80137ea:	e17d      	b.n	8013ae8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 80137ec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137ee:	b2db      	uxtb	r3, r3
 80137f0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80137f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80137f4:	2101      	movs	r1, #1
 80137f6:	4618      	mov	r0, r3
 80137f8:	f001 fa32 	bl	8014c60 <ff_convert>
 80137fc:	4603      	mov	r3, r0
 80137fe:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8013800:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013802:	2b00      	cmp	r3, #0
 8013804:	d101      	bne.n	801380a <create_name+0x8a>
 8013806:	2306      	movs	r3, #6
 8013808:	e16e      	b.n	8013ae8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 801380a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801380c:	2b7f      	cmp	r3, #127	; 0x7f
 801380e:	d809      	bhi.n	8013824 <create_name+0xa4>
 8013810:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013812:	4619      	mov	r1, r3
 8013814:	488d      	ldr	r0, [pc, #564]	; (8013a4c <create_name+0x2cc>)
 8013816:	f7fe fc02 	bl	801201e <chk_chr>
 801381a:	4603      	mov	r3, r0
 801381c:	2b00      	cmp	r3, #0
 801381e:	d001      	beq.n	8013824 <create_name+0xa4>
 8013820:	2306      	movs	r3, #6
 8013822:	e161      	b.n	8013ae8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8013824:	697b      	ldr	r3, [r7, #20]
 8013826:	1c5a      	adds	r2, r3, #1
 8013828:	617a      	str	r2, [r7, #20]
 801382a:	005b      	lsls	r3, r3, #1
 801382c:	68fa      	ldr	r2, [r7, #12]
 801382e:	4413      	add	r3, r2
 8013830:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013832:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8013834:	e7b4      	b.n	80137a0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8013836:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8013838:	693a      	ldr	r2, [r7, #16]
 801383a:	69bb      	ldr	r3, [r7, #24]
 801383c:	441a      	add	r2, r3
 801383e:	683b      	ldr	r3, [r7, #0]
 8013840:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8013842:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013844:	2b1f      	cmp	r3, #31
 8013846:	d801      	bhi.n	801384c <create_name+0xcc>
 8013848:	2304      	movs	r3, #4
 801384a:	e000      	b.n	801384e <create_name+0xce>
 801384c:	2300      	movs	r3, #0
 801384e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013852:	e011      	b.n	8013878 <create_name+0xf8>
		w = lfn[di - 1];
 8013854:	697a      	ldr	r2, [r7, #20]
 8013856:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801385a:	4413      	add	r3, r2
 801385c:	005b      	lsls	r3, r3, #1
 801385e:	68fa      	ldr	r2, [r7, #12]
 8013860:	4413      	add	r3, r2
 8013862:	881b      	ldrh	r3, [r3, #0]
 8013864:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8013866:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013868:	2b20      	cmp	r3, #32
 801386a:	d002      	beq.n	8013872 <create_name+0xf2>
 801386c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801386e:	2b2e      	cmp	r3, #46	; 0x2e
 8013870:	d106      	bne.n	8013880 <create_name+0x100>
		di--;
 8013872:	697b      	ldr	r3, [r7, #20]
 8013874:	3b01      	subs	r3, #1
 8013876:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8013878:	697b      	ldr	r3, [r7, #20]
 801387a:	2b00      	cmp	r3, #0
 801387c:	d1ea      	bne.n	8013854 <create_name+0xd4>
 801387e:	e000      	b.n	8013882 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8013880:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8013882:	697b      	ldr	r3, [r7, #20]
 8013884:	005b      	lsls	r3, r3, #1
 8013886:	68fa      	ldr	r2, [r7, #12]
 8013888:	4413      	add	r3, r2
 801388a:	2200      	movs	r2, #0
 801388c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 801388e:	697b      	ldr	r3, [r7, #20]
 8013890:	2b00      	cmp	r3, #0
 8013892:	d101      	bne.n	8013898 <create_name+0x118>
 8013894:	2306      	movs	r3, #6
 8013896:	e127      	b.n	8013ae8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8013898:	687b      	ldr	r3, [r7, #4]
 801389a:	3324      	adds	r3, #36	; 0x24
 801389c:	220b      	movs	r2, #11
 801389e:	2120      	movs	r1, #32
 80138a0:	4618      	mov	r0, r3
 80138a2:	f7fe fb7a 	bl	8011f9a <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80138a6:	2300      	movs	r3, #0
 80138a8:	61bb      	str	r3, [r7, #24]
 80138aa:	e002      	b.n	80138b2 <create_name+0x132>
 80138ac:	69bb      	ldr	r3, [r7, #24]
 80138ae:	3301      	adds	r3, #1
 80138b0:	61bb      	str	r3, [r7, #24]
 80138b2:	69bb      	ldr	r3, [r7, #24]
 80138b4:	005b      	lsls	r3, r3, #1
 80138b6:	68fa      	ldr	r2, [r7, #12]
 80138b8:	4413      	add	r3, r2
 80138ba:	881b      	ldrh	r3, [r3, #0]
 80138bc:	2b20      	cmp	r3, #32
 80138be:	d0f5      	beq.n	80138ac <create_name+0x12c>
 80138c0:	69bb      	ldr	r3, [r7, #24]
 80138c2:	005b      	lsls	r3, r3, #1
 80138c4:	68fa      	ldr	r2, [r7, #12]
 80138c6:	4413      	add	r3, r2
 80138c8:	881b      	ldrh	r3, [r3, #0]
 80138ca:	2b2e      	cmp	r3, #46	; 0x2e
 80138cc:	d0ee      	beq.n	80138ac <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80138ce:	69bb      	ldr	r3, [r7, #24]
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d009      	beq.n	80138e8 <create_name+0x168>
 80138d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138d8:	f043 0303 	orr.w	r3, r3, #3
 80138dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80138e0:	e002      	b.n	80138e8 <create_name+0x168>
 80138e2:	697b      	ldr	r3, [r7, #20]
 80138e4:	3b01      	subs	r3, #1
 80138e6:	617b      	str	r3, [r7, #20]
 80138e8:	697b      	ldr	r3, [r7, #20]
 80138ea:	2b00      	cmp	r3, #0
 80138ec:	d009      	beq.n	8013902 <create_name+0x182>
 80138ee:	697a      	ldr	r2, [r7, #20]
 80138f0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80138f4:	4413      	add	r3, r2
 80138f6:	005b      	lsls	r3, r3, #1
 80138f8:	68fa      	ldr	r2, [r7, #12]
 80138fa:	4413      	add	r3, r2
 80138fc:	881b      	ldrh	r3, [r3, #0]
 80138fe:	2b2e      	cmp	r3, #46	; 0x2e
 8013900:	d1ef      	bne.n	80138e2 <create_name+0x162>

	i = b = 0; ni = 8;
 8013902:	2300      	movs	r3, #0
 8013904:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013908:	2300      	movs	r3, #0
 801390a:	623b      	str	r3, [r7, #32]
 801390c:	2308      	movs	r3, #8
 801390e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8013910:	69bb      	ldr	r3, [r7, #24]
 8013912:	1c5a      	adds	r2, r3, #1
 8013914:	61ba      	str	r2, [r7, #24]
 8013916:	005b      	lsls	r3, r3, #1
 8013918:	68fa      	ldr	r2, [r7, #12]
 801391a:	4413      	add	r3, r2
 801391c:	881b      	ldrh	r3, [r3, #0]
 801391e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8013920:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013922:	2b00      	cmp	r3, #0
 8013924:	f000 8090 	beq.w	8013a48 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8013928:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801392a:	2b20      	cmp	r3, #32
 801392c:	d006      	beq.n	801393c <create_name+0x1bc>
 801392e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013930:	2b2e      	cmp	r3, #46	; 0x2e
 8013932:	d10a      	bne.n	801394a <create_name+0x1ca>
 8013934:	69ba      	ldr	r2, [r7, #24]
 8013936:	697b      	ldr	r3, [r7, #20]
 8013938:	429a      	cmp	r2, r3
 801393a:	d006      	beq.n	801394a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 801393c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013940:	f043 0303 	orr.w	r3, r3, #3
 8013944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8013948:	e07d      	b.n	8013a46 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 801394a:	6a3a      	ldr	r2, [r7, #32]
 801394c:	69fb      	ldr	r3, [r7, #28]
 801394e:	429a      	cmp	r2, r3
 8013950:	d203      	bcs.n	801395a <create_name+0x1da>
 8013952:	69ba      	ldr	r2, [r7, #24]
 8013954:	697b      	ldr	r3, [r7, #20]
 8013956:	429a      	cmp	r2, r3
 8013958:	d123      	bne.n	80139a2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 801395a:	69fb      	ldr	r3, [r7, #28]
 801395c:	2b0b      	cmp	r3, #11
 801395e:	d106      	bne.n	801396e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8013960:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013964:	f043 0303 	orr.w	r3, r3, #3
 8013968:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801396c:	e075      	b.n	8013a5a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 801396e:	69ba      	ldr	r2, [r7, #24]
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	429a      	cmp	r2, r3
 8013974:	d005      	beq.n	8013982 <create_name+0x202>
 8013976:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801397a:	f043 0303 	orr.w	r3, r3, #3
 801397e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 8013982:	69ba      	ldr	r2, [r7, #24]
 8013984:	697b      	ldr	r3, [r7, #20]
 8013986:	429a      	cmp	r2, r3
 8013988:	d866      	bhi.n	8013a58 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 801398a:	697b      	ldr	r3, [r7, #20]
 801398c:	61bb      	str	r3, [r7, #24]
 801398e:	2308      	movs	r3, #8
 8013990:	623b      	str	r3, [r7, #32]
 8013992:	230b      	movs	r3, #11
 8013994:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8013996:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801399a:	009b      	lsls	r3, r3, #2
 801399c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80139a0:	e051      	b.n	8013a46 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80139a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139a4:	2b7f      	cmp	r3, #127	; 0x7f
 80139a6:	d914      	bls.n	80139d2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80139a8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139aa:	2100      	movs	r1, #0
 80139ac:	4618      	mov	r0, r3
 80139ae:	f001 f957 	bl	8014c60 <ff_convert>
 80139b2:	4603      	mov	r3, r0
 80139b4:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 80139b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d004      	beq.n	80139c6 <create_name+0x246>
 80139bc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139be:	3b80      	subs	r3, #128	; 0x80
 80139c0:	4a23      	ldr	r2, [pc, #140]	; (8013a50 <create_name+0x2d0>)
 80139c2:	5cd3      	ldrb	r3, [r2, r3]
 80139c4:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80139c6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139ca:	f043 0302 	orr.w	r3, r3, #2
 80139ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80139d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139d4:	2b00      	cmp	r3, #0
 80139d6:	d007      	beq.n	80139e8 <create_name+0x268>
 80139d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139da:	4619      	mov	r1, r3
 80139dc:	481d      	ldr	r0, [pc, #116]	; (8013a54 <create_name+0x2d4>)
 80139de:	f7fe fb1e 	bl	801201e <chk_chr>
 80139e2:	4603      	mov	r3, r0
 80139e4:	2b00      	cmp	r3, #0
 80139e6:	d008      	beq.n	80139fa <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80139e8:	235f      	movs	r3, #95	; 0x5f
 80139ea:	84bb      	strh	r3, [r7, #36]	; 0x24
 80139ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80139f0:	f043 0303 	orr.w	r3, r3, #3
 80139f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80139f8:	e01b      	b.n	8013a32 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80139fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80139fc:	2b40      	cmp	r3, #64	; 0x40
 80139fe:	d909      	bls.n	8013a14 <create_name+0x294>
 8013a00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a02:	2b5a      	cmp	r3, #90	; 0x5a
 8013a04:	d806      	bhi.n	8013a14 <create_name+0x294>
					b |= 2;
 8013a06:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a0a:	f043 0302 	orr.w	r3, r3, #2
 8013a0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013a12:	e00e      	b.n	8013a32 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8013a14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a16:	2b60      	cmp	r3, #96	; 0x60
 8013a18:	d90b      	bls.n	8013a32 <create_name+0x2b2>
 8013a1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a1c:	2b7a      	cmp	r3, #122	; 0x7a
 8013a1e:	d808      	bhi.n	8013a32 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8013a20:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a24:	f043 0301 	orr.w	r3, r3, #1
 8013a28:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8013a2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013a2e:	3b20      	subs	r3, #32
 8013a30:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8013a32:	6a3b      	ldr	r3, [r7, #32]
 8013a34:	1c5a      	adds	r2, r3, #1
 8013a36:	623a      	str	r2, [r7, #32]
 8013a38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8013a3a:	b2d1      	uxtb	r1, r2
 8013a3c:	687a      	ldr	r2, [r7, #4]
 8013a3e:	4413      	add	r3, r2
 8013a40:	460a      	mov	r2, r1
 8013a42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 8013a46:	e763      	b.n	8013910 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8013a48:	bf00      	nop
 8013a4a:	e006      	b.n	8013a5a <create_name+0x2da>
 8013a4c:	080194f4 	.word	0x080194f4
 8013a50:	080195b8 	.word	0x080195b8
 8013a54:	08019500 	.word	0x08019500
			if (si > di) break;			/* No extension */
 8013a58:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8013a60:	2be5      	cmp	r3, #229	; 0xe5
 8013a62:	d103      	bne.n	8013a6c <create_name+0x2ec>
 8013a64:	687b      	ldr	r3, [r7, #4]
 8013a66:	2205      	movs	r2, #5
 8013a68:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 8013a6c:	69fb      	ldr	r3, [r7, #28]
 8013a6e:	2b08      	cmp	r3, #8
 8013a70:	d104      	bne.n	8013a7c <create_name+0x2fc>
 8013a72:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a76:	009b      	lsls	r3, r3, #2
 8013a78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8013a7c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a80:	f003 030c 	and.w	r3, r3, #12
 8013a84:	2b0c      	cmp	r3, #12
 8013a86:	d005      	beq.n	8013a94 <create_name+0x314>
 8013a88:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013a8c:	f003 0303 	and.w	r3, r3, #3
 8013a90:	2b03      	cmp	r3, #3
 8013a92:	d105      	bne.n	8013aa0 <create_name+0x320>
 8013a94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013a98:	f043 0302 	orr.w	r3, r3, #2
 8013a9c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8013aa0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013aa4:	f003 0302 	and.w	r3, r3, #2
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d117      	bne.n	8013adc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8013aac:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ab0:	f003 0303 	and.w	r3, r3, #3
 8013ab4:	2b01      	cmp	r3, #1
 8013ab6:	d105      	bne.n	8013ac4 <create_name+0x344>
 8013ab8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013abc:	f043 0310 	orr.w	r3, r3, #16
 8013ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8013ac4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8013ac8:	f003 030c 	and.w	r3, r3, #12
 8013acc:	2b04      	cmp	r3, #4
 8013ace:	d105      	bne.n	8013adc <create_name+0x35c>
 8013ad0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013ad4:	f043 0308 	orr.w	r3, r3, #8
 8013ad8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8013ae2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 8013ae6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8013ae8:	4618      	mov	r0, r3
 8013aea:	3728      	adds	r7, #40	; 0x28
 8013aec:	46bd      	mov	sp, r7
 8013aee:	bd80      	pop	{r7, pc}

08013af0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8013af0:	b580      	push	{r7, lr}
 8013af2:	b086      	sub	sp, #24
 8013af4:	af00      	add	r7, sp, #0
 8013af6:	6078      	str	r0, [r7, #4]
 8013af8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8013afe:	693b      	ldr	r3, [r7, #16]
 8013b00:	681b      	ldr	r3, [r3, #0]
 8013b02:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8013b04:	e002      	b.n	8013b0c <follow_path+0x1c>
 8013b06:	683b      	ldr	r3, [r7, #0]
 8013b08:	3301      	adds	r3, #1
 8013b0a:	603b      	str	r3, [r7, #0]
 8013b0c:	683b      	ldr	r3, [r7, #0]
 8013b0e:	781b      	ldrb	r3, [r3, #0]
 8013b10:	2b2f      	cmp	r3, #47	; 0x2f
 8013b12:	d0f8      	beq.n	8013b06 <follow_path+0x16>
 8013b14:	683b      	ldr	r3, [r7, #0]
 8013b16:	781b      	ldrb	r3, [r3, #0]
 8013b18:	2b5c      	cmp	r3, #92	; 0x5c
 8013b1a:	d0f4      	beq.n	8013b06 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8013b1c:	693b      	ldr	r3, [r7, #16]
 8013b1e:	2200      	movs	r2, #0
 8013b20:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8013b22:	683b      	ldr	r3, [r7, #0]
 8013b24:	781b      	ldrb	r3, [r3, #0]
 8013b26:	2b1f      	cmp	r3, #31
 8013b28:	d80a      	bhi.n	8013b40 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2280      	movs	r2, #128	; 0x80
 8013b2e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8013b32:	2100      	movs	r1, #0
 8013b34:	6878      	ldr	r0, [r7, #4]
 8013b36:	f7ff f81f 	bl	8012b78 <dir_sdi>
 8013b3a:	4603      	mov	r3, r0
 8013b3c:	75fb      	strb	r3, [r7, #23]
 8013b3e:	e048      	b.n	8013bd2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013b40:	463b      	mov	r3, r7
 8013b42:	4619      	mov	r1, r3
 8013b44:	6878      	ldr	r0, [r7, #4]
 8013b46:	f7ff fe1b 	bl	8013780 <create_name>
 8013b4a:	4603      	mov	r3, r0
 8013b4c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8013b4e:	7dfb      	ldrb	r3, [r7, #23]
 8013b50:	2b00      	cmp	r3, #0
 8013b52:	d139      	bne.n	8013bc8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8013b54:	6878      	ldr	r0, [r7, #4]
 8013b56:	f7ff fb7c 	bl	8013252 <dir_find>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8013b64:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8013b66:	7dfb      	ldrb	r3, [r7, #23]
 8013b68:	2b00      	cmp	r3, #0
 8013b6a:	d00a      	beq.n	8013b82 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8013b6c:	7dfb      	ldrb	r3, [r7, #23]
 8013b6e:	2b04      	cmp	r3, #4
 8013b70:	d12c      	bne.n	8013bcc <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8013b72:	7afb      	ldrb	r3, [r7, #11]
 8013b74:	f003 0304 	and.w	r3, r3, #4
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d127      	bne.n	8013bcc <follow_path+0xdc>
 8013b7c:	2305      	movs	r3, #5
 8013b7e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8013b80:	e024      	b.n	8013bcc <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013b82:	7afb      	ldrb	r3, [r7, #11]
 8013b84:	f003 0304 	and.w	r3, r3, #4
 8013b88:	2b00      	cmp	r3, #0
 8013b8a:	d121      	bne.n	8013bd0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8013b8c:	693b      	ldr	r3, [r7, #16]
 8013b8e:	799b      	ldrb	r3, [r3, #6]
 8013b90:	f003 0310 	and.w	r3, r3, #16
 8013b94:	2b00      	cmp	r3, #0
 8013b96:	d102      	bne.n	8013b9e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8013b98:	2305      	movs	r3, #5
 8013b9a:	75fb      	strb	r3, [r7, #23]
 8013b9c:	e019      	b.n	8013bd2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8013ba4:	687b      	ldr	r3, [r7, #4]
 8013ba6:	695b      	ldr	r3, [r3, #20]
 8013ba8:	68fa      	ldr	r2, [r7, #12]
 8013baa:	8992      	ldrh	r2, [r2, #12]
 8013bac:	fbb3 f0f2 	udiv	r0, r3, r2
 8013bb0:	fb00 f202 	mul.w	r2, r0, r2
 8013bb4:	1a9b      	subs	r3, r3, r2
 8013bb6:	440b      	add	r3, r1
 8013bb8:	4619      	mov	r1, r3
 8013bba:	68f8      	ldr	r0, [r7, #12]
 8013bbc:	f7ff f982 	bl	8012ec4 <ld_clust>
 8013bc0:	4602      	mov	r2, r0
 8013bc2:	693b      	ldr	r3, [r7, #16]
 8013bc4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8013bc6:	e7bb      	b.n	8013b40 <follow_path+0x50>
			if (res != FR_OK) break;
 8013bc8:	bf00      	nop
 8013bca:	e002      	b.n	8013bd2 <follow_path+0xe2>
				break;
 8013bcc:	bf00      	nop
 8013bce:	e000      	b.n	8013bd2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8013bd0:	bf00      	nop
			}
		}
	}

	return res;
 8013bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8013bd4:	4618      	mov	r0, r3
 8013bd6:	3718      	adds	r7, #24
 8013bd8:	46bd      	mov	sp, r7
 8013bda:	bd80      	pop	{r7, pc}

08013bdc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8013bdc:	b480      	push	{r7}
 8013bde:	b087      	sub	sp, #28
 8013be0:	af00      	add	r7, sp, #0
 8013be2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8013be4:	f04f 33ff 	mov.w	r3, #4294967295
 8013be8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	2b00      	cmp	r3, #0
 8013bf0:	d031      	beq.n	8013c56 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8013bf2:	687b      	ldr	r3, [r7, #4]
 8013bf4:	681b      	ldr	r3, [r3, #0]
 8013bf6:	617b      	str	r3, [r7, #20]
 8013bf8:	e002      	b.n	8013c00 <get_ldnumber+0x24>
 8013bfa:	697b      	ldr	r3, [r7, #20]
 8013bfc:	3301      	adds	r3, #1
 8013bfe:	617b      	str	r3, [r7, #20]
 8013c00:	697b      	ldr	r3, [r7, #20]
 8013c02:	781b      	ldrb	r3, [r3, #0]
 8013c04:	2b1f      	cmp	r3, #31
 8013c06:	d903      	bls.n	8013c10 <get_ldnumber+0x34>
 8013c08:	697b      	ldr	r3, [r7, #20]
 8013c0a:	781b      	ldrb	r3, [r3, #0]
 8013c0c:	2b3a      	cmp	r3, #58	; 0x3a
 8013c0e:	d1f4      	bne.n	8013bfa <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8013c10:	697b      	ldr	r3, [r7, #20]
 8013c12:	781b      	ldrb	r3, [r3, #0]
 8013c14:	2b3a      	cmp	r3, #58	; 0x3a
 8013c16:	d11c      	bne.n	8013c52 <get_ldnumber+0x76>
			tp = *path;
 8013c18:	687b      	ldr	r3, [r7, #4]
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	1c5a      	adds	r2, r3, #1
 8013c22:	60fa      	str	r2, [r7, #12]
 8013c24:	781b      	ldrb	r3, [r3, #0]
 8013c26:	3b30      	subs	r3, #48	; 0x30
 8013c28:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8013c2a:	68bb      	ldr	r3, [r7, #8]
 8013c2c:	2b09      	cmp	r3, #9
 8013c2e:	d80e      	bhi.n	8013c4e <get_ldnumber+0x72>
 8013c30:	68fa      	ldr	r2, [r7, #12]
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	429a      	cmp	r2, r3
 8013c36:	d10a      	bne.n	8013c4e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8013c38:	68bb      	ldr	r3, [r7, #8]
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d107      	bne.n	8013c4e <get_ldnumber+0x72>
					vol = (int)i;
 8013c3e:	68bb      	ldr	r3, [r7, #8]
 8013c40:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8013c42:	697b      	ldr	r3, [r7, #20]
 8013c44:	3301      	adds	r3, #1
 8013c46:	617b      	str	r3, [r7, #20]
 8013c48:	687b      	ldr	r3, [r7, #4]
 8013c4a:	697a      	ldr	r2, [r7, #20]
 8013c4c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8013c4e:	693b      	ldr	r3, [r7, #16]
 8013c50:	e002      	b.n	8013c58 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8013c52:	2300      	movs	r3, #0
 8013c54:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8013c56:	693b      	ldr	r3, [r7, #16]
}
 8013c58:	4618      	mov	r0, r3
 8013c5a:	371c      	adds	r7, #28
 8013c5c:	46bd      	mov	sp, r7
 8013c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c62:	4770      	bx	lr

08013c64 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8013c64:	b580      	push	{r7, lr}
 8013c66:	b082      	sub	sp, #8
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	2200      	movs	r2, #0
 8013c72:	70da      	strb	r2, [r3, #3]
 8013c74:	687b      	ldr	r3, [r7, #4]
 8013c76:	f04f 32ff 	mov.w	r2, #4294967295
 8013c7a:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8013c7c:	6839      	ldr	r1, [r7, #0]
 8013c7e:	6878      	ldr	r0, [r7, #4]
 8013c80:	f7fe fb98 	bl	80123b4 <move_window>
 8013c84:	4603      	mov	r3, r0
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d001      	beq.n	8013c8e <check_fs+0x2a>
 8013c8a:	2304      	movs	r3, #4
 8013c8c:	e038      	b.n	8013d00 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8013c8e:	687b      	ldr	r3, [r7, #4]
 8013c90:	3338      	adds	r3, #56	; 0x38
 8013c92:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8013c96:	4618      	mov	r0, r3
 8013c98:	f7fe f8dc 	bl	8011e54 <ld_word>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	461a      	mov	r2, r3
 8013ca0:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8013ca4:	429a      	cmp	r2, r3
 8013ca6:	d001      	beq.n	8013cac <check_fs+0x48>
 8013ca8:	2303      	movs	r3, #3
 8013caa:	e029      	b.n	8013d00 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8013cac:	687b      	ldr	r3, [r7, #4]
 8013cae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013cb2:	2be9      	cmp	r3, #233	; 0xe9
 8013cb4:	d009      	beq.n	8013cca <check_fs+0x66>
 8013cb6:	687b      	ldr	r3, [r7, #4]
 8013cb8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8013cbc:	2beb      	cmp	r3, #235	; 0xeb
 8013cbe:	d11e      	bne.n	8013cfe <check_fs+0x9a>
 8013cc0:	687b      	ldr	r3, [r7, #4]
 8013cc2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8013cc6:	2b90      	cmp	r3, #144	; 0x90
 8013cc8:	d119      	bne.n	8013cfe <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8013cca:	687b      	ldr	r3, [r7, #4]
 8013ccc:	3338      	adds	r3, #56	; 0x38
 8013cce:	3336      	adds	r3, #54	; 0x36
 8013cd0:	4618      	mov	r0, r3
 8013cd2:	f7fe f8d7 	bl	8011e84 <ld_dword>
 8013cd6:	4603      	mov	r3, r0
 8013cd8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8013cdc:	4a0a      	ldr	r2, [pc, #40]	; (8013d08 <check_fs+0xa4>)
 8013cde:	4293      	cmp	r3, r2
 8013ce0:	d101      	bne.n	8013ce6 <check_fs+0x82>
 8013ce2:	2300      	movs	r3, #0
 8013ce4:	e00c      	b.n	8013d00 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	3338      	adds	r3, #56	; 0x38
 8013cea:	3352      	adds	r3, #82	; 0x52
 8013cec:	4618      	mov	r0, r3
 8013cee:	f7fe f8c9 	bl	8011e84 <ld_dword>
 8013cf2:	4603      	mov	r3, r0
 8013cf4:	4a05      	ldr	r2, [pc, #20]	; (8013d0c <check_fs+0xa8>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d101      	bne.n	8013cfe <check_fs+0x9a>
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	e000      	b.n	8013d00 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8013cfe:	2302      	movs	r3, #2
}
 8013d00:	4618      	mov	r0, r3
 8013d02:	3708      	adds	r7, #8
 8013d04:	46bd      	mov	sp, r7
 8013d06:	bd80      	pop	{r7, pc}
 8013d08:	00544146 	.word	0x00544146
 8013d0c:	33544146 	.word	0x33544146

08013d10 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8013d10:	b580      	push	{r7, lr}
 8013d12:	b096      	sub	sp, #88	; 0x58
 8013d14:	af00      	add	r7, sp, #0
 8013d16:	60f8      	str	r0, [r7, #12]
 8013d18:	60b9      	str	r1, [r7, #8]
 8013d1a:	4613      	mov	r3, r2
 8013d1c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8013d1e:	68bb      	ldr	r3, [r7, #8]
 8013d20:	2200      	movs	r2, #0
 8013d22:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8013d24:	68f8      	ldr	r0, [r7, #12]
 8013d26:	f7ff ff59 	bl	8013bdc <get_ldnumber>
 8013d2a:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8013d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	da01      	bge.n	8013d36 <find_volume+0x26>
 8013d32:	230b      	movs	r3, #11
 8013d34:	e265      	b.n	8014202 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8013d36:	4a9f      	ldr	r2, [pc, #636]	; (8013fb4 <find_volume+0x2a4>)
 8013d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013d3e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8013d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d42:	2b00      	cmp	r3, #0
 8013d44:	d101      	bne.n	8013d4a <find_volume+0x3a>
 8013d46:	230c      	movs	r3, #12
 8013d48:	e25b      	b.n	8014202 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8013d4a:	68bb      	ldr	r3, [r7, #8]
 8013d4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013d4e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8013d50:	79fb      	ldrb	r3, [r7, #7]
 8013d52:	f023 0301 	bic.w	r3, r3, #1
 8013d56:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8013d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d5a:	781b      	ldrb	r3, [r3, #0]
 8013d5c:	2b00      	cmp	r3, #0
 8013d5e:	d01a      	beq.n	8013d96 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8013d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d62:	785b      	ldrb	r3, [r3, #1]
 8013d64:	4618      	mov	r0, r3
 8013d66:	f7fd ffd7 	bl	8011d18 <disk_status>
 8013d6a:	4603      	mov	r3, r0
 8013d6c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8013d70:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d74:	f003 0301 	and.w	r3, r3, #1
 8013d78:	2b00      	cmp	r3, #0
 8013d7a:	d10c      	bne.n	8013d96 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8013d7c:	79fb      	ldrb	r3, [r7, #7]
 8013d7e:	2b00      	cmp	r3, #0
 8013d80:	d007      	beq.n	8013d92 <find_volume+0x82>
 8013d82:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013d86:	f003 0304 	and.w	r3, r3, #4
 8013d8a:	2b00      	cmp	r3, #0
 8013d8c:	d001      	beq.n	8013d92 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8013d8e:	230a      	movs	r3, #10
 8013d90:	e237      	b.n	8014202 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8013d92:	2300      	movs	r3, #0
 8013d94:	e235      	b.n	8014202 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8013d96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d98:	2200      	movs	r2, #0
 8013d9a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8013d9c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013d9e:	b2da      	uxtb	r2, r3
 8013da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8013da4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013da6:	785b      	ldrb	r3, [r3, #1]
 8013da8:	4618      	mov	r0, r3
 8013daa:	f7fd ffcf 	bl	8011d4c <disk_initialize>
 8013dae:	4603      	mov	r3, r0
 8013db0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8013db4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013db8:	f003 0301 	and.w	r3, r3, #1
 8013dbc:	2b00      	cmp	r3, #0
 8013dbe:	d001      	beq.n	8013dc4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8013dc0:	2303      	movs	r3, #3
 8013dc2:	e21e      	b.n	8014202 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8013dc4:	79fb      	ldrb	r3, [r7, #7]
 8013dc6:	2b00      	cmp	r3, #0
 8013dc8:	d007      	beq.n	8013dda <find_volume+0xca>
 8013dca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8013dce:	f003 0304 	and.w	r3, r3, #4
 8013dd2:	2b00      	cmp	r3, #0
 8013dd4:	d001      	beq.n	8013dda <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8013dd6:	230a      	movs	r3, #10
 8013dd8:	e213      	b.n	8014202 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8013dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ddc:	7858      	ldrb	r0, [r3, #1]
 8013dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013de0:	330c      	adds	r3, #12
 8013de2:	461a      	mov	r2, r3
 8013de4:	2102      	movs	r1, #2
 8013de6:	f7fe f817 	bl	8011e18 <disk_ioctl>
 8013dea:	4603      	mov	r3, r0
 8013dec:	2b00      	cmp	r3, #0
 8013dee:	d001      	beq.n	8013df4 <find_volume+0xe4>
 8013df0:	2301      	movs	r3, #1
 8013df2:	e206      	b.n	8014202 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8013df4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013df6:	899b      	ldrh	r3, [r3, #12]
 8013df8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8013dfc:	d80d      	bhi.n	8013e1a <find_volume+0x10a>
 8013dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e00:	899b      	ldrh	r3, [r3, #12]
 8013e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e06:	d308      	bcc.n	8013e1a <find_volume+0x10a>
 8013e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e0a:	899b      	ldrh	r3, [r3, #12]
 8013e0c:	461a      	mov	r2, r3
 8013e0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e10:	899b      	ldrh	r3, [r3, #12]
 8013e12:	3b01      	subs	r3, #1
 8013e14:	4013      	ands	r3, r2
 8013e16:	2b00      	cmp	r3, #0
 8013e18:	d001      	beq.n	8013e1e <find_volume+0x10e>
 8013e1a:	2301      	movs	r3, #1
 8013e1c:	e1f1      	b.n	8014202 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8013e22:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013e24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013e26:	f7ff ff1d 	bl	8013c64 <check_fs>
 8013e2a:	4603      	mov	r3, r0
 8013e2c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8013e30:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013e34:	2b02      	cmp	r3, #2
 8013e36:	d149      	bne.n	8013ecc <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013e38:	2300      	movs	r3, #0
 8013e3a:	643b      	str	r3, [r7, #64]	; 0x40
 8013e3c:	e01e      	b.n	8013e7c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8013e3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013e40:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8013e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e46:	011b      	lsls	r3, r3, #4
 8013e48:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8013e4c:	4413      	add	r3, r2
 8013e4e:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8013e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e52:	3304      	adds	r3, #4
 8013e54:	781b      	ldrb	r3, [r3, #0]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d006      	beq.n	8013e68 <find_volume+0x158>
 8013e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013e5c:	3308      	adds	r3, #8
 8013e5e:	4618      	mov	r0, r3
 8013e60:	f7fe f810 	bl	8011e84 <ld_dword>
 8013e64:	4602      	mov	r2, r0
 8013e66:	e000      	b.n	8013e6a <find_volume+0x15a>
 8013e68:	2200      	movs	r2, #0
 8013e6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e6c:	009b      	lsls	r3, r3, #2
 8013e6e:	3358      	adds	r3, #88	; 0x58
 8013e70:	443b      	add	r3, r7
 8013e72:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8013e76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e78:	3301      	adds	r3, #1
 8013e7a:	643b      	str	r3, [r7, #64]	; 0x40
 8013e7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e7e:	2b03      	cmp	r3, #3
 8013e80:	d9dd      	bls.n	8013e3e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8013e82:	2300      	movs	r3, #0
 8013e84:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8013e86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e88:	2b00      	cmp	r3, #0
 8013e8a:	d002      	beq.n	8013e92 <find_volume+0x182>
 8013e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e8e:	3b01      	subs	r3, #1
 8013e90:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8013e92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	3358      	adds	r3, #88	; 0x58
 8013e98:	443b      	add	r3, r7
 8013e9a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8013e9e:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8013ea0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013ea2:	2b00      	cmp	r3, #0
 8013ea4:	d005      	beq.n	8013eb2 <find_volume+0x1a2>
 8013ea6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8013ea8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8013eaa:	f7ff fedb 	bl	8013c64 <check_fs>
 8013eae:	4603      	mov	r3, r0
 8013eb0:	e000      	b.n	8013eb4 <find_volume+0x1a4>
 8013eb2:	2303      	movs	r3, #3
 8013eb4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8013eb8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ebc:	2b01      	cmp	r3, #1
 8013ebe:	d905      	bls.n	8013ecc <find_volume+0x1bc>
 8013ec0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ec2:	3301      	adds	r3, #1
 8013ec4:	643b      	str	r3, [r7, #64]	; 0x40
 8013ec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8013ec8:	2b03      	cmp	r3, #3
 8013eca:	d9e2      	bls.n	8013e92 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8013ecc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013ed0:	2b04      	cmp	r3, #4
 8013ed2:	d101      	bne.n	8013ed8 <find_volume+0x1c8>
 8013ed4:	2301      	movs	r3, #1
 8013ed6:	e194      	b.n	8014202 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8013ed8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8013edc:	2b01      	cmp	r3, #1
 8013ede:	d901      	bls.n	8013ee4 <find_volume+0x1d4>
 8013ee0:	230d      	movs	r3, #13
 8013ee2:	e18e      	b.n	8014202 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8013ee4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ee6:	3338      	adds	r3, #56	; 0x38
 8013ee8:	330b      	adds	r3, #11
 8013eea:	4618      	mov	r0, r3
 8013eec:	f7fd ffb2 	bl	8011e54 <ld_word>
 8013ef0:	4603      	mov	r3, r0
 8013ef2:	461a      	mov	r2, r3
 8013ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ef6:	899b      	ldrh	r3, [r3, #12]
 8013ef8:	429a      	cmp	r2, r3
 8013efa:	d001      	beq.n	8013f00 <find_volume+0x1f0>
 8013efc:	230d      	movs	r3, #13
 8013efe:	e180      	b.n	8014202 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8013f00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f02:	3338      	adds	r3, #56	; 0x38
 8013f04:	3316      	adds	r3, #22
 8013f06:	4618      	mov	r0, r3
 8013f08:	f7fd ffa4 	bl	8011e54 <ld_word>
 8013f0c:	4603      	mov	r3, r0
 8013f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8013f10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d106      	bne.n	8013f24 <find_volume+0x214>
 8013f16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f18:	3338      	adds	r3, #56	; 0x38
 8013f1a:	3324      	adds	r3, #36	; 0x24
 8013f1c:	4618      	mov	r0, r3
 8013f1e:	f7fd ffb1 	bl	8011e84 <ld_dword>
 8013f22:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8013f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f26:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8013f28:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8013f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f2c:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 8013f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f32:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8013f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f36:	789b      	ldrb	r3, [r3, #2]
 8013f38:	2b01      	cmp	r3, #1
 8013f3a:	d005      	beq.n	8013f48 <find_volume+0x238>
 8013f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f3e:	789b      	ldrb	r3, [r3, #2]
 8013f40:	2b02      	cmp	r3, #2
 8013f42:	d001      	beq.n	8013f48 <find_volume+0x238>
 8013f44:	230d      	movs	r3, #13
 8013f46:	e15c      	b.n	8014202 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8013f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f4a:	789b      	ldrb	r3, [r3, #2]
 8013f4c:	461a      	mov	r2, r3
 8013f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013f50:	fb02 f303 	mul.w	r3, r2, r3
 8013f54:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8013f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f58:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013f5c:	b29a      	uxth	r2, r3
 8013f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f60:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8013f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f64:	895b      	ldrh	r3, [r3, #10]
 8013f66:	2b00      	cmp	r3, #0
 8013f68:	d008      	beq.n	8013f7c <find_volume+0x26c>
 8013f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f6c:	895b      	ldrh	r3, [r3, #10]
 8013f6e:	461a      	mov	r2, r3
 8013f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f72:	895b      	ldrh	r3, [r3, #10]
 8013f74:	3b01      	subs	r3, #1
 8013f76:	4013      	ands	r3, r2
 8013f78:	2b00      	cmp	r3, #0
 8013f7a:	d001      	beq.n	8013f80 <find_volume+0x270>
 8013f7c:	230d      	movs	r3, #13
 8013f7e:	e140      	b.n	8014202 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8013f80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f82:	3338      	adds	r3, #56	; 0x38
 8013f84:	3311      	adds	r3, #17
 8013f86:	4618      	mov	r0, r3
 8013f88:	f7fd ff64 	bl	8011e54 <ld_word>
 8013f8c:	4603      	mov	r3, r0
 8013f8e:	461a      	mov	r2, r3
 8013f90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f92:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8013f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013f96:	891b      	ldrh	r3, [r3, #8]
 8013f98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013f9a:	8992      	ldrh	r2, [r2, #12]
 8013f9c:	0952      	lsrs	r2, r2, #5
 8013f9e:	b292      	uxth	r2, r2
 8013fa0:	fbb3 f1f2 	udiv	r1, r3, r2
 8013fa4:	fb01 f202 	mul.w	r2, r1, r2
 8013fa8:	1a9b      	subs	r3, r3, r2
 8013faa:	b29b      	uxth	r3, r3
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d003      	beq.n	8013fb8 <find_volume+0x2a8>
 8013fb0:	230d      	movs	r3, #13
 8013fb2:	e126      	b.n	8014202 <find_volume+0x4f2>
 8013fb4:	20002b64 	.word	0x20002b64

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8013fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fba:	3338      	adds	r3, #56	; 0x38
 8013fbc:	3313      	adds	r3, #19
 8013fbe:	4618      	mov	r0, r3
 8013fc0:	f7fd ff48 	bl	8011e54 <ld_word>
 8013fc4:	4603      	mov	r3, r0
 8013fc6:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8013fc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d106      	bne.n	8013fdc <find_volume+0x2cc>
 8013fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fd0:	3338      	adds	r3, #56	; 0x38
 8013fd2:	3320      	adds	r3, #32
 8013fd4:	4618      	mov	r0, r3
 8013fd6:	f7fd ff55 	bl	8011e84 <ld_dword>
 8013fda:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8013fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013fde:	3338      	adds	r3, #56	; 0x38
 8013fe0:	330e      	adds	r3, #14
 8013fe2:	4618      	mov	r0, r3
 8013fe4:	f7fd ff36 	bl	8011e54 <ld_word>
 8013fe8:	4603      	mov	r3, r0
 8013fea:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8013fec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013fee:	2b00      	cmp	r3, #0
 8013ff0:	d101      	bne.n	8013ff6 <find_volume+0x2e6>
 8013ff2:	230d      	movs	r3, #13
 8013ff4:	e105      	b.n	8014202 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8013ff6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8013ff8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ffa:	4413      	add	r3, r2
 8013ffc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013ffe:	8911      	ldrh	r1, [r2, #8]
 8014000:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014002:	8992      	ldrh	r2, [r2, #12]
 8014004:	0952      	lsrs	r2, r2, #5
 8014006:	b292      	uxth	r2, r2
 8014008:	fbb1 f2f2 	udiv	r2, r1, r2
 801400c:	b292      	uxth	r2, r2
 801400e:	4413      	add	r3, r2
 8014010:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8014012:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014016:	429a      	cmp	r2, r3
 8014018:	d201      	bcs.n	801401e <find_volume+0x30e>
 801401a:	230d      	movs	r3, #13
 801401c:	e0f1      	b.n	8014202 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 801401e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014022:	1ad3      	subs	r3, r2, r3
 8014024:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014026:	8952      	ldrh	r2, [r2, #10]
 8014028:	fbb3 f3f2 	udiv	r3, r3, r2
 801402c:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 801402e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014030:	2b00      	cmp	r3, #0
 8014032:	d101      	bne.n	8014038 <find_volume+0x328>
 8014034:	230d      	movs	r3, #13
 8014036:	e0e4      	b.n	8014202 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8014038:	2303      	movs	r3, #3
 801403a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 801403e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014040:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8014044:	4293      	cmp	r3, r2
 8014046:	d802      	bhi.n	801404e <find_volume+0x33e>
 8014048:	2302      	movs	r3, #2
 801404a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 801404e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014050:	f640 72f5 	movw	r2, #4085	; 0xff5
 8014054:	4293      	cmp	r3, r2
 8014056:	d802      	bhi.n	801405e <find_volume+0x34e>
 8014058:	2301      	movs	r3, #1
 801405a:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 801405e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014060:	1c9a      	adds	r2, r3, #2
 8014062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014064:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8014066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014068:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801406a:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 801406c:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801406e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014070:	441a      	add	r2, r3
 8014072:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014074:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8014076:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801407a:	441a      	add	r2, r3
 801407c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801407e:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8014080:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014084:	2b03      	cmp	r3, #3
 8014086:	d11e      	bne.n	80140c6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8014088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801408a:	3338      	adds	r3, #56	; 0x38
 801408c:	332a      	adds	r3, #42	; 0x2a
 801408e:	4618      	mov	r0, r3
 8014090:	f7fd fee0 	bl	8011e54 <ld_word>
 8014094:	4603      	mov	r3, r0
 8014096:	2b00      	cmp	r3, #0
 8014098:	d001      	beq.n	801409e <find_volume+0x38e>
 801409a:	230d      	movs	r3, #13
 801409c:	e0b1      	b.n	8014202 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 801409e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140a0:	891b      	ldrh	r3, [r3, #8]
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d001      	beq.n	80140aa <find_volume+0x39a>
 80140a6:	230d      	movs	r3, #13
 80140a8:	e0ab      	b.n	8014202 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80140aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ac:	3338      	adds	r3, #56	; 0x38
 80140ae:	332c      	adds	r3, #44	; 0x2c
 80140b0:	4618      	mov	r0, r3
 80140b2:	f7fd fee7 	bl	8011e84 <ld_dword>
 80140b6:	4602      	mov	r2, r0
 80140b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140ba:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80140bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140be:	69db      	ldr	r3, [r3, #28]
 80140c0:	009b      	lsls	r3, r3, #2
 80140c2:	647b      	str	r3, [r7, #68]	; 0x44
 80140c4:	e01f      	b.n	8014106 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80140c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140c8:	891b      	ldrh	r3, [r3, #8]
 80140ca:	2b00      	cmp	r3, #0
 80140cc:	d101      	bne.n	80140d2 <find_volume+0x3c2>
 80140ce:	230d      	movs	r3, #13
 80140d0:	e097      	b.n	8014202 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80140d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80140d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80140d8:	441a      	add	r2, r3
 80140da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140dc:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80140de:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80140e2:	2b02      	cmp	r3, #2
 80140e4:	d103      	bne.n	80140ee <find_volume+0x3de>
 80140e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140e8:	69db      	ldr	r3, [r3, #28]
 80140ea:	005b      	lsls	r3, r3, #1
 80140ec:	e00a      	b.n	8014104 <find_volume+0x3f4>
 80140ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140f0:	69da      	ldr	r2, [r3, #28]
 80140f2:	4613      	mov	r3, r2
 80140f4:	005b      	lsls	r3, r3, #1
 80140f6:	4413      	add	r3, r2
 80140f8:	085a      	lsrs	r2, r3, #1
 80140fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80140fc:	69db      	ldr	r3, [r3, #28]
 80140fe:	f003 0301 	and.w	r3, r3, #1
 8014102:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8014104:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8014106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014108:	6a1a      	ldr	r2, [r3, #32]
 801410a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801410c:	899b      	ldrh	r3, [r3, #12]
 801410e:	4619      	mov	r1, r3
 8014110:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014112:	440b      	add	r3, r1
 8014114:	3b01      	subs	r3, #1
 8014116:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014118:	8989      	ldrh	r1, [r1, #12]
 801411a:	fbb3 f3f1 	udiv	r3, r3, r1
 801411e:	429a      	cmp	r2, r3
 8014120:	d201      	bcs.n	8014126 <find_volume+0x416>
 8014122:	230d      	movs	r3, #13
 8014124:	e06d      	b.n	8014202 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8014126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014128:	f04f 32ff 	mov.w	r2, #4294967295
 801412c:	619a      	str	r2, [r3, #24]
 801412e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014130:	699a      	ldr	r2, [r3, #24]
 8014132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014134:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8014136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014138:	2280      	movs	r2, #128	; 0x80
 801413a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801413c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8014140:	2b03      	cmp	r3, #3
 8014142:	d149      	bne.n	80141d8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8014144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014146:	3338      	adds	r3, #56	; 0x38
 8014148:	3330      	adds	r3, #48	; 0x30
 801414a:	4618      	mov	r0, r3
 801414c:	f7fd fe82 	bl	8011e54 <ld_word>
 8014150:	4603      	mov	r3, r0
 8014152:	2b01      	cmp	r3, #1
 8014154:	d140      	bne.n	80141d8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8014156:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8014158:	3301      	adds	r3, #1
 801415a:	4619      	mov	r1, r3
 801415c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801415e:	f7fe f929 	bl	80123b4 <move_window>
 8014162:	4603      	mov	r3, r0
 8014164:	2b00      	cmp	r3, #0
 8014166:	d137      	bne.n	80141d8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8014168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801416a:	2200      	movs	r2, #0
 801416c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801416e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014170:	3338      	adds	r3, #56	; 0x38
 8014172:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8014176:	4618      	mov	r0, r3
 8014178:	f7fd fe6c 	bl	8011e54 <ld_word>
 801417c:	4603      	mov	r3, r0
 801417e:	461a      	mov	r2, r3
 8014180:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8014184:	429a      	cmp	r2, r3
 8014186:	d127      	bne.n	80141d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8014188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801418a:	3338      	adds	r3, #56	; 0x38
 801418c:	4618      	mov	r0, r3
 801418e:	f7fd fe79 	bl	8011e84 <ld_dword>
 8014192:	4603      	mov	r3, r0
 8014194:	4a1d      	ldr	r2, [pc, #116]	; (801420c <find_volume+0x4fc>)
 8014196:	4293      	cmp	r3, r2
 8014198:	d11e      	bne.n	80141d8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 801419a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801419c:	3338      	adds	r3, #56	; 0x38
 801419e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80141a2:	4618      	mov	r0, r3
 80141a4:	f7fd fe6e 	bl	8011e84 <ld_dword>
 80141a8:	4603      	mov	r3, r0
 80141aa:	4a19      	ldr	r2, [pc, #100]	; (8014210 <find_volume+0x500>)
 80141ac:	4293      	cmp	r3, r2
 80141ae:	d113      	bne.n	80141d8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80141b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141b2:	3338      	adds	r3, #56	; 0x38
 80141b4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fd fe63 	bl	8011e84 <ld_dword>
 80141be:	4602      	mov	r2, r0
 80141c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80141c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141c6:	3338      	adds	r3, #56	; 0x38
 80141c8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80141cc:	4618      	mov	r0, r3
 80141ce:	f7fd fe59 	bl	8011e84 <ld_dword>
 80141d2:	4602      	mov	r2, r0
 80141d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141d6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80141d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141da:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80141de:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80141e0:	4b0c      	ldr	r3, [pc, #48]	; (8014214 <find_volume+0x504>)
 80141e2:	881b      	ldrh	r3, [r3, #0]
 80141e4:	3301      	adds	r3, #1
 80141e6:	b29a      	uxth	r2, r3
 80141e8:	4b0a      	ldr	r3, [pc, #40]	; (8014214 <find_volume+0x504>)
 80141ea:	801a      	strh	r2, [r3, #0]
 80141ec:	4b09      	ldr	r3, [pc, #36]	; (8014214 <find_volume+0x504>)
 80141ee:	881a      	ldrh	r2, [r3, #0]
 80141f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80141f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80141f6:	4a08      	ldr	r2, [pc, #32]	; (8014218 <find_volume+0x508>)
 80141f8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80141fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80141fc:	f7fe f872 	bl	80122e4 <clear_lock>
#endif
	return FR_OK;
 8014200:	2300      	movs	r3, #0
}
 8014202:	4618      	mov	r0, r3
 8014204:	3758      	adds	r7, #88	; 0x58
 8014206:	46bd      	mov	sp, r7
 8014208:	bd80      	pop	{r7, pc}
 801420a:	bf00      	nop
 801420c:	41615252 	.word	0x41615252
 8014210:	61417272 	.word	0x61417272
 8014214:	20002b68 	.word	0x20002b68
 8014218:	20002b8c 	.word	0x20002b8c

0801421c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 801421c:	b580      	push	{r7, lr}
 801421e:	b084      	sub	sp, #16
 8014220:	af00      	add	r7, sp, #0
 8014222:	6078      	str	r0, [r7, #4]
 8014224:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8014226:	2309      	movs	r3, #9
 8014228:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 801422a:	687b      	ldr	r3, [r7, #4]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d01c      	beq.n	801426a <validate+0x4e>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	2b00      	cmp	r3, #0
 8014236:	d018      	beq.n	801426a <validate+0x4e>
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	781b      	ldrb	r3, [r3, #0]
 801423e:	2b00      	cmp	r3, #0
 8014240:	d013      	beq.n	801426a <validate+0x4e>
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	889a      	ldrh	r2, [r3, #4]
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	88db      	ldrh	r3, [r3, #6]
 801424c:	429a      	cmp	r2, r3
 801424e:	d10c      	bne.n	801426a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	681b      	ldr	r3, [r3, #0]
 8014254:	785b      	ldrb	r3, [r3, #1]
 8014256:	4618      	mov	r0, r3
 8014258:	f7fd fd5e 	bl	8011d18 <disk_status>
 801425c:	4603      	mov	r3, r0
 801425e:	f003 0301 	and.w	r3, r3, #1
 8014262:	2b00      	cmp	r3, #0
 8014264:	d101      	bne.n	801426a <validate+0x4e>
			res = FR_OK;
 8014266:	2300      	movs	r3, #0
 8014268:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 801426a:	7bfb      	ldrb	r3, [r7, #15]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d102      	bne.n	8014276 <validate+0x5a>
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	e000      	b.n	8014278 <validate+0x5c>
 8014276:	2300      	movs	r3, #0
 8014278:	683a      	ldr	r2, [r7, #0]
 801427a:	6013      	str	r3, [r2, #0]
	return res;
 801427c:	7bfb      	ldrb	r3, [r7, #15]
}
 801427e:	4618      	mov	r0, r3
 8014280:	3710      	adds	r7, #16
 8014282:	46bd      	mov	sp, r7
 8014284:	bd80      	pop	{r7, pc}
	...

08014288 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b088      	sub	sp, #32
 801428c:	af00      	add	r7, sp, #0
 801428e:	60f8      	str	r0, [r7, #12]
 8014290:	60b9      	str	r1, [r7, #8]
 8014292:	4613      	mov	r3, r2
 8014294:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8014296:	68bb      	ldr	r3, [r7, #8]
 8014298:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 801429a:	f107 0310 	add.w	r3, r7, #16
 801429e:	4618      	mov	r0, r3
 80142a0:	f7ff fc9c 	bl	8013bdc <get_ldnumber>
 80142a4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	2b00      	cmp	r3, #0
 80142aa:	da01      	bge.n	80142b0 <f_mount+0x28>
 80142ac:	230b      	movs	r3, #11
 80142ae:	e02b      	b.n	8014308 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80142b0:	4a17      	ldr	r2, [pc, #92]	; (8014310 <f_mount+0x88>)
 80142b2:	69fb      	ldr	r3, [r7, #28]
 80142b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80142b8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80142ba:	69bb      	ldr	r3, [r7, #24]
 80142bc:	2b00      	cmp	r3, #0
 80142be:	d005      	beq.n	80142cc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80142c0:	69b8      	ldr	r0, [r7, #24]
 80142c2:	f7fe f80f 	bl	80122e4 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80142c6:	69bb      	ldr	r3, [r7, #24]
 80142c8:	2200      	movs	r2, #0
 80142ca:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d002      	beq.n	80142d8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80142d2:	68fb      	ldr	r3, [r7, #12]
 80142d4:	2200      	movs	r2, #0
 80142d6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80142d8:	68fa      	ldr	r2, [r7, #12]
 80142da:	490d      	ldr	r1, [pc, #52]	; (8014310 <f_mount+0x88>)
 80142dc:	69fb      	ldr	r3, [r7, #28]
 80142de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80142e2:	68fb      	ldr	r3, [r7, #12]
 80142e4:	2b00      	cmp	r3, #0
 80142e6:	d002      	beq.n	80142ee <f_mount+0x66>
 80142e8:	79fb      	ldrb	r3, [r7, #7]
 80142ea:	2b01      	cmp	r3, #1
 80142ec:	d001      	beq.n	80142f2 <f_mount+0x6a>
 80142ee:	2300      	movs	r3, #0
 80142f0:	e00a      	b.n	8014308 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80142f2:	f107 010c 	add.w	r1, r7, #12
 80142f6:	f107 0308 	add.w	r3, r7, #8
 80142fa:	2200      	movs	r2, #0
 80142fc:	4618      	mov	r0, r3
 80142fe:	f7ff fd07 	bl	8013d10 <find_volume>
 8014302:	4603      	mov	r3, r0
 8014304:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8014306:	7dfb      	ldrb	r3, [r7, #23]
}
 8014308:	4618      	mov	r0, r3
 801430a:	3720      	adds	r7, #32
 801430c:	46bd      	mov	sp, r7
 801430e:	bd80      	pop	{r7, pc}
 8014310:	20002b64 	.word	0x20002b64

08014314 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b09a      	sub	sp, #104	; 0x68
 8014318:	af00      	add	r7, sp, #0
 801431a:	60f8      	str	r0, [r7, #12]
 801431c:	60b9      	str	r1, [r7, #8]
 801431e:	4613      	mov	r3, r2
 8014320:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8014322:	68fb      	ldr	r3, [r7, #12]
 8014324:	2b00      	cmp	r3, #0
 8014326:	d101      	bne.n	801432c <f_open+0x18>
 8014328:	2309      	movs	r3, #9
 801432a:	e1bb      	b.n	80146a4 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 801432c:	79fb      	ldrb	r3, [r7, #7]
 801432e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8014332:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8014334:	79fa      	ldrb	r2, [r7, #7]
 8014336:	f107 0114 	add.w	r1, r7, #20
 801433a:	f107 0308 	add.w	r3, r7, #8
 801433e:	4618      	mov	r0, r3
 8014340:	f7ff fce6 	bl	8013d10 <find_volume>
 8014344:	4603      	mov	r3, r0
 8014346:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 801434a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801434e:	2b00      	cmp	r3, #0
 8014350:	f040 819f 	bne.w	8014692 <f_open+0x37e>
		dj.obj.fs = fs;
 8014354:	697b      	ldr	r3, [r7, #20]
 8014356:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014358:	68ba      	ldr	r2, [r7, #8]
 801435a:	f107 0318 	add.w	r3, r7, #24
 801435e:	4611      	mov	r1, r2
 8014360:	4618      	mov	r0, r3
 8014362:	f7ff fbc5 	bl	8013af0 <follow_path>
 8014366:	4603      	mov	r3, r0
 8014368:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 801436c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014370:	2b00      	cmp	r3, #0
 8014372:	d11a      	bne.n	80143aa <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8014374:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8014378:	b25b      	sxtb	r3, r3
 801437a:	2b00      	cmp	r3, #0
 801437c:	da03      	bge.n	8014386 <f_open+0x72>
				res = FR_INVALID_NAME;
 801437e:	2306      	movs	r3, #6
 8014380:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8014384:	e011      	b.n	80143aa <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014386:	79fb      	ldrb	r3, [r7, #7]
 8014388:	f023 0301 	bic.w	r3, r3, #1
 801438c:	2b00      	cmp	r3, #0
 801438e:	bf14      	ite	ne
 8014390:	2301      	movne	r3, #1
 8014392:	2300      	moveq	r3, #0
 8014394:	b2db      	uxtb	r3, r3
 8014396:	461a      	mov	r2, r3
 8014398:	f107 0318 	add.w	r3, r7, #24
 801439c:	4611      	mov	r1, r2
 801439e:	4618      	mov	r0, r3
 80143a0:	f7fd fe58 	bl	8012054 <chk_lock>
 80143a4:	4603      	mov	r3, r0
 80143a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80143aa:	79fb      	ldrb	r3, [r7, #7]
 80143ac:	f003 031c 	and.w	r3, r3, #28
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d07f      	beq.n	80144b4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80143b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80143b8:	2b00      	cmp	r3, #0
 80143ba:	d017      	beq.n	80143ec <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80143bc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80143c0:	2b04      	cmp	r3, #4
 80143c2:	d10e      	bne.n	80143e2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80143c4:	f7fd fea2 	bl	801210c <enq_lock>
 80143c8:	4603      	mov	r3, r0
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d006      	beq.n	80143dc <f_open+0xc8>
 80143ce:	f107 0318 	add.w	r3, r7, #24
 80143d2:	4618      	mov	r0, r3
 80143d4:	f7fe fffe 	bl	80133d4 <dir_register>
 80143d8:	4603      	mov	r3, r0
 80143da:	e000      	b.n	80143de <f_open+0xca>
 80143dc:	2312      	movs	r3, #18
 80143de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80143e2:	79fb      	ldrb	r3, [r7, #7]
 80143e4:	f043 0308 	orr.w	r3, r3, #8
 80143e8:	71fb      	strb	r3, [r7, #7]
 80143ea:	e010      	b.n	801440e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80143ec:	7fbb      	ldrb	r3, [r7, #30]
 80143ee:	f003 0311 	and.w	r3, r3, #17
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	d003      	beq.n	80143fe <f_open+0xea>
					res = FR_DENIED;
 80143f6:	2307      	movs	r3, #7
 80143f8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80143fc:	e007      	b.n	801440e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80143fe:	79fb      	ldrb	r3, [r7, #7]
 8014400:	f003 0304 	and.w	r3, r3, #4
 8014404:	2b00      	cmp	r3, #0
 8014406:	d002      	beq.n	801440e <f_open+0xfa>
 8014408:	2308      	movs	r3, #8
 801440a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801440e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014412:	2b00      	cmp	r3, #0
 8014414:	d168      	bne.n	80144e8 <f_open+0x1d4>
 8014416:	79fb      	ldrb	r3, [r7, #7]
 8014418:	f003 0308 	and.w	r3, r3, #8
 801441c:	2b00      	cmp	r3, #0
 801441e:	d063      	beq.n	80144e8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8014420:	f7f9 fb20 	bl	800da64 <get_fattime>
 8014424:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8014426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014428:	330e      	adds	r3, #14
 801442a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801442c:	4618      	mov	r0, r3
 801442e:	f7fd fd67 	bl	8011f00 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8014432:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014434:	3316      	adds	r3, #22
 8014436:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8014438:	4618      	mov	r0, r3
 801443a:	f7fd fd61 	bl	8011f00 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801443e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014440:	330b      	adds	r3, #11
 8014442:	2220      	movs	r2, #32
 8014444:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8014446:	697b      	ldr	r3, [r7, #20]
 8014448:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801444a:	4611      	mov	r1, r2
 801444c:	4618      	mov	r0, r3
 801444e:	f7fe fd39 	bl	8012ec4 <ld_clust>
 8014452:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8014454:	697b      	ldr	r3, [r7, #20]
 8014456:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014458:	2200      	movs	r2, #0
 801445a:	4618      	mov	r0, r3
 801445c:	f7fe fd51 	bl	8012f02 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8014460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014462:	331c      	adds	r3, #28
 8014464:	2100      	movs	r1, #0
 8014466:	4618      	mov	r0, r3
 8014468:	f7fd fd4a 	bl	8011f00 <st_dword>
					fs->wflag = 1;
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	2201      	movs	r2, #1
 8014470:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8014472:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8014474:	2b00      	cmp	r3, #0
 8014476:	d037      	beq.n	80144e8 <f_open+0x1d4>
						dw = fs->winsect;
 8014478:	697b      	ldr	r3, [r7, #20]
 801447a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801447c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801447e:	f107 0318 	add.w	r3, r7, #24
 8014482:	2200      	movs	r2, #0
 8014484:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8014486:	4618      	mov	r0, r3
 8014488:	f7fe fa41 	bl	801290e <remove_chain>
 801448c:	4603      	mov	r3, r0
 801448e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8014492:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014496:	2b00      	cmp	r3, #0
 8014498:	d126      	bne.n	80144e8 <f_open+0x1d4>
							res = move_window(fs, dw);
 801449a:	697b      	ldr	r3, [r7, #20]
 801449c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801449e:	4618      	mov	r0, r3
 80144a0:	f7fd ff88 	bl	80123b4 <move_window>
 80144a4:	4603      	mov	r3, r0
 80144a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80144aa:	697b      	ldr	r3, [r7, #20]
 80144ac:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80144ae:	3a01      	subs	r2, #1
 80144b0:	615a      	str	r2, [r3, #20]
 80144b2:	e019      	b.n	80144e8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80144b4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80144b8:	2b00      	cmp	r3, #0
 80144ba:	d115      	bne.n	80144e8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80144bc:	7fbb      	ldrb	r3, [r7, #30]
 80144be:	f003 0310 	and.w	r3, r3, #16
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d003      	beq.n	80144ce <f_open+0x1ba>
					res = FR_NO_FILE;
 80144c6:	2304      	movs	r3, #4
 80144c8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80144cc:	e00c      	b.n	80144e8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80144ce:	79fb      	ldrb	r3, [r7, #7]
 80144d0:	f003 0302 	and.w	r3, r3, #2
 80144d4:	2b00      	cmp	r3, #0
 80144d6:	d007      	beq.n	80144e8 <f_open+0x1d4>
 80144d8:	7fbb      	ldrb	r3, [r7, #30]
 80144da:	f003 0301 	and.w	r3, r3, #1
 80144de:	2b00      	cmp	r3, #0
 80144e0:	d002      	beq.n	80144e8 <f_open+0x1d4>
						res = FR_DENIED;
 80144e2:	2307      	movs	r3, #7
 80144e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80144e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80144ec:	2b00      	cmp	r3, #0
 80144ee:	d128      	bne.n	8014542 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80144f0:	79fb      	ldrb	r3, [r7, #7]
 80144f2:	f003 0308 	and.w	r3, r3, #8
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d003      	beq.n	8014502 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80144fa:	79fb      	ldrb	r3, [r7, #7]
 80144fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014500:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8014502:	697b      	ldr	r3, [r7, #20]
 8014504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014506:	68fb      	ldr	r3, [r7, #12]
 8014508:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 801450a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801450c:	68fb      	ldr	r3, [r7, #12]
 801450e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8014510:	79fb      	ldrb	r3, [r7, #7]
 8014512:	f023 0301 	bic.w	r3, r3, #1
 8014516:	2b00      	cmp	r3, #0
 8014518:	bf14      	ite	ne
 801451a:	2301      	movne	r3, #1
 801451c:	2300      	moveq	r3, #0
 801451e:	b2db      	uxtb	r3, r3
 8014520:	461a      	mov	r2, r3
 8014522:	f107 0318 	add.w	r3, r7, #24
 8014526:	4611      	mov	r1, r2
 8014528:	4618      	mov	r0, r3
 801452a:	f7fd fe11 	bl	8012150 <inc_lock>
 801452e:	4602      	mov	r2, r0
 8014530:	68fb      	ldr	r3, [r7, #12]
 8014532:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8014534:	68fb      	ldr	r3, [r7, #12]
 8014536:	691b      	ldr	r3, [r3, #16]
 8014538:	2b00      	cmp	r3, #0
 801453a:	d102      	bne.n	8014542 <f_open+0x22e>
 801453c:	2302      	movs	r3, #2
 801453e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8014542:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014546:	2b00      	cmp	r3, #0
 8014548:	f040 80a3 	bne.w	8014692 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8014550:	4611      	mov	r1, r2
 8014552:	4618      	mov	r0, r3
 8014554:	f7fe fcb6 	bl	8012ec4 <ld_clust>
 8014558:	4602      	mov	r2, r0
 801455a:	68fb      	ldr	r3, [r7, #12]
 801455c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 801455e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014560:	331c      	adds	r3, #28
 8014562:	4618      	mov	r0, r3
 8014564:	f7fd fc8e 	bl	8011e84 <ld_dword>
 8014568:	4602      	mov	r2, r0
 801456a:	68fb      	ldr	r3, [r7, #12]
 801456c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801456e:	68fb      	ldr	r3, [r7, #12]
 8014570:	2200      	movs	r2, #0
 8014572:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8014574:	697a      	ldr	r2, [r7, #20]
 8014576:	68fb      	ldr	r3, [r7, #12]
 8014578:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 801457a:	697b      	ldr	r3, [r7, #20]
 801457c:	88da      	ldrh	r2, [r3, #6]
 801457e:	68fb      	ldr	r3, [r7, #12]
 8014580:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8014582:	68fb      	ldr	r3, [r7, #12]
 8014584:	79fa      	ldrb	r2, [r7, #7]
 8014586:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8014588:	68fb      	ldr	r3, [r7, #12]
 801458a:	2200      	movs	r2, #0
 801458c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801458e:	68fb      	ldr	r3, [r7, #12]
 8014590:	2200      	movs	r2, #0
 8014592:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	2200      	movs	r2, #0
 8014598:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	3330      	adds	r3, #48	; 0x30
 801459e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80145a2:	2100      	movs	r1, #0
 80145a4:	4618      	mov	r0, r3
 80145a6:	f7fd fcf8 	bl	8011f9a <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80145aa:	79fb      	ldrb	r3, [r7, #7]
 80145ac:	f003 0320 	and.w	r3, r3, #32
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d06e      	beq.n	8014692 <f_open+0x37e>
 80145b4:	68fb      	ldr	r3, [r7, #12]
 80145b6:	68db      	ldr	r3, [r3, #12]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d06a      	beq.n	8014692 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 80145bc:	68fb      	ldr	r3, [r7, #12]
 80145be:	68da      	ldr	r2, [r3, #12]
 80145c0:	68fb      	ldr	r3, [r7, #12]
 80145c2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 80145c4:	697b      	ldr	r3, [r7, #20]
 80145c6:	895b      	ldrh	r3, [r3, #10]
 80145c8:	461a      	mov	r2, r3
 80145ca:	697b      	ldr	r3, [r7, #20]
 80145cc:	899b      	ldrh	r3, [r3, #12]
 80145ce:	fb02 f303 	mul.w	r3, r2, r3
 80145d2:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 80145d4:	68fb      	ldr	r3, [r7, #12]
 80145d6:	689b      	ldr	r3, [r3, #8]
 80145d8:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 80145da:	68fb      	ldr	r3, [r7, #12]
 80145dc:	68db      	ldr	r3, [r3, #12]
 80145de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80145e0:	e016      	b.n	8014610 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 80145e2:	68fb      	ldr	r3, [r7, #12]
 80145e4:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80145e6:	4618      	mov	r0, r3
 80145e8:	f7fd ffa1 	bl	801252e <get_fat>
 80145ec:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 80145ee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80145f0:	2b01      	cmp	r3, #1
 80145f2:	d802      	bhi.n	80145fa <f_open+0x2e6>
 80145f4:	2302      	movs	r3, #2
 80145f6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 80145fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80145fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014600:	d102      	bne.n	8014608 <f_open+0x2f4>
 8014602:	2301      	movs	r3, #1
 8014604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8014608:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801460a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801460c:	1ad3      	subs	r3, r2, r3
 801460e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8014610:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014614:	2b00      	cmp	r3, #0
 8014616:	d103      	bne.n	8014620 <f_open+0x30c>
 8014618:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801461a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801461c:	429a      	cmp	r2, r3
 801461e:	d8e0      	bhi.n	80145e2 <f_open+0x2ce>
				}
				fp->clust = clst;
 8014620:	68fb      	ldr	r3, [r7, #12]
 8014622:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014624:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8014626:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801462a:	2b00      	cmp	r3, #0
 801462c:	d131      	bne.n	8014692 <f_open+0x37e>
 801462e:	697b      	ldr	r3, [r7, #20]
 8014630:	899b      	ldrh	r3, [r3, #12]
 8014632:	461a      	mov	r2, r3
 8014634:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014636:	fbb3 f1f2 	udiv	r1, r3, r2
 801463a:	fb01 f202 	mul.w	r2, r1, r2
 801463e:	1a9b      	subs	r3, r3, r2
 8014640:	2b00      	cmp	r3, #0
 8014642:	d026      	beq.n	8014692 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8014648:	4618      	mov	r0, r3
 801464a:	f7fd ff51 	bl	80124f0 <clust2sect>
 801464e:	64f8      	str	r0, [r7, #76]	; 0x4c
 8014650:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014652:	2b00      	cmp	r3, #0
 8014654:	d103      	bne.n	801465e <f_open+0x34a>
						res = FR_INT_ERR;
 8014656:	2302      	movs	r3, #2
 8014658:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 801465c:	e019      	b.n	8014692 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 801465e:	697b      	ldr	r3, [r7, #20]
 8014660:	899b      	ldrh	r3, [r3, #12]
 8014662:	461a      	mov	r2, r3
 8014664:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014666:	fbb3 f2f2 	udiv	r2, r3, r2
 801466a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801466c:	441a      	add	r2, r3
 801466e:	68fb      	ldr	r3, [r7, #12]
 8014670:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8014672:	697b      	ldr	r3, [r7, #20]
 8014674:	7858      	ldrb	r0, [r3, #1]
 8014676:	68fb      	ldr	r3, [r7, #12]
 8014678:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801467c:	68fb      	ldr	r3, [r7, #12]
 801467e:	6a1a      	ldr	r2, [r3, #32]
 8014680:	2301      	movs	r3, #1
 8014682:	f7fd fb89 	bl	8011d98 <disk_read>
 8014686:	4603      	mov	r3, r0
 8014688:	2b00      	cmp	r3, #0
 801468a:	d002      	beq.n	8014692 <f_open+0x37e>
 801468c:	2301      	movs	r3, #1
 801468e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8014692:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8014696:	2b00      	cmp	r3, #0
 8014698:	d002      	beq.n	80146a0 <f_open+0x38c>
 801469a:	68fb      	ldr	r3, [r7, #12]
 801469c:	2200      	movs	r2, #0
 801469e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80146a0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	3768      	adds	r7, #104	; 0x68
 80146a8:	46bd      	mov	sp, r7
 80146aa:	bd80      	pop	{r7, pc}

080146ac <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80146ac:	b580      	push	{r7, lr}
 80146ae:	b08e      	sub	sp, #56	; 0x38
 80146b0:	af00      	add	r7, sp, #0
 80146b2:	60f8      	str	r0, [r7, #12]
 80146b4:	60b9      	str	r1, [r7, #8]
 80146b6:	607a      	str	r2, [r7, #4]
 80146b8:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 80146ba:	68bb      	ldr	r3, [r7, #8]
 80146bc:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 80146be:	683b      	ldr	r3, [r7, #0]
 80146c0:	2200      	movs	r2, #0
 80146c2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 80146c4:	68fb      	ldr	r3, [r7, #12]
 80146c6:	f107 0214 	add.w	r2, r7, #20
 80146ca:	4611      	mov	r1, r2
 80146cc:	4618      	mov	r0, r3
 80146ce:	f7ff fda5 	bl	801421c <validate>
 80146d2:	4603      	mov	r3, r0
 80146d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80146d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d107      	bne.n	80146f0 <f_read+0x44>
 80146e0:	68fb      	ldr	r3, [r7, #12]
 80146e2:	7d5b      	ldrb	r3, [r3, #21]
 80146e4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 80146e8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146ec:	2b00      	cmp	r3, #0
 80146ee:	d002      	beq.n	80146f6 <f_read+0x4a>
 80146f0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80146f4:	e135      	b.n	8014962 <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 80146f6:	68fb      	ldr	r3, [r7, #12]
 80146f8:	7d1b      	ldrb	r3, [r3, #20]
 80146fa:	f003 0301 	and.w	r3, r3, #1
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d101      	bne.n	8014706 <f_read+0x5a>
 8014702:	2307      	movs	r3, #7
 8014704:	e12d      	b.n	8014962 <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8014706:	68fb      	ldr	r3, [r7, #12]
 8014708:	68da      	ldr	r2, [r3, #12]
 801470a:	68fb      	ldr	r3, [r7, #12]
 801470c:	699b      	ldr	r3, [r3, #24]
 801470e:	1ad3      	subs	r3, r2, r3
 8014710:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8014712:	687a      	ldr	r2, [r7, #4]
 8014714:	6a3b      	ldr	r3, [r7, #32]
 8014716:	429a      	cmp	r2, r3
 8014718:	f240 811e 	bls.w	8014958 <f_read+0x2ac>
 801471c:	6a3b      	ldr	r3, [r7, #32]
 801471e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8014720:	e11a      	b.n	8014958 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8014722:	68fb      	ldr	r3, [r7, #12]
 8014724:	699b      	ldr	r3, [r3, #24]
 8014726:	697a      	ldr	r2, [r7, #20]
 8014728:	8992      	ldrh	r2, [r2, #12]
 801472a:	fbb3 f1f2 	udiv	r1, r3, r2
 801472e:	fb01 f202 	mul.w	r2, r1, r2
 8014732:	1a9b      	subs	r3, r3, r2
 8014734:	2b00      	cmp	r3, #0
 8014736:	f040 80d5 	bne.w	80148e4 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	699b      	ldr	r3, [r3, #24]
 801473e:	697a      	ldr	r2, [r7, #20]
 8014740:	8992      	ldrh	r2, [r2, #12]
 8014742:	fbb3 f3f2 	udiv	r3, r3, r2
 8014746:	697a      	ldr	r2, [r7, #20]
 8014748:	8952      	ldrh	r2, [r2, #10]
 801474a:	3a01      	subs	r2, #1
 801474c:	4013      	ands	r3, r2
 801474e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8014750:	69fb      	ldr	r3, [r7, #28]
 8014752:	2b00      	cmp	r3, #0
 8014754:	d12f      	bne.n	80147b6 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	699b      	ldr	r3, [r3, #24]
 801475a:	2b00      	cmp	r3, #0
 801475c:	d103      	bne.n	8014766 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 801475e:	68fb      	ldr	r3, [r7, #12]
 8014760:	689b      	ldr	r3, [r3, #8]
 8014762:	633b      	str	r3, [r7, #48]	; 0x30
 8014764:	e013      	b.n	801478e <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8014766:	68fb      	ldr	r3, [r7, #12]
 8014768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801476a:	2b00      	cmp	r3, #0
 801476c:	d007      	beq.n	801477e <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 801476e:	68fb      	ldr	r3, [r7, #12]
 8014770:	699b      	ldr	r3, [r3, #24]
 8014772:	4619      	mov	r1, r3
 8014774:	68f8      	ldr	r0, [r7, #12]
 8014776:	f7fe f9c7 	bl	8012b08 <clmt_clust>
 801477a:	6338      	str	r0, [r7, #48]	; 0x30
 801477c:	e007      	b.n	801478e <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 801477e:	68fa      	ldr	r2, [r7, #12]
 8014780:	68fb      	ldr	r3, [r7, #12]
 8014782:	69db      	ldr	r3, [r3, #28]
 8014784:	4619      	mov	r1, r3
 8014786:	4610      	mov	r0, r2
 8014788:	f7fd fed1 	bl	801252e <get_fat>
 801478c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 801478e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014790:	2b01      	cmp	r3, #1
 8014792:	d804      	bhi.n	801479e <f_read+0xf2>
 8014794:	68fb      	ldr	r3, [r7, #12]
 8014796:	2202      	movs	r2, #2
 8014798:	755a      	strb	r2, [r3, #21]
 801479a:	2302      	movs	r3, #2
 801479c:	e0e1      	b.n	8014962 <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 801479e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80147a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80147a4:	d104      	bne.n	80147b0 <f_read+0x104>
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	2201      	movs	r2, #1
 80147aa:	755a      	strb	r2, [r3, #21]
 80147ac:	2301      	movs	r3, #1
 80147ae:	e0d8      	b.n	8014962 <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80147b0:	68fb      	ldr	r3, [r7, #12]
 80147b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80147b4:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80147b6:	697a      	ldr	r2, [r7, #20]
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	69db      	ldr	r3, [r3, #28]
 80147bc:	4619      	mov	r1, r3
 80147be:	4610      	mov	r0, r2
 80147c0:	f7fd fe96 	bl	80124f0 <clust2sect>
 80147c4:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80147c6:	69bb      	ldr	r3, [r7, #24]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	d104      	bne.n	80147d6 <f_read+0x12a>
 80147cc:	68fb      	ldr	r3, [r7, #12]
 80147ce:	2202      	movs	r2, #2
 80147d0:	755a      	strb	r2, [r3, #21]
 80147d2:	2302      	movs	r3, #2
 80147d4:	e0c5      	b.n	8014962 <f_read+0x2b6>
			sect += csect;
 80147d6:	69ba      	ldr	r2, [r7, #24]
 80147d8:	69fb      	ldr	r3, [r7, #28]
 80147da:	4413      	add	r3, r2
 80147dc:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 80147de:	697b      	ldr	r3, [r7, #20]
 80147e0:	899b      	ldrh	r3, [r3, #12]
 80147e2:	461a      	mov	r2, r3
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80147ea:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 80147ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147ee:	2b00      	cmp	r3, #0
 80147f0:	d041      	beq.n	8014876 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80147f2:	69fa      	ldr	r2, [r7, #28]
 80147f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80147f6:	4413      	add	r3, r2
 80147f8:	697a      	ldr	r2, [r7, #20]
 80147fa:	8952      	ldrh	r2, [r2, #10]
 80147fc:	4293      	cmp	r3, r2
 80147fe:	d905      	bls.n	801480c <f_read+0x160>
					cc = fs->csize - csect;
 8014800:	697b      	ldr	r3, [r7, #20]
 8014802:	895b      	ldrh	r3, [r3, #10]
 8014804:	461a      	mov	r2, r3
 8014806:	69fb      	ldr	r3, [r7, #28]
 8014808:	1ad3      	subs	r3, r2, r3
 801480a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801480c:	697b      	ldr	r3, [r7, #20]
 801480e:	7858      	ldrb	r0, [r3, #1]
 8014810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014812:	69ba      	ldr	r2, [r7, #24]
 8014814:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014816:	f7fd fabf 	bl	8011d98 <disk_read>
 801481a:	4603      	mov	r3, r0
 801481c:	2b00      	cmp	r3, #0
 801481e:	d004      	beq.n	801482a <f_read+0x17e>
 8014820:	68fb      	ldr	r3, [r7, #12]
 8014822:	2201      	movs	r2, #1
 8014824:	755a      	strb	r2, [r3, #21]
 8014826:	2301      	movs	r3, #1
 8014828:	e09b      	b.n	8014962 <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 801482a:	68fb      	ldr	r3, [r7, #12]
 801482c:	7d1b      	ldrb	r3, [r3, #20]
 801482e:	b25b      	sxtb	r3, r3
 8014830:	2b00      	cmp	r3, #0
 8014832:	da18      	bge.n	8014866 <f_read+0x1ba>
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	6a1a      	ldr	r2, [r3, #32]
 8014838:	69bb      	ldr	r3, [r7, #24]
 801483a:	1ad3      	subs	r3, r2, r3
 801483c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801483e:	429a      	cmp	r2, r3
 8014840:	d911      	bls.n	8014866 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	6a1a      	ldr	r2, [r3, #32]
 8014846:	69bb      	ldr	r3, [r7, #24]
 8014848:	1ad3      	subs	r3, r2, r3
 801484a:	697a      	ldr	r2, [r7, #20]
 801484c:	8992      	ldrh	r2, [r2, #12]
 801484e:	fb02 f303 	mul.w	r3, r2, r3
 8014852:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014854:	18d0      	adds	r0, r2, r3
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	f103 0130 	add.w	r1, r3, #48	; 0x30
 801485c:	697b      	ldr	r3, [r7, #20]
 801485e:	899b      	ldrh	r3, [r3, #12]
 8014860:	461a      	mov	r2, r3
 8014862:	f7fd fb79 	bl	8011f58 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	899b      	ldrh	r3, [r3, #12]
 801486a:	461a      	mov	r2, r3
 801486c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801486e:	fb02 f303 	mul.w	r3, r2, r3
 8014872:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8014874:	e05c      	b.n	8014930 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	6a1b      	ldr	r3, [r3, #32]
 801487a:	69ba      	ldr	r2, [r7, #24]
 801487c:	429a      	cmp	r2, r3
 801487e:	d02e      	beq.n	80148de <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	7d1b      	ldrb	r3, [r3, #20]
 8014884:	b25b      	sxtb	r3, r3
 8014886:	2b00      	cmp	r3, #0
 8014888:	da18      	bge.n	80148bc <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 801488a:	697b      	ldr	r3, [r7, #20]
 801488c:	7858      	ldrb	r0, [r3, #1]
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014894:	68fb      	ldr	r3, [r7, #12]
 8014896:	6a1a      	ldr	r2, [r3, #32]
 8014898:	2301      	movs	r3, #1
 801489a:	f7fd fa9d 	bl	8011dd8 <disk_write>
 801489e:	4603      	mov	r3, r0
 80148a0:	2b00      	cmp	r3, #0
 80148a2:	d004      	beq.n	80148ae <f_read+0x202>
 80148a4:	68fb      	ldr	r3, [r7, #12]
 80148a6:	2201      	movs	r2, #1
 80148a8:	755a      	strb	r2, [r3, #21]
 80148aa:	2301      	movs	r3, #1
 80148ac:	e059      	b.n	8014962 <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80148ae:	68fb      	ldr	r3, [r7, #12]
 80148b0:	7d1b      	ldrb	r3, [r3, #20]
 80148b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80148b6:	b2da      	uxtb	r2, r3
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 80148bc:	697b      	ldr	r3, [r7, #20]
 80148be:	7858      	ldrb	r0, [r3, #1]
 80148c0:	68fb      	ldr	r3, [r7, #12]
 80148c2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80148c6:	2301      	movs	r3, #1
 80148c8:	69ba      	ldr	r2, [r7, #24]
 80148ca:	f7fd fa65 	bl	8011d98 <disk_read>
 80148ce:	4603      	mov	r3, r0
 80148d0:	2b00      	cmp	r3, #0
 80148d2:	d004      	beq.n	80148de <f_read+0x232>
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	2201      	movs	r2, #1
 80148d8:	755a      	strb	r2, [r3, #21]
 80148da:	2301      	movs	r3, #1
 80148dc:	e041      	b.n	8014962 <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80148de:	68fb      	ldr	r3, [r7, #12]
 80148e0:	69ba      	ldr	r2, [r7, #24]
 80148e2:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80148e4:	697b      	ldr	r3, [r7, #20]
 80148e6:	899b      	ldrh	r3, [r3, #12]
 80148e8:	4618      	mov	r0, r3
 80148ea:	68fb      	ldr	r3, [r7, #12]
 80148ec:	699b      	ldr	r3, [r3, #24]
 80148ee:	697a      	ldr	r2, [r7, #20]
 80148f0:	8992      	ldrh	r2, [r2, #12]
 80148f2:	fbb3 f1f2 	udiv	r1, r3, r2
 80148f6:	fb01 f202 	mul.w	r2, r1, r2
 80148fa:	1a9b      	subs	r3, r3, r2
 80148fc:	1ac3      	subs	r3, r0, r3
 80148fe:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8014900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	429a      	cmp	r2, r3
 8014906:	d901      	bls.n	801490c <f_read+0x260>
 8014908:	687b      	ldr	r3, [r7, #4]
 801490a:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 801490c:	68fb      	ldr	r3, [r7, #12]
 801490e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8014912:	68fb      	ldr	r3, [r7, #12]
 8014914:	699b      	ldr	r3, [r3, #24]
 8014916:	697a      	ldr	r2, [r7, #20]
 8014918:	8992      	ldrh	r2, [r2, #12]
 801491a:	fbb3 f0f2 	udiv	r0, r3, r2
 801491e:	fb00 f202 	mul.w	r2, r0, r2
 8014922:	1a9b      	subs	r3, r3, r2
 8014924:	440b      	add	r3, r1
 8014926:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014928:	4619      	mov	r1, r3
 801492a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801492c:	f7fd fb14 	bl	8011f58 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8014930:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014934:	4413      	add	r3, r2
 8014936:	627b      	str	r3, [r7, #36]	; 0x24
 8014938:	68fb      	ldr	r3, [r7, #12]
 801493a:	699a      	ldr	r2, [r3, #24]
 801493c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801493e:	441a      	add	r2, r3
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	619a      	str	r2, [r3, #24]
 8014944:	683b      	ldr	r3, [r7, #0]
 8014946:	681a      	ldr	r2, [r3, #0]
 8014948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801494a:	441a      	add	r2, r3
 801494c:	683b      	ldr	r3, [r7, #0]
 801494e:	601a      	str	r2, [r3, #0]
 8014950:	687a      	ldr	r2, [r7, #4]
 8014952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014954:	1ad3      	subs	r3, r2, r3
 8014956:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	2b00      	cmp	r3, #0
 801495c:	f47f aee1 	bne.w	8014722 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8014960:	2300      	movs	r3, #0
}
 8014962:	4618      	mov	r0, r3
 8014964:	3738      	adds	r7, #56	; 0x38
 8014966:	46bd      	mov	sp, r7
 8014968:	bd80      	pop	{r7, pc}

0801496a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 801496a:	b580      	push	{r7, lr}
 801496c:	b086      	sub	sp, #24
 801496e:	af00      	add	r7, sp, #0
 8014970:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	f107 0208 	add.w	r2, r7, #8
 8014978:	4611      	mov	r1, r2
 801497a:	4618      	mov	r0, r3
 801497c:	f7ff fc4e 	bl	801421c <validate>
 8014980:	4603      	mov	r3, r0
 8014982:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8014984:	7dfb      	ldrb	r3, [r7, #23]
 8014986:	2b00      	cmp	r3, #0
 8014988:	d168      	bne.n	8014a5c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	7d1b      	ldrb	r3, [r3, #20]
 801498e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014992:	2b00      	cmp	r3, #0
 8014994:	d062      	beq.n	8014a5c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	7d1b      	ldrb	r3, [r3, #20]
 801499a:	b25b      	sxtb	r3, r3
 801499c:	2b00      	cmp	r3, #0
 801499e:	da15      	bge.n	80149cc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80149a0:	68bb      	ldr	r3, [r7, #8]
 80149a2:	7858      	ldrb	r0, [r3, #1]
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80149aa:	687b      	ldr	r3, [r7, #4]
 80149ac:	6a1a      	ldr	r2, [r3, #32]
 80149ae:	2301      	movs	r3, #1
 80149b0:	f7fd fa12 	bl	8011dd8 <disk_write>
 80149b4:	4603      	mov	r3, r0
 80149b6:	2b00      	cmp	r3, #0
 80149b8:	d001      	beq.n	80149be <f_sync+0x54>
 80149ba:	2301      	movs	r3, #1
 80149bc:	e04f      	b.n	8014a5e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80149be:	687b      	ldr	r3, [r7, #4]
 80149c0:	7d1b      	ldrb	r3, [r3, #20]
 80149c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80149c6:	b2da      	uxtb	r2, r3
 80149c8:	687b      	ldr	r3, [r7, #4]
 80149ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80149cc:	f7f9 f84a 	bl	800da64 <get_fattime>
 80149d0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80149d2:	68ba      	ldr	r2, [r7, #8]
 80149d4:	687b      	ldr	r3, [r7, #4]
 80149d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80149d8:	4619      	mov	r1, r3
 80149da:	4610      	mov	r0, r2
 80149dc:	f7fd fcea 	bl	80123b4 <move_window>
 80149e0:	4603      	mov	r3, r0
 80149e2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80149e4:	7dfb      	ldrb	r3, [r7, #23]
 80149e6:	2b00      	cmp	r3, #0
 80149e8:	d138      	bne.n	8014a5c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80149ea:	687b      	ldr	r3, [r7, #4]
 80149ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80149ee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	330b      	adds	r3, #11
 80149f4:	781a      	ldrb	r2, [r3, #0]
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	330b      	adds	r3, #11
 80149fa:	f042 0220 	orr.w	r2, r2, #32
 80149fe:	b2d2      	uxtb	r2, r2
 8014a00:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	6818      	ldr	r0, [r3, #0]
 8014a06:	687b      	ldr	r3, [r7, #4]
 8014a08:	689b      	ldr	r3, [r3, #8]
 8014a0a:	461a      	mov	r2, r3
 8014a0c:	68f9      	ldr	r1, [r7, #12]
 8014a0e:	f7fe fa78 	bl	8012f02 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	f103 021c 	add.w	r2, r3, #28
 8014a18:	687b      	ldr	r3, [r7, #4]
 8014a1a:	68db      	ldr	r3, [r3, #12]
 8014a1c:	4619      	mov	r1, r3
 8014a1e:	4610      	mov	r0, r2
 8014a20:	f7fd fa6e 	bl	8011f00 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	3316      	adds	r3, #22
 8014a28:	6939      	ldr	r1, [r7, #16]
 8014a2a:	4618      	mov	r0, r3
 8014a2c:	f7fd fa68 	bl	8011f00 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8014a30:	68fb      	ldr	r3, [r7, #12]
 8014a32:	3312      	adds	r3, #18
 8014a34:	2100      	movs	r1, #0
 8014a36:	4618      	mov	r0, r3
 8014a38:	f7fd fa47 	bl	8011eca <st_word>
					fs->wflag = 1;
 8014a3c:	68bb      	ldr	r3, [r7, #8]
 8014a3e:	2201      	movs	r2, #1
 8014a40:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8014a42:	68bb      	ldr	r3, [r7, #8]
 8014a44:	4618      	mov	r0, r3
 8014a46:	f7fd fce3 	bl	8012410 <sync_fs>
 8014a4a:	4603      	mov	r3, r0
 8014a4c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	7d1b      	ldrb	r3, [r3, #20]
 8014a52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8014a56:	b2da      	uxtb	r2, r3
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8014a5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014a5e:	4618      	mov	r0, r3
 8014a60:	3718      	adds	r7, #24
 8014a62:	46bd      	mov	sp, r7
 8014a64:	bd80      	pop	{r7, pc}

08014a66 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8014a66:	b580      	push	{r7, lr}
 8014a68:	b084      	sub	sp, #16
 8014a6a:	af00      	add	r7, sp, #0
 8014a6c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8014a6e:	6878      	ldr	r0, [r7, #4]
 8014a70:	f7ff ff7b 	bl	801496a <f_sync>
 8014a74:	4603      	mov	r3, r0
 8014a76:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8014a78:	7bfb      	ldrb	r3, [r7, #15]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d118      	bne.n	8014ab0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	f107 0208 	add.w	r2, r7, #8
 8014a84:	4611      	mov	r1, r2
 8014a86:	4618      	mov	r0, r3
 8014a88:	f7ff fbc8 	bl	801421c <validate>
 8014a8c:	4603      	mov	r3, r0
 8014a8e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8014a90:	7bfb      	ldrb	r3, [r7, #15]
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d10c      	bne.n	8014ab0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	691b      	ldr	r3, [r3, #16]
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7fd fbe6 	bl	801226c <dec_lock>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8014aa4:	7bfb      	ldrb	r3, [r7, #15]
 8014aa6:	2b00      	cmp	r3, #0
 8014aa8:	d102      	bne.n	8014ab0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8014aaa:	687b      	ldr	r3, [r7, #4]
 8014aac:	2200      	movs	r2, #0
 8014aae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8014ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3710      	adds	r7, #16
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}

08014aba <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8014aba:	b580      	push	{r7, lr}
 8014abc:	b090      	sub	sp, #64	; 0x40
 8014abe:	af00      	add	r7, sp, #0
 8014ac0:	6078      	str	r0, [r7, #4]
 8014ac2:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 8014ac4:	f107 0108 	add.w	r1, r7, #8
 8014ac8:	1d3b      	adds	r3, r7, #4
 8014aca:	2200      	movs	r2, #0
 8014acc:	4618      	mov	r0, r3
 8014ace:	f7ff f91f 	bl	8013d10 <find_volume>
 8014ad2:	4603      	mov	r3, r0
 8014ad4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 8014ad8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014adc:	2b00      	cmp	r3, #0
 8014ade:	d11f      	bne.n	8014b20 <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8014ae0:	687a      	ldr	r2, [r7, #4]
 8014ae2:	f107 0308 	add.w	r3, r7, #8
 8014ae6:	4611      	mov	r1, r2
 8014ae8:	4618      	mov	r0, r3
 8014aea:	f7ff f801 	bl	8013af0 <follow_path>
 8014aee:	4603      	mov	r3, r0
 8014af0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 8014af4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d111      	bne.n	8014b20 <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 8014afc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8014b00:	b25b      	sxtb	r3, r3
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	da03      	bge.n	8014b0e <f_stat+0x54>
				res = FR_INVALID_NAME;
 8014b06:	2306      	movs	r3, #6
 8014b08:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8014b0c:	e008      	b.n	8014b20 <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 8014b0e:	683b      	ldr	r3, [r7, #0]
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d005      	beq.n	8014b20 <f_stat+0x66>
 8014b14:	f107 0308 	add.w	r3, r7, #8
 8014b18:	6839      	ldr	r1, [r7, #0]
 8014b1a:	4618      	mov	r0, r3
 8014b1c:	f7fe fd52 	bl	80135c4 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 8014b20:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8014b24:	4618      	mov	r0, r3
 8014b26:	3740      	adds	r7, #64	; 0x40
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}

08014b2c <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b088      	sub	sp, #32
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	60f8      	str	r0, [r7, #12]
 8014b34:	60b9      	str	r1, [r7, #8]
 8014b36:	607a      	str	r2, [r7, #4]
	int n = 0;
 8014b38:	2300      	movs	r3, #0
 8014b3a:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8014b3c:	68fb      	ldr	r3, [r7, #12]
 8014b3e:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014b40:	e01b      	b.n	8014b7a <f_gets+0x4e>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8014b42:	f107 0310 	add.w	r3, r7, #16
 8014b46:	f107 0114 	add.w	r1, r7, #20
 8014b4a:	2201      	movs	r2, #1
 8014b4c:	6878      	ldr	r0, [r7, #4]
 8014b4e:	f7ff fdad 	bl	80146ac <f_read>
		if (rc != 1) break;
 8014b52:	693b      	ldr	r3, [r7, #16]
 8014b54:	2b01      	cmp	r3, #1
 8014b56:	d116      	bne.n	8014b86 <f_gets+0x5a>
		c = s[0];
 8014b58:	7d3b      	ldrb	r3, [r7, #20]
 8014b5a:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8014b5c:	7dfb      	ldrb	r3, [r7, #23]
 8014b5e:	2b0d      	cmp	r3, #13
 8014b60:	d100      	bne.n	8014b64 <f_gets+0x38>
 8014b62:	e00a      	b.n	8014b7a <f_gets+0x4e>
		*p++ = c;
 8014b64:	69bb      	ldr	r3, [r7, #24]
 8014b66:	1c5a      	adds	r2, r3, #1
 8014b68:	61ba      	str	r2, [r7, #24]
 8014b6a:	7dfa      	ldrb	r2, [r7, #23]
 8014b6c:	701a      	strb	r2, [r3, #0]
		n++;
 8014b6e:	69fb      	ldr	r3, [r7, #28]
 8014b70:	3301      	adds	r3, #1
 8014b72:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8014b74:	7dfb      	ldrb	r3, [r7, #23]
 8014b76:	2b0a      	cmp	r3, #10
 8014b78:	d007      	beq.n	8014b8a <f_gets+0x5e>
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8014b7a:	68bb      	ldr	r3, [r7, #8]
 8014b7c:	3b01      	subs	r3, #1
 8014b7e:	69fa      	ldr	r2, [r7, #28]
 8014b80:	429a      	cmp	r2, r3
 8014b82:	dbde      	blt.n	8014b42 <f_gets+0x16>
 8014b84:	e002      	b.n	8014b8c <f_gets+0x60>
		if (rc != 1) break;
 8014b86:	bf00      	nop
 8014b88:	e000      	b.n	8014b8c <f_gets+0x60>
		if (c == '\n') break;		/* Break on EOL */
 8014b8a:	bf00      	nop
	}
	*p = 0;
 8014b8c:	69bb      	ldr	r3, [r7, #24]
 8014b8e:	2200      	movs	r2, #0
 8014b90:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8014b92:	69fb      	ldr	r3, [r7, #28]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d001      	beq.n	8014b9c <f_gets+0x70>
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	e000      	b.n	8014b9e <f_gets+0x72>
 8014b9c:	2300      	movs	r3, #0
}
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	3720      	adds	r7, #32
 8014ba2:	46bd      	mov	sp, r7
 8014ba4:	bd80      	pop	{r7, pc}
	...

08014ba8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8014ba8:	b480      	push	{r7}
 8014baa:	b087      	sub	sp, #28
 8014bac:	af00      	add	r7, sp, #0
 8014bae:	60f8      	str	r0, [r7, #12]
 8014bb0:	60b9      	str	r1, [r7, #8]
 8014bb2:	4613      	mov	r3, r2
 8014bb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8014bb6:	2301      	movs	r3, #1
 8014bb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8014bba:	2300      	movs	r3, #0
 8014bbc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8014bbe:	4b1f      	ldr	r3, [pc, #124]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014bc0:	7a5b      	ldrb	r3, [r3, #9]
 8014bc2:	b2db      	uxtb	r3, r3
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d131      	bne.n	8014c2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8014bc8:	4b1c      	ldr	r3, [pc, #112]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014bca:	7a5b      	ldrb	r3, [r3, #9]
 8014bcc:	b2db      	uxtb	r3, r3
 8014bce:	461a      	mov	r2, r3
 8014bd0:	4b1a      	ldr	r3, [pc, #104]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014bd2:	2100      	movs	r1, #0
 8014bd4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8014bd6:	4b19      	ldr	r3, [pc, #100]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014bd8:	7a5b      	ldrb	r3, [r3, #9]
 8014bda:	b2db      	uxtb	r3, r3
 8014bdc:	4a17      	ldr	r2, [pc, #92]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014bde:	009b      	lsls	r3, r3, #2
 8014be0:	4413      	add	r3, r2
 8014be2:	68fa      	ldr	r2, [r7, #12]
 8014be4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8014be6:	4b15      	ldr	r3, [pc, #84]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014be8:	7a5b      	ldrb	r3, [r3, #9]
 8014bea:	b2db      	uxtb	r3, r3
 8014bec:	461a      	mov	r2, r3
 8014bee:	4b13      	ldr	r3, [pc, #76]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014bf0:	4413      	add	r3, r2
 8014bf2:	79fa      	ldrb	r2, [r7, #7]
 8014bf4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8014bf6:	4b11      	ldr	r3, [pc, #68]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014bf8:	7a5b      	ldrb	r3, [r3, #9]
 8014bfa:	b2db      	uxtb	r3, r3
 8014bfc:	1c5a      	adds	r2, r3, #1
 8014bfe:	b2d1      	uxtb	r1, r2
 8014c00:	4a0e      	ldr	r2, [pc, #56]	; (8014c3c <FATFS_LinkDriverEx+0x94>)
 8014c02:	7251      	strb	r1, [r2, #9]
 8014c04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8014c06:	7dbb      	ldrb	r3, [r7, #22]
 8014c08:	3330      	adds	r3, #48	; 0x30
 8014c0a:	b2da      	uxtb	r2, r3
 8014c0c:	68bb      	ldr	r3, [r7, #8]
 8014c0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8014c10:	68bb      	ldr	r3, [r7, #8]
 8014c12:	3301      	adds	r3, #1
 8014c14:	223a      	movs	r2, #58	; 0x3a
 8014c16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	3302      	adds	r3, #2
 8014c1c:	222f      	movs	r2, #47	; 0x2f
 8014c1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8014c20:	68bb      	ldr	r3, [r7, #8]
 8014c22:	3303      	adds	r3, #3
 8014c24:	2200      	movs	r2, #0
 8014c26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8014c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8014c2e:	4618      	mov	r0, r3
 8014c30:	371c      	adds	r7, #28
 8014c32:	46bd      	mov	sp, r7
 8014c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c38:	4770      	bx	lr
 8014c3a:	bf00      	nop
 8014c3c:	20002d8c 	.word	0x20002d8c

08014c40 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b082      	sub	sp, #8
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
 8014c48:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8014c4a:	2200      	movs	r2, #0
 8014c4c:	6839      	ldr	r1, [r7, #0]
 8014c4e:	6878      	ldr	r0, [r7, #4]
 8014c50:	f7ff ffaa 	bl	8014ba8 <FATFS_LinkDriverEx>
 8014c54:	4603      	mov	r3, r0
}
 8014c56:	4618      	mov	r0, r3
 8014c58:	3708      	adds	r7, #8
 8014c5a:	46bd      	mov	sp, r7
 8014c5c:	bd80      	pop	{r7, pc}
	...

08014c60 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8014c60:	b480      	push	{r7}
 8014c62:	b085      	sub	sp, #20
 8014c64:	af00      	add	r7, sp, #0
 8014c66:	4603      	mov	r3, r0
 8014c68:	6039      	str	r1, [r7, #0]
 8014c6a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8014c6c:	88fb      	ldrh	r3, [r7, #6]
 8014c6e:	2b7f      	cmp	r3, #127	; 0x7f
 8014c70:	d802      	bhi.n	8014c78 <ff_convert+0x18>
		c = chr;
 8014c72:	88fb      	ldrh	r3, [r7, #6]
 8014c74:	81fb      	strh	r3, [r7, #14]
 8014c76:	e025      	b.n	8014cc4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8014c78:	683b      	ldr	r3, [r7, #0]
 8014c7a:	2b00      	cmp	r3, #0
 8014c7c:	d00b      	beq.n	8014c96 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8014c7e:	88fb      	ldrh	r3, [r7, #6]
 8014c80:	2bff      	cmp	r3, #255	; 0xff
 8014c82:	d805      	bhi.n	8014c90 <ff_convert+0x30>
 8014c84:	88fb      	ldrh	r3, [r7, #6]
 8014c86:	3b80      	subs	r3, #128	; 0x80
 8014c88:	4a12      	ldr	r2, [pc, #72]	; (8014cd4 <ff_convert+0x74>)
 8014c8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014c8e:	e000      	b.n	8014c92 <ff_convert+0x32>
 8014c90:	2300      	movs	r3, #0
 8014c92:	81fb      	strh	r3, [r7, #14]
 8014c94:	e016      	b.n	8014cc4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8014c96:	2300      	movs	r3, #0
 8014c98:	81fb      	strh	r3, [r7, #14]
 8014c9a:	e009      	b.n	8014cb0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8014c9c:	89fb      	ldrh	r3, [r7, #14]
 8014c9e:	4a0d      	ldr	r2, [pc, #52]	; (8014cd4 <ff_convert+0x74>)
 8014ca0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ca4:	88fa      	ldrh	r2, [r7, #6]
 8014ca6:	429a      	cmp	r2, r3
 8014ca8:	d006      	beq.n	8014cb8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8014caa:	89fb      	ldrh	r3, [r7, #14]
 8014cac:	3301      	adds	r3, #1
 8014cae:	81fb      	strh	r3, [r7, #14]
 8014cb0:	89fb      	ldrh	r3, [r7, #14]
 8014cb2:	2b7f      	cmp	r3, #127	; 0x7f
 8014cb4:	d9f2      	bls.n	8014c9c <ff_convert+0x3c>
 8014cb6:	e000      	b.n	8014cba <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8014cb8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8014cba:	89fb      	ldrh	r3, [r7, #14]
 8014cbc:	3380      	adds	r3, #128	; 0x80
 8014cbe:	b29b      	uxth	r3, r3
 8014cc0:	b2db      	uxtb	r3, r3
 8014cc2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8014cc4:	89fb      	ldrh	r3, [r7, #14]
}
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3714      	adds	r7, #20
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cd0:	4770      	bx	lr
 8014cd2:	bf00      	nop
 8014cd4:	08019648 	.word	0x08019648

08014cd8 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8014cd8:	b480      	push	{r7}
 8014cda:	b087      	sub	sp, #28
 8014cdc:	af00      	add	r7, sp, #0
 8014cde:	4603      	mov	r3, r0
 8014ce0:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8014ce2:	88fb      	ldrh	r3, [r7, #6]
 8014ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8014ce8:	d201      	bcs.n	8014cee <ff_wtoupper+0x16>
 8014cea:	4b3e      	ldr	r3, [pc, #248]	; (8014de4 <ff_wtoupper+0x10c>)
 8014cec:	e000      	b.n	8014cf0 <ff_wtoupper+0x18>
 8014cee:	4b3e      	ldr	r3, [pc, #248]	; (8014de8 <ff_wtoupper+0x110>)
 8014cf0:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8014cf2:	697b      	ldr	r3, [r7, #20]
 8014cf4:	1c9a      	adds	r2, r3, #2
 8014cf6:	617a      	str	r2, [r7, #20]
 8014cf8:	881b      	ldrh	r3, [r3, #0]
 8014cfa:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8014cfc:	8a7b      	ldrh	r3, [r7, #18]
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d068      	beq.n	8014dd4 <ff_wtoupper+0xfc>
 8014d02:	88fa      	ldrh	r2, [r7, #6]
 8014d04:	8a7b      	ldrh	r3, [r7, #18]
 8014d06:	429a      	cmp	r2, r3
 8014d08:	d364      	bcc.n	8014dd4 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8014d0a:	697b      	ldr	r3, [r7, #20]
 8014d0c:	1c9a      	adds	r2, r3, #2
 8014d0e:	617a      	str	r2, [r7, #20]
 8014d10:	881b      	ldrh	r3, [r3, #0]
 8014d12:	823b      	strh	r3, [r7, #16]
 8014d14:	8a3b      	ldrh	r3, [r7, #16]
 8014d16:	0a1b      	lsrs	r3, r3, #8
 8014d18:	81fb      	strh	r3, [r7, #14]
 8014d1a:	8a3b      	ldrh	r3, [r7, #16]
 8014d1c:	b2db      	uxtb	r3, r3
 8014d1e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8014d20:	88fa      	ldrh	r2, [r7, #6]
 8014d22:	8a79      	ldrh	r1, [r7, #18]
 8014d24:	8a3b      	ldrh	r3, [r7, #16]
 8014d26:	440b      	add	r3, r1
 8014d28:	429a      	cmp	r2, r3
 8014d2a:	da49      	bge.n	8014dc0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8014d2c:	89fb      	ldrh	r3, [r7, #14]
 8014d2e:	2b08      	cmp	r3, #8
 8014d30:	d84f      	bhi.n	8014dd2 <ff_wtoupper+0xfa>
 8014d32:	a201      	add	r2, pc, #4	; (adr r2, 8014d38 <ff_wtoupper+0x60>)
 8014d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014d38:	08014d5d 	.word	0x08014d5d
 8014d3c:	08014d6f 	.word	0x08014d6f
 8014d40:	08014d85 	.word	0x08014d85
 8014d44:	08014d8d 	.word	0x08014d8d
 8014d48:	08014d95 	.word	0x08014d95
 8014d4c:	08014d9d 	.word	0x08014d9d
 8014d50:	08014da5 	.word	0x08014da5
 8014d54:	08014dad 	.word	0x08014dad
 8014d58:	08014db5 	.word	0x08014db5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8014d5c:	88fa      	ldrh	r2, [r7, #6]
 8014d5e:	8a7b      	ldrh	r3, [r7, #18]
 8014d60:	1ad3      	subs	r3, r2, r3
 8014d62:	005b      	lsls	r3, r3, #1
 8014d64:	697a      	ldr	r2, [r7, #20]
 8014d66:	4413      	add	r3, r2
 8014d68:	881b      	ldrh	r3, [r3, #0]
 8014d6a:	80fb      	strh	r3, [r7, #6]
 8014d6c:	e027      	b.n	8014dbe <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8014d6e:	88fa      	ldrh	r2, [r7, #6]
 8014d70:	8a7b      	ldrh	r3, [r7, #18]
 8014d72:	1ad3      	subs	r3, r2, r3
 8014d74:	b29b      	uxth	r3, r3
 8014d76:	f003 0301 	and.w	r3, r3, #1
 8014d7a:	b29b      	uxth	r3, r3
 8014d7c:	88fa      	ldrh	r2, [r7, #6]
 8014d7e:	1ad3      	subs	r3, r2, r3
 8014d80:	80fb      	strh	r3, [r7, #6]
 8014d82:	e01c      	b.n	8014dbe <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8014d84:	88fb      	ldrh	r3, [r7, #6]
 8014d86:	3b10      	subs	r3, #16
 8014d88:	80fb      	strh	r3, [r7, #6]
 8014d8a:	e018      	b.n	8014dbe <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8014d8c:	88fb      	ldrh	r3, [r7, #6]
 8014d8e:	3b20      	subs	r3, #32
 8014d90:	80fb      	strh	r3, [r7, #6]
 8014d92:	e014      	b.n	8014dbe <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8014d94:	88fb      	ldrh	r3, [r7, #6]
 8014d96:	3b30      	subs	r3, #48	; 0x30
 8014d98:	80fb      	strh	r3, [r7, #6]
 8014d9a:	e010      	b.n	8014dbe <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8014d9c:	88fb      	ldrh	r3, [r7, #6]
 8014d9e:	3b1a      	subs	r3, #26
 8014da0:	80fb      	strh	r3, [r7, #6]
 8014da2:	e00c      	b.n	8014dbe <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8014da4:	88fb      	ldrh	r3, [r7, #6]
 8014da6:	3308      	adds	r3, #8
 8014da8:	80fb      	strh	r3, [r7, #6]
 8014daa:	e008      	b.n	8014dbe <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8014dac:	88fb      	ldrh	r3, [r7, #6]
 8014dae:	3b50      	subs	r3, #80	; 0x50
 8014db0:	80fb      	strh	r3, [r7, #6]
 8014db2:	e004      	b.n	8014dbe <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8014db4:	88fb      	ldrh	r3, [r7, #6]
 8014db6:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8014dba:	80fb      	strh	r3, [r7, #6]
 8014dbc:	bf00      	nop
			}
			break;
 8014dbe:	e008      	b.n	8014dd2 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8014dc0:	89fb      	ldrh	r3, [r7, #14]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d195      	bne.n	8014cf2 <ff_wtoupper+0x1a>
 8014dc6:	8a3b      	ldrh	r3, [r7, #16]
 8014dc8:	005b      	lsls	r3, r3, #1
 8014dca:	697a      	ldr	r2, [r7, #20]
 8014dcc:	4413      	add	r3, r2
 8014dce:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8014dd0:	e78f      	b.n	8014cf2 <ff_wtoupper+0x1a>
			break;
 8014dd2:	bf00      	nop
	}

	return chr;
 8014dd4:	88fb      	ldrh	r3, [r7, #6]
}
 8014dd6:	4618      	mov	r0, r3
 8014dd8:	371c      	adds	r7, #28
 8014dda:	46bd      	mov	sp, r7
 8014ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de0:	4770      	bx	lr
 8014de2:	bf00      	nop
 8014de4:	08019748 	.word	0x08019748
 8014de8:	0801993c 	.word	0x0801993c

08014dec <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8014dec:	b580      	push	{r7, lr}
 8014dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8014df0:	2201      	movs	r2, #1
 8014df2:	4912      	ldr	r1, [pc, #72]	; (8014e3c <MX_USB_DEVICE_Init+0x50>)
 8014df4:	4812      	ldr	r0, [pc, #72]	; (8014e40 <MX_USB_DEVICE_Init+0x54>)
 8014df6:	f7f9 fc8b 	bl	800e710 <USBD_Init>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d001      	beq.n	8014e04 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8014e00:	f7ed fc66 	bl	80026d0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8014e04:	490f      	ldr	r1, [pc, #60]	; (8014e44 <MX_USB_DEVICE_Init+0x58>)
 8014e06:	480e      	ldr	r0, [pc, #56]	; (8014e40 <MX_USB_DEVICE_Init+0x54>)
 8014e08:	f7f9 fcb2 	bl	800e770 <USBD_RegisterClass>
 8014e0c:	4603      	mov	r3, r0
 8014e0e:	2b00      	cmp	r3, #0
 8014e10:	d001      	beq.n	8014e16 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8014e12:	f7ed fc5d 	bl	80026d0 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8014e16:	490c      	ldr	r1, [pc, #48]	; (8014e48 <MX_USB_DEVICE_Init+0x5c>)
 8014e18:	4809      	ldr	r0, [pc, #36]	; (8014e40 <MX_USB_DEVICE_Init+0x54>)
 8014e1a:	f7f9 fba9 	bl	800e570 <USBD_CDC_RegisterInterface>
 8014e1e:	4603      	mov	r3, r0
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d001      	beq.n	8014e28 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8014e24:	f7ed fc54 	bl	80026d0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8014e28:	4805      	ldr	r0, [pc, #20]	; (8014e40 <MX_USB_DEVICE_Init+0x54>)
 8014e2a:	f7f9 fcd7 	bl	800e7dc <USBD_Start>
 8014e2e:	4603      	mov	r3, r0
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	d001      	beq.n	8014e38 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8014e34:	f7ed fc4c 	bl	80026d0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8014e38:	bf00      	nop
 8014e3a:	bd80      	pop	{r7, pc}
 8014e3c:	200000cc 	.word	0x200000cc
 8014e40:	20002d98 	.word	0x20002d98
 8014e44:	20000018 	.word	0x20000018
 8014e48:	200000b8 	.word	0x200000b8

08014e4c <CDC_Init_HS>:
/**
 * @brief  Initializes the CDC media low layer over the USB HS IP
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Init_HS(void)
{
 8014e4c:	b580      	push	{r7, lr}
 8014e4e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 8 */
	/* Set Application Buffers */
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8014e50:	2200      	movs	r2, #0
 8014e52:	4905      	ldr	r1, [pc, #20]	; (8014e68 <CDC_Init_HS+0x1c>)
 8014e54:	4805      	ldr	r0, [pc, #20]	; (8014e6c <CDC_Init_HS+0x20>)
 8014e56:	f7f9 fba5 	bl	800e5a4 <USBD_CDC_SetTxBuffer>
	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8014e5a:	4905      	ldr	r1, [pc, #20]	; (8014e70 <CDC_Init_HS+0x24>)
 8014e5c:	4803      	ldr	r0, [pc, #12]	; (8014e6c <CDC_Init_HS+0x20>)
 8014e5e:	f7f9 fbc3 	bl	800e5e8 <USBD_CDC_SetRxBuffer>
	return (USBD_OK);
 8014e62:	2300      	movs	r3, #0
	/* USER CODE END 8 */
}
 8014e64:	4618      	mov	r0, r3
 8014e66:	bd80      	pop	{r7, pc}
 8014e68:	20003874 	.word	0x20003874
 8014e6c:	20002d98 	.word	0x20002d98
 8014e70:	20003074 	.word	0x20003074

08014e74 <CDC_DeInit_HS>:
 * @brief  DeInitializes the CDC media low layer
 * @param  None
 * @retval USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_DeInit_HS(void)
{
 8014e74:	b480      	push	{r7}
 8014e76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 9 */
	return (USBD_OK);
 8014e78:	2300      	movs	r3, #0
	/* USER CODE END 9 */
}
 8014e7a:	4618      	mov	r0, r3
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014e82:	4770      	bx	lr

08014e84 <CDC_Control_HS>:
 * @param  pbuf: Buffer containing command data (request parameters)
 * @param  length: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8014e84:	b480      	push	{r7}
 8014e86:	b083      	sub	sp, #12
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	4603      	mov	r3, r0
 8014e8c:	6039      	str	r1, [r7, #0]
 8014e8e:	71fb      	strb	r3, [r7, #7]
 8014e90:	4613      	mov	r3, r2
 8014e92:	80bb      	strh	r3, [r7, #4]
	/* USER CODE BEGIN 10 */
	switch(cmd)
 8014e94:	79fb      	ldrb	r3, [r7, #7]
 8014e96:	2b23      	cmp	r3, #35	; 0x23
 8014e98:	d84a      	bhi.n	8014f30 <CDC_Control_HS+0xac>
 8014e9a:	a201      	add	r2, pc, #4	; (adr r2, 8014ea0 <CDC_Control_HS+0x1c>)
 8014e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014ea0:	08014f31 	.word	0x08014f31
 8014ea4:	08014f31 	.word	0x08014f31
 8014ea8:	08014f31 	.word	0x08014f31
 8014eac:	08014f31 	.word	0x08014f31
 8014eb0:	08014f31 	.word	0x08014f31
 8014eb4:	08014f31 	.word	0x08014f31
 8014eb8:	08014f31 	.word	0x08014f31
 8014ebc:	08014f31 	.word	0x08014f31
 8014ec0:	08014f31 	.word	0x08014f31
 8014ec4:	08014f31 	.word	0x08014f31
 8014ec8:	08014f31 	.word	0x08014f31
 8014ecc:	08014f31 	.word	0x08014f31
 8014ed0:	08014f31 	.word	0x08014f31
 8014ed4:	08014f31 	.word	0x08014f31
 8014ed8:	08014f31 	.word	0x08014f31
 8014edc:	08014f31 	.word	0x08014f31
 8014ee0:	08014f31 	.word	0x08014f31
 8014ee4:	08014f31 	.word	0x08014f31
 8014ee8:	08014f31 	.word	0x08014f31
 8014eec:	08014f31 	.word	0x08014f31
 8014ef0:	08014f31 	.word	0x08014f31
 8014ef4:	08014f31 	.word	0x08014f31
 8014ef8:	08014f31 	.word	0x08014f31
 8014efc:	08014f31 	.word	0x08014f31
 8014f00:	08014f31 	.word	0x08014f31
 8014f04:	08014f31 	.word	0x08014f31
 8014f08:	08014f31 	.word	0x08014f31
 8014f0c:	08014f31 	.word	0x08014f31
 8014f10:	08014f31 	.word	0x08014f31
 8014f14:	08014f31 	.word	0x08014f31
 8014f18:	08014f31 	.word	0x08014f31
 8014f1c:	08014f31 	.word	0x08014f31
 8014f20:	08014f31 	.word	0x08014f31
 8014f24:	08014f31 	.word	0x08014f31
 8014f28:	08014f31 	.word	0x08014f31
 8014f2c:	08014f31 	.word	0x08014f31
	case CDC_SEND_BREAK:

		break;

	default:
		break;
 8014f30:	bf00      	nop
	}

	return (USBD_OK);
 8014f32:	2300      	movs	r3, #0
	/* USER CODE END 10 */
}
 8014f34:	4618      	mov	r0, r3
 8014f36:	370c      	adds	r7, #12
 8014f38:	46bd      	mov	sp, r7
 8014f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014f3e:	4770      	bx	lr

08014f40 <CDC_Receive_HS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8014f40:	b580      	push	{r7, lr}
 8014f42:	b082      	sub	sp, #8
 8014f44:	af00      	add	r7, sp, #0
 8014f46:	6078      	str	r0, [r7, #4]
 8014f48:	6039      	str	r1, [r7, #0]
	/* USER CODE BEGIN 11 */
	memset(usb_rx_buffer, 0x00, 1024);
 8014f4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8014f4e:	2100      	movs	r1, #0
 8014f50:	480e      	ldr	r0, [pc, #56]	; (8014f8c <CDC_Receive_HS+0x4c>)
 8014f52:	f001 f84b 	bl	8015fec <memset>
	memcpy(usb_rx_buffer, Buf, *Len);
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	681b      	ldr	r3, [r3, #0]
 8014f5a:	461a      	mov	r2, r3
 8014f5c:	6879      	ldr	r1, [r7, #4]
 8014f5e:	480b      	ldr	r0, [pc, #44]	; (8014f8c <CDC_Receive_HS+0x4c>)
 8014f60:	f001 f836 	bl	8015fd0 <memcpy>
	usb_rx_length = *Len;
 8014f64:	683b      	ldr	r3, [r7, #0]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	b29a      	uxth	r2, r3
 8014f6a:	4b09      	ldr	r3, [pc, #36]	; (8014f90 <CDC_Receive_HS+0x50>)
 8014f6c:	801a      	strh	r2, [r3, #0]
	usb_rx_ready = 1;
 8014f6e:	4b09      	ldr	r3, [pc, #36]	; (8014f94 <CDC_Receive_HS+0x54>)
 8014f70:	2201      	movs	r2, #1
 8014f72:	701a      	strb	r2, [r3, #0]

	USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8014f74:	6879      	ldr	r1, [r7, #4]
 8014f76:	4808      	ldr	r0, [pc, #32]	; (8014f98 <CDC_Receive_HS+0x58>)
 8014f78:	f7f9 fb36 	bl	800e5e8 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8014f7c:	4806      	ldr	r0, [pc, #24]	; (8014f98 <CDC_Receive_HS+0x58>)
 8014f7e:	f7f9 fb91 	bl	800e6a4 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8014f82:	2300      	movs	r3, #0
	/* USER CODE END 11 */
}
 8014f84:	4618      	mov	r0, r3
 8014f86:	3708      	adds	r7, #8
 8014f88:	46bd      	mov	sp, r7
 8014f8a:	bd80      	pop	{r7, pc}
 8014f8c:	200026e4 	.word	0x200026e4
 8014f90:	20002ae4 	.word	0x20002ae4
 8014f94:	20002ae6 	.word	0x20002ae6
 8014f98:	20002d98 	.word	0x20002d98

08014f9c <CDC_Transmit_HS>:
 * @param  Buf: Buffer of data to be sent
 * @param  Len: Number of data to be sent (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
 */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8014f9c:	b580      	push	{r7, lr}
 8014f9e:	b084      	sub	sp, #16
 8014fa0:	af00      	add	r7, sp, #0
 8014fa2:	6078      	str	r0, [r7, #4]
 8014fa4:	460b      	mov	r3, r1
 8014fa6:	807b      	strh	r3, [r7, #2]
	uint8_t result = USBD_OK;
 8014fa8:	2300      	movs	r3, #0
 8014faa:	73fb      	strb	r3, [r7, #15]
	/* USER CODE BEGIN 12 */
	USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8014fac:	4b0d      	ldr	r3, [pc, #52]	; (8014fe4 <CDC_Transmit_HS+0x48>)
 8014fae:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8014fb2:	60bb      	str	r3, [r7, #8]
	if (hcdc->TxState != 0){
 8014fb4:	68bb      	ldr	r3, [r7, #8]
 8014fb6:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d001      	beq.n	8014fc2 <CDC_Transmit_HS+0x26>
		return USBD_BUSY;
 8014fbe:	2301      	movs	r3, #1
 8014fc0:	e00b      	b.n	8014fda <CDC_Transmit_HS+0x3e>
	}
	USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8014fc2:	887b      	ldrh	r3, [r7, #2]
 8014fc4:	461a      	mov	r2, r3
 8014fc6:	6879      	ldr	r1, [r7, #4]
 8014fc8:	4806      	ldr	r0, [pc, #24]	; (8014fe4 <CDC_Transmit_HS+0x48>)
 8014fca:	f7f9 faeb 	bl	800e5a4 <USBD_CDC_SetTxBuffer>
	result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8014fce:	4805      	ldr	r0, [pc, #20]	; (8014fe4 <CDC_Transmit_HS+0x48>)
 8014fd0:	f7f9 fb28 	bl	800e624 <USBD_CDC_TransmitPacket>
 8014fd4:	4603      	mov	r3, r0
 8014fd6:	73fb      	strb	r3, [r7, #15]
	/* USER CODE END 12 */
	return result;
 8014fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	3710      	adds	r7, #16
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	20002d98 	.word	0x20002d98

08014fe8 <CDC_TransmitCplt_HS>:
 * @param  Buf: Buffer of data to be received
 * @param  Len: Number of data received (in bytes)
 * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
 */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8014fe8:	b480      	push	{r7}
 8014fea:	b087      	sub	sp, #28
 8014fec:	af00      	add	r7, sp, #0
 8014fee:	60f8      	str	r0, [r7, #12]
 8014ff0:	60b9      	str	r1, [r7, #8]
 8014ff2:	4613      	mov	r3, r2
 8014ff4:	71fb      	strb	r3, [r7, #7]
	uint8_t result = USBD_OK;
 8014ff6:	2300      	movs	r3, #0
 8014ff8:	75fb      	strb	r3, [r7, #23]
	/* USER CODE BEGIN 14 */
	UNUSED(Buf);
	UNUSED(Len);
	UNUSED(epnum);
	/* USER CODE END 14 */
	return result;
 8014ffa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014ffe:	4618      	mov	r0, r3
 8015000:	371c      	adds	r7, #28
 8015002:	46bd      	mov	sp, r7
 8015004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015008:	4770      	bx	lr
	...

0801500c <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801500c:	b480      	push	{r7}
 801500e:	b083      	sub	sp, #12
 8015010:	af00      	add	r7, sp, #0
 8015012:	4603      	mov	r3, r0
 8015014:	6039      	str	r1, [r7, #0]
 8015016:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8015018:	683b      	ldr	r3, [r7, #0]
 801501a:	2212      	movs	r2, #18
 801501c:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 801501e:	4b03      	ldr	r3, [pc, #12]	; (801502c <USBD_HS_DeviceDescriptor+0x20>)
}
 8015020:	4618      	mov	r0, r3
 8015022:	370c      	adds	r7, #12
 8015024:	46bd      	mov	sp, r7
 8015026:	f85d 7b04 	ldr.w	r7, [sp], #4
 801502a:	4770      	bx	lr
 801502c:	200000ec 	.word	0x200000ec

08015030 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015030:	b480      	push	{r7}
 8015032:	b083      	sub	sp, #12
 8015034:	af00      	add	r7, sp, #0
 8015036:	4603      	mov	r3, r0
 8015038:	6039      	str	r1, [r7, #0]
 801503a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801503c:	683b      	ldr	r3, [r7, #0]
 801503e:	2204      	movs	r2, #4
 8015040:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015042:	4b03      	ldr	r3, [pc, #12]	; (8015050 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8015044:	4618      	mov	r0, r3
 8015046:	370c      	adds	r7, #12
 8015048:	46bd      	mov	sp, r7
 801504a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801504e:	4770      	bx	lr
 8015050:	2000010c 	.word	0x2000010c

08015054 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015054:	b580      	push	{r7, lr}
 8015056:	b082      	sub	sp, #8
 8015058:	af00      	add	r7, sp, #0
 801505a:	4603      	mov	r3, r0
 801505c:	6039      	str	r1, [r7, #0]
 801505e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015060:	79fb      	ldrb	r3, [r7, #7]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d105      	bne.n	8015072 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8015066:	683a      	ldr	r2, [r7, #0]
 8015068:	4907      	ldr	r1, [pc, #28]	; (8015088 <USBD_HS_ProductStrDescriptor+0x34>)
 801506a:	4808      	ldr	r0, [pc, #32]	; (801508c <USBD_HS_ProductStrDescriptor+0x38>)
 801506c:	f7fa fd8c 	bl	800fb88 <USBD_GetString>
 8015070:	e004      	b.n	801507c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8015072:	683a      	ldr	r2, [r7, #0]
 8015074:	4904      	ldr	r1, [pc, #16]	; (8015088 <USBD_HS_ProductStrDescriptor+0x34>)
 8015076:	4805      	ldr	r0, [pc, #20]	; (801508c <USBD_HS_ProductStrDescriptor+0x38>)
 8015078:	f7fa fd86 	bl	800fb88 <USBD_GetString>
  }
  return USBD_StrDesc;
 801507c:	4b02      	ldr	r3, [pc, #8]	; (8015088 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801507e:	4618      	mov	r0, r3
 8015080:	3708      	adds	r7, #8
 8015082:	46bd      	mov	sp, r7
 8015084:	bd80      	pop	{r7, pc}
 8015086:	bf00      	nop
 8015088:	20004074 	.word	0x20004074
 801508c:	0801953c 	.word	0x0801953c

08015090 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015090:	b580      	push	{r7, lr}
 8015092:	b082      	sub	sp, #8
 8015094:	af00      	add	r7, sp, #0
 8015096:	4603      	mov	r3, r0
 8015098:	6039      	str	r1, [r7, #0]
 801509a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801509c:	683a      	ldr	r2, [r7, #0]
 801509e:	4904      	ldr	r1, [pc, #16]	; (80150b0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 80150a0:	4804      	ldr	r0, [pc, #16]	; (80150b4 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 80150a2:	f7fa fd71 	bl	800fb88 <USBD_GetString>
  return USBD_StrDesc;
 80150a6:	4b02      	ldr	r3, [pc, #8]	; (80150b0 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 80150a8:	4618      	mov	r0, r3
 80150aa:	3708      	adds	r7, #8
 80150ac:	46bd      	mov	sp, r7
 80150ae:	bd80      	pop	{r7, pc}
 80150b0:	20004074 	.word	0x20004074
 80150b4:	08019554 	.word	0x08019554

080150b8 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150b8:	b580      	push	{r7, lr}
 80150ba:	b082      	sub	sp, #8
 80150bc:	af00      	add	r7, sp, #0
 80150be:	4603      	mov	r3, r0
 80150c0:	6039      	str	r1, [r7, #0]
 80150c2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80150c4:	683b      	ldr	r3, [r7, #0]
 80150c6:	221a      	movs	r2, #26
 80150c8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80150ca:	f000 f855 	bl	8015178 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 80150ce:	4b02      	ldr	r3, [pc, #8]	; (80150d8 <USBD_HS_SerialStrDescriptor+0x20>)
}
 80150d0:	4618      	mov	r0, r3
 80150d2:	3708      	adds	r7, #8
 80150d4:	46bd      	mov	sp, r7
 80150d6:	bd80      	pop	{r7, pc}
 80150d8:	20000110 	.word	0x20000110

080150dc <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80150dc:	b580      	push	{r7, lr}
 80150de:	b082      	sub	sp, #8
 80150e0:	af00      	add	r7, sp, #0
 80150e2:	4603      	mov	r3, r0
 80150e4:	6039      	str	r1, [r7, #0]
 80150e6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80150e8:	79fb      	ldrb	r3, [r7, #7]
 80150ea:	2b00      	cmp	r3, #0
 80150ec:	d105      	bne.n	80150fa <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80150ee:	683a      	ldr	r2, [r7, #0]
 80150f0:	4907      	ldr	r1, [pc, #28]	; (8015110 <USBD_HS_ConfigStrDescriptor+0x34>)
 80150f2:	4808      	ldr	r0, [pc, #32]	; (8015114 <USBD_HS_ConfigStrDescriptor+0x38>)
 80150f4:	f7fa fd48 	bl	800fb88 <USBD_GetString>
 80150f8:	e004      	b.n	8015104 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80150fa:	683a      	ldr	r2, [r7, #0]
 80150fc:	4904      	ldr	r1, [pc, #16]	; (8015110 <USBD_HS_ConfigStrDescriptor+0x34>)
 80150fe:	4805      	ldr	r0, [pc, #20]	; (8015114 <USBD_HS_ConfigStrDescriptor+0x38>)
 8015100:	f7fa fd42 	bl	800fb88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015104:	4b02      	ldr	r3, [pc, #8]	; (8015110 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8015106:	4618      	mov	r0, r3
 8015108:	3708      	adds	r7, #8
 801510a:	46bd      	mov	sp, r7
 801510c:	bd80      	pop	{r7, pc}
 801510e:	bf00      	nop
 8015110:	20004074 	.word	0x20004074
 8015114:	08019568 	.word	0x08019568

08015118 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015118:	b580      	push	{r7, lr}
 801511a:	b082      	sub	sp, #8
 801511c:	af00      	add	r7, sp, #0
 801511e:	4603      	mov	r3, r0
 8015120:	6039      	str	r1, [r7, #0]
 8015122:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8015124:	79fb      	ldrb	r3, [r7, #7]
 8015126:	2b00      	cmp	r3, #0
 8015128:	d105      	bne.n	8015136 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801512a:	683a      	ldr	r2, [r7, #0]
 801512c:	4907      	ldr	r1, [pc, #28]	; (801514c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801512e:	4808      	ldr	r0, [pc, #32]	; (8015150 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8015130:	f7fa fd2a 	bl	800fb88 <USBD_GetString>
 8015134:	e004      	b.n	8015140 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8015136:	683a      	ldr	r2, [r7, #0]
 8015138:	4904      	ldr	r1, [pc, #16]	; (801514c <USBD_HS_InterfaceStrDescriptor+0x34>)
 801513a:	4805      	ldr	r0, [pc, #20]	; (8015150 <USBD_HS_InterfaceStrDescriptor+0x38>)
 801513c:	f7fa fd24 	bl	800fb88 <USBD_GetString>
  }
  return USBD_StrDesc;
 8015140:	4b02      	ldr	r3, [pc, #8]	; (801514c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8015142:	4618      	mov	r0, r3
 8015144:	3708      	adds	r7, #8
 8015146:	46bd      	mov	sp, r7
 8015148:	bd80      	pop	{r7, pc}
 801514a:	bf00      	nop
 801514c:	20004074 	.word	0x20004074
 8015150:	08019574 	.word	0x08019574

08015154 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015154:	b480      	push	{r7}
 8015156:	b083      	sub	sp, #12
 8015158:	af00      	add	r7, sp, #0
 801515a:	4603      	mov	r3, r0
 801515c:	6039      	str	r1, [r7, #0]
 801515e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	220c      	movs	r2, #12
 8015164:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8015166:	4b03      	ldr	r3, [pc, #12]	; (8015174 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8015168:	4618      	mov	r0, r3
 801516a:	370c      	adds	r7, #12
 801516c:	46bd      	mov	sp, r7
 801516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015172:	4770      	bx	lr
 8015174:	20000100 	.word	0x20000100

08015178 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015178:	b580      	push	{r7, lr}
 801517a:	b084      	sub	sp, #16
 801517c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801517e:	4b0f      	ldr	r3, [pc, #60]	; (80151bc <Get_SerialNum+0x44>)
 8015180:	681b      	ldr	r3, [r3, #0]
 8015182:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015184:	4b0e      	ldr	r3, [pc, #56]	; (80151c0 <Get_SerialNum+0x48>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801518a:	4b0e      	ldr	r3, [pc, #56]	; (80151c4 <Get_SerialNum+0x4c>)
 801518c:	681b      	ldr	r3, [r3, #0]
 801518e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015190:	68fa      	ldr	r2, [r7, #12]
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	4413      	add	r3, r2
 8015196:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015198:	68fb      	ldr	r3, [r7, #12]
 801519a:	2b00      	cmp	r3, #0
 801519c:	d009      	beq.n	80151b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801519e:	2208      	movs	r2, #8
 80151a0:	4909      	ldr	r1, [pc, #36]	; (80151c8 <Get_SerialNum+0x50>)
 80151a2:	68f8      	ldr	r0, [r7, #12]
 80151a4:	f000 f814 	bl	80151d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80151a8:	2204      	movs	r2, #4
 80151aa:	4908      	ldr	r1, [pc, #32]	; (80151cc <Get_SerialNum+0x54>)
 80151ac:	68b8      	ldr	r0, [r7, #8]
 80151ae:	f000 f80f 	bl	80151d0 <IntToUnicode>
  }
}
 80151b2:	bf00      	nop
 80151b4:	3710      	adds	r7, #16
 80151b6:	46bd      	mov	sp, r7
 80151b8:	bd80      	pop	{r7, pc}
 80151ba:	bf00      	nop
 80151bc:	1ff0f420 	.word	0x1ff0f420
 80151c0:	1ff0f424 	.word	0x1ff0f424
 80151c4:	1ff0f428 	.word	0x1ff0f428
 80151c8:	20000112 	.word	0x20000112
 80151cc:	20000122 	.word	0x20000122

080151d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80151d0:	b480      	push	{r7}
 80151d2:	b087      	sub	sp, #28
 80151d4:	af00      	add	r7, sp, #0
 80151d6:	60f8      	str	r0, [r7, #12]
 80151d8:	60b9      	str	r1, [r7, #8]
 80151da:	4613      	mov	r3, r2
 80151dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80151de:	2300      	movs	r3, #0
 80151e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80151e2:	2300      	movs	r3, #0
 80151e4:	75fb      	strb	r3, [r7, #23]
 80151e6:	e027      	b.n	8015238 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80151e8:	68fb      	ldr	r3, [r7, #12]
 80151ea:	0f1b      	lsrs	r3, r3, #28
 80151ec:	2b09      	cmp	r3, #9
 80151ee:	d80b      	bhi.n	8015208 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80151f0:	68fb      	ldr	r3, [r7, #12]
 80151f2:	0f1b      	lsrs	r3, r3, #28
 80151f4:	b2da      	uxtb	r2, r3
 80151f6:	7dfb      	ldrb	r3, [r7, #23]
 80151f8:	005b      	lsls	r3, r3, #1
 80151fa:	4619      	mov	r1, r3
 80151fc:	68bb      	ldr	r3, [r7, #8]
 80151fe:	440b      	add	r3, r1
 8015200:	3230      	adds	r2, #48	; 0x30
 8015202:	b2d2      	uxtb	r2, r2
 8015204:	701a      	strb	r2, [r3, #0]
 8015206:	e00a      	b.n	801521e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	0f1b      	lsrs	r3, r3, #28
 801520c:	b2da      	uxtb	r2, r3
 801520e:	7dfb      	ldrb	r3, [r7, #23]
 8015210:	005b      	lsls	r3, r3, #1
 8015212:	4619      	mov	r1, r3
 8015214:	68bb      	ldr	r3, [r7, #8]
 8015216:	440b      	add	r3, r1
 8015218:	3237      	adds	r2, #55	; 0x37
 801521a:	b2d2      	uxtb	r2, r2
 801521c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801521e:	68fb      	ldr	r3, [r7, #12]
 8015220:	011b      	lsls	r3, r3, #4
 8015222:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015224:	7dfb      	ldrb	r3, [r7, #23]
 8015226:	005b      	lsls	r3, r3, #1
 8015228:	3301      	adds	r3, #1
 801522a:	68ba      	ldr	r2, [r7, #8]
 801522c:	4413      	add	r3, r2
 801522e:	2200      	movs	r2, #0
 8015230:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015232:	7dfb      	ldrb	r3, [r7, #23]
 8015234:	3301      	adds	r3, #1
 8015236:	75fb      	strb	r3, [r7, #23]
 8015238:	7dfa      	ldrb	r2, [r7, #23]
 801523a:	79fb      	ldrb	r3, [r7, #7]
 801523c:	429a      	cmp	r2, r3
 801523e:	d3d3      	bcc.n	80151e8 <IntToUnicode+0x18>
  }
}
 8015240:	bf00      	nop
 8015242:	bf00      	nop
 8015244:	371c      	adds	r7, #28
 8015246:	46bd      	mov	sp, r7
 8015248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801524c:	4770      	bx	lr
	...

08015250 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8015250:	b580      	push	{r7, lr}
 8015252:	b0aa      	sub	sp, #168	; 0xa8
 8015254:	af00      	add	r7, sp, #0
 8015256:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8015258:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801525c:	2200      	movs	r2, #0
 801525e:	601a      	str	r2, [r3, #0]
 8015260:	605a      	str	r2, [r3, #4]
 8015262:	609a      	str	r2, [r3, #8]
 8015264:	60da      	str	r2, [r3, #12]
 8015266:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8015268:	f107 0310 	add.w	r3, r7, #16
 801526c:	2284      	movs	r2, #132	; 0x84
 801526e:	2100      	movs	r1, #0
 8015270:	4618      	mov	r0, r3
 8015272:	f000 febb 	bl	8015fec <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	4a26      	ldr	r2, [pc, #152]	; (8015314 <HAL_PCD_MspInit+0xc4>)
 801527c:	4293      	cmp	r3, r2
 801527e:	d145      	bne.n	801530c <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8015280:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015284:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8015286:	2300      	movs	r3, #0
 8015288:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801528c:	f107 0310 	add.w	r3, r7, #16
 8015290:	4618      	mov	r0, r3
 8015292:	f7f2 fcc7 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 8015296:	4603      	mov	r3, r0
 8015298:	2b00      	cmp	r3, #0
 801529a:	d001      	beq.n	80152a0 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 801529c:	f7ed fa18 	bl	80026d0 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80152a0:	4b1d      	ldr	r3, [pc, #116]	; (8015318 <HAL_PCD_MspInit+0xc8>)
 80152a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152a4:	4a1c      	ldr	r2, [pc, #112]	; (8015318 <HAL_PCD_MspInit+0xc8>)
 80152a6:	f043 0302 	orr.w	r3, r3, #2
 80152aa:	6313      	str	r3, [r2, #48]	; 0x30
 80152ac:	4b1a      	ldr	r3, [pc, #104]	; (8015318 <HAL_PCD_MspInit+0xc8>)
 80152ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152b0:	f003 0302 	and.w	r3, r3, #2
 80152b4:	60fb      	str	r3, [r7, #12]
 80152b6:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80152b8:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80152bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80152c0:	2302      	movs	r3, #2
 80152c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80152c6:	2300      	movs	r3, #0
 80152c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80152cc:	2303      	movs	r3, #3
 80152ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80152d2:	230c      	movs	r3, #12
 80152d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80152d8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80152dc:	4619      	mov	r1, r3
 80152de:	480f      	ldr	r0, [pc, #60]	; (801531c <HAL_PCD_MspInit+0xcc>)
 80152e0:	f7ee fd8e 	bl	8003e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80152e4:	4b0c      	ldr	r3, [pc, #48]	; (8015318 <HAL_PCD_MspInit+0xc8>)
 80152e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152e8:	4a0b      	ldr	r2, [pc, #44]	; (8015318 <HAL_PCD_MspInit+0xc8>)
 80152ea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80152ee:	6313      	str	r3, [r2, #48]	; 0x30
 80152f0:	4b09      	ldr	r3, [pc, #36]	; (8015318 <HAL_PCD_MspInit+0xc8>)
 80152f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80152f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80152f8:	60bb      	str	r3, [r7, #8]
 80152fa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80152fc:	2200      	movs	r2, #0
 80152fe:	2100      	movs	r1, #0
 8015300:	204d      	movs	r0, #77	; 0x4d
 8015302:	f7ee fa5c 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8015306:	204d      	movs	r0, #77	; 0x4d
 8015308:	f7ee fa75 	bl	80037f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801530c:	bf00      	nop
 801530e:	37a8      	adds	r7, #168	; 0xa8
 8015310:	46bd      	mov	sp, r7
 8015312:	bd80      	pop	{r7, pc}
 8015314:	40040000 	.word	0x40040000
 8015318:	40023800 	.word	0x40023800
 801531c:	40020400 	.word	0x40020400

08015320 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015320:	b580      	push	{r7, lr}
 8015322:	b082      	sub	sp, #8
 8015324:	af00      	add	r7, sp, #0
 8015326:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8015334:	4619      	mov	r1, r3
 8015336:	4610      	mov	r0, r2
 8015338:	f7f9 fa9d 	bl	800e876 <USBD_LL_SetupStage>
}
 801533c:	bf00      	nop
 801533e:	3708      	adds	r7, #8
 8015340:	46bd      	mov	sp, r7
 8015342:	bd80      	pop	{r7, pc}

08015344 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015344:	b580      	push	{r7, lr}
 8015346:	b082      	sub	sp, #8
 8015348:	af00      	add	r7, sp, #0
 801534a:	6078      	str	r0, [r7, #4]
 801534c:	460b      	mov	r3, r1
 801534e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8015350:	687b      	ldr	r3, [r7, #4]
 8015352:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8015356:	78fa      	ldrb	r2, [r7, #3]
 8015358:	6879      	ldr	r1, [r7, #4]
 801535a:	4613      	mov	r3, r2
 801535c:	00db      	lsls	r3, r3, #3
 801535e:	4413      	add	r3, r2
 8015360:	009b      	lsls	r3, r3, #2
 8015362:	440b      	add	r3, r1
 8015364:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8015368:	681a      	ldr	r2, [r3, #0]
 801536a:	78fb      	ldrb	r3, [r7, #3]
 801536c:	4619      	mov	r1, r3
 801536e:	f7f9 fad7 	bl	800e920 <USBD_LL_DataOutStage>
}
 8015372:	bf00      	nop
 8015374:	3708      	adds	r7, #8
 8015376:	46bd      	mov	sp, r7
 8015378:	bd80      	pop	{r7, pc}

0801537a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801537a:	b580      	push	{r7, lr}
 801537c:	b082      	sub	sp, #8
 801537e:	af00      	add	r7, sp, #0
 8015380:	6078      	str	r0, [r7, #4]
 8015382:	460b      	mov	r3, r1
 8015384:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015386:	687b      	ldr	r3, [r7, #4]
 8015388:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801538c:	78fa      	ldrb	r2, [r7, #3]
 801538e:	6879      	ldr	r1, [r7, #4]
 8015390:	4613      	mov	r3, r2
 8015392:	00db      	lsls	r3, r3, #3
 8015394:	4413      	add	r3, r2
 8015396:	009b      	lsls	r3, r3, #2
 8015398:	440b      	add	r3, r1
 801539a:	334c      	adds	r3, #76	; 0x4c
 801539c:	681a      	ldr	r2, [r3, #0]
 801539e:	78fb      	ldrb	r3, [r7, #3]
 80153a0:	4619      	mov	r1, r3
 80153a2:	f7f9 fb70 	bl	800ea86 <USBD_LL_DataInStage>
}
 80153a6:	bf00      	nop
 80153a8:	3708      	adds	r7, #8
 80153aa:	46bd      	mov	sp, r7
 80153ac:	bd80      	pop	{r7, pc}

080153ae <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153ae:	b580      	push	{r7, lr}
 80153b0:	b082      	sub	sp, #8
 80153b2:	af00      	add	r7, sp, #0
 80153b4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80153bc:	4618      	mov	r0, r3
 80153be:	f7f9 fca4 	bl	800ed0a <USBD_LL_SOF>
}
 80153c2:	bf00      	nop
 80153c4:	3708      	adds	r7, #8
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}

080153ca <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80153ca:	b580      	push	{r7, lr}
 80153cc:	b084      	sub	sp, #16
 80153ce:	af00      	add	r7, sp, #0
 80153d0:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80153d2:	2301      	movs	r3, #1
 80153d4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80153d6:	687b      	ldr	r3, [r7, #4]
 80153d8:	68db      	ldr	r3, [r3, #12]
 80153da:	2b00      	cmp	r3, #0
 80153dc:	d102      	bne.n	80153e4 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80153de:	2300      	movs	r3, #0
 80153e0:	73fb      	strb	r3, [r7, #15]
 80153e2:	e008      	b.n	80153f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80153e4:	687b      	ldr	r3, [r7, #4]
 80153e6:	68db      	ldr	r3, [r3, #12]
 80153e8:	2b02      	cmp	r3, #2
 80153ea:	d102      	bne.n	80153f2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80153ec:	2301      	movs	r3, #1
 80153ee:	73fb      	strb	r3, [r7, #15]
 80153f0:	e001      	b.n	80153f6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80153f2:	f7ed f96d 	bl	80026d0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80153f6:	687b      	ldr	r3, [r7, #4]
 80153f8:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80153fc:	7bfa      	ldrb	r2, [r7, #15]
 80153fe:	4611      	mov	r1, r2
 8015400:	4618      	mov	r0, r3
 8015402:	f7f9 fc44 	bl	800ec8e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801540c:	4618      	mov	r0, r3
 801540e:	f7f9 fbec 	bl	800ebea <USBD_LL_Reset>
}
 8015412:	bf00      	nop
 8015414:	3710      	adds	r7, #16
 8015416:	46bd      	mov	sp, r7
 8015418:	bd80      	pop	{r7, pc}
	...

0801541c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b082      	sub	sp, #8
 8015420:	af00      	add	r7, sp, #0
 8015422:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8015424:	687b      	ldr	r3, [r7, #4]
 8015426:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801542a:	4618      	mov	r0, r3
 801542c:	f7f9 fc3f 	bl	800ecae <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015438:	681b      	ldr	r3, [r3, #0]
 801543a:	687a      	ldr	r2, [r7, #4]
 801543c:	6812      	ldr	r2, [r2, #0]
 801543e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015442:	f043 0301 	orr.w	r3, r3, #1
 8015446:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6a1b      	ldr	r3, [r3, #32]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d005      	beq.n	801545c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015450:	4b04      	ldr	r3, [pc, #16]	; (8015464 <HAL_PCD_SuspendCallback+0x48>)
 8015452:	691b      	ldr	r3, [r3, #16]
 8015454:	4a03      	ldr	r2, [pc, #12]	; (8015464 <HAL_PCD_SuspendCallback+0x48>)
 8015456:	f043 0306 	orr.w	r3, r3, #6
 801545a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801545c:	bf00      	nop
 801545e:	3708      	adds	r7, #8
 8015460:	46bd      	mov	sp, r7
 8015462:	bd80      	pop	{r7, pc}
 8015464:	e000ed00 	.word	0xe000ed00

08015468 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b082      	sub	sp, #8
 801546c:	af00      	add	r7, sp, #0
 801546e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015476:	4618      	mov	r0, r3
 8015478:	f7f9 fc2f 	bl	800ecda <USBD_LL_Resume>
}
 801547c:	bf00      	nop
 801547e:	3708      	adds	r7, #8
 8015480:	46bd      	mov	sp, r7
 8015482:	bd80      	pop	{r7, pc}

08015484 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015484:	b580      	push	{r7, lr}
 8015486:	b082      	sub	sp, #8
 8015488:	af00      	add	r7, sp, #0
 801548a:	6078      	str	r0, [r7, #4]
 801548c:	460b      	mov	r3, r1
 801548e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015496:	78fa      	ldrb	r2, [r7, #3]
 8015498:	4611      	mov	r1, r2
 801549a:	4618      	mov	r0, r3
 801549c:	f7f9 fc87 	bl	800edae <USBD_LL_IsoOUTIncomplete>
}
 80154a0:	bf00      	nop
 80154a2:	3708      	adds	r7, #8
 80154a4:	46bd      	mov	sp, r7
 80154a6:	bd80      	pop	{r7, pc}

080154a8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154a8:	b580      	push	{r7, lr}
 80154aa:	b082      	sub	sp, #8
 80154ac:	af00      	add	r7, sp, #0
 80154ae:	6078      	str	r0, [r7, #4]
 80154b0:	460b      	mov	r3, r1
 80154b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80154ba:	78fa      	ldrb	r2, [r7, #3]
 80154bc:	4611      	mov	r1, r2
 80154be:	4618      	mov	r0, r3
 80154c0:	f7f9 fc43 	bl	800ed4a <USBD_LL_IsoINIncomplete>
}
 80154c4:	bf00      	nop
 80154c6:	3708      	adds	r7, #8
 80154c8:	46bd      	mov	sp, r7
 80154ca:	bd80      	pop	{r7, pc}

080154cc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154cc:	b580      	push	{r7, lr}
 80154ce:	b082      	sub	sp, #8
 80154d0:	af00      	add	r7, sp, #0
 80154d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80154da:	4618      	mov	r0, r3
 80154dc:	f7f9 fc99 	bl	800ee12 <USBD_LL_DevConnected>
}
 80154e0:	bf00      	nop
 80154e2:	3708      	adds	r7, #8
 80154e4:	46bd      	mov	sp, r7
 80154e6:	bd80      	pop	{r7, pc}

080154e8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80154e8:	b580      	push	{r7, lr}
 80154ea:	b082      	sub	sp, #8
 80154ec:	af00      	add	r7, sp, #0
 80154ee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80154f6:	4618      	mov	r0, r3
 80154f8:	f7f9 fc96 	bl	800ee28 <USBD_LL_DevDisconnected>
}
 80154fc:	bf00      	nop
 80154fe:	3708      	adds	r7, #8
 8015500:	46bd      	mov	sp, r7
 8015502:	bd80      	pop	{r7, pc}

08015504 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015504:	b580      	push	{r7, lr}
 8015506:	b082      	sub	sp, #8
 8015508:	af00      	add	r7, sp, #0
 801550a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	781b      	ldrb	r3, [r3, #0]
 8015510:	2b01      	cmp	r3, #1
 8015512:	d140      	bne.n	8015596 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8015514:	4a22      	ldr	r2, [pc, #136]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 801551c:	687b      	ldr	r3, [r7, #4]
 801551e:	4a20      	ldr	r2, [pc, #128]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015520:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8015524:	4b1e      	ldr	r3, [pc, #120]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015526:	4a1f      	ldr	r2, [pc, #124]	; (80155a4 <USBD_LL_Init+0xa0>)
 8015528:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 801552a:	4b1d      	ldr	r3, [pc, #116]	; (80155a0 <USBD_LL_Init+0x9c>)
 801552c:	2208      	movs	r2, #8
 801552e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8015530:	4b1b      	ldr	r3, [pc, #108]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015532:	2202      	movs	r2, #2
 8015534:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8015536:	4b1a      	ldr	r3, [pc, #104]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015538:	2200      	movs	r2, #0
 801553a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 801553c:	4b18      	ldr	r3, [pc, #96]	; (80155a0 <USBD_LL_Init+0x9c>)
 801553e:	2202      	movs	r2, #2
 8015540:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8015542:	4b17      	ldr	r3, [pc, #92]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015544:	2200      	movs	r2, #0
 8015546:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8015548:	4b15      	ldr	r3, [pc, #84]	; (80155a0 <USBD_LL_Init+0x9c>)
 801554a:	2200      	movs	r2, #0
 801554c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 801554e:	4b14      	ldr	r3, [pc, #80]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015550:	2200      	movs	r2, #0
 8015552:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8015554:	4b12      	ldr	r3, [pc, #72]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015556:	2200      	movs	r2, #0
 8015558:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801555a:	4b11      	ldr	r3, [pc, #68]	; (80155a0 <USBD_LL_Init+0x9c>)
 801555c:	2200      	movs	r2, #0
 801555e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8015560:	4b0f      	ldr	r3, [pc, #60]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015562:	2200      	movs	r2, #0
 8015564:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8015566:	480e      	ldr	r0, [pc, #56]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015568:	f7f0 fb7c 	bl	8005c64 <HAL_PCD_Init>
 801556c:	4603      	mov	r3, r0
 801556e:	2b00      	cmp	r3, #0
 8015570:	d001      	beq.n	8015576 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8015572:	f7ed f8ad 	bl	80026d0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8015576:	f44f 7100 	mov.w	r1, #512	; 0x200
 801557a:	4809      	ldr	r0, [pc, #36]	; (80155a0 <USBD_LL_Init+0x9c>)
 801557c:	f7f1 fdf5 	bl	800716a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8015580:	2280      	movs	r2, #128	; 0x80
 8015582:	2100      	movs	r1, #0
 8015584:	4806      	ldr	r0, [pc, #24]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015586:	f7f1 fda9 	bl	80070dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801558a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801558e:	2101      	movs	r1, #1
 8015590:	4803      	ldr	r0, [pc, #12]	; (80155a0 <USBD_LL_Init+0x9c>)
 8015592:	f7f1 fda3 	bl	80070dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8015596:	2300      	movs	r3, #0
}
 8015598:	4618      	mov	r0, r3
 801559a:	3708      	adds	r7, #8
 801559c:	46bd      	mov	sp, r7
 801559e:	bd80      	pop	{r7, pc}
 80155a0:	20004274 	.word	0x20004274
 80155a4:	40040000 	.word	0x40040000

080155a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80155a8:	b580      	push	{r7, lr}
 80155aa:	b084      	sub	sp, #16
 80155ac:	af00      	add	r7, sp, #0
 80155ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155b0:	2300      	movs	r3, #0
 80155b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155b4:	2300      	movs	r3, #0
 80155b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80155be:	4618      	mov	r0, r3
 80155c0:	f7f0 fc74 	bl	8005eac <HAL_PCD_Start>
 80155c4:	4603      	mov	r3, r0
 80155c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80155c8:	7bfb      	ldrb	r3, [r7, #15]
 80155ca:	4618      	mov	r0, r3
 80155cc:	f000 f97e 	bl	80158cc <USBD_Get_USB_Status>
 80155d0:	4603      	mov	r3, r0
 80155d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80155d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80155d6:	4618      	mov	r0, r3
 80155d8:	3710      	adds	r7, #16
 80155da:	46bd      	mov	sp, r7
 80155dc:	bd80      	pop	{r7, pc}

080155de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80155de:	b580      	push	{r7, lr}
 80155e0:	b084      	sub	sp, #16
 80155e2:	af00      	add	r7, sp, #0
 80155e4:	6078      	str	r0, [r7, #4]
 80155e6:	4608      	mov	r0, r1
 80155e8:	4611      	mov	r1, r2
 80155ea:	461a      	mov	r2, r3
 80155ec:	4603      	mov	r3, r0
 80155ee:	70fb      	strb	r3, [r7, #3]
 80155f0:	460b      	mov	r3, r1
 80155f2:	70bb      	strb	r3, [r7, #2]
 80155f4:	4613      	mov	r3, r2
 80155f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80155f8:	2300      	movs	r3, #0
 80155fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80155fc:	2300      	movs	r3, #0
 80155fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015600:	687b      	ldr	r3, [r7, #4]
 8015602:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015606:	78bb      	ldrb	r3, [r7, #2]
 8015608:	883a      	ldrh	r2, [r7, #0]
 801560a:	78f9      	ldrb	r1, [r7, #3]
 801560c:	f7f1 f961 	bl	80068d2 <HAL_PCD_EP_Open>
 8015610:	4603      	mov	r3, r0
 8015612:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015614:	7bfb      	ldrb	r3, [r7, #15]
 8015616:	4618      	mov	r0, r3
 8015618:	f000 f958 	bl	80158cc <USBD_Get_USB_Status>
 801561c:	4603      	mov	r3, r0
 801561e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015620:	7bbb      	ldrb	r3, [r7, #14]
}
 8015622:	4618      	mov	r0, r3
 8015624:	3710      	adds	r7, #16
 8015626:	46bd      	mov	sp, r7
 8015628:	bd80      	pop	{r7, pc}

0801562a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801562a:	b580      	push	{r7, lr}
 801562c:	b084      	sub	sp, #16
 801562e:	af00      	add	r7, sp, #0
 8015630:	6078      	str	r0, [r7, #4]
 8015632:	460b      	mov	r3, r1
 8015634:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015636:	2300      	movs	r3, #0
 8015638:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801563a:	2300      	movs	r3, #0
 801563c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015644:	78fa      	ldrb	r2, [r7, #3]
 8015646:	4611      	mov	r1, r2
 8015648:	4618      	mov	r0, r3
 801564a:	f7f1 f9aa 	bl	80069a2 <HAL_PCD_EP_Close>
 801564e:	4603      	mov	r3, r0
 8015650:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015652:	7bfb      	ldrb	r3, [r7, #15]
 8015654:	4618      	mov	r0, r3
 8015656:	f000 f939 	bl	80158cc <USBD_Get_USB_Status>
 801565a:	4603      	mov	r3, r0
 801565c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801565e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015660:	4618      	mov	r0, r3
 8015662:	3710      	adds	r7, #16
 8015664:	46bd      	mov	sp, r7
 8015666:	bd80      	pop	{r7, pc}

08015668 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015668:	b580      	push	{r7, lr}
 801566a:	b084      	sub	sp, #16
 801566c:	af00      	add	r7, sp, #0
 801566e:	6078      	str	r0, [r7, #4]
 8015670:	460b      	mov	r3, r1
 8015672:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015674:	2300      	movs	r3, #0
 8015676:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015678:	2300      	movs	r3, #0
 801567a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015682:	78fa      	ldrb	r2, [r7, #3]
 8015684:	4611      	mov	r1, r2
 8015686:	4618      	mov	r0, r3
 8015688:	f7f1 fa82 	bl	8006b90 <HAL_PCD_EP_SetStall>
 801568c:	4603      	mov	r3, r0
 801568e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015690:	7bfb      	ldrb	r3, [r7, #15]
 8015692:	4618      	mov	r0, r3
 8015694:	f000 f91a 	bl	80158cc <USBD_Get_USB_Status>
 8015698:	4603      	mov	r3, r0
 801569a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801569c:	7bbb      	ldrb	r3, [r7, #14]
}
 801569e:	4618      	mov	r0, r3
 80156a0:	3710      	adds	r7, #16
 80156a2:	46bd      	mov	sp, r7
 80156a4:	bd80      	pop	{r7, pc}

080156a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156a6:	b580      	push	{r7, lr}
 80156a8:	b084      	sub	sp, #16
 80156aa:	af00      	add	r7, sp, #0
 80156ac:	6078      	str	r0, [r7, #4]
 80156ae:	460b      	mov	r3, r1
 80156b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80156b2:	2300      	movs	r3, #0
 80156b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80156b6:	2300      	movs	r3, #0
 80156b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80156c0:	78fa      	ldrb	r2, [r7, #3]
 80156c2:	4611      	mov	r1, r2
 80156c4:	4618      	mov	r0, r3
 80156c6:	f7f1 fac7 	bl	8006c58 <HAL_PCD_EP_ClrStall>
 80156ca:	4603      	mov	r3, r0
 80156cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80156ce:	7bfb      	ldrb	r3, [r7, #15]
 80156d0:	4618      	mov	r0, r3
 80156d2:	f000 f8fb 	bl	80158cc <USBD_Get_USB_Status>
 80156d6:	4603      	mov	r3, r0
 80156d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80156da:	7bbb      	ldrb	r3, [r7, #14]
}
 80156dc:	4618      	mov	r0, r3
 80156de:	3710      	adds	r7, #16
 80156e0:	46bd      	mov	sp, r7
 80156e2:	bd80      	pop	{r7, pc}

080156e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80156e4:	b480      	push	{r7}
 80156e6:	b085      	sub	sp, #20
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
 80156ec:	460b      	mov	r3, r1
 80156ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80156f0:	687b      	ldr	r3, [r7, #4]
 80156f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80156f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80156f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	da0b      	bge.n	8015718 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8015700:	78fb      	ldrb	r3, [r7, #3]
 8015702:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8015706:	68f9      	ldr	r1, [r7, #12]
 8015708:	4613      	mov	r3, r2
 801570a:	00db      	lsls	r3, r3, #3
 801570c:	4413      	add	r3, r2
 801570e:	009b      	lsls	r3, r3, #2
 8015710:	440b      	add	r3, r1
 8015712:	333e      	adds	r3, #62	; 0x3e
 8015714:	781b      	ldrb	r3, [r3, #0]
 8015716:	e00b      	b.n	8015730 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8015718:	78fb      	ldrb	r3, [r7, #3]
 801571a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801571e:	68f9      	ldr	r1, [r7, #12]
 8015720:	4613      	mov	r3, r2
 8015722:	00db      	lsls	r3, r3, #3
 8015724:	4413      	add	r3, r2
 8015726:	009b      	lsls	r3, r3, #2
 8015728:	440b      	add	r3, r1
 801572a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 801572e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015730:	4618      	mov	r0, r3
 8015732:	3714      	adds	r7, #20
 8015734:	46bd      	mov	sp, r7
 8015736:	f85d 7b04 	ldr.w	r7, [sp], #4
 801573a:	4770      	bx	lr

0801573c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 801573c:	b580      	push	{r7, lr}
 801573e:	b084      	sub	sp, #16
 8015740:	af00      	add	r7, sp, #0
 8015742:	6078      	str	r0, [r7, #4]
 8015744:	460b      	mov	r3, r1
 8015746:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015748:	2300      	movs	r3, #0
 801574a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801574c:	2300      	movs	r3, #0
 801574e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015750:	687b      	ldr	r3, [r7, #4]
 8015752:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015756:	78fa      	ldrb	r2, [r7, #3]
 8015758:	4611      	mov	r1, r2
 801575a:	4618      	mov	r0, r3
 801575c:	f7f1 f894 	bl	8006888 <HAL_PCD_SetAddress>
 8015760:	4603      	mov	r3, r0
 8015762:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015764:	7bfb      	ldrb	r3, [r7, #15]
 8015766:	4618      	mov	r0, r3
 8015768:	f000 f8b0 	bl	80158cc <USBD_Get_USB_Status>
 801576c:	4603      	mov	r3, r0
 801576e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015770:	7bbb      	ldrb	r3, [r7, #14]
}
 8015772:	4618      	mov	r0, r3
 8015774:	3710      	adds	r7, #16
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}

0801577a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801577a:	b580      	push	{r7, lr}
 801577c:	b086      	sub	sp, #24
 801577e:	af00      	add	r7, sp, #0
 8015780:	60f8      	str	r0, [r7, #12]
 8015782:	607a      	str	r2, [r7, #4]
 8015784:	603b      	str	r3, [r7, #0]
 8015786:	460b      	mov	r3, r1
 8015788:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801578a:	2300      	movs	r3, #0
 801578c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801578e:	2300      	movs	r3, #0
 8015790:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015792:	68fb      	ldr	r3, [r7, #12]
 8015794:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8015798:	7af9      	ldrb	r1, [r7, #11]
 801579a:	683b      	ldr	r3, [r7, #0]
 801579c:	687a      	ldr	r2, [r7, #4]
 801579e:	f7f1 f9ad 	bl	8006afc <HAL_PCD_EP_Transmit>
 80157a2:	4603      	mov	r3, r0
 80157a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157a6:	7dfb      	ldrb	r3, [r7, #23]
 80157a8:	4618      	mov	r0, r3
 80157aa:	f000 f88f 	bl	80158cc <USBD_Get_USB_Status>
 80157ae:	4603      	mov	r3, r0
 80157b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80157b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80157b4:	4618      	mov	r0, r3
 80157b6:	3718      	adds	r7, #24
 80157b8:	46bd      	mov	sp, r7
 80157ba:	bd80      	pop	{r7, pc}

080157bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80157bc:	b580      	push	{r7, lr}
 80157be:	b086      	sub	sp, #24
 80157c0:	af00      	add	r7, sp, #0
 80157c2:	60f8      	str	r0, [r7, #12]
 80157c4:	607a      	str	r2, [r7, #4]
 80157c6:	603b      	str	r3, [r7, #0]
 80157c8:	460b      	mov	r3, r1
 80157ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157cc:	2300      	movs	r3, #0
 80157ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157d0:	2300      	movs	r3, #0
 80157d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80157da:	7af9      	ldrb	r1, [r7, #11]
 80157dc:	683b      	ldr	r3, [r7, #0]
 80157de:	687a      	ldr	r2, [r7, #4]
 80157e0:	f7f1 f929 	bl	8006a36 <HAL_PCD_EP_Receive>
 80157e4:	4603      	mov	r3, r0
 80157e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80157e8:	7dfb      	ldrb	r3, [r7, #23]
 80157ea:	4618      	mov	r0, r3
 80157ec:	f000 f86e 	bl	80158cc <USBD_Get_USB_Status>
 80157f0:	4603      	mov	r3, r0
 80157f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80157f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80157f6:	4618      	mov	r0, r3
 80157f8:	3718      	adds	r7, #24
 80157fa:	46bd      	mov	sp, r7
 80157fc:	bd80      	pop	{r7, pc}

080157fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80157fe:	b580      	push	{r7, lr}
 8015800:	b082      	sub	sp, #8
 8015802:	af00      	add	r7, sp, #0
 8015804:	6078      	str	r0, [r7, #4]
 8015806:	460b      	mov	r3, r1
 8015808:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801580a:	687b      	ldr	r3, [r7, #4]
 801580c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8015810:	78fa      	ldrb	r2, [r7, #3]
 8015812:	4611      	mov	r1, r2
 8015814:	4618      	mov	r0, r3
 8015816:	f7f1 f959 	bl	8006acc <HAL_PCD_EP_GetRxCount>
 801581a:	4603      	mov	r3, r0
}
 801581c:	4618      	mov	r0, r3
 801581e:	3708      	adds	r7, #8
 8015820:	46bd      	mov	sp, r7
 8015822:	bd80      	pop	{r7, pc}

08015824 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8015824:	b580      	push	{r7, lr}
 8015826:	b082      	sub	sp, #8
 8015828:	af00      	add	r7, sp, #0
 801582a:	6078      	str	r0, [r7, #4]
 801582c:	460b      	mov	r3, r1
 801582e:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8015830:	78fb      	ldrb	r3, [r7, #3]
 8015832:	2b00      	cmp	r3, #0
 8015834:	d002      	beq.n	801583c <HAL_PCDEx_LPM_Callback+0x18>
 8015836:	2b01      	cmp	r3, #1
 8015838:	d01f      	beq.n	801587a <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801583a:	e03b      	b.n	80158b4 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	6a1b      	ldr	r3, [r3, #32]
 8015840:	2b00      	cmp	r3, #0
 8015842:	d007      	beq.n	8015854 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8015844:	f000 f83c 	bl	80158c0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8015848:	4b1c      	ldr	r3, [pc, #112]	; (80158bc <HAL_PCDEx_LPM_Callback+0x98>)
 801584a:	691b      	ldr	r3, [r3, #16]
 801584c:	4a1b      	ldr	r2, [pc, #108]	; (80158bc <HAL_PCDEx_LPM_Callback+0x98>)
 801584e:	f023 0306 	bic.w	r3, r3, #6
 8015852:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8015854:	687b      	ldr	r3, [r7, #4]
 8015856:	681b      	ldr	r3, [r3, #0]
 8015858:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801585c:	681b      	ldr	r3, [r3, #0]
 801585e:	687a      	ldr	r2, [r7, #4]
 8015860:	6812      	ldr	r2, [r2, #0]
 8015862:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8015866:	f023 0301 	bic.w	r3, r3, #1
 801586a:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015872:	4618      	mov	r0, r3
 8015874:	f7f9 fa31 	bl	800ecda <USBD_LL_Resume>
    break;
 8015878:	e01c      	b.n	80158b4 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	687a      	ldr	r2, [r7, #4]
 8015886:	6812      	ldr	r2, [r2, #0]
 8015888:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801588c:	f043 0301 	orr.w	r3, r3, #1
 8015890:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8015892:	687b      	ldr	r3, [r7, #4]
 8015894:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8015898:	4618      	mov	r0, r3
 801589a:	f7f9 fa08 	bl	800ecae <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801589e:	687b      	ldr	r3, [r7, #4]
 80158a0:	6a1b      	ldr	r3, [r3, #32]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d005      	beq.n	80158b2 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80158a6:	4b05      	ldr	r3, [pc, #20]	; (80158bc <HAL_PCDEx_LPM_Callback+0x98>)
 80158a8:	691b      	ldr	r3, [r3, #16]
 80158aa:	4a04      	ldr	r2, [pc, #16]	; (80158bc <HAL_PCDEx_LPM_Callback+0x98>)
 80158ac:	f043 0306 	orr.w	r3, r3, #6
 80158b0:	6113      	str	r3, [r2, #16]
    break;
 80158b2:	bf00      	nop
}
 80158b4:	bf00      	nop
 80158b6:	3708      	adds	r7, #8
 80158b8:	46bd      	mov	sp, r7
 80158ba:	bd80      	pop	{r7, pc}
 80158bc:	e000ed00 	.word	0xe000ed00

080158c0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80158c0:	b580      	push	{r7, lr}
 80158c2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80158c4:	f7ec fb80 	bl	8001fc8 <SystemClock_Config>
}
 80158c8:	bf00      	nop
 80158ca:	bd80      	pop	{r7, pc}

080158cc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80158cc:	b480      	push	{r7}
 80158ce:	b085      	sub	sp, #20
 80158d0:	af00      	add	r7, sp, #0
 80158d2:	4603      	mov	r3, r0
 80158d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158d6:	2300      	movs	r3, #0
 80158d8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80158da:	79fb      	ldrb	r3, [r7, #7]
 80158dc:	2b03      	cmp	r3, #3
 80158de:	d817      	bhi.n	8015910 <USBD_Get_USB_Status+0x44>
 80158e0:	a201      	add	r2, pc, #4	; (adr r2, 80158e8 <USBD_Get_USB_Status+0x1c>)
 80158e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80158e6:	bf00      	nop
 80158e8:	080158f9 	.word	0x080158f9
 80158ec:	080158ff 	.word	0x080158ff
 80158f0:	08015905 	.word	0x08015905
 80158f4:	0801590b 	.word	0x0801590b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80158f8:	2300      	movs	r3, #0
 80158fa:	73fb      	strb	r3, [r7, #15]
    break;
 80158fc:	e00b      	b.n	8015916 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80158fe:	2303      	movs	r3, #3
 8015900:	73fb      	strb	r3, [r7, #15]
    break;
 8015902:	e008      	b.n	8015916 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015904:	2301      	movs	r3, #1
 8015906:	73fb      	strb	r3, [r7, #15]
    break;
 8015908:	e005      	b.n	8015916 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 801590a:	2303      	movs	r3, #3
 801590c:	73fb      	strb	r3, [r7, #15]
    break;
 801590e:	e002      	b.n	8015916 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8015910:	2303      	movs	r3, #3
 8015912:	73fb      	strb	r3, [r7, #15]
    break;
 8015914:	bf00      	nop
  }
  return usb_status;
 8015916:	7bfb      	ldrb	r3, [r7, #15]
}
 8015918:	4618      	mov	r0, r3
 801591a:	3714      	adds	r7, #20
 801591c:	46bd      	mov	sp, r7
 801591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015922:	4770      	bx	lr

08015924 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8015924:	b580      	push	{r7, lr}
 8015926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8015928:	2201      	movs	r2, #1
 801592a:	490e      	ldr	r1, [pc, #56]	; (8015964 <MX_USB_HOST_Init+0x40>)
 801592c:	480e      	ldr	r0, [pc, #56]	; (8015968 <MX_USB_HOST_Init+0x44>)
 801592e:	f7fa fda7 	bl	8010480 <USBH_Init>
 8015932:	4603      	mov	r3, r0
 8015934:	2b00      	cmp	r3, #0
 8015936:	d001      	beq.n	801593c <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8015938:	f7ec feca 	bl	80026d0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 801593c:	490b      	ldr	r1, [pc, #44]	; (801596c <MX_USB_HOST_Init+0x48>)
 801593e:	480a      	ldr	r0, [pc, #40]	; (8015968 <MX_USB_HOST_Init+0x44>)
 8015940:	f7fa fe4b 	bl	80105da <USBH_RegisterClass>
 8015944:	4603      	mov	r3, r0
 8015946:	2b00      	cmp	r3, #0
 8015948:	d001      	beq.n	801594e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801594a:	f7ec fec1 	bl	80026d0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801594e:	4806      	ldr	r0, [pc, #24]	; (8015968 <MX_USB_HOST_Init+0x44>)
 8015950:	f7fa fecf 	bl	80106f2 <USBH_Start>
 8015954:	4603      	mov	r3, r0
 8015956:	2b00      	cmp	r3, #0
 8015958:	d001      	beq.n	801595e <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801595a:	f7ec feb9 	bl	80026d0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801595e:	bf00      	nop
 8015960:	bd80      	pop	{r7, pc}
 8015962:	bf00      	nop
 8015964:	08015985 	.word	0x08015985
 8015968:	2000477c 	.word	0x2000477c
 801596c:	20000098 	.word	0x20000098

08015970 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8015970:	b580      	push	{r7, lr}
 8015972:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8015974:	4802      	ldr	r0, [pc, #8]	; (8015980 <MX_USB_HOST_Process+0x10>)
 8015976:	f7fa fecd 	bl	8010714 <USBH_Process>
}
 801597a:	bf00      	nop
 801597c:	bd80      	pop	{r7, pc}
 801597e:	bf00      	nop
 8015980:	2000477c 	.word	0x2000477c

08015984 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8015984:	b480      	push	{r7}
 8015986:	b083      	sub	sp, #12
 8015988:	af00      	add	r7, sp, #0
 801598a:	6078      	str	r0, [r7, #4]
 801598c:	460b      	mov	r3, r1
 801598e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8015990:	78fb      	ldrb	r3, [r7, #3]
 8015992:	3b01      	subs	r3, #1
 8015994:	2b04      	cmp	r3, #4
 8015996:	d819      	bhi.n	80159cc <USBH_UserProcess+0x48>
 8015998:	a201      	add	r2, pc, #4	; (adr r2, 80159a0 <USBH_UserProcess+0x1c>)
 801599a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801599e:	bf00      	nop
 80159a0:	080159cd 	.word	0x080159cd
 80159a4:	080159bd 	.word	0x080159bd
 80159a8:	080159cd 	.word	0x080159cd
 80159ac:	080159c5 	.word	0x080159c5
 80159b0:	080159b5 	.word	0x080159b5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80159b4:	4b09      	ldr	r3, [pc, #36]	; (80159dc <USBH_UserProcess+0x58>)
 80159b6:	2203      	movs	r2, #3
 80159b8:	701a      	strb	r2, [r3, #0]
  break;
 80159ba:	e008      	b.n	80159ce <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80159bc:	4b07      	ldr	r3, [pc, #28]	; (80159dc <USBH_UserProcess+0x58>)
 80159be:	2202      	movs	r2, #2
 80159c0:	701a      	strb	r2, [r3, #0]
  break;
 80159c2:	e004      	b.n	80159ce <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80159c4:	4b05      	ldr	r3, [pc, #20]	; (80159dc <USBH_UserProcess+0x58>)
 80159c6:	2201      	movs	r2, #1
 80159c8:	701a      	strb	r2, [r3, #0]
  break;
 80159ca:	e000      	b.n	80159ce <USBH_UserProcess+0x4a>

  default:
  break;
 80159cc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80159ce:	bf00      	nop
 80159d0:	370c      	adds	r7, #12
 80159d2:	46bd      	mov	sp, r7
 80159d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159d8:	4770      	bx	lr
 80159da:	bf00      	nop
 80159dc:	20004b54 	.word	0x20004b54

080159e0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80159e0:	b580      	push	{r7, lr}
 80159e2:	b0ac      	sub	sp, #176	; 0xb0
 80159e4:	af00      	add	r7, sp, #0
 80159e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80159e8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80159ec:	2200      	movs	r2, #0
 80159ee:	601a      	str	r2, [r3, #0]
 80159f0:	605a      	str	r2, [r3, #4]
 80159f2:	609a      	str	r2, [r3, #8]
 80159f4:	60da      	str	r2, [r3, #12]
 80159f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80159f8:	f107 0318 	add.w	r3, r7, #24
 80159fc:	2284      	movs	r2, #132	; 0x84
 80159fe:	2100      	movs	r1, #0
 8015a00:	4618      	mov	r0, r3
 8015a02:	f000 faf3 	bl	8015fec <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	681b      	ldr	r3, [r3, #0]
 8015a0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8015a0e:	d151      	bne.n	8015ab4 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8015a10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8015a14:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8015a16:	2300      	movs	r3, #0
 8015a18:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8015a1c:	f107 0318 	add.w	r3, r7, #24
 8015a20:	4618      	mov	r0, r3
 8015a22:	f7f2 f8ff 	bl	8007c24 <HAL_RCCEx_PeriphCLKConfig>
 8015a26:	4603      	mov	r3, r0
 8015a28:	2b00      	cmp	r3, #0
 8015a2a:	d001      	beq.n	8015a30 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8015a2c:	f7ec fe50 	bl	80026d0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8015a30:	4b22      	ldr	r3, [pc, #136]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a34:	4a21      	ldr	r2, [pc, #132]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a36:	f043 0301 	orr.w	r3, r3, #1
 8015a3a:	6313      	str	r3, [r2, #48]	; 0x30
 8015a3c:	4b1f      	ldr	r3, [pc, #124]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8015a40:	f003 0301 	and.w	r3, r3, #1
 8015a44:	617b      	str	r3, [r7, #20]
 8015a46:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8015a48:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8015a4c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015a50:	2302      	movs	r3, #2
 8015a52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015a56:	2300      	movs	r3, #0
 8015a58:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8015a5c:	2303      	movs	r3, #3
 8015a5e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8015a62:	230a      	movs	r3, #10
 8015a64:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015a68:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8015a6c:	4619      	mov	r1, r3
 8015a6e:	4814      	ldr	r0, [pc, #80]	; (8015ac0 <HAL_HCD_MspInit+0xe0>)
 8015a70:	f7ee f9c6 	bl	8003e00 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8015a74:	4b11      	ldr	r3, [pc, #68]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a78:	4a10      	ldr	r2, [pc, #64]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015a7e:	6353      	str	r3, [r2, #52]	; 0x34
 8015a80:	4b0e      	ldr	r3, [pc, #56]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015a84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8015a88:	613b      	str	r3, [r7, #16]
 8015a8a:	693b      	ldr	r3, [r7, #16]
 8015a8c:	4b0b      	ldr	r3, [pc, #44]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a90:	4a0a      	ldr	r2, [pc, #40]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8015a96:	6453      	str	r3, [r2, #68]	; 0x44
 8015a98:	4b08      	ldr	r3, [pc, #32]	; (8015abc <HAL_HCD_MspInit+0xdc>)
 8015a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8015aa0:	60fb      	str	r3, [r7, #12]
 8015aa2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8015aa4:	2200      	movs	r2, #0
 8015aa6:	2100      	movs	r1, #0
 8015aa8:	2043      	movs	r0, #67	; 0x43
 8015aaa:	f7ed fe88 	bl	80037be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8015aae:	2043      	movs	r0, #67	; 0x43
 8015ab0:	f7ed fea1 	bl	80037f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8015ab4:	bf00      	nop
 8015ab6:	37b0      	adds	r7, #176	; 0xb0
 8015ab8:	46bd      	mov	sp, r7
 8015aba:	bd80      	pop	{r7, pc}
 8015abc:	40023800 	.word	0x40023800
 8015ac0:	40020000 	.word	0x40020000

08015ac4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8015ac4:	b580      	push	{r7, lr}
 8015ac6:	b082      	sub	sp, #8
 8015ac8:	af00      	add	r7, sp, #0
 8015aca:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8015acc:	687b      	ldr	r3, [r7, #4]
 8015ace:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f7fb f9fd 	bl	8010ed2 <USBH_LL_IncTimer>
}
 8015ad8:	bf00      	nop
 8015ada:	3708      	adds	r7, #8
 8015adc:	46bd      	mov	sp, r7
 8015ade:	bd80      	pop	{r7, pc}

08015ae0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015ae0:	b580      	push	{r7, lr}
 8015ae2:	b082      	sub	sp, #8
 8015ae4:	af00      	add	r7, sp, #0
 8015ae6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015aee:	4618      	mov	r0, r3
 8015af0:	f7fb fa35 	bl	8010f5e <USBH_LL_Connect>
}
 8015af4:	bf00      	nop
 8015af6:	3708      	adds	r7, #8
 8015af8:	46bd      	mov	sp, r7
 8015afa:	bd80      	pop	{r7, pc}

08015afc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8015afc:	b580      	push	{r7, lr}
 8015afe:	b082      	sub	sp, #8
 8015b00:	af00      	add	r7, sp, #0
 8015b02:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7fb fa3e 	bl	8010f8c <USBH_LL_Disconnect>
}
 8015b10:	bf00      	nop
 8015b12:	3708      	adds	r7, #8
 8015b14:	46bd      	mov	sp, r7
 8015b16:	bd80      	pop	{r7, pc}

08015b18 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8015b18:	b480      	push	{r7}
 8015b1a:	b083      	sub	sp, #12
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
 8015b20:	460b      	mov	r3, r1
 8015b22:	70fb      	strb	r3, [r7, #3]
 8015b24:	4613      	mov	r3, r2
 8015b26:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8015b28:	bf00      	nop
 8015b2a:	370c      	adds	r7, #12
 8015b2c:	46bd      	mov	sp, r7
 8015b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b32:	4770      	bx	lr

08015b34 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015b34:	b580      	push	{r7, lr}
 8015b36:	b082      	sub	sp, #8
 8015b38:	af00      	add	r7, sp, #0
 8015b3a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8015b3c:	687b      	ldr	r3, [r7, #4]
 8015b3e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015b42:	4618      	mov	r0, r3
 8015b44:	f7fb f9ef 	bl	8010f26 <USBH_LL_PortEnabled>
}
 8015b48:	bf00      	nop
 8015b4a:	3708      	adds	r7, #8
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	bd80      	pop	{r7, pc}

08015b50 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8015b50:	b580      	push	{r7, lr}
 8015b52:	b082      	sub	sp, #8
 8015b54:	af00      	add	r7, sp, #0
 8015b56:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8015b58:	687b      	ldr	r3, [r7, #4]
 8015b5a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8015b5e:	4618      	mov	r0, r3
 8015b60:	f7fb f9ef 	bl	8010f42 <USBH_LL_PortDisabled>
}
 8015b64:	bf00      	nop
 8015b66:	3708      	adds	r7, #8
 8015b68:	46bd      	mov	sp, r7
 8015b6a:	bd80      	pop	{r7, pc}

08015b6c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8015b6c:	b580      	push	{r7, lr}
 8015b6e:	b082      	sub	sp, #8
 8015b70:	af00      	add	r7, sp, #0
 8015b72:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015b7a:	2b01      	cmp	r3, #1
 8015b7c:	d12a      	bne.n	8015bd4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8015b7e:	4a18      	ldr	r2, [pc, #96]	; (8015be0 <USBH_LL_Init+0x74>)
 8015b80:	687b      	ldr	r3, [r7, #4]
 8015b82:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8015b86:	687b      	ldr	r3, [r7, #4]
 8015b88:	4a15      	ldr	r2, [pc, #84]	; (8015be0 <USBH_LL_Init+0x74>)
 8015b8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8015b8e:	4b14      	ldr	r3, [pc, #80]	; (8015be0 <USBH_LL_Init+0x74>)
 8015b90:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8015b94:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8015b96:	4b12      	ldr	r3, [pc, #72]	; (8015be0 <USBH_LL_Init+0x74>)
 8015b98:	2208      	movs	r2, #8
 8015b9a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8015b9c:	4b10      	ldr	r3, [pc, #64]	; (8015be0 <USBH_LL_Init+0x74>)
 8015b9e:	2201      	movs	r2, #1
 8015ba0:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8015ba2:	4b0f      	ldr	r3, [pc, #60]	; (8015be0 <USBH_LL_Init+0x74>)
 8015ba4:	2200      	movs	r2, #0
 8015ba6:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8015ba8:	4b0d      	ldr	r3, [pc, #52]	; (8015be0 <USBH_LL_Init+0x74>)
 8015baa:	2202      	movs	r2, #2
 8015bac:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8015bae:	4b0c      	ldr	r3, [pc, #48]	; (8015be0 <USBH_LL_Init+0x74>)
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8015bb4:	480a      	ldr	r0, [pc, #40]	; (8015be0 <USBH_LL_Init+0x74>)
 8015bb6:	f7ee fb1a 	bl	80041ee <HAL_HCD_Init>
 8015bba:	4603      	mov	r3, r0
 8015bbc:	2b00      	cmp	r3, #0
 8015bbe:	d001      	beq.n	8015bc4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8015bc0:	f7ec fd86 	bl	80026d0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8015bc4:	4806      	ldr	r0, [pc, #24]	; (8015be0 <USBH_LL_Init+0x74>)
 8015bc6:	f7ee fefe 	bl	80049c6 <HAL_HCD_GetCurrentFrame>
 8015bca:	4603      	mov	r3, r0
 8015bcc:	4619      	mov	r1, r3
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f7fb f970 	bl	8010eb4 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8015bd4:	2300      	movs	r3, #0
}
 8015bd6:	4618      	mov	r0, r3
 8015bd8:	3708      	adds	r7, #8
 8015bda:	46bd      	mov	sp, r7
 8015bdc:	bd80      	pop	{r7, pc}
 8015bde:	bf00      	nop
 8015be0:	20004b58 	.word	0x20004b58

08015be4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b084      	sub	sp, #16
 8015be8:	af00      	add	r7, sp, #0
 8015bea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015bec:	2300      	movs	r3, #0
 8015bee:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015bf0:	2300      	movs	r3, #0
 8015bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8015bf4:	687b      	ldr	r3, [r7, #4]
 8015bf6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	f7ee fe6d 	bl	80048da <HAL_HCD_Start>
 8015c00:	4603      	mov	r3, r0
 8015c02:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015c04:	7bfb      	ldrb	r3, [r7, #15]
 8015c06:	4618      	mov	r0, r3
 8015c08:	f000 f95c 	bl	8015ec4 <USBH_Get_USB_Status>
 8015c0c:	4603      	mov	r3, r0
 8015c0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c10:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c12:	4618      	mov	r0, r3
 8015c14:	3710      	adds	r7, #16
 8015c16:	46bd      	mov	sp, r7
 8015c18:	bd80      	pop	{r7, pc}

08015c1a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8015c1a:	b580      	push	{r7, lr}
 8015c1c:	b084      	sub	sp, #16
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015c22:	2300      	movs	r3, #0
 8015c24:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015c26:	2300      	movs	r3, #0
 8015c28:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015c30:	4618      	mov	r0, r3
 8015c32:	f7ee fe75 	bl	8004920 <HAL_HCD_Stop>
 8015c36:	4603      	mov	r3, r0
 8015c38:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015c3a:	7bfb      	ldrb	r3, [r7, #15]
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f000 f941 	bl	8015ec4 <USBH_Get_USB_Status>
 8015c42:	4603      	mov	r3, r0
 8015c44:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015c46:	7bbb      	ldrb	r3, [r7, #14]
}
 8015c48:	4618      	mov	r0, r3
 8015c4a:	3710      	adds	r7, #16
 8015c4c:	46bd      	mov	sp, r7
 8015c4e:	bd80      	pop	{r7, pc}

08015c50 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8015c50:	b580      	push	{r7, lr}
 8015c52:	b084      	sub	sp, #16
 8015c54:	af00      	add	r7, sp, #0
 8015c56:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8015c58:	2301      	movs	r3, #1
 8015c5a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8015c5c:	687b      	ldr	r3, [r7, #4]
 8015c5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015c62:	4618      	mov	r0, r3
 8015c64:	f7ee febd 	bl	80049e2 <HAL_HCD_GetCurrentSpeed>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b02      	cmp	r3, #2
 8015c6c:	d00c      	beq.n	8015c88 <USBH_LL_GetSpeed+0x38>
 8015c6e:	2b02      	cmp	r3, #2
 8015c70:	d80d      	bhi.n	8015c8e <USBH_LL_GetSpeed+0x3e>
 8015c72:	2b00      	cmp	r3, #0
 8015c74:	d002      	beq.n	8015c7c <USBH_LL_GetSpeed+0x2c>
 8015c76:	2b01      	cmp	r3, #1
 8015c78:	d003      	beq.n	8015c82 <USBH_LL_GetSpeed+0x32>
 8015c7a:	e008      	b.n	8015c8e <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8015c7c:	2300      	movs	r3, #0
 8015c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8015c80:	e008      	b.n	8015c94 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8015c82:	2301      	movs	r3, #1
 8015c84:	73fb      	strb	r3, [r7, #15]
    break;
 8015c86:	e005      	b.n	8015c94 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8015c88:	2302      	movs	r3, #2
 8015c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8015c8c:	e002      	b.n	8015c94 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8015c8e:	2301      	movs	r3, #1
 8015c90:	73fb      	strb	r3, [r7, #15]
    break;
 8015c92:	bf00      	nop
  }
  return  speed;
 8015c94:	7bfb      	ldrb	r3, [r7, #15]
}
 8015c96:	4618      	mov	r0, r3
 8015c98:	3710      	adds	r7, #16
 8015c9a:	46bd      	mov	sp, r7
 8015c9c:	bd80      	pop	{r7, pc}

08015c9e <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8015c9e:	b580      	push	{r7, lr}
 8015ca0:	b084      	sub	sp, #16
 8015ca2:	af00      	add	r7, sp, #0
 8015ca4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ca6:	2300      	movs	r3, #0
 8015ca8:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015caa:	2300      	movs	r3, #0
 8015cac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8015cae:	687b      	ldr	r3, [r7, #4]
 8015cb0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f7ee fe50 	bl	800495a <HAL_HCD_ResetPort>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015cbe:	7bfb      	ldrb	r3, [r7, #15]
 8015cc0:	4618      	mov	r0, r3
 8015cc2:	f000 f8ff 	bl	8015ec4 <USBH_Get_USB_Status>
 8015cc6:	4603      	mov	r3, r0
 8015cc8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015cca:	7bbb      	ldrb	r3, [r7, #14]
}
 8015ccc:	4618      	mov	r0, r3
 8015cce:	3710      	adds	r7, #16
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}

08015cd4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015cd4:	b580      	push	{r7, lr}
 8015cd6:	b082      	sub	sp, #8
 8015cd8:	af00      	add	r7, sp, #0
 8015cda:	6078      	str	r0, [r7, #4]
 8015cdc:	460b      	mov	r3, r1
 8015cde:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015ce6:	78fa      	ldrb	r2, [r7, #3]
 8015ce8:	4611      	mov	r1, r2
 8015cea:	4618      	mov	r0, r3
 8015cec:	f7ee fe57 	bl	800499e <HAL_HCD_HC_GetXferCount>
 8015cf0:	4603      	mov	r3, r0
}
 8015cf2:	4618      	mov	r0, r3
 8015cf4:	3708      	adds	r7, #8
 8015cf6:	46bd      	mov	sp, r7
 8015cf8:	bd80      	pop	{r7, pc}

08015cfa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8015cfa:	b590      	push	{r4, r7, lr}
 8015cfc:	b089      	sub	sp, #36	; 0x24
 8015cfe:	af04      	add	r7, sp, #16
 8015d00:	6078      	str	r0, [r7, #4]
 8015d02:	4608      	mov	r0, r1
 8015d04:	4611      	mov	r1, r2
 8015d06:	461a      	mov	r2, r3
 8015d08:	4603      	mov	r3, r0
 8015d0a:	70fb      	strb	r3, [r7, #3]
 8015d0c:	460b      	mov	r3, r1
 8015d0e:	70bb      	strb	r3, [r7, #2]
 8015d10:	4613      	mov	r3, r2
 8015d12:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d14:	2300      	movs	r3, #0
 8015d16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015d18:	2300      	movs	r3, #0
 8015d1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8015d1c:	687b      	ldr	r3, [r7, #4]
 8015d1e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015d22:	787c      	ldrb	r4, [r7, #1]
 8015d24:	78ba      	ldrb	r2, [r7, #2]
 8015d26:	78f9      	ldrb	r1, [r7, #3]
 8015d28:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015d2a:	9302      	str	r3, [sp, #8]
 8015d2c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015d30:	9301      	str	r3, [sp, #4]
 8015d32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015d36:	9300      	str	r3, [sp, #0]
 8015d38:	4623      	mov	r3, r4
 8015d3a:	f7ee faba 	bl	80042b2 <HAL_HCD_HC_Init>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8015d42:	7bfb      	ldrb	r3, [r7, #15]
 8015d44:	4618      	mov	r0, r3
 8015d46:	f000 f8bd 	bl	8015ec4 <USBH_Get_USB_Status>
 8015d4a:	4603      	mov	r3, r0
 8015d4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d50:	4618      	mov	r0, r3
 8015d52:	3714      	adds	r7, #20
 8015d54:	46bd      	mov	sp, r7
 8015d56:	bd90      	pop	{r4, r7, pc}

08015d58 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b084      	sub	sp, #16
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	460b      	mov	r3, r1
 8015d62:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015d64:	2300      	movs	r3, #0
 8015d66:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015d68:	2300      	movs	r3, #0
 8015d6a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015d72:	78fa      	ldrb	r2, [r7, #3]
 8015d74:	4611      	mov	r1, r2
 8015d76:	4618      	mov	r0, r3
 8015d78:	f7ee fb2a 	bl	80043d0 <HAL_HCD_HC_Halt>
 8015d7c:	4603      	mov	r3, r0
 8015d7e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8015d80:	7bfb      	ldrb	r3, [r7, #15]
 8015d82:	4618      	mov	r0, r3
 8015d84:	f000 f89e 	bl	8015ec4 <USBH_Get_USB_Status>
 8015d88:	4603      	mov	r3, r0
 8015d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8015d8e:	4618      	mov	r0, r3
 8015d90:	3710      	adds	r7, #16
 8015d92:	46bd      	mov	sp, r7
 8015d94:	bd80      	pop	{r7, pc}

08015d96 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8015d96:	b590      	push	{r4, r7, lr}
 8015d98:	b089      	sub	sp, #36	; 0x24
 8015d9a:	af04      	add	r7, sp, #16
 8015d9c:	6078      	str	r0, [r7, #4]
 8015d9e:	4608      	mov	r0, r1
 8015da0:	4611      	mov	r1, r2
 8015da2:	461a      	mov	r2, r3
 8015da4:	4603      	mov	r3, r0
 8015da6:	70fb      	strb	r3, [r7, #3]
 8015da8:	460b      	mov	r3, r1
 8015daa:	70bb      	strb	r3, [r7, #2]
 8015dac:	4613      	mov	r3, r2
 8015dae:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015db0:	2300      	movs	r3, #0
 8015db2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015db4:	2300      	movs	r3, #0
 8015db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8015dbe:	787c      	ldrb	r4, [r7, #1]
 8015dc0:	78ba      	ldrb	r2, [r7, #2]
 8015dc2:	78f9      	ldrb	r1, [r7, #3]
 8015dc4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8015dc8:	9303      	str	r3, [sp, #12]
 8015dca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8015dcc:	9302      	str	r3, [sp, #8]
 8015dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dd0:	9301      	str	r3, [sp, #4]
 8015dd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015dd6:	9300      	str	r3, [sp, #0]
 8015dd8:	4623      	mov	r3, r4
 8015dda:	f7ee fb1d 	bl	8004418 <HAL_HCD_HC_SubmitRequest>
 8015dde:	4603      	mov	r3, r0
 8015de0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8015de2:	7bfb      	ldrb	r3, [r7, #15]
 8015de4:	4618      	mov	r0, r3
 8015de6:	f000 f86d 	bl	8015ec4 <USBH_Get_USB_Status>
 8015dea:	4603      	mov	r3, r0
 8015dec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8015dee:	7bbb      	ldrb	r3, [r7, #14]
}
 8015df0:	4618      	mov	r0, r3
 8015df2:	3714      	adds	r7, #20
 8015df4:	46bd      	mov	sp, r7
 8015df6:	bd90      	pop	{r4, r7, pc}

08015df8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8015df8:	b580      	push	{r7, lr}
 8015dfa:	b082      	sub	sp, #8
 8015dfc:	af00      	add	r7, sp, #0
 8015dfe:	6078      	str	r0, [r7, #4]
 8015e00:	460b      	mov	r3, r1
 8015e02:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e0a:	78fa      	ldrb	r2, [r7, #3]
 8015e0c:	4611      	mov	r1, r2
 8015e0e:	4618      	mov	r0, r3
 8015e10:	f7ee fdb1 	bl	8004976 <HAL_HCD_HC_GetURBState>
 8015e14:	4603      	mov	r3, r0
}
 8015e16:	4618      	mov	r0, r3
 8015e18:	3708      	adds	r7, #8
 8015e1a:	46bd      	mov	sp, r7
 8015e1c:	bd80      	pop	{r7, pc}

08015e1e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8015e1e:	b580      	push	{r7, lr}
 8015e20:	b082      	sub	sp, #8
 8015e22:	af00      	add	r7, sp, #0
 8015e24:	6078      	str	r0, [r7, #4]
 8015e26:	460b      	mov	r3, r1
 8015e28:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8015e30:	2b01      	cmp	r3, #1
 8015e32:	d103      	bne.n	8015e3c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8015e34:	78fb      	ldrb	r3, [r7, #3]
 8015e36:	4618      	mov	r0, r3
 8015e38:	f000 f870 	bl	8015f1c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8015e3c:	20c8      	movs	r0, #200	; 0xc8
 8015e3e:	f7ed f92b 	bl	8003098 <HAL_Delay>
  return USBH_OK;
 8015e42:	2300      	movs	r3, #0
}
 8015e44:	4618      	mov	r0, r3
 8015e46:	3708      	adds	r7, #8
 8015e48:	46bd      	mov	sp, r7
 8015e4a:	bd80      	pop	{r7, pc}

08015e4c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8015e4c:	b480      	push	{r7}
 8015e4e:	b085      	sub	sp, #20
 8015e50:	af00      	add	r7, sp, #0
 8015e52:	6078      	str	r0, [r7, #4]
 8015e54:	460b      	mov	r3, r1
 8015e56:	70fb      	strb	r3, [r7, #3]
 8015e58:	4613      	mov	r3, r2
 8015e5a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8015e62:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8015e64:	78fb      	ldrb	r3, [r7, #3]
 8015e66:	68fa      	ldr	r2, [r7, #12]
 8015e68:	212c      	movs	r1, #44	; 0x2c
 8015e6a:	fb01 f303 	mul.w	r3, r1, r3
 8015e6e:	4413      	add	r3, r2
 8015e70:	333b      	adds	r3, #59	; 0x3b
 8015e72:	781b      	ldrb	r3, [r3, #0]
 8015e74:	2b00      	cmp	r3, #0
 8015e76:	d009      	beq.n	8015e8c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8015e78:	78fb      	ldrb	r3, [r7, #3]
 8015e7a:	68fa      	ldr	r2, [r7, #12]
 8015e7c:	212c      	movs	r1, #44	; 0x2c
 8015e7e:	fb01 f303 	mul.w	r3, r1, r3
 8015e82:	4413      	add	r3, r2
 8015e84:	3354      	adds	r3, #84	; 0x54
 8015e86:	78ba      	ldrb	r2, [r7, #2]
 8015e88:	701a      	strb	r2, [r3, #0]
 8015e8a:	e008      	b.n	8015e9e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8015e8c:	78fb      	ldrb	r3, [r7, #3]
 8015e8e:	68fa      	ldr	r2, [r7, #12]
 8015e90:	212c      	movs	r1, #44	; 0x2c
 8015e92:	fb01 f303 	mul.w	r3, r1, r3
 8015e96:	4413      	add	r3, r2
 8015e98:	3355      	adds	r3, #85	; 0x55
 8015e9a:	78ba      	ldrb	r2, [r7, #2]
 8015e9c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8015e9e:	2300      	movs	r3, #0
}
 8015ea0:	4618      	mov	r0, r3
 8015ea2:	3714      	adds	r7, #20
 8015ea4:	46bd      	mov	sp, r7
 8015ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015eaa:	4770      	bx	lr

08015eac <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8015eac:	b580      	push	{r7, lr}
 8015eae:	b082      	sub	sp, #8
 8015eb0:	af00      	add	r7, sp, #0
 8015eb2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8015eb4:	6878      	ldr	r0, [r7, #4]
 8015eb6:	f7ed f8ef 	bl	8003098 <HAL_Delay>
}
 8015eba:	bf00      	nop
 8015ebc:	3708      	adds	r7, #8
 8015ebe:	46bd      	mov	sp, r7
 8015ec0:	bd80      	pop	{r7, pc}
	...

08015ec4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015ec4:	b480      	push	{r7}
 8015ec6:	b085      	sub	sp, #20
 8015ec8:	af00      	add	r7, sp, #0
 8015eca:	4603      	mov	r3, r0
 8015ecc:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8015ece:	2300      	movs	r3, #0
 8015ed0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8015ed2:	79fb      	ldrb	r3, [r7, #7]
 8015ed4:	2b03      	cmp	r3, #3
 8015ed6:	d817      	bhi.n	8015f08 <USBH_Get_USB_Status+0x44>
 8015ed8:	a201      	add	r2, pc, #4	; (adr r2, 8015ee0 <USBH_Get_USB_Status+0x1c>)
 8015eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ede:	bf00      	nop
 8015ee0:	08015ef1 	.word	0x08015ef1
 8015ee4:	08015ef7 	.word	0x08015ef7
 8015ee8:	08015efd 	.word	0x08015efd
 8015eec:	08015f03 	.word	0x08015f03
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	73fb      	strb	r3, [r7, #15]
    break;
 8015ef4:	e00b      	b.n	8015f0e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8015ef6:	2302      	movs	r3, #2
 8015ef8:	73fb      	strb	r3, [r7, #15]
    break;
 8015efa:	e008      	b.n	8015f0e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8015efc:	2301      	movs	r3, #1
 8015efe:	73fb      	strb	r3, [r7, #15]
    break;
 8015f00:	e005      	b.n	8015f0e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8015f02:	2302      	movs	r3, #2
 8015f04:	73fb      	strb	r3, [r7, #15]
    break;
 8015f06:	e002      	b.n	8015f0e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8015f08:	2302      	movs	r3, #2
 8015f0a:	73fb      	strb	r3, [r7, #15]
    break;
 8015f0c:	bf00      	nop
  }
  return usb_status;
 8015f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f10:	4618      	mov	r0, r3
 8015f12:	3714      	adds	r7, #20
 8015f14:	46bd      	mov	sp, r7
 8015f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f1a:	4770      	bx	lr

08015f1c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8015f1c:	b580      	push	{r7, lr}
 8015f1e:	b084      	sub	sp, #16
 8015f20:	af00      	add	r7, sp, #0
 8015f22:	4603      	mov	r3, r0
 8015f24:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8015f26:	79fb      	ldrb	r3, [r7, #7]
 8015f28:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8015f2a:	79fb      	ldrb	r3, [r7, #7]
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d102      	bne.n	8015f36 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8015f30:	2300      	movs	r3, #0
 8015f32:	73fb      	strb	r3, [r7, #15]
 8015f34:	e001      	b.n	8015f3a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8015f36:	2301      	movs	r3, #1
 8015f38:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 8015f3a:	7bfb      	ldrb	r3, [r7, #15]
 8015f3c:	461a      	mov	r2, r3
 8015f3e:	2104      	movs	r1, #4
 8015f40:	4803      	ldr	r0, [pc, #12]	; (8015f50 <MX_DriverVbusFS+0x34>)
 8015f42:	f7ee f921 	bl	8004188 <HAL_GPIO_WritePin>
}
 8015f46:	bf00      	nop
 8015f48:	3710      	adds	r7, #16
 8015f4a:	46bd      	mov	sp, r7
 8015f4c:	bd80      	pop	{r7, pc}
 8015f4e:	bf00      	nop
 8015f50:	40022000 	.word	0x40022000

08015f54 <atoi>:
 8015f54:	220a      	movs	r2, #10
 8015f56:	2100      	movs	r1, #0
 8015f58:	f000 be4c 	b.w	8016bf4 <strtol>

08015f5c <__errno>:
 8015f5c:	4b01      	ldr	r3, [pc, #4]	; (8015f64 <__errno+0x8>)
 8015f5e:	6818      	ldr	r0, [r3, #0]
 8015f60:	4770      	bx	lr
 8015f62:	bf00      	nop
 8015f64:	2000012c 	.word	0x2000012c

08015f68 <__libc_init_array>:
 8015f68:	b570      	push	{r4, r5, r6, lr}
 8015f6a:	4d0d      	ldr	r5, [pc, #52]	; (8015fa0 <__libc_init_array+0x38>)
 8015f6c:	4c0d      	ldr	r4, [pc, #52]	; (8015fa4 <__libc_init_array+0x3c>)
 8015f6e:	1b64      	subs	r4, r4, r5
 8015f70:	10a4      	asrs	r4, r4, #2
 8015f72:	2600      	movs	r6, #0
 8015f74:	42a6      	cmp	r6, r4
 8015f76:	d109      	bne.n	8015f8c <__libc_init_array+0x24>
 8015f78:	4d0b      	ldr	r5, [pc, #44]	; (8015fa8 <__libc_init_array+0x40>)
 8015f7a:	4c0c      	ldr	r4, [pc, #48]	; (8015fac <__libc_init_array+0x44>)
 8015f7c:	f002 ff96 	bl	8018eac <_init>
 8015f80:	1b64      	subs	r4, r4, r5
 8015f82:	10a4      	asrs	r4, r4, #2
 8015f84:	2600      	movs	r6, #0
 8015f86:	42a6      	cmp	r6, r4
 8015f88:	d105      	bne.n	8015f96 <__libc_init_array+0x2e>
 8015f8a:	bd70      	pop	{r4, r5, r6, pc}
 8015f8c:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f90:	4798      	blx	r3
 8015f92:	3601      	adds	r6, #1
 8015f94:	e7ee      	b.n	8015f74 <__libc_init_array+0xc>
 8015f96:	f855 3b04 	ldr.w	r3, [r5], #4
 8015f9a:	4798      	blx	r3
 8015f9c:	3601      	adds	r6, #1
 8015f9e:	e7f2      	b.n	8015f86 <__libc_init_array+0x1e>
 8015fa0:	08019ddc 	.word	0x08019ddc
 8015fa4:	08019ddc 	.word	0x08019ddc
 8015fa8:	08019ddc 	.word	0x08019ddc
 8015fac:	08019de0 	.word	0x08019de0

08015fb0 <malloc>:
 8015fb0:	4b02      	ldr	r3, [pc, #8]	; (8015fbc <malloc+0xc>)
 8015fb2:	4601      	mov	r1, r0
 8015fb4:	6818      	ldr	r0, [r3, #0]
 8015fb6:	f000 b88d 	b.w	80160d4 <_malloc_r>
 8015fba:	bf00      	nop
 8015fbc:	2000012c 	.word	0x2000012c

08015fc0 <free>:
 8015fc0:	4b02      	ldr	r3, [pc, #8]	; (8015fcc <free+0xc>)
 8015fc2:	4601      	mov	r1, r0
 8015fc4:	6818      	ldr	r0, [r3, #0]
 8015fc6:	f000 b819 	b.w	8015ffc <_free_r>
 8015fca:	bf00      	nop
 8015fcc:	2000012c 	.word	0x2000012c

08015fd0 <memcpy>:
 8015fd0:	440a      	add	r2, r1
 8015fd2:	4291      	cmp	r1, r2
 8015fd4:	f100 33ff 	add.w	r3, r0, #4294967295
 8015fd8:	d100      	bne.n	8015fdc <memcpy+0xc>
 8015fda:	4770      	bx	lr
 8015fdc:	b510      	push	{r4, lr}
 8015fde:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015fe2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015fe6:	4291      	cmp	r1, r2
 8015fe8:	d1f9      	bne.n	8015fde <memcpy+0xe>
 8015fea:	bd10      	pop	{r4, pc}

08015fec <memset>:
 8015fec:	4402      	add	r2, r0
 8015fee:	4603      	mov	r3, r0
 8015ff0:	4293      	cmp	r3, r2
 8015ff2:	d100      	bne.n	8015ff6 <memset+0xa>
 8015ff4:	4770      	bx	lr
 8015ff6:	f803 1b01 	strb.w	r1, [r3], #1
 8015ffa:	e7f9      	b.n	8015ff0 <memset+0x4>

08015ffc <_free_r>:
 8015ffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8015ffe:	2900      	cmp	r1, #0
 8016000:	d044      	beq.n	801608c <_free_r+0x90>
 8016002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016006:	9001      	str	r0, [sp, #4]
 8016008:	2b00      	cmp	r3, #0
 801600a:	f1a1 0404 	sub.w	r4, r1, #4
 801600e:	bfb8      	it	lt
 8016010:	18e4      	addlt	r4, r4, r3
 8016012:	f001 fc77 	bl	8017904 <__malloc_lock>
 8016016:	4a1e      	ldr	r2, [pc, #120]	; (8016090 <_free_r+0x94>)
 8016018:	9801      	ldr	r0, [sp, #4]
 801601a:	6813      	ldr	r3, [r2, #0]
 801601c:	b933      	cbnz	r3, 801602c <_free_r+0x30>
 801601e:	6063      	str	r3, [r4, #4]
 8016020:	6014      	str	r4, [r2, #0]
 8016022:	b003      	add	sp, #12
 8016024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016028:	f001 bc72 	b.w	8017910 <__malloc_unlock>
 801602c:	42a3      	cmp	r3, r4
 801602e:	d908      	bls.n	8016042 <_free_r+0x46>
 8016030:	6825      	ldr	r5, [r4, #0]
 8016032:	1961      	adds	r1, r4, r5
 8016034:	428b      	cmp	r3, r1
 8016036:	bf01      	itttt	eq
 8016038:	6819      	ldreq	r1, [r3, #0]
 801603a:	685b      	ldreq	r3, [r3, #4]
 801603c:	1949      	addeq	r1, r1, r5
 801603e:	6021      	streq	r1, [r4, #0]
 8016040:	e7ed      	b.n	801601e <_free_r+0x22>
 8016042:	461a      	mov	r2, r3
 8016044:	685b      	ldr	r3, [r3, #4]
 8016046:	b10b      	cbz	r3, 801604c <_free_r+0x50>
 8016048:	42a3      	cmp	r3, r4
 801604a:	d9fa      	bls.n	8016042 <_free_r+0x46>
 801604c:	6811      	ldr	r1, [r2, #0]
 801604e:	1855      	adds	r5, r2, r1
 8016050:	42a5      	cmp	r5, r4
 8016052:	d10b      	bne.n	801606c <_free_r+0x70>
 8016054:	6824      	ldr	r4, [r4, #0]
 8016056:	4421      	add	r1, r4
 8016058:	1854      	adds	r4, r2, r1
 801605a:	42a3      	cmp	r3, r4
 801605c:	6011      	str	r1, [r2, #0]
 801605e:	d1e0      	bne.n	8016022 <_free_r+0x26>
 8016060:	681c      	ldr	r4, [r3, #0]
 8016062:	685b      	ldr	r3, [r3, #4]
 8016064:	6053      	str	r3, [r2, #4]
 8016066:	4421      	add	r1, r4
 8016068:	6011      	str	r1, [r2, #0]
 801606a:	e7da      	b.n	8016022 <_free_r+0x26>
 801606c:	d902      	bls.n	8016074 <_free_r+0x78>
 801606e:	230c      	movs	r3, #12
 8016070:	6003      	str	r3, [r0, #0]
 8016072:	e7d6      	b.n	8016022 <_free_r+0x26>
 8016074:	6825      	ldr	r5, [r4, #0]
 8016076:	1961      	adds	r1, r4, r5
 8016078:	428b      	cmp	r3, r1
 801607a:	bf04      	itt	eq
 801607c:	6819      	ldreq	r1, [r3, #0]
 801607e:	685b      	ldreq	r3, [r3, #4]
 8016080:	6063      	str	r3, [r4, #4]
 8016082:	bf04      	itt	eq
 8016084:	1949      	addeq	r1, r1, r5
 8016086:	6021      	streq	r1, [r4, #0]
 8016088:	6054      	str	r4, [r2, #4]
 801608a:	e7ca      	b.n	8016022 <_free_r+0x26>
 801608c:	b003      	add	sp, #12
 801608e:	bd30      	pop	{r4, r5, pc}
 8016090:	20004e5c 	.word	0x20004e5c

08016094 <sbrk_aligned>:
 8016094:	b570      	push	{r4, r5, r6, lr}
 8016096:	4e0e      	ldr	r6, [pc, #56]	; (80160d0 <sbrk_aligned+0x3c>)
 8016098:	460c      	mov	r4, r1
 801609a:	6831      	ldr	r1, [r6, #0]
 801609c:	4605      	mov	r5, r0
 801609e:	b911      	cbnz	r1, 80160a6 <sbrk_aligned+0x12>
 80160a0:	f000 fcf6 	bl	8016a90 <_sbrk_r>
 80160a4:	6030      	str	r0, [r6, #0]
 80160a6:	4621      	mov	r1, r4
 80160a8:	4628      	mov	r0, r5
 80160aa:	f000 fcf1 	bl	8016a90 <_sbrk_r>
 80160ae:	1c43      	adds	r3, r0, #1
 80160b0:	d00a      	beq.n	80160c8 <sbrk_aligned+0x34>
 80160b2:	1cc4      	adds	r4, r0, #3
 80160b4:	f024 0403 	bic.w	r4, r4, #3
 80160b8:	42a0      	cmp	r0, r4
 80160ba:	d007      	beq.n	80160cc <sbrk_aligned+0x38>
 80160bc:	1a21      	subs	r1, r4, r0
 80160be:	4628      	mov	r0, r5
 80160c0:	f000 fce6 	bl	8016a90 <_sbrk_r>
 80160c4:	3001      	adds	r0, #1
 80160c6:	d101      	bne.n	80160cc <sbrk_aligned+0x38>
 80160c8:	f04f 34ff 	mov.w	r4, #4294967295
 80160cc:	4620      	mov	r0, r4
 80160ce:	bd70      	pop	{r4, r5, r6, pc}
 80160d0:	20004e60 	.word	0x20004e60

080160d4 <_malloc_r>:
 80160d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80160d8:	1ccd      	adds	r5, r1, #3
 80160da:	f025 0503 	bic.w	r5, r5, #3
 80160de:	3508      	adds	r5, #8
 80160e0:	2d0c      	cmp	r5, #12
 80160e2:	bf38      	it	cc
 80160e4:	250c      	movcc	r5, #12
 80160e6:	2d00      	cmp	r5, #0
 80160e8:	4607      	mov	r7, r0
 80160ea:	db01      	blt.n	80160f0 <_malloc_r+0x1c>
 80160ec:	42a9      	cmp	r1, r5
 80160ee:	d905      	bls.n	80160fc <_malloc_r+0x28>
 80160f0:	230c      	movs	r3, #12
 80160f2:	603b      	str	r3, [r7, #0]
 80160f4:	2600      	movs	r6, #0
 80160f6:	4630      	mov	r0, r6
 80160f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80160fc:	4e2e      	ldr	r6, [pc, #184]	; (80161b8 <_malloc_r+0xe4>)
 80160fe:	f001 fc01 	bl	8017904 <__malloc_lock>
 8016102:	6833      	ldr	r3, [r6, #0]
 8016104:	461c      	mov	r4, r3
 8016106:	bb34      	cbnz	r4, 8016156 <_malloc_r+0x82>
 8016108:	4629      	mov	r1, r5
 801610a:	4638      	mov	r0, r7
 801610c:	f7ff ffc2 	bl	8016094 <sbrk_aligned>
 8016110:	1c43      	adds	r3, r0, #1
 8016112:	4604      	mov	r4, r0
 8016114:	d14d      	bne.n	80161b2 <_malloc_r+0xde>
 8016116:	6834      	ldr	r4, [r6, #0]
 8016118:	4626      	mov	r6, r4
 801611a:	2e00      	cmp	r6, #0
 801611c:	d140      	bne.n	80161a0 <_malloc_r+0xcc>
 801611e:	6823      	ldr	r3, [r4, #0]
 8016120:	4631      	mov	r1, r6
 8016122:	4638      	mov	r0, r7
 8016124:	eb04 0803 	add.w	r8, r4, r3
 8016128:	f000 fcb2 	bl	8016a90 <_sbrk_r>
 801612c:	4580      	cmp	r8, r0
 801612e:	d13a      	bne.n	80161a6 <_malloc_r+0xd2>
 8016130:	6821      	ldr	r1, [r4, #0]
 8016132:	3503      	adds	r5, #3
 8016134:	1a6d      	subs	r5, r5, r1
 8016136:	f025 0503 	bic.w	r5, r5, #3
 801613a:	3508      	adds	r5, #8
 801613c:	2d0c      	cmp	r5, #12
 801613e:	bf38      	it	cc
 8016140:	250c      	movcc	r5, #12
 8016142:	4629      	mov	r1, r5
 8016144:	4638      	mov	r0, r7
 8016146:	f7ff ffa5 	bl	8016094 <sbrk_aligned>
 801614a:	3001      	adds	r0, #1
 801614c:	d02b      	beq.n	80161a6 <_malloc_r+0xd2>
 801614e:	6823      	ldr	r3, [r4, #0]
 8016150:	442b      	add	r3, r5
 8016152:	6023      	str	r3, [r4, #0]
 8016154:	e00e      	b.n	8016174 <_malloc_r+0xa0>
 8016156:	6822      	ldr	r2, [r4, #0]
 8016158:	1b52      	subs	r2, r2, r5
 801615a:	d41e      	bmi.n	801619a <_malloc_r+0xc6>
 801615c:	2a0b      	cmp	r2, #11
 801615e:	d916      	bls.n	801618e <_malloc_r+0xba>
 8016160:	1961      	adds	r1, r4, r5
 8016162:	42a3      	cmp	r3, r4
 8016164:	6025      	str	r5, [r4, #0]
 8016166:	bf18      	it	ne
 8016168:	6059      	strne	r1, [r3, #4]
 801616a:	6863      	ldr	r3, [r4, #4]
 801616c:	bf08      	it	eq
 801616e:	6031      	streq	r1, [r6, #0]
 8016170:	5162      	str	r2, [r4, r5]
 8016172:	604b      	str	r3, [r1, #4]
 8016174:	4638      	mov	r0, r7
 8016176:	f104 060b 	add.w	r6, r4, #11
 801617a:	f001 fbc9 	bl	8017910 <__malloc_unlock>
 801617e:	f026 0607 	bic.w	r6, r6, #7
 8016182:	1d23      	adds	r3, r4, #4
 8016184:	1af2      	subs	r2, r6, r3
 8016186:	d0b6      	beq.n	80160f6 <_malloc_r+0x22>
 8016188:	1b9b      	subs	r3, r3, r6
 801618a:	50a3      	str	r3, [r4, r2]
 801618c:	e7b3      	b.n	80160f6 <_malloc_r+0x22>
 801618e:	6862      	ldr	r2, [r4, #4]
 8016190:	42a3      	cmp	r3, r4
 8016192:	bf0c      	ite	eq
 8016194:	6032      	streq	r2, [r6, #0]
 8016196:	605a      	strne	r2, [r3, #4]
 8016198:	e7ec      	b.n	8016174 <_malloc_r+0xa0>
 801619a:	4623      	mov	r3, r4
 801619c:	6864      	ldr	r4, [r4, #4]
 801619e:	e7b2      	b.n	8016106 <_malloc_r+0x32>
 80161a0:	4634      	mov	r4, r6
 80161a2:	6876      	ldr	r6, [r6, #4]
 80161a4:	e7b9      	b.n	801611a <_malloc_r+0x46>
 80161a6:	230c      	movs	r3, #12
 80161a8:	603b      	str	r3, [r7, #0]
 80161aa:	4638      	mov	r0, r7
 80161ac:	f001 fbb0 	bl	8017910 <__malloc_unlock>
 80161b0:	e7a1      	b.n	80160f6 <_malloc_r+0x22>
 80161b2:	6025      	str	r5, [r4, #0]
 80161b4:	e7de      	b.n	8016174 <_malloc_r+0xa0>
 80161b6:	bf00      	nop
 80161b8:	20004e5c 	.word	0x20004e5c

080161bc <__cvt>:
 80161bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80161c0:	ec55 4b10 	vmov	r4, r5, d0
 80161c4:	2d00      	cmp	r5, #0
 80161c6:	460e      	mov	r6, r1
 80161c8:	4619      	mov	r1, r3
 80161ca:	462b      	mov	r3, r5
 80161cc:	bfbb      	ittet	lt
 80161ce:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80161d2:	461d      	movlt	r5, r3
 80161d4:	2300      	movge	r3, #0
 80161d6:	232d      	movlt	r3, #45	; 0x2d
 80161d8:	700b      	strb	r3, [r1, #0]
 80161da:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80161dc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80161e0:	4691      	mov	r9, r2
 80161e2:	f023 0820 	bic.w	r8, r3, #32
 80161e6:	bfbc      	itt	lt
 80161e8:	4622      	movlt	r2, r4
 80161ea:	4614      	movlt	r4, r2
 80161ec:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80161f0:	d005      	beq.n	80161fe <__cvt+0x42>
 80161f2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80161f6:	d100      	bne.n	80161fa <__cvt+0x3e>
 80161f8:	3601      	adds	r6, #1
 80161fa:	2102      	movs	r1, #2
 80161fc:	e000      	b.n	8016200 <__cvt+0x44>
 80161fe:	2103      	movs	r1, #3
 8016200:	ab03      	add	r3, sp, #12
 8016202:	9301      	str	r3, [sp, #4]
 8016204:	ab02      	add	r3, sp, #8
 8016206:	9300      	str	r3, [sp, #0]
 8016208:	ec45 4b10 	vmov	d0, r4, r5
 801620c:	4653      	mov	r3, sl
 801620e:	4632      	mov	r2, r6
 8016210:	f000 fd86 	bl	8016d20 <_dtoa_r>
 8016214:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8016218:	4607      	mov	r7, r0
 801621a:	d102      	bne.n	8016222 <__cvt+0x66>
 801621c:	f019 0f01 	tst.w	r9, #1
 8016220:	d022      	beq.n	8016268 <__cvt+0xac>
 8016222:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8016226:	eb07 0906 	add.w	r9, r7, r6
 801622a:	d110      	bne.n	801624e <__cvt+0x92>
 801622c:	783b      	ldrb	r3, [r7, #0]
 801622e:	2b30      	cmp	r3, #48	; 0x30
 8016230:	d10a      	bne.n	8016248 <__cvt+0x8c>
 8016232:	2200      	movs	r2, #0
 8016234:	2300      	movs	r3, #0
 8016236:	4620      	mov	r0, r4
 8016238:	4629      	mov	r1, r5
 801623a:	f7ea fc65 	bl	8000b08 <__aeabi_dcmpeq>
 801623e:	b918      	cbnz	r0, 8016248 <__cvt+0x8c>
 8016240:	f1c6 0601 	rsb	r6, r6, #1
 8016244:	f8ca 6000 	str.w	r6, [sl]
 8016248:	f8da 3000 	ldr.w	r3, [sl]
 801624c:	4499      	add	r9, r3
 801624e:	2200      	movs	r2, #0
 8016250:	2300      	movs	r3, #0
 8016252:	4620      	mov	r0, r4
 8016254:	4629      	mov	r1, r5
 8016256:	f7ea fc57 	bl	8000b08 <__aeabi_dcmpeq>
 801625a:	b108      	cbz	r0, 8016260 <__cvt+0xa4>
 801625c:	f8cd 900c 	str.w	r9, [sp, #12]
 8016260:	2230      	movs	r2, #48	; 0x30
 8016262:	9b03      	ldr	r3, [sp, #12]
 8016264:	454b      	cmp	r3, r9
 8016266:	d307      	bcc.n	8016278 <__cvt+0xbc>
 8016268:	9b03      	ldr	r3, [sp, #12]
 801626a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801626c:	1bdb      	subs	r3, r3, r7
 801626e:	4638      	mov	r0, r7
 8016270:	6013      	str	r3, [r2, #0]
 8016272:	b004      	add	sp, #16
 8016274:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016278:	1c59      	adds	r1, r3, #1
 801627a:	9103      	str	r1, [sp, #12]
 801627c:	701a      	strb	r2, [r3, #0]
 801627e:	e7f0      	b.n	8016262 <__cvt+0xa6>

08016280 <__exponent>:
 8016280:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8016282:	4603      	mov	r3, r0
 8016284:	2900      	cmp	r1, #0
 8016286:	bfb8      	it	lt
 8016288:	4249      	neglt	r1, r1
 801628a:	f803 2b02 	strb.w	r2, [r3], #2
 801628e:	bfb4      	ite	lt
 8016290:	222d      	movlt	r2, #45	; 0x2d
 8016292:	222b      	movge	r2, #43	; 0x2b
 8016294:	2909      	cmp	r1, #9
 8016296:	7042      	strb	r2, [r0, #1]
 8016298:	dd2a      	ble.n	80162f0 <__exponent+0x70>
 801629a:	f10d 0407 	add.w	r4, sp, #7
 801629e:	46a4      	mov	ip, r4
 80162a0:	270a      	movs	r7, #10
 80162a2:	46a6      	mov	lr, r4
 80162a4:	460a      	mov	r2, r1
 80162a6:	fb91 f6f7 	sdiv	r6, r1, r7
 80162aa:	fb07 1516 	mls	r5, r7, r6, r1
 80162ae:	3530      	adds	r5, #48	; 0x30
 80162b0:	2a63      	cmp	r2, #99	; 0x63
 80162b2:	f104 34ff 	add.w	r4, r4, #4294967295
 80162b6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80162ba:	4631      	mov	r1, r6
 80162bc:	dcf1      	bgt.n	80162a2 <__exponent+0x22>
 80162be:	3130      	adds	r1, #48	; 0x30
 80162c0:	f1ae 0502 	sub.w	r5, lr, #2
 80162c4:	f804 1c01 	strb.w	r1, [r4, #-1]
 80162c8:	1c44      	adds	r4, r0, #1
 80162ca:	4629      	mov	r1, r5
 80162cc:	4561      	cmp	r1, ip
 80162ce:	d30a      	bcc.n	80162e6 <__exponent+0x66>
 80162d0:	f10d 0209 	add.w	r2, sp, #9
 80162d4:	eba2 020e 	sub.w	r2, r2, lr
 80162d8:	4565      	cmp	r5, ip
 80162da:	bf88      	it	hi
 80162dc:	2200      	movhi	r2, #0
 80162de:	4413      	add	r3, r2
 80162e0:	1a18      	subs	r0, r3, r0
 80162e2:	b003      	add	sp, #12
 80162e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80162e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80162ea:	f804 2f01 	strb.w	r2, [r4, #1]!
 80162ee:	e7ed      	b.n	80162cc <__exponent+0x4c>
 80162f0:	2330      	movs	r3, #48	; 0x30
 80162f2:	3130      	adds	r1, #48	; 0x30
 80162f4:	7083      	strb	r3, [r0, #2]
 80162f6:	70c1      	strb	r1, [r0, #3]
 80162f8:	1d03      	adds	r3, r0, #4
 80162fa:	e7f1      	b.n	80162e0 <__exponent+0x60>

080162fc <_printf_float>:
 80162fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016300:	ed2d 8b02 	vpush	{d8}
 8016304:	b08d      	sub	sp, #52	; 0x34
 8016306:	460c      	mov	r4, r1
 8016308:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801630c:	4616      	mov	r6, r2
 801630e:	461f      	mov	r7, r3
 8016310:	4605      	mov	r5, r0
 8016312:	f001 faf3 	bl	80178fc <_localeconv_r>
 8016316:	f8d0 a000 	ldr.w	sl, [r0]
 801631a:	4650      	mov	r0, sl
 801631c:	f7e9 ff78 	bl	8000210 <strlen>
 8016320:	2300      	movs	r3, #0
 8016322:	930a      	str	r3, [sp, #40]	; 0x28
 8016324:	6823      	ldr	r3, [r4, #0]
 8016326:	9305      	str	r3, [sp, #20]
 8016328:	f8d8 3000 	ldr.w	r3, [r8]
 801632c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8016330:	3307      	adds	r3, #7
 8016332:	f023 0307 	bic.w	r3, r3, #7
 8016336:	f103 0208 	add.w	r2, r3, #8
 801633a:	f8c8 2000 	str.w	r2, [r8]
 801633e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016342:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8016346:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801634a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801634e:	9307      	str	r3, [sp, #28]
 8016350:	f8cd 8018 	str.w	r8, [sp, #24]
 8016354:	ee08 0a10 	vmov	s16, r0
 8016358:	4b9f      	ldr	r3, [pc, #636]	; (80165d8 <_printf_float+0x2dc>)
 801635a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801635e:	f04f 32ff 	mov.w	r2, #4294967295
 8016362:	f7ea fc03 	bl	8000b6c <__aeabi_dcmpun>
 8016366:	bb88      	cbnz	r0, 80163cc <_printf_float+0xd0>
 8016368:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801636c:	4b9a      	ldr	r3, [pc, #616]	; (80165d8 <_printf_float+0x2dc>)
 801636e:	f04f 32ff 	mov.w	r2, #4294967295
 8016372:	f7ea fbdd 	bl	8000b30 <__aeabi_dcmple>
 8016376:	bb48      	cbnz	r0, 80163cc <_printf_float+0xd0>
 8016378:	2200      	movs	r2, #0
 801637a:	2300      	movs	r3, #0
 801637c:	4640      	mov	r0, r8
 801637e:	4649      	mov	r1, r9
 8016380:	f7ea fbcc 	bl	8000b1c <__aeabi_dcmplt>
 8016384:	b110      	cbz	r0, 801638c <_printf_float+0x90>
 8016386:	232d      	movs	r3, #45	; 0x2d
 8016388:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801638c:	4b93      	ldr	r3, [pc, #588]	; (80165dc <_printf_float+0x2e0>)
 801638e:	4894      	ldr	r0, [pc, #592]	; (80165e0 <_printf_float+0x2e4>)
 8016390:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8016394:	bf94      	ite	ls
 8016396:	4698      	movls	r8, r3
 8016398:	4680      	movhi	r8, r0
 801639a:	2303      	movs	r3, #3
 801639c:	6123      	str	r3, [r4, #16]
 801639e:	9b05      	ldr	r3, [sp, #20]
 80163a0:	f023 0204 	bic.w	r2, r3, #4
 80163a4:	6022      	str	r2, [r4, #0]
 80163a6:	f04f 0900 	mov.w	r9, #0
 80163aa:	9700      	str	r7, [sp, #0]
 80163ac:	4633      	mov	r3, r6
 80163ae:	aa0b      	add	r2, sp, #44	; 0x2c
 80163b0:	4621      	mov	r1, r4
 80163b2:	4628      	mov	r0, r5
 80163b4:	f000 f9d8 	bl	8016768 <_printf_common>
 80163b8:	3001      	adds	r0, #1
 80163ba:	f040 8090 	bne.w	80164de <_printf_float+0x1e2>
 80163be:	f04f 30ff 	mov.w	r0, #4294967295
 80163c2:	b00d      	add	sp, #52	; 0x34
 80163c4:	ecbd 8b02 	vpop	{d8}
 80163c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80163cc:	4642      	mov	r2, r8
 80163ce:	464b      	mov	r3, r9
 80163d0:	4640      	mov	r0, r8
 80163d2:	4649      	mov	r1, r9
 80163d4:	f7ea fbca 	bl	8000b6c <__aeabi_dcmpun>
 80163d8:	b140      	cbz	r0, 80163ec <_printf_float+0xf0>
 80163da:	464b      	mov	r3, r9
 80163dc:	2b00      	cmp	r3, #0
 80163de:	bfbc      	itt	lt
 80163e0:	232d      	movlt	r3, #45	; 0x2d
 80163e2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80163e6:	487f      	ldr	r0, [pc, #508]	; (80165e4 <_printf_float+0x2e8>)
 80163e8:	4b7f      	ldr	r3, [pc, #508]	; (80165e8 <_printf_float+0x2ec>)
 80163ea:	e7d1      	b.n	8016390 <_printf_float+0x94>
 80163ec:	6863      	ldr	r3, [r4, #4]
 80163ee:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80163f2:	9206      	str	r2, [sp, #24]
 80163f4:	1c5a      	adds	r2, r3, #1
 80163f6:	d13f      	bne.n	8016478 <_printf_float+0x17c>
 80163f8:	2306      	movs	r3, #6
 80163fa:	6063      	str	r3, [r4, #4]
 80163fc:	9b05      	ldr	r3, [sp, #20]
 80163fe:	6861      	ldr	r1, [r4, #4]
 8016400:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8016404:	2300      	movs	r3, #0
 8016406:	9303      	str	r3, [sp, #12]
 8016408:	ab0a      	add	r3, sp, #40	; 0x28
 801640a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801640e:	ab09      	add	r3, sp, #36	; 0x24
 8016410:	ec49 8b10 	vmov	d0, r8, r9
 8016414:	9300      	str	r3, [sp, #0]
 8016416:	6022      	str	r2, [r4, #0]
 8016418:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801641c:	4628      	mov	r0, r5
 801641e:	f7ff fecd 	bl	80161bc <__cvt>
 8016422:	9b06      	ldr	r3, [sp, #24]
 8016424:	9909      	ldr	r1, [sp, #36]	; 0x24
 8016426:	2b47      	cmp	r3, #71	; 0x47
 8016428:	4680      	mov	r8, r0
 801642a:	d108      	bne.n	801643e <_printf_float+0x142>
 801642c:	1cc8      	adds	r0, r1, #3
 801642e:	db02      	blt.n	8016436 <_printf_float+0x13a>
 8016430:	6863      	ldr	r3, [r4, #4]
 8016432:	4299      	cmp	r1, r3
 8016434:	dd41      	ble.n	80164ba <_printf_float+0x1be>
 8016436:	f1ab 0b02 	sub.w	fp, fp, #2
 801643a:	fa5f fb8b 	uxtb.w	fp, fp
 801643e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8016442:	d820      	bhi.n	8016486 <_printf_float+0x18a>
 8016444:	3901      	subs	r1, #1
 8016446:	465a      	mov	r2, fp
 8016448:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801644c:	9109      	str	r1, [sp, #36]	; 0x24
 801644e:	f7ff ff17 	bl	8016280 <__exponent>
 8016452:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8016454:	1813      	adds	r3, r2, r0
 8016456:	2a01      	cmp	r2, #1
 8016458:	4681      	mov	r9, r0
 801645a:	6123      	str	r3, [r4, #16]
 801645c:	dc02      	bgt.n	8016464 <_printf_float+0x168>
 801645e:	6822      	ldr	r2, [r4, #0]
 8016460:	07d2      	lsls	r2, r2, #31
 8016462:	d501      	bpl.n	8016468 <_printf_float+0x16c>
 8016464:	3301      	adds	r3, #1
 8016466:	6123      	str	r3, [r4, #16]
 8016468:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801646c:	2b00      	cmp	r3, #0
 801646e:	d09c      	beq.n	80163aa <_printf_float+0xae>
 8016470:	232d      	movs	r3, #45	; 0x2d
 8016472:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016476:	e798      	b.n	80163aa <_printf_float+0xae>
 8016478:	9a06      	ldr	r2, [sp, #24]
 801647a:	2a47      	cmp	r2, #71	; 0x47
 801647c:	d1be      	bne.n	80163fc <_printf_float+0x100>
 801647e:	2b00      	cmp	r3, #0
 8016480:	d1bc      	bne.n	80163fc <_printf_float+0x100>
 8016482:	2301      	movs	r3, #1
 8016484:	e7b9      	b.n	80163fa <_printf_float+0xfe>
 8016486:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801648a:	d118      	bne.n	80164be <_printf_float+0x1c2>
 801648c:	2900      	cmp	r1, #0
 801648e:	6863      	ldr	r3, [r4, #4]
 8016490:	dd0b      	ble.n	80164aa <_printf_float+0x1ae>
 8016492:	6121      	str	r1, [r4, #16]
 8016494:	b913      	cbnz	r3, 801649c <_printf_float+0x1a0>
 8016496:	6822      	ldr	r2, [r4, #0]
 8016498:	07d0      	lsls	r0, r2, #31
 801649a:	d502      	bpl.n	80164a2 <_printf_float+0x1a6>
 801649c:	3301      	adds	r3, #1
 801649e:	440b      	add	r3, r1
 80164a0:	6123      	str	r3, [r4, #16]
 80164a2:	65a1      	str	r1, [r4, #88]	; 0x58
 80164a4:	f04f 0900 	mov.w	r9, #0
 80164a8:	e7de      	b.n	8016468 <_printf_float+0x16c>
 80164aa:	b913      	cbnz	r3, 80164b2 <_printf_float+0x1b6>
 80164ac:	6822      	ldr	r2, [r4, #0]
 80164ae:	07d2      	lsls	r2, r2, #31
 80164b0:	d501      	bpl.n	80164b6 <_printf_float+0x1ba>
 80164b2:	3302      	adds	r3, #2
 80164b4:	e7f4      	b.n	80164a0 <_printf_float+0x1a4>
 80164b6:	2301      	movs	r3, #1
 80164b8:	e7f2      	b.n	80164a0 <_printf_float+0x1a4>
 80164ba:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80164be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80164c0:	4299      	cmp	r1, r3
 80164c2:	db05      	blt.n	80164d0 <_printf_float+0x1d4>
 80164c4:	6823      	ldr	r3, [r4, #0]
 80164c6:	6121      	str	r1, [r4, #16]
 80164c8:	07d8      	lsls	r0, r3, #31
 80164ca:	d5ea      	bpl.n	80164a2 <_printf_float+0x1a6>
 80164cc:	1c4b      	adds	r3, r1, #1
 80164ce:	e7e7      	b.n	80164a0 <_printf_float+0x1a4>
 80164d0:	2900      	cmp	r1, #0
 80164d2:	bfd4      	ite	le
 80164d4:	f1c1 0202 	rsble	r2, r1, #2
 80164d8:	2201      	movgt	r2, #1
 80164da:	4413      	add	r3, r2
 80164dc:	e7e0      	b.n	80164a0 <_printf_float+0x1a4>
 80164de:	6823      	ldr	r3, [r4, #0]
 80164e0:	055a      	lsls	r2, r3, #21
 80164e2:	d407      	bmi.n	80164f4 <_printf_float+0x1f8>
 80164e4:	6923      	ldr	r3, [r4, #16]
 80164e6:	4642      	mov	r2, r8
 80164e8:	4631      	mov	r1, r6
 80164ea:	4628      	mov	r0, r5
 80164ec:	47b8      	blx	r7
 80164ee:	3001      	adds	r0, #1
 80164f0:	d12c      	bne.n	801654c <_printf_float+0x250>
 80164f2:	e764      	b.n	80163be <_printf_float+0xc2>
 80164f4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80164f8:	f240 80e0 	bls.w	80166bc <_printf_float+0x3c0>
 80164fc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8016500:	2200      	movs	r2, #0
 8016502:	2300      	movs	r3, #0
 8016504:	f7ea fb00 	bl	8000b08 <__aeabi_dcmpeq>
 8016508:	2800      	cmp	r0, #0
 801650a:	d034      	beq.n	8016576 <_printf_float+0x27a>
 801650c:	4a37      	ldr	r2, [pc, #220]	; (80165ec <_printf_float+0x2f0>)
 801650e:	2301      	movs	r3, #1
 8016510:	4631      	mov	r1, r6
 8016512:	4628      	mov	r0, r5
 8016514:	47b8      	blx	r7
 8016516:	3001      	adds	r0, #1
 8016518:	f43f af51 	beq.w	80163be <_printf_float+0xc2>
 801651c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016520:	429a      	cmp	r2, r3
 8016522:	db02      	blt.n	801652a <_printf_float+0x22e>
 8016524:	6823      	ldr	r3, [r4, #0]
 8016526:	07d8      	lsls	r0, r3, #31
 8016528:	d510      	bpl.n	801654c <_printf_float+0x250>
 801652a:	ee18 3a10 	vmov	r3, s16
 801652e:	4652      	mov	r2, sl
 8016530:	4631      	mov	r1, r6
 8016532:	4628      	mov	r0, r5
 8016534:	47b8      	blx	r7
 8016536:	3001      	adds	r0, #1
 8016538:	f43f af41 	beq.w	80163be <_printf_float+0xc2>
 801653c:	f04f 0800 	mov.w	r8, #0
 8016540:	f104 091a 	add.w	r9, r4, #26
 8016544:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016546:	3b01      	subs	r3, #1
 8016548:	4543      	cmp	r3, r8
 801654a:	dc09      	bgt.n	8016560 <_printf_float+0x264>
 801654c:	6823      	ldr	r3, [r4, #0]
 801654e:	079b      	lsls	r3, r3, #30
 8016550:	f100 8105 	bmi.w	801675e <_printf_float+0x462>
 8016554:	68e0      	ldr	r0, [r4, #12]
 8016556:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8016558:	4298      	cmp	r0, r3
 801655a:	bfb8      	it	lt
 801655c:	4618      	movlt	r0, r3
 801655e:	e730      	b.n	80163c2 <_printf_float+0xc6>
 8016560:	2301      	movs	r3, #1
 8016562:	464a      	mov	r2, r9
 8016564:	4631      	mov	r1, r6
 8016566:	4628      	mov	r0, r5
 8016568:	47b8      	blx	r7
 801656a:	3001      	adds	r0, #1
 801656c:	f43f af27 	beq.w	80163be <_printf_float+0xc2>
 8016570:	f108 0801 	add.w	r8, r8, #1
 8016574:	e7e6      	b.n	8016544 <_printf_float+0x248>
 8016576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016578:	2b00      	cmp	r3, #0
 801657a:	dc39      	bgt.n	80165f0 <_printf_float+0x2f4>
 801657c:	4a1b      	ldr	r2, [pc, #108]	; (80165ec <_printf_float+0x2f0>)
 801657e:	2301      	movs	r3, #1
 8016580:	4631      	mov	r1, r6
 8016582:	4628      	mov	r0, r5
 8016584:	47b8      	blx	r7
 8016586:	3001      	adds	r0, #1
 8016588:	f43f af19 	beq.w	80163be <_printf_float+0xc2>
 801658c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8016590:	4313      	orrs	r3, r2
 8016592:	d102      	bne.n	801659a <_printf_float+0x29e>
 8016594:	6823      	ldr	r3, [r4, #0]
 8016596:	07d9      	lsls	r1, r3, #31
 8016598:	d5d8      	bpl.n	801654c <_printf_float+0x250>
 801659a:	ee18 3a10 	vmov	r3, s16
 801659e:	4652      	mov	r2, sl
 80165a0:	4631      	mov	r1, r6
 80165a2:	4628      	mov	r0, r5
 80165a4:	47b8      	blx	r7
 80165a6:	3001      	adds	r0, #1
 80165a8:	f43f af09 	beq.w	80163be <_printf_float+0xc2>
 80165ac:	f04f 0900 	mov.w	r9, #0
 80165b0:	f104 0a1a 	add.w	sl, r4, #26
 80165b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80165b6:	425b      	negs	r3, r3
 80165b8:	454b      	cmp	r3, r9
 80165ba:	dc01      	bgt.n	80165c0 <_printf_float+0x2c4>
 80165bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80165be:	e792      	b.n	80164e6 <_printf_float+0x1ea>
 80165c0:	2301      	movs	r3, #1
 80165c2:	4652      	mov	r2, sl
 80165c4:	4631      	mov	r1, r6
 80165c6:	4628      	mov	r0, r5
 80165c8:	47b8      	blx	r7
 80165ca:	3001      	adds	r0, #1
 80165cc:	f43f aef7 	beq.w	80163be <_printf_float+0xc2>
 80165d0:	f109 0901 	add.w	r9, r9, #1
 80165d4:	e7ee      	b.n	80165b4 <_printf_float+0x2b8>
 80165d6:	bf00      	nop
 80165d8:	7fefffff 	.word	0x7fefffff
 80165dc:	080199fc 	.word	0x080199fc
 80165e0:	08019a00 	.word	0x08019a00
 80165e4:	08019a08 	.word	0x08019a08
 80165e8:	08019a04 	.word	0x08019a04
 80165ec:	08019a0c 	.word	0x08019a0c
 80165f0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80165f2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80165f4:	429a      	cmp	r2, r3
 80165f6:	bfa8      	it	ge
 80165f8:	461a      	movge	r2, r3
 80165fa:	2a00      	cmp	r2, #0
 80165fc:	4691      	mov	r9, r2
 80165fe:	dc37      	bgt.n	8016670 <_printf_float+0x374>
 8016600:	f04f 0b00 	mov.w	fp, #0
 8016604:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016608:	f104 021a 	add.w	r2, r4, #26
 801660c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801660e:	9305      	str	r3, [sp, #20]
 8016610:	eba3 0309 	sub.w	r3, r3, r9
 8016614:	455b      	cmp	r3, fp
 8016616:	dc33      	bgt.n	8016680 <_printf_float+0x384>
 8016618:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801661c:	429a      	cmp	r2, r3
 801661e:	db3b      	blt.n	8016698 <_printf_float+0x39c>
 8016620:	6823      	ldr	r3, [r4, #0]
 8016622:	07da      	lsls	r2, r3, #31
 8016624:	d438      	bmi.n	8016698 <_printf_float+0x39c>
 8016626:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016628:	9a05      	ldr	r2, [sp, #20]
 801662a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801662c:	1a9a      	subs	r2, r3, r2
 801662e:	eba3 0901 	sub.w	r9, r3, r1
 8016632:	4591      	cmp	r9, r2
 8016634:	bfa8      	it	ge
 8016636:	4691      	movge	r9, r2
 8016638:	f1b9 0f00 	cmp.w	r9, #0
 801663c:	dc35      	bgt.n	80166aa <_printf_float+0x3ae>
 801663e:	f04f 0800 	mov.w	r8, #0
 8016642:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8016646:	f104 0a1a 	add.w	sl, r4, #26
 801664a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801664e:	1a9b      	subs	r3, r3, r2
 8016650:	eba3 0309 	sub.w	r3, r3, r9
 8016654:	4543      	cmp	r3, r8
 8016656:	f77f af79 	ble.w	801654c <_printf_float+0x250>
 801665a:	2301      	movs	r3, #1
 801665c:	4652      	mov	r2, sl
 801665e:	4631      	mov	r1, r6
 8016660:	4628      	mov	r0, r5
 8016662:	47b8      	blx	r7
 8016664:	3001      	adds	r0, #1
 8016666:	f43f aeaa 	beq.w	80163be <_printf_float+0xc2>
 801666a:	f108 0801 	add.w	r8, r8, #1
 801666e:	e7ec      	b.n	801664a <_printf_float+0x34e>
 8016670:	4613      	mov	r3, r2
 8016672:	4631      	mov	r1, r6
 8016674:	4642      	mov	r2, r8
 8016676:	4628      	mov	r0, r5
 8016678:	47b8      	blx	r7
 801667a:	3001      	adds	r0, #1
 801667c:	d1c0      	bne.n	8016600 <_printf_float+0x304>
 801667e:	e69e      	b.n	80163be <_printf_float+0xc2>
 8016680:	2301      	movs	r3, #1
 8016682:	4631      	mov	r1, r6
 8016684:	4628      	mov	r0, r5
 8016686:	9205      	str	r2, [sp, #20]
 8016688:	47b8      	blx	r7
 801668a:	3001      	adds	r0, #1
 801668c:	f43f ae97 	beq.w	80163be <_printf_float+0xc2>
 8016690:	9a05      	ldr	r2, [sp, #20]
 8016692:	f10b 0b01 	add.w	fp, fp, #1
 8016696:	e7b9      	b.n	801660c <_printf_float+0x310>
 8016698:	ee18 3a10 	vmov	r3, s16
 801669c:	4652      	mov	r2, sl
 801669e:	4631      	mov	r1, r6
 80166a0:	4628      	mov	r0, r5
 80166a2:	47b8      	blx	r7
 80166a4:	3001      	adds	r0, #1
 80166a6:	d1be      	bne.n	8016626 <_printf_float+0x32a>
 80166a8:	e689      	b.n	80163be <_printf_float+0xc2>
 80166aa:	9a05      	ldr	r2, [sp, #20]
 80166ac:	464b      	mov	r3, r9
 80166ae:	4442      	add	r2, r8
 80166b0:	4631      	mov	r1, r6
 80166b2:	4628      	mov	r0, r5
 80166b4:	47b8      	blx	r7
 80166b6:	3001      	adds	r0, #1
 80166b8:	d1c1      	bne.n	801663e <_printf_float+0x342>
 80166ba:	e680      	b.n	80163be <_printf_float+0xc2>
 80166bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80166be:	2a01      	cmp	r2, #1
 80166c0:	dc01      	bgt.n	80166c6 <_printf_float+0x3ca>
 80166c2:	07db      	lsls	r3, r3, #31
 80166c4:	d538      	bpl.n	8016738 <_printf_float+0x43c>
 80166c6:	2301      	movs	r3, #1
 80166c8:	4642      	mov	r2, r8
 80166ca:	4631      	mov	r1, r6
 80166cc:	4628      	mov	r0, r5
 80166ce:	47b8      	blx	r7
 80166d0:	3001      	adds	r0, #1
 80166d2:	f43f ae74 	beq.w	80163be <_printf_float+0xc2>
 80166d6:	ee18 3a10 	vmov	r3, s16
 80166da:	4652      	mov	r2, sl
 80166dc:	4631      	mov	r1, r6
 80166de:	4628      	mov	r0, r5
 80166e0:	47b8      	blx	r7
 80166e2:	3001      	adds	r0, #1
 80166e4:	f43f ae6b 	beq.w	80163be <_printf_float+0xc2>
 80166e8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80166ec:	2200      	movs	r2, #0
 80166ee:	2300      	movs	r3, #0
 80166f0:	f7ea fa0a 	bl	8000b08 <__aeabi_dcmpeq>
 80166f4:	b9d8      	cbnz	r0, 801672e <_printf_float+0x432>
 80166f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80166f8:	f108 0201 	add.w	r2, r8, #1
 80166fc:	3b01      	subs	r3, #1
 80166fe:	4631      	mov	r1, r6
 8016700:	4628      	mov	r0, r5
 8016702:	47b8      	blx	r7
 8016704:	3001      	adds	r0, #1
 8016706:	d10e      	bne.n	8016726 <_printf_float+0x42a>
 8016708:	e659      	b.n	80163be <_printf_float+0xc2>
 801670a:	2301      	movs	r3, #1
 801670c:	4652      	mov	r2, sl
 801670e:	4631      	mov	r1, r6
 8016710:	4628      	mov	r0, r5
 8016712:	47b8      	blx	r7
 8016714:	3001      	adds	r0, #1
 8016716:	f43f ae52 	beq.w	80163be <_printf_float+0xc2>
 801671a:	f108 0801 	add.w	r8, r8, #1
 801671e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016720:	3b01      	subs	r3, #1
 8016722:	4543      	cmp	r3, r8
 8016724:	dcf1      	bgt.n	801670a <_printf_float+0x40e>
 8016726:	464b      	mov	r3, r9
 8016728:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801672c:	e6dc      	b.n	80164e8 <_printf_float+0x1ec>
 801672e:	f04f 0800 	mov.w	r8, #0
 8016732:	f104 0a1a 	add.w	sl, r4, #26
 8016736:	e7f2      	b.n	801671e <_printf_float+0x422>
 8016738:	2301      	movs	r3, #1
 801673a:	4642      	mov	r2, r8
 801673c:	e7df      	b.n	80166fe <_printf_float+0x402>
 801673e:	2301      	movs	r3, #1
 8016740:	464a      	mov	r2, r9
 8016742:	4631      	mov	r1, r6
 8016744:	4628      	mov	r0, r5
 8016746:	47b8      	blx	r7
 8016748:	3001      	adds	r0, #1
 801674a:	f43f ae38 	beq.w	80163be <_printf_float+0xc2>
 801674e:	f108 0801 	add.w	r8, r8, #1
 8016752:	68e3      	ldr	r3, [r4, #12]
 8016754:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8016756:	1a5b      	subs	r3, r3, r1
 8016758:	4543      	cmp	r3, r8
 801675a:	dcf0      	bgt.n	801673e <_printf_float+0x442>
 801675c:	e6fa      	b.n	8016554 <_printf_float+0x258>
 801675e:	f04f 0800 	mov.w	r8, #0
 8016762:	f104 0919 	add.w	r9, r4, #25
 8016766:	e7f4      	b.n	8016752 <_printf_float+0x456>

08016768 <_printf_common>:
 8016768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801676c:	4616      	mov	r6, r2
 801676e:	4699      	mov	r9, r3
 8016770:	688a      	ldr	r2, [r1, #8]
 8016772:	690b      	ldr	r3, [r1, #16]
 8016774:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8016778:	4293      	cmp	r3, r2
 801677a:	bfb8      	it	lt
 801677c:	4613      	movlt	r3, r2
 801677e:	6033      	str	r3, [r6, #0]
 8016780:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8016784:	4607      	mov	r7, r0
 8016786:	460c      	mov	r4, r1
 8016788:	b10a      	cbz	r2, 801678e <_printf_common+0x26>
 801678a:	3301      	adds	r3, #1
 801678c:	6033      	str	r3, [r6, #0]
 801678e:	6823      	ldr	r3, [r4, #0]
 8016790:	0699      	lsls	r1, r3, #26
 8016792:	bf42      	ittt	mi
 8016794:	6833      	ldrmi	r3, [r6, #0]
 8016796:	3302      	addmi	r3, #2
 8016798:	6033      	strmi	r3, [r6, #0]
 801679a:	6825      	ldr	r5, [r4, #0]
 801679c:	f015 0506 	ands.w	r5, r5, #6
 80167a0:	d106      	bne.n	80167b0 <_printf_common+0x48>
 80167a2:	f104 0a19 	add.w	sl, r4, #25
 80167a6:	68e3      	ldr	r3, [r4, #12]
 80167a8:	6832      	ldr	r2, [r6, #0]
 80167aa:	1a9b      	subs	r3, r3, r2
 80167ac:	42ab      	cmp	r3, r5
 80167ae:	dc26      	bgt.n	80167fe <_printf_common+0x96>
 80167b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80167b4:	1e13      	subs	r3, r2, #0
 80167b6:	6822      	ldr	r2, [r4, #0]
 80167b8:	bf18      	it	ne
 80167ba:	2301      	movne	r3, #1
 80167bc:	0692      	lsls	r2, r2, #26
 80167be:	d42b      	bmi.n	8016818 <_printf_common+0xb0>
 80167c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80167c4:	4649      	mov	r1, r9
 80167c6:	4638      	mov	r0, r7
 80167c8:	47c0      	blx	r8
 80167ca:	3001      	adds	r0, #1
 80167cc:	d01e      	beq.n	801680c <_printf_common+0xa4>
 80167ce:	6823      	ldr	r3, [r4, #0]
 80167d0:	68e5      	ldr	r5, [r4, #12]
 80167d2:	6832      	ldr	r2, [r6, #0]
 80167d4:	f003 0306 	and.w	r3, r3, #6
 80167d8:	2b04      	cmp	r3, #4
 80167da:	bf08      	it	eq
 80167dc:	1aad      	subeq	r5, r5, r2
 80167de:	68a3      	ldr	r3, [r4, #8]
 80167e0:	6922      	ldr	r2, [r4, #16]
 80167e2:	bf0c      	ite	eq
 80167e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80167e8:	2500      	movne	r5, #0
 80167ea:	4293      	cmp	r3, r2
 80167ec:	bfc4      	itt	gt
 80167ee:	1a9b      	subgt	r3, r3, r2
 80167f0:	18ed      	addgt	r5, r5, r3
 80167f2:	2600      	movs	r6, #0
 80167f4:	341a      	adds	r4, #26
 80167f6:	42b5      	cmp	r5, r6
 80167f8:	d11a      	bne.n	8016830 <_printf_common+0xc8>
 80167fa:	2000      	movs	r0, #0
 80167fc:	e008      	b.n	8016810 <_printf_common+0xa8>
 80167fe:	2301      	movs	r3, #1
 8016800:	4652      	mov	r2, sl
 8016802:	4649      	mov	r1, r9
 8016804:	4638      	mov	r0, r7
 8016806:	47c0      	blx	r8
 8016808:	3001      	adds	r0, #1
 801680a:	d103      	bne.n	8016814 <_printf_common+0xac>
 801680c:	f04f 30ff 	mov.w	r0, #4294967295
 8016810:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016814:	3501      	adds	r5, #1
 8016816:	e7c6      	b.n	80167a6 <_printf_common+0x3e>
 8016818:	18e1      	adds	r1, r4, r3
 801681a:	1c5a      	adds	r2, r3, #1
 801681c:	2030      	movs	r0, #48	; 0x30
 801681e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8016822:	4422      	add	r2, r4
 8016824:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8016828:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801682c:	3302      	adds	r3, #2
 801682e:	e7c7      	b.n	80167c0 <_printf_common+0x58>
 8016830:	2301      	movs	r3, #1
 8016832:	4622      	mov	r2, r4
 8016834:	4649      	mov	r1, r9
 8016836:	4638      	mov	r0, r7
 8016838:	47c0      	blx	r8
 801683a:	3001      	adds	r0, #1
 801683c:	d0e6      	beq.n	801680c <_printf_common+0xa4>
 801683e:	3601      	adds	r6, #1
 8016840:	e7d9      	b.n	80167f6 <_printf_common+0x8e>
	...

08016844 <_printf_i>:
 8016844:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8016848:	7e0f      	ldrb	r7, [r1, #24]
 801684a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801684c:	2f78      	cmp	r7, #120	; 0x78
 801684e:	4691      	mov	r9, r2
 8016850:	4680      	mov	r8, r0
 8016852:	460c      	mov	r4, r1
 8016854:	469a      	mov	sl, r3
 8016856:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801685a:	d807      	bhi.n	801686c <_printf_i+0x28>
 801685c:	2f62      	cmp	r7, #98	; 0x62
 801685e:	d80a      	bhi.n	8016876 <_printf_i+0x32>
 8016860:	2f00      	cmp	r7, #0
 8016862:	f000 80d8 	beq.w	8016a16 <_printf_i+0x1d2>
 8016866:	2f58      	cmp	r7, #88	; 0x58
 8016868:	f000 80a3 	beq.w	80169b2 <_printf_i+0x16e>
 801686c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8016870:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8016874:	e03a      	b.n	80168ec <_printf_i+0xa8>
 8016876:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801687a:	2b15      	cmp	r3, #21
 801687c:	d8f6      	bhi.n	801686c <_printf_i+0x28>
 801687e:	a101      	add	r1, pc, #4	; (adr r1, 8016884 <_printf_i+0x40>)
 8016880:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8016884:	080168dd 	.word	0x080168dd
 8016888:	080168f1 	.word	0x080168f1
 801688c:	0801686d 	.word	0x0801686d
 8016890:	0801686d 	.word	0x0801686d
 8016894:	0801686d 	.word	0x0801686d
 8016898:	0801686d 	.word	0x0801686d
 801689c:	080168f1 	.word	0x080168f1
 80168a0:	0801686d 	.word	0x0801686d
 80168a4:	0801686d 	.word	0x0801686d
 80168a8:	0801686d 	.word	0x0801686d
 80168ac:	0801686d 	.word	0x0801686d
 80168b0:	080169fd 	.word	0x080169fd
 80168b4:	08016921 	.word	0x08016921
 80168b8:	080169df 	.word	0x080169df
 80168bc:	0801686d 	.word	0x0801686d
 80168c0:	0801686d 	.word	0x0801686d
 80168c4:	08016a1f 	.word	0x08016a1f
 80168c8:	0801686d 	.word	0x0801686d
 80168cc:	08016921 	.word	0x08016921
 80168d0:	0801686d 	.word	0x0801686d
 80168d4:	0801686d 	.word	0x0801686d
 80168d8:	080169e7 	.word	0x080169e7
 80168dc:	682b      	ldr	r3, [r5, #0]
 80168de:	1d1a      	adds	r2, r3, #4
 80168e0:	681b      	ldr	r3, [r3, #0]
 80168e2:	602a      	str	r2, [r5, #0]
 80168e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80168e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80168ec:	2301      	movs	r3, #1
 80168ee:	e0a3      	b.n	8016a38 <_printf_i+0x1f4>
 80168f0:	6820      	ldr	r0, [r4, #0]
 80168f2:	6829      	ldr	r1, [r5, #0]
 80168f4:	0606      	lsls	r6, r0, #24
 80168f6:	f101 0304 	add.w	r3, r1, #4
 80168fa:	d50a      	bpl.n	8016912 <_printf_i+0xce>
 80168fc:	680e      	ldr	r6, [r1, #0]
 80168fe:	602b      	str	r3, [r5, #0]
 8016900:	2e00      	cmp	r6, #0
 8016902:	da03      	bge.n	801690c <_printf_i+0xc8>
 8016904:	232d      	movs	r3, #45	; 0x2d
 8016906:	4276      	negs	r6, r6
 8016908:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801690c:	485e      	ldr	r0, [pc, #376]	; (8016a88 <_printf_i+0x244>)
 801690e:	230a      	movs	r3, #10
 8016910:	e019      	b.n	8016946 <_printf_i+0x102>
 8016912:	680e      	ldr	r6, [r1, #0]
 8016914:	602b      	str	r3, [r5, #0]
 8016916:	f010 0f40 	tst.w	r0, #64	; 0x40
 801691a:	bf18      	it	ne
 801691c:	b236      	sxthne	r6, r6
 801691e:	e7ef      	b.n	8016900 <_printf_i+0xbc>
 8016920:	682b      	ldr	r3, [r5, #0]
 8016922:	6820      	ldr	r0, [r4, #0]
 8016924:	1d19      	adds	r1, r3, #4
 8016926:	6029      	str	r1, [r5, #0]
 8016928:	0601      	lsls	r1, r0, #24
 801692a:	d501      	bpl.n	8016930 <_printf_i+0xec>
 801692c:	681e      	ldr	r6, [r3, #0]
 801692e:	e002      	b.n	8016936 <_printf_i+0xf2>
 8016930:	0646      	lsls	r6, r0, #25
 8016932:	d5fb      	bpl.n	801692c <_printf_i+0xe8>
 8016934:	881e      	ldrh	r6, [r3, #0]
 8016936:	4854      	ldr	r0, [pc, #336]	; (8016a88 <_printf_i+0x244>)
 8016938:	2f6f      	cmp	r7, #111	; 0x6f
 801693a:	bf0c      	ite	eq
 801693c:	2308      	moveq	r3, #8
 801693e:	230a      	movne	r3, #10
 8016940:	2100      	movs	r1, #0
 8016942:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8016946:	6865      	ldr	r5, [r4, #4]
 8016948:	60a5      	str	r5, [r4, #8]
 801694a:	2d00      	cmp	r5, #0
 801694c:	bfa2      	ittt	ge
 801694e:	6821      	ldrge	r1, [r4, #0]
 8016950:	f021 0104 	bicge.w	r1, r1, #4
 8016954:	6021      	strge	r1, [r4, #0]
 8016956:	b90e      	cbnz	r6, 801695c <_printf_i+0x118>
 8016958:	2d00      	cmp	r5, #0
 801695a:	d04d      	beq.n	80169f8 <_printf_i+0x1b4>
 801695c:	4615      	mov	r5, r2
 801695e:	fbb6 f1f3 	udiv	r1, r6, r3
 8016962:	fb03 6711 	mls	r7, r3, r1, r6
 8016966:	5dc7      	ldrb	r7, [r0, r7]
 8016968:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801696c:	4637      	mov	r7, r6
 801696e:	42bb      	cmp	r3, r7
 8016970:	460e      	mov	r6, r1
 8016972:	d9f4      	bls.n	801695e <_printf_i+0x11a>
 8016974:	2b08      	cmp	r3, #8
 8016976:	d10b      	bne.n	8016990 <_printf_i+0x14c>
 8016978:	6823      	ldr	r3, [r4, #0]
 801697a:	07de      	lsls	r6, r3, #31
 801697c:	d508      	bpl.n	8016990 <_printf_i+0x14c>
 801697e:	6923      	ldr	r3, [r4, #16]
 8016980:	6861      	ldr	r1, [r4, #4]
 8016982:	4299      	cmp	r1, r3
 8016984:	bfde      	ittt	le
 8016986:	2330      	movle	r3, #48	; 0x30
 8016988:	f805 3c01 	strble.w	r3, [r5, #-1]
 801698c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8016990:	1b52      	subs	r2, r2, r5
 8016992:	6122      	str	r2, [r4, #16]
 8016994:	f8cd a000 	str.w	sl, [sp]
 8016998:	464b      	mov	r3, r9
 801699a:	aa03      	add	r2, sp, #12
 801699c:	4621      	mov	r1, r4
 801699e:	4640      	mov	r0, r8
 80169a0:	f7ff fee2 	bl	8016768 <_printf_common>
 80169a4:	3001      	adds	r0, #1
 80169a6:	d14c      	bne.n	8016a42 <_printf_i+0x1fe>
 80169a8:	f04f 30ff 	mov.w	r0, #4294967295
 80169ac:	b004      	add	sp, #16
 80169ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80169b2:	4835      	ldr	r0, [pc, #212]	; (8016a88 <_printf_i+0x244>)
 80169b4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80169b8:	6829      	ldr	r1, [r5, #0]
 80169ba:	6823      	ldr	r3, [r4, #0]
 80169bc:	f851 6b04 	ldr.w	r6, [r1], #4
 80169c0:	6029      	str	r1, [r5, #0]
 80169c2:	061d      	lsls	r5, r3, #24
 80169c4:	d514      	bpl.n	80169f0 <_printf_i+0x1ac>
 80169c6:	07df      	lsls	r7, r3, #31
 80169c8:	bf44      	itt	mi
 80169ca:	f043 0320 	orrmi.w	r3, r3, #32
 80169ce:	6023      	strmi	r3, [r4, #0]
 80169d0:	b91e      	cbnz	r6, 80169da <_printf_i+0x196>
 80169d2:	6823      	ldr	r3, [r4, #0]
 80169d4:	f023 0320 	bic.w	r3, r3, #32
 80169d8:	6023      	str	r3, [r4, #0]
 80169da:	2310      	movs	r3, #16
 80169dc:	e7b0      	b.n	8016940 <_printf_i+0xfc>
 80169de:	6823      	ldr	r3, [r4, #0]
 80169e0:	f043 0320 	orr.w	r3, r3, #32
 80169e4:	6023      	str	r3, [r4, #0]
 80169e6:	2378      	movs	r3, #120	; 0x78
 80169e8:	4828      	ldr	r0, [pc, #160]	; (8016a8c <_printf_i+0x248>)
 80169ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80169ee:	e7e3      	b.n	80169b8 <_printf_i+0x174>
 80169f0:	0659      	lsls	r1, r3, #25
 80169f2:	bf48      	it	mi
 80169f4:	b2b6      	uxthmi	r6, r6
 80169f6:	e7e6      	b.n	80169c6 <_printf_i+0x182>
 80169f8:	4615      	mov	r5, r2
 80169fa:	e7bb      	b.n	8016974 <_printf_i+0x130>
 80169fc:	682b      	ldr	r3, [r5, #0]
 80169fe:	6826      	ldr	r6, [r4, #0]
 8016a00:	6961      	ldr	r1, [r4, #20]
 8016a02:	1d18      	adds	r0, r3, #4
 8016a04:	6028      	str	r0, [r5, #0]
 8016a06:	0635      	lsls	r5, r6, #24
 8016a08:	681b      	ldr	r3, [r3, #0]
 8016a0a:	d501      	bpl.n	8016a10 <_printf_i+0x1cc>
 8016a0c:	6019      	str	r1, [r3, #0]
 8016a0e:	e002      	b.n	8016a16 <_printf_i+0x1d2>
 8016a10:	0670      	lsls	r0, r6, #25
 8016a12:	d5fb      	bpl.n	8016a0c <_printf_i+0x1c8>
 8016a14:	8019      	strh	r1, [r3, #0]
 8016a16:	2300      	movs	r3, #0
 8016a18:	6123      	str	r3, [r4, #16]
 8016a1a:	4615      	mov	r5, r2
 8016a1c:	e7ba      	b.n	8016994 <_printf_i+0x150>
 8016a1e:	682b      	ldr	r3, [r5, #0]
 8016a20:	1d1a      	adds	r2, r3, #4
 8016a22:	602a      	str	r2, [r5, #0]
 8016a24:	681d      	ldr	r5, [r3, #0]
 8016a26:	6862      	ldr	r2, [r4, #4]
 8016a28:	2100      	movs	r1, #0
 8016a2a:	4628      	mov	r0, r5
 8016a2c:	f7e9 fbf8 	bl	8000220 <memchr>
 8016a30:	b108      	cbz	r0, 8016a36 <_printf_i+0x1f2>
 8016a32:	1b40      	subs	r0, r0, r5
 8016a34:	6060      	str	r0, [r4, #4]
 8016a36:	6863      	ldr	r3, [r4, #4]
 8016a38:	6123      	str	r3, [r4, #16]
 8016a3a:	2300      	movs	r3, #0
 8016a3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8016a40:	e7a8      	b.n	8016994 <_printf_i+0x150>
 8016a42:	6923      	ldr	r3, [r4, #16]
 8016a44:	462a      	mov	r2, r5
 8016a46:	4649      	mov	r1, r9
 8016a48:	4640      	mov	r0, r8
 8016a4a:	47d0      	blx	sl
 8016a4c:	3001      	adds	r0, #1
 8016a4e:	d0ab      	beq.n	80169a8 <_printf_i+0x164>
 8016a50:	6823      	ldr	r3, [r4, #0]
 8016a52:	079b      	lsls	r3, r3, #30
 8016a54:	d413      	bmi.n	8016a7e <_printf_i+0x23a>
 8016a56:	68e0      	ldr	r0, [r4, #12]
 8016a58:	9b03      	ldr	r3, [sp, #12]
 8016a5a:	4298      	cmp	r0, r3
 8016a5c:	bfb8      	it	lt
 8016a5e:	4618      	movlt	r0, r3
 8016a60:	e7a4      	b.n	80169ac <_printf_i+0x168>
 8016a62:	2301      	movs	r3, #1
 8016a64:	4632      	mov	r2, r6
 8016a66:	4649      	mov	r1, r9
 8016a68:	4640      	mov	r0, r8
 8016a6a:	47d0      	blx	sl
 8016a6c:	3001      	adds	r0, #1
 8016a6e:	d09b      	beq.n	80169a8 <_printf_i+0x164>
 8016a70:	3501      	adds	r5, #1
 8016a72:	68e3      	ldr	r3, [r4, #12]
 8016a74:	9903      	ldr	r1, [sp, #12]
 8016a76:	1a5b      	subs	r3, r3, r1
 8016a78:	42ab      	cmp	r3, r5
 8016a7a:	dcf2      	bgt.n	8016a62 <_printf_i+0x21e>
 8016a7c:	e7eb      	b.n	8016a56 <_printf_i+0x212>
 8016a7e:	2500      	movs	r5, #0
 8016a80:	f104 0619 	add.w	r6, r4, #25
 8016a84:	e7f5      	b.n	8016a72 <_printf_i+0x22e>
 8016a86:	bf00      	nop
 8016a88:	08019a0e 	.word	0x08019a0e
 8016a8c:	08019a1f 	.word	0x08019a1f

08016a90 <_sbrk_r>:
 8016a90:	b538      	push	{r3, r4, r5, lr}
 8016a92:	4d06      	ldr	r5, [pc, #24]	; (8016aac <_sbrk_r+0x1c>)
 8016a94:	2300      	movs	r3, #0
 8016a96:	4604      	mov	r4, r0
 8016a98:	4608      	mov	r0, r1
 8016a9a:	602b      	str	r3, [r5, #0]
 8016a9c:	f7ec fa2e 	bl	8002efc <_sbrk>
 8016aa0:	1c43      	adds	r3, r0, #1
 8016aa2:	d102      	bne.n	8016aaa <_sbrk_r+0x1a>
 8016aa4:	682b      	ldr	r3, [r5, #0]
 8016aa6:	b103      	cbz	r3, 8016aaa <_sbrk_r+0x1a>
 8016aa8:	6023      	str	r3, [r4, #0]
 8016aaa:	bd38      	pop	{r3, r4, r5, pc}
 8016aac:	20004e64 	.word	0x20004e64

08016ab0 <siprintf>:
 8016ab0:	b40e      	push	{r1, r2, r3}
 8016ab2:	b500      	push	{lr}
 8016ab4:	b09c      	sub	sp, #112	; 0x70
 8016ab6:	ab1d      	add	r3, sp, #116	; 0x74
 8016ab8:	9002      	str	r0, [sp, #8]
 8016aba:	9006      	str	r0, [sp, #24]
 8016abc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016ac0:	4809      	ldr	r0, [pc, #36]	; (8016ae8 <siprintf+0x38>)
 8016ac2:	9107      	str	r1, [sp, #28]
 8016ac4:	9104      	str	r1, [sp, #16]
 8016ac6:	4909      	ldr	r1, [pc, #36]	; (8016aec <siprintf+0x3c>)
 8016ac8:	f853 2b04 	ldr.w	r2, [r3], #4
 8016acc:	9105      	str	r1, [sp, #20]
 8016ace:	6800      	ldr	r0, [r0, #0]
 8016ad0:	9301      	str	r3, [sp, #4]
 8016ad2:	a902      	add	r1, sp, #8
 8016ad4:	f001 fb18 	bl	8018108 <_svfiprintf_r>
 8016ad8:	9b02      	ldr	r3, [sp, #8]
 8016ada:	2200      	movs	r2, #0
 8016adc:	701a      	strb	r2, [r3, #0]
 8016ade:	b01c      	add	sp, #112	; 0x70
 8016ae0:	f85d eb04 	ldr.w	lr, [sp], #4
 8016ae4:	b003      	add	sp, #12
 8016ae6:	4770      	bx	lr
 8016ae8:	2000012c 	.word	0x2000012c
 8016aec:	ffff0208 	.word	0xffff0208

08016af0 <_strtol_l.constprop.0>:
 8016af0:	2b01      	cmp	r3, #1
 8016af2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8016af6:	d001      	beq.n	8016afc <_strtol_l.constprop.0+0xc>
 8016af8:	2b24      	cmp	r3, #36	; 0x24
 8016afa:	d906      	bls.n	8016b0a <_strtol_l.constprop.0+0x1a>
 8016afc:	f7ff fa2e 	bl	8015f5c <__errno>
 8016b00:	2316      	movs	r3, #22
 8016b02:	6003      	str	r3, [r0, #0]
 8016b04:	2000      	movs	r0, #0
 8016b06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016b0a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8016bf0 <_strtol_l.constprop.0+0x100>
 8016b0e:	460d      	mov	r5, r1
 8016b10:	462e      	mov	r6, r5
 8016b12:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b16:	f814 700c 	ldrb.w	r7, [r4, ip]
 8016b1a:	f017 0708 	ands.w	r7, r7, #8
 8016b1e:	d1f7      	bne.n	8016b10 <_strtol_l.constprop.0+0x20>
 8016b20:	2c2d      	cmp	r4, #45	; 0x2d
 8016b22:	d132      	bne.n	8016b8a <_strtol_l.constprop.0+0x9a>
 8016b24:	782c      	ldrb	r4, [r5, #0]
 8016b26:	2701      	movs	r7, #1
 8016b28:	1cb5      	adds	r5, r6, #2
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d05b      	beq.n	8016be6 <_strtol_l.constprop.0+0xf6>
 8016b2e:	2b10      	cmp	r3, #16
 8016b30:	d109      	bne.n	8016b46 <_strtol_l.constprop.0+0x56>
 8016b32:	2c30      	cmp	r4, #48	; 0x30
 8016b34:	d107      	bne.n	8016b46 <_strtol_l.constprop.0+0x56>
 8016b36:	782c      	ldrb	r4, [r5, #0]
 8016b38:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8016b3c:	2c58      	cmp	r4, #88	; 0x58
 8016b3e:	d14d      	bne.n	8016bdc <_strtol_l.constprop.0+0xec>
 8016b40:	786c      	ldrb	r4, [r5, #1]
 8016b42:	2310      	movs	r3, #16
 8016b44:	3502      	adds	r5, #2
 8016b46:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8016b4a:	f108 38ff 	add.w	r8, r8, #4294967295
 8016b4e:	f04f 0c00 	mov.w	ip, #0
 8016b52:	fbb8 f9f3 	udiv	r9, r8, r3
 8016b56:	4666      	mov	r6, ip
 8016b58:	fb03 8a19 	mls	sl, r3, r9, r8
 8016b5c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8016b60:	f1be 0f09 	cmp.w	lr, #9
 8016b64:	d816      	bhi.n	8016b94 <_strtol_l.constprop.0+0xa4>
 8016b66:	4674      	mov	r4, lr
 8016b68:	42a3      	cmp	r3, r4
 8016b6a:	dd24      	ble.n	8016bb6 <_strtol_l.constprop.0+0xc6>
 8016b6c:	f1bc 0f00 	cmp.w	ip, #0
 8016b70:	db1e      	blt.n	8016bb0 <_strtol_l.constprop.0+0xc0>
 8016b72:	45b1      	cmp	r9, r6
 8016b74:	d31c      	bcc.n	8016bb0 <_strtol_l.constprop.0+0xc0>
 8016b76:	d101      	bne.n	8016b7c <_strtol_l.constprop.0+0x8c>
 8016b78:	45a2      	cmp	sl, r4
 8016b7a:	db19      	blt.n	8016bb0 <_strtol_l.constprop.0+0xc0>
 8016b7c:	fb06 4603 	mla	r6, r6, r3, r4
 8016b80:	f04f 0c01 	mov.w	ip, #1
 8016b84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8016b88:	e7e8      	b.n	8016b5c <_strtol_l.constprop.0+0x6c>
 8016b8a:	2c2b      	cmp	r4, #43	; 0x2b
 8016b8c:	bf04      	itt	eq
 8016b8e:	782c      	ldrbeq	r4, [r5, #0]
 8016b90:	1cb5      	addeq	r5, r6, #2
 8016b92:	e7ca      	b.n	8016b2a <_strtol_l.constprop.0+0x3a>
 8016b94:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8016b98:	f1be 0f19 	cmp.w	lr, #25
 8016b9c:	d801      	bhi.n	8016ba2 <_strtol_l.constprop.0+0xb2>
 8016b9e:	3c37      	subs	r4, #55	; 0x37
 8016ba0:	e7e2      	b.n	8016b68 <_strtol_l.constprop.0+0x78>
 8016ba2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8016ba6:	f1be 0f19 	cmp.w	lr, #25
 8016baa:	d804      	bhi.n	8016bb6 <_strtol_l.constprop.0+0xc6>
 8016bac:	3c57      	subs	r4, #87	; 0x57
 8016bae:	e7db      	b.n	8016b68 <_strtol_l.constprop.0+0x78>
 8016bb0:	f04f 3cff 	mov.w	ip, #4294967295
 8016bb4:	e7e6      	b.n	8016b84 <_strtol_l.constprop.0+0x94>
 8016bb6:	f1bc 0f00 	cmp.w	ip, #0
 8016bba:	da05      	bge.n	8016bc8 <_strtol_l.constprop.0+0xd8>
 8016bbc:	2322      	movs	r3, #34	; 0x22
 8016bbe:	6003      	str	r3, [r0, #0]
 8016bc0:	4646      	mov	r6, r8
 8016bc2:	b942      	cbnz	r2, 8016bd6 <_strtol_l.constprop.0+0xe6>
 8016bc4:	4630      	mov	r0, r6
 8016bc6:	e79e      	b.n	8016b06 <_strtol_l.constprop.0+0x16>
 8016bc8:	b107      	cbz	r7, 8016bcc <_strtol_l.constprop.0+0xdc>
 8016bca:	4276      	negs	r6, r6
 8016bcc:	2a00      	cmp	r2, #0
 8016bce:	d0f9      	beq.n	8016bc4 <_strtol_l.constprop.0+0xd4>
 8016bd0:	f1bc 0f00 	cmp.w	ip, #0
 8016bd4:	d000      	beq.n	8016bd8 <_strtol_l.constprop.0+0xe8>
 8016bd6:	1e69      	subs	r1, r5, #1
 8016bd8:	6011      	str	r1, [r2, #0]
 8016bda:	e7f3      	b.n	8016bc4 <_strtol_l.constprop.0+0xd4>
 8016bdc:	2430      	movs	r4, #48	; 0x30
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d1b1      	bne.n	8016b46 <_strtol_l.constprop.0+0x56>
 8016be2:	2308      	movs	r3, #8
 8016be4:	e7af      	b.n	8016b46 <_strtol_l.constprop.0+0x56>
 8016be6:	2c30      	cmp	r4, #48	; 0x30
 8016be8:	d0a5      	beq.n	8016b36 <_strtol_l.constprop.0+0x46>
 8016bea:	230a      	movs	r3, #10
 8016bec:	e7ab      	b.n	8016b46 <_strtol_l.constprop.0+0x56>
 8016bee:	bf00      	nop
 8016bf0:	08019a31 	.word	0x08019a31

08016bf4 <strtol>:
 8016bf4:	4613      	mov	r3, r2
 8016bf6:	460a      	mov	r2, r1
 8016bf8:	4601      	mov	r1, r0
 8016bfa:	4802      	ldr	r0, [pc, #8]	; (8016c04 <strtol+0x10>)
 8016bfc:	6800      	ldr	r0, [r0, #0]
 8016bfe:	f7ff bf77 	b.w	8016af0 <_strtol_l.constprop.0>
 8016c02:	bf00      	nop
 8016c04:	2000012c 	.word	0x2000012c

08016c08 <quorem>:
 8016c08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c0c:	6903      	ldr	r3, [r0, #16]
 8016c0e:	690c      	ldr	r4, [r1, #16]
 8016c10:	42a3      	cmp	r3, r4
 8016c12:	4607      	mov	r7, r0
 8016c14:	f2c0 8081 	blt.w	8016d1a <quorem+0x112>
 8016c18:	3c01      	subs	r4, #1
 8016c1a:	f101 0814 	add.w	r8, r1, #20
 8016c1e:	f100 0514 	add.w	r5, r0, #20
 8016c22:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016c26:	9301      	str	r3, [sp, #4]
 8016c28:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8016c2c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016c30:	3301      	adds	r3, #1
 8016c32:	429a      	cmp	r2, r3
 8016c34:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8016c38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8016c3c:	fbb2 f6f3 	udiv	r6, r2, r3
 8016c40:	d331      	bcc.n	8016ca6 <quorem+0x9e>
 8016c42:	f04f 0e00 	mov.w	lr, #0
 8016c46:	4640      	mov	r0, r8
 8016c48:	46ac      	mov	ip, r5
 8016c4a:	46f2      	mov	sl, lr
 8016c4c:	f850 2b04 	ldr.w	r2, [r0], #4
 8016c50:	b293      	uxth	r3, r2
 8016c52:	fb06 e303 	mla	r3, r6, r3, lr
 8016c56:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8016c5a:	b29b      	uxth	r3, r3
 8016c5c:	ebaa 0303 	sub.w	r3, sl, r3
 8016c60:	f8dc a000 	ldr.w	sl, [ip]
 8016c64:	0c12      	lsrs	r2, r2, #16
 8016c66:	fa13 f38a 	uxtah	r3, r3, sl
 8016c6a:	fb06 e202 	mla	r2, r6, r2, lr
 8016c6e:	9300      	str	r3, [sp, #0]
 8016c70:	9b00      	ldr	r3, [sp, #0]
 8016c72:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8016c76:	b292      	uxth	r2, r2
 8016c78:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8016c7c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016c80:	f8bd 3000 	ldrh.w	r3, [sp]
 8016c84:	4581      	cmp	r9, r0
 8016c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016c8a:	f84c 3b04 	str.w	r3, [ip], #4
 8016c8e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8016c92:	d2db      	bcs.n	8016c4c <quorem+0x44>
 8016c94:	f855 300b 	ldr.w	r3, [r5, fp]
 8016c98:	b92b      	cbnz	r3, 8016ca6 <quorem+0x9e>
 8016c9a:	9b01      	ldr	r3, [sp, #4]
 8016c9c:	3b04      	subs	r3, #4
 8016c9e:	429d      	cmp	r5, r3
 8016ca0:	461a      	mov	r2, r3
 8016ca2:	d32e      	bcc.n	8016d02 <quorem+0xfa>
 8016ca4:	613c      	str	r4, [r7, #16]
 8016ca6:	4638      	mov	r0, r7
 8016ca8:	f001 f8ba 	bl	8017e20 <__mcmp>
 8016cac:	2800      	cmp	r0, #0
 8016cae:	db24      	blt.n	8016cfa <quorem+0xf2>
 8016cb0:	3601      	adds	r6, #1
 8016cb2:	4628      	mov	r0, r5
 8016cb4:	f04f 0c00 	mov.w	ip, #0
 8016cb8:	f858 2b04 	ldr.w	r2, [r8], #4
 8016cbc:	f8d0 e000 	ldr.w	lr, [r0]
 8016cc0:	b293      	uxth	r3, r2
 8016cc2:	ebac 0303 	sub.w	r3, ip, r3
 8016cc6:	0c12      	lsrs	r2, r2, #16
 8016cc8:	fa13 f38e 	uxtah	r3, r3, lr
 8016ccc:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8016cd0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8016cd4:	b29b      	uxth	r3, r3
 8016cd6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8016cda:	45c1      	cmp	r9, r8
 8016cdc:	f840 3b04 	str.w	r3, [r0], #4
 8016ce0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8016ce4:	d2e8      	bcs.n	8016cb8 <quorem+0xb0>
 8016ce6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8016cea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8016cee:	b922      	cbnz	r2, 8016cfa <quorem+0xf2>
 8016cf0:	3b04      	subs	r3, #4
 8016cf2:	429d      	cmp	r5, r3
 8016cf4:	461a      	mov	r2, r3
 8016cf6:	d30a      	bcc.n	8016d0e <quorem+0x106>
 8016cf8:	613c      	str	r4, [r7, #16]
 8016cfa:	4630      	mov	r0, r6
 8016cfc:	b003      	add	sp, #12
 8016cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016d02:	6812      	ldr	r2, [r2, #0]
 8016d04:	3b04      	subs	r3, #4
 8016d06:	2a00      	cmp	r2, #0
 8016d08:	d1cc      	bne.n	8016ca4 <quorem+0x9c>
 8016d0a:	3c01      	subs	r4, #1
 8016d0c:	e7c7      	b.n	8016c9e <quorem+0x96>
 8016d0e:	6812      	ldr	r2, [r2, #0]
 8016d10:	3b04      	subs	r3, #4
 8016d12:	2a00      	cmp	r2, #0
 8016d14:	d1f0      	bne.n	8016cf8 <quorem+0xf0>
 8016d16:	3c01      	subs	r4, #1
 8016d18:	e7eb      	b.n	8016cf2 <quorem+0xea>
 8016d1a:	2000      	movs	r0, #0
 8016d1c:	e7ee      	b.n	8016cfc <quorem+0xf4>
	...

08016d20 <_dtoa_r>:
 8016d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d24:	ed2d 8b04 	vpush	{d8-d9}
 8016d28:	ec57 6b10 	vmov	r6, r7, d0
 8016d2c:	b093      	sub	sp, #76	; 0x4c
 8016d2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8016d30:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8016d34:	9106      	str	r1, [sp, #24]
 8016d36:	ee10 aa10 	vmov	sl, s0
 8016d3a:	4604      	mov	r4, r0
 8016d3c:	9209      	str	r2, [sp, #36]	; 0x24
 8016d3e:	930c      	str	r3, [sp, #48]	; 0x30
 8016d40:	46bb      	mov	fp, r7
 8016d42:	b975      	cbnz	r5, 8016d62 <_dtoa_r+0x42>
 8016d44:	2010      	movs	r0, #16
 8016d46:	f7ff f933 	bl	8015fb0 <malloc>
 8016d4a:	4602      	mov	r2, r0
 8016d4c:	6260      	str	r0, [r4, #36]	; 0x24
 8016d4e:	b920      	cbnz	r0, 8016d5a <_dtoa_r+0x3a>
 8016d50:	4ba7      	ldr	r3, [pc, #668]	; (8016ff0 <_dtoa_r+0x2d0>)
 8016d52:	21ea      	movs	r1, #234	; 0xea
 8016d54:	48a7      	ldr	r0, [pc, #668]	; (8016ff4 <_dtoa_r+0x2d4>)
 8016d56:	f001 fad7 	bl	8018308 <__assert_func>
 8016d5a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8016d5e:	6005      	str	r5, [r0, #0]
 8016d60:	60c5      	str	r5, [r0, #12]
 8016d62:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d64:	6819      	ldr	r1, [r3, #0]
 8016d66:	b151      	cbz	r1, 8016d7e <_dtoa_r+0x5e>
 8016d68:	685a      	ldr	r2, [r3, #4]
 8016d6a:	604a      	str	r2, [r1, #4]
 8016d6c:	2301      	movs	r3, #1
 8016d6e:	4093      	lsls	r3, r2
 8016d70:	608b      	str	r3, [r1, #8]
 8016d72:	4620      	mov	r0, r4
 8016d74:	f000 fe12 	bl	801799c <_Bfree>
 8016d78:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	601a      	str	r2, [r3, #0]
 8016d7e:	1e3b      	subs	r3, r7, #0
 8016d80:	bfaa      	itet	ge
 8016d82:	2300      	movge	r3, #0
 8016d84:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8016d88:	f8c8 3000 	strge.w	r3, [r8]
 8016d8c:	4b9a      	ldr	r3, [pc, #616]	; (8016ff8 <_dtoa_r+0x2d8>)
 8016d8e:	bfbc      	itt	lt
 8016d90:	2201      	movlt	r2, #1
 8016d92:	f8c8 2000 	strlt.w	r2, [r8]
 8016d96:	ea33 030b 	bics.w	r3, r3, fp
 8016d9a:	d11b      	bne.n	8016dd4 <_dtoa_r+0xb4>
 8016d9c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016d9e:	f242 730f 	movw	r3, #9999	; 0x270f
 8016da2:	6013      	str	r3, [r2, #0]
 8016da4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8016da8:	4333      	orrs	r3, r6
 8016daa:	f000 8592 	beq.w	80178d2 <_dtoa_r+0xbb2>
 8016dae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016db0:	b963      	cbnz	r3, 8016dcc <_dtoa_r+0xac>
 8016db2:	4b92      	ldr	r3, [pc, #584]	; (8016ffc <_dtoa_r+0x2dc>)
 8016db4:	e022      	b.n	8016dfc <_dtoa_r+0xdc>
 8016db6:	4b92      	ldr	r3, [pc, #584]	; (8017000 <_dtoa_r+0x2e0>)
 8016db8:	9301      	str	r3, [sp, #4]
 8016dba:	3308      	adds	r3, #8
 8016dbc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8016dbe:	6013      	str	r3, [r2, #0]
 8016dc0:	9801      	ldr	r0, [sp, #4]
 8016dc2:	b013      	add	sp, #76	; 0x4c
 8016dc4:	ecbd 8b04 	vpop	{d8-d9}
 8016dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016dcc:	4b8b      	ldr	r3, [pc, #556]	; (8016ffc <_dtoa_r+0x2dc>)
 8016dce:	9301      	str	r3, [sp, #4]
 8016dd0:	3303      	adds	r3, #3
 8016dd2:	e7f3      	b.n	8016dbc <_dtoa_r+0x9c>
 8016dd4:	2200      	movs	r2, #0
 8016dd6:	2300      	movs	r3, #0
 8016dd8:	4650      	mov	r0, sl
 8016dda:	4659      	mov	r1, fp
 8016ddc:	f7e9 fe94 	bl	8000b08 <__aeabi_dcmpeq>
 8016de0:	ec4b ab19 	vmov	d9, sl, fp
 8016de4:	4680      	mov	r8, r0
 8016de6:	b158      	cbz	r0, 8016e00 <_dtoa_r+0xe0>
 8016de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8016dea:	2301      	movs	r3, #1
 8016dec:	6013      	str	r3, [r2, #0]
 8016dee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8016df0:	2b00      	cmp	r3, #0
 8016df2:	f000 856b 	beq.w	80178cc <_dtoa_r+0xbac>
 8016df6:	4883      	ldr	r0, [pc, #524]	; (8017004 <_dtoa_r+0x2e4>)
 8016df8:	6018      	str	r0, [r3, #0]
 8016dfa:	1e43      	subs	r3, r0, #1
 8016dfc:	9301      	str	r3, [sp, #4]
 8016dfe:	e7df      	b.n	8016dc0 <_dtoa_r+0xa0>
 8016e00:	ec4b ab10 	vmov	d0, sl, fp
 8016e04:	aa10      	add	r2, sp, #64	; 0x40
 8016e06:	a911      	add	r1, sp, #68	; 0x44
 8016e08:	4620      	mov	r0, r4
 8016e0a:	f001 f8af 	bl	8017f6c <__d2b>
 8016e0e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8016e12:	ee08 0a10 	vmov	s16, r0
 8016e16:	2d00      	cmp	r5, #0
 8016e18:	f000 8084 	beq.w	8016f24 <_dtoa_r+0x204>
 8016e1c:	ee19 3a90 	vmov	r3, s19
 8016e20:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8016e24:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8016e28:	4656      	mov	r6, sl
 8016e2a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8016e2e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8016e32:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8016e36:	4b74      	ldr	r3, [pc, #464]	; (8017008 <_dtoa_r+0x2e8>)
 8016e38:	2200      	movs	r2, #0
 8016e3a:	4630      	mov	r0, r6
 8016e3c:	4639      	mov	r1, r7
 8016e3e:	f7e9 fa43 	bl	80002c8 <__aeabi_dsub>
 8016e42:	a365      	add	r3, pc, #404	; (adr r3, 8016fd8 <_dtoa_r+0x2b8>)
 8016e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e48:	f7e9 fbf6 	bl	8000638 <__aeabi_dmul>
 8016e4c:	a364      	add	r3, pc, #400	; (adr r3, 8016fe0 <_dtoa_r+0x2c0>)
 8016e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e52:	f7e9 fa3b 	bl	80002cc <__adddf3>
 8016e56:	4606      	mov	r6, r0
 8016e58:	4628      	mov	r0, r5
 8016e5a:	460f      	mov	r7, r1
 8016e5c:	f7e9 fb82 	bl	8000564 <__aeabi_i2d>
 8016e60:	a361      	add	r3, pc, #388	; (adr r3, 8016fe8 <_dtoa_r+0x2c8>)
 8016e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016e66:	f7e9 fbe7 	bl	8000638 <__aeabi_dmul>
 8016e6a:	4602      	mov	r2, r0
 8016e6c:	460b      	mov	r3, r1
 8016e6e:	4630      	mov	r0, r6
 8016e70:	4639      	mov	r1, r7
 8016e72:	f7e9 fa2b 	bl	80002cc <__adddf3>
 8016e76:	4606      	mov	r6, r0
 8016e78:	460f      	mov	r7, r1
 8016e7a:	f7e9 fe8d 	bl	8000b98 <__aeabi_d2iz>
 8016e7e:	2200      	movs	r2, #0
 8016e80:	9000      	str	r0, [sp, #0]
 8016e82:	2300      	movs	r3, #0
 8016e84:	4630      	mov	r0, r6
 8016e86:	4639      	mov	r1, r7
 8016e88:	f7e9 fe48 	bl	8000b1c <__aeabi_dcmplt>
 8016e8c:	b150      	cbz	r0, 8016ea4 <_dtoa_r+0x184>
 8016e8e:	9800      	ldr	r0, [sp, #0]
 8016e90:	f7e9 fb68 	bl	8000564 <__aeabi_i2d>
 8016e94:	4632      	mov	r2, r6
 8016e96:	463b      	mov	r3, r7
 8016e98:	f7e9 fe36 	bl	8000b08 <__aeabi_dcmpeq>
 8016e9c:	b910      	cbnz	r0, 8016ea4 <_dtoa_r+0x184>
 8016e9e:	9b00      	ldr	r3, [sp, #0]
 8016ea0:	3b01      	subs	r3, #1
 8016ea2:	9300      	str	r3, [sp, #0]
 8016ea4:	9b00      	ldr	r3, [sp, #0]
 8016ea6:	2b16      	cmp	r3, #22
 8016ea8:	d85a      	bhi.n	8016f60 <_dtoa_r+0x240>
 8016eaa:	9a00      	ldr	r2, [sp, #0]
 8016eac:	4b57      	ldr	r3, [pc, #348]	; (801700c <_dtoa_r+0x2ec>)
 8016eae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8016eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8016eb6:	ec51 0b19 	vmov	r0, r1, d9
 8016eba:	f7e9 fe2f 	bl	8000b1c <__aeabi_dcmplt>
 8016ebe:	2800      	cmp	r0, #0
 8016ec0:	d050      	beq.n	8016f64 <_dtoa_r+0x244>
 8016ec2:	9b00      	ldr	r3, [sp, #0]
 8016ec4:	3b01      	subs	r3, #1
 8016ec6:	9300      	str	r3, [sp, #0]
 8016ec8:	2300      	movs	r3, #0
 8016eca:	930b      	str	r3, [sp, #44]	; 0x2c
 8016ecc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8016ece:	1b5d      	subs	r5, r3, r5
 8016ed0:	1e6b      	subs	r3, r5, #1
 8016ed2:	9305      	str	r3, [sp, #20]
 8016ed4:	bf45      	ittet	mi
 8016ed6:	f1c5 0301 	rsbmi	r3, r5, #1
 8016eda:	9304      	strmi	r3, [sp, #16]
 8016edc:	2300      	movpl	r3, #0
 8016ede:	2300      	movmi	r3, #0
 8016ee0:	bf4c      	ite	mi
 8016ee2:	9305      	strmi	r3, [sp, #20]
 8016ee4:	9304      	strpl	r3, [sp, #16]
 8016ee6:	9b00      	ldr	r3, [sp, #0]
 8016ee8:	2b00      	cmp	r3, #0
 8016eea:	db3d      	blt.n	8016f68 <_dtoa_r+0x248>
 8016eec:	9b05      	ldr	r3, [sp, #20]
 8016eee:	9a00      	ldr	r2, [sp, #0]
 8016ef0:	920a      	str	r2, [sp, #40]	; 0x28
 8016ef2:	4413      	add	r3, r2
 8016ef4:	9305      	str	r3, [sp, #20]
 8016ef6:	2300      	movs	r3, #0
 8016ef8:	9307      	str	r3, [sp, #28]
 8016efa:	9b06      	ldr	r3, [sp, #24]
 8016efc:	2b09      	cmp	r3, #9
 8016efe:	f200 8089 	bhi.w	8017014 <_dtoa_r+0x2f4>
 8016f02:	2b05      	cmp	r3, #5
 8016f04:	bfc4      	itt	gt
 8016f06:	3b04      	subgt	r3, #4
 8016f08:	9306      	strgt	r3, [sp, #24]
 8016f0a:	9b06      	ldr	r3, [sp, #24]
 8016f0c:	f1a3 0302 	sub.w	r3, r3, #2
 8016f10:	bfcc      	ite	gt
 8016f12:	2500      	movgt	r5, #0
 8016f14:	2501      	movle	r5, #1
 8016f16:	2b03      	cmp	r3, #3
 8016f18:	f200 8087 	bhi.w	801702a <_dtoa_r+0x30a>
 8016f1c:	e8df f003 	tbb	[pc, r3]
 8016f20:	59383a2d 	.word	0x59383a2d
 8016f24:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8016f28:	441d      	add	r5, r3
 8016f2a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8016f2e:	2b20      	cmp	r3, #32
 8016f30:	bfc1      	itttt	gt
 8016f32:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8016f36:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8016f3a:	fa0b f303 	lslgt.w	r3, fp, r3
 8016f3e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8016f42:	bfda      	itte	le
 8016f44:	f1c3 0320 	rsble	r3, r3, #32
 8016f48:	fa06 f003 	lslle.w	r0, r6, r3
 8016f4c:	4318      	orrgt	r0, r3
 8016f4e:	f7e9 faf9 	bl	8000544 <__aeabi_ui2d>
 8016f52:	2301      	movs	r3, #1
 8016f54:	4606      	mov	r6, r0
 8016f56:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8016f5a:	3d01      	subs	r5, #1
 8016f5c:	930e      	str	r3, [sp, #56]	; 0x38
 8016f5e:	e76a      	b.n	8016e36 <_dtoa_r+0x116>
 8016f60:	2301      	movs	r3, #1
 8016f62:	e7b2      	b.n	8016eca <_dtoa_r+0x1aa>
 8016f64:	900b      	str	r0, [sp, #44]	; 0x2c
 8016f66:	e7b1      	b.n	8016ecc <_dtoa_r+0x1ac>
 8016f68:	9b04      	ldr	r3, [sp, #16]
 8016f6a:	9a00      	ldr	r2, [sp, #0]
 8016f6c:	1a9b      	subs	r3, r3, r2
 8016f6e:	9304      	str	r3, [sp, #16]
 8016f70:	4253      	negs	r3, r2
 8016f72:	9307      	str	r3, [sp, #28]
 8016f74:	2300      	movs	r3, #0
 8016f76:	930a      	str	r3, [sp, #40]	; 0x28
 8016f78:	e7bf      	b.n	8016efa <_dtoa_r+0x1da>
 8016f7a:	2300      	movs	r3, #0
 8016f7c:	9308      	str	r3, [sp, #32]
 8016f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	dc55      	bgt.n	8017030 <_dtoa_r+0x310>
 8016f84:	2301      	movs	r3, #1
 8016f86:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8016f8a:	461a      	mov	r2, r3
 8016f8c:	9209      	str	r2, [sp, #36]	; 0x24
 8016f8e:	e00c      	b.n	8016faa <_dtoa_r+0x28a>
 8016f90:	2301      	movs	r3, #1
 8016f92:	e7f3      	b.n	8016f7c <_dtoa_r+0x25c>
 8016f94:	2300      	movs	r3, #0
 8016f96:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016f98:	9308      	str	r3, [sp, #32]
 8016f9a:	9b00      	ldr	r3, [sp, #0]
 8016f9c:	4413      	add	r3, r2
 8016f9e:	9302      	str	r3, [sp, #8]
 8016fa0:	3301      	adds	r3, #1
 8016fa2:	2b01      	cmp	r3, #1
 8016fa4:	9303      	str	r3, [sp, #12]
 8016fa6:	bfb8      	it	lt
 8016fa8:	2301      	movlt	r3, #1
 8016faa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8016fac:	2200      	movs	r2, #0
 8016fae:	6042      	str	r2, [r0, #4]
 8016fb0:	2204      	movs	r2, #4
 8016fb2:	f102 0614 	add.w	r6, r2, #20
 8016fb6:	429e      	cmp	r6, r3
 8016fb8:	6841      	ldr	r1, [r0, #4]
 8016fba:	d93d      	bls.n	8017038 <_dtoa_r+0x318>
 8016fbc:	4620      	mov	r0, r4
 8016fbe:	f000 fcad 	bl	801791c <_Balloc>
 8016fc2:	9001      	str	r0, [sp, #4]
 8016fc4:	2800      	cmp	r0, #0
 8016fc6:	d13b      	bne.n	8017040 <_dtoa_r+0x320>
 8016fc8:	4b11      	ldr	r3, [pc, #68]	; (8017010 <_dtoa_r+0x2f0>)
 8016fca:	4602      	mov	r2, r0
 8016fcc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8016fd0:	e6c0      	b.n	8016d54 <_dtoa_r+0x34>
 8016fd2:	2301      	movs	r3, #1
 8016fd4:	e7df      	b.n	8016f96 <_dtoa_r+0x276>
 8016fd6:	bf00      	nop
 8016fd8:	636f4361 	.word	0x636f4361
 8016fdc:	3fd287a7 	.word	0x3fd287a7
 8016fe0:	8b60c8b3 	.word	0x8b60c8b3
 8016fe4:	3fc68a28 	.word	0x3fc68a28
 8016fe8:	509f79fb 	.word	0x509f79fb
 8016fec:	3fd34413 	.word	0x3fd34413
 8016ff0:	08019b3e 	.word	0x08019b3e
 8016ff4:	08019b55 	.word	0x08019b55
 8016ff8:	7ff00000 	.word	0x7ff00000
 8016ffc:	08019b3a 	.word	0x08019b3a
 8017000:	08019b31 	.word	0x08019b31
 8017004:	08019a0d 	.word	0x08019a0d
 8017008:	3ff80000 	.word	0x3ff80000
 801700c:	08019c48 	.word	0x08019c48
 8017010:	08019bb0 	.word	0x08019bb0
 8017014:	2501      	movs	r5, #1
 8017016:	2300      	movs	r3, #0
 8017018:	9306      	str	r3, [sp, #24]
 801701a:	9508      	str	r5, [sp, #32]
 801701c:	f04f 33ff 	mov.w	r3, #4294967295
 8017020:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017024:	2200      	movs	r2, #0
 8017026:	2312      	movs	r3, #18
 8017028:	e7b0      	b.n	8016f8c <_dtoa_r+0x26c>
 801702a:	2301      	movs	r3, #1
 801702c:	9308      	str	r3, [sp, #32]
 801702e:	e7f5      	b.n	801701c <_dtoa_r+0x2fc>
 8017030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017032:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8017036:	e7b8      	b.n	8016faa <_dtoa_r+0x28a>
 8017038:	3101      	adds	r1, #1
 801703a:	6041      	str	r1, [r0, #4]
 801703c:	0052      	lsls	r2, r2, #1
 801703e:	e7b8      	b.n	8016fb2 <_dtoa_r+0x292>
 8017040:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017042:	9a01      	ldr	r2, [sp, #4]
 8017044:	601a      	str	r2, [r3, #0]
 8017046:	9b03      	ldr	r3, [sp, #12]
 8017048:	2b0e      	cmp	r3, #14
 801704a:	f200 809d 	bhi.w	8017188 <_dtoa_r+0x468>
 801704e:	2d00      	cmp	r5, #0
 8017050:	f000 809a 	beq.w	8017188 <_dtoa_r+0x468>
 8017054:	9b00      	ldr	r3, [sp, #0]
 8017056:	2b00      	cmp	r3, #0
 8017058:	dd32      	ble.n	80170c0 <_dtoa_r+0x3a0>
 801705a:	4ab7      	ldr	r2, [pc, #732]	; (8017338 <_dtoa_r+0x618>)
 801705c:	f003 030f 	and.w	r3, r3, #15
 8017060:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8017064:	e9d3 8900 	ldrd	r8, r9, [r3]
 8017068:	9b00      	ldr	r3, [sp, #0]
 801706a:	05d8      	lsls	r0, r3, #23
 801706c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8017070:	d516      	bpl.n	80170a0 <_dtoa_r+0x380>
 8017072:	4bb2      	ldr	r3, [pc, #712]	; (801733c <_dtoa_r+0x61c>)
 8017074:	ec51 0b19 	vmov	r0, r1, d9
 8017078:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 801707c:	f7e9 fc06 	bl	800088c <__aeabi_ddiv>
 8017080:	f007 070f 	and.w	r7, r7, #15
 8017084:	4682      	mov	sl, r0
 8017086:	468b      	mov	fp, r1
 8017088:	2503      	movs	r5, #3
 801708a:	4eac      	ldr	r6, [pc, #688]	; (801733c <_dtoa_r+0x61c>)
 801708c:	b957      	cbnz	r7, 80170a4 <_dtoa_r+0x384>
 801708e:	4642      	mov	r2, r8
 8017090:	464b      	mov	r3, r9
 8017092:	4650      	mov	r0, sl
 8017094:	4659      	mov	r1, fp
 8017096:	f7e9 fbf9 	bl	800088c <__aeabi_ddiv>
 801709a:	4682      	mov	sl, r0
 801709c:	468b      	mov	fp, r1
 801709e:	e028      	b.n	80170f2 <_dtoa_r+0x3d2>
 80170a0:	2502      	movs	r5, #2
 80170a2:	e7f2      	b.n	801708a <_dtoa_r+0x36a>
 80170a4:	07f9      	lsls	r1, r7, #31
 80170a6:	d508      	bpl.n	80170ba <_dtoa_r+0x39a>
 80170a8:	4640      	mov	r0, r8
 80170aa:	4649      	mov	r1, r9
 80170ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 80170b0:	f7e9 fac2 	bl	8000638 <__aeabi_dmul>
 80170b4:	3501      	adds	r5, #1
 80170b6:	4680      	mov	r8, r0
 80170b8:	4689      	mov	r9, r1
 80170ba:	107f      	asrs	r7, r7, #1
 80170bc:	3608      	adds	r6, #8
 80170be:	e7e5      	b.n	801708c <_dtoa_r+0x36c>
 80170c0:	f000 809b 	beq.w	80171fa <_dtoa_r+0x4da>
 80170c4:	9b00      	ldr	r3, [sp, #0]
 80170c6:	4f9d      	ldr	r7, [pc, #628]	; (801733c <_dtoa_r+0x61c>)
 80170c8:	425e      	negs	r6, r3
 80170ca:	4b9b      	ldr	r3, [pc, #620]	; (8017338 <_dtoa_r+0x618>)
 80170cc:	f006 020f 	and.w	r2, r6, #15
 80170d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80170d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170d8:	ec51 0b19 	vmov	r0, r1, d9
 80170dc:	f7e9 faac 	bl	8000638 <__aeabi_dmul>
 80170e0:	1136      	asrs	r6, r6, #4
 80170e2:	4682      	mov	sl, r0
 80170e4:	468b      	mov	fp, r1
 80170e6:	2300      	movs	r3, #0
 80170e8:	2502      	movs	r5, #2
 80170ea:	2e00      	cmp	r6, #0
 80170ec:	d17a      	bne.n	80171e4 <_dtoa_r+0x4c4>
 80170ee:	2b00      	cmp	r3, #0
 80170f0:	d1d3      	bne.n	801709a <_dtoa_r+0x37a>
 80170f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80170f4:	2b00      	cmp	r3, #0
 80170f6:	f000 8082 	beq.w	80171fe <_dtoa_r+0x4de>
 80170fa:	4b91      	ldr	r3, [pc, #580]	; (8017340 <_dtoa_r+0x620>)
 80170fc:	2200      	movs	r2, #0
 80170fe:	4650      	mov	r0, sl
 8017100:	4659      	mov	r1, fp
 8017102:	f7e9 fd0b 	bl	8000b1c <__aeabi_dcmplt>
 8017106:	2800      	cmp	r0, #0
 8017108:	d079      	beq.n	80171fe <_dtoa_r+0x4de>
 801710a:	9b03      	ldr	r3, [sp, #12]
 801710c:	2b00      	cmp	r3, #0
 801710e:	d076      	beq.n	80171fe <_dtoa_r+0x4de>
 8017110:	9b02      	ldr	r3, [sp, #8]
 8017112:	2b00      	cmp	r3, #0
 8017114:	dd36      	ble.n	8017184 <_dtoa_r+0x464>
 8017116:	9b00      	ldr	r3, [sp, #0]
 8017118:	4650      	mov	r0, sl
 801711a:	4659      	mov	r1, fp
 801711c:	1e5f      	subs	r7, r3, #1
 801711e:	2200      	movs	r2, #0
 8017120:	4b88      	ldr	r3, [pc, #544]	; (8017344 <_dtoa_r+0x624>)
 8017122:	f7e9 fa89 	bl	8000638 <__aeabi_dmul>
 8017126:	9e02      	ldr	r6, [sp, #8]
 8017128:	4682      	mov	sl, r0
 801712a:	468b      	mov	fp, r1
 801712c:	3501      	adds	r5, #1
 801712e:	4628      	mov	r0, r5
 8017130:	f7e9 fa18 	bl	8000564 <__aeabi_i2d>
 8017134:	4652      	mov	r2, sl
 8017136:	465b      	mov	r3, fp
 8017138:	f7e9 fa7e 	bl	8000638 <__aeabi_dmul>
 801713c:	4b82      	ldr	r3, [pc, #520]	; (8017348 <_dtoa_r+0x628>)
 801713e:	2200      	movs	r2, #0
 8017140:	f7e9 f8c4 	bl	80002cc <__adddf3>
 8017144:	46d0      	mov	r8, sl
 8017146:	46d9      	mov	r9, fp
 8017148:	4682      	mov	sl, r0
 801714a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801714e:	2e00      	cmp	r6, #0
 8017150:	d158      	bne.n	8017204 <_dtoa_r+0x4e4>
 8017152:	4b7e      	ldr	r3, [pc, #504]	; (801734c <_dtoa_r+0x62c>)
 8017154:	2200      	movs	r2, #0
 8017156:	4640      	mov	r0, r8
 8017158:	4649      	mov	r1, r9
 801715a:	f7e9 f8b5 	bl	80002c8 <__aeabi_dsub>
 801715e:	4652      	mov	r2, sl
 8017160:	465b      	mov	r3, fp
 8017162:	4680      	mov	r8, r0
 8017164:	4689      	mov	r9, r1
 8017166:	f7e9 fcf7 	bl	8000b58 <__aeabi_dcmpgt>
 801716a:	2800      	cmp	r0, #0
 801716c:	f040 8295 	bne.w	801769a <_dtoa_r+0x97a>
 8017170:	4652      	mov	r2, sl
 8017172:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8017176:	4640      	mov	r0, r8
 8017178:	4649      	mov	r1, r9
 801717a:	f7e9 fccf 	bl	8000b1c <__aeabi_dcmplt>
 801717e:	2800      	cmp	r0, #0
 8017180:	f040 8289 	bne.w	8017696 <_dtoa_r+0x976>
 8017184:	ec5b ab19 	vmov	sl, fp, d9
 8017188:	9b11      	ldr	r3, [sp, #68]	; 0x44
 801718a:	2b00      	cmp	r3, #0
 801718c:	f2c0 8148 	blt.w	8017420 <_dtoa_r+0x700>
 8017190:	9a00      	ldr	r2, [sp, #0]
 8017192:	2a0e      	cmp	r2, #14
 8017194:	f300 8144 	bgt.w	8017420 <_dtoa_r+0x700>
 8017198:	4b67      	ldr	r3, [pc, #412]	; (8017338 <_dtoa_r+0x618>)
 801719a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 801719e:	e9d3 8900 	ldrd	r8, r9, [r3]
 80171a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80171a4:	2b00      	cmp	r3, #0
 80171a6:	f280 80d5 	bge.w	8017354 <_dtoa_r+0x634>
 80171aa:	9b03      	ldr	r3, [sp, #12]
 80171ac:	2b00      	cmp	r3, #0
 80171ae:	f300 80d1 	bgt.w	8017354 <_dtoa_r+0x634>
 80171b2:	f040 826f 	bne.w	8017694 <_dtoa_r+0x974>
 80171b6:	4b65      	ldr	r3, [pc, #404]	; (801734c <_dtoa_r+0x62c>)
 80171b8:	2200      	movs	r2, #0
 80171ba:	4640      	mov	r0, r8
 80171bc:	4649      	mov	r1, r9
 80171be:	f7e9 fa3b 	bl	8000638 <__aeabi_dmul>
 80171c2:	4652      	mov	r2, sl
 80171c4:	465b      	mov	r3, fp
 80171c6:	f7e9 fcbd 	bl	8000b44 <__aeabi_dcmpge>
 80171ca:	9e03      	ldr	r6, [sp, #12]
 80171cc:	4637      	mov	r7, r6
 80171ce:	2800      	cmp	r0, #0
 80171d0:	f040 8245 	bne.w	801765e <_dtoa_r+0x93e>
 80171d4:	9d01      	ldr	r5, [sp, #4]
 80171d6:	2331      	movs	r3, #49	; 0x31
 80171d8:	f805 3b01 	strb.w	r3, [r5], #1
 80171dc:	9b00      	ldr	r3, [sp, #0]
 80171de:	3301      	adds	r3, #1
 80171e0:	9300      	str	r3, [sp, #0]
 80171e2:	e240      	b.n	8017666 <_dtoa_r+0x946>
 80171e4:	07f2      	lsls	r2, r6, #31
 80171e6:	d505      	bpl.n	80171f4 <_dtoa_r+0x4d4>
 80171e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80171ec:	f7e9 fa24 	bl	8000638 <__aeabi_dmul>
 80171f0:	3501      	adds	r5, #1
 80171f2:	2301      	movs	r3, #1
 80171f4:	1076      	asrs	r6, r6, #1
 80171f6:	3708      	adds	r7, #8
 80171f8:	e777      	b.n	80170ea <_dtoa_r+0x3ca>
 80171fa:	2502      	movs	r5, #2
 80171fc:	e779      	b.n	80170f2 <_dtoa_r+0x3d2>
 80171fe:	9f00      	ldr	r7, [sp, #0]
 8017200:	9e03      	ldr	r6, [sp, #12]
 8017202:	e794      	b.n	801712e <_dtoa_r+0x40e>
 8017204:	9901      	ldr	r1, [sp, #4]
 8017206:	4b4c      	ldr	r3, [pc, #304]	; (8017338 <_dtoa_r+0x618>)
 8017208:	4431      	add	r1, r6
 801720a:	910d      	str	r1, [sp, #52]	; 0x34
 801720c:	9908      	ldr	r1, [sp, #32]
 801720e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8017212:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8017216:	2900      	cmp	r1, #0
 8017218:	d043      	beq.n	80172a2 <_dtoa_r+0x582>
 801721a:	494d      	ldr	r1, [pc, #308]	; (8017350 <_dtoa_r+0x630>)
 801721c:	2000      	movs	r0, #0
 801721e:	f7e9 fb35 	bl	800088c <__aeabi_ddiv>
 8017222:	4652      	mov	r2, sl
 8017224:	465b      	mov	r3, fp
 8017226:	f7e9 f84f 	bl	80002c8 <__aeabi_dsub>
 801722a:	9d01      	ldr	r5, [sp, #4]
 801722c:	4682      	mov	sl, r0
 801722e:	468b      	mov	fp, r1
 8017230:	4649      	mov	r1, r9
 8017232:	4640      	mov	r0, r8
 8017234:	f7e9 fcb0 	bl	8000b98 <__aeabi_d2iz>
 8017238:	4606      	mov	r6, r0
 801723a:	f7e9 f993 	bl	8000564 <__aeabi_i2d>
 801723e:	4602      	mov	r2, r0
 8017240:	460b      	mov	r3, r1
 8017242:	4640      	mov	r0, r8
 8017244:	4649      	mov	r1, r9
 8017246:	f7e9 f83f 	bl	80002c8 <__aeabi_dsub>
 801724a:	3630      	adds	r6, #48	; 0x30
 801724c:	f805 6b01 	strb.w	r6, [r5], #1
 8017250:	4652      	mov	r2, sl
 8017252:	465b      	mov	r3, fp
 8017254:	4680      	mov	r8, r0
 8017256:	4689      	mov	r9, r1
 8017258:	f7e9 fc60 	bl	8000b1c <__aeabi_dcmplt>
 801725c:	2800      	cmp	r0, #0
 801725e:	d163      	bne.n	8017328 <_dtoa_r+0x608>
 8017260:	4642      	mov	r2, r8
 8017262:	464b      	mov	r3, r9
 8017264:	4936      	ldr	r1, [pc, #216]	; (8017340 <_dtoa_r+0x620>)
 8017266:	2000      	movs	r0, #0
 8017268:	f7e9 f82e 	bl	80002c8 <__aeabi_dsub>
 801726c:	4652      	mov	r2, sl
 801726e:	465b      	mov	r3, fp
 8017270:	f7e9 fc54 	bl	8000b1c <__aeabi_dcmplt>
 8017274:	2800      	cmp	r0, #0
 8017276:	f040 80b5 	bne.w	80173e4 <_dtoa_r+0x6c4>
 801727a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801727c:	429d      	cmp	r5, r3
 801727e:	d081      	beq.n	8017184 <_dtoa_r+0x464>
 8017280:	4b30      	ldr	r3, [pc, #192]	; (8017344 <_dtoa_r+0x624>)
 8017282:	2200      	movs	r2, #0
 8017284:	4650      	mov	r0, sl
 8017286:	4659      	mov	r1, fp
 8017288:	f7e9 f9d6 	bl	8000638 <__aeabi_dmul>
 801728c:	4b2d      	ldr	r3, [pc, #180]	; (8017344 <_dtoa_r+0x624>)
 801728e:	4682      	mov	sl, r0
 8017290:	468b      	mov	fp, r1
 8017292:	4640      	mov	r0, r8
 8017294:	4649      	mov	r1, r9
 8017296:	2200      	movs	r2, #0
 8017298:	f7e9 f9ce 	bl	8000638 <__aeabi_dmul>
 801729c:	4680      	mov	r8, r0
 801729e:	4689      	mov	r9, r1
 80172a0:	e7c6      	b.n	8017230 <_dtoa_r+0x510>
 80172a2:	4650      	mov	r0, sl
 80172a4:	4659      	mov	r1, fp
 80172a6:	f7e9 f9c7 	bl	8000638 <__aeabi_dmul>
 80172aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172ac:	9d01      	ldr	r5, [sp, #4]
 80172ae:	930f      	str	r3, [sp, #60]	; 0x3c
 80172b0:	4682      	mov	sl, r0
 80172b2:	468b      	mov	fp, r1
 80172b4:	4649      	mov	r1, r9
 80172b6:	4640      	mov	r0, r8
 80172b8:	f7e9 fc6e 	bl	8000b98 <__aeabi_d2iz>
 80172bc:	4606      	mov	r6, r0
 80172be:	f7e9 f951 	bl	8000564 <__aeabi_i2d>
 80172c2:	3630      	adds	r6, #48	; 0x30
 80172c4:	4602      	mov	r2, r0
 80172c6:	460b      	mov	r3, r1
 80172c8:	4640      	mov	r0, r8
 80172ca:	4649      	mov	r1, r9
 80172cc:	f7e8 fffc 	bl	80002c8 <__aeabi_dsub>
 80172d0:	f805 6b01 	strb.w	r6, [r5], #1
 80172d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80172d6:	429d      	cmp	r5, r3
 80172d8:	4680      	mov	r8, r0
 80172da:	4689      	mov	r9, r1
 80172dc:	f04f 0200 	mov.w	r2, #0
 80172e0:	d124      	bne.n	801732c <_dtoa_r+0x60c>
 80172e2:	4b1b      	ldr	r3, [pc, #108]	; (8017350 <_dtoa_r+0x630>)
 80172e4:	4650      	mov	r0, sl
 80172e6:	4659      	mov	r1, fp
 80172e8:	f7e8 fff0 	bl	80002cc <__adddf3>
 80172ec:	4602      	mov	r2, r0
 80172ee:	460b      	mov	r3, r1
 80172f0:	4640      	mov	r0, r8
 80172f2:	4649      	mov	r1, r9
 80172f4:	f7e9 fc30 	bl	8000b58 <__aeabi_dcmpgt>
 80172f8:	2800      	cmp	r0, #0
 80172fa:	d173      	bne.n	80173e4 <_dtoa_r+0x6c4>
 80172fc:	4652      	mov	r2, sl
 80172fe:	465b      	mov	r3, fp
 8017300:	4913      	ldr	r1, [pc, #76]	; (8017350 <_dtoa_r+0x630>)
 8017302:	2000      	movs	r0, #0
 8017304:	f7e8 ffe0 	bl	80002c8 <__aeabi_dsub>
 8017308:	4602      	mov	r2, r0
 801730a:	460b      	mov	r3, r1
 801730c:	4640      	mov	r0, r8
 801730e:	4649      	mov	r1, r9
 8017310:	f7e9 fc04 	bl	8000b1c <__aeabi_dcmplt>
 8017314:	2800      	cmp	r0, #0
 8017316:	f43f af35 	beq.w	8017184 <_dtoa_r+0x464>
 801731a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 801731c:	1e6b      	subs	r3, r5, #1
 801731e:	930f      	str	r3, [sp, #60]	; 0x3c
 8017320:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8017324:	2b30      	cmp	r3, #48	; 0x30
 8017326:	d0f8      	beq.n	801731a <_dtoa_r+0x5fa>
 8017328:	9700      	str	r7, [sp, #0]
 801732a:	e049      	b.n	80173c0 <_dtoa_r+0x6a0>
 801732c:	4b05      	ldr	r3, [pc, #20]	; (8017344 <_dtoa_r+0x624>)
 801732e:	f7e9 f983 	bl	8000638 <__aeabi_dmul>
 8017332:	4680      	mov	r8, r0
 8017334:	4689      	mov	r9, r1
 8017336:	e7bd      	b.n	80172b4 <_dtoa_r+0x594>
 8017338:	08019c48 	.word	0x08019c48
 801733c:	08019c20 	.word	0x08019c20
 8017340:	3ff00000 	.word	0x3ff00000
 8017344:	40240000 	.word	0x40240000
 8017348:	401c0000 	.word	0x401c0000
 801734c:	40140000 	.word	0x40140000
 8017350:	3fe00000 	.word	0x3fe00000
 8017354:	9d01      	ldr	r5, [sp, #4]
 8017356:	4656      	mov	r6, sl
 8017358:	465f      	mov	r7, fp
 801735a:	4642      	mov	r2, r8
 801735c:	464b      	mov	r3, r9
 801735e:	4630      	mov	r0, r6
 8017360:	4639      	mov	r1, r7
 8017362:	f7e9 fa93 	bl	800088c <__aeabi_ddiv>
 8017366:	f7e9 fc17 	bl	8000b98 <__aeabi_d2iz>
 801736a:	4682      	mov	sl, r0
 801736c:	f7e9 f8fa 	bl	8000564 <__aeabi_i2d>
 8017370:	4642      	mov	r2, r8
 8017372:	464b      	mov	r3, r9
 8017374:	f7e9 f960 	bl	8000638 <__aeabi_dmul>
 8017378:	4602      	mov	r2, r0
 801737a:	460b      	mov	r3, r1
 801737c:	4630      	mov	r0, r6
 801737e:	4639      	mov	r1, r7
 8017380:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8017384:	f7e8 ffa0 	bl	80002c8 <__aeabi_dsub>
 8017388:	f805 6b01 	strb.w	r6, [r5], #1
 801738c:	9e01      	ldr	r6, [sp, #4]
 801738e:	9f03      	ldr	r7, [sp, #12]
 8017390:	1bae      	subs	r6, r5, r6
 8017392:	42b7      	cmp	r7, r6
 8017394:	4602      	mov	r2, r0
 8017396:	460b      	mov	r3, r1
 8017398:	d135      	bne.n	8017406 <_dtoa_r+0x6e6>
 801739a:	f7e8 ff97 	bl	80002cc <__adddf3>
 801739e:	4642      	mov	r2, r8
 80173a0:	464b      	mov	r3, r9
 80173a2:	4606      	mov	r6, r0
 80173a4:	460f      	mov	r7, r1
 80173a6:	f7e9 fbd7 	bl	8000b58 <__aeabi_dcmpgt>
 80173aa:	b9d0      	cbnz	r0, 80173e2 <_dtoa_r+0x6c2>
 80173ac:	4642      	mov	r2, r8
 80173ae:	464b      	mov	r3, r9
 80173b0:	4630      	mov	r0, r6
 80173b2:	4639      	mov	r1, r7
 80173b4:	f7e9 fba8 	bl	8000b08 <__aeabi_dcmpeq>
 80173b8:	b110      	cbz	r0, 80173c0 <_dtoa_r+0x6a0>
 80173ba:	f01a 0f01 	tst.w	sl, #1
 80173be:	d110      	bne.n	80173e2 <_dtoa_r+0x6c2>
 80173c0:	4620      	mov	r0, r4
 80173c2:	ee18 1a10 	vmov	r1, s16
 80173c6:	f000 fae9 	bl	801799c <_Bfree>
 80173ca:	2300      	movs	r3, #0
 80173cc:	9800      	ldr	r0, [sp, #0]
 80173ce:	702b      	strb	r3, [r5, #0]
 80173d0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80173d2:	3001      	adds	r0, #1
 80173d4:	6018      	str	r0, [r3, #0]
 80173d6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80173d8:	2b00      	cmp	r3, #0
 80173da:	f43f acf1 	beq.w	8016dc0 <_dtoa_r+0xa0>
 80173de:	601d      	str	r5, [r3, #0]
 80173e0:	e4ee      	b.n	8016dc0 <_dtoa_r+0xa0>
 80173e2:	9f00      	ldr	r7, [sp, #0]
 80173e4:	462b      	mov	r3, r5
 80173e6:	461d      	mov	r5, r3
 80173e8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80173ec:	2a39      	cmp	r2, #57	; 0x39
 80173ee:	d106      	bne.n	80173fe <_dtoa_r+0x6de>
 80173f0:	9a01      	ldr	r2, [sp, #4]
 80173f2:	429a      	cmp	r2, r3
 80173f4:	d1f7      	bne.n	80173e6 <_dtoa_r+0x6c6>
 80173f6:	9901      	ldr	r1, [sp, #4]
 80173f8:	2230      	movs	r2, #48	; 0x30
 80173fa:	3701      	adds	r7, #1
 80173fc:	700a      	strb	r2, [r1, #0]
 80173fe:	781a      	ldrb	r2, [r3, #0]
 8017400:	3201      	adds	r2, #1
 8017402:	701a      	strb	r2, [r3, #0]
 8017404:	e790      	b.n	8017328 <_dtoa_r+0x608>
 8017406:	4ba6      	ldr	r3, [pc, #664]	; (80176a0 <_dtoa_r+0x980>)
 8017408:	2200      	movs	r2, #0
 801740a:	f7e9 f915 	bl	8000638 <__aeabi_dmul>
 801740e:	2200      	movs	r2, #0
 8017410:	2300      	movs	r3, #0
 8017412:	4606      	mov	r6, r0
 8017414:	460f      	mov	r7, r1
 8017416:	f7e9 fb77 	bl	8000b08 <__aeabi_dcmpeq>
 801741a:	2800      	cmp	r0, #0
 801741c:	d09d      	beq.n	801735a <_dtoa_r+0x63a>
 801741e:	e7cf      	b.n	80173c0 <_dtoa_r+0x6a0>
 8017420:	9a08      	ldr	r2, [sp, #32]
 8017422:	2a00      	cmp	r2, #0
 8017424:	f000 80d7 	beq.w	80175d6 <_dtoa_r+0x8b6>
 8017428:	9a06      	ldr	r2, [sp, #24]
 801742a:	2a01      	cmp	r2, #1
 801742c:	f300 80ba 	bgt.w	80175a4 <_dtoa_r+0x884>
 8017430:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8017432:	2a00      	cmp	r2, #0
 8017434:	f000 80b2 	beq.w	801759c <_dtoa_r+0x87c>
 8017438:	f203 4333 	addw	r3, r3, #1075	; 0x433
 801743c:	9e07      	ldr	r6, [sp, #28]
 801743e:	9d04      	ldr	r5, [sp, #16]
 8017440:	9a04      	ldr	r2, [sp, #16]
 8017442:	441a      	add	r2, r3
 8017444:	9204      	str	r2, [sp, #16]
 8017446:	9a05      	ldr	r2, [sp, #20]
 8017448:	2101      	movs	r1, #1
 801744a:	441a      	add	r2, r3
 801744c:	4620      	mov	r0, r4
 801744e:	9205      	str	r2, [sp, #20]
 8017450:	f000 fb5c 	bl	8017b0c <__i2b>
 8017454:	4607      	mov	r7, r0
 8017456:	2d00      	cmp	r5, #0
 8017458:	dd0c      	ble.n	8017474 <_dtoa_r+0x754>
 801745a:	9b05      	ldr	r3, [sp, #20]
 801745c:	2b00      	cmp	r3, #0
 801745e:	dd09      	ble.n	8017474 <_dtoa_r+0x754>
 8017460:	42ab      	cmp	r3, r5
 8017462:	9a04      	ldr	r2, [sp, #16]
 8017464:	bfa8      	it	ge
 8017466:	462b      	movge	r3, r5
 8017468:	1ad2      	subs	r2, r2, r3
 801746a:	9204      	str	r2, [sp, #16]
 801746c:	9a05      	ldr	r2, [sp, #20]
 801746e:	1aed      	subs	r5, r5, r3
 8017470:	1ad3      	subs	r3, r2, r3
 8017472:	9305      	str	r3, [sp, #20]
 8017474:	9b07      	ldr	r3, [sp, #28]
 8017476:	b31b      	cbz	r3, 80174c0 <_dtoa_r+0x7a0>
 8017478:	9b08      	ldr	r3, [sp, #32]
 801747a:	2b00      	cmp	r3, #0
 801747c:	f000 80af 	beq.w	80175de <_dtoa_r+0x8be>
 8017480:	2e00      	cmp	r6, #0
 8017482:	dd13      	ble.n	80174ac <_dtoa_r+0x78c>
 8017484:	4639      	mov	r1, r7
 8017486:	4632      	mov	r2, r6
 8017488:	4620      	mov	r0, r4
 801748a:	f000 fbff 	bl	8017c8c <__pow5mult>
 801748e:	ee18 2a10 	vmov	r2, s16
 8017492:	4601      	mov	r1, r0
 8017494:	4607      	mov	r7, r0
 8017496:	4620      	mov	r0, r4
 8017498:	f000 fb4e 	bl	8017b38 <__multiply>
 801749c:	ee18 1a10 	vmov	r1, s16
 80174a0:	4680      	mov	r8, r0
 80174a2:	4620      	mov	r0, r4
 80174a4:	f000 fa7a 	bl	801799c <_Bfree>
 80174a8:	ee08 8a10 	vmov	s16, r8
 80174ac:	9b07      	ldr	r3, [sp, #28]
 80174ae:	1b9a      	subs	r2, r3, r6
 80174b0:	d006      	beq.n	80174c0 <_dtoa_r+0x7a0>
 80174b2:	ee18 1a10 	vmov	r1, s16
 80174b6:	4620      	mov	r0, r4
 80174b8:	f000 fbe8 	bl	8017c8c <__pow5mult>
 80174bc:	ee08 0a10 	vmov	s16, r0
 80174c0:	2101      	movs	r1, #1
 80174c2:	4620      	mov	r0, r4
 80174c4:	f000 fb22 	bl	8017b0c <__i2b>
 80174c8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80174ca:	2b00      	cmp	r3, #0
 80174cc:	4606      	mov	r6, r0
 80174ce:	f340 8088 	ble.w	80175e2 <_dtoa_r+0x8c2>
 80174d2:	461a      	mov	r2, r3
 80174d4:	4601      	mov	r1, r0
 80174d6:	4620      	mov	r0, r4
 80174d8:	f000 fbd8 	bl	8017c8c <__pow5mult>
 80174dc:	9b06      	ldr	r3, [sp, #24]
 80174de:	2b01      	cmp	r3, #1
 80174e0:	4606      	mov	r6, r0
 80174e2:	f340 8081 	ble.w	80175e8 <_dtoa_r+0x8c8>
 80174e6:	f04f 0800 	mov.w	r8, #0
 80174ea:	6933      	ldr	r3, [r6, #16]
 80174ec:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80174f0:	6918      	ldr	r0, [r3, #16]
 80174f2:	f000 fabb 	bl	8017a6c <__hi0bits>
 80174f6:	f1c0 0020 	rsb	r0, r0, #32
 80174fa:	9b05      	ldr	r3, [sp, #20]
 80174fc:	4418      	add	r0, r3
 80174fe:	f010 001f 	ands.w	r0, r0, #31
 8017502:	f000 8092 	beq.w	801762a <_dtoa_r+0x90a>
 8017506:	f1c0 0320 	rsb	r3, r0, #32
 801750a:	2b04      	cmp	r3, #4
 801750c:	f340 808a 	ble.w	8017624 <_dtoa_r+0x904>
 8017510:	f1c0 001c 	rsb	r0, r0, #28
 8017514:	9b04      	ldr	r3, [sp, #16]
 8017516:	4403      	add	r3, r0
 8017518:	9304      	str	r3, [sp, #16]
 801751a:	9b05      	ldr	r3, [sp, #20]
 801751c:	4403      	add	r3, r0
 801751e:	4405      	add	r5, r0
 8017520:	9305      	str	r3, [sp, #20]
 8017522:	9b04      	ldr	r3, [sp, #16]
 8017524:	2b00      	cmp	r3, #0
 8017526:	dd07      	ble.n	8017538 <_dtoa_r+0x818>
 8017528:	ee18 1a10 	vmov	r1, s16
 801752c:	461a      	mov	r2, r3
 801752e:	4620      	mov	r0, r4
 8017530:	f000 fc06 	bl	8017d40 <__lshift>
 8017534:	ee08 0a10 	vmov	s16, r0
 8017538:	9b05      	ldr	r3, [sp, #20]
 801753a:	2b00      	cmp	r3, #0
 801753c:	dd05      	ble.n	801754a <_dtoa_r+0x82a>
 801753e:	4631      	mov	r1, r6
 8017540:	461a      	mov	r2, r3
 8017542:	4620      	mov	r0, r4
 8017544:	f000 fbfc 	bl	8017d40 <__lshift>
 8017548:	4606      	mov	r6, r0
 801754a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801754c:	2b00      	cmp	r3, #0
 801754e:	d06e      	beq.n	801762e <_dtoa_r+0x90e>
 8017550:	ee18 0a10 	vmov	r0, s16
 8017554:	4631      	mov	r1, r6
 8017556:	f000 fc63 	bl	8017e20 <__mcmp>
 801755a:	2800      	cmp	r0, #0
 801755c:	da67      	bge.n	801762e <_dtoa_r+0x90e>
 801755e:	9b00      	ldr	r3, [sp, #0]
 8017560:	3b01      	subs	r3, #1
 8017562:	ee18 1a10 	vmov	r1, s16
 8017566:	9300      	str	r3, [sp, #0]
 8017568:	220a      	movs	r2, #10
 801756a:	2300      	movs	r3, #0
 801756c:	4620      	mov	r0, r4
 801756e:	f000 fa37 	bl	80179e0 <__multadd>
 8017572:	9b08      	ldr	r3, [sp, #32]
 8017574:	ee08 0a10 	vmov	s16, r0
 8017578:	2b00      	cmp	r3, #0
 801757a:	f000 81b1 	beq.w	80178e0 <_dtoa_r+0xbc0>
 801757e:	2300      	movs	r3, #0
 8017580:	4639      	mov	r1, r7
 8017582:	220a      	movs	r2, #10
 8017584:	4620      	mov	r0, r4
 8017586:	f000 fa2b 	bl	80179e0 <__multadd>
 801758a:	9b02      	ldr	r3, [sp, #8]
 801758c:	2b00      	cmp	r3, #0
 801758e:	4607      	mov	r7, r0
 8017590:	f300 808e 	bgt.w	80176b0 <_dtoa_r+0x990>
 8017594:	9b06      	ldr	r3, [sp, #24]
 8017596:	2b02      	cmp	r3, #2
 8017598:	dc51      	bgt.n	801763e <_dtoa_r+0x91e>
 801759a:	e089      	b.n	80176b0 <_dtoa_r+0x990>
 801759c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801759e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80175a2:	e74b      	b.n	801743c <_dtoa_r+0x71c>
 80175a4:	9b03      	ldr	r3, [sp, #12]
 80175a6:	1e5e      	subs	r6, r3, #1
 80175a8:	9b07      	ldr	r3, [sp, #28]
 80175aa:	42b3      	cmp	r3, r6
 80175ac:	bfbf      	itttt	lt
 80175ae:	9b07      	ldrlt	r3, [sp, #28]
 80175b0:	9607      	strlt	r6, [sp, #28]
 80175b2:	1af2      	sublt	r2, r6, r3
 80175b4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80175b6:	bfb6      	itet	lt
 80175b8:	189b      	addlt	r3, r3, r2
 80175ba:	1b9e      	subge	r6, r3, r6
 80175bc:	930a      	strlt	r3, [sp, #40]	; 0x28
 80175be:	9b03      	ldr	r3, [sp, #12]
 80175c0:	bfb8      	it	lt
 80175c2:	2600      	movlt	r6, #0
 80175c4:	2b00      	cmp	r3, #0
 80175c6:	bfb7      	itett	lt
 80175c8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80175cc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80175d0:	1a9d      	sublt	r5, r3, r2
 80175d2:	2300      	movlt	r3, #0
 80175d4:	e734      	b.n	8017440 <_dtoa_r+0x720>
 80175d6:	9e07      	ldr	r6, [sp, #28]
 80175d8:	9d04      	ldr	r5, [sp, #16]
 80175da:	9f08      	ldr	r7, [sp, #32]
 80175dc:	e73b      	b.n	8017456 <_dtoa_r+0x736>
 80175de:	9a07      	ldr	r2, [sp, #28]
 80175e0:	e767      	b.n	80174b2 <_dtoa_r+0x792>
 80175e2:	9b06      	ldr	r3, [sp, #24]
 80175e4:	2b01      	cmp	r3, #1
 80175e6:	dc18      	bgt.n	801761a <_dtoa_r+0x8fa>
 80175e8:	f1ba 0f00 	cmp.w	sl, #0
 80175ec:	d115      	bne.n	801761a <_dtoa_r+0x8fa>
 80175ee:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80175f2:	b993      	cbnz	r3, 801761a <_dtoa_r+0x8fa>
 80175f4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80175f8:	0d1b      	lsrs	r3, r3, #20
 80175fa:	051b      	lsls	r3, r3, #20
 80175fc:	b183      	cbz	r3, 8017620 <_dtoa_r+0x900>
 80175fe:	9b04      	ldr	r3, [sp, #16]
 8017600:	3301      	adds	r3, #1
 8017602:	9304      	str	r3, [sp, #16]
 8017604:	9b05      	ldr	r3, [sp, #20]
 8017606:	3301      	adds	r3, #1
 8017608:	9305      	str	r3, [sp, #20]
 801760a:	f04f 0801 	mov.w	r8, #1
 801760e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8017610:	2b00      	cmp	r3, #0
 8017612:	f47f af6a 	bne.w	80174ea <_dtoa_r+0x7ca>
 8017616:	2001      	movs	r0, #1
 8017618:	e76f      	b.n	80174fa <_dtoa_r+0x7da>
 801761a:	f04f 0800 	mov.w	r8, #0
 801761e:	e7f6      	b.n	801760e <_dtoa_r+0x8ee>
 8017620:	4698      	mov	r8, r3
 8017622:	e7f4      	b.n	801760e <_dtoa_r+0x8ee>
 8017624:	f43f af7d 	beq.w	8017522 <_dtoa_r+0x802>
 8017628:	4618      	mov	r0, r3
 801762a:	301c      	adds	r0, #28
 801762c:	e772      	b.n	8017514 <_dtoa_r+0x7f4>
 801762e:	9b03      	ldr	r3, [sp, #12]
 8017630:	2b00      	cmp	r3, #0
 8017632:	dc37      	bgt.n	80176a4 <_dtoa_r+0x984>
 8017634:	9b06      	ldr	r3, [sp, #24]
 8017636:	2b02      	cmp	r3, #2
 8017638:	dd34      	ble.n	80176a4 <_dtoa_r+0x984>
 801763a:	9b03      	ldr	r3, [sp, #12]
 801763c:	9302      	str	r3, [sp, #8]
 801763e:	9b02      	ldr	r3, [sp, #8]
 8017640:	b96b      	cbnz	r3, 801765e <_dtoa_r+0x93e>
 8017642:	4631      	mov	r1, r6
 8017644:	2205      	movs	r2, #5
 8017646:	4620      	mov	r0, r4
 8017648:	f000 f9ca 	bl	80179e0 <__multadd>
 801764c:	4601      	mov	r1, r0
 801764e:	4606      	mov	r6, r0
 8017650:	ee18 0a10 	vmov	r0, s16
 8017654:	f000 fbe4 	bl	8017e20 <__mcmp>
 8017658:	2800      	cmp	r0, #0
 801765a:	f73f adbb 	bgt.w	80171d4 <_dtoa_r+0x4b4>
 801765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8017660:	9d01      	ldr	r5, [sp, #4]
 8017662:	43db      	mvns	r3, r3
 8017664:	9300      	str	r3, [sp, #0]
 8017666:	f04f 0800 	mov.w	r8, #0
 801766a:	4631      	mov	r1, r6
 801766c:	4620      	mov	r0, r4
 801766e:	f000 f995 	bl	801799c <_Bfree>
 8017672:	2f00      	cmp	r7, #0
 8017674:	f43f aea4 	beq.w	80173c0 <_dtoa_r+0x6a0>
 8017678:	f1b8 0f00 	cmp.w	r8, #0
 801767c:	d005      	beq.n	801768a <_dtoa_r+0x96a>
 801767e:	45b8      	cmp	r8, r7
 8017680:	d003      	beq.n	801768a <_dtoa_r+0x96a>
 8017682:	4641      	mov	r1, r8
 8017684:	4620      	mov	r0, r4
 8017686:	f000 f989 	bl	801799c <_Bfree>
 801768a:	4639      	mov	r1, r7
 801768c:	4620      	mov	r0, r4
 801768e:	f000 f985 	bl	801799c <_Bfree>
 8017692:	e695      	b.n	80173c0 <_dtoa_r+0x6a0>
 8017694:	2600      	movs	r6, #0
 8017696:	4637      	mov	r7, r6
 8017698:	e7e1      	b.n	801765e <_dtoa_r+0x93e>
 801769a:	9700      	str	r7, [sp, #0]
 801769c:	4637      	mov	r7, r6
 801769e:	e599      	b.n	80171d4 <_dtoa_r+0x4b4>
 80176a0:	40240000 	.word	0x40240000
 80176a4:	9b08      	ldr	r3, [sp, #32]
 80176a6:	2b00      	cmp	r3, #0
 80176a8:	f000 80ca 	beq.w	8017840 <_dtoa_r+0xb20>
 80176ac:	9b03      	ldr	r3, [sp, #12]
 80176ae:	9302      	str	r3, [sp, #8]
 80176b0:	2d00      	cmp	r5, #0
 80176b2:	dd05      	ble.n	80176c0 <_dtoa_r+0x9a0>
 80176b4:	4639      	mov	r1, r7
 80176b6:	462a      	mov	r2, r5
 80176b8:	4620      	mov	r0, r4
 80176ba:	f000 fb41 	bl	8017d40 <__lshift>
 80176be:	4607      	mov	r7, r0
 80176c0:	f1b8 0f00 	cmp.w	r8, #0
 80176c4:	d05b      	beq.n	801777e <_dtoa_r+0xa5e>
 80176c6:	6879      	ldr	r1, [r7, #4]
 80176c8:	4620      	mov	r0, r4
 80176ca:	f000 f927 	bl	801791c <_Balloc>
 80176ce:	4605      	mov	r5, r0
 80176d0:	b928      	cbnz	r0, 80176de <_dtoa_r+0x9be>
 80176d2:	4b87      	ldr	r3, [pc, #540]	; (80178f0 <_dtoa_r+0xbd0>)
 80176d4:	4602      	mov	r2, r0
 80176d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80176da:	f7ff bb3b 	b.w	8016d54 <_dtoa_r+0x34>
 80176de:	693a      	ldr	r2, [r7, #16]
 80176e0:	3202      	adds	r2, #2
 80176e2:	0092      	lsls	r2, r2, #2
 80176e4:	f107 010c 	add.w	r1, r7, #12
 80176e8:	300c      	adds	r0, #12
 80176ea:	f7fe fc71 	bl	8015fd0 <memcpy>
 80176ee:	2201      	movs	r2, #1
 80176f0:	4629      	mov	r1, r5
 80176f2:	4620      	mov	r0, r4
 80176f4:	f000 fb24 	bl	8017d40 <__lshift>
 80176f8:	9b01      	ldr	r3, [sp, #4]
 80176fa:	f103 0901 	add.w	r9, r3, #1
 80176fe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8017702:	4413      	add	r3, r2
 8017704:	9305      	str	r3, [sp, #20]
 8017706:	f00a 0301 	and.w	r3, sl, #1
 801770a:	46b8      	mov	r8, r7
 801770c:	9304      	str	r3, [sp, #16]
 801770e:	4607      	mov	r7, r0
 8017710:	4631      	mov	r1, r6
 8017712:	ee18 0a10 	vmov	r0, s16
 8017716:	f7ff fa77 	bl	8016c08 <quorem>
 801771a:	4641      	mov	r1, r8
 801771c:	9002      	str	r0, [sp, #8]
 801771e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017722:	ee18 0a10 	vmov	r0, s16
 8017726:	f000 fb7b 	bl	8017e20 <__mcmp>
 801772a:	463a      	mov	r2, r7
 801772c:	9003      	str	r0, [sp, #12]
 801772e:	4631      	mov	r1, r6
 8017730:	4620      	mov	r0, r4
 8017732:	f000 fb91 	bl	8017e58 <__mdiff>
 8017736:	68c2      	ldr	r2, [r0, #12]
 8017738:	f109 3bff 	add.w	fp, r9, #4294967295
 801773c:	4605      	mov	r5, r0
 801773e:	bb02      	cbnz	r2, 8017782 <_dtoa_r+0xa62>
 8017740:	4601      	mov	r1, r0
 8017742:	ee18 0a10 	vmov	r0, s16
 8017746:	f000 fb6b 	bl	8017e20 <__mcmp>
 801774a:	4602      	mov	r2, r0
 801774c:	4629      	mov	r1, r5
 801774e:	4620      	mov	r0, r4
 8017750:	9207      	str	r2, [sp, #28]
 8017752:	f000 f923 	bl	801799c <_Bfree>
 8017756:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 801775a:	ea43 0102 	orr.w	r1, r3, r2
 801775e:	9b04      	ldr	r3, [sp, #16]
 8017760:	430b      	orrs	r3, r1
 8017762:	464d      	mov	r5, r9
 8017764:	d10f      	bne.n	8017786 <_dtoa_r+0xa66>
 8017766:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801776a:	d02a      	beq.n	80177c2 <_dtoa_r+0xaa2>
 801776c:	9b03      	ldr	r3, [sp, #12]
 801776e:	2b00      	cmp	r3, #0
 8017770:	dd02      	ble.n	8017778 <_dtoa_r+0xa58>
 8017772:	9b02      	ldr	r3, [sp, #8]
 8017774:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8017778:	f88b a000 	strb.w	sl, [fp]
 801777c:	e775      	b.n	801766a <_dtoa_r+0x94a>
 801777e:	4638      	mov	r0, r7
 8017780:	e7ba      	b.n	80176f8 <_dtoa_r+0x9d8>
 8017782:	2201      	movs	r2, #1
 8017784:	e7e2      	b.n	801774c <_dtoa_r+0xa2c>
 8017786:	9b03      	ldr	r3, [sp, #12]
 8017788:	2b00      	cmp	r3, #0
 801778a:	db04      	blt.n	8017796 <_dtoa_r+0xa76>
 801778c:	9906      	ldr	r1, [sp, #24]
 801778e:	430b      	orrs	r3, r1
 8017790:	9904      	ldr	r1, [sp, #16]
 8017792:	430b      	orrs	r3, r1
 8017794:	d122      	bne.n	80177dc <_dtoa_r+0xabc>
 8017796:	2a00      	cmp	r2, #0
 8017798:	ddee      	ble.n	8017778 <_dtoa_r+0xa58>
 801779a:	ee18 1a10 	vmov	r1, s16
 801779e:	2201      	movs	r2, #1
 80177a0:	4620      	mov	r0, r4
 80177a2:	f000 facd 	bl	8017d40 <__lshift>
 80177a6:	4631      	mov	r1, r6
 80177a8:	ee08 0a10 	vmov	s16, r0
 80177ac:	f000 fb38 	bl	8017e20 <__mcmp>
 80177b0:	2800      	cmp	r0, #0
 80177b2:	dc03      	bgt.n	80177bc <_dtoa_r+0xa9c>
 80177b4:	d1e0      	bne.n	8017778 <_dtoa_r+0xa58>
 80177b6:	f01a 0f01 	tst.w	sl, #1
 80177ba:	d0dd      	beq.n	8017778 <_dtoa_r+0xa58>
 80177bc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80177c0:	d1d7      	bne.n	8017772 <_dtoa_r+0xa52>
 80177c2:	2339      	movs	r3, #57	; 0x39
 80177c4:	f88b 3000 	strb.w	r3, [fp]
 80177c8:	462b      	mov	r3, r5
 80177ca:	461d      	mov	r5, r3
 80177cc:	3b01      	subs	r3, #1
 80177ce:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80177d2:	2a39      	cmp	r2, #57	; 0x39
 80177d4:	d071      	beq.n	80178ba <_dtoa_r+0xb9a>
 80177d6:	3201      	adds	r2, #1
 80177d8:	701a      	strb	r2, [r3, #0]
 80177da:	e746      	b.n	801766a <_dtoa_r+0x94a>
 80177dc:	2a00      	cmp	r2, #0
 80177de:	dd07      	ble.n	80177f0 <_dtoa_r+0xad0>
 80177e0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80177e4:	d0ed      	beq.n	80177c2 <_dtoa_r+0xaa2>
 80177e6:	f10a 0301 	add.w	r3, sl, #1
 80177ea:	f88b 3000 	strb.w	r3, [fp]
 80177ee:	e73c      	b.n	801766a <_dtoa_r+0x94a>
 80177f0:	9b05      	ldr	r3, [sp, #20]
 80177f2:	f809 ac01 	strb.w	sl, [r9, #-1]
 80177f6:	4599      	cmp	r9, r3
 80177f8:	d047      	beq.n	801788a <_dtoa_r+0xb6a>
 80177fa:	ee18 1a10 	vmov	r1, s16
 80177fe:	2300      	movs	r3, #0
 8017800:	220a      	movs	r2, #10
 8017802:	4620      	mov	r0, r4
 8017804:	f000 f8ec 	bl	80179e0 <__multadd>
 8017808:	45b8      	cmp	r8, r7
 801780a:	ee08 0a10 	vmov	s16, r0
 801780e:	f04f 0300 	mov.w	r3, #0
 8017812:	f04f 020a 	mov.w	r2, #10
 8017816:	4641      	mov	r1, r8
 8017818:	4620      	mov	r0, r4
 801781a:	d106      	bne.n	801782a <_dtoa_r+0xb0a>
 801781c:	f000 f8e0 	bl	80179e0 <__multadd>
 8017820:	4680      	mov	r8, r0
 8017822:	4607      	mov	r7, r0
 8017824:	f109 0901 	add.w	r9, r9, #1
 8017828:	e772      	b.n	8017710 <_dtoa_r+0x9f0>
 801782a:	f000 f8d9 	bl	80179e0 <__multadd>
 801782e:	4639      	mov	r1, r7
 8017830:	4680      	mov	r8, r0
 8017832:	2300      	movs	r3, #0
 8017834:	220a      	movs	r2, #10
 8017836:	4620      	mov	r0, r4
 8017838:	f000 f8d2 	bl	80179e0 <__multadd>
 801783c:	4607      	mov	r7, r0
 801783e:	e7f1      	b.n	8017824 <_dtoa_r+0xb04>
 8017840:	9b03      	ldr	r3, [sp, #12]
 8017842:	9302      	str	r3, [sp, #8]
 8017844:	9d01      	ldr	r5, [sp, #4]
 8017846:	ee18 0a10 	vmov	r0, s16
 801784a:	4631      	mov	r1, r6
 801784c:	f7ff f9dc 	bl	8016c08 <quorem>
 8017850:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8017854:	9b01      	ldr	r3, [sp, #4]
 8017856:	f805 ab01 	strb.w	sl, [r5], #1
 801785a:	1aea      	subs	r2, r5, r3
 801785c:	9b02      	ldr	r3, [sp, #8]
 801785e:	4293      	cmp	r3, r2
 8017860:	dd09      	ble.n	8017876 <_dtoa_r+0xb56>
 8017862:	ee18 1a10 	vmov	r1, s16
 8017866:	2300      	movs	r3, #0
 8017868:	220a      	movs	r2, #10
 801786a:	4620      	mov	r0, r4
 801786c:	f000 f8b8 	bl	80179e0 <__multadd>
 8017870:	ee08 0a10 	vmov	s16, r0
 8017874:	e7e7      	b.n	8017846 <_dtoa_r+0xb26>
 8017876:	9b02      	ldr	r3, [sp, #8]
 8017878:	2b00      	cmp	r3, #0
 801787a:	bfc8      	it	gt
 801787c:	461d      	movgt	r5, r3
 801787e:	9b01      	ldr	r3, [sp, #4]
 8017880:	bfd8      	it	le
 8017882:	2501      	movle	r5, #1
 8017884:	441d      	add	r5, r3
 8017886:	f04f 0800 	mov.w	r8, #0
 801788a:	ee18 1a10 	vmov	r1, s16
 801788e:	2201      	movs	r2, #1
 8017890:	4620      	mov	r0, r4
 8017892:	f000 fa55 	bl	8017d40 <__lshift>
 8017896:	4631      	mov	r1, r6
 8017898:	ee08 0a10 	vmov	s16, r0
 801789c:	f000 fac0 	bl	8017e20 <__mcmp>
 80178a0:	2800      	cmp	r0, #0
 80178a2:	dc91      	bgt.n	80177c8 <_dtoa_r+0xaa8>
 80178a4:	d102      	bne.n	80178ac <_dtoa_r+0xb8c>
 80178a6:	f01a 0f01 	tst.w	sl, #1
 80178aa:	d18d      	bne.n	80177c8 <_dtoa_r+0xaa8>
 80178ac:	462b      	mov	r3, r5
 80178ae:	461d      	mov	r5, r3
 80178b0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80178b4:	2a30      	cmp	r2, #48	; 0x30
 80178b6:	d0fa      	beq.n	80178ae <_dtoa_r+0xb8e>
 80178b8:	e6d7      	b.n	801766a <_dtoa_r+0x94a>
 80178ba:	9a01      	ldr	r2, [sp, #4]
 80178bc:	429a      	cmp	r2, r3
 80178be:	d184      	bne.n	80177ca <_dtoa_r+0xaaa>
 80178c0:	9b00      	ldr	r3, [sp, #0]
 80178c2:	3301      	adds	r3, #1
 80178c4:	9300      	str	r3, [sp, #0]
 80178c6:	2331      	movs	r3, #49	; 0x31
 80178c8:	7013      	strb	r3, [r2, #0]
 80178ca:	e6ce      	b.n	801766a <_dtoa_r+0x94a>
 80178cc:	4b09      	ldr	r3, [pc, #36]	; (80178f4 <_dtoa_r+0xbd4>)
 80178ce:	f7ff ba95 	b.w	8016dfc <_dtoa_r+0xdc>
 80178d2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80178d4:	2b00      	cmp	r3, #0
 80178d6:	f47f aa6e 	bne.w	8016db6 <_dtoa_r+0x96>
 80178da:	4b07      	ldr	r3, [pc, #28]	; (80178f8 <_dtoa_r+0xbd8>)
 80178dc:	f7ff ba8e 	b.w	8016dfc <_dtoa_r+0xdc>
 80178e0:	9b02      	ldr	r3, [sp, #8]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	dcae      	bgt.n	8017844 <_dtoa_r+0xb24>
 80178e6:	9b06      	ldr	r3, [sp, #24]
 80178e8:	2b02      	cmp	r3, #2
 80178ea:	f73f aea8 	bgt.w	801763e <_dtoa_r+0x91e>
 80178ee:	e7a9      	b.n	8017844 <_dtoa_r+0xb24>
 80178f0:	08019bb0 	.word	0x08019bb0
 80178f4:	08019a0c 	.word	0x08019a0c
 80178f8:	08019b31 	.word	0x08019b31

080178fc <_localeconv_r>:
 80178fc:	4800      	ldr	r0, [pc, #0]	; (8017900 <_localeconv_r+0x4>)
 80178fe:	4770      	bx	lr
 8017900:	20000280 	.word	0x20000280

08017904 <__malloc_lock>:
 8017904:	4801      	ldr	r0, [pc, #4]	; (801790c <__malloc_lock+0x8>)
 8017906:	f000 bd30 	b.w	801836a <__retarget_lock_acquire_recursive>
 801790a:	bf00      	nop
 801790c:	20004e68 	.word	0x20004e68

08017910 <__malloc_unlock>:
 8017910:	4801      	ldr	r0, [pc, #4]	; (8017918 <__malloc_unlock+0x8>)
 8017912:	f000 bd2b 	b.w	801836c <__retarget_lock_release_recursive>
 8017916:	bf00      	nop
 8017918:	20004e68 	.word	0x20004e68

0801791c <_Balloc>:
 801791c:	b570      	push	{r4, r5, r6, lr}
 801791e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8017920:	4604      	mov	r4, r0
 8017922:	460d      	mov	r5, r1
 8017924:	b976      	cbnz	r6, 8017944 <_Balloc+0x28>
 8017926:	2010      	movs	r0, #16
 8017928:	f7fe fb42 	bl	8015fb0 <malloc>
 801792c:	4602      	mov	r2, r0
 801792e:	6260      	str	r0, [r4, #36]	; 0x24
 8017930:	b920      	cbnz	r0, 801793c <_Balloc+0x20>
 8017932:	4b18      	ldr	r3, [pc, #96]	; (8017994 <_Balloc+0x78>)
 8017934:	4818      	ldr	r0, [pc, #96]	; (8017998 <_Balloc+0x7c>)
 8017936:	2166      	movs	r1, #102	; 0x66
 8017938:	f000 fce6 	bl	8018308 <__assert_func>
 801793c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8017940:	6006      	str	r6, [r0, #0]
 8017942:	60c6      	str	r6, [r0, #12]
 8017944:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8017946:	68f3      	ldr	r3, [r6, #12]
 8017948:	b183      	cbz	r3, 801796c <_Balloc+0x50>
 801794a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801794c:	68db      	ldr	r3, [r3, #12]
 801794e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017952:	b9b8      	cbnz	r0, 8017984 <_Balloc+0x68>
 8017954:	2101      	movs	r1, #1
 8017956:	fa01 f605 	lsl.w	r6, r1, r5
 801795a:	1d72      	adds	r2, r6, #5
 801795c:	0092      	lsls	r2, r2, #2
 801795e:	4620      	mov	r0, r4
 8017960:	f000 fb60 	bl	8018024 <_calloc_r>
 8017964:	b160      	cbz	r0, 8017980 <_Balloc+0x64>
 8017966:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801796a:	e00e      	b.n	801798a <_Balloc+0x6e>
 801796c:	2221      	movs	r2, #33	; 0x21
 801796e:	2104      	movs	r1, #4
 8017970:	4620      	mov	r0, r4
 8017972:	f000 fb57 	bl	8018024 <_calloc_r>
 8017976:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8017978:	60f0      	str	r0, [r6, #12]
 801797a:	68db      	ldr	r3, [r3, #12]
 801797c:	2b00      	cmp	r3, #0
 801797e:	d1e4      	bne.n	801794a <_Balloc+0x2e>
 8017980:	2000      	movs	r0, #0
 8017982:	bd70      	pop	{r4, r5, r6, pc}
 8017984:	6802      	ldr	r2, [r0, #0]
 8017986:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801798a:	2300      	movs	r3, #0
 801798c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8017990:	e7f7      	b.n	8017982 <_Balloc+0x66>
 8017992:	bf00      	nop
 8017994:	08019b3e 	.word	0x08019b3e
 8017998:	08019bc1 	.word	0x08019bc1

0801799c <_Bfree>:
 801799c:	b570      	push	{r4, r5, r6, lr}
 801799e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80179a0:	4605      	mov	r5, r0
 80179a2:	460c      	mov	r4, r1
 80179a4:	b976      	cbnz	r6, 80179c4 <_Bfree+0x28>
 80179a6:	2010      	movs	r0, #16
 80179a8:	f7fe fb02 	bl	8015fb0 <malloc>
 80179ac:	4602      	mov	r2, r0
 80179ae:	6268      	str	r0, [r5, #36]	; 0x24
 80179b0:	b920      	cbnz	r0, 80179bc <_Bfree+0x20>
 80179b2:	4b09      	ldr	r3, [pc, #36]	; (80179d8 <_Bfree+0x3c>)
 80179b4:	4809      	ldr	r0, [pc, #36]	; (80179dc <_Bfree+0x40>)
 80179b6:	218a      	movs	r1, #138	; 0x8a
 80179b8:	f000 fca6 	bl	8018308 <__assert_func>
 80179bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80179c0:	6006      	str	r6, [r0, #0]
 80179c2:	60c6      	str	r6, [r0, #12]
 80179c4:	b13c      	cbz	r4, 80179d6 <_Bfree+0x3a>
 80179c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80179c8:	6862      	ldr	r2, [r4, #4]
 80179ca:	68db      	ldr	r3, [r3, #12]
 80179cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80179d0:	6021      	str	r1, [r4, #0]
 80179d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80179d6:	bd70      	pop	{r4, r5, r6, pc}
 80179d8:	08019b3e 	.word	0x08019b3e
 80179dc:	08019bc1 	.word	0x08019bc1

080179e0 <__multadd>:
 80179e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80179e4:	690d      	ldr	r5, [r1, #16]
 80179e6:	4607      	mov	r7, r0
 80179e8:	460c      	mov	r4, r1
 80179ea:	461e      	mov	r6, r3
 80179ec:	f101 0c14 	add.w	ip, r1, #20
 80179f0:	2000      	movs	r0, #0
 80179f2:	f8dc 3000 	ldr.w	r3, [ip]
 80179f6:	b299      	uxth	r1, r3
 80179f8:	fb02 6101 	mla	r1, r2, r1, r6
 80179fc:	0c1e      	lsrs	r6, r3, #16
 80179fe:	0c0b      	lsrs	r3, r1, #16
 8017a00:	fb02 3306 	mla	r3, r2, r6, r3
 8017a04:	b289      	uxth	r1, r1
 8017a06:	3001      	adds	r0, #1
 8017a08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8017a0c:	4285      	cmp	r5, r0
 8017a0e:	f84c 1b04 	str.w	r1, [ip], #4
 8017a12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8017a16:	dcec      	bgt.n	80179f2 <__multadd+0x12>
 8017a18:	b30e      	cbz	r6, 8017a5e <__multadd+0x7e>
 8017a1a:	68a3      	ldr	r3, [r4, #8]
 8017a1c:	42ab      	cmp	r3, r5
 8017a1e:	dc19      	bgt.n	8017a54 <__multadd+0x74>
 8017a20:	6861      	ldr	r1, [r4, #4]
 8017a22:	4638      	mov	r0, r7
 8017a24:	3101      	adds	r1, #1
 8017a26:	f7ff ff79 	bl	801791c <_Balloc>
 8017a2a:	4680      	mov	r8, r0
 8017a2c:	b928      	cbnz	r0, 8017a3a <__multadd+0x5a>
 8017a2e:	4602      	mov	r2, r0
 8017a30:	4b0c      	ldr	r3, [pc, #48]	; (8017a64 <__multadd+0x84>)
 8017a32:	480d      	ldr	r0, [pc, #52]	; (8017a68 <__multadd+0x88>)
 8017a34:	21b5      	movs	r1, #181	; 0xb5
 8017a36:	f000 fc67 	bl	8018308 <__assert_func>
 8017a3a:	6922      	ldr	r2, [r4, #16]
 8017a3c:	3202      	adds	r2, #2
 8017a3e:	f104 010c 	add.w	r1, r4, #12
 8017a42:	0092      	lsls	r2, r2, #2
 8017a44:	300c      	adds	r0, #12
 8017a46:	f7fe fac3 	bl	8015fd0 <memcpy>
 8017a4a:	4621      	mov	r1, r4
 8017a4c:	4638      	mov	r0, r7
 8017a4e:	f7ff ffa5 	bl	801799c <_Bfree>
 8017a52:	4644      	mov	r4, r8
 8017a54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8017a58:	3501      	adds	r5, #1
 8017a5a:	615e      	str	r6, [r3, #20]
 8017a5c:	6125      	str	r5, [r4, #16]
 8017a5e:	4620      	mov	r0, r4
 8017a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017a64:	08019bb0 	.word	0x08019bb0
 8017a68:	08019bc1 	.word	0x08019bc1

08017a6c <__hi0bits>:
 8017a6c:	0c03      	lsrs	r3, r0, #16
 8017a6e:	041b      	lsls	r3, r3, #16
 8017a70:	b9d3      	cbnz	r3, 8017aa8 <__hi0bits+0x3c>
 8017a72:	0400      	lsls	r0, r0, #16
 8017a74:	2310      	movs	r3, #16
 8017a76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8017a7a:	bf04      	itt	eq
 8017a7c:	0200      	lsleq	r0, r0, #8
 8017a7e:	3308      	addeq	r3, #8
 8017a80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8017a84:	bf04      	itt	eq
 8017a86:	0100      	lsleq	r0, r0, #4
 8017a88:	3304      	addeq	r3, #4
 8017a8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8017a8e:	bf04      	itt	eq
 8017a90:	0080      	lsleq	r0, r0, #2
 8017a92:	3302      	addeq	r3, #2
 8017a94:	2800      	cmp	r0, #0
 8017a96:	db05      	blt.n	8017aa4 <__hi0bits+0x38>
 8017a98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8017a9c:	f103 0301 	add.w	r3, r3, #1
 8017aa0:	bf08      	it	eq
 8017aa2:	2320      	moveq	r3, #32
 8017aa4:	4618      	mov	r0, r3
 8017aa6:	4770      	bx	lr
 8017aa8:	2300      	movs	r3, #0
 8017aaa:	e7e4      	b.n	8017a76 <__hi0bits+0xa>

08017aac <__lo0bits>:
 8017aac:	6803      	ldr	r3, [r0, #0]
 8017aae:	f013 0207 	ands.w	r2, r3, #7
 8017ab2:	4601      	mov	r1, r0
 8017ab4:	d00b      	beq.n	8017ace <__lo0bits+0x22>
 8017ab6:	07da      	lsls	r2, r3, #31
 8017ab8:	d423      	bmi.n	8017b02 <__lo0bits+0x56>
 8017aba:	0798      	lsls	r0, r3, #30
 8017abc:	bf49      	itett	mi
 8017abe:	085b      	lsrmi	r3, r3, #1
 8017ac0:	089b      	lsrpl	r3, r3, #2
 8017ac2:	2001      	movmi	r0, #1
 8017ac4:	600b      	strmi	r3, [r1, #0]
 8017ac6:	bf5c      	itt	pl
 8017ac8:	600b      	strpl	r3, [r1, #0]
 8017aca:	2002      	movpl	r0, #2
 8017acc:	4770      	bx	lr
 8017ace:	b298      	uxth	r0, r3
 8017ad0:	b9a8      	cbnz	r0, 8017afe <__lo0bits+0x52>
 8017ad2:	0c1b      	lsrs	r3, r3, #16
 8017ad4:	2010      	movs	r0, #16
 8017ad6:	b2da      	uxtb	r2, r3
 8017ad8:	b90a      	cbnz	r2, 8017ade <__lo0bits+0x32>
 8017ada:	3008      	adds	r0, #8
 8017adc:	0a1b      	lsrs	r3, r3, #8
 8017ade:	071a      	lsls	r2, r3, #28
 8017ae0:	bf04      	itt	eq
 8017ae2:	091b      	lsreq	r3, r3, #4
 8017ae4:	3004      	addeq	r0, #4
 8017ae6:	079a      	lsls	r2, r3, #30
 8017ae8:	bf04      	itt	eq
 8017aea:	089b      	lsreq	r3, r3, #2
 8017aec:	3002      	addeq	r0, #2
 8017aee:	07da      	lsls	r2, r3, #31
 8017af0:	d403      	bmi.n	8017afa <__lo0bits+0x4e>
 8017af2:	085b      	lsrs	r3, r3, #1
 8017af4:	f100 0001 	add.w	r0, r0, #1
 8017af8:	d005      	beq.n	8017b06 <__lo0bits+0x5a>
 8017afa:	600b      	str	r3, [r1, #0]
 8017afc:	4770      	bx	lr
 8017afe:	4610      	mov	r0, r2
 8017b00:	e7e9      	b.n	8017ad6 <__lo0bits+0x2a>
 8017b02:	2000      	movs	r0, #0
 8017b04:	4770      	bx	lr
 8017b06:	2020      	movs	r0, #32
 8017b08:	4770      	bx	lr
	...

08017b0c <__i2b>:
 8017b0c:	b510      	push	{r4, lr}
 8017b0e:	460c      	mov	r4, r1
 8017b10:	2101      	movs	r1, #1
 8017b12:	f7ff ff03 	bl	801791c <_Balloc>
 8017b16:	4602      	mov	r2, r0
 8017b18:	b928      	cbnz	r0, 8017b26 <__i2b+0x1a>
 8017b1a:	4b05      	ldr	r3, [pc, #20]	; (8017b30 <__i2b+0x24>)
 8017b1c:	4805      	ldr	r0, [pc, #20]	; (8017b34 <__i2b+0x28>)
 8017b1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8017b22:	f000 fbf1 	bl	8018308 <__assert_func>
 8017b26:	2301      	movs	r3, #1
 8017b28:	6144      	str	r4, [r0, #20]
 8017b2a:	6103      	str	r3, [r0, #16]
 8017b2c:	bd10      	pop	{r4, pc}
 8017b2e:	bf00      	nop
 8017b30:	08019bb0 	.word	0x08019bb0
 8017b34:	08019bc1 	.word	0x08019bc1

08017b38 <__multiply>:
 8017b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b3c:	4691      	mov	r9, r2
 8017b3e:	690a      	ldr	r2, [r1, #16]
 8017b40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8017b44:	429a      	cmp	r2, r3
 8017b46:	bfb8      	it	lt
 8017b48:	460b      	movlt	r3, r1
 8017b4a:	460c      	mov	r4, r1
 8017b4c:	bfbc      	itt	lt
 8017b4e:	464c      	movlt	r4, r9
 8017b50:	4699      	movlt	r9, r3
 8017b52:	6927      	ldr	r7, [r4, #16]
 8017b54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8017b58:	68a3      	ldr	r3, [r4, #8]
 8017b5a:	6861      	ldr	r1, [r4, #4]
 8017b5c:	eb07 060a 	add.w	r6, r7, sl
 8017b60:	42b3      	cmp	r3, r6
 8017b62:	b085      	sub	sp, #20
 8017b64:	bfb8      	it	lt
 8017b66:	3101      	addlt	r1, #1
 8017b68:	f7ff fed8 	bl	801791c <_Balloc>
 8017b6c:	b930      	cbnz	r0, 8017b7c <__multiply+0x44>
 8017b6e:	4602      	mov	r2, r0
 8017b70:	4b44      	ldr	r3, [pc, #272]	; (8017c84 <__multiply+0x14c>)
 8017b72:	4845      	ldr	r0, [pc, #276]	; (8017c88 <__multiply+0x150>)
 8017b74:	f240 115d 	movw	r1, #349	; 0x15d
 8017b78:	f000 fbc6 	bl	8018308 <__assert_func>
 8017b7c:	f100 0514 	add.w	r5, r0, #20
 8017b80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8017b84:	462b      	mov	r3, r5
 8017b86:	2200      	movs	r2, #0
 8017b88:	4543      	cmp	r3, r8
 8017b8a:	d321      	bcc.n	8017bd0 <__multiply+0x98>
 8017b8c:	f104 0314 	add.w	r3, r4, #20
 8017b90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8017b94:	f109 0314 	add.w	r3, r9, #20
 8017b98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8017b9c:	9202      	str	r2, [sp, #8]
 8017b9e:	1b3a      	subs	r2, r7, r4
 8017ba0:	3a15      	subs	r2, #21
 8017ba2:	f022 0203 	bic.w	r2, r2, #3
 8017ba6:	3204      	adds	r2, #4
 8017ba8:	f104 0115 	add.w	r1, r4, #21
 8017bac:	428f      	cmp	r7, r1
 8017bae:	bf38      	it	cc
 8017bb0:	2204      	movcc	r2, #4
 8017bb2:	9201      	str	r2, [sp, #4]
 8017bb4:	9a02      	ldr	r2, [sp, #8]
 8017bb6:	9303      	str	r3, [sp, #12]
 8017bb8:	429a      	cmp	r2, r3
 8017bba:	d80c      	bhi.n	8017bd6 <__multiply+0x9e>
 8017bbc:	2e00      	cmp	r6, #0
 8017bbe:	dd03      	ble.n	8017bc8 <__multiply+0x90>
 8017bc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8017bc4:	2b00      	cmp	r3, #0
 8017bc6:	d05a      	beq.n	8017c7e <__multiply+0x146>
 8017bc8:	6106      	str	r6, [r0, #16]
 8017bca:	b005      	add	sp, #20
 8017bcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017bd0:	f843 2b04 	str.w	r2, [r3], #4
 8017bd4:	e7d8      	b.n	8017b88 <__multiply+0x50>
 8017bd6:	f8b3 a000 	ldrh.w	sl, [r3]
 8017bda:	f1ba 0f00 	cmp.w	sl, #0
 8017bde:	d024      	beq.n	8017c2a <__multiply+0xf2>
 8017be0:	f104 0e14 	add.w	lr, r4, #20
 8017be4:	46a9      	mov	r9, r5
 8017be6:	f04f 0c00 	mov.w	ip, #0
 8017bea:	f85e 2b04 	ldr.w	r2, [lr], #4
 8017bee:	f8d9 1000 	ldr.w	r1, [r9]
 8017bf2:	fa1f fb82 	uxth.w	fp, r2
 8017bf6:	b289      	uxth	r1, r1
 8017bf8:	fb0a 110b 	mla	r1, sl, fp, r1
 8017bfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8017c00:	f8d9 2000 	ldr.w	r2, [r9]
 8017c04:	4461      	add	r1, ip
 8017c06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017c0a:	fb0a c20b 	mla	r2, sl, fp, ip
 8017c0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8017c12:	b289      	uxth	r1, r1
 8017c14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8017c18:	4577      	cmp	r7, lr
 8017c1a:	f849 1b04 	str.w	r1, [r9], #4
 8017c1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8017c22:	d8e2      	bhi.n	8017bea <__multiply+0xb2>
 8017c24:	9a01      	ldr	r2, [sp, #4]
 8017c26:	f845 c002 	str.w	ip, [r5, r2]
 8017c2a:	9a03      	ldr	r2, [sp, #12]
 8017c2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8017c30:	3304      	adds	r3, #4
 8017c32:	f1b9 0f00 	cmp.w	r9, #0
 8017c36:	d020      	beq.n	8017c7a <__multiply+0x142>
 8017c38:	6829      	ldr	r1, [r5, #0]
 8017c3a:	f104 0c14 	add.w	ip, r4, #20
 8017c3e:	46ae      	mov	lr, r5
 8017c40:	f04f 0a00 	mov.w	sl, #0
 8017c44:	f8bc b000 	ldrh.w	fp, [ip]
 8017c48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8017c4c:	fb09 220b 	mla	r2, r9, fp, r2
 8017c50:	4492      	add	sl, r2
 8017c52:	b289      	uxth	r1, r1
 8017c54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8017c58:	f84e 1b04 	str.w	r1, [lr], #4
 8017c5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8017c60:	f8be 1000 	ldrh.w	r1, [lr]
 8017c64:	0c12      	lsrs	r2, r2, #16
 8017c66:	fb09 1102 	mla	r1, r9, r2, r1
 8017c6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8017c6e:	4567      	cmp	r7, ip
 8017c70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8017c74:	d8e6      	bhi.n	8017c44 <__multiply+0x10c>
 8017c76:	9a01      	ldr	r2, [sp, #4]
 8017c78:	50a9      	str	r1, [r5, r2]
 8017c7a:	3504      	adds	r5, #4
 8017c7c:	e79a      	b.n	8017bb4 <__multiply+0x7c>
 8017c7e:	3e01      	subs	r6, #1
 8017c80:	e79c      	b.n	8017bbc <__multiply+0x84>
 8017c82:	bf00      	nop
 8017c84:	08019bb0 	.word	0x08019bb0
 8017c88:	08019bc1 	.word	0x08019bc1

08017c8c <__pow5mult>:
 8017c8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017c90:	4615      	mov	r5, r2
 8017c92:	f012 0203 	ands.w	r2, r2, #3
 8017c96:	4606      	mov	r6, r0
 8017c98:	460f      	mov	r7, r1
 8017c9a:	d007      	beq.n	8017cac <__pow5mult+0x20>
 8017c9c:	4c25      	ldr	r4, [pc, #148]	; (8017d34 <__pow5mult+0xa8>)
 8017c9e:	3a01      	subs	r2, #1
 8017ca0:	2300      	movs	r3, #0
 8017ca2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8017ca6:	f7ff fe9b 	bl	80179e0 <__multadd>
 8017caa:	4607      	mov	r7, r0
 8017cac:	10ad      	asrs	r5, r5, #2
 8017cae:	d03d      	beq.n	8017d2c <__pow5mult+0xa0>
 8017cb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8017cb2:	b97c      	cbnz	r4, 8017cd4 <__pow5mult+0x48>
 8017cb4:	2010      	movs	r0, #16
 8017cb6:	f7fe f97b 	bl	8015fb0 <malloc>
 8017cba:	4602      	mov	r2, r0
 8017cbc:	6270      	str	r0, [r6, #36]	; 0x24
 8017cbe:	b928      	cbnz	r0, 8017ccc <__pow5mult+0x40>
 8017cc0:	4b1d      	ldr	r3, [pc, #116]	; (8017d38 <__pow5mult+0xac>)
 8017cc2:	481e      	ldr	r0, [pc, #120]	; (8017d3c <__pow5mult+0xb0>)
 8017cc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8017cc8:	f000 fb1e 	bl	8018308 <__assert_func>
 8017ccc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8017cd0:	6004      	str	r4, [r0, #0]
 8017cd2:	60c4      	str	r4, [r0, #12]
 8017cd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8017cd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8017cdc:	b94c      	cbnz	r4, 8017cf2 <__pow5mult+0x66>
 8017cde:	f240 2171 	movw	r1, #625	; 0x271
 8017ce2:	4630      	mov	r0, r6
 8017ce4:	f7ff ff12 	bl	8017b0c <__i2b>
 8017ce8:	2300      	movs	r3, #0
 8017cea:	f8c8 0008 	str.w	r0, [r8, #8]
 8017cee:	4604      	mov	r4, r0
 8017cf0:	6003      	str	r3, [r0, #0]
 8017cf2:	f04f 0900 	mov.w	r9, #0
 8017cf6:	07eb      	lsls	r3, r5, #31
 8017cf8:	d50a      	bpl.n	8017d10 <__pow5mult+0x84>
 8017cfa:	4639      	mov	r1, r7
 8017cfc:	4622      	mov	r2, r4
 8017cfe:	4630      	mov	r0, r6
 8017d00:	f7ff ff1a 	bl	8017b38 <__multiply>
 8017d04:	4639      	mov	r1, r7
 8017d06:	4680      	mov	r8, r0
 8017d08:	4630      	mov	r0, r6
 8017d0a:	f7ff fe47 	bl	801799c <_Bfree>
 8017d0e:	4647      	mov	r7, r8
 8017d10:	106d      	asrs	r5, r5, #1
 8017d12:	d00b      	beq.n	8017d2c <__pow5mult+0xa0>
 8017d14:	6820      	ldr	r0, [r4, #0]
 8017d16:	b938      	cbnz	r0, 8017d28 <__pow5mult+0x9c>
 8017d18:	4622      	mov	r2, r4
 8017d1a:	4621      	mov	r1, r4
 8017d1c:	4630      	mov	r0, r6
 8017d1e:	f7ff ff0b 	bl	8017b38 <__multiply>
 8017d22:	6020      	str	r0, [r4, #0]
 8017d24:	f8c0 9000 	str.w	r9, [r0]
 8017d28:	4604      	mov	r4, r0
 8017d2a:	e7e4      	b.n	8017cf6 <__pow5mult+0x6a>
 8017d2c:	4638      	mov	r0, r7
 8017d2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017d32:	bf00      	nop
 8017d34:	08019d10 	.word	0x08019d10
 8017d38:	08019b3e 	.word	0x08019b3e
 8017d3c:	08019bc1 	.word	0x08019bc1

08017d40 <__lshift>:
 8017d40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017d44:	460c      	mov	r4, r1
 8017d46:	6849      	ldr	r1, [r1, #4]
 8017d48:	6923      	ldr	r3, [r4, #16]
 8017d4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8017d4e:	68a3      	ldr	r3, [r4, #8]
 8017d50:	4607      	mov	r7, r0
 8017d52:	4691      	mov	r9, r2
 8017d54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8017d58:	f108 0601 	add.w	r6, r8, #1
 8017d5c:	42b3      	cmp	r3, r6
 8017d5e:	db0b      	blt.n	8017d78 <__lshift+0x38>
 8017d60:	4638      	mov	r0, r7
 8017d62:	f7ff fddb 	bl	801791c <_Balloc>
 8017d66:	4605      	mov	r5, r0
 8017d68:	b948      	cbnz	r0, 8017d7e <__lshift+0x3e>
 8017d6a:	4602      	mov	r2, r0
 8017d6c:	4b2a      	ldr	r3, [pc, #168]	; (8017e18 <__lshift+0xd8>)
 8017d6e:	482b      	ldr	r0, [pc, #172]	; (8017e1c <__lshift+0xdc>)
 8017d70:	f240 11d9 	movw	r1, #473	; 0x1d9
 8017d74:	f000 fac8 	bl	8018308 <__assert_func>
 8017d78:	3101      	adds	r1, #1
 8017d7a:	005b      	lsls	r3, r3, #1
 8017d7c:	e7ee      	b.n	8017d5c <__lshift+0x1c>
 8017d7e:	2300      	movs	r3, #0
 8017d80:	f100 0114 	add.w	r1, r0, #20
 8017d84:	f100 0210 	add.w	r2, r0, #16
 8017d88:	4618      	mov	r0, r3
 8017d8a:	4553      	cmp	r3, sl
 8017d8c:	db37      	blt.n	8017dfe <__lshift+0xbe>
 8017d8e:	6920      	ldr	r0, [r4, #16]
 8017d90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8017d94:	f104 0314 	add.w	r3, r4, #20
 8017d98:	f019 091f 	ands.w	r9, r9, #31
 8017d9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8017da0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8017da4:	d02f      	beq.n	8017e06 <__lshift+0xc6>
 8017da6:	f1c9 0e20 	rsb	lr, r9, #32
 8017daa:	468a      	mov	sl, r1
 8017dac:	f04f 0c00 	mov.w	ip, #0
 8017db0:	681a      	ldr	r2, [r3, #0]
 8017db2:	fa02 f209 	lsl.w	r2, r2, r9
 8017db6:	ea42 020c 	orr.w	r2, r2, ip
 8017dba:	f84a 2b04 	str.w	r2, [sl], #4
 8017dbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017dc2:	4298      	cmp	r0, r3
 8017dc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 8017dc8:	d8f2      	bhi.n	8017db0 <__lshift+0x70>
 8017dca:	1b03      	subs	r3, r0, r4
 8017dcc:	3b15      	subs	r3, #21
 8017dce:	f023 0303 	bic.w	r3, r3, #3
 8017dd2:	3304      	adds	r3, #4
 8017dd4:	f104 0215 	add.w	r2, r4, #21
 8017dd8:	4290      	cmp	r0, r2
 8017dda:	bf38      	it	cc
 8017ddc:	2304      	movcc	r3, #4
 8017dde:	f841 c003 	str.w	ip, [r1, r3]
 8017de2:	f1bc 0f00 	cmp.w	ip, #0
 8017de6:	d001      	beq.n	8017dec <__lshift+0xac>
 8017de8:	f108 0602 	add.w	r6, r8, #2
 8017dec:	3e01      	subs	r6, #1
 8017dee:	4638      	mov	r0, r7
 8017df0:	612e      	str	r6, [r5, #16]
 8017df2:	4621      	mov	r1, r4
 8017df4:	f7ff fdd2 	bl	801799c <_Bfree>
 8017df8:	4628      	mov	r0, r5
 8017dfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017dfe:	f842 0f04 	str.w	r0, [r2, #4]!
 8017e02:	3301      	adds	r3, #1
 8017e04:	e7c1      	b.n	8017d8a <__lshift+0x4a>
 8017e06:	3904      	subs	r1, #4
 8017e08:	f853 2b04 	ldr.w	r2, [r3], #4
 8017e0c:	f841 2f04 	str.w	r2, [r1, #4]!
 8017e10:	4298      	cmp	r0, r3
 8017e12:	d8f9      	bhi.n	8017e08 <__lshift+0xc8>
 8017e14:	e7ea      	b.n	8017dec <__lshift+0xac>
 8017e16:	bf00      	nop
 8017e18:	08019bb0 	.word	0x08019bb0
 8017e1c:	08019bc1 	.word	0x08019bc1

08017e20 <__mcmp>:
 8017e20:	b530      	push	{r4, r5, lr}
 8017e22:	6902      	ldr	r2, [r0, #16]
 8017e24:	690c      	ldr	r4, [r1, #16]
 8017e26:	1b12      	subs	r2, r2, r4
 8017e28:	d10e      	bne.n	8017e48 <__mcmp+0x28>
 8017e2a:	f100 0314 	add.w	r3, r0, #20
 8017e2e:	3114      	adds	r1, #20
 8017e30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8017e34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8017e38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8017e3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8017e40:	42a5      	cmp	r5, r4
 8017e42:	d003      	beq.n	8017e4c <__mcmp+0x2c>
 8017e44:	d305      	bcc.n	8017e52 <__mcmp+0x32>
 8017e46:	2201      	movs	r2, #1
 8017e48:	4610      	mov	r0, r2
 8017e4a:	bd30      	pop	{r4, r5, pc}
 8017e4c:	4283      	cmp	r3, r0
 8017e4e:	d3f3      	bcc.n	8017e38 <__mcmp+0x18>
 8017e50:	e7fa      	b.n	8017e48 <__mcmp+0x28>
 8017e52:	f04f 32ff 	mov.w	r2, #4294967295
 8017e56:	e7f7      	b.n	8017e48 <__mcmp+0x28>

08017e58 <__mdiff>:
 8017e58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e5c:	460c      	mov	r4, r1
 8017e5e:	4606      	mov	r6, r0
 8017e60:	4611      	mov	r1, r2
 8017e62:	4620      	mov	r0, r4
 8017e64:	4690      	mov	r8, r2
 8017e66:	f7ff ffdb 	bl	8017e20 <__mcmp>
 8017e6a:	1e05      	subs	r5, r0, #0
 8017e6c:	d110      	bne.n	8017e90 <__mdiff+0x38>
 8017e6e:	4629      	mov	r1, r5
 8017e70:	4630      	mov	r0, r6
 8017e72:	f7ff fd53 	bl	801791c <_Balloc>
 8017e76:	b930      	cbnz	r0, 8017e86 <__mdiff+0x2e>
 8017e78:	4b3a      	ldr	r3, [pc, #232]	; (8017f64 <__mdiff+0x10c>)
 8017e7a:	4602      	mov	r2, r0
 8017e7c:	f240 2132 	movw	r1, #562	; 0x232
 8017e80:	4839      	ldr	r0, [pc, #228]	; (8017f68 <__mdiff+0x110>)
 8017e82:	f000 fa41 	bl	8018308 <__assert_func>
 8017e86:	2301      	movs	r3, #1
 8017e88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8017e8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e90:	bfa4      	itt	ge
 8017e92:	4643      	movge	r3, r8
 8017e94:	46a0      	movge	r8, r4
 8017e96:	4630      	mov	r0, r6
 8017e98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8017e9c:	bfa6      	itte	ge
 8017e9e:	461c      	movge	r4, r3
 8017ea0:	2500      	movge	r5, #0
 8017ea2:	2501      	movlt	r5, #1
 8017ea4:	f7ff fd3a 	bl	801791c <_Balloc>
 8017ea8:	b920      	cbnz	r0, 8017eb4 <__mdiff+0x5c>
 8017eaa:	4b2e      	ldr	r3, [pc, #184]	; (8017f64 <__mdiff+0x10c>)
 8017eac:	4602      	mov	r2, r0
 8017eae:	f44f 7110 	mov.w	r1, #576	; 0x240
 8017eb2:	e7e5      	b.n	8017e80 <__mdiff+0x28>
 8017eb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8017eb8:	6926      	ldr	r6, [r4, #16]
 8017eba:	60c5      	str	r5, [r0, #12]
 8017ebc:	f104 0914 	add.w	r9, r4, #20
 8017ec0:	f108 0514 	add.w	r5, r8, #20
 8017ec4:	f100 0e14 	add.w	lr, r0, #20
 8017ec8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8017ecc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8017ed0:	f108 0210 	add.w	r2, r8, #16
 8017ed4:	46f2      	mov	sl, lr
 8017ed6:	2100      	movs	r1, #0
 8017ed8:	f859 3b04 	ldr.w	r3, [r9], #4
 8017edc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8017ee0:	fa1f f883 	uxth.w	r8, r3
 8017ee4:	fa11 f18b 	uxtah	r1, r1, fp
 8017ee8:	0c1b      	lsrs	r3, r3, #16
 8017eea:	eba1 0808 	sub.w	r8, r1, r8
 8017eee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8017ef2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8017ef6:	fa1f f888 	uxth.w	r8, r8
 8017efa:	1419      	asrs	r1, r3, #16
 8017efc:	454e      	cmp	r6, r9
 8017efe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8017f02:	f84a 3b04 	str.w	r3, [sl], #4
 8017f06:	d8e7      	bhi.n	8017ed8 <__mdiff+0x80>
 8017f08:	1b33      	subs	r3, r6, r4
 8017f0a:	3b15      	subs	r3, #21
 8017f0c:	f023 0303 	bic.w	r3, r3, #3
 8017f10:	3304      	adds	r3, #4
 8017f12:	3415      	adds	r4, #21
 8017f14:	42a6      	cmp	r6, r4
 8017f16:	bf38      	it	cc
 8017f18:	2304      	movcc	r3, #4
 8017f1a:	441d      	add	r5, r3
 8017f1c:	4473      	add	r3, lr
 8017f1e:	469e      	mov	lr, r3
 8017f20:	462e      	mov	r6, r5
 8017f22:	4566      	cmp	r6, ip
 8017f24:	d30e      	bcc.n	8017f44 <__mdiff+0xec>
 8017f26:	f10c 0203 	add.w	r2, ip, #3
 8017f2a:	1b52      	subs	r2, r2, r5
 8017f2c:	f022 0203 	bic.w	r2, r2, #3
 8017f30:	3d03      	subs	r5, #3
 8017f32:	45ac      	cmp	ip, r5
 8017f34:	bf38      	it	cc
 8017f36:	2200      	movcc	r2, #0
 8017f38:	441a      	add	r2, r3
 8017f3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8017f3e:	b17b      	cbz	r3, 8017f60 <__mdiff+0x108>
 8017f40:	6107      	str	r7, [r0, #16]
 8017f42:	e7a3      	b.n	8017e8c <__mdiff+0x34>
 8017f44:	f856 8b04 	ldr.w	r8, [r6], #4
 8017f48:	fa11 f288 	uxtah	r2, r1, r8
 8017f4c:	1414      	asrs	r4, r2, #16
 8017f4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8017f52:	b292      	uxth	r2, r2
 8017f54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8017f58:	f84e 2b04 	str.w	r2, [lr], #4
 8017f5c:	1421      	asrs	r1, r4, #16
 8017f5e:	e7e0      	b.n	8017f22 <__mdiff+0xca>
 8017f60:	3f01      	subs	r7, #1
 8017f62:	e7ea      	b.n	8017f3a <__mdiff+0xe2>
 8017f64:	08019bb0 	.word	0x08019bb0
 8017f68:	08019bc1 	.word	0x08019bc1

08017f6c <__d2b>:
 8017f6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8017f70:	4689      	mov	r9, r1
 8017f72:	2101      	movs	r1, #1
 8017f74:	ec57 6b10 	vmov	r6, r7, d0
 8017f78:	4690      	mov	r8, r2
 8017f7a:	f7ff fccf 	bl	801791c <_Balloc>
 8017f7e:	4604      	mov	r4, r0
 8017f80:	b930      	cbnz	r0, 8017f90 <__d2b+0x24>
 8017f82:	4602      	mov	r2, r0
 8017f84:	4b25      	ldr	r3, [pc, #148]	; (801801c <__d2b+0xb0>)
 8017f86:	4826      	ldr	r0, [pc, #152]	; (8018020 <__d2b+0xb4>)
 8017f88:	f240 310a 	movw	r1, #778	; 0x30a
 8017f8c:	f000 f9bc 	bl	8018308 <__assert_func>
 8017f90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8017f94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8017f98:	bb35      	cbnz	r5, 8017fe8 <__d2b+0x7c>
 8017f9a:	2e00      	cmp	r6, #0
 8017f9c:	9301      	str	r3, [sp, #4]
 8017f9e:	d028      	beq.n	8017ff2 <__d2b+0x86>
 8017fa0:	4668      	mov	r0, sp
 8017fa2:	9600      	str	r6, [sp, #0]
 8017fa4:	f7ff fd82 	bl	8017aac <__lo0bits>
 8017fa8:	9900      	ldr	r1, [sp, #0]
 8017faa:	b300      	cbz	r0, 8017fee <__d2b+0x82>
 8017fac:	9a01      	ldr	r2, [sp, #4]
 8017fae:	f1c0 0320 	rsb	r3, r0, #32
 8017fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8017fb6:	430b      	orrs	r3, r1
 8017fb8:	40c2      	lsrs	r2, r0
 8017fba:	6163      	str	r3, [r4, #20]
 8017fbc:	9201      	str	r2, [sp, #4]
 8017fbe:	9b01      	ldr	r3, [sp, #4]
 8017fc0:	61a3      	str	r3, [r4, #24]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	bf14      	ite	ne
 8017fc6:	2202      	movne	r2, #2
 8017fc8:	2201      	moveq	r2, #1
 8017fca:	6122      	str	r2, [r4, #16]
 8017fcc:	b1d5      	cbz	r5, 8018004 <__d2b+0x98>
 8017fce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8017fd2:	4405      	add	r5, r0
 8017fd4:	f8c9 5000 	str.w	r5, [r9]
 8017fd8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8017fdc:	f8c8 0000 	str.w	r0, [r8]
 8017fe0:	4620      	mov	r0, r4
 8017fe2:	b003      	add	sp, #12
 8017fe4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017fe8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8017fec:	e7d5      	b.n	8017f9a <__d2b+0x2e>
 8017fee:	6161      	str	r1, [r4, #20]
 8017ff0:	e7e5      	b.n	8017fbe <__d2b+0x52>
 8017ff2:	a801      	add	r0, sp, #4
 8017ff4:	f7ff fd5a 	bl	8017aac <__lo0bits>
 8017ff8:	9b01      	ldr	r3, [sp, #4]
 8017ffa:	6163      	str	r3, [r4, #20]
 8017ffc:	2201      	movs	r2, #1
 8017ffe:	6122      	str	r2, [r4, #16]
 8018000:	3020      	adds	r0, #32
 8018002:	e7e3      	b.n	8017fcc <__d2b+0x60>
 8018004:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018008:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801800c:	f8c9 0000 	str.w	r0, [r9]
 8018010:	6918      	ldr	r0, [r3, #16]
 8018012:	f7ff fd2b 	bl	8017a6c <__hi0bits>
 8018016:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801801a:	e7df      	b.n	8017fdc <__d2b+0x70>
 801801c:	08019bb0 	.word	0x08019bb0
 8018020:	08019bc1 	.word	0x08019bc1

08018024 <_calloc_r>:
 8018024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8018026:	fba1 2402 	umull	r2, r4, r1, r2
 801802a:	b94c      	cbnz	r4, 8018040 <_calloc_r+0x1c>
 801802c:	4611      	mov	r1, r2
 801802e:	9201      	str	r2, [sp, #4]
 8018030:	f7fe f850 	bl	80160d4 <_malloc_r>
 8018034:	9a01      	ldr	r2, [sp, #4]
 8018036:	4605      	mov	r5, r0
 8018038:	b930      	cbnz	r0, 8018048 <_calloc_r+0x24>
 801803a:	4628      	mov	r0, r5
 801803c:	b003      	add	sp, #12
 801803e:	bd30      	pop	{r4, r5, pc}
 8018040:	220c      	movs	r2, #12
 8018042:	6002      	str	r2, [r0, #0]
 8018044:	2500      	movs	r5, #0
 8018046:	e7f8      	b.n	801803a <_calloc_r+0x16>
 8018048:	4621      	mov	r1, r4
 801804a:	f7fd ffcf 	bl	8015fec <memset>
 801804e:	e7f4      	b.n	801803a <_calloc_r+0x16>

08018050 <__ssputs_r>:
 8018050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018054:	688e      	ldr	r6, [r1, #8]
 8018056:	429e      	cmp	r6, r3
 8018058:	4682      	mov	sl, r0
 801805a:	460c      	mov	r4, r1
 801805c:	4690      	mov	r8, r2
 801805e:	461f      	mov	r7, r3
 8018060:	d838      	bhi.n	80180d4 <__ssputs_r+0x84>
 8018062:	898a      	ldrh	r2, [r1, #12]
 8018064:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8018068:	d032      	beq.n	80180d0 <__ssputs_r+0x80>
 801806a:	6825      	ldr	r5, [r4, #0]
 801806c:	6909      	ldr	r1, [r1, #16]
 801806e:	eba5 0901 	sub.w	r9, r5, r1
 8018072:	6965      	ldr	r5, [r4, #20]
 8018074:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801807c:	3301      	adds	r3, #1
 801807e:	444b      	add	r3, r9
 8018080:	106d      	asrs	r5, r5, #1
 8018082:	429d      	cmp	r5, r3
 8018084:	bf38      	it	cc
 8018086:	461d      	movcc	r5, r3
 8018088:	0553      	lsls	r3, r2, #21
 801808a:	d531      	bpl.n	80180f0 <__ssputs_r+0xa0>
 801808c:	4629      	mov	r1, r5
 801808e:	f7fe f821 	bl	80160d4 <_malloc_r>
 8018092:	4606      	mov	r6, r0
 8018094:	b950      	cbnz	r0, 80180ac <__ssputs_r+0x5c>
 8018096:	230c      	movs	r3, #12
 8018098:	f8ca 3000 	str.w	r3, [sl]
 801809c:	89a3      	ldrh	r3, [r4, #12]
 801809e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80180a2:	81a3      	strh	r3, [r4, #12]
 80180a4:	f04f 30ff 	mov.w	r0, #4294967295
 80180a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80180ac:	6921      	ldr	r1, [r4, #16]
 80180ae:	464a      	mov	r2, r9
 80180b0:	f7fd ff8e 	bl	8015fd0 <memcpy>
 80180b4:	89a3      	ldrh	r3, [r4, #12]
 80180b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80180ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80180be:	81a3      	strh	r3, [r4, #12]
 80180c0:	6126      	str	r6, [r4, #16]
 80180c2:	6165      	str	r5, [r4, #20]
 80180c4:	444e      	add	r6, r9
 80180c6:	eba5 0509 	sub.w	r5, r5, r9
 80180ca:	6026      	str	r6, [r4, #0]
 80180cc:	60a5      	str	r5, [r4, #8]
 80180ce:	463e      	mov	r6, r7
 80180d0:	42be      	cmp	r6, r7
 80180d2:	d900      	bls.n	80180d6 <__ssputs_r+0x86>
 80180d4:	463e      	mov	r6, r7
 80180d6:	6820      	ldr	r0, [r4, #0]
 80180d8:	4632      	mov	r2, r6
 80180da:	4641      	mov	r1, r8
 80180dc:	f000 f959 	bl	8018392 <memmove>
 80180e0:	68a3      	ldr	r3, [r4, #8]
 80180e2:	1b9b      	subs	r3, r3, r6
 80180e4:	60a3      	str	r3, [r4, #8]
 80180e6:	6823      	ldr	r3, [r4, #0]
 80180e8:	4433      	add	r3, r6
 80180ea:	6023      	str	r3, [r4, #0]
 80180ec:	2000      	movs	r0, #0
 80180ee:	e7db      	b.n	80180a8 <__ssputs_r+0x58>
 80180f0:	462a      	mov	r2, r5
 80180f2:	f000 f968 	bl	80183c6 <_realloc_r>
 80180f6:	4606      	mov	r6, r0
 80180f8:	2800      	cmp	r0, #0
 80180fa:	d1e1      	bne.n	80180c0 <__ssputs_r+0x70>
 80180fc:	6921      	ldr	r1, [r4, #16]
 80180fe:	4650      	mov	r0, sl
 8018100:	f7fd ff7c 	bl	8015ffc <_free_r>
 8018104:	e7c7      	b.n	8018096 <__ssputs_r+0x46>
	...

08018108 <_svfiprintf_r>:
 8018108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801810c:	4698      	mov	r8, r3
 801810e:	898b      	ldrh	r3, [r1, #12]
 8018110:	061b      	lsls	r3, r3, #24
 8018112:	b09d      	sub	sp, #116	; 0x74
 8018114:	4607      	mov	r7, r0
 8018116:	460d      	mov	r5, r1
 8018118:	4614      	mov	r4, r2
 801811a:	d50e      	bpl.n	801813a <_svfiprintf_r+0x32>
 801811c:	690b      	ldr	r3, [r1, #16]
 801811e:	b963      	cbnz	r3, 801813a <_svfiprintf_r+0x32>
 8018120:	2140      	movs	r1, #64	; 0x40
 8018122:	f7fd ffd7 	bl	80160d4 <_malloc_r>
 8018126:	6028      	str	r0, [r5, #0]
 8018128:	6128      	str	r0, [r5, #16]
 801812a:	b920      	cbnz	r0, 8018136 <_svfiprintf_r+0x2e>
 801812c:	230c      	movs	r3, #12
 801812e:	603b      	str	r3, [r7, #0]
 8018130:	f04f 30ff 	mov.w	r0, #4294967295
 8018134:	e0d1      	b.n	80182da <_svfiprintf_r+0x1d2>
 8018136:	2340      	movs	r3, #64	; 0x40
 8018138:	616b      	str	r3, [r5, #20]
 801813a:	2300      	movs	r3, #0
 801813c:	9309      	str	r3, [sp, #36]	; 0x24
 801813e:	2320      	movs	r3, #32
 8018140:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018144:	f8cd 800c 	str.w	r8, [sp, #12]
 8018148:	2330      	movs	r3, #48	; 0x30
 801814a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80182f4 <_svfiprintf_r+0x1ec>
 801814e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018152:	f04f 0901 	mov.w	r9, #1
 8018156:	4623      	mov	r3, r4
 8018158:	469a      	mov	sl, r3
 801815a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801815e:	b10a      	cbz	r2, 8018164 <_svfiprintf_r+0x5c>
 8018160:	2a25      	cmp	r2, #37	; 0x25
 8018162:	d1f9      	bne.n	8018158 <_svfiprintf_r+0x50>
 8018164:	ebba 0b04 	subs.w	fp, sl, r4
 8018168:	d00b      	beq.n	8018182 <_svfiprintf_r+0x7a>
 801816a:	465b      	mov	r3, fp
 801816c:	4622      	mov	r2, r4
 801816e:	4629      	mov	r1, r5
 8018170:	4638      	mov	r0, r7
 8018172:	f7ff ff6d 	bl	8018050 <__ssputs_r>
 8018176:	3001      	adds	r0, #1
 8018178:	f000 80aa 	beq.w	80182d0 <_svfiprintf_r+0x1c8>
 801817c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801817e:	445a      	add	r2, fp
 8018180:	9209      	str	r2, [sp, #36]	; 0x24
 8018182:	f89a 3000 	ldrb.w	r3, [sl]
 8018186:	2b00      	cmp	r3, #0
 8018188:	f000 80a2 	beq.w	80182d0 <_svfiprintf_r+0x1c8>
 801818c:	2300      	movs	r3, #0
 801818e:	f04f 32ff 	mov.w	r2, #4294967295
 8018192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8018196:	f10a 0a01 	add.w	sl, sl, #1
 801819a:	9304      	str	r3, [sp, #16]
 801819c:	9307      	str	r3, [sp, #28]
 801819e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80181a2:	931a      	str	r3, [sp, #104]	; 0x68
 80181a4:	4654      	mov	r4, sl
 80181a6:	2205      	movs	r2, #5
 80181a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181ac:	4851      	ldr	r0, [pc, #324]	; (80182f4 <_svfiprintf_r+0x1ec>)
 80181ae:	f7e8 f837 	bl	8000220 <memchr>
 80181b2:	9a04      	ldr	r2, [sp, #16]
 80181b4:	b9d8      	cbnz	r0, 80181ee <_svfiprintf_r+0xe6>
 80181b6:	06d0      	lsls	r0, r2, #27
 80181b8:	bf44      	itt	mi
 80181ba:	2320      	movmi	r3, #32
 80181bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181c0:	0711      	lsls	r1, r2, #28
 80181c2:	bf44      	itt	mi
 80181c4:	232b      	movmi	r3, #43	; 0x2b
 80181c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80181ca:	f89a 3000 	ldrb.w	r3, [sl]
 80181ce:	2b2a      	cmp	r3, #42	; 0x2a
 80181d0:	d015      	beq.n	80181fe <_svfiprintf_r+0xf6>
 80181d2:	9a07      	ldr	r2, [sp, #28]
 80181d4:	4654      	mov	r4, sl
 80181d6:	2000      	movs	r0, #0
 80181d8:	f04f 0c0a 	mov.w	ip, #10
 80181dc:	4621      	mov	r1, r4
 80181de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80181e2:	3b30      	subs	r3, #48	; 0x30
 80181e4:	2b09      	cmp	r3, #9
 80181e6:	d94e      	bls.n	8018286 <_svfiprintf_r+0x17e>
 80181e8:	b1b0      	cbz	r0, 8018218 <_svfiprintf_r+0x110>
 80181ea:	9207      	str	r2, [sp, #28]
 80181ec:	e014      	b.n	8018218 <_svfiprintf_r+0x110>
 80181ee:	eba0 0308 	sub.w	r3, r0, r8
 80181f2:	fa09 f303 	lsl.w	r3, r9, r3
 80181f6:	4313      	orrs	r3, r2
 80181f8:	9304      	str	r3, [sp, #16]
 80181fa:	46a2      	mov	sl, r4
 80181fc:	e7d2      	b.n	80181a4 <_svfiprintf_r+0x9c>
 80181fe:	9b03      	ldr	r3, [sp, #12]
 8018200:	1d19      	adds	r1, r3, #4
 8018202:	681b      	ldr	r3, [r3, #0]
 8018204:	9103      	str	r1, [sp, #12]
 8018206:	2b00      	cmp	r3, #0
 8018208:	bfbb      	ittet	lt
 801820a:	425b      	neglt	r3, r3
 801820c:	f042 0202 	orrlt.w	r2, r2, #2
 8018210:	9307      	strge	r3, [sp, #28]
 8018212:	9307      	strlt	r3, [sp, #28]
 8018214:	bfb8      	it	lt
 8018216:	9204      	strlt	r2, [sp, #16]
 8018218:	7823      	ldrb	r3, [r4, #0]
 801821a:	2b2e      	cmp	r3, #46	; 0x2e
 801821c:	d10c      	bne.n	8018238 <_svfiprintf_r+0x130>
 801821e:	7863      	ldrb	r3, [r4, #1]
 8018220:	2b2a      	cmp	r3, #42	; 0x2a
 8018222:	d135      	bne.n	8018290 <_svfiprintf_r+0x188>
 8018224:	9b03      	ldr	r3, [sp, #12]
 8018226:	1d1a      	adds	r2, r3, #4
 8018228:	681b      	ldr	r3, [r3, #0]
 801822a:	9203      	str	r2, [sp, #12]
 801822c:	2b00      	cmp	r3, #0
 801822e:	bfb8      	it	lt
 8018230:	f04f 33ff 	movlt.w	r3, #4294967295
 8018234:	3402      	adds	r4, #2
 8018236:	9305      	str	r3, [sp, #20]
 8018238:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018304 <_svfiprintf_r+0x1fc>
 801823c:	7821      	ldrb	r1, [r4, #0]
 801823e:	2203      	movs	r2, #3
 8018240:	4650      	mov	r0, sl
 8018242:	f7e7 ffed 	bl	8000220 <memchr>
 8018246:	b140      	cbz	r0, 801825a <_svfiprintf_r+0x152>
 8018248:	2340      	movs	r3, #64	; 0x40
 801824a:	eba0 000a 	sub.w	r0, r0, sl
 801824e:	fa03 f000 	lsl.w	r0, r3, r0
 8018252:	9b04      	ldr	r3, [sp, #16]
 8018254:	4303      	orrs	r3, r0
 8018256:	3401      	adds	r4, #1
 8018258:	9304      	str	r3, [sp, #16]
 801825a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801825e:	4826      	ldr	r0, [pc, #152]	; (80182f8 <_svfiprintf_r+0x1f0>)
 8018260:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018264:	2206      	movs	r2, #6
 8018266:	f7e7 ffdb 	bl	8000220 <memchr>
 801826a:	2800      	cmp	r0, #0
 801826c:	d038      	beq.n	80182e0 <_svfiprintf_r+0x1d8>
 801826e:	4b23      	ldr	r3, [pc, #140]	; (80182fc <_svfiprintf_r+0x1f4>)
 8018270:	bb1b      	cbnz	r3, 80182ba <_svfiprintf_r+0x1b2>
 8018272:	9b03      	ldr	r3, [sp, #12]
 8018274:	3307      	adds	r3, #7
 8018276:	f023 0307 	bic.w	r3, r3, #7
 801827a:	3308      	adds	r3, #8
 801827c:	9303      	str	r3, [sp, #12]
 801827e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018280:	4433      	add	r3, r6
 8018282:	9309      	str	r3, [sp, #36]	; 0x24
 8018284:	e767      	b.n	8018156 <_svfiprintf_r+0x4e>
 8018286:	fb0c 3202 	mla	r2, ip, r2, r3
 801828a:	460c      	mov	r4, r1
 801828c:	2001      	movs	r0, #1
 801828e:	e7a5      	b.n	80181dc <_svfiprintf_r+0xd4>
 8018290:	2300      	movs	r3, #0
 8018292:	3401      	adds	r4, #1
 8018294:	9305      	str	r3, [sp, #20]
 8018296:	4619      	mov	r1, r3
 8018298:	f04f 0c0a 	mov.w	ip, #10
 801829c:	4620      	mov	r0, r4
 801829e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80182a2:	3a30      	subs	r2, #48	; 0x30
 80182a4:	2a09      	cmp	r2, #9
 80182a6:	d903      	bls.n	80182b0 <_svfiprintf_r+0x1a8>
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d0c5      	beq.n	8018238 <_svfiprintf_r+0x130>
 80182ac:	9105      	str	r1, [sp, #20]
 80182ae:	e7c3      	b.n	8018238 <_svfiprintf_r+0x130>
 80182b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80182b4:	4604      	mov	r4, r0
 80182b6:	2301      	movs	r3, #1
 80182b8:	e7f0      	b.n	801829c <_svfiprintf_r+0x194>
 80182ba:	ab03      	add	r3, sp, #12
 80182bc:	9300      	str	r3, [sp, #0]
 80182be:	462a      	mov	r2, r5
 80182c0:	4b0f      	ldr	r3, [pc, #60]	; (8018300 <_svfiprintf_r+0x1f8>)
 80182c2:	a904      	add	r1, sp, #16
 80182c4:	4638      	mov	r0, r7
 80182c6:	f7fe f819 	bl	80162fc <_printf_float>
 80182ca:	1c42      	adds	r2, r0, #1
 80182cc:	4606      	mov	r6, r0
 80182ce:	d1d6      	bne.n	801827e <_svfiprintf_r+0x176>
 80182d0:	89ab      	ldrh	r3, [r5, #12]
 80182d2:	065b      	lsls	r3, r3, #25
 80182d4:	f53f af2c 	bmi.w	8018130 <_svfiprintf_r+0x28>
 80182d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80182da:	b01d      	add	sp, #116	; 0x74
 80182dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80182e0:	ab03      	add	r3, sp, #12
 80182e2:	9300      	str	r3, [sp, #0]
 80182e4:	462a      	mov	r2, r5
 80182e6:	4b06      	ldr	r3, [pc, #24]	; (8018300 <_svfiprintf_r+0x1f8>)
 80182e8:	a904      	add	r1, sp, #16
 80182ea:	4638      	mov	r0, r7
 80182ec:	f7fe faaa 	bl	8016844 <_printf_i>
 80182f0:	e7eb      	b.n	80182ca <_svfiprintf_r+0x1c2>
 80182f2:	bf00      	nop
 80182f4:	08019d1c 	.word	0x08019d1c
 80182f8:	08019d26 	.word	0x08019d26
 80182fc:	080162fd 	.word	0x080162fd
 8018300:	08018051 	.word	0x08018051
 8018304:	08019d22 	.word	0x08019d22

08018308 <__assert_func>:
 8018308:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801830a:	4614      	mov	r4, r2
 801830c:	461a      	mov	r2, r3
 801830e:	4b09      	ldr	r3, [pc, #36]	; (8018334 <__assert_func+0x2c>)
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	4605      	mov	r5, r0
 8018314:	68d8      	ldr	r0, [r3, #12]
 8018316:	b14c      	cbz	r4, 801832c <__assert_func+0x24>
 8018318:	4b07      	ldr	r3, [pc, #28]	; (8018338 <__assert_func+0x30>)
 801831a:	9100      	str	r1, [sp, #0]
 801831c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018320:	4906      	ldr	r1, [pc, #24]	; (801833c <__assert_func+0x34>)
 8018322:	462b      	mov	r3, r5
 8018324:	f000 f80e 	bl	8018344 <fiprintf>
 8018328:	f000 faa4 	bl	8018874 <abort>
 801832c:	4b04      	ldr	r3, [pc, #16]	; (8018340 <__assert_func+0x38>)
 801832e:	461c      	mov	r4, r3
 8018330:	e7f3      	b.n	801831a <__assert_func+0x12>
 8018332:	bf00      	nop
 8018334:	2000012c 	.word	0x2000012c
 8018338:	08019d2d 	.word	0x08019d2d
 801833c:	08019d3a 	.word	0x08019d3a
 8018340:	08019d68 	.word	0x08019d68

08018344 <fiprintf>:
 8018344:	b40e      	push	{r1, r2, r3}
 8018346:	b503      	push	{r0, r1, lr}
 8018348:	4601      	mov	r1, r0
 801834a:	ab03      	add	r3, sp, #12
 801834c:	4805      	ldr	r0, [pc, #20]	; (8018364 <fiprintf+0x20>)
 801834e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018352:	6800      	ldr	r0, [r0, #0]
 8018354:	9301      	str	r3, [sp, #4]
 8018356:	f000 f88f 	bl	8018478 <_vfiprintf_r>
 801835a:	b002      	add	sp, #8
 801835c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018360:	b003      	add	sp, #12
 8018362:	4770      	bx	lr
 8018364:	2000012c 	.word	0x2000012c

08018368 <__retarget_lock_init_recursive>:
 8018368:	4770      	bx	lr

0801836a <__retarget_lock_acquire_recursive>:
 801836a:	4770      	bx	lr

0801836c <__retarget_lock_release_recursive>:
 801836c:	4770      	bx	lr

0801836e <__ascii_mbtowc>:
 801836e:	b082      	sub	sp, #8
 8018370:	b901      	cbnz	r1, 8018374 <__ascii_mbtowc+0x6>
 8018372:	a901      	add	r1, sp, #4
 8018374:	b142      	cbz	r2, 8018388 <__ascii_mbtowc+0x1a>
 8018376:	b14b      	cbz	r3, 801838c <__ascii_mbtowc+0x1e>
 8018378:	7813      	ldrb	r3, [r2, #0]
 801837a:	600b      	str	r3, [r1, #0]
 801837c:	7812      	ldrb	r2, [r2, #0]
 801837e:	1e10      	subs	r0, r2, #0
 8018380:	bf18      	it	ne
 8018382:	2001      	movne	r0, #1
 8018384:	b002      	add	sp, #8
 8018386:	4770      	bx	lr
 8018388:	4610      	mov	r0, r2
 801838a:	e7fb      	b.n	8018384 <__ascii_mbtowc+0x16>
 801838c:	f06f 0001 	mvn.w	r0, #1
 8018390:	e7f8      	b.n	8018384 <__ascii_mbtowc+0x16>

08018392 <memmove>:
 8018392:	4288      	cmp	r0, r1
 8018394:	b510      	push	{r4, lr}
 8018396:	eb01 0402 	add.w	r4, r1, r2
 801839a:	d902      	bls.n	80183a2 <memmove+0x10>
 801839c:	4284      	cmp	r4, r0
 801839e:	4623      	mov	r3, r4
 80183a0:	d807      	bhi.n	80183b2 <memmove+0x20>
 80183a2:	1e43      	subs	r3, r0, #1
 80183a4:	42a1      	cmp	r1, r4
 80183a6:	d008      	beq.n	80183ba <memmove+0x28>
 80183a8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80183ac:	f803 2f01 	strb.w	r2, [r3, #1]!
 80183b0:	e7f8      	b.n	80183a4 <memmove+0x12>
 80183b2:	4402      	add	r2, r0
 80183b4:	4601      	mov	r1, r0
 80183b6:	428a      	cmp	r2, r1
 80183b8:	d100      	bne.n	80183bc <memmove+0x2a>
 80183ba:	bd10      	pop	{r4, pc}
 80183bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80183c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80183c4:	e7f7      	b.n	80183b6 <memmove+0x24>

080183c6 <_realloc_r>:
 80183c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80183ca:	4680      	mov	r8, r0
 80183cc:	4614      	mov	r4, r2
 80183ce:	460e      	mov	r6, r1
 80183d0:	b921      	cbnz	r1, 80183dc <_realloc_r+0x16>
 80183d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80183d6:	4611      	mov	r1, r2
 80183d8:	f7fd be7c 	b.w	80160d4 <_malloc_r>
 80183dc:	b92a      	cbnz	r2, 80183ea <_realloc_r+0x24>
 80183de:	f7fd fe0d 	bl	8015ffc <_free_r>
 80183e2:	4625      	mov	r5, r4
 80183e4:	4628      	mov	r0, r5
 80183e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80183ea:	f000 fc67 	bl	8018cbc <_malloc_usable_size_r>
 80183ee:	4284      	cmp	r4, r0
 80183f0:	4607      	mov	r7, r0
 80183f2:	d802      	bhi.n	80183fa <_realloc_r+0x34>
 80183f4:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80183f8:	d812      	bhi.n	8018420 <_realloc_r+0x5a>
 80183fa:	4621      	mov	r1, r4
 80183fc:	4640      	mov	r0, r8
 80183fe:	f7fd fe69 	bl	80160d4 <_malloc_r>
 8018402:	4605      	mov	r5, r0
 8018404:	2800      	cmp	r0, #0
 8018406:	d0ed      	beq.n	80183e4 <_realloc_r+0x1e>
 8018408:	42bc      	cmp	r4, r7
 801840a:	4622      	mov	r2, r4
 801840c:	4631      	mov	r1, r6
 801840e:	bf28      	it	cs
 8018410:	463a      	movcs	r2, r7
 8018412:	f7fd fddd 	bl	8015fd0 <memcpy>
 8018416:	4631      	mov	r1, r6
 8018418:	4640      	mov	r0, r8
 801841a:	f7fd fdef 	bl	8015ffc <_free_r>
 801841e:	e7e1      	b.n	80183e4 <_realloc_r+0x1e>
 8018420:	4635      	mov	r5, r6
 8018422:	e7df      	b.n	80183e4 <_realloc_r+0x1e>

08018424 <__sfputc_r>:
 8018424:	6893      	ldr	r3, [r2, #8]
 8018426:	3b01      	subs	r3, #1
 8018428:	2b00      	cmp	r3, #0
 801842a:	b410      	push	{r4}
 801842c:	6093      	str	r3, [r2, #8]
 801842e:	da08      	bge.n	8018442 <__sfputc_r+0x1e>
 8018430:	6994      	ldr	r4, [r2, #24]
 8018432:	42a3      	cmp	r3, r4
 8018434:	db01      	blt.n	801843a <__sfputc_r+0x16>
 8018436:	290a      	cmp	r1, #10
 8018438:	d103      	bne.n	8018442 <__sfputc_r+0x1e>
 801843a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801843e:	f000 b94b 	b.w	80186d8 <__swbuf_r>
 8018442:	6813      	ldr	r3, [r2, #0]
 8018444:	1c58      	adds	r0, r3, #1
 8018446:	6010      	str	r0, [r2, #0]
 8018448:	7019      	strb	r1, [r3, #0]
 801844a:	4608      	mov	r0, r1
 801844c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8018450:	4770      	bx	lr

08018452 <__sfputs_r>:
 8018452:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018454:	4606      	mov	r6, r0
 8018456:	460f      	mov	r7, r1
 8018458:	4614      	mov	r4, r2
 801845a:	18d5      	adds	r5, r2, r3
 801845c:	42ac      	cmp	r4, r5
 801845e:	d101      	bne.n	8018464 <__sfputs_r+0x12>
 8018460:	2000      	movs	r0, #0
 8018462:	e007      	b.n	8018474 <__sfputs_r+0x22>
 8018464:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018468:	463a      	mov	r2, r7
 801846a:	4630      	mov	r0, r6
 801846c:	f7ff ffda 	bl	8018424 <__sfputc_r>
 8018470:	1c43      	adds	r3, r0, #1
 8018472:	d1f3      	bne.n	801845c <__sfputs_r+0xa>
 8018474:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08018478 <_vfiprintf_r>:
 8018478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801847c:	460d      	mov	r5, r1
 801847e:	b09d      	sub	sp, #116	; 0x74
 8018480:	4614      	mov	r4, r2
 8018482:	4698      	mov	r8, r3
 8018484:	4606      	mov	r6, r0
 8018486:	b118      	cbz	r0, 8018490 <_vfiprintf_r+0x18>
 8018488:	6983      	ldr	r3, [r0, #24]
 801848a:	b90b      	cbnz	r3, 8018490 <_vfiprintf_r+0x18>
 801848c:	f000 fb14 	bl	8018ab8 <__sinit>
 8018490:	4b89      	ldr	r3, [pc, #548]	; (80186b8 <_vfiprintf_r+0x240>)
 8018492:	429d      	cmp	r5, r3
 8018494:	d11b      	bne.n	80184ce <_vfiprintf_r+0x56>
 8018496:	6875      	ldr	r5, [r6, #4]
 8018498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801849a:	07d9      	lsls	r1, r3, #31
 801849c:	d405      	bmi.n	80184aa <_vfiprintf_r+0x32>
 801849e:	89ab      	ldrh	r3, [r5, #12]
 80184a0:	059a      	lsls	r2, r3, #22
 80184a2:	d402      	bmi.n	80184aa <_vfiprintf_r+0x32>
 80184a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80184a6:	f7ff ff60 	bl	801836a <__retarget_lock_acquire_recursive>
 80184aa:	89ab      	ldrh	r3, [r5, #12]
 80184ac:	071b      	lsls	r3, r3, #28
 80184ae:	d501      	bpl.n	80184b4 <_vfiprintf_r+0x3c>
 80184b0:	692b      	ldr	r3, [r5, #16]
 80184b2:	b9eb      	cbnz	r3, 80184f0 <_vfiprintf_r+0x78>
 80184b4:	4629      	mov	r1, r5
 80184b6:	4630      	mov	r0, r6
 80184b8:	f000 f96e 	bl	8018798 <__swsetup_r>
 80184bc:	b1c0      	cbz	r0, 80184f0 <_vfiprintf_r+0x78>
 80184be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80184c0:	07dc      	lsls	r4, r3, #31
 80184c2:	d50e      	bpl.n	80184e2 <_vfiprintf_r+0x6a>
 80184c4:	f04f 30ff 	mov.w	r0, #4294967295
 80184c8:	b01d      	add	sp, #116	; 0x74
 80184ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80184ce:	4b7b      	ldr	r3, [pc, #492]	; (80186bc <_vfiprintf_r+0x244>)
 80184d0:	429d      	cmp	r5, r3
 80184d2:	d101      	bne.n	80184d8 <_vfiprintf_r+0x60>
 80184d4:	68b5      	ldr	r5, [r6, #8]
 80184d6:	e7df      	b.n	8018498 <_vfiprintf_r+0x20>
 80184d8:	4b79      	ldr	r3, [pc, #484]	; (80186c0 <_vfiprintf_r+0x248>)
 80184da:	429d      	cmp	r5, r3
 80184dc:	bf08      	it	eq
 80184de:	68f5      	ldreq	r5, [r6, #12]
 80184e0:	e7da      	b.n	8018498 <_vfiprintf_r+0x20>
 80184e2:	89ab      	ldrh	r3, [r5, #12]
 80184e4:	0598      	lsls	r0, r3, #22
 80184e6:	d4ed      	bmi.n	80184c4 <_vfiprintf_r+0x4c>
 80184e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80184ea:	f7ff ff3f 	bl	801836c <__retarget_lock_release_recursive>
 80184ee:	e7e9      	b.n	80184c4 <_vfiprintf_r+0x4c>
 80184f0:	2300      	movs	r3, #0
 80184f2:	9309      	str	r3, [sp, #36]	; 0x24
 80184f4:	2320      	movs	r3, #32
 80184f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80184fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80184fe:	2330      	movs	r3, #48	; 0x30
 8018500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80186c4 <_vfiprintf_r+0x24c>
 8018504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018508:	f04f 0901 	mov.w	r9, #1
 801850c:	4623      	mov	r3, r4
 801850e:	469a      	mov	sl, r3
 8018510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8018514:	b10a      	cbz	r2, 801851a <_vfiprintf_r+0xa2>
 8018516:	2a25      	cmp	r2, #37	; 0x25
 8018518:	d1f9      	bne.n	801850e <_vfiprintf_r+0x96>
 801851a:	ebba 0b04 	subs.w	fp, sl, r4
 801851e:	d00b      	beq.n	8018538 <_vfiprintf_r+0xc0>
 8018520:	465b      	mov	r3, fp
 8018522:	4622      	mov	r2, r4
 8018524:	4629      	mov	r1, r5
 8018526:	4630      	mov	r0, r6
 8018528:	f7ff ff93 	bl	8018452 <__sfputs_r>
 801852c:	3001      	adds	r0, #1
 801852e:	f000 80aa 	beq.w	8018686 <_vfiprintf_r+0x20e>
 8018532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018534:	445a      	add	r2, fp
 8018536:	9209      	str	r2, [sp, #36]	; 0x24
 8018538:	f89a 3000 	ldrb.w	r3, [sl]
 801853c:	2b00      	cmp	r3, #0
 801853e:	f000 80a2 	beq.w	8018686 <_vfiprintf_r+0x20e>
 8018542:	2300      	movs	r3, #0
 8018544:	f04f 32ff 	mov.w	r2, #4294967295
 8018548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801854c:	f10a 0a01 	add.w	sl, sl, #1
 8018550:	9304      	str	r3, [sp, #16]
 8018552:	9307      	str	r3, [sp, #28]
 8018554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018558:	931a      	str	r3, [sp, #104]	; 0x68
 801855a:	4654      	mov	r4, sl
 801855c:	2205      	movs	r2, #5
 801855e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018562:	4858      	ldr	r0, [pc, #352]	; (80186c4 <_vfiprintf_r+0x24c>)
 8018564:	f7e7 fe5c 	bl	8000220 <memchr>
 8018568:	9a04      	ldr	r2, [sp, #16]
 801856a:	b9d8      	cbnz	r0, 80185a4 <_vfiprintf_r+0x12c>
 801856c:	06d1      	lsls	r1, r2, #27
 801856e:	bf44      	itt	mi
 8018570:	2320      	movmi	r3, #32
 8018572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018576:	0713      	lsls	r3, r2, #28
 8018578:	bf44      	itt	mi
 801857a:	232b      	movmi	r3, #43	; 0x2b
 801857c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018580:	f89a 3000 	ldrb.w	r3, [sl]
 8018584:	2b2a      	cmp	r3, #42	; 0x2a
 8018586:	d015      	beq.n	80185b4 <_vfiprintf_r+0x13c>
 8018588:	9a07      	ldr	r2, [sp, #28]
 801858a:	4654      	mov	r4, sl
 801858c:	2000      	movs	r0, #0
 801858e:	f04f 0c0a 	mov.w	ip, #10
 8018592:	4621      	mov	r1, r4
 8018594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018598:	3b30      	subs	r3, #48	; 0x30
 801859a:	2b09      	cmp	r3, #9
 801859c:	d94e      	bls.n	801863c <_vfiprintf_r+0x1c4>
 801859e:	b1b0      	cbz	r0, 80185ce <_vfiprintf_r+0x156>
 80185a0:	9207      	str	r2, [sp, #28]
 80185a2:	e014      	b.n	80185ce <_vfiprintf_r+0x156>
 80185a4:	eba0 0308 	sub.w	r3, r0, r8
 80185a8:	fa09 f303 	lsl.w	r3, r9, r3
 80185ac:	4313      	orrs	r3, r2
 80185ae:	9304      	str	r3, [sp, #16]
 80185b0:	46a2      	mov	sl, r4
 80185b2:	e7d2      	b.n	801855a <_vfiprintf_r+0xe2>
 80185b4:	9b03      	ldr	r3, [sp, #12]
 80185b6:	1d19      	adds	r1, r3, #4
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	9103      	str	r1, [sp, #12]
 80185bc:	2b00      	cmp	r3, #0
 80185be:	bfbb      	ittet	lt
 80185c0:	425b      	neglt	r3, r3
 80185c2:	f042 0202 	orrlt.w	r2, r2, #2
 80185c6:	9307      	strge	r3, [sp, #28]
 80185c8:	9307      	strlt	r3, [sp, #28]
 80185ca:	bfb8      	it	lt
 80185cc:	9204      	strlt	r2, [sp, #16]
 80185ce:	7823      	ldrb	r3, [r4, #0]
 80185d0:	2b2e      	cmp	r3, #46	; 0x2e
 80185d2:	d10c      	bne.n	80185ee <_vfiprintf_r+0x176>
 80185d4:	7863      	ldrb	r3, [r4, #1]
 80185d6:	2b2a      	cmp	r3, #42	; 0x2a
 80185d8:	d135      	bne.n	8018646 <_vfiprintf_r+0x1ce>
 80185da:	9b03      	ldr	r3, [sp, #12]
 80185dc:	1d1a      	adds	r2, r3, #4
 80185de:	681b      	ldr	r3, [r3, #0]
 80185e0:	9203      	str	r2, [sp, #12]
 80185e2:	2b00      	cmp	r3, #0
 80185e4:	bfb8      	it	lt
 80185e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80185ea:	3402      	adds	r4, #2
 80185ec:	9305      	str	r3, [sp, #20]
 80185ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80186d4 <_vfiprintf_r+0x25c>
 80185f2:	7821      	ldrb	r1, [r4, #0]
 80185f4:	2203      	movs	r2, #3
 80185f6:	4650      	mov	r0, sl
 80185f8:	f7e7 fe12 	bl	8000220 <memchr>
 80185fc:	b140      	cbz	r0, 8018610 <_vfiprintf_r+0x198>
 80185fe:	2340      	movs	r3, #64	; 0x40
 8018600:	eba0 000a 	sub.w	r0, r0, sl
 8018604:	fa03 f000 	lsl.w	r0, r3, r0
 8018608:	9b04      	ldr	r3, [sp, #16]
 801860a:	4303      	orrs	r3, r0
 801860c:	3401      	adds	r4, #1
 801860e:	9304      	str	r3, [sp, #16]
 8018610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018614:	482c      	ldr	r0, [pc, #176]	; (80186c8 <_vfiprintf_r+0x250>)
 8018616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801861a:	2206      	movs	r2, #6
 801861c:	f7e7 fe00 	bl	8000220 <memchr>
 8018620:	2800      	cmp	r0, #0
 8018622:	d03f      	beq.n	80186a4 <_vfiprintf_r+0x22c>
 8018624:	4b29      	ldr	r3, [pc, #164]	; (80186cc <_vfiprintf_r+0x254>)
 8018626:	bb1b      	cbnz	r3, 8018670 <_vfiprintf_r+0x1f8>
 8018628:	9b03      	ldr	r3, [sp, #12]
 801862a:	3307      	adds	r3, #7
 801862c:	f023 0307 	bic.w	r3, r3, #7
 8018630:	3308      	adds	r3, #8
 8018632:	9303      	str	r3, [sp, #12]
 8018634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018636:	443b      	add	r3, r7
 8018638:	9309      	str	r3, [sp, #36]	; 0x24
 801863a:	e767      	b.n	801850c <_vfiprintf_r+0x94>
 801863c:	fb0c 3202 	mla	r2, ip, r2, r3
 8018640:	460c      	mov	r4, r1
 8018642:	2001      	movs	r0, #1
 8018644:	e7a5      	b.n	8018592 <_vfiprintf_r+0x11a>
 8018646:	2300      	movs	r3, #0
 8018648:	3401      	adds	r4, #1
 801864a:	9305      	str	r3, [sp, #20]
 801864c:	4619      	mov	r1, r3
 801864e:	f04f 0c0a 	mov.w	ip, #10
 8018652:	4620      	mov	r0, r4
 8018654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018658:	3a30      	subs	r2, #48	; 0x30
 801865a:	2a09      	cmp	r2, #9
 801865c:	d903      	bls.n	8018666 <_vfiprintf_r+0x1ee>
 801865e:	2b00      	cmp	r3, #0
 8018660:	d0c5      	beq.n	80185ee <_vfiprintf_r+0x176>
 8018662:	9105      	str	r1, [sp, #20]
 8018664:	e7c3      	b.n	80185ee <_vfiprintf_r+0x176>
 8018666:	fb0c 2101 	mla	r1, ip, r1, r2
 801866a:	4604      	mov	r4, r0
 801866c:	2301      	movs	r3, #1
 801866e:	e7f0      	b.n	8018652 <_vfiprintf_r+0x1da>
 8018670:	ab03      	add	r3, sp, #12
 8018672:	9300      	str	r3, [sp, #0]
 8018674:	462a      	mov	r2, r5
 8018676:	4b16      	ldr	r3, [pc, #88]	; (80186d0 <_vfiprintf_r+0x258>)
 8018678:	a904      	add	r1, sp, #16
 801867a:	4630      	mov	r0, r6
 801867c:	f7fd fe3e 	bl	80162fc <_printf_float>
 8018680:	4607      	mov	r7, r0
 8018682:	1c78      	adds	r0, r7, #1
 8018684:	d1d6      	bne.n	8018634 <_vfiprintf_r+0x1bc>
 8018686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018688:	07d9      	lsls	r1, r3, #31
 801868a:	d405      	bmi.n	8018698 <_vfiprintf_r+0x220>
 801868c:	89ab      	ldrh	r3, [r5, #12]
 801868e:	059a      	lsls	r2, r3, #22
 8018690:	d402      	bmi.n	8018698 <_vfiprintf_r+0x220>
 8018692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018694:	f7ff fe6a 	bl	801836c <__retarget_lock_release_recursive>
 8018698:	89ab      	ldrh	r3, [r5, #12]
 801869a:	065b      	lsls	r3, r3, #25
 801869c:	f53f af12 	bmi.w	80184c4 <_vfiprintf_r+0x4c>
 80186a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80186a2:	e711      	b.n	80184c8 <_vfiprintf_r+0x50>
 80186a4:	ab03      	add	r3, sp, #12
 80186a6:	9300      	str	r3, [sp, #0]
 80186a8:	462a      	mov	r2, r5
 80186aa:	4b09      	ldr	r3, [pc, #36]	; (80186d0 <_vfiprintf_r+0x258>)
 80186ac:	a904      	add	r1, sp, #16
 80186ae:	4630      	mov	r0, r6
 80186b0:	f7fe f8c8 	bl	8016844 <_printf_i>
 80186b4:	e7e4      	b.n	8018680 <_vfiprintf_r+0x208>
 80186b6:	bf00      	nop
 80186b8:	08019d94 	.word	0x08019d94
 80186bc:	08019db4 	.word	0x08019db4
 80186c0:	08019d74 	.word	0x08019d74
 80186c4:	08019d1c 	.word	0x08019d1c
 80186c8:	08019d26 	.word	0x08019d26
 80186cc:	080162fd 	.word	0x080162fd
 80186d0:	08018453 	.word	0x08018453
 80186d4:	08019d22 	.word	0x08019d22

080186d8 <__swbuf_r>:
 80186d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80186da:	460e      	mov	r6, r1
 80186dc:	4614      	mov	r4, r2
 80186de:	4605      	mov	r5, r0
 80186e0:	b118      	cbz	r0, 80186ea <__swbuf_r+0x12>
 80186e2:	6983      	ldr	r3, [r0, #24]
 80186e4:	b90b      	cbnz	r3, 80186ea <__swbuf_r+0x12>
 80186e6:	f000 f9e7 	bl	8018ab8 <__sinit>
 80186ea:	4b21      	ldr	r3, [pc, #132]	; (8018770 <__swbuf_r+0x98>)
 80186ec:	429c      	cmp	r4, r3
 80186ee:	d12b      	bne.n	8018748 <__swbuf_r+0x70>
 80186f0:	686c      	ldr	r4, [r5, #4]
 80186f2:	69a3      	ldr	r3, [r4, #24]
 80186f4:	60a3      	str	r3, [r4, #8]
 80186f6:	89a3      	ldrh	r3, [r4, #12]
 80186f8:	071a      	lsls	r2, r3, #28
 80186fa:	d52f      	bpl.n	801875c <__swbuf_r+0x84>
 80186fc:	6923      	ldr	r3, [r4, #16]
 80186fe:	b36b      	cbz	r3, 801875c <__swbuf_r+0x84>
 8018700:	6923      	ldr	r3, [r4, #16]
 8018702:	6820      	ldr	r0, [r4, #0]
 8018704:	1ac0      	subs	r0, r0, r3
 8018706:	6963      	ldr	r3, [r4, #20]
 8018708:	b2f6      	uxtb	r6, r6
 801870a:	4283      	cmp	r3, r0
 801870c:	4637      	mov	r7, r6
 801870e:	dc04      	bgt.n	801871a <__swbuf_r+0x42>
 8018710:	4621      	mov	r1, r4
 8018712:	4628      	mov	r0, r5
 8018714:	f000 f93c 	bl	8018990 <_fflush_r>
 8018718:	bb30      	cbnz	r0, 8018768 <__swbuf_r+0x90>
 801871a:	68a3      	ldr	r3, [r4, #8]
 801871c:	3b01      	subs	r3, #1
 801871e:	60a3      	str	r3, [r4, #8]
 8018720:	6823      	ldr	r3, [r4, #0]
 8018722:	1c5a      	adds	r2, r3, #1
 8018724:	6022      	str	r2, [r4, #0]
 8018726:	701e      	strb	r6, [r3, #0]
 8018728:	6963      	ldr	r3, [r4, #20]
 801872a:	3001      	adds	r0, #1
 801872c:	4283      	cmp	r3, r0
 801872e:	d004      	beq.n	801873a <__swbuf_r+0x62>
 8018730:	89a3      	ldrh	r3, [r4, #12]
 8018732:	07db      	lsls	r3, r3, #31
 8018734:	d506      	bpl.n	8018744 <__swbuf_r+0x6c>
 8018736:	2e0a      	cmp	r6, #10
 8018738:	d104      	bne.n	8018744 <__swbuf_r+0x6c>
 801873a:	4621      	mov	r1, r4
 801873c:	4628      	mov	r0, r5
 801873e:	f000 f927 	bl	8018990 <_fflush_r>
 8018742:	b988      	cbnz	r0, 8018768 <__swbuf_r+0x90>
 8018744:	4638      	mov	r0, r7
 8018746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018748:	4b0a      	ldr	r3, [pc, #40]	; (8018774 <__swbuf_r+0x9c>)
 801874a:	429c      	cmp	r4, r3
 801874c:	d101      	bne.n	8018752 <__swbuf_r+0x7a>
 801874e:	68ac      	ldr	r4, [r5, #8]
 8018750:	e7cf      	b.n	80186f2 <__swbuf_r+0x1a>
 8018752:	4b09      	ldr	r3, [pc, #36]	; (8018778 <__swbuf_r+0xa0>)
 8018754:	429c      	cmp	r4, r3
 8018756:	bf08      	it	eq
 8018758:	68ec      	ldreq	r4, [r5, #12]
 801875a:	e7ca      	b.n	80186f2 <__swbuf_r+0x1a>
 801875c:	4621      	mov	r1, r4
 801875e:	4628      	mov	r0, r5
 8018760:	f000 f81a 	bl	8018798 <__swsetup_r>
 8018764:	2800      	cmp	r0, #0
 8018766:	d0cb      	beq.n	8018700 <__swbuf_r+0x28>
 8018768:	f04f 37ff 	mov.w	r7, #4294967295
 801876c:	e7ea      	b.n	8018744 <__swbuf_r+0x6c>
 801876e:	bf00      	nop
 8018770:	08019d94 	.word	0x08019d94
 8018774:	08019db4 	.word	0x08019db4
 8018778:	08019d74 	.word	0x08019d74

0801877c <__ascii_wctomb>:
 801877c:	b149      	cbz	r1, 8018792 <__ascii_wctomb+0x16>
 801877e:	2aff      	cmp	r2, #255	; 0xff
 8018780:	bf85      	ittet	hi
 8018782:	238a      	movhi	r3, #138	; 0x8a
 8018784:	6003      	strhi	r3, [r0, #0]
 8018786:	700a      	strbls	r2, [r1, #0]
 8018788:	f04f 30ff 	movhi.w	r0, #4294967295
 801878c:	bf98      	it	ls
 801878e:	2001      	movls	r0, #1
 8018790:	4770      	bx	lr
 8018792:	4608      	mov	r0, r1
 8018794:	4770      	bx	lr
	...

08018798 <__swsetup_r>:
 8018798:	4b32      	ldr	r3, [pc, #200]	; (8018864 <__swsetup_r+0xcc>)
 801879a:	b570      	push	{r4, r5, r6, lr}
 801879c:	681d      	ldr	r5, [r3, #0]
 801879e:	4606      	mov	r6, r0
 80187a0:	460c      	mov	r4, r1
 80187a2:	b125      	cbz	r5, 80187ae <__swsetup_r+0x16>
 80187a4:	69ab      	ldr	r3, [r5, #24]
 80187a6:	b913      	cbnz	r3, 80187ae <__swsetup_r+0x16>
 80187a8:	4628      	mov	r0, r5
 80187aa:	f000 f985 	bl	8018ab8 <__sinit>
 80187ae:	4b2e      	ldr	r3, [pc, #184]	; (8018868 <__swsetup_r+0xd0>)
 80187b0:	429c      	cmp	r4, r3
 80187b2:	d10f      	bne.n	80187d4 <__swsetup_r+0x3c>
 80187b4:	686c      	ldr	r4, [r5, #4]
 80187b6:	89a3      	ldrh	r3, [r4, #12]
 80187b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80187bc:	0719      	lsls	r1, r3, #28
 80187be:	d42c      	bmi.n	801881a <__swsetup_r+0x82>
 80187c0:	06dd      	lsls	r5, r3, #27
 80187c2:	d411      	bmi.n	80187e8 <__swsetup_r+0x50>
 80187c4:	2309      	movs	r3, #9
 80187c6:	6033      	str	r3, [r6, #0]
 80187c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80187cc:	81a3      	strh	r3, [r4, #12]
 80187ce:	f04f 30ff 	mov.w	r0, #4294967295
 80187d2:	e03e      	b.n	8018852 <__swsetup_r+0xba>
 80187d4:	4b25      	ldr	r3, [pc, #148]	; (801886c <__swsetup_r+0xd4>)
 80187d6:	429c      	cmp	r4, r3
 80187d8:	d101      	bne.n	80187de <__swsetup_r+0x46>
 80187da:	68ac      	ldr	r4, [r5, #8]
 80187dc:	e7eb      	b.n	80187b6 <__swsetup_r+0x1e>
 80187de:	4b24      	ldr	r3, [pc, #144]	; (8018870 <__swsetup_r+0xd8>)
 80187e0:	429c      	cmp	r4, r3
 80187e2:	bf08      	it	eq
 80187e4:	68ec      	ldreq	r4, [r5, #12]
 80187e6:	e7e6      	b.n	80187b6 <__swsetup_r+0x1e>
 80187e8:	0758      	lsls	r0, r3, #29
 80187ea:	d512      	bpl.n	8018812 <__swsetup_r+0x7a>
 80187ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80187ee:	b141      	cbz	r1, 8018802 <__swsetup_r+0x6a>
 80187f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80187f4:	4299      	cmp	r1, r3
 80187f6:	d002      	beq.n	80187fe <__swsetup_r+0x66>
 80187f8:	4630      	mov	r0, r6
 80187fa:	f7fd fbff 	bl	8015ffc <_free_r>
 80187fe:	2300      	movs	r3, #0
 8018800:	6363      	str	r3, [r4, #52]	; 0x34
 8018802:	89a3      	ldrh	r3, [r4, #12]
 8018804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018808:	81a3      	strh	r3, [r4, #12]
 801880a:	2300      	movs	r3, #0
 801880c:	6063      	str	r3, [r4, #4]
 801880e:	6923      	ldr	r3, [r4, #16]
 8018810:	6023      	str	r3, [r4, #0]
 8018812:	89a3      	ldrh	r3, [r4, #12]
 8018814:	f043 0308 	orr.w	r3, r3, #8
 8018818:	81a3      	strh	r3, [r4, #12]
 801881a:	6923      	ldr	r3, [r4, #16]
 801881c:	b94b      	cbnz	r3, 8018832 <__swsetup_r+0x9a>
 801881e:	89a3      	ldrh	r3, [r4, #12]
 8018820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018828:	d003      	beq.n	8018832 <__swsetup_r+0x9a>
 801882a:	4621      	mov	r1, r4
 801882c:	4630      	mov	r0, r6
 801882e:	f000 fa05 	bl	8018c3c <__smakebuf_r>
 8018832:	89a0      	ldrh	r0, [r4, #12]
 8018834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018838:	f010 0301 	ands.w	r3, r0, #1
 801883c:	d00a      	beq.n	8018854 <__swsetup_r+0xbc>
 801883e:	2300      	movs	r3, #0
 8018840:	60a3      	str	r3, [r4, #8]
 8018842:	6963      	ldr	r3, [r4, #20]
 8018844:	425b      	negs	r3, r3
 8018846:	61a3      	str	r3, [r4, #24]
 8018848:	6923      	ldr	r3, [r4, #16]
 801884a:	b943      	cbnz	r3, 801885e <__swsetup_r+0xc6>
 801884c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018850:	d1ba      	bne.n	80187c8 <__swsetup_r+0x30>
 8018852:	bd70      	pop	{r4, r5, r6, pc}
 8018854:	0781      	lsls	r1, r0, #30
 8018856:	bf58      	it	pl
 8018858:	6963      	ldrpl	r3, [r4, #20]
 801885a:	60a3      	str	r3, [r4, #8]
 801885c:	e7f4      	b.n	8018848 <__swsetup_r+0xb0>
 801885e:	2000      	movs	r0, #0
 8018860:	e7f7      	b.n	8018852 <__swsetup_r+0xba>
 8018862:	bf00      	nop
 8018864:	2000012c 	.word	0x2000012c
 8018868:	08019d94 	.word	0x08019d94
 801886c:	08019db4 	.word	0x08019db4
 8018870:	08019d74 	.word	0x08019d74

08018874 <abort>:
 8018874:	b508      	push	{r3, lr}
 8018876:	2006      	movs	r0, #6
 8018878:	f000 fa50 	bl	8018d1c <raise>
 801887c:	2001      	movs	r0, #1
 801887e:	f7ea fac5 	bl	8002e0c <_exit>
	...

08018884 <__sflush_r>:
 8018884:	898a      	ldrh	r2, [r1, #12]
 8018886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801888a:	4605      	mov	r5, r0
 801888c:	0710      	lsls	r0, r2, #28
 801888e:	460c      	mov	r4, r1
 8018890:	d458      	bmi.n	8018944 <__sflush_r+0xc0>
 8018892:	684b      	ldr	r3, [r1, #4]
 8018894:	2b00      	cmp	r3, #0
 8018896:	dc05      	bgt.n	80188a4 <__sflush_r+0x20>
 8018898:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801889a:	2b00      	cmp	r3, #0
 801889c:	dc02      	bgt.n	80188a4 <__sflush_r+0x20>
 801889e:	2000      	movs	r0, #0
 80188a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80188a4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80188a6:	2e00      	cmp	r6, #0
 80188a8:	d0f9      	beq.n	801889e <__sflush_r+0x1a>
 80188aa:	2300      	movs	r3, #0
 80188ac:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80188b0:	682f      	ldr	r7, [r5, #0]
 80188b2:	602b      	str	r3, [r5, #0]
 80188b4:	d032      	beq.n	801891c <__sflush_r+0x98>
 80188b6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80188b8:	89a3      	ldrh	r3, [r4, #12]
 80188ba:	075a      	lsls	r2, r3, #29
 80188bc:	d505      	bpl.n	80188ca <__sflush_r+0x46>
 80188be:	6863      	ldr	r3, [r4, #4]
 80188c0:	1ac0      	subs	r0, r0, r3
 80188c2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80188c4:	b10b      	cbz	r3, 80188ca <__sflush_r+0x46>
 80188c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80188c8:	1ac0      	subs	r0, r0, r3
 80188ca:	2300      	movs	r3, #0
 80188cc:	4602      	mov	r2, r0
 80188ce:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80188d0:	6a21      	ldr	r1, [r4, #32]
 80188d2:	4628      	mov	r0, r5
 80188d4:	47b0      	blx	r6
 80188d6:	1c43      	adds	r3, r0, #1
 80188d8:	89a3      	ldrh	r3, [r4, #12]
 80188da:	d106      	bne.n	80188ea <__sflush_r+0x66>
 80188dc:	6829      	ldr	r1, [r5, #0]
 80188de:	291d      	cmp	r1, #29
 80188e0:	d82c      	bhi.n	801893c <__sflush_r+0xb8>
 80188e2:	4a2a      	ldr	r2, [pc, #168]	; (801898c <__sflush_r+0x108>)
 80188e4:	40ca      	lsrs	r2, r1
 80188e6:	07d6      	lsls	r6, r2, #31
 80188e8:	d528      	bpl.n	801893c <__sflush_r+0xb8>
 80188ea:	2200      	movs	r2, #0
 80188ec:	6062      	str	r2, [r4, #4]
 80188ee:	04d9      	lsls	r1, r3, #19
 80188f0:	6922      	ldr	r2, [r4, #16]
 80188f2:	6022      	str	r2, [r4, #0]
 80188f4:	d504      	bpl.n	8018900 <__sflush_r+0x7c>
 80188f6:	1c42      	adds	r2, r0, #1
 80188f8:	d101      	bne.n	80188fe <__sflush_r+0x7a>
 80188fa:	682b      	ldr	r3, [r5, #0]
 80188fc:	b903      	cbnz	r3, 8018900 <__sflush_r+0x7c>
 80188fe:	6560      	str	r0, [r4, #84]	; 0x54
 8018900:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018902:	602f      	str	r7, [r5, #0]
 8018904:	2900      	cmp	r1, #0
 8018906:	d0ca      	beq.n	801889e <__sflush_r+0x1a>
 8018908:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801890c:	4299      	cmp	r1, r3
 801890e:	d002      	beq.n	8018916 <__sflush_r+0x92>
 8018910:	4628      	mov	r0, r5
 8018912:	f7fd fb73 	bl	8015ffc <_free_r>
 8018916:	2000      	movs	r0, #0
 8018918:	6360      	str	r0, [r4, #52]	; 0x34
 801891a:	e7c1      	b.n	80188a0 <__sflush_r+0x1c>
 801891c:	6a21      	ldr	r1, [r4, #32]
 801891e:	2301      	movs	r3, #1
 8018920:	4628      	mov	r0, r5
 8018922:	47b0      	blx	r6
 8018924:	1c41      	adds	r1, r0, #1
 8018926:	d1c7      	bne.n	80188b8 <__sflush_r+0x34>
 8018928:	682b      	ldr	r3, [r5, #0]
 801892a:	2b00      	cmp	r3, #0
 801892c:	d0c4      	beq.n	80188b8 <__sflush_r+0x34>
 801892e:	2b1d      	cmp	r3, #29
 8018930:	d001      	beq.n	8018936 <__sflush_r+0xb2>
 8018932:	2b16      	cmp	r3, #22
 8018934:	d101      	bne.n	801893a <__sflush_r+0xb6>
 8018936:	602f      	str	r7, [r5, #0]
 8018938:	e7b1      	b.n	801889e <__sflush_r+0x1a>
 801893a:	89a3      	ldrh	r3, [r4, #12]
 801893c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018940:	81a3      	strh	r3, [r4, #12]
 8018942:	e7ad      	b.n	80188a0 <__sflush_r+0x1c>
 8018944:	690f      	ldr	r7, [r1, #16]
 8018946:	2f00      	cmp	r7, #0
 8018948:	d0a9      	beq.n	801889e <__sflush_r+0x1a>
 801894a:	0793      	lsls	r3, r2, #30
 801894c:	680e      	ldr	r6, [r1, #0]
 801894e:	bf08      	it	eq
 8018950:	694b      	ldreq	r3, [r1, #20]
 8018952:	600f      	str	r7, [r1, #0]
 8018954:	bf18      	it	ne
 8018956:	2300      	movne	r3, #0
 8018958:	eba6 0807 	sub.w	r8, r6, r7
 801895c:	608b      	str	r3, [r1, #8]
 801895e:	f1b8 0f00 	cmp.w	r8, #0
 8018962:	dd9c      	ble.n	801889e <__sflush_r+0x1a>
 8018964:	6a21      	ldr	r1, [r4, #32]
 8018966:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8018968:	4643      	mov	r3, r8
 801896a:	463a      	mov	r2, r7
 801896c:	4628      	mov	r0, r5
 801896e:	47b0      	blx	r6
 8018970:	2800      	cmp	r0, #0
 8018972:	dc06      	bgt.n	8018982 <__sflush_r+0xfe>
 8018974:	89a3      	ldrh	r3, [r4, #12]
 8018976:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801897a:	81a3      	strh	r3, [r4, #12]
 801897c:	f04f 30ff 	mov.w	r0, #4294967295
 8018980:	e78e      	b.n	80188a0 <__sflush_r+0x1c>
 8018982:	4407      	add	r7, r0
 8018984:	eba8 0800 	sub.w	r8, r8, r0
 8018988:	e7e9      	b.n	801895e <__sflush_r+0xda>
 801898a:	bf00      	nop
 801898c:	20400001 	.word	0x20400001

08018990 <_fflush_r>:
 8018990:	b538      	push	{r3, r4, r5, lr}
 8018992:	690b      	ldr	r3, [r1, #16]
 8018994:	4605      	mov	r5, r0
 8018996:	460c      	mov	r4, r1
 8018998:	b913      	cbnz	r3, 80189a0 <_fflush_r+0x10>
 801899a:	2500      	movs	r5, #0
 801899c:	4628      	mov	r0, r5
 801899e:	bd38      	pop	{r3, r4, r5, pc}
 80189a0:	b118      	cbz	r0, 80189aa <_fflush_r+0x1a>
 80189a2:	6983      	ldr	r3, [r0, #24]
 80189a4:	b90b      	cbnz	r3, 80189aa <_fflush_r+0x1a>
 80189a6:	f000 f887 	bl	8018ab8 <__sinit>
 80189aa:	4b14      	ldr	r3, [pc, #80]	; (80189fc <_fflush_r+0x6c>)
 80189ac:	429c      	cmp	r4, r3
 80189ae:	d11b      	bne.n	80189e8 <_fflush_r+0x58>
 80189b0:	686c      	ldr	r4, [r5, #4]
 80189b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80189b6:	2b00      	cmp	r3, #0
 80189b8:	d0ef      	beq.n	801899a <_fflush_r+0xa>
 80189ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80189bc:	07d0      	lsls	r0, r2, #31
 80189be:	d404      	bmi.n	80189ca <_fflush_r+0x3a>
 80189c0:	0599      	lsls	r1, r3, #22
 80189c2:	d402      	bmi.n	80189ca <_fflush_r+0x3a>
 80189c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80189c6:	f7ff fcd0 	bl	801836a <__retarget_lock_acquire_recursive>
 80189ca:	4628      	mov	r0, r5
 80189cc:	4621      	mov	r1, r4
 80189ce:	f7ff ff59 	bl	8018884 <__sflush_r>
 80189d2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80189d4:	07da      	lsls	r2, r3, #31
 80189d6:	4605      	mov	r5, r0
 80189d8:	d4e0      	bmi.n	801899c <_fflush_r+0xc>
 80189da:	89a3      	ldrh	r3, [r4, #12]
 80189dc:	059b      	lsls	r3, r3, #22
 80189de:	d4dd      	bmi.n	801899c <_fflush_r+0xc>
 80189e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80189e2:	f7ff fcc3 	bl	801836c <__retarget_lock_release_recursive>
 80189e6:	e7d9      	b.n	801899c <_fflush_r+0xc>
 80189e8:	4b05      	ldr	r3, [pc, #20]	; (8018a00 <_fflush_r+0x70>)
 80189ea:	429c      	cmp	r4, r3
 80189ec:	d101      	bne.n	80189f2 <_fflush_r+0x62>
 80189ee:	68ac      	ldr	r4, [r5, #8]
 80189f0:	e7df      	b.n	80189b2 <_fflush_r+0x22>
 80189f2:	4b04      	ldr	r3, [pc, #16]	; (8018a04 <_fflush_r+0x74>)
 80189f4:	429c      	cmp	r4, r3
 80189f6:	bf08      	it	eq
 80189f8:	68ec      	ldreq	r4, [r5, #12]
 80189fa:	e7da      	b.n	80189b2 <_fflush_r+0x22>
 80189fc:	08019d94 	.word	0x08019d94
 8018a00:	08019db4 	.word	0x08019db4
 8018a04:	08019d74 	.word	0x08019d74

08018a08 <std>:
 8018a08:	2300      	movs	r3, #0
 8018a0a:	b510      	push	{r4, lr}
 8018a0c:	4604      	mov	r4, r0
 8018a0e:	e9c0 3300 	strd	r3, r3, [r0]
 8018a12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8018a16:	6083      	str	r3, [r0, #8]
 8018a18:	8181      	strh	r1, [r0, #12]
 8018a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8018a1c:	81c2      	strh	r2, [r0, #14]
 8018a1e:	6183      	str	r3, [r0, #24]
 8018a20:	4619      	mov	r1, r3
 8018a22:	2208      	movs	r2, #8
 8018a24:	305c      	adds	r0, #92	; 0x5c
 8018a26:	f7fd fae1 	bl	8015fec <memset>
 8018a2a:	4b05      	ldr	r3, [pc, #20]	; (8018a40 <std+0x38>)
 8018a2c:	6263      	str	r3, [r4, #36]	; 0x24
 8018a2e:	4b05      	ldr	r3, [pc, #20]	; (8018a44 <std+0x3c>)
 8018a30:	62a3      	str	r3, [r4, #40]	; 0x28
 8018a32:	4b05      	ldr	r3, [pc, #20]	; (8018a48 <std+0x40>)
 8018a34:	62e3      	str	r3, [r4, #44]	; 0x2c
 8018a36:	4b05      	ldr	r3, [pc, #20]	; (8018a4c <std+0x44>)
 8018a38:	6224      	str	r4, [r4, #32]
 8018a3a:	6323      	str	r3, [r4, #48]	; 0x30
 8018a3c:	bd10      	pop	{r4, pc}
 8018a3e:	bf00      	nop
 8018a40:	08018d55 	.word	0x08018d55
 8018a44:	08018d77 	.word	0x08018d77
 8018a48:	08018daf 	.word	0x08018daf
 8018a4c:	08018dd3 	.word	0x08018dd3

08018a50 <_cleanup_r>:
 8018a50:	4901      	ldr	r1, [pc, #4]	; (8018a58 <_cleanup_r+0x8>)
 8018a52:	f000 b8af 	b.w	8018bb4 <_fwalk_reent>
 8018a56:	bf00      	nop
 8018a58:	08018991 	.word	0x08018991

08018a5c <__sfmoreglue>:
 8018a5c:	b570      	push	{r4, r5, r6, lr}
 8018a5e:	2268      	movs	r2, #104	; 0x68
 8018a60:	1e4d      	subs	r5, r1, #1
 8018a62:	4355      	muls	r5, r2
 8018a64:	460e      	mov	r6, r1
 8018a66:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8018a6a:	f7fd fb33 	bl	80160d4 <_malloc_r>
 8018a6e:	4604      	mov	r4, r0
 8018a70:	b140      	cbz	r0, 8018a84 <__sfmoreglue+0x28>
 8018a72:	2100      	movs	r1, #0
 8018a74:	e9c0 1600 	strd	r1, r6, [r0]
 8018a78:	300c      	adds	r0, #12
 8018a7a:	60a0      	str	r0, [r4, #8]
 8018a7c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8018a80:	f7fd fab4 	bl	8015fec <memset>
 8018a84:	4620      	mov	r0, r4
 8018a86:	bd70      	pop	{r4, r5, r6, pc}

08018a88 <__sfp_lock_acquire>:
 8018a88:	4801      	ldr	r0, [pc, #4]	; (8018a90 <__sfp_lock_acquire+0x8>)
 8018a8a:	f7ff bc6e 	b.w	801836a <__retarget_lock_acquire_recursive>
 8018a8e:	bf00      	nop
 8018a90:	20004e69 	.word	0x20004e69

08018a94 <__sfp_lock_release>:
 8018a94:	4801      	ldr	r0, [pc, #4]	; (8018a9c <__sfp_lock_release+0x8>)
 8018a96:	f7ff bc69 	b.w	801836c <__retarget_lock_release_recursive>
 8018a9a:	bf00      	nop
 8018a9c:	20004e69 	.word	0x20004e69

08018aa0 <__sinit_lock_acquire>:
 8018aa0:	4801      	ldr	r0, [pc, #4]	; (8018aa8 <__sinit_lock_acquire+0x8>)
 8018aa2:	f7ff bc62 	b.w	801836a <__retarget_lock_acquire_recursive>
 8018aa6:	bf00      	nop
 8018aa8:	20004e6a 	.word	0x20004e6a

08018aac <__sinit_lock_release>:
 8018aac:	4801      	ldr	r0, [pc, #4]	; (8018ab4 <__sinit_lock_release+0x8>)
 8018aae:	f7ff bc5d 	b.w	801836c <__retarget_lock_release_recursive>
 8018ab2:	bf00      	nop
 8018ab4:	20004e6a 	.word	0x20004e6a

08018ab8 <__sinit>:
 8018ab8:	b510      	push	{r4, lr}
 8018aba:	4604      	mov	r4, r0
 8018abc:	f7ff fff0 	bl	8018aa0 <__sinit_lock_acquire>
 8018ac0:	69a3      	ldr	r3, [r4, #24]
 8018ac2:	b11b      	cbz	r3, 8018acc <__sinit+0x14>
 8018ac4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018ac8:	f7ff bff0 	b.w	8018aac <__sinit_lock_release>
 8018acc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8018ad0:	6523      	str	r3, [r4, #80]	; 0x50
 8018ad2:	4b13      	ldr	r3, [pc, #76]	; (8018b20 <__sinit+0x68>)
 8018ad4:	4a13      	ldr	r2, [pc, #76]	; (8018b24 <__sinit+0x6c>)
 8018ad6:	681b      	ldr	r3, [r3, #0]
 8018ad8:	62a2      	str	r2, [r4, #40]	; 0x28
 8018ada:	42a3      	cmp	r3, r4
 8018adc:	bf04      	itt	eq
 8018ade:	2301      	moveq	r3, #1
 8018ae0:	61a3      	streq	r3, [r4, #24]
 8018ae2:	4620      	mov	r0, r4
 8018ae4:	f000 f820 	bl	8018b28 <__sfp>
 8018ae8:	6060      	str	r0, [r4, #4]
 8018aea:	4620      	mov	r0, r4
 8018aec:	f000 f81c 	bl	8018b28 <__sfp>
 8018af0:	60a0      	str	r0, [r4, #8]
 8018af2:	4620      	mov	r0, r4
 8018af4:	f000 f818 	bl	8018b28 <__sfp>
 8018af8:	2200      	movs	r2, #0
 8018afa:	60e0      	str	r0, [r4, #12]
 8018afc:	2104      	movs	r1, #4
 8018afe:	6860      	ldr	r0, [r4, #4]
 8018b00:	f7ff ff82 	bl	8018a08 <std>
 8018b04:	68a0      	ldr	r0, [r4, #8]
 8018b06:	2201      	movs	r2, #1
 8018b08:	2109      	movs	r1, #9
 8018b0a:	f7ff ff7d 	bl	8018a08 <std>
 8018b0e:	68e0      	ldr	r0, [r4, #12]
 8018b10:	2202      	movs	r2, #2
 8018b12:	2112      	movs	r1, #18
 8018b14:	f7ff ff78 	bl	8018a08 <std>
 8018b18:	2301      	movs	r3, #1
 8018b1a:	61a3      	str	r3, [r4, #24]
 8018b1c:	e7d2      	b.n	8018ac4 <__sinit+0xc>
 8018b1e:	bf00      	nop
 8018b20:	080199f8 	.word	0x080199f8
 8018b24:	08018a51 	.word	0x08018a51

08018b28 <__sfp>:
 8018b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b2a:	4607      	mov	r7, r0
 8018b2c:	f7ff ffac 	bl	8018a88 <__sfp_lock_acquire>
 8018b30:	4b1e      	ldr	r3, [pc, #120]	; (8018bac <__sfp+0x84>)
 8018b32:	681e      	ldr	r6, [r3, #0]
 8018b34:	69b3      	ldr	r3, [r6, #24]
 8018b36:	b913      	cbnz	r3, 8018b3e <__sfp+0x16>
 8018b38:	4630      	mov	r0, r6
 8018b3a:	f7ff ffbd 	bl	8018ab8 <__sinit>
 8018b3e:	3648      	adds	r6, #72	; 0x48
 8018b40:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8018b44:	3b01      	subs	r3, #1
 8018b46:	d503      	bpl.n	8018b50 <__sfp+0x28>
 8018b48:	6833      	ldr	r3, [r6, #0]
 8018b4a:	b30b      	cbz	r3, 8018b90 <__sfp+0x68>
 8018b4c:	6836      	ldr	r6, [r6, #0]
 8018b4e:	e7f7      	b.n	8018b40 <__sfp+0x18>
 8018b50:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8018b54:	b9d5      	cbnz	r5, 8018b8c <__sfp+0x64>
 8018b56:	4b16      	ldr	r3, [pc, #88]	; (8018bb0 <__sfp+0x88>)
 8018b58:	60e3      	str	r3, [r4, #12]
 8018b5a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8018b5e:	6665      	str	r5, [r4, #100]	; 0x64
 8018b60:	f7ff fc02 	bl	8018368 <__retarget_lock_init_recursive>
 8018b64:	f7ff ff96 	bl	8018a94 <__sfp_lock_release>
 8018b68:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8018b6c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8018b70:	6025      	str	r5, [r4, #0]
 8018b72:	61a5      	str	r5, [r4, #24]
 8018b74:	2208      	movs	r2, #8
 8018b76:	4629      	mov	r1, r5
 8018b78:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8018b7c:	f7fd fa36 	bl	8015fec <memset>
 8018b80:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8018b84:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8018b88:	4620      	mov	r0, r4
 8018b8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018b8c:	3468      	adds	r4, #104	; 0x68
 8018b8e:	e7d9      	b.n	8018b44 <__sfp+0x1c>
 8018b90:	2104      	movs	r1, #4
 8018b92:	4638      	mov	r0, r7
 8018b94:	f7ff ff62 	bl	8018a5c <__sfmoreglue>
 8018b98:	4604      	mov	r4, r0
 8018b9a:	6030      	str	r0, [r6, #0]
 8018b9c:	2800      	cmp	r0, #0
 8018b9e:	d1d5      	bne.n	8018b4c <__sfp+0x24>
 8018ba0:	f7ff ff78 	bl	8018a94 <__sfp_lock_release>
 8018ba4:	230c      	movs	r3, #12
 8018ba6:	603b      	str	r3, [r7, #0]
 8018ba8:	e7ee      	b.n	8018b88 <__sfp+0x60>
 8018baa:	bf00      	nop
 8018bac:	080199f8 	.word	0x080199f8
 8018bb0:	ffff0001 	.word	0xffff0001

08018bb4 <_fwalk_reent>:
 8018bb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8018bb8:	4606      	mov	r6, r0
 8018bba:	4688      	mov	r8, r1
 8018bbc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8018bc0:	2700      	movs	r7, #0
 8018bc2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8018bc6:	f1b9 0901 	subs.w	r9, r9, #1
 8018bca:	d505      	bpl.n	8018bd8 <_fwalk_reent+0x24>
 8018bcc:	6824      	ldr	r4, [r4, #0]
 8018bce:	2c00      	cmp	r4, #0
 8018bd0:	d1f7      	bne.n	8018bc2 <_fwalk_reent+0xe>
 8018bd2:	4638      	mov	r0, r7
 8018bd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018bd8:	89ab      	ldrh	r3, [r5, #12]
 8018bda:	2b01      	cmp	r3, #1
 8018bdc:	d907      	bls.n	8018bee <_fwalk_reent+0x3a>
 8018bde:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018be2:	3301      	adds	r3, #1
 8018be4:	d003      	beq.n	8018bee <_fwalk_reent+0x3a>
 8018be6:	4629      	mov	r1, r5
 8018be8:	4630      	mov	r0, r6
 8018bea:	47c0      	blx	r8
 8018bec:	4307      	orrs	r7, r0
 8018bee:	3568      	adds	r5, #104	; 0x68
 8018bf0:	e7e9      	b.n	8018bc6 <_fwalk_reent+0x12>

08018bf2 <__swhatbuf_r>:
 8018bf2:	b570      	push	{r4, r5, r6, lr}
 8018bf4:	460e      	mov	r6, r1
 8018bf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018bfa:	2900      	cmp	r1, #0
 8018bfc:	b096      	sub	sp, #88	; 0x58
 8018bfe:	4614      	mov	r4, r2
 8018c00:	461d      	mov	r5, r3
 8018c02:	da08      	bge.n	8018c16 <__swhatbuf_r+0x24>
 8018c04:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8018c08:	2200      	movs	r2, #0
 8018c0a:	602a      	str	r2, [r5, #0]
 8018c0c:	061a      	lsls	r2, r3, #24
 8018c0e:	d410      	bmi.n	8018c32 <__swhatbuf_r+0x40>
 8018c10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8018c14:	e00e      	b.n	8018c34 <__swhatbuf_r+0x42>
 8018c16:	466a      	mov	r2, sp
 8018c18:	f000 f902 	bl	8018e20 <_fstat_r>
 8018c1c:	2800      	cmp	r0, #0
 8018c1e:	dbf1      	blt.n	8018c04 <__swhatbuf_r+0x12>
 8018c20:	9a01      	ldr	r2, [sp, #4]
 8018c22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8018c26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8018c2a:	425a      	negs	r2, r3
 8018c2c:	415a      	adcs	r2, r3
 8018c2e:	602a      	str	r2, [r5, #0]
 8018c30:	e7ee      	b.n	8018c10 <__swhatbuf_r+0x1e>
 8018c32:	2340      	movs	r3, #64	; 0x40
 8018c34:	2000      	movs	r0, #0
 8018c36:	6023      	str	r3, [r4, #0]
 8018c38:	b016      	add	sp, #88	; 0x58
 8018c3a:	bd70      	pop	{r4, r5, r6, pc}

08018c3c <__smakebuf_r>:
 8018c3c:	898b      	ldrh	r3, [r1, #12]
 8018c3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8018c40:	079d      	lsls	r5, r3, #30
 8018c42:	4606      	mov	r6, r0
 8018c44:	460c      	mov	r4, r1
 8018c46:	d507      	bpl.n	8018c58 <__smakebuf_r+0x1c>
 8018c48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8018c4c:	6023      	str	r3, [r4, #0]
 8018c4e:	6123      	str	r3, [r4, #16]
 8018c50:	2301      	movs	r3, #1
 8018c52:	6163      	str	r3, [r4, #20]
 8018c54:	b002      	add	sp, #8
 8018c56:	bd70      	pop	{r4, r5, r6, pc}
 8018c58:	ab01      	add	r3, sp, #4
 8018c5a:	466a      	mov	r2, sp
 8018c5c:	f7ff ffc9 	bl	8018bf2 <__swhatbuf_r>
 8018c60:	9900      	ldr	r1, [sp, #0]
 8018c62:	4605      	mov	r5, r0
 8018c64:	4630      	mov	r0, r6
 8018c66:	f7fd fa35 	bl	80160d4 <_malloc_r>
 8018c6a:	b948      	cbnz	r0, 8018c80 <__smakebuf_r+0x44>
 8018c6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8018c70:	059a      	lsls	r2, r3, #22
 8018c72:	d4ef      	bmi.n	8018c54 <__smakebuf_r+0x18>
 8018c74:	f023 0303 	bic.w	r3, r3, #3
 8018c78:	f043 0302 	orr.w	r3, r3, #2
 8018c7c:	81a3      	strh	r3, [r4, #12]
 8018c7e:	e7e3      	b.n	8018c48 <__smakebuf_r+0xc>
 8018c80:	4b0d      	ldr	r3, [pc, #52]	; (8018cb8 <__smakebuf_r+0x7c>)
 8018c82:	62b3      	str	r3, [r6, #40]	; 0x28
 8018c84:	89a3      	ldrh	r3, [r4, #12]
 8018c86:	6020      	str	r0, [r4, #0]
 8018c88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018c8c:	81a3      	strh	r3, [r4, #12]
 8018c8e:	9b00      	ldr	r3, [sp, #0]
 8018c90:	6163      	str	r3, [r4, #20]
 8018c92:	9b01      	ldr	r3, [sp, #4]
 8018c94:	6120      	str	r0, [r4, #16]
 8018c96:	b15b      	cbz	r3, 8018cb0 <__smakebuf_r+0x74>
 8018c98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018c9c:	4630      	mov	r0, r6
 8018c9e:	f000 f8d1 	bl	8018e44 <_isatty_r>
 8018ca2:	b128      	cbz	r0, 8018cb0 <__smakebuf_r+0x74>
 8018ca4:	89a3      	ldrh	r3, [r4, #12]
 8018ca6:	f023 0303 	bic.w	r3, r3, #3
 8018caa:	f043 0301 	orr.w	r3, r3, #1
 8018cae:	81a3      	strh	r3, [r4, #12]
 8018cb0:	89a0      	ldrh	r0, [r4, #12]
 8018cb2:	4305      	orrs	r5, r0
 8018cb4:	81a5      	strh	r5, [r4, #12]
 8018cb6:	e7cd      	b.n	8018c54 <__smakebuf_r+0x18>
 8018cb8:	08018a51 	.word	0x08018a51

08018cbc <_malloc_usable_size_r>:
 8018cbc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018cc0:	1f18      	subs	r0, r3, #4
 8018cc2:	2b00      	cmp	r3, #0
 8018cc4:	bfbc      	itt	lt
 8018cc6:	580b      	ldrlt	r3, [r1, r0]
 8018cc8:	18c0      	addlt	r0, r0, r3
 8018cca:	4770      	bx	lr

08018ccc <_raise_r>:
 8018ccc:	291f      	cmp	r1, #31
 8018cce:	b538      	push	{r3, r4, r5, lr}
 8018cd0:	4604      	mov	r4, r0
 8018cd2:	460d      	mov	r5, r1
 8018cd4:	d904      	bls.n	8018ce0 <_raise_r+0x14>
 8018cd6:	2316      	movs	r3, #22
 8018cd8:	6003      	str	r3, [r0, #0]
 8018cda:	f04f 30ff 	mov.w	r0, #4294967295
 8018cde:	bd38      	pop	{r3, r4, r5, pc}
 8018ce0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8018ce2:	b112      	cbz	r2, 8018cea <_raise_r+0x1e>
 8018ce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8018ce8:	b94b      	cbnz	r3, 8018cfe <_raise_r+0x32>
 8018cea:	4620      	mov	r0, r4
 8018cec:	f000 f830 	bl	8018d50 <_getpid_r>
 8018cf0:	462a      	mov	r2, r5
 8018cf2:	4601      	mov	r1, r0
 8018cf4:	4620      	mov	r0, r4
 8018cf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8018cfa:	f000 b817 	b.w	8018d2c <_kill_r>
 8018cfe:	2b01      	cmp	r3, #1
 8018d00:	d00a      	beq.n	8018d18 <_raise_r+0x4c>
 8018d02:	1c59      	adds	r1, r3, #1
 8018d04:	d103      	bne.n	8018d0e <_raise_r+0x42>
 8018d06:	2316      	movs	r3, #22
 8018d08:	6003      	str	r3, [r0, #0]
 8018d0a:	2001      	movs	r0, #1
 8018d0c:	e7e7      	b.n	8018cde <_raise_r+0x12>
 8018d0e:	2400      	movs	r4, #0
 8018d10:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8018d14:	4628      	mov	r0, r5
 8018d16:	4798      	blx	r3
 8018d18:	2000      	movs	r0, #0
 8018d1a:	e7e0      	b.n	8018cde <_raise_r+0x12>

08018d1c <raise>:
 8018d1c:	4b02      	ldr	r3, [pc, #8]	; (8018d28 <raise+0xc>)
 8018d1e:	4601      	mov	r1, r0
 8018d20:	6818      	ldr	r0, [r3, #0]
 8018d22:	f7ff bfd3 	b.w	8018ccc <_raise_r>
 8018d26:	bf00      	nop
 8018d28:	2000012c 	.word	0x2000012c

08018d2c <_kill_r>:
 8018d2c:	b538      	push	{r3, r4, r5, lr}
 8018d2e:	4d07      	ldr	r5, [pc, #28]	; (8018d4c <_kill_r+0x20>)
 8018d30:	2300      	movs	r3, #0
 8018d32:	4604      	mov	r4, r0
 8018d34:	4608      	mov	r0, r1
 8018d36:	4611      	mov	r1, r2
 8018d38:	602b      	str	r3, [r5, #0]
 8018d3a:	f7ea f857 	bl	8002dec <_kill>
 8018d3e:	1c43      	adds	r3, r0, #1
 8018d40:	d102      	bne.n	8018d48 <_kill_r+0x1c>
 8018d42:	682b      	ldr	r3, [r5, #0]
 8018d44:	b103      	cbz	r3, 8018d48 <_kill_r+0x1c>
 8018d46:	6023      	str	r3, [r4, #0]
 8018d48:	bd38      	pop	{r3, r4, r5, pc}
 8018d4a:	bf00      	nop
 8018d4c:	20004e64 	.word	0x20004e64

08018d50 <_getpid_r>:
 8018d50:	f7ea b844 	b.w	8002ddc <_getpid>

08018d54 <__sread>:
 8018d54:	b510      	push	{r4, lr}
 8018d56:	460c      	mov	r4, r1
 8018d58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d5c:	f000 f894 	bl	8018e88 <_read_r>
 8018d60:	2800      	cmp	r0, #0
 8018d62:	bfab      	itete	ge
 8018d64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018d66:	89a3      	ldrhlt	r3, [r4, #12]
 8018d68:	181b      	addge	r3, r3, r0
 8018d6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018d6e:	bfac      	ite	ge
 8018d70:	6563      	strge	r3, [r4, #84]	; 0x54
 8018d72:	81a3      	strhlt	r3, [r4, #12]
 8018d74:	bd10      	pop	{r4, pc}

08018d76 <__swrite>:
 8018d76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d7a:	461f      	mov	r7, r3
 8018d7c:	898b      	ldrh	r3, [r1, #12]
 8018d7e:	05db      	lsls	r3, r3, #23
 8018d80:	4605      	mov	r5, r0
 8018d82:	460c      	mov	r4, r1
 8018d84:	4616      	mov	r6, r2
 8018d86:	d505      	bpl.n	8018d94 <__swrite+0x1e>
 8018d88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018d8c:	2302      	movs	r3, #2
 8018d8e:	2200      	movs	r2, #0
 8018d90:	f000 f868 	bl	8018e64 <_lseek_r>
 8018d94:	89a3      	ldrh	r3, [r4, #12]
 8018d96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018d9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018d9e:	81a3      	strh	r3, [r4, #12]
 8018da0:	4632      	mov	r2, r6
 8018da2:	463b      	mov	r3, r7
 8018da4:	4628      	mov	r0, r5
 8018da6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018daa:	f000 b817 	b.w	8018ddc <_write_r>

08018dae <__sseek>:
 8018dae:	b510      	push	{r4, lr}
 8018db0:	460c      	mov	r4, r1
 8018db2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018db6:	f000 f855 	bl	8018e64 <_lseek_r>
 8018dba:	1c43      	adds	r3, r0, #1
 8018dbc:	89a3      	ldrh	r3, [r4, #12]
 8018dbe:	bf15      	itete	ne
 8018dc0:	6560      	strne	r0, [r4, #84]	; 0x54
 8018dc2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018dc6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018dca:	81a3      	strheq	r3, [r4, #12]
 8018dcc:	bf18      	it	ne
 8018dce:	81a3      	strhne	r3, [r4, #12]
 8018dd0:	bd10      	pop	{r4, pc}

08018dd2 <__sclose>:
 8018dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018dd6:	f000 b813 	b.w	8018e00 <_close_r>
	...

08018ddc <_write_r>:
 8018ddc:	b538      	push	{r3, r4, r5, lr}
 8018dde:	4d07      	ldr	r5, [pc, #28]	; (8018dfc <_write_r+0x20>)
 8018de0:	4604      	mov	r4, r0
 8018de2:	4608      	mov	r0, r1
 8018de4:	4611      	mov	r1, r2
 8018de6:	2200      	movs	r2, #0
 8018de8:	602a      	str	r2, [r5, #0]
 8018dea:	461a      	mov	r2, r3
 8018dec:	f7ea f835 	bl	8002e5a <_write>
 8018df0:	1c43      	adds	r3, r0, #1
 8018df2:	d102      	bne.n	8018dfa <_write_r+0x1e>
 8018df4:	682b      	ldr	r3, [r5, #0]
 8018df6:	b103      	cbz	r3, 8018dfa <_write_r+0x1e>
 8018df8:	6023      	str	r3, [r4, #0]
 8018dfa:	bd38      	pop	{r3, r4, r5, pc}
 8018dfc:	20004e64 	.word	0x20004e64

08018e00 <_close_r>:
 8018e00:	b538      	push	{r3, r4, r5, lr}
 8018e02:	4d06      	ldr	r5, [pc, #24]	; (8018e1c <_close_r+0x1c>)
 8018e04:	2300      	movs	r3, #0
 8018e06:	4604      	mov	r4, r0
 8018e08:	4608      	mov	r0, r1
 8018e0a:	602b      	str	r3, [r5, #0]
 8018e0c:	f7ea f841 	bl	8002e92 <_close>
 8018e10:	1c43      	adds	r3, r0, #1
 8018e12:	d102      	bne.n	8018e1a <_close_r+0x1a>
 8018e14:	682b      	ldr	r3, [r5, #0]
 8018e16:	b103      	cbz	r3, 8018e1a <_close_r+0x1a>
 8018e18:	6023      	str	r3, [r4, #0]
 8018e1a:	bd38      	pop	{r3, r4, r5, pc}
 8018e1c:	20004e64 	.word	0x20004e64

08018e20 <_fstat_r>:
 8018e20:	b538      	push	{r3, r4, r5, lr}
 8018e22:	4d07      	ldr	r5, [pc, #28]	; (8018e40 <_fstat_r+0x20>)
 8018e24:	2300      	movs	r3, #0
 8018e26:	4604      	mov	r4, r0
 8018e28:	4608      	mov	r0, r1
 8018e2a:	4611      	mov	r1, r2
 8018e2c:	602b      	str	r3, [r5, #0]
 8018e2e:	f7ea f83c 	bl	8002eaa <_fstat>
 8018e32:	1c43      	adds	r3, r0, #1
 8018e34:	d102      	bne.n	8018e3c <_fstat_r+0x1c>
 8018e36:	682b      	ldr	r3, [r5, #0]
 8018e38:	b103      	cbz	r3, 8018e3c <_fstat_r+0x1c>
 8018e3a:	6023      	str	r3, [r4, #0]
 8018e3c:	bd38      	pop	{r3, r4, r5, pc}
 8018e3e:	bf00      	nop
 8018e40:	20004e64 	.word	0x20004e64

08018e44 <_isatty_r>:
 8018e44:	b538      	push	{r3, r4, r5, lr}
 8018e46:	4d06      	ldr	r5, [pc, #24]	; (8018e60 <_isatty_r+0x1c>)
 8018e48:	2300      	movs	r3, #0
 8018e4a:	4604      	mov	r4, r0
 8018e4c:	4608      	mov	r0, r1
 8018e4e:	602b      	str	r3, [r5, #0]
 8018e50:	f7ea f83b 	bl	8002eca <_isatty>
 8018e54:	1c43      	adds	r3, r0, #1
 8018e56:	d102      	bne.n	8018e5e <_isatty_r+0x1a>
 8018e58:	682b      	ldr	r3, [r5, #0]
 8018e5a:	b103      	cbz	r3, 8018e5e <_isatty_r+0x1a>
 8018e5c:	6023      	str	r3, [r4, #0]
 8018e5e:	bd38      	pop	{r3, r4, r5, pc}
 8018e60:	20004e64 	.word	0x20004e64

08018e64 <_lseek_r>:
 8018e64:	b538      	push	{r3, r4, r5, lr}
 8018e66:	4d07      	ldr	r5, [pc, #28]	; (8018e84 <_lseek_r+0x20>)
 8018e68:	4604      	mov	r4, r0
 8018e6a:	4608      	mov	r0, r1
 8018e6c:	4611      	mov	r1, r2
 8018e6e:	2200      	movs	r2, #0
 8018e70:	602a      	str	r2, [r5, #0]
 8018e72:	461a      	mov	r2, r3
 8018e74:	f7ea f834 	bl	8002ee0 <_lseek>
 8018e78:	1c43      	adds	r3, r0, #1
 8018e7a:	d102      	bne.n	8018e82 <_lseek_r+0x1e>
 8018e7c:	682b      	ldr	r3, [r5, #0]
 8018e7e:	b103      	cbz	r3, 8018e82 <_lseek_r+0x1e>
 8018e80:	6023      	str	r3, [r4, #0]
 8018e82:	bd38      	pop	{r3, r4, r5, pc}
 8018e84:	20004e64 	.word	0x20004e64

08018e88 <_read_r>:
 8018e88:	b538      	push	{r3, r4, r5, lr}
 8018e8a:	4d07      	ldr	r5, [pc, #28]	; (8018ea8 <_read_r+0x20>)
 8018e8c:	4604      	mov	r4, r0
 8018e8e:	4608      	mov	r0, r1
 8018e90:	4611      	mov	r1, r2
 8018e92:	2200      	movs	r2, #0
 8018e94:	602a      	str	r2, [r5, #0]
 8018e96:	461a      	mov	r2, r3
 8018e98:	f7e9 ffc2 	bl	8002e20 <_read>
 8018e9c:	1c43      	adds	r3, r0, #1
 8018e9e:	d102      	bne.n	8018ea6 <_read_r+0x1e>
 8018ea0:	682b      	ldr	r3, [r5, #0]
 8018ea2:	b103      	cbz	r3, 8018ea6 <_read_r+0x1e>
 8018ea4:	6023      	str	r3, [r4, #0]
 8018ea6:	bd38      	pop	{r3, r4, r5, pc}
 8018ea8:	20004e64 	.word	0x20004e64

08018eac <_init>:
 8018eac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eae:	bf00      	nop
 8018eb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018eb2:	bc08      	pop	{r3}
 8018eb4:	469e      	mov	lr, r3
 8018eb6:	4770      	bx	lr

08018eb8 <_fini>:
 8018eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018eba:	bf00      	nop
 8018ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018ebe:	bc08      	pop	{r3}
 8018ec0:	469e      	mov	lr, r3
 8018ec2:	4770      	bx	lr
