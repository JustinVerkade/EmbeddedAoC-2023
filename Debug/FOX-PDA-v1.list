
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001461c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080147f0  080147f0  000247f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014c4c  08014c4c  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  08014c4c  08014c4c  00024c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014c54  08014c54  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08014c54  08014c54  00024c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014c58  08014c58  00024c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08014c5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000246c  200002fc  08014f58  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002768  08014f58  00032768  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ce11  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006635  00000000  00000000  0005d13d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002200  00000000  00000000  00063778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f38  00000000  00000000  00065978  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000acc4  00000000  00000000  000678b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e00c  00000000  00000000  00072574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105f2d  00000000  00000000  000a0580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a64ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d10  00000000  00000000  001a6500  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080147d4 	.word	0x080147d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	080147d4 	.word	0x080147d4

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef0:	f000 fffd 	bl	8001eee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef4:	f000 f81e 	bl	8000f34 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ef8:	f000 fa6e 	bl	80013d8 <MX_GPIO_Init>
	MX_DMA_Init();
 8000efc:	f000 f9dc 	bl	80012b8 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8000f00:	f000 f8e6 	bl	80010d0 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000f04:	f00b fd24 	bl	800c950 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000f08:	f00f fea2 	bl	8010c50 <MX_USB_DEVICE_Init>
	MX_USB_HOST_Init();
 8000f0c:	f010 fbfc 	bl	8011708 <MX_USB_HOST_Init>
	MX_USART1_UART_Init();
 8000f10:	f000 f9a2 	bl	8001258 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000f14:	f000 f8fe 	bl	8001114 <MX_TIM1_Init>
	MX_TIM11_Init();
 8000f18:	f000 f950 	bl	80011bc <MX_TIM11_Init>
	MX_ADC1_Init();
 8000f1c:	f000 f878 	bl	8001010 <MX_ADC1_Init>
	MX_FMC_Init();
 8000f20:	f000 f9f8 	bl	8001314 <MX_FMC_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 8000f24:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f28:	f001 f83e 	bl	8001fa8 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000f2c:	f010 fc12 	bl	8011754 <MX_USB_HOST_Process>
 8000f30:	e7fc      	b.n	8000f2c <main+0x40>
	...

08000f34 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b094      	sub	sp, #80	; 0x50
 8000f38:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3a:	f107 0320 	add.w	r3, r7, #32
 8000f3e:	2230      	movs	r2, #48	; 0x30
 8000f40:	2100      	movs	r1, #0
 8000f42:	4618      	mov	r0, r3
 8000f44:	f010 ff32 	bl	8011dac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f48:	f107 030c 	add.w	r3, r7, #12
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	601a      	str	r2, [r3, #0]
 8000f50:	605a      	str	r2, [r3, #4]
 8000f52:	609a      	str	r2, [r3, #8]
 8000f54:	60da      	str	r2, [r3, #12]
 8000f56:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000f58:	f005 f8c4 	bl	80060e4 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	4b2a      	ldr	r3, [pc, #168]	; (8001008 <SystemClock_Config+0xd4>)
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	4a29      	ldr	r2, [pc, #164]	; (8001008 <SystemClock_Config+0xd4>)
 8000f62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f66:	6413      	str	r3, [r2, #64]	; 0x40
 8000f68:	4b27      	ldr	r3, [pc, #156]	; (8001008 <SystemClock_Config+0xd4>)
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f74:	4b25      	ldr	r3, [pc, #148]	; (800100c <SystemClock_Config+0xd8>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a24      	ldr	r2, [pc, #144]	; (800100c <SystemClock_Config+0xd8>)
 8000f7a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b22      	ldr	r3, [pc, #136]	; (800100c <SystemClock_Config+0xd8>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f88:	607b      	str	r3, [r7, #4]
 8000f8a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f90:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f94:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f96:	2302      	movs	r3, #2
 8000f98:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f9a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa0:	2308      	movs	r3, #8
 8000fa2:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000fa4:	23d8      	movs	r3, #216	; 0xd8
 8000fa6:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fac:	2309      	movs	r3, #9
 8000fae:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 0320 	add.w	r3, r7, #32
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f005 f8f5 	bl	80061a4 <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x90>
	{
		Error_Handler();
 8000fc0:	f000 fb3c 	bl	800163c <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc4:	f005 f89e 	bl	8006104 <HAL_PWREx_EnableOverDrive>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000fce:	f000 fb35 	bl	800163c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fe2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fe4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000fea:	f107 030c 	add.w	r3, r7, #12
 8000fee:	2107      	movs	r1, #7
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f005 fb7b 	bl	80066ec <HAL_RCC_ClockConfig>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d001      	beq.n	8001000 <SystemClock_Config+0xcc>
	{
		Error_Handler();
 8000ffc:	f000 fb1e 	bl	800163c <Error_Handler>
	}
}
 8001000:	bf00      	nop
 8001002:	3750      	adds	r7, #80	; 0x50
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b084      	sub	sp, #16
 8001014:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001016:	463b      	mov	r3, r7
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8001022:	4b28      	ldr	r3, [pc, #160]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <MX_ADC1_Init+0xb8>)
 8001026:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001028:	4b26      	ldr	r3, [pc, #152]	; (80010c4 <MX_ADC1_Init+0xb4>)
 800102a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800102e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001030:	4b24      	ldr	r3, [pc, #144]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001032:	2200      	movs	r2, #0
 8001034:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001036:	4b23      	ldr	r3, [pc, #140]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001038:	2201      	movs	r2, #1
 800103a:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 800103c:	4b21      	ldr	r3, [pc, #132]	; (80010c4 <MX_ADC1_Init+0xb4>)
 800103e:	2201      	movs	r2, #1
 8001040:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001042:	4b20      	ldr	r3, [pc, #128]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001044:	2200      	movs	r2, #0
 8001046:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800104a:	4b1e      	ldr	r3, [pc, #120]	; (80010c4 <MX_ADC1_Init+0xb4>)
 800104c:	2200      	movs	r2, #0
 800104e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001050:	4b1c      	ldr	r3, [pc, #112]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001052:	4a1e      	ldr	r2, [pc, #120]	; (80010cc <MX_ADC1_Init+0xbc>)
 8001054:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001058:	2200      	movs	r2, #0
 800105a:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 800105c:	4b19      	ldr	r3, [pc, #100]	; (80010c4 <MX_ADC1_Init+0xb4>)
 800105e:	2202      	movs	r2, #2
 8001060:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 8001062:	4b18      	ldr	r3, [pc, #96]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001064:	2201      	movs	r2, #1
 8001066:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800106a:	4b16      	ldr	r3, [pc, #88]	; (80010c4 <MX_ADC1_Init+0xb4>)
 800106c:	2201      	movs	r2, #1
 800106e:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001070:	4814      	ldr	r0, [pc, #80]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001072:	f000 ffbd 	bl	8001ff0 <HAL_ADC_Init>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 800107c:	f000 fade 	bl	800163c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001080:	2300      	movs	r3, #0
 8001082:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001084:	2301      	movs	r3, #1
 8001086:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001088:	2306      	movs	r3, #6
 800108a:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800108c:	463b      	mov	r3, r7
 800108e:	4619      	mov	r1, r3
 8001090:	480c      	ldr	r0, [pc, #48]	; (80010c4 <MX_ADC1_Init+0xb4>)
 8001092:	f000 fff1 	bl	8002078 <HAL_ADC_ConfigChannel>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 800109c:	f000 face 	bl	800163c <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80010a0:	2302      	movs	r3, #2
 80010a2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80010a4:	2302      	movs	r3, #2
 80010a6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	4619      	mov	r1, r3
 80010ac:	4805      	ldr	r0, [pc, #20]	; (80010c4 <MX_ADC1_Init+0xb4>)
 80010ae:	f000 ffe3 	bl	8002078 <HAL_ADC_ConfigChannel>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 80010b8:	f000 fac0 	bl	800163c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010bc:	bf00      	nop
 80010be:	3710      	adds	r7, #16
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	20000318 	.word	0x20000318
 80010c8:	40012000 	.word	0x40012000
 80010cc:	0f000001 	.word	0x0f000001

080010d0 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <MX_SDMMC1_SD_Init+0x3c>)
 80010d6:	4a0e      	ldr	r2, [pc, #56]	; (8001110 <MX_SDMMC1_SD_Init+0x40>)
 80010d8:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 80010da:	4b0c      	ldr	r3, [pc, #48]	; (800110c <MX_SDMMC1_SD_Init+0x3c>)
 80010dc:	2200      	movs	r2, #0
 80010de:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <MX_SDMMC1_SD_Init+0x3c>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80010e6:	4b09      	ldr	r3, [pc, #36]	; (800110c <MX_SDMMC1_SD_Init+0x3c>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 80010ec:	4b07      	ldr	r3, [pc, #28]	; (800110c <MX_SDMMC1_SD_Init+0x3c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <MX_SDMMC1_SD_Init+0x3c>)
 80010f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010f8:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 4;
 80010fa:	4b04      	ldr	r3, [pc, #16]	; (800110c <MX_SDMMC1_SD_Init+0x3c>)
 80010fc:	2204      	movs	r2, #4
 80010fe:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 8001100:	4802      	ldr	r0, [pc, #8]	; (800110c <MX_SDMMC1_SD_Init+0x3c>)
 8001102:	f006 f8cf 	bl	80072a4 <HAL_SD_Init>
	/* USER CODE END SDMMC1_Init 2 */

}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200003c0 	.word	0x200003c0
 8001110:	40012c00 	.word	0x40012c00

08001114 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b088      	sub	sp, #32
 8001118:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800111a:	f107 0310 	add.w	r3, r7, #16
 800111e:	2200      	movs	r2, #0
 8001120:	601a      	str	r2, [r3, #0]
 8001122:	605a      	str	r2, [r3, #4]
 8001124:	609a      	str	r2, [r3, #8]
 8001126:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001128:	1d3b      	adds	r3, r7, #4
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	605a      	str	r2, [r3, #4]
 8001130:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001132:	4b20      	ldr	r3, [pc, #128]	; (80011b4 <MX_TIM1_Init+0xa0>)
 8001134:	4a20      	ldr	r2, [pc, #128]	; (80011b8 <MX_TIM1_Init+0xa4>)
 8001136:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001138:	4b1e      	ldr	r3, [pc, #120]	; (80011b4 <MX_TIM1_Init+0xa0>)
 800113a:	2200      	movs	r2, #0
 800113c:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800113e:	4b1d      	ldr	r3, [pc, #116]	; (80011b4 <MX_TIM1_Init+0xa0>)
 8001140:	2200      	movs	r2, #0
 8001142:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001144:	4b1b      	ldr	r3, [pc, #108]	; (80011b4 <MX_TIM1_Init+0xa0>)
 8001146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114a:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800114c:	4b19      	ldr	r3, [pc, #100]	; (80011b4 <MX_TIM1_Init+0xa0>)
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001152:	4b18      	ldr	r3, [pc, #96]	; (80011b4 <MX_TIM1_Init+0xa0>)
 8001154:	2200      	movs	r2, #0
 8001156:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001158:	4b16      	ldr	r3, [pc, #88]	; (80011b4 <MX_TIM1_Init+0xa0>)
 800115a:	2200      	movs	r2, #0
 800115c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800115e:	4815      	ldr	r0, [pc, #84]	; (80011b4 <MX_TIM1_Init+0xa0>)
 8001160:	f007 f878 	bl	8008254 <HAL_TIM_Base_Init>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 800116a:	f000 fa67 	bl	800163c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800116e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001172:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001174:	f107 0310 	add.w	r3, r7, #16
 8001178:	4619      	mov	r1, r3
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <MX_TIM1_Init+0xa0>)
 800117c:	f007 fa36 	bl	80085ec <HAL_TIM_ConfigClockSource>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 8001186:	f000 fa59 	bl	800163c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800118a:	2300      	movs	r3, #0
 800118c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800118e:	2300      	movs	r3, #0
 8001190:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001196:	1d3b      	adds	r3, r7, #4
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <MX_TIM1_Init+0xa0>)
 800119c:	f007 fe88 	bl	8008eb0 <HAL_TIMEx_MasterConfigSynchronization>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 80011a6:	f000 fa49 	bl	800163c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	3720      	adds	r7, #32
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000504 	.word	0x20000504
 80011b8:	40010000 	.word	0x40010000

080011bc <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b088      	sub	sp, #32
 80011c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
 80011d0:	615a      	str	r2, [r3, #20]
 80011d2:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80011d4:	4b1e      	ldr	r3, [pc, #120]	; (8001250 <MX_TIM11_Init+0x94>)
 80011d6:	4a1f      	ldr	r2, [pc, #124]	; (8001254 <MX_TIM11_Init+0x98>)
 80011d8:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 80011da:	4b1d      	ldr	r3, [pc, #116]	; (8001250 <MX_TIM11_Init+0x94>)
 80011dc:	2200      	movs	r2, #0
 80011de:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011e0:	4b1b      	ldr	r3, [pc, #108]	; (8001250 <MX_TIM11_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 80011e6:	4b1a      	ldr	r3, [pc, #104]	; (8001250 <MX_TIM11_Init+0x94>)
 80011e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011ec:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011ee:	4b18      	ldr	r3, [pc, #96]	; (8001250 <MX_TIM11_Init+0x94>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011f4:	4b16      	ldr	r3, [pc, #88]	; (8001250 <MX_TIM11_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80011fa:	4815      	ldr	r0, [pc, #84]	; (8001250 <MX_TIM11_Init+0x94>)
 80011fc:	f007 f82a 	bl	8008254 <HAL_TIM_Base_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_TIM11_Init+0x4e>
	{
		Error_Handler();
 8001206:	f000 fa19 	bl	800163c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 800120a:	4811      	ldr	r0, [pc, #68]	; (8001250 <MX_TIM11_Init+0x94>)
 800120c:	f007 f879 	bl	8008302 <HAL_TIM_PWM_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM11_Init+0x5e>
	{
		Error_Handler();
 8001216:	f000 fa11 	bl	800163c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121a:	2360      	movs	r3, #96	; 0x60
 800121c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	4807      	ldr	r0, [pc, #28]	; (8001250 <MX_TIM11_Init+0x94>)
 8001232:	f007 f8c7 	bl	80083c4 <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM11_Init+0x84>
	{
		Error_Handler();
 800123c:	f000 f9fe 	bl	800163c <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8001240:	4803      	ldr	r0, [pc, #12]	; (8001250 <MX_TIM11_Init+0x94>)
 8001242:	f000 fbe9 	bl	8001a18 <HAL_TIM_MspPostInit>

}
 8001246:	bf00      	nop
 8001248:	3720      	adds	r7, #32
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000550 	.word	0x20000550
 8001254:	40014800 	.word	0x40014800

08001258 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 800125c:	4b14      	ldr	r3, [pc, #80]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 800125e:	4a15      	ldr	r2, [pc, #84]	; (80012b4 <MX_USART1_UART_Init+0x5c>)
 8001260:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 8001262:	4b13      	ldr	r3, [pc, #76]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 8001264:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001268:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 800126c:	2200      	movs	r2, #0
 800126e:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8001270:	4b0f      	ldr	r3, [pc, #60]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 8001272:	2200      	movs	r2, #0
 8001274:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 800127c:	4b0c      	ldr	r3, [pc, #48]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 800127e:	220c      	movs	r2, #12
 8001280:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001288:	4b09      	ldr	r3, [pc, #36]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 800128a:	2200      	movs	r2, #0
 800128c:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800128e:	4b08      	ldr	r3, [pc, #32]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 8001290:	2200      	movs	r2, #0
 8001292:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001294:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 8001296:	2200      	movs	r2, #0
 8001298:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 800129a:	4805      	ldr	r0, [pc, #20]	; (80012b0 <MX_USART1_UART_Init+0x58>)
 800129c:	f007 fe96 	bl	8008fcc <HAL_UART_Init>
 80012a0:	4603      	mov	r3, r0
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d001      	beq.n	80012aa <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80012a6:	f000 f9c9 	bl	800163c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	2000059c 	.word	0x2000059c
 80012b4:	40011000 	.word	0x40011000

080012b8 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012be:	4b14      	ldr	r3, [pc, #80]	; (8001310 <MX_DMA_Init+0x58>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a13      	ldr	r2, [pc, #76]	; (8001310 <MX_DMA_Init+0x58>)
 80012c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b11      	ldr	r3, [pc, #68]	; (8001310 <MX_DMA_Init+0x58>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012d2:	607b      	str	r3, [r7, #4]
 80012d4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012d6:	2200      	movs	r2, #0
 80012d8:	2100      	movs	r1, #0
 80012da:	2038      	movs	r0, #56	; 0x38
 80012dc:	f001 f9f7 	bl	80026ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012e0:	2038      	movs	r0, #56	; 0x38
 80012e2:	f001 fa10 	bl	8002706 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80012e6:	2200      	movs	r2, #0
 80012e8:	2100      	movs	r1, #0
 80012ea:	203b      	movs	r0, #59	; 0x3b
 80012ec:	f001 f9ef 	bl	80026ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80012f0:	203b      	movs	r0, #59	; 0x3b
 80012f2:	f001 fa08 	bl	8002706 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 80012f6:	2200      	movs	r2, #0
 80012f8:	2100      	movs	r1, #0
 80012fa:	2045      	movs	r0, #69	; 0x45
 80012fc:	f001 f9e7 	bl	80026ce <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001300:	2045      	movs	r0, #69	; 0x45
 8001302:	f001 fa00 	bl	8002706 <HAL_NVIC_EnableIRQ>

}
 8001306:	bf00      	nop
 8001308:	3708      	adds	r7, #8
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	40023800 	.word	0x40023800

08001314 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b088      	sub	sp, #32
 8001318:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <MX_FMC_Init+0xbc>)
 800132e:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001332:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001336:	4a27      	ldr	r2, [pc, #156]	; (80013d4 <MX_FMC_Init+0xc0>)
 8001338:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MX_FMC_Init+0xbc>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001342:	2200      	movs	r2, #0
 8001344:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001346:	4b22      	ldr	r3, [pc, #136]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001348:	2204      	movs	r2, #4
 800134a:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <MX_FMC_Init+0xbc>)
 800134e:	2210      	movs	r2, #16
 8001350:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001354:	2200      	movs	r2, #0
 8001356:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001358:	4b1d      	ldr	r3, [pc, #116]	; (80013d0 <MX_FMC_Init+0xbc>)
 800135a:	2200      	movs	r2, #0
 800135c:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800135e:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001360:	2200      	movs	r2, #0
 8001362:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001364:	4b1a      	ldr	r3, [pc, #104]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001366:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800136a:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 800136c:	4b18      	ldr	r3, [pc, #96]	; (80013d0 <MX_FMC_Init+0xbc>)
 800136e:	2200      	movs	r2, #0
 8001370:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001372:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001374:	2200      	movs	r2, #0
 8001376:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001378:	4b15      	ldr	r3, [pc, #84]	; (80013d0 <MX_FMC_Init+0xbc>)
 800137a:	2200      	movs	r2, #0
 800137c:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001380:	2200      	movs	r2, #0
 8001382:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001386:	2200      	movs	r2, #0
 8001388:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_FMC_Init+0xbc>)
 800138c:	2200      	movs	r2, #0
 800138e:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_FMC_Init+0xbc>)
 8001392:	2200      	movs	r2, #0
 8001394:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 5;
 8001396:	2305      	movs	r3, #5
 8001398:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 800139a:	230f      	movs	r3, #15
 800139c:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 8;
 800139e:	2308      	movs	r3, #8
 80013a0:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80013a6:	2310      	movs	r3, #16
 80013a8:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80013aa:	2311      	movs	r3, #17
 80013ac:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 80013ae:	2300      	movs	r3, #0
 80013b0:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80013b2:	1d3b      	adds	r3, r7, #4
 80013b4:	2200      	movs	r2, #0
 80013b6:	4619      	mov	r1, r3
 80013b8:	4805      	ldr	r0, [pc, #20]	; (80013d0 <MX_FMC_Init+0xbc>)
 80013ba:	f006 ff03 	bl	80081c4 <HAL_SRAM_Init>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <MX_FMC_Init+0xb4>
	{
		Error_Handler( );
 80013c4:	f000 f93a 	bl	800163c <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 80013c8:	bf00      	nop
 80013ca:	3720      	adds	r7, #32
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000624 	.word	0x20000624
 80013d4:	a0000104 	.word	0xa0000104

080013d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b08e      	sub	sp, #56	; 0x38
 80013dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
 80013e8:	609a      	str	r2, [r3, #8]
 80013ea:	60da      	str	r2, [r3, #12]
 80013ec:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 80013ee:	4b8b      	ldr	r3, [pc, #556]	; (800161c <MX_GPIO_Init+0x244>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a8a      	ldr	r2, [pc, #552]	; (800161c <MX_GPIO_Init+0x244>)
 80013f4:	f043 0310 	orr.w	r3, r3, #16
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b88      	ldr	r3, [pc, #544]	; (800161c <MX_GPIO_Init+0x244>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0310 	and.w	r3, r3, #16
 8001402:	623b      	str	r3, [r7, #32]
 8001404:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	4b85      	ldr	r3, [pc, #532]	; (800161c <MX_GPIO_Init+0x244>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	4a84      	ldr	r2, [pc, #528]	; (800161c <MX_GPIO_Init+0x244>)
 800140c:	f043 0302 	orr.w	r3, r3, #2
 8001410:	6313      	str	r3, [r2, #48]	; 0x30
 8001412:	4b82      	ldr	r3, [pc, #520]	; (800161c <MX_GPIO_Init+0x244>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	61fb      	str	r3, [r7, #28]
 800141c:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800141e:	4b7f      	ldr	r3, [pc, #508]	; (800161c <MX_GPIO_Init+0x244>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a7e      	ldr	r2, [pc, #504]	; (800161c <MX_GPIO_Init+0x244>)
 8001424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b7c      	ldr	r3, [pc, #496]	; (800161c <MX_GPIO_Init+0x244>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001432:	61bb      	str	r3, [r7, #24]
 8001434:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001436:	4b79      	ldr	r3, [pc, #484]	; (800161c <MX_GPIO_Init+0x244>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a78      	ldr	r2, [pc, #480]	; (800161c <MX_GPIO_Init+0x244>)
 800143c:	f043 0308 	orr.w	r3, r3, #8
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b76      	ldr	r3, [pc, #472]	; (800161c <MX_GPIO_Init+0x244>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0308 	and.w	r3, r3, #8
 800144a:	617b      	str	r3, [r7, #20]
 800144c:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800144e:	4b73      	ldr	r3, [pc, #460]	; (800161c <MX_GPIO_Init+0x244>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a72      	ldr	r2, [pc, #456]	; (800161c <MX_GPIO_Init+0x244>)
 8001454:	f043 0304 	orr.w	r3, r3, #4
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b70      	ldr	r3, [pc, #448]	; (800161c <MX_GPIO_Init+0x244>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0304 	and.w	r3, r3, #4
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	4b6d      	ldr	r3, [pc, #436]	; (800161c <MX_GPIO_Init+0x244>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	4a6c      	ldr	r2, [pc, #432]	; (800161c <MX_GPIO_Init+0x244>)
 800146c:	f043 0301 	orr.w	r3, r3, #1
 8001470:	6313      	str	r3, [r2, #48]	; 0x30
 8001472:	4b6a      	ldr	r3, [pc, #424]	; (800161c <MX_GPIO_Init+0x244>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	f003 0301 	and.w	r3, r3, #1
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 800147e:	4b67      	ldr	r3, [pc, #412]	; (800161c <MX_GPIO_Init+0x244>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	4a66      	ldr	r2, [pc, #408]	; (800161c <MX_GPIO_Init+0x244>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6313      	str	r3, [r2, #48]	; 0x30
 800148a:	4b64      	ldr	r3, [pc, #400]	; (800161c <MX_GPIO_Init+0x244>)
 800148c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 8001496:	4b61      	ldr	r3, [pc, #388]	; (800161c <MX_GPIO_Init+0x244>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a60      	ldr	r2, [pc, #384]	; (800161c <MX_GPIO_Init+0x244>)
 800149c:	f043 0320 	orr.w	r3, r3, #32
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b5e      	ldr	r3, [pc, #376]	; (800161c <MX_GPIO_Init+0x244>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0320 	and.w	r3, r3, #32
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014ae:	4b5b      	ldr	r3, [pc, #364]	; (800161c <MX_GPIO_Init+0x244>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a5a      	ldr	r2, [pc, #360]	; (800161c <MX_GPIO_Init+0x244>)
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b58      	ldr	r3, [pc, #352]	; (800161c <MX_GPIO_Init+0x244>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014c2:	603b      	str	r3, [r7, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 80014c6:	2200      	movs	r2, #0
 80014c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014cc:	4854      	ldr	r0, [pc, #336]	; (8001620 <MX_GPIO_Init+0x248>)
 80014ce:	f001 fde3 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2104      	movs	r1, #4
 80014d6:	4853      	ldr	r0, [pc, #332]	; (8001624 <MX_GPIO_Init+0x24c>)
 80014d8:	f001 fdde 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2140      	movs	r1, #64	; 0x40
 80014e0:	4851      	ldr	r0, [pc, #324]	; (8001628 <MX_GPIO_Init+0x250>)
 80014e2:	f001 fdd9 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	21c0      	movs	r1, #192	; 0xc0
 80014ea:	4850      	ldr	r0, [pc, #320]	; (800162c <MX_GPIO_Init+0x254>)
 80014ec:	f001 fdd4 	bl	8003098 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : WIFI_ENABLE_Pin */
	GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 80014f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014f6:	2301      	movs	r3, #1
 80014f8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014fa:	2300      	movs	r3, #0
 80014fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	2300      	movs	r3, #0
 8001500:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001506:	4619      	mov	r1, r3
 8001508:	4845      	ldr	r0, [pc, #276]	; (8001620 <MX_GPIO_Init+0x248>)
 800150a:	f001 fc01 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 800150e:	f643 4333 	movw	r3, #15411	; 0x3c33
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001514:	2300      	movs	r3, #0
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001520:	4619      	mov	r1, r3
 8001522:	483f      	ldr	r0, [pc, #252]	; (8001620 <MX_GPIO_Init+0x248>)
 8001524:	f001 fbf4 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8001528:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800152e:	2300      	movs	r3, #0
 8001530:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800153a:	4619      	mov	r1, r3
 800153c:	483b      	ldr	r0, [pc, #236]	; (800162c <MX_GPIO_Init+0x254>)
 800153e:	f001 fbe7 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
	GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 8001542:	f248 63e8 	movw	r3, #34536	; 0x86e8
 8001546:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001548:	2300      	movs	r3, #0
 800154a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4836      	ldr	r0, [pc, #216]	; (8001630 <MX_GPIO_Init+0x258>)
 8001558:	f001 fbda 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 800155c:	2340      	movs	r3, #64	; 0x40
 800155e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001560:	2300      	movs	r3, #0
 8001562:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001564:	2300      	movs	r3, #0
 8001566:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800156c:	4619      	mov	r1, r3
 800156e:	4831      	ldr	r0, [pc, #196]	; (8001634 <MX_GPIO_Init+0x25c>)
 8001570:	f001 fbce 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI1 PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 8001574:	230b      	movs	r3, #11
 8001576:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001578:	2300      	movs	r3, #0
 800157a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001580:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001584:	4619      	mov	r1, r3
 8001586:	4827      	ldr	r0, [pc, #156]	; (8001624 <MX_GPIO_Init+0x24c>)
 8001588:	f001 fbc2 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_HOST_VBUF_Pin */
	GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 800158c:	2304      	movs	r3, #4
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a0:	4619      	mov	r1, r3
 80015a2:	4820      	ldr	r0, [pc, #128]	; (8001624 <MX_GPIO_Init+0x24c>)
 80015a4:	f001 fbb4 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80015a8:	23a0      	movs	r3, #160	; 0xa0
 80015aa:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ac:	2300      	movs	r3, #0
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b0:	2300      	movs	r3, #0
 80015b2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b8:	4619      	mov	r1, r3
 80015ba:	481b      	ldr	r0, [pc, #108]	; (8001628 <MX_GPIO_Init+0x250>)
 80015bc:	f001 fba8 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 80015c0:	2340      	movs	r3, #64	; 0x40
 80015c2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c4:	2301      	movs	r3, #1
 80015c6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015cc:	2300      	movs	r3, #0
 80015ce:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80015d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d4:	4619      	mov	r1, r3
 80015d6:	4814      	ldr	r0, [pc, #80]	; (8001628 <MX_GPIO_Init+0x250>)
 80015d8:	f001 fb9a 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 80015dc:	23c0      	movs	r3, #192	; 0xc0
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e0:	2301      	movs	r3, #1
 80015e2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e4:	2300      	movs	r3, #0
 80015e6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e8:	2300      	movs	r3, #0
 80015ea:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f0:	4619      	mov	r1, r3
 80015f2:	480e      	ldr	r0, [pc, #56]	; (800162c <MX_GPIO_Init+0x254>)
 80015f4:	f001 fb8c 	bl	8002d10 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 80015f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001606:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160a:	4619      	mov	r1, r3
 800160c:	480a      	ldr	r0, [pc, #40]	; (8001638 <MX_GPIO_Init+0x260>)
 800160e:	f001 fb7f 	bl	8002d10 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001612:	bf00      	nop
 8001614:	3738      	adds	r7, #56	; 0x38
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40020400 	.word	0x40020400
 8001624:	40022000 	.word	0x40022000
 8001628:	40020800 	.word	0x40020800
 800162c:	40021800 	.word	0x40021800
 8001630:	40020000 	.word	0x40020000
 8001634:	40020c00 	.word	0x40020c00
 8001638:	40021400 	.word	0x40021400

0800163c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001640:	2140      	movs	r1, #64	; 0x40
 8001642:	480a      	ldr	r0, [pc, #40]	; (800166c <Error_Handler+0x30>)
 8001644:	f001 fd41 	bl	80030ca <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001648:	2064      	movs	r0, #100	; 0x64
 800164a:	f000 fcad 	bl	8001fa8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800164e:	2180      	movs	r1, #128	; 0x80
 8001650:	4806      	ldr	r0, [pc, #24]	; (800166c <Error_Handler+0x30>)
 8001652:	f001 fd3a 	bl	80030ca <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001656:	2064      	movs	r0, #100	; 0x64
 8001658:	f000 fca6 	bl	8001fa8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800165c:	2140      	movs	r1, #64	; 0x40
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <Error_Handler+0x34>)
 8001660:	f001 fd33 	bl	80030ca <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 8001664:	2064      	movs	r0, #100	; 0x64
 8001666:	f000 fc9f 	bl	8001fa8 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800166a:	e7e9      	b.n	8001640 <Error_Handler+0x4>
 800166c:	40021800 	.word	0x40021800
 8001670:	40020800 	.word	0x40020800

08001674 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b0f      	ldr	r3, [pc, #60]	; (80016b8 <HAL_MspInit+0x44>)
 800167c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <HAL_MspInit+0x44>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6413      	str	r3, [r2, #64]	; 0x40
 8001686:	4b0c      	ldr	r3, [pc, #48]	; (80016b8 <HAL_MspInit+0x44>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	607b      	str	r3, [r7, #4]
 8001690:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001692:	4b09      	ldr	r3, [pc, #36]	; (80016b8 <HAL_MspInit+0x44>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a08      	ldr	r2, [pc, #32]	; (80016b8 <HAL_MspInit+0x44>)
 8001698:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b06      	ldr	r3, [pc, #24]	; (80016b8 <HAL_MspInit+0x44>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016a6:	603b      	str	r3, [r7, #0]
 80016a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	370c      	adds	r7, #12
 80016ae:	46bd      	mov	sp, r7
 80016b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800

080016bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08a      	sub	sp, #40	; 0x28
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a2d      	ldr	r2, [pc, #180]	; (8001790 <HAL_ADC_MspInit+0xd4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d153      	bne.n	8001786 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80016de:	4b2d      	ldr	r3, [pc, #180]	; (8001794 <HAL_ADC_MspInit+0xd8>)
 80016e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016e2:	4a2c      	ldr	r2, [pc, #176]	; (8001794 <HAL_ADC_MspInit+0xd8>)
 80016e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ea:	4b2a      	ldr	r3, [pc, #168]	; (8001794 <HAL_ADC_MspInit+0xd8>)
 80016ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f6:	4b27      	ldr	r3, [pc, #156]	; (8001794 <HAL_ADC_MspInit+0xd8>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	4a26      	ldr	r2, [pc, #152]	; (8001794 <HAL_ADC_MspInit+0xd8>)
 80016fc:	f043 0301 	orr.w	r3, r3, #1
 8001700:	6313      	str	r3, [r2, #48]	; 0x30
 8001702:	4b24      	ldr	r3, [pc, #144]	; (8001794 <HAL_ADC_MspInit+0xd8>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	f003 0301 	and.w	r3, r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
 800170c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800170e:	2305      	movs	r3, #5
 8001710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001712:	2303      	movs	r3, #3
 8001714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001716:	2300      	movs	r3, #0
 8001718:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	481d      	ldr	r0, [pc, #116]	; (8001798 <HAL_ADC_MspInit+0xdc>)
 8001722:	f001 faf5 	bl	8002d10 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001726:	4b1d      	ldr	r3, [pc, #116]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001728:	4a1d      	ldr	r2, [pc, #116]	; (80017a0 <HAL_ADC_MspInit+0xe4>)
 800172a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800172c:	4b1b      	ldr	r3, [pc, #108]	; (800179c <HAL_ADC_MspInit+0xe0>)
 800172e:	2200      	movs	r2, #0
 8001730:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001732:	4b1a      	ldr	r3, [pc, #104]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001738:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_ADC_MspInit+0xe0>)
 800173a:	2200      	movs	r2, #0
 800173c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800173e:	4b17      	ldr	r3, [pc, #92]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001740:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001744:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001748:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800174c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800174e:	4b13      	ldr	r3, [pc, #76]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001750:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001754:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001758:	f44f 7280 	mov.w	r2, #256	; 0x100
 800175c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800175e:	4b0f      	ldr	r3, [pc, #60]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001760:	2200      	movs	r2, #0
 8001762:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001764:	4b0d      	ldr	r3, [pc, #52]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800176a:	480c      	ldr	r0, [pc, #48]	; (800179c <HAL_ADC_MspInit+0xe0>)
 800176c:	f000 ffe6 	bl	800273c <HAL_DMA_Init>
 8001770:	4603      	mov	r3, r0
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 8001776:	f7ff ff61 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4a07      	ldr	r2, [pc, #28]	; (800179c <HAL_ADC_MspInit+0xe0>)
 800177e:	639a      	str	r2, [r3, #56]	; 0x38
 8001780:	4a06      	ldr	r2, [pc, #24]	; (800179c <HAL_ADC_MspInit+0xe0>)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001786:	bf00      	nop
 8001788:	3728      	adds	r7, #40	; 0x28
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40012000 	.word	0x40012000
 8001794:	40023800 	.word	0x40023800
 8001798:	40020000 	.word	0x40020000
 800179c:	20000360 	.word	0x20000360
 80017a0:	40026410 	.word	0x40026410

080017a4 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0ac      	sub	sp, #176	; 0xb0
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017bc:	f107 0318 	add.w	r3, r7, #24
 80017c0:	2284      	movs	r2, #132	; 0x84
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f010 faf1 	bl	8011dac <memset>
  if(hsd->Instance==SDMMC1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a70      	ldr	r2, [pc, #448]	; (8001990 <HAL_SD_MspInit+0x1ec>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	f040 80d8 	bne.w	8001986 <HAL_SD_MspInit+0x1e2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 80017d6:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 80017da:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80017dc:	2300      	movs	r3, #0
 80017de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 80017e2:	2300      	movs	r3, #0
 80017e4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017e8:	f107 0318 	add.w	r3, r7, #24
 80017ec:	4618      	mov	r0, r3
 80017ee:	f005 f9a1 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 80017f8:	f7ff ff20 	bl	800163c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 80017fc:	4b65      	ldr	r3, [pc, #404]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 80017fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001800:	4a64      	ldr	r2, [pc, #400]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 8001802:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001806:	6453      	str	r3, [r2, #68]	; 0x44
 8001808:	4b62      	ldr	r3, [pc, #392]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 800180a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001810:	617b      	str	r3, [r7, #20]
 8001812:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001814:	4b5f      	ldr	r3, [pc, #380]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 8001816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001818:	4a5e      	ldr	r2, [pc, #376]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 800181a:	f043 0304 	orr.w	r3, r3, #4
 800181e:	6313      	str	r3, [r2, #48]	; 0x30
 8001820:	4b5c      	ldr	r3, [pc, #368]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 8001822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	613b      	str	r3, [r7, #16]
 800182a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 800182e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 8001832:	f043 0308 	orr.w	r3, r3, #8
 8001836:	6313      	str	r3, [r2, #48]	; 0x30
 8001838:	4b56      	ldr	r3, [pc, #344]	; (8001994 <HAL_SD_MspInit+0x1f0>)
 800183a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001844:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001848:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	2302      	movs	r3, #2
 800184e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001852:	2300      	movs	r3, #0
 8001854:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	2303      	movs	r3, #3
 800185a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800185e:	230c      	movs	r3, #12
 8001860:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001864:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001868:	4619      	mov	r1, r3
 800186a:	484b      	ldr	r0, [pc, #300]	; (8001998 <HAL_SD_MspInit+0x1f4>)
 800186c:	f001 fa50 	bl	8002d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001870:	2304      	movs	r3, #4
 8001872:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001876:	2302      	movs	r3, #2
 8001878:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800187c:	2300      	movs	r3, #0
 800187e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001882:	2303      	movs	r3, #3
 8001884:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001888:	230c      	movs	r3, #12
 800188a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800188e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001892:	4619      	mov	r1, r3
 8001894:	4841      	ldr	r0, [pc, #260]	; (800199c <HAL_SD_MspInit+0x1f8>)
 8001896:	f001 fa3b 	bl	8002d10 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 800189a:	4b41      	ldr	r3, [pc, #260]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 800189c:	4a41      	ldr	r2, [pc, #260]	; (80019a4 <HAL_SD_MspInit+0x200>)
 800189e:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80018a0:	4b3f      	ldr	r3, [pc, #252]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a6:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018a8:	4b3d      	ldr	r3, [pc, #244]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018ae:	4b3c      	ldr	r3, [pc, #240]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018b4:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018ba:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80018bc:	4b38      	ldr	r3, [pc, #224]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018be:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80018c2:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80018ca:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80018cc:	4b34      	ldr	r3, [pc, #208]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018ce:	2220      	movs	r2, #32
 80018d0:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018d2:	4b33      	ldr	r3, [pc, #204]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80018d8:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018da:	2204      	movs	r2, #4
 80018dc:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80018de:	4b30      	ldr	r3, [pc, #192]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018e0:	2203      	movs	r2, #3
 80018e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 80018e4:	4b2e      	ldr	r3, [pc, #184]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018e6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80018ea:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 80018ec:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018ee:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80018f2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 80018f4:	482a      	ldr	r0, [pc, #168]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 80018f6:	f000 ff21 	bl	800273c <HAL_DMA_Init>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001900:	f7ff fe9c 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a26      	ldr	r2, [pc, #152]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 8001908:	641a      	str	r2, [r3, #64]	; 0x40
 800190a:	4a25      	ldr	r2, [pc, #148]	; (80019a0 <HAL_SD_MspInit+0x1fc>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001910:	4b25      	ldr	r3, [pc, #148]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001912:	4a26      	ldr	r2, [pc, #152]	; (80019ac <HAL_SD_MspInit+0x208>)
 8001914:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001916:	4b24      	ldr	r3, [pc, #144]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800191c:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800191e:	4b22      	ldr	r3, [pc, #136]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001920:	2240      	movs	r2, #64	; 0x40
 8001922:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001924:	4b20      	ldr	r3, [pc, #128]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001926:	2200      	movs	r2, #0
 8001928:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800192a:	4b1f      	ldr	r3, [pc, #124]	; (80019a8 <HAL_SD_MspInit+0x204>)
 800192c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001930:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001932:	4b1d      	ldr	r3, [pc, #116]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001934:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001938:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800193a:	4b1b      	ldr	r3, [pc, #108]	; (80019a8 <HAL_SD_MspInit+0x204>)
 800193c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001940:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001942:	4b19      	ldr	r3, [pc, #100]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001944:	2220      	movs	r2, #32
 8001946:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001948:	4b17      	ldr	r3, [pc, #92]	; (80019a8 <HAL_SD_MspInit+0x204>)
 800194a:	2200      	movs	r2, #0
 800194c:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800194e:	4b16      	ldr	r3, [pc, #88]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001950:	2204      	movs	r2, #4
 8001952:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001956:	2203      	movs	r2, #3
 8001958:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 800195a:	4b13      	ldr	r3, [pc, #76]	; (80019a8 <HAL_SD_MspInit+0x204>)
 800195c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001960:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001964:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001968:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 800196a:	480f      	ldr	r0, [pc, #60]	; (80019a8 <HAL_SD_MspInit+0x204>)
 800196c:	f000 fee6 	bl	800273c <HAL_DMA_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001976:	f7ff fe61 	bl	800163c <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a0a      	ldr	r2, [pc, #40]	; (80019a8 <HAL_SD_MspInit+0x204>)
 800197e:	63da      	str	r2, [r3, #60]	; 0x3c
 8001980:	4a09      	ldr	r2, [pc, #36]	; (80019a8 <HAL_SD_MspInit+0x204>)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001986:	bf00      	nop
 8001988:	37b0      	adds	r7, #176	; 0xb0
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40012c00 	.word	0x40012c00
 8001994:	40023800 	.word	0x40023800
 8001998:	40020800 	.word	0x40020800
 800199c:	40020c00 	.word	0x40020c00
 80019a0:	20000444 	.word	0x20000444
 80019a4:	40026458 	.word	0x40026458
 80019a8:	200004a4 	.word	0x200004a4
 80019ac:	400264a0 	.word	0x400264a0

080019b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a13      	ldr	r2, [pc, #76]	; (8001a0c <HAL_TIM_Base_MspInit+0x5c>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d10c      	bne.n	80019dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019c2:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	4a12      	ldr	r2, [pc, #72]	; (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	6453      	str	r3, [r2, #68]	; 0x44
 80019ce:	4b10      	ldr	r3, [pc, #64]	; (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	f003 0301 	and.w	r3, r3, #1
 80019d6:	60fb      	str	r3, [r7, #12]
 80019d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80019da:	e010      	b.n	80019fe <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <HAL_TIM_Base_MspInit+0x64>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d10b      	bne.n	80019fe <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 80019e6:	4b0a      	ldr	r3, [pc, #40]	; (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ea:	4a09      	ldr	r2, [pc, #36]	; (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019f0:	6453      	str	r3, [r2, #68]	; 0x44
 80019f2:	4b07      	ldr	r3, [pc, #28]	; (8001a10 <HAL_TIM_Base_MspInit+0x60>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019fa:	60bb      	str	r3, [r7, #8]
 80019fc:	68bb      	ldr	r3, [r7, #8]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40010000 	.word	0x40010000
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40014800 	.word	0x40014800

08001a18 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b088      	sub	sp, #32
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 030c 	add.w	r3, r7, #12
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a11      	ldr	r2, [pc, #68]	; (8001a7c <HAL_TIM_MspPostInit+0x64>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d11b      	bne.n	8001a72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a3a:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <HAL_TIM_MspPostInit+0x68>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a10      	ldr	r2, [pc, #64]	; (8001a80 <HAL_TIM_MspPostInit+0x68>)
 8001a40:	f043 0320 	orr.w	r3, r3, #32
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <HAL_TIM_MspPostInit+0x68>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0320 	and.w	r3, r3, #32
 8001a4e:	60bb      	str	r3, [r7, #8]
 8001a50:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a56:	2302      	movs	r3, #2
 8001a58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001a62:	2303      	movs	r3, #3
 8001a64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001a66:	f107 030c 	add.w	r3, r7, #12
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4805      	ldr	r0, [pc, #20]	; (8001a84 <HAL_TIM_MspPostInit+0x6c>)
 8001a6e:	f001 f94f 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40014800 	.word	0x40014800
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40021400 	.word	0x40021400

08001a88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b0aa      	sub	sp, #168	; 0xa8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a90:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
 8001a9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2284      	movs	r2, #132	; 0x84
 8001aa6:	2100      	movs	r1, #0
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f010 f97f 	bl	8011dac <memset>
  if(huart->Instance==USART1)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	4a21      	ldr	r2, [pc, #132]	; (8001b38 <HAL_UART_MspInit+0xb0>)
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d13a      	bne.n	8001b2e <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ab8:	2340      	movs	r3, #64	; 0x40
 8001aba:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001abc:	2300      	movs	r3, #0
 8001abe:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ac0:	f107 0310 	add.w	r3, r7, #16
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f005 f835 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ad0:	f7ff fdb4 	bl	800163c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <HAL_UART_MspInit+0xb4>)
 8001ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad8:	4a18      	ldr	r2, [pc, #96]	; (8001b3c <HAL_UART_MspInit+0xb4>)
 8001ada:	f043 0310 	orr.w	r3, r3, #16
 8001ade:	6453      	str	r3, [r2, #68]	; 0x44
 8001ae0:	4b16      	ldr	r3, [pc, #88]	; (8001b3c <HAL_UART_MspInit+0xb4>)
 8001ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ae4:	f003 0310 	and.w	r3, r3, #16
 8001ae8:	60fb      	str	r3, [r7, #12]
 8001aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aec:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_UART_MspInit+0xb4>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_UART_MspInit+0xb4>)
 8001af2:	f043 0302 	orr.w	r3, r3, #2
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_UART_MspInit+0xb4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0302 	and.w	r3, r3, #2
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 8001b04:	23c0      	movs	r3, #192	; 0xc0
 8001b06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b0a:	2302      	movs	r3, #2
 8001b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b10:	2300      	movs	r3, #0
 8001b12:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b16:	2303      	movs	r3, #3
 8001b18:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001b1c:	2307      	movs	r3, #7
 8001b1e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b22:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b26:	4619      	mov	r1, r3
 8001b28:	4805      	ldr	r0, [pc, #20]	; (8001b40 <HAL_UART_MspInit+0xb8>)
 8001b2a:	f001 f8f1 	bl	8002d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001b2e:	bf00      	nop
 8001b30:	37a8      	adds	r7, #168	; 0xa8
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	40011000 	.word	0x40011000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40020400 	.word	0x40020400

08001b44 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b086      	sub	sp, #24
 8001b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001b4a:	1d3b      	adds	r3, r7, #4
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	605a      	str	r2, [r3, #4]
 8001b52:	609a      	str	r2, [r3, #8]
 8001b54:	60da      	str	r2, [r3, #12]
 8001b56:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001b58:	4b2b      	ldr	r3, [pc, #172]	; (8001c08 <HAL_FMC_MspInit+0xc4>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d14e      	bne.n	8001bfe <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8001b60:	4b29      	ldr	r3, [pc, #164]	; (8001c08 <HAL_FMC_MspInit+0xc4>)
 8001b62:	2201      	movs	r2, #1
 8001b64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001b66:	4b29      	ldr	r3, [pc, #164]	; (8001c0c <HAL_FMC_MspInit+0xc8>)
 8001b68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6a:	4a28      	ldr	r2, [pc, #160]	; (8001c0c <HAL_FMC_MspInit+0xc8>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6393      	str	r3, [r2, #56]	; 0x38
 8001b72:	4b26      	ldr	r3, [pc, #152]	; (8001c0c <HAL_FMC_MspInit+0xc8>)
 8001b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	603b      	str	r3, [r7, #0]
 8001b7c:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8001b7e:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8001b82:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b84:	2302      	movs	r3, #2
 8001b86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001b90:	230c      	movs	r3, #12
 8001b92:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	4619      	mov	r1, r3
 8001b98:	481d      	ldr	r0, [pc, #116]	; (8001c10 <HAL_FMC_MspInit+0xcc>)
 8001b9a:	f001 f8b9 	bl	8002d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 8001b9e:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001ba2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ba4:	2302      	movs	r3, #2
 8001ba6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bac:	2303      	movs	r3, #3
 8001bae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bb0:	230c      	movs	r3, #12
 8001bb2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bb4:	1d3b      	adds	r3, r7, #4
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4816      	ldr	r0, [pc, #88]	; (8001c14 <HAL_FMC_MspInit+0xd0>)
 8001bba:	f001 f8a9 	bl	8002d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8001bbe:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001bc2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bcc:	2303      	movs	r3, #3
 8001bce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bd0:	230c      	movs	r3, #12
 8001bd2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	4619      	mov	r1, r3
 8001bd8:	480f      	ldr	r0, [pc, #60]	; (8001c18 <HAL_FMC_MspInit+0xd4>)
 8001bda:	f001 f899 	bl	8002d10 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001bde:	233f      	movs	r3, #63	; 0x3f
 8001be0:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be2:	2302      	movs	r3, #2
 8001be4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be6:	2300      	movs	r3, #0
 8001be8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bea:	2303      	movs	r3, #3
 8001bec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001bee:	230c      	movs	r3, #12
 8001bf0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001bf2:	1d3b      	adds	r3, r7, #4
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4809      	ldr	r0, [pc, #36]	; (8001c1c <HAL_FMC_MspInit+0xd8>)
 8001bf8:	f001 f88a 	bl	8002d10 <HAL_GPIO_Init>
 8001bfc:	e000      	b.n	8001c00 <HAL_FMC_MspInit+0xbc>
    return;
 8001bfe:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c00:	3718      	adds	r7, #24
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000670 	.word	0x20000670
 8001c0c:	40023800 	.word	0x40023800
 8001c10:	40021000 	.word	0x40021000
 8001c14:	40020c00 	.word	0x40020c00
 8001c18:	40021400 	.word	0x40021400
 8001c1c:	40021800 	.word	0x40021800

08001c20 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001c28:	f7ff ff8c 	bl	8001b44 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001c2c:	bf00      	nop
 8001c2e:	3708      	adds	r7, #8
 8001c30:	46bd      	mov	sp, r7
 8001c32:	bd80      	pop	{r7, pc}

08001c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c34:	b480      	push	{r7}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c38:	e7fe      	b.n	8001c38 <NMI_Handler+0x4>

08001c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3a:	b480      	push	{r7}
 8001c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c3e:	e7fe      	b.n	8001c3e <HardFault_Handler+0x4>

08001c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c40:	b480      	push	{r7}
 8001c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c44:	e7fe      	b.n	8001c44 <MemManage_Handler+0x4>

08001c46 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c46:	b480      	push	{r7}
 8001c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4a:	e7fe      	b.n	8001c4a <BusFault_Handler+0x4>

08001c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <UsageFault_Handler+0x4>

08001c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c56:	bf00      	nop
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c60:	b480      	push	{r7}
 8001c62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c64:	bf00      	nop
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c72:	bf00      	nop
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c80:	f000 f972 	bl	8001f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c8c:	4802      	ldr	r0, [pc, #8]	; (8001c98 <DMA2_Stream0_IRQHandler+0x10>)
 8001c8e:	f000 fe03 	bl	8002898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000360 	.word	0x20000360

08001c9c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001ca0:	4802      	ldr	r0, [pc, #8]	; (8001cac <DMA2_Stream3_IRQHandler+0x10>)
 8001ca2:	f000 fdf9 	bl	8002898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001ca6:	bf00      	nop
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	20000444 	.word	0x20000444

08001cb0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001cb4:	4802      	ldr	r0, [pc, #8]	; (8001cc0 <OTG_FS_IRQHandler+0x10>)
 8001cb6:	f001 fc8d 	bl	80035d4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001cba:	bf00      	nop
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	20002454 	.word	0x20002454

08001cc4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001cc8:	4802      	ldr	r0, [pc, #8]	; (8001cd4 <DMA2_Stream6_IRQHandler+0x10>)
 8001cca:	f000 fde5 	bl	8002898 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001cce:	bf00      	nop
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	200004a4 	.word	0x200004a4

08001cd8 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001cdc:	4802      	ldr	r0, [pc, #8]	; (8001ce8 <OTG_HS_IRQHandler+0x10>)
 8001cde:	f003 f88f 	bl	8004e00 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001ce2:	bf00      	nop
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	20001b70 	.word	0x20001b70

08001cec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cec:	b480      	push	{r7}
 8001cee:	af00      	add	r7, sp, #0
  return 1;
 8001cf0:	2301      	movs	r3, #1
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <_kill>:

int _kill(int pid, int sig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d06:	f010 f817 	bl	8011d38 <__errno>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe7 	bl	8001cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d2e:	e7fe      	b.n	8001d2e <_exit+0x12>

08001d30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	60f8      	str	r0, [r7, #12]
 8001d38:	60b9      	str	r1, [r7, #8]
 8001d3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3c:	2300      	movs	r3, #0
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	e00a      	b.n	8001d58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d42:	f3af 8000 	nop.w
 8001d46:	4601      	mov	r1, r0
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	1c5a      	adds	r2, r3, #1
 8001d4c:	60ba      	str	r2, [r7, #8]
 8001d4e:	b2ca      	uxtb	r2, r1
 8001d50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf0      	blt.n	8001d42 <_read+0x12>
  }

  return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d6a:	b580      	push	{r7, lr}
 8001d6c:	b086      	sub	sp, #24
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	60f8      	str	r0, [r7, #12]
 8001d72:	60b9      	str	r1, [r7, #8]
 8001d74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d76:	2300      	movs	r3, #0
 8001d78:	617b      	str	r3, [r7, #20]
 8001d7a:	e009      	b.n	8001d90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d7c:	68bb      	ldr	r3, [r7, #8]
 8001d7e:	1c5a      	adds	r2, r3, #1
 8001d80:	60ba      	str	r2, [r7, #8]
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d8a:	697b      	ldr	r3, [r7, #20]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
 8001d90:	697a      	ldr	r2, [r7, #20]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	dbf1      	blt.n	8001d7c <_write+0x12>
  }
  return len;
 8001d98:	687b      	ldr	r3, [r7, #4]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	3718      	adds	r7, #24
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <_close>:

int _close(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001daa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr

08001dba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001dba:	b480      	push	{r7}
 8001dbc:	b083      	sub	sp, #12
 8001dbe:	af00      	add	r7, sp, #0
 8001dc0:	6078      	str	r0, [r7, #4]
 8001dc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001dca:	605a      	str	r2, [r3, #4]
  return 0;
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	370c      	adds	r7, #12
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr

08001dda <_isatty>:

int _isatty(int file)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b083      	sub	sp, #12
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001de2:	2301      	movs	r3, #1
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	370c      	adds	r7, #12
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b085      	sub	sp, #20
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	60f8      	str	r0, [r7, #12]
 8001df8:	60b9      	str	r1, [r7, #8]
 8001dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3714      	adds	r7, #20
 8001e02:	46bd      	mov	sp, r7
 8001e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e08:	4770      	bx	lr
	...

08001e0c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b086      	sub	sp, #24
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e14:	4a14      	ldr	r2, [pc, #80]	; (8001e68 <_sbrk+0x5c>)
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <_sbrk+0x60>)
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e20:	4b13      	ldr	r3, [pc, #76]	; (8001e70 <_sbrk+0x64>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d102      	bne.n	8001e2e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e28:	4b11      	ldr	r3, [pc, #68]	; (8001e70 <_sbrk+0x64>)
 8001e2a:	4a12      	ldr	r2, [pc, #72]	; (8001e74 <_sbrk+0x68>)
 8001e2c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e2e:	4b10      	ldr	r3, [pc, #64]	; (8001e70 <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	693a      	ldr	r2, [r7, #16]
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d207      	bcs.n	8001e4c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e3c:	f00f ff7c 	bl	8011d38 <__errno>
 8001e40:	4603      	mov	r3, r0
 8001e42:	220c      	movs	r2, #12
 8001e44:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295
 8001e4a:	e009      	b.n	8001e60 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e4c:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <_sbrk+0x64>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <_sbrk+0x64>)
 8001e54:	681a      	ldr	r2, [r3, #0]
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	4413      	add	r3, r2
 8001e5a:	4a05      	ldr	r2, [pc, #20]	; (8001e70 <_sbrk+0x64>)
 8001e5c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3718      	adds	r7, #24
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	20050000 	.word	0x20050000
 8001e6c:	00000400 	.word	0x00000400
 8001e70:	20000674 	.word	0x20000674
 8001e74:	20002768 	.word	0x20002768

08001e78 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <SystemInit+0x20>)
 8001e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e82:	4a05      	ldr	r2, [pc, #20]	; (8001e98 <SystemInit+0x20>)
 8001e84:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e88:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e8c:	bf00      	nop
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e94:	4770      	bx	lr
 8001e96:	bf00      	nop
 8001e98:	e000ed00 	.word	0xe000ed00

08001e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ed4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ea0:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001ea2:	490e      	ldr	r1, [pc, #56]	; (8001edc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ea4:	4a0e      	ldr	r2, [pc, #56]	; (8001ee0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ea8:	e002      	b.n	8001eb0 <LoopCopyDataInit>

08001eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001eae:	3304      	adds	r3, #4

08001eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001eb4:	d3f9      	bcc.n	8001eaa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001eb6:	4a0b      	ldr	r2, [pc, #44]	; (8001ee4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001eb8:	4c0b      	ldr	r4, [pc, #44]	; (8001ee8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ebc:	e001      	b.n	8001ec2 <LoopFillZerobss>

08001ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ec0:	3204      	adds	r2, #4

08001ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ec4:	d3fb      	bcc.n	8001ebe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ec6:	f7ff ffd7 	bl	8001e78 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eca:	f00f ff3b 	bl	8011d44 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ece:	f7ff f80d 	bl	8000eec <main>
  bx  lr    
 8001ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ed4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001edc:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8001ee0:	08014c5c 	.word	0x08014c5c
  ldr r2, =_sbss
 8001ee4:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8001ee8:	20002768 	.word	0x20002768

08001eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eec:	e7fe      	b.n	8001eec <ADC_IRQHandler>

08001eee <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eee:	b580      	push	{r7, lr}
 8001ef0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef2:	2003      	movs	r0, #3
 8001ef4:	f000 fbe0 	bl	80026b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ef8:	200f      	movs	r0, #15
 8001efa:	f000 f805 	bl	8001f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001efe:	f7ff fbb9 	bl	8001674 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f02:	2300      	movs	r3, #0
}
 8001f04:	4618      	mov	r0, r3
 8001f06:	bd80      	pop	{r7, pc}

08001f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b082      	sub	sp, #8
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f10:	4b12      	ldr	r3, [pc, #72]	; (8001f5c <HAL_InitTick+0x54>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4b12      	ldr	r3, [pc, #72]	; (8001f60 <HAL_InitTick+0x58>)
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4619      	mov	r1, r3
 8001f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fbfb 	bl	8002722 <HAL_SYSTICK_Config>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00e      	b.n	8001f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2b0f      	cmp	r3, #15
 8001f3a:	d80a      	bhi.n	8001f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f000 fbc3 	bl	80026ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f48:	4a06      	ldr	r2, [pc, #24]	; (8001f64 <HAL_InitTick+0x5c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	e000      	b.n	8001f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3708      	adds	r7, #8
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	20000000 	.word	0x20000000
 8001f60:	20000008 	.word	0x20000008
 8001f64:	20000004 	.word	0x20000004

08001f68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f6c:	4b06      	ldr	r3, [pc, #24]	; (8001f88 <HAL_IncTick+0x20>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	461a      	mov	r2, r3
 8001f72:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <HAL_IncTick+0x24>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4413      	add	r3, r2
 8001f78:	4a04      	ldr	r2, [pc, #16]	; (8001f8c <HAL_IncTick+0x24>)
 8001f7a:	6013      	str	r3, [r2, #0]
}
 8001f7c:	bf00      	nop
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000008 	.word	0x20000008
 8001f8c:	20000678 	.word	0x20000678

08001f90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  return uwTick;
 8001f94:	4b03      	ldr	r3, [pc, #12]	; (8001fa4 <HAL_GetTick+0x14>)
 8001f96:	681b      	ldr	r3, [r3, #0]
}
 8001f98:	4618      	mov	r0, r3
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	20000678 	.word	0x20000678

08001fa8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb0:	f7ff ffee 	bl	8001f90 <HAL_GetTick>
 8001fb4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc0:	d005      	beq.n	8001fce <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fc2:	4b0a      	ldr	r3, [pc, #40]	; (8001fec <HAL_Delay+0x44>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	4413      	add	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001fce:	bf00      	nop
 8001fd0:	f7ff ffde 	bl	8001f90 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d8f7      	bhi.n	8001fd0 <HAL_Delay+0x28>
  {
  }
}
 8001fe0:	bf00      	nop
 8001fe2:	bf00      	nop
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	20000008 	.word	0x20000008

08001ff0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002002:	2301      	movs	r3, #1
 8002004:	e031      	b.n	800206a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	2b00      	cmp	r3, #0
 800200c:	d109      	bne.n	8002022 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	f7ff fb54 	bl	80016bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2200      	movs	r2, #0
 800201e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 0310 	and.w	r3, r3, #16
 800202a:	2b00      	cmp	r3, #0
 800202c:	d116      	bne.n	800205c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002032:	4b10      	ldr	r3, [pc, #64]	; (8002074 <HAL_ADC_Init+0x84>)
 8002034:	4013      	ands	r3, r2
 8002036:	f043 0202 	orr.w	r2, r3, #2
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f970 	bl	8002324 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800204e:	f023 0303 	bic.w	r3, r3, #3
 8002052:	f043 0201 	orr.w	r2, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	641a      	str	r2, [r3, #64]	; 0x40
 800205a:	e001      	b.n	8002060 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2200      	movs	r2, #0
 8002064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002068:	7bfb      	ldrb	r3, [r7, #15]
}
 800206a:	4618      	mov	r0, r3
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	ffffeefd 	.word	0xffffeefd

08002078 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800208c:	2b01      	cmp	r3, #1
 800208e:	d101      	bne.n	8002094 <HAL_ADC_ConfigChannel+0x1c>
 8002090:	2302      	movs	r3, #2
 8002092:	e136      	b.n	8002302 <HAL_ADC_ConfigChannel+0x28a>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	2201      	movs	r2, #1
 8002098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2b09      	cmp	r3, #9
 80020a2:	d93a      	bls.n	800211a <HAL_ADC_ConfigChannel+0xa2>
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80020ac:	d035      	beq.n	800211a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	68d9      	ldr	r1, [r3, #12]
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	461a      	mov	r2, r3
 80020bc:	4613      	mov	r3, r2
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	4413      	add	r3, r2
 80020c2:	3b1e      	subs	r3, #30
 80020c4:	2207      	movs	r2, #7
 80020c6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ca:	43da      	mvns	r2, r3
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	400a      	ands	r2, r1
 80020d2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a8d      	ldr	r2, [pc, #564]	; (8002310 <HAL_ADC_ConfigChannel+0x298>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d10a      	bne.n	80020f4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68d9      	ldr	r1, [r3, #12]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	689b      	ldr	r3, [r3, #8]
 80020e8:	061a      	lsls	r2, r3, #24
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	430a      	orrs	r2, r1
 80020f0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f2:	e035      	b.n	8002160 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	68d9      	ldr	r1, [r3, #12]
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689a      	ldr	r2, [r3, #8]
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	b29b      	uxth	r3, r3
 8002104:	4618      	mov	r0, r3
 8002106:	4603      	mov	r3, r0
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	4403      	add	r3, r0
 800210c:	3b1e      	subs	r3, #30
 800210e:	409a      	lsls	r2, r3
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	430a      	orrs	r2, r1
 8002116:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002118:	e022      	b.n	8002160 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	b29b      	uxth	r3, r3
 8002126:	461a      	mov	r2, r3
 8002128:	4613      	mov	r3, r2
 800212a:	005b      	lsls	r3, r3, #1
 800212c:	4413      	add	r3, r2
 800212e:	2207      	movs	r2, #7
 8002130:	fa02 f303 	lsl.w	r3, r2, r3
 8002134:	43da      	mvns	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	400a      	ands	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6919      	ldr	r1, [r3, #16]
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	b29b      	uxth	r3, r3
 800214e:	4618      	mov	r0, r3
 8002150:	4603      	mov	r3, r0
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4403      	add	r3, r0
 8002156:	409a      	lsls	r2, r3
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	430a      	orrs	r2, r1
 800215e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b06      	cmp	r3, #6
 8002166:	d824      	bhi.n	80021b2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	685a      	ldr	r2, [r3, #4]
 8002172:	4613      	mov	r3, r2
 8002174:	009b      	lsls	r3, r3, #2
 8002176:	4413      	add	r3, r2
 8002178:	3b05      	subs	r3, #5
 800217a:	221f      	movs	r2, #31
 800217c:	fa02 f303 	lsl.w	r3, r2, r3
 8002180:	43da      	mvns	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	400a      	ands	r2, r1
 8002188:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b29b      	uxth	r3, r3
 8002196:	4618      	mov	r0, r3
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685a      	ldr	r2, [r3, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	4413      	add	r3, r2
 80021a2:	3b05      	subs	r3, #5
 80021a4:	fa00 f203 	lsl.w	r2, r0, r3
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	430a      	orrs	r2, r1
 80021ae:	635a      	str	r2, [r3, #52]	; 0x34
 80021b0:	e04c      	b.n	800224c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80021b2:	683b      	ldr	r3, [r7, #0]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	2b0c      	cmp	r3, #12
 80021b8:	d824      	bhi.n	8002204 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	685a      	ldr	r2, [r3, #4]
 80021c4:	4613      	mov	r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	4413      	add	r3, r2
 80021ca:	3b23      	subs	r3, #35	; 0x23
 80021cc:	221f      	movs	r2, #31
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	43da      	mvns	r2, r3
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	400a      	ands	r2, r1
 80021da:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	b29b      	uxth	r3, r3
 80021e8:	4618      	mov	r0, r3
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	4613      	mov	r3, r2
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	3b23      	subs	r3, #35	; 0x23
 80021f6:	fa00 f203 	lsl.w	r2, r0, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	430a      	orrs	r2, r1
 8002200:	631a      	str	r2, [r3, #48]	; 0x30
 8002202:	e023      	b.n	800224c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685a      	ldr	r2, [r3, #4]
 800220e:	4613      	mov	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	4413      	add	r3, r2
 8002214:	3b41      	subs	r3, #65	; 0x41
 8002216:	221f      	movs	r2, #31
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	43da      	mvns	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	400a      	ands	r2, r1
 8002224:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	b29b      	uxth	r3, r3
 8002232:	4618      	mov	r0, r3
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685a      	ldr	r2, [r3, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	4413      	add	r3, r2
 800223e:	3b41      	subs	r3, #65	; 0x41
 8002240:	fa00 f203 	lsl.w	r2, r0, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	430a      	orrs	r2, r1
 800224a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a30      	ldr	r2, [pc, #192]	; (8002314 <HAL_ADC_ConfigChannel+0x29c>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d10a      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1f4>
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800225e:	d105      	bne.n	800226c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002260:	4b2d      	ldr	r3, [pc, #180]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 8002262:	685b      	ldr	r3, [r3, #4]
 8002264:	4a2c      	ldr	r2, [pc, #176]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 8002266:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800226a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a28      	ldr	r2, [pc, #160]	; (8002314 <HAL_ADC_ConfigChannel+0x29c>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d10f      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x21e>
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2b12      	cmp	r3, #18
 800227c:	d10b      	bne.n	8002296 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	4a25      	ldr	r2, [pc, #148]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 8002284:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002288:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800228a:	4b23      	ldr	r3, [pc, #140]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	4a22      	ldr	r2, [pc, #136]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 8002290:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002294:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a1e      	ldr	r2, [pc, #120]	; (8002314 <HAL_ADC_ConfigChannel+0x29c>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d12b      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x280>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a1a      	ldr	r2, [pc, #104]	; (8002310 <HAL_ADC_ConfigChannel+0x298>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d003      	beq.n	80022b2 <HAL_ADC_ConfigChannel+0x23a>
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2b11      	cmp	r3, #17
 80022b0:	d122      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80022b2:	4b19      	ldr	r3, [pc, #100]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	4a18      	ldr	r2, [pc, #96]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 80022b8:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80022bc:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80022be:	4b16      	ldr	r3, [pc, #88]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	4a15      	ldr	r2, [pc, #84]	; (8002318 <HAL_ADC_ConfigChannel+0x2a0>)
 80022c4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022c8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a10      	ldr	r2, [pc, #64]	; (8002310 <HAL_ADC_ConfigChannel+0x298>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d111      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022d4:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_ADC_ConfigChannel+0x2a4>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a11      	ldr	r2, [pc, #68]	; (8002320 <HAL_ADC_ConfigChannel+0x2a8>)
 80022da:	fba2 2303 	umull	r2, r3, r2, r3
 80022de:	0c9a      	lsrs	r2, r3, #18
 80022e0:	4613      	mov	r3, r2
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	4413      	add	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022ea:	e002      	b.n	80022f2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d1f9      	bne.n	80022ec <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2200      	movs	r2, #0
 80022fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002300:	2300      	movs	r3, #0
}
 8002302:	4618      	mov	r0, r3
 8002304:	3714      	adds	r7, #20
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	10000012 	.word	0x10000012
 8002314:	40012000 	.word	0x40012000
 8002318:	40012300 	.word	0x40012300
 800231c:	20000000 	.word	0x20000000
 8002320:	431bde83 	.word	0x431bde83

08002324 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800232c:	4b78      	ldr	r3, [pc, #480]	; (8002510 <ADC_Init+0x1ec>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	4a77      	ldr	r2, [pc, #476]	; (8002510 <ADC_Init+0x1ec>)
 8002332:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002336:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002338:	4b75      	ldr	r3, [pc, #468]	; (8002510 <ADC_Init+0x1ec>)
 800233a:	685a      	ldr	r2, [r3, #4]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	4973      	ldr	r1, [pc, #460]	; (8002510 <ADC_Init+0x1ec>)
 8002342:	4313      	orrs	r3, r2
 8002344:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	021a      	lsls	r2, r3, #8
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	430a      	orrs	r2, r1
 8002368:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685a      	ldr	r2, [r3, #4]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002378:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	6859      	ldr	r1, [r3, #4]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	430a      	orrs	r2, r1
 800238a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	689a      	ldr	r2, [r3, #8]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800239a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	6899      	ldr	r1, [r3, #8]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023b2:	4a58      	ldr	r2, [pc, #352]	; (8002514 <ADC_Init+0x1f0>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d022      	beq.n	80023fe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689a      	ldr	r2, [r3, #8]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023c6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	6899      	ldr	r1, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	430a      	orrs	r2, r1
 80023d8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6899      	ldr	r1, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	430a      	orrs	r2, r1
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	e00f      	b.n	800241e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	689a      	ldr	r2, [r3, #8]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800240c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	689a      	ldr	r2, [r3, #8]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800241c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f022 0202 	bic.w	r2, r2, #2
 800242c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6899      	ldr	r1, [r3, #8]
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	005a      	lsls	r2, r3, #1
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	430a      	orrs	r2, r1
 8002440:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01b      	beq.n	8002484 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800245a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800246a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6859      	ldr	r1, [r3, #4]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002476:	3b01      	subs	r3, #1
 8002478:	035a      	lsls	r2, r3, #13
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	430a      	orrs	r2, r1
 8002480:	605a      	str	r2, [r3, #4]
 8002482:	e007      	b.n	8002494 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	685a      	ldr	r2, [r3, #4]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002492:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80024a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	3b01      	subs	r3, #1
 80024b0:	051a      	lsls	r2, r3, #20
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	430a      	orrs	r2, r1
 80024b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	689a      	ldr	r2, [r3, #8]
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6899      	ldr	r1, [r3, #8]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024d6:	025a      	lsls	r2, r3, #9
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	689a      	ldr	r2, [r3, #8]
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	6899      	ldr	r1, [r3, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	695b      	ldr	r3, [r3, #20]
 80024fa:	029a      	lsls	r2, r3, #10
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	609a      	str	r2, [r3, #8]
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr
 8002510:	40012300 	.word	0x40012300
 8002514:	0f000001 	.word	0x0f000001

08002518 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002528:	4b0b      	ldr	r3, [pc, #44]	; (8002558 <__NVIC_SetPriorityGrouping+0x40>)
 800252a:	68db      	ldr	r3, [r3, #12]
 800252c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252e:	68ba      	ldr	r2, [r7, #8]
 8002530:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002534:	4013      	ands	r3, r2
 8002536:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <__NVIC_SetPriorityGrouping+0x44>)
 8002542:	4313      	orrs	r3, r2
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	; (8002558 <__NVIC_SetPriorityGrouping+0x40>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000ed00 	.word	0xe000ed00
 800255c:	05fa0000 	.word	0x05fa0000

08002560 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002564:	4b04      	ldr	r3, [pc, #16]	; (8002578 <__NVIC_GetPriorityGrouping+0x18>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	f003 0307 	and.w	r3, r3, #7
}
 800256e:	4618      	mov	r0, r3
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr
 8002578:	e000ed00 	.word	0xe000ed00

0800257c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800257c:	b480      	push	{r7}
 800257e:	b083      	sub	sp, #12
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	2b00      	cmp	r3, #0
 800258c:	db0b      	blt.n	80025a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258e:	79fb      	ldrb	r3, [r7, #7]
 8002590:	f003 021f 	and.w	r2, r3, #31
 8002594:	4907      	ldr	r1, [pc, #28]	; (80025b4 <__NVIC_EnableIRQ+0x38>)
 8002596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800259a:	095b      	lsrs	r3, r3, #5
 800259c:	2001      	movs	r0, #1
 800259e:	fa00 f202 	lsl.w	r2, r0, r2
 80025a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a6:	bf00      	nop
 80025a8:	370c      	adds	r7, #12
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	e000e100 	.word	0xe000e100

080025b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	4603      	mov	r3, r0
 80025c0:	6039      	str	r1, [r7, #0]
 80025c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db0a      	blt.n	80025e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	b2da      	uxtb	r2, r3
 80025d0:	490c      	ldr	r1, [pc, #48]	; (8002604 <__NVIC_SetPriority+0x4c>)
 80025d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d6:	0112      	lsls	r2, r2, #4
 80025d8:	b2d2      	uxtb	r2, r2
 80025da:	440b      	add	r3, r1
 80025dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e0:	e00a      	b.n	80025f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	b2da      	uxtb	r2, r3
 80025e6:	4908      	ldr	r1, [pc, #32]	; (8002608 <__NVIC_SetPriority+0x50>)
 80025e8:	79fb      	ldrb	r3, [r7, #7]
 80025ea:	f003 030f 	and.w	r3, r3, #15
 80025ee:	3b04      	subs	r3, #4
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	b2d2      	uxtb	r2, r2
 80025f4:	440b      	add	r3, r1
 80025f6:	761a      	strb	r2, [r3, #24]
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr
 8002604:	e000e100 	.word	0xe000e100
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800260c:	b480      	push	{r7}
 800260e:	b089      	sub	sp, #36	; 0x24
 8002610:	af00      	add	r7, sp, #0
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 0307 	and.w	r3, r3, #7
 800261e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	f1c3 0307 	rsb	r3, r3, #7
 8002626:	2b04      	cmp	r3, #4
 8002628:	bf28      	it	cs
 800262a:	2304      	movcs	r3, #4
 800262c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3304      	adds	r3, #4
 8002632:	2b06      	cmp	r3, #6
 8002634:	d902      	bls.n	800263c <NVIC_EncodePriority+0x30>
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3b03      	subs	r3, #3
 800263a:	e000      	b.n	800263e <NVIC_EncodePriority+0x32>
 800263c:	2300      	movs	r3, #0
 800263e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002640:	f04f 32ff 	mov.w	r2, #4294967295
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	fa02 f303 	lsl.w	r3, r2, r3
 800264a:	43da      	mvns	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	401a      	ands	r2, r3
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002654:	f04f 31ff 	mov.w	r1, #4294967295
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	fa01 f303 	lsl.w	r3, r1, r3
 800265e:	43d9      	mvns	r1, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002664:	4313      	orrs	r3, r2
         );
}
 8002666:	4618      	mov	r0, r3
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
	...

08002674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002684:	d301      	bcc.n	800268a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002686:	2301      	movs	r3, #1
 8002688:	e00f      	b.n	80026aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800268a:	4a0a      	ldr	r2, [pc, #40]	; (80026b4 <SysTick_Config+0x40>)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3b01      	subs	r3, #1
 8002690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002692:	210f      	movs	r1, #15
 8002694:	f04f 30ff 	mov.w	r0, #4294967295
 8002698:	f7ff ff8e 	bl	80025b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <SysTick_Config+0x40>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026a2:	4b04      	ldr	r3, [pc, #16]	; (80026b4 <SysTick_Config+0x40>)
 80026a4:	2207      	movs	r2, #7
 80026a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3708      	adds	r7, #8
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	e000e010 	.word	0xe000e010

080026b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff ff29 	bl	8002518 <__NVIC_SetPriorityGrouping>
}
 80026c6:	bf00      	nop
 80026c8:	3708      	adds	r7, #8
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	4603      	mov	r3, r0
 80026d6:	60b9      	str	r1, [r7, #8]
 80026d8:	607a      	str	r2, [r7, #4]
 80026da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026dc:	2300      	movs	r3, #0
 80026de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e0:	f7ff ff3e 	bl	8002560 <__NVIC_GetPriorityGrouping>
 80026e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026e6:	687a      	ldr	r2, [r7, #4]
 80026e8:	68b9      	ldr	r1, [r7, #8]
 80026ea:	6978      	ldr	r0, [r7, #20]
 80026ec:	f7ff ff8e 	bl	800260c <NVIC_EncodePriority>
 80026f0:	4602      	mov	r2, r0
 80026f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026f6:	4611      	mov	r1, r2
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff ff5d 	bl	80025b8 <__NVIC_SetPriority>
}
 80026fe:	bf00      	nop
 8002700:	3718      	adds	r7, #24
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b082      	sub	sp, #8
 800270a:	af00      	add	r7, sp, #0
 800270c:	4603      	mov	r3, r0
 800270e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002714:	4618      	mov	r0, r3
 8002716:	f7ff ff31 	bl	800257c <__NVIC_EnableIRQ>
}
 800271a:	bf00      	nop
 800271c:	3708      	adds	r7, #8
 800271e:	46bd      	mov	sp, r7
 8002720:	bd80      	pop	{r7, pc}

08002722 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002722:	b580      	push	{r7, lr}
 8002724:	b082      	sub	sp, #8
 8002726:	af00      	add	r7, sp, #0
 8002728:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f7ff ffa2 	bl	8002674 <SysTick_Config>
 8002730:	4603      	mov	r3, r0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3708      	adds	r7, #8
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
	...

0800273c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b086      	sub	sp, #24
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002744:	2300      	movs	r3, #0
 8002746:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff fc22 	bl	8001f90 <HAL_GetTick>
 800274c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d101      	bne.n	8002758 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e099      	b.n	800288c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2202      	movs	r2, #2
 800275c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2200      	movs	r2, #0
 8002764:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002778:	e00f      	b.n	800279a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800277a:	f7ff fc09 	bl	8001f90 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b05      	cmp	r3, #5
 8002786:	d908      	bls.n	800279a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2220      	movs	r2, #32
 800278c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2203      	movs	r2, #3
 8002792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e078      	b.n	800288c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0301 	and.w	r3, r3, #1
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1e8      	bne.n	800277a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80027b0:	697a      	ldr	r2, [r7, #20]
 80027b2:	4b38      	ldr	r3, [pc, #224]	; (8002894 <HAL_DMA_Init+0x158>)
 80027b4:	4013      	ands	r3, r2
 80027b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	691b      	ldr	r3, [r3, #16]
 80027cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80027d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80027de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a1b      	ldr	r3, [r3, #32]
 80027e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f0:	2b04      	cmp	r3, #4
 80027f2:	d107      	bne.n	8002804 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	4313      	orrs	r3, r2
 80027fe:	697a      	ldr	r2, [r7, #20]
 8002800:	4313      	orrs	r3, r2
 8002802:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	697a      	ldr	r2, [r7, #20]
 800280a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	f023 0307 	bic.w	r3, r3, #7
 800281a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002820:	697a      	ldr	r2, [r7, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800282a:	2b04      	cmp	r3, #4
 800282c:	d117      	bne.n	800285e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002832:	697a      	ldr	r2, [r7, #20]
 8002834:	4313      	orrs	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800283c:	2b00      	cmp	r3, #0
 800283e:	d00e      	beq.n	800285e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f000 f9e9 	bl	8002c18 <DMA_CheckFifoParam>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d008      	beq.n	800285e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2240      	movs	r2, #64	; 0x40
 8002850:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2201      	movs	r2, #1
 8002856:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800285a:	2301      	movs	r3, #1
 800285c:	e016      	b.n	800288c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f000 f9a0 	bl	8002bac <DMA_CalcBaseAndBitshift>
 800286c:	4603      	mov	r3, r0
 800286e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002874:	223f      	movs	r2, #63	; 0x3f
 8002876:	409a      	lsls	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2201      	movs	r2, #1
 8002886:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800288a:	2300      	movs	r3, #0
}
 800288c:	4618      	mov	r0, r3
 800288e:	3718      	adds	r7, #24
 8002890:	46bd      	mov	sp, r7
 8002892:	bd80      	pop	{r7, pc}
 8002894:	f010803f 	.word	0xf010803f

08002898 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80028a0:	2300      	movs	r3, #0
 80028a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80028a4:	4b8e      	ldr	r3, [pc, #568]	; (8002ae0 <HAL_DMA_IRQHandler+0x248>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4a8e      	ldr	r2, [pc, #568]	; (8002ae4 <HAL_DMA_IRQHandler+0x24c>)
 80028aa:	fba2 2303 	umull	r2, r3, r2, r3
 80028ae:	0a9b      	lsrs	r3, r3, #10
 80028b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	2208      	movs	r2, #8
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d01a      	beq.n	8002904 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0304 	and.w	r3, r3, #4
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d013      	beq.n	8002904 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681a      	ldr	r2, [r3, #0]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f022 0204 	bic.w	r2, r2, #4
 80028ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028f0:	2208      	movs	r2, #8
 80028f2:	409a      	lsls	r2, r3
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028fc:	f043 0201 	orr.w	r2, r3, #1
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002908:	2201      	movs	r2, #1
 800290a:	409a      	lsls	r2, r3
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4013      	ands	r3, r2
 8002910:	2b00      	cmp	r3, #0
 8002912:	d012      	beq.n	800293a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	695b      	ldr	r3, [r3, #20]
 800291a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00b      	beq.n	800293a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002926:	2201      	movs	r2, #1
 8002928:	409a      	lsls	r2, r3
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002932:	f043 0202 	orr.w	r2, r3, #2
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800293e:	2204      	movs	r2, #4
 8002940:	409a      	lsls	r2, r3
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	4013      	ands	r3, r2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d012      	beq.n	8002970 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d00b      	beq.n	8002970 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800295c:	2204      	movs	r2, #4
 800295e:	409a      	lsls	r2, r3
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002968:	f043 0204 	orr.w	r2, r3, #4
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002974:	2210      	movs	r2, #16
 8002976:	409a      	lsls	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4013      	ands	r3, r2
 800297c:	2b00      	cmp	r3, #0
 800297e:	d043      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0308 	and.w	r3, r3, #8
 800298a:	2b00      	cmp	r3, #0
 800298c:	d03c      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002992:	2210      	movs	r2, #16
 8002994:	409a      	lsls	r2, r3
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d018      	beq.n	80029da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d108      	bne.n	80029c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d024      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	4798      	blx	r3
 80029c6:	e01f      	b.n	8002a08 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d01b      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	4798      	blx	r3
 80029d8:	e016      	b.n	8002a08 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d107      	bne.n	80029f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f022 0208 	bic.w	r2, r2, #8
 80029f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d003      	beq.n	8002a08 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a0c:	2220      	movs	r2, #32
 8002a0e:	409a      	lsls	r2, r3
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	4013      	ands	r3, r2
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 808f 	beq.w	8002b38 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 0310 	and.w	r3, r3, #16
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 8087 	beq.w	8002b38 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a2e:	2220      	movs	r2, #32
 8002a30:	409a      	lsls	r2, r3
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b05      	cmp	r3, #5
 8002a40:	d136      	bne.n	8002ab0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 0216 	bic.w	r2, r2, #22
 8002a50:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695a      	ldr	r2, [r3, #20]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a60:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d103      	bne.n	8002a72 <HAL_DMA_IRQHandler+0x1da>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d007      	beq.n	8002a82 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0208 	bic.w	r2, r2, #8
 8002a80:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a86:	223f      	movs	r2, #63	; 0x3f
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	693b      	ldr	r3, [r7, #16]
 8002a8c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2201      	movs	r2, #1
 8002a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d07e      	beq.n	8002ba4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aaa:	6878      	ldr	r0, [r7, #4]
 8002aac:	4798      	blx	r3
        }
        return;
 8002aae:	e079      	b.n	8002ba4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01d      	beq.n	8002afa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10d      	bne.n	8002ae8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d031      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	4798      	blx	r3
 8002adc:	e02c      	b.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
 8002ade:	bf00      	nop
 8002ae0:	20000000 	.word	0x20000000
 8002ae4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d023      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	4798      	blx	r3
 8002af8:	e01e      	b.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d10f      	bne.n	8002b28 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f022 0210 	bic.w	r2, r2, #16
 8002b16:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d003      	beq.n	8002b38 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d032      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b44:	f003 0301 	and.w	r3, r3, #1
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d022      	beq.n	8002b92 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2205      	movs	r2, #5
 8002b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f022 0201 	bic.w	r2, r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	3301      	adds	r3, #1
 8002b68:	60bb      	str	r3, [r7, #8]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d307      	bcc.n	8002b80 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f2      	bne.n	8002b64 <HAL_DMA_IRQHandler+0x2cc>
 8002b7e:	e000      	b.n	8002b82 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002b80:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d005      	beq.n	8002ba6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	4798      	blx	r3
 8002ba2:	e000      	b.n	8002ba6 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ba4:	bf00      	nop
    }
  }
}
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b085      	sub	sp, #20
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	3b10      	subs	r3, #16
 8002bbc:	4a13      	ldr	r2, [pc, #76]	; (8002c0c <DMA_CalcBaseAndBitshift+0x60>)
 8002bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002bc6:	4a12      	ldr	r2, [pc, #72]	; (8002c10 <DMA_CalcBaseAndBitshift+0x64>)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	4413      	add	r3, r2
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	461a      	mov	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d908      	bls.n	8002bec <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	4b0c      	ldr	r3, [pc, #48]	; (8002c14 <DMA_CalcBaseAndBitshift+0x68>)
 8002be2:	4013      	ands	r3, r2
 8002be4:	1d1a      	adds	r2, r3, #4
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	659a      	str	r2, [r3, #88]	; 0x58
 8002bea:	e006      	b.n	8002bfa <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	461a      	mov	r2, r3
 8002bf2:	4b08      	ldr	r3, [pc, #32]	; (8002c14 <DMA_CalcBaseAndBitshift+0x68>)
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	687a      	ldr	r2, [r7, #4]
 8002bf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3714      	adds	r7, #20
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
 8002c0a:	bf00      	nop
 8002c0c:	aaaaaaab 	.word	0xaaaaaaab
 8002c10:	08014854 	.word	0x08014854
 8002c14:	fffffc00 	.word	0xfffffc00

08002c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c20:	2300      	movs	r3, #0
 8002c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d11f      	bne.n	8002c72 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d856      	bhi.n	8002ce6 <DMA_CheckFifoParam+0xce>
 8002c38:	a201      	add	r2, pc, #4	; (adr r2, 8002c40 <DMA_CheckFifoParam+0x28>)
 8002c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3e:	bf00      	nop
 8002c40:	08002c51 	.word	0x08002c51
 8002c44:	08002c63 	.word	0x08002c63
 8002c48:	08002c51 	.word	0x08002c51
 8002c4c:	08002ce7 	.word	0x08002ce7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d046      	beq.n	8002cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c60:	e043      	b.n	8002cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002c6a:	d140      	bne.n	8002cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c70:	e03d      	b.n	8002cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c7a:	d121      	bne.n	8002cc0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	2b03      	cmp	r3, #3
 8002c80:	d837      	bhi.n	8002cf2 <DMA_CheckFifoParam+0xda>
 8002c82:	a201      	add	r2, pc, #4	; (adr r2, 8002c88 <DMA_CheckFifoParam+0x70>)
 8002c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c88:	08002c99 	.word	0x08002c99
 8002c8c:	08002c9f 	.word	0x08002c9f
 8002c90:	08002c99 	.word	0x08002c99
 8002c94:	08002cb1 	.word	0x08002cb1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c9c:	e030      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d025      	beq.n	8002cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cae:	e022      	b.n	8002cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cb8:	d11f      	bne.n	8002cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002cbe:	e01c      	b.n	8002cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d903      	bls.n	8002cce <DMA_CheckFifoParam+0xb6>
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d003      	beq.n	8002cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002ccc:	e018      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd2:	e015      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00e      	beq.n	8002cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ce4:	e00b      	b.n	8002cfe <DMA_CheckFifoParam+0xe6>
      break;
 8002ce6:	bf00      	nop
 8002ce8:	e00a      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cea:	bf00      	nop
 8002cec:	e008      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cee:	bf00      	nop
 8002cf0:	e006      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf2:	bf00      	nop
 8002cf4:	e004      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cf6:	bf00      	nop
 8002cf8:	e002      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8002cfa:	bf00      	nop
 8002cfc:	e000      	b.n	8002d00 <DMA_CheckFifoParam+0xe8>
      break;
 8002cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3714      	adds	r7, #20
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop

08002d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b089      	sub	sp, #36	; 0x24
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002d22:	2300      	movs	r3, #0
 8002d24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002d26:	2300      	movs	r3, #0
 8002d28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	61fb      	str	r3, [r7, #28]
 8002d2e:	e175      	b.n	800301c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002d30:	2201      	movs	r2, #1
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	fa02 f303 	lsl.w	r3, r2, r3
 8002d38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	697a      	ldr	r2, [r7, #20]
 8002d40:	4013      	ands	r3, r2
 8002d42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d44:	693a      	ldr	r2, [r7, #16]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	f040 8164 	bne.w	8003016 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b01      	cmp	r3, #1
 8002d58:	d005      	beq.n	8002d66 <HAL_GPIO_Init+0x56>
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f003 0303 	and.w	r3, r3, #3
 8002d62:	2b02      	cmp	r3, #2
 8002d64:	d130      	bne.n	8002dc8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	005b      	lsls	r3, r3, #1
 8002d70:	2203      	movs	r2, #3
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68da      	ldr	r2, [r3, #12]
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8a:	69ba      	ldr	r2, [r7, #24]
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	69fb      	ldr	r3, [r7, #28]
 8002da0:	fa02 f303 	lsl.w	r3, r2, r3
 8002da4:	43db      	mvns	r3, r3
 8002da6:	69ba      	ldr	r2, [r7, #24]
 8002da8:	4013      	ands	r3, r2
 8002daa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	091b      	lsrs	r3, r3, #4
 8002db2:	f003 0201 	and.w	r2, r3, #1
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	69ba      	ldr	r2, [r7, #24]
 8002dc6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0303 	and.w	r3, r3, #3
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d017      	beq.n	8002e04 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	68db      	ldr	r3, [r3, #12]
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	2203      	movs	r2, #3
 8002de0:	fa02 f303 	lsl.w	r3, r2, r3
 8002de4:	43db      	mvns	r3, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4013      	ands	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	689a      	ldr	r2, [r3, #8]
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f003 0303 	and.w	r3, r3, #3
 8002e0c:	2b02      	cmp	r3, #2
 8002e0e:	d123      	bne.n	8002e58 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	08da      	lsrs	r2, r3, #3
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	3208      	adds	r2, #8
 8002e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002e1e:	69fb      	ldr	r3, [r7, #28]
 8002e20:	f003 0307 	and.w	r3, r3, #7
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	220f      	movs	r2, #15
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	691a      	ldr	r2, [r3, #16]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	f003 0307 	and.w	r3, r3, #7
 8002e3e:	009b      	lsls	r3, r3, #2
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	69ba      	ldr	r2, [r7, #24]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002e4a:	69fb      	ldr	r3, [r7, #28]
 8002e4c:	08da      	lsrs	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	3208      	adds	r2, #8
 8002e52:	69b9      	ldr	r1, [r7, #24]
 8002e54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	2203      	movs	r2, #3
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	43db      	mvns	r3, r3
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	f003 0203 	and.w	r2, r3, #3
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	69ba      	ldr	r2, [r7, #24]
 8002e8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	f000 80be 	beq.w	8003016 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9a:	4b66      	ldr	r3, [pc, #408]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e9e:	4a65      	ldr	r2, [pc, #404]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8002ea6:	4b63      	ldr	r3, [pc, #396]	; (8003034 <HAL_GPIO_Init+0x324>)
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002eb2:	4a61      	ldr	r2, [pc, #388]	; (8003038 <HAL_GPIO_Init+0x328>)
 8002eb4:	69fb      	ldr	r3, [r7, #28]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	f003 0303 	and.w	r3, r3, #3
 8002ec6:	009b      	lsls	r3, r3, #2
 8002ec8:	220f      	movs	r2, #15
 8002eca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ece:	43db      	mvns	r3, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4013      	ands	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a58      	ldr	r2, [pc, #352]	; (800303c <HAL_GPIO_Init+0x32c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d037      	beq.n	8002f4e <HAL_GPIO_Init+0x23e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a57      	ldr	r2, [pc, #348]	; (8003040 <HAL_GPIO_Init+0x330>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d031      	beq.n	8002f4a <HAL_GPIO_Init+0x23a>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a56      	ldr	r2, [pc, #344]	; (8003044 <HAL_GPIO_Init+0x334>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d02b      	beq.n	8002f46 <HAL_GPIO_Init+0x236>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a55      	ldr	r2, [pc, #340]	; (8003048 <HAL_GPIO_Init+0x338>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d025      	beq.n	8002f42 <HAL_GPIO_Init+0x232>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a54      	ldr	r2, [pc, #336]	; (800304c <HAL_GPIO_Init+0x33c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d01f      	beq.n	8002f3e <HAL_GPIO_Init+0x22e>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a53      	ldr	r2, [pc, #332]	; (8003050 <HAL_GPIO_Init+0x340>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d019      	beq.n	8002f3a <HAL_GPIO_Init+0x22a>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a52      	ldr	r2, [pc, #328]	; (8003054 <HAL_GPIO_Init+0x344>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d013      	beq.n	8002f36 <HAL_GPIO_Init+0x226>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a51      	ldr	r2, [pc, #324]	; (8003058 <HAL_GPIO_Init+0x348>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d00d      	beq.n	8002f32 <HAL_GPIO_Init+0x222>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a50      	ldr	r2, [pc, #320]	; (800305c <HAL_GPIO_Init+0x34c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d007      	beq.n	8002f2e <HAL_GPIO_Init+0x21e>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a4f      	ldr	r2, [pc, #316]	; (8003060 <HAL_GPIO_Init+0x350>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_GPIO_Init+0x21a>
 8002f26:	2309      	movs	r3, #9
 8002f28:	e012      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	e010      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e00e      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f32:	2307      	movs	r3, #7
 8002f34:	e00c      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f36:	2306      	movs	r3, #6
 8002f38:	e00a      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3a:	2305      	movs	r3, #5
 8002f3c:	e008      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f3e:	2304      	movs	r3, #4
 8002f40:	e006      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f42:	2303      	movs	r3, #3
 8002f44:	e004      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f46:	2302      	movs	r3, #2
 8002f48:	e002      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e000      	b.n	8002f50 <HAL_GPIO_Init+0x240>
 8002f4e:	2300      	movs	r3, #0
 8002f50:	69fa      	ldr	r2, [r7, #28]
 8002f52:	f002 0203 	and.w	r2, r2, #3
 8002f56:	0092      	lsls	r2, r2, #2
 8002f58:	4093      	lsls	r3, r2
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f60:	4935      	ldr	r1, [pc, #212]	; (8003038 <HAL_GPIO_Init+0x328>)
 8002f62:	69fb      	ldr	r3, [r7, #28]
 8002f64:	089b      	lsrs	r3, r3, #2
 8002f66:	3302      	adds	r3, #2
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f6e:	4b3d      	ldr	r3, [pc, #244]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	43db      	mvns	r3, r3
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	4013      	ands	r3, r2
 8002f7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	693b      	ldr	r3, [r7, #16]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f92:	4a34      	ldr	r2, [pc, #208]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f98:	4b32      	ldr	r3, [pc, #200]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002f9a:	68db      	ldr	r3, [r3, #12]
 8002f9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	43db      	mvns	r3, r3
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d003      	beq.n	8002fbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fbc:	4a29      	ldr	r2, [pc, #164]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fc2:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	43db      	mvns	r3, r3
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	4013      	ands	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d003      	beq.n	8002fe6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002fde:	69ba      	ldr	r2, [r7, #24]
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fe6:	4a1f      	ldr	r2, [pc, #124]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002fec:	4b1d      	ldr	r3, [pc, #116]	; (8003064 <HAL_GPIO_Init+0x354>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	43db      	mvns	r3, r3
 8002ff6:	69ba      	ldr	r2, [r7, #24]
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d003      	beq.n	8003010 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	4313      	orrs	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003010:	4a14      	ldr	r2, [pc, #80]	; (8003064 <HAL_GPIO_Init+0x354>)
 8003012:	69bb      	ldr	r3, [r7, #24]
 8003014:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	3301      	adds	r3, #1
 800301a:	61fb      	str	r3, [r7, #28]
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	2b0f      	cmp	r3, #15
 8003020:	f67f ae86 	bls.w	8002d30 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003024:	bf00      	nop
 8003026:	bf00      	nop
 8003028:	3724      	adds	r7, #36	; 0x24
 800302a:	46bd      	mov	sp, r7
 800302c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003030:	4770      	bx	lr
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800
 8003038:	40013800 	.word	0x40013800
 800303c:	40020000 	.word	0x40020000
 8003040:	40020400 	.word	0x40020400
 8003044:	40020800 	.word	0x40020800
 8003048:	40020c00 	.word	0x40020c00
 800304c:	40021000 	.word	0x40021000
 8003050:	40021400 	.word	0x40021400
 8003054:	40021800 	.word	0x40021800
 8003058:	40021c00 	.word	0x40021c00
 800305c:	40022000 	.word	0x40022000
 8003060:	40022400 	.word	0x40022400
 8003064:	40013c00 	.word	0x40013c00

08003068 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003068:	b480      	push	{r7}
 800306a:	b085      	sub	sp, #20
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	460b      	mov	r3, r1
 8003072:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	691a      	ldr	r2, [r3, #16]
 8003078:	887b      	ldrh	r3, [r7, #2]
 800307a:	4013      	ands	r3, r2
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003080:	2301      	movs	r3, #1
 8003082:	73fb      	strb	r3, [r7, #15]
 8003084:	e001      	b.n	800308a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800308a:	7bfb      	ldrb	r3, [r7, #15]
}
 800308c:	4618      	mov	r0, r3
 800308e:	3714      	adds	r7, #20
 8003090:	46bd      	mov	sp, r7
 8003092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003096:	4770      	bx	lr

08003098 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
 80030a0:	460b      	mov	r3, r1
 80030a2:	807b      	strh	r3, [r7, #2]
 80030a4:	4613      	mov	r3, r2
 80030a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030a8:	787b      	ldrb	r3, [r7, #1]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d003      	beq.n	80030b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ae:	887a      	ldrh	r2, [r7, #2]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80030b4:	e003      	b.n	80030be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80030b6:	887b      	ldrh	r3, [r7, #2]
 80030b8:	041a      	lsls	r2, r3, #16
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	619a      	str	r2, [r3, #24]
}
 80030be:	bf00      	nop
 80030c0:	370c      	adds	r7, #12
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr

080030ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030ca:	b480      	push	{r7}
 80030cc:	b085      	sub	sp, #20
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	695b      	ldr	r3, [r3, #20]
 80030da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80030dc:	887a      	ldrh	r2, [r7, #2]
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	4013      	ands	r3, r2
 80030e2:	041a      	lsls	r2, r3, #16
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43d9      	mvns	r1, r3
 80030e8:	887b      	ldrh	r3, [r7, #2]
 80030ea:	400b      	ands	r3, r1
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	619a      	str	r2, [r3, #24]
}
 80030f2:	bf00      	nop
 80030f4:	3714      	adds	r7, #20
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80030fe:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003100:	b08f      	sub	sp, #60	; 0x3c
 8003102:	af0a      	add	r7, sp, #40	; 0x28
 8003104:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d101      	bne.n	8003110 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e054      	b.n	80031ba <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f00e fb4a 	bl	80117c4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2203      	movs	r2, #3
 8003134:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003140:	2b00      	cmp	r3, #0
 8003142:	d102      	bne.n	800314a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2200      	movs	r2, #0
 8003148:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4618      	mov	r0, r3
 8003150:	f007 fae3 	bl	800a71a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	603b      	str	r3, [r7, #0]
 800315a:	687e      	ldr	r6, [r7, #4]
 800315c:	466d      	mov	r5, sp
 800315e:	f106 0410 	add.w	r4, r6, #16
 8003162:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003164:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003166:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003168:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800316a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800316e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003172:	1d33      	adds	r3, r6, #4
 8003174:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003176:	6838      	ldr	r0, [r7, #0]
 8003178:	f007 f9c4 	bl	800a504 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	4618      	mov	r0, r3
 8003184:	f007 fada 	bl	800a73c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	603b      	str	r3, [r7, #0]
 800318e:	687e      	ldr	r6, [r7, #4]
 8003190:	466d      	mov	r5, sp
 8003192:	f106 0410 	add.w	r4, r6, #16
 8003196:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003198:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800319c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800319e:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031a2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031a6:	1d33      	adds	r3, r6, #4
 80031a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031aa:	6838      	ldr	r0, [r7, #0]
 80031ac:	f008 fe16 	bl	800bddc <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80031b8:	2300      	movs	r3, #0
}
 80031ba:	4618      	mov	r0, r3
 80031bc:	3714      	adds	r7, #20
 80031be:	46bd      	mov	sp, r7
 80031c0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031c2 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80031c2:	b590      	push	{r4, r7, lr}
 80031c4:	b089      	sub	sp, #36	; 0x24
 80031c6:	af04      	add	r7, sp, #16
 80031c8:	6078      	str	r0, [r7, #4]
 80031ca:	4608      	mov	r0, r1
 80031cc:	4611      	mov	r1, r2
 80031ce:	461a      	mov	r2, r3
 80031d0:	4603      	mov	r3, r0
 80031d2:	70fb      	strb	r3, [r7, #3]
 80031d4:	460b      	mov	r3, r1
 80031d6:	70bb      	strb	r3, [r7, #2]
 80031d8:	4613      	mov	r3, r2
 80031da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d101      	bne.n	80031ea <HAL_HCD_HC_Init+0x28>
 80031e6:	2302      	movs	r3, #2
 80031e8:	e076      	b.n	80032d8 <HAL_HCD_HC_Init+0x116>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80031f2:	78fb      	ldrb	r3, [r7, #3]
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	212c      	movs	r1, #44	; 0x2c
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	333d      	adds	r3, #61	; 0x3d
 8003200:	2200      	movs	r2, #0
 8003202:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003204:	78fb      	ldrb	r3, [r7, #3]
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	212c      	movs	r1, #44	; 0x2c
 800320a:	fb01 f303 	mul.w	r3, r1, r3
 800320e:	4413      	add	r3, r2
 8003210:	3338      	adds	r3, #56	; 0x38
 8003212:	787a      	ldrb	r2, [r7, #1]
 8003214:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003216:	78fb      	ldrb	r3, [r7, #3]
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	212c      	movs	r1, #44	; 0x2c
 800321c:	fb01 f303 	mul.w	r3, r1, r3
 8003220:	4413      	add	r3, r2
 8003222:	3340      	adds	r3, #64	; 0x40
 8003224:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003226:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003228:	78fb      	ldrb	r3, [r7, #3]
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	212c      	movs	r1, #44	; 0x2c
 800322e:	fb01 f303 	mul.w	r3, r1, r3
 8003232:	4413      	add	r3, r2
 8003234:	3339      	adds	r3, #57	; 0x39
 8003236:	78fa      	ldrb	r2, [r7, #3]
 8003238:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800323a:	78fb      	ldrb	r3, [r7, #3]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	212c      	movs	r1, #44	; 0x2c
 8003240:	fb01 f303 	mul.w	r3, r1, r3
 8003244:	4413      	add	r3, r2
 8003246:	333f      	adds	r3, #63	; 0x3f
 8003248:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800324c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800324e:	78fb      	ldrb	r3, [r7, #3]
 8003250:	78ba      	ldrb	r2, [r7, #2]
 8003252:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003256:	b2d0      	uxtb	r0, r2
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	212c      	movs	r1, #44	; 0x2c
 800325c:	fb01 f303 	mul.w	r3, r1, r3
 8003260:	4413      	add	r3, r2
 8003262:	333a      	adds	r3, #58	; 0x3a
 8003264:	4602      	mov	r2, r0
 8003266:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003268:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800326c:	2b00      	cmp	r3, #0
 800326e:	da09      	bge.n	8003284 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003270:	78fb      	ldrb	r3, [r7, #3]
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	212c      	movs	r1, #44	; 0x2c
 8003276:	fb01 f303 	mul.w	r3, r1, r3
 800327a:	4413      	add	r3, r2
 800327c:	333b      	adds	r3, #59	; 0x3b
 800327e:	2201      	movs	r2, #1
 8003280:	701a      	strb	r2, [r3, #0]
 8003282:	e008      	b.n	8003296 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003284:	78fb      	ldrb	r3, [r7, #3]
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	212c      	movs	r1, #44	; 0x2c
 800328a:	fb01 f303 	mul.w	r3, r1, r3
 800328e:	4413      	add	r3, r2
 8003290:	333b      	adds	r3, #59	; 0x3b
 8003292:	2200      	movs	r2, #0
 8003294:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8003296:	78fb      	ldrb	r3, [r7, #3]
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	212c      	movs	r1, #44	; 0x2c
 800329c:	fb01 f303 	mul.w	r3, r1, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	333c      	adds	r3, #60	; 0x3c
 80032a4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032a8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6818      	ldr	r0, [r3, #0]
 80032ae:	787c      	ldrb	r4, [r7, #1]
 80032b0:	78ba      	ldrb	r2, [r7, #2]
 80032b2:	78f9      	ldrb	r1, [r7, #3]
 80032b4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032b6:	9302      	str	r3, [sp, #8]
 80032b8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032c2:	9300      	str	r3, [sp, #0]
 80032c4:	4623      	mov	r3, r4
 80032c6:	f008 ff03 	bl	800c0d0 <USB_HC_Init>
 80032ca:	4603      	mov	r3, r0
 80032cc:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	2200      	movs	r2, #0
 80032d2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3714      	adds	r7, #20
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd90      	pop	{r4, r7, pc}

080032e0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032ec:	2300      	movs	r3, #0
 80032ee:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_HCD_HC_Halt+0x1e>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e00f      	b.n	800331e <HAL_HCD_HC_Halt+0x3e>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	4611      	mov	r1, r2
 800330e:	4618      	mov	r0, r3
 8003310:	f009 f953 	bl	800c5ba <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800331c:	7bfb      	ldrb	r3, [r7, #15]
}
 800331e:	4618      	mov	r0, r3
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
	...

08003328 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
 8003330:	4608      	mov	r0, r1
 8003332:	4611      	mov	r1, r2
 8003334:	461a      	mov	r2, r3
 8003336:	4603      	mov	r3, r0
 8003338:	70fb      	strb	r3, [r7, #3]
 800333a:	460b      	mov	r3, r1
 800333c:	70bb      	strb	r3, [r7, #2]
 800333e:	4613      	mov	r3, r2
 8003340:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	333b      	adds	r3, #59	; 0x3b
 8003350:	78ba      	ldrb	r2, [r7, #2]
 8003352:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	333f      	adds	r3, #63	; 0x3f
 8003362:	787a      	ldrb	r2, [r7, #1]
 8003364:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003366:	7c3b      	ldrb	r3, [r7, #16]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d112      	bne.n	8003392 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800336c:	78fb      	ldrb	r3, [r7, #3]
 800336e:	687a      	ldr	r2, [r7, #4]
 8003370:	212c      	movs	r1, #44	; 0x2c
 8003372:	fb01 f303 	mul.w	r3, r1, r3
 8003376:	4413      	add	r3, r2
 8003378:	3342      	adds	r3, #66	; 0x42
 800337a:	2203      	movs	r2, #3
 800337c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800337e:	78fb      	ldrb	r3, [r7, #3]
 8003380:	687a      	ldr	r2, [r7, #4]
 8003382:	212c      	movs	r1, #44	; 0x2c
 8003384:	fb01 f303 	mul.w	r3, r1, r3
 8003388:	4413      	add	r3, r2
 800338a:	333d      	adds	r3, #61	; 0x3d
 800338c:	7f3a      	ldrb	r2, [r7, #28]
 800338e:	701a      	strb	r2, [r3, #0]
 8003390:	e008      	b.n	80033a4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003392:	78fb      	ldrb	r3, [r7, #3]
 8003394:	687a      	ldr	r2, [r7, #4]
 8003396:	212c      	movs	r1, #44	; 0x2c
 8003398:	fb01 f303 	mul.w	r3, r1, r3
 800339c:	4413      	add	r3, r2
 800339e:	3342      	adds	r3, #66	; 0x42
 80033a0:	2202      	movs	r2, #2
 80033a2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80033a4:	787b      	ldrb	r3, [r7, #1]
 80033a6:	2b03      	cmp	r3, #3
 80033a8:	f200 80c6 	bhi.w	8003538 <HAL_HCD_HC_SubmitRequest+0x210>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033c5 	.word	0x080033c5
 80033b8:	08003525 	.word	0x08003525
 80033bc:	08003429 	.word	0x08003429
 80033c0:	080034a7 	.word	0x080034a7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80033c4:	7c3b      	ldrb	r3, [r7, #16]
 80033c6:	2b01      	cmp	r3, #1
 80033c8:	f040 80b8 	bne.w	800353c <HAL_HCD_HC_SubmitRequest+0x214>
 80033cc:	78bb      	ldrb	r3, [r7, #2]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	f040 80b4 	bne.w	800353c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80033d4:	8b3b      	ldrh	r3, [r7, #24]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d108      	bne.n	80033ec <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80033da:	78fb      	ldrb	r3, [r7, #3]
 80033dc:	687a      	ldr	r2, [r7, #4]
 80033de:	212c      	movs	r1, #44	; 0x2c
 80033e0:	fb01 f303 	mul.w	r3, r1, r3
 80033e4:	4413      	add	r3, r2
 80033e6:	3355      	adds	r3, #85	; 0x55
 80033e8:	2201      	movs	r2, #1
 80033ea:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033ec:	78fb      	ldrb	r3, [r7, #3]
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	212c      	movs	r1, #44	; 0x2c
 80033f2:	fb01 f303 	mul.w	r3, r1, r3
 80033f6:	4413      	add	r3, r2
 80033f8:	3355      	adds	r3, #85	; 0x55
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d109      	bne.n	8003414 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003400:	78fb      	ldrb	r3, [r7, #3]
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	212c      	movs	r1, #44	; 0x2c
 8003406:	fb01 f303 	mul.w	r3, r1, r3
 800340a:	4413      	add	r3, r2
 800340c:	3342      	adds	r3, #66	; 0x42
 800340e:	2200      	movs	r2, #0
 8003410:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003412:	e093      	b.n	800353c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003414:	78fb      	ldrb	r3, [r7, #3]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	212c      	movs	r1, #44	; 0x2c
 800341a:	fb01 f303 	mul.w	r3, r1, r3
 800341e:	4413      	add	r3, r2
 8003420:	3342      	adds	r3, #66	; 0x42
 8003422:	2202      	movs	r2, #2
 8003424:	701a      	strb	r2, [r3, #0]
      break;
 8003426:	e089      	b.n	800353c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003428:	78bb      	ldrb	r3, [r7, #2]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11d      	bne.n	800346a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800342e:	78fb      	ldrb	r3, [r7, #3]
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	212c      	movs	r1, #44	; 0x2c
 8003434:	fb01 f303 	mul.w	r3, r1, r3
 8003438:	4413      	add	r3, r2
 800343a:	3355      	adds	r3, #85	; 0x55
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d109      	bne.n	8003456 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003442:	78fb      	ldrb	r3, [r7, #3]
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	212c      	movs	r1, #44	; 0x2c
 8003448:	fb01 f303 	mul.w	r3, r1, r3
 800344c:	4413      	add	r3, r2
 800344e:	3342      	adds	r3, #66	; 0x42
 8003450:	2200      	movs	r2, #0
 8003452:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003454:	e073      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003456:	78fb      	ldrb	r3, [r7, #3]
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	3342      	adds	r3, #66	; 0x42
 8003464:	2202      	movs	r2, #2
 8003466:	701a      	strb	r2, [r3, #0]
      break;
 8003468:	e069      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	687a      	ldr	r2, [r7, #4]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	3354      	adds	r3, #84	; 0x54
 8003478:	781b      	ldrb	r3, [r3, #0]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d109      	bne.n	8003492 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800347e:	78fb      	ldrb	r3, [r7, #3]
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	3342      	adds	r3, #66	; 0x42
 800348c:	2200      	movs	r2, #0
 800348e:	701a      	strb	r2, [r3, #0]
      break;
 8003490:	e055      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	687a      	ldr	r2, [r7, #4]
 8003496:	212c      	movs	r1, #44	; 0x2c
 8003498:	fb01 f303 	mul.w	r3, r1, r3
 800349c:	4413      	add	r3, r2
 800349e:	3342      	adds	r3, #66	; 0x42
 80034a0:	2202      	movs	r2, #2
 80034a2:	701a      	strb	r2, [r3, #0]
      break;
 80034a4:	e04b      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034a6:	78bb      	ldrb	r3, [r7, #2]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d11d      	bne.n	80034e8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	212c      	movs	r1, #44	; 0x2c
 80034b2:	fb01 f303 	mul.w	r3, r1, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	3355      	adds	r3, #85	; 0x55
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d109      	bne.n	80034d4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034c0:	78fb      	ldrb	r3, [r7, #3]
 80034c2:	687a      	ldr	r2, [r7, #4]
 80034c4:	212c      	movs	r1, #44	; 0x2c
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	4413      	add	r3, r2
 80034cc:	3342      	adds	r3, #66	; 0x42
 80034ce:	2200      	movs	r2, #0
 80034d0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034d2:	e034      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034d4:	78fb      	ldrb	r3, [r7, #3]
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	212c      	movs	r1, #44	; 0x2c
 80034da:	fb01 f303 	mul.w	r3, r1, r3
 80034de:	4413      	add	r3, r2
 80034e0:	3342      	adds	r3, #66	; 0x42
 80034e2:	2202      	movs	r2, #2
 80034e4:	701a      	strb	r2, [r3, #0]
      break;
 80034e6:	e02a      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034e8:	78fb      	ldrb	r3, [r7, #3]
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	212c      	movs	r1, #44	; 0x2c
 80034ee:	fb01 f303 	mul.w	r3, r1, r3
 80034f2:	4413      	add	r3, r2
 80034f4:	3354      	adds	r3, #84	; 0x54
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d109      	bne.n	8003510 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034fc:	78fb      	ldrb	r3, [r7, #3]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	212c      	movs	r1, #44	; 0x2c
 8003502:	fb01 f303 	mul.w	r3, r1, r3
 8003506:	4413      	add	r3, r2
 8003508:	3342      	adds	r3, #66	; 0x42
 800350a:	2200      	movs	r2, #0
 800350c:	701a      	strb	r2, [r3, #0]
      break;
 800350e:	e016      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003510:	78fb      	ldrb	r3, [r7, #3]
 8003512:	687a      	ldr	r2, [r7, #4]
 8003514:	212c      	movs	r1, #44	; 0x2c
 8003516:	fb01 f303 	mul.w	r3, r1, r3
 800351a:	4413      	add	r3, r2
 800351c:	3342      	adds	r3, #66	; 0x42
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]
      break;
 8003522:	e00c      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3342      	adds	r3, #66	; 0x42
 8003532:	2200      	movs	r2, #0
 8003534:	701a      	strb	r2, [r3, #0]
      break;
 8003536:	e002      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003538:	bf00      	nop
 800353a:	e000      	b.n	800353e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800353c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800353e:	78fb      	ldrb	r3, [r7, #3]
 8003540:	687a      	ldr	r2, [r7, #4]
 8003542:	212c      	movs	r1, #44	; 0x2c
 8003544:	fb01 f303 	mul.w	r3, r1, r3
 8003548:	4413      	add	r3, r2
 800354a:	3344      	adds	r3, #68	; 0x44
 800354c:	697a      	ldr	r2, [r7, #20]
 800354e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	8b3a      	ldrh	r2, [r7, #24]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	202c      	movs	r0, #44	; 0x2c
 8003558:	fb00 f303 	mul.w	r3, r0, r3
 800355c:	440b      	add	r3, r1
 800355e:	334c      	adds	r3, #76	; 0x4c
 8003560:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003562:	78fb      	ldrb	r3, [r7, #3]
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	212c      	movs	r1, #44	; 0x2c
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
 800356e:	3360      	adds	r3, #96	; 0x60
 8003570:	2200      	movs	r2, #0
 8003572:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003574:	78fb      	ldrb	r3, [r7, #3]
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3350      	adds	r3, #80	; 0x50
 8003582:	2200      	movs	r2, #0
 8003584:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003586:	78fb      	ldrb	r3, [r7, #3]
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	212c      	movs	r1, #44	; 0x2c
 800358c:	fb01 f303 	mul.w	r3, r1, r3
 8003590:	4413      	add	r3, r2
 8003592:	3339      	adds	r3, #57	; 0x39
 8003594:	78fa      	ldrb	r2, [r7, #3]
 8003596:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	687a      	ldr	r2, [r7, #4]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3361      	adds	r3, #97	; 0x61
 80035a6:	2200      	movs	r2, #0
 80035a8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
 80035ae:	78fb      	ldrb	r3, [r7, #3]
 80035b0:	222c      	movs	r2, #44	; 0x2c
 80035b2:	fb02 f303 	mul.w	r3, r2, r3
 80035b6:	3338      	adds	r3, #56	; 0x38
 80035b8:	687a      	ldr	r2, [r7, #4]
 80035ba:	18d1      	adds	r1, r2, r3
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	691b      	ldr	r3, [r3, #16]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	f008 fea6 	bl	800c314 <USB_HC_StartXfer>
 80035c8:	4603      	mov	r3, r0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop

080035d4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b086      	sub	sp, #24
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f008 fb32 	bl	800bc54 <USB_GetMode>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	f040 80f6 	bne.w	80037e4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f008 fa75 	bl	800baec <USB_ReadInterrupts>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	f000 80ec 	beq.w	80037e2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f008 fa6c 	bl	800baec <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800361a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800361e:	d104      	bne.n	800362a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003628:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f008 fa5c 	bl	800baec <USB_ReadInterrupts>
 8003634:	4603      	mov	r3, r0
 8003636:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800363a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363e:	d104      	bne.n	800364a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003648:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4618      	mov	r0, r3
 8003650:	f008 fa4c 	bl	800baec <USB_ReadInterrupts>
 8003654:	4603      	mov	r3, r0
 8003656:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800365a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800365e:	d104      	bne.n	800366a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003668:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4618      	mov	r0, r3
 8003670:	f008 fa3c 	bl	800baec <USB_ReadInterrupts>
 8003674:	4603      	mov	r3, r0
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b02      	cmp	r3, #2
 800367c:	d103      	bne.n	8003686 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2202      	movs	r2, #2
 8003684:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	4618      	mov	r0, r3
 800368c:	f008 fa2e 	bl	800baec <USB_ReadInterrupts>
 8003690:	4603      	mov	r3, r0
 8003692:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003696:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800369a:	d11c      	bne.n	80036d6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036a4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d10f      	bne.n	80036d6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036b6:	2110      	movs	r1, #16
 80036b8:	6938      	ldr	r0, [r7, #16]
 80036ba:	f007 f9e9 	bl	800aa90 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036be:	6938      	ldr	r0, [r7, #16]
 80036c0:	f007 fa1a 	bl	800aaf8 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	2101      	movs	r1, #1
 80036ca:	4618      	mov	r0, r3
 80036cc:	f008 fc3a 	bl	800bf44 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f00e f905 	bl	80118e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4618      	mov	r0, r3
 80036dc:	f008 fa06 	bl	800baec <USB_ReadInterrupts>
 80036e0:	4603      	mov	r3, r0
 80036e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036e6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036ea:	d102      	bne.n	80036f2 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80036ec:	6878      	ldr	r0, [r7, #4]
 80036ee:	f001 f9ce 	bl	8004a8e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	4618      	mov	r0, r3
 80036f8:	f008 f9f8 	bl	800baec <USB_ReadInterrupts>
 80036fc:	4603      	mov	r3, r0
 80036fe:	f003 0308 	and.w	r3, r3, #8
 8003702:	2b08      	cmp	r3, #8
 8003704:	d106      	bne.n	8003714 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f00e f8ce 	bl	80118a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2208      	movs	r2, #8
 8003712:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4618      	mov	r0, r3
 800371a:	f008 f9e7 	bl	800baec <USB_ReadInterrupts>
 800371e:	4603      	mov	r3, r0
 8003720:	f003 0310 	and.w	r3, r3, #16
 8003724:	2b10      	cmp	r3, #16
 8003726:	d101      	bne.n	800372c <HAL_HCD_IRQHandler+0x158>
 8003728:	2301      	movs	r3, #1
 800372a:	e000      	b.n	800372e <HAL_HCD_IRQHandler+0x15a>
 800372c:	2300      	movs	r3, #0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d012      	beq.n	8003758 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	699a      	ldr	r2, [r3, #24]
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f022 0210 	bic.w	r2, r2, #16
 8003740:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003742:	6878      	ldr	r0, [r7, #4]
 8003744:	f001 f8d1 	bl	80048ea <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f042 0210 	orr.w	r2, r2, #16
 8003756:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f008 f9c5 	bl	800baec <USB_ReadInterrupts>
 8003762:	4603      	mov	r3, r0
 8003764:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003768:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800376c:	d13a      	bne.n	80037e4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	4618      	mov	r0, r3
 8003774:	f008 ff10 	bl	800c598 <USB_HC_ReadInterrupt>
 8003778:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800377a:	2300      	movs	r3, #0
 800377c:	617b      	str	r3, [r7, #20]
 800377e:	e025      	b.n	80037cc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f003 030f 	and.w	r3, r3, #15
 8003786:	68ba      	ldr	r2, [r7, #8]
 8003788:	fa22 f303 	lsr.w	r3, r2, r3
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d018      	beq.n	80037c6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037aa:	d106      	bne.n	80037ba <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	4619      	mov	r1, r3
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f8ab 	bl	800390e <HCD_HC_IN_IRQHandler>
 80037b8:	e005      	b.n	80037c6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	4619      	mov	r1, r3
 80037c0:	6878      	ldr	r0, [r7, #4]
 80037c2:	f000 fcc6 	bl	8004152 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	3301      	adds	r3, #1
 80037ca:	617b      	str	r3, [r7, #20]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	697a      	ldr	r2, [r7, #20]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d3d4      	bcc.n	8003780 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037de:	615a      	str	r2, [r3, #20]
 80037e0:	e000      	b.n	80037e4 <HAL_HCD_IRQHandler+0x210>
      return;
 80037e2:	bf00      	nop
    }
  }
}
 80037e4:	3718      	adds	r7, #24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}

080037ea <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037ea:	b580      	push	{r7, lr}
 80037ec:	b082      	sub	sp, #8
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_HCD_Start+0x16>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e013      	b.n	8003828 <HAL_HCD_Start+0x3e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2101      	movs	r1, #1
 800380e:	4618      	mov	r0, r3
 8003810:	f008 fbfc 	bl	800c00c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4618      	mov	r0, r3
 800381a:	f006 ff6d 	bl	800a6f8 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800383e:	2b01      	cmp	r3, #1
 8003840:	d101      	bne.n	8003846 <HAL_HCD_Stop+0x16>
 8003842:	2302      	movs	r3, #2
 8003844:	e00d      	b.n	8003862 <HAL_HCD_Stop+0x32>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2201      	movs	r2, #1
 800384a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f008 ffea 	bl	800c82c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2200      	movs	r2, #0
 800385c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003860:	2300      	movs	r3, #0
}
 8003862:	4618      	mov	r0, r3
 8003864:	3708      	adds	r7, #8
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}

0800386a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800386a:	b580      	push	{r7, lr}
 800386c:	b082      	sub	sp, #8
 800386e:	af00      	add	r7, sp, #0
 8003870:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f008 fb9e 	bl	800bfb8 <USB_ResetPort>
 800387c:	4603      	mov	r3, r0
}
 800387e:	4618      	mov	r0, r3
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003886:	b480      	push	{r7}
 8003888:	b083      	sub	sp, #12
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003892:	78fb      	ldrb	r3, [r7, #3]
 8003894:	687a      	ldr	r2, [r7, #4]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3360      	adds	r3, #96	; 0x60
 80038a0:	781b      	ldrb	r3, [r3, #0]
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr

080038ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038ae:	b480      	push	{r7}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038ba:	78fb      	ldrb	r3, [r7, #3]
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	212c      	movs	r1, #44	; 0x2c
 80038c0:	fb01 f303 	mul.w	r3, r1, r3
 80038c4:	4413      	add	r3, r2
 80038c6:	3350      	adds	r3, #80	; 0x50
 80038c8:	681b      	ldr	r3, [r3, #0]
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	370c      	adds	r7, #12
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038d6:	b580      	push	{r7, lr}
 80038d8:	b082      	sub	sp, #8
 80038da:	af00      	add	r7, sp, #0
 80038dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4618      	mov	r0, r3
 80038e4:	f008 fbe2 	bl	800c0ac <USB_GetCurrentFrame>
 80038e8:	4603      	mov	r3, r0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b082      	sub	sp, #8
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4618      	mov	r0, r3
 8003900:	f008 fbbd 	bl	800c07e <USB_GetHostSpeed>
 8003904:	4603      	mov	r3, r0
}
 8003906:	4618      	mov	r0, r3
 8003908:	3708      	adds	r7, #8
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800390e:	b580      	push	{r7, lr}
 8003910:	b086      	sub	sp, #24
 8003912:	af00      	add	r7, sp, #0
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	460b      	mov	r3, r1
 8003918:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003920:	697b      	ldr	r3, [r7, #20]
 8003922:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68fa      	ldr	r2, [r7, #12]
 800392e:	b2d2      	uxtb	r2, r2
 8003930:	4611      	mov	r1, r2
 8003932:	4618      	mov	r0, r3
 8003934:	f008 f8ed 	bl	800bb12 <USB_ReadChInterrupts>
 8003938:	4603      	mov	r3, r0
 800393a:	f003 0304 	and.w	r3, r3, #4
 800393e:	2b04      	cmp	r3, #4
 8003940:	d11a      	bne.n	8003978 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	015a      	lsls	r2, r3, #5
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	4413      	add	r3, r2
 800394a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800394e:	461a      	mov	r2, r3
 8003950:	2304      	movs	r3, #4
 8003952:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003954:	687a      	ldr	r2, [r7, #4]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	212c      	movs	r1, #44	; 0x2c
 800395a:	fb01 f303 	mul.w	r3, r1, r3
 800395e:	4413      	add	r3, r2
 8003960:	3361      	adds	r3, #97	; 0x61
 8003962:	2207      	movs	r2, #7
 8003964:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	b2d2      	uxtb	r2, r2
 800396e:	4611      	mov	r1, r2
 8003970:	4618      	mov	r0, r3
 8003972:	f008 fe22 	bl	800c5ba <USB_HC_Halt>
 8003976:	e0a2      	b.n	8003abe <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68fa      	ldr	r2, [r7, #12]
 800397e:	b2d2      	uxtb	r2, r2
 8003980:	4611      	mov	r1, r2
 8003982:	4618      	mov	r0, r3
 8003984:	f008 f8c5 	bl	800bb12 <USB_ReadChInterrupts>
 8003988:	4603      	mov	r3, r0
 800398a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800398e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003992:	d11b      	bne.n	80039cc <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	015a      	lsls	r2, r3, #5
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	4413      	add	r3, r2
 800399c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a0:	461a      	mov	r2, r3
 80039a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039a6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3361      	adds	r3, #97	; 0x61
 80039b6:	2208      	movs	r2, #8
 80039b8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68fa      	ldr	r2, [r7, #12]
 80039c0:	b2d2      	uxtb	r2, r2
 80039c2:	4611      	mov	r1, r2
 80039c4:	4618      	mov	r0, r3
 80039c6:	f008 fdf8 	bl	800c5ba <USB_HC_Halt>
 80039ca:	e078      	b.n	8003abe <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	b2d2      	uxtb	r2, r2
 80039d4:	4611      	mov	r1, r2
 80039d6:	4618      	mov	r0, r3
 80039d8:	f008 f89b 	bl	800bb12 <USB_ReadChInterrupts>
 80039dc:	4603      	mov	r3, r0
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b08      	cmp	r3, #8
 80039e4:	d11a      	bne.n	8003a1c <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	015a      	lsls	r2, r3, #5
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	4413      	add	r3, r2
 80039ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039f2:	461a      	mov	r2, r3
 80039f4:	2308      	movs	r3, #8
 80039f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	212c      	movs	r1, #44	; 0x2c
 80039fe:	fb01 f303 	mul.w	r3, r1, r3
 8003a02:	4413      	add	r3, r2
 8003a04:	3361      	adds	r3, #97	; 0x61
 8003a06:	2206      	movs	r2, #6
 8003a08:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	b2d2      	uxtb	r2, r2
 8003a12:	4611      	mov	r1, r2
 8003a14:	4618      	mov	r0, r3
 8003a16:	f008 fdd0 	bl	800c5ba <USB_HC_Halt>
 8003a1a:	e050      	b.n	8003abe <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f008 f873 	bl	800bb12 <USB_ReadChInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a36:	d11b      	bne.n	8003a70 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	015a      	lsls	r2, r3, #5
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	4413      	add	r3, r2
 8003a40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a44:	461a      	mov	r2, r3
 8003a46:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a4a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	212c      	movs	r1, #44	; 0x2c
 8003a52:	fb01 f303 	mul.w	r3, r1, r3
 8003a56:	4413      	add	r3, r2
 8003a58:	3361      	adds	r3, #97	; 0x61
 8003a5a:	2209      	movs	r2, #9
 8003a5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	b2d2      	uxtb	r2, r2
 8003a66:	4611      	mov	r1, r2
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f008 fda6 	bl	800c5ba <USB_HC_Halt>
 8003a6e:	e026      	b.n	8003abe <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	68fa      	ldr	r2, [r7, #12]
 8003a76:	b2d2      	uxtb	r2, r2
 8003a78:	4611      	mov	r1, r2
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f008 f849 	bl	800bb12 <USB_ReadChInterrupts>
 8003a80:	4603      	mov	r3, r0
 8003a82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d119      	bne.n	8003abe <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	015a      	lsls	r2, r3, #5
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4413      	add	r3, r2
 8003a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a96:	461a      	mov	r2, r3
 8003a98:	2380      	movs	r3, #128	; 0x80
 8003a9a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	212c      	movs	r1, #44	; 0x2c
 8003aa2:	fb01 f303 	mul.w	r3, r1, r3
 8003aa6:	4413      	add	r3, r2
 8003aa8:	3361      	adds	r3, #97	; 0x61
 8003aaa:	2207      	movs	r2, #7
 8003aac:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	68fa      	ldr	r2, [r7, #12]
 8003ab4:	b2d2      	uxtb	r2, r2
 8003ab6:	4611      	mov	r1, r2
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f008 fd7e 	bl	800c5ba <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	68fa      	ldr	r2, [r7, #12]
 8003ac4:	b2d2      	uxtb	r2, r2
 8003ac6:	4611      	mov	r1, r2
 8003ac8:	4618      	mov	r0, r3
 8003aca:	f008 f822 	bl	800bb12 <USB_ReadChInterrupts>
 8003ace:	4603      	mov	r3, r0
 8003ad0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad8:	d112      	bne.n	8003b00 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	68fa      	ldr	r2, [r7, #12]
 8003ae0:	b2d2      	uxtb	r2, r2
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f008 fd68 	bl	800c5ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	015a      	lsls	r2, r3, #5
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	4413      	add	r3, r2
 8003af2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af6:	461a      	mov	r2, r3
 8003af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003afc:	6093      	str	r3, [r2, #8]
 8003afe:	e325      	b.n	800414c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	68fa      	ldr	r2, [r7, #12]
 8003b06:	b2d2      	uxtb	r2, r2
 8003b08:	4611      	mov	r1, r2
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f008 f801 	bl	800bb12 <USB_ReadChInterrupts>
 8003b10:	4603      	mov	r3, r0
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	f040 80e8 	bne.w	8003cec <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	015a      	lsls	r2, r3, #5
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	4413      	add	r3, r2
 8003b24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b28:	461a      	mov	r2, r3
 8003b2a:	2320      	movs	r3, #32
 8003b2c:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d019      	beq.n	8003b6a <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	3348      	adds	r3, #72	; 0x48
 8003b44:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	0159      	lsls	r1, r3, #5
 8003b4a:	693b      	ldr	r3, [r7, #16]
 8003b4c:	440b      	add	r3, r1
 8003b4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b58:	1ad2      	subs	r2, r2, r3
 8003b5a:	6879      	ldr	r1, [r7, #4]
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	202c      	movs	r0, #44	; 0x2c
 8003b60:	fb00 f303 	mul.w	r3, r0, r3
 8003b64:	440b      	add	r3, r1
 8003b66:	3350      	adds	r3, #80	; 0x50
 8003b68:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	212c      	movs	r1, #44	; 0x2c
 8003b70:	fb01 f303 	mul.w	r3, r1, r3
 8003b74:	4413      	add	r3, r2
 8003b76:	3361      	adds	r3, #97	; 0x61
 8003b78:	2201      	movs	r2, #1
 8003b7a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	212c      	movs	r1, #44	; 0x2c
 8003b82:	fb01 f303 	mul.w	r3, r1, r3
 8003b86:	4413      	add	r3, r2
 8003b88:	335c      	adds	r3, #92	; 0x5c
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b9a:	461a      	mov	r2, r3
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ba0:	687a      	ldr	r2, [r7, #4]
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	212c      	movs	r1, #44	; 0x2c
 8003ba6:	fb01 f303 	mul.w	r3, r1, r3
 8003baa:	4413      	add	r3, r2
 8003bac:	333f      	adds	r3, #63	; 0x3f
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003bb4:	687a      	ldr	r2, [r7, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	212c      	movs	r1, #44	; 0x2c
 8003bba:	fb01 f303 	mul.w	r3, r1, r3
 8003bbe:	4413      	add	r3, r2
 8003bc0:	333f      	adds	r3, #63	; 0x3f
 8003bc2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003bc4:	2b02      	cmp	r3, #2
 8003bc6:	d111      	bne.n	8003bec <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	68fa      	ldr	r2, [r7, #12]
 8003bce:	b2d2      	uxtb	r2, r2
 8003bd0:	4611      	mov	r1, r2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f008 fcf1 	bl	800c5ba <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	015a      	lsls	r2, r3, #5
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	4413      	add	r3, r2
 8003be0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003be4:	461a      	mov	r2, r3
 8003be6:	2310      	movs	r3, #16
 8003be8:	6093      	str	r3, [r2, #8]
 8003bea:	e03a      	b.n	8003c62 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003bec:	687a      	ldr	r2, [r7, #4]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	212c      	movs	r1, #44	; 0x2c
 8003bf2:	fb01 f303 	mul.w	r3, r1, r3
 8003bf6:	4413      	add	r3, r2
 8003bf8:	333f      	adds	r3, #63	; 0x3f
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b03      	cmp	r3, #3
 8003bfe:	d009      	beq.n	8003c14 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003c00:	687a      	ldr	r2, [r7, #4]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	212c      	movs	r1, #44	; 0x2c
 8003c06:	fb01 f303 	mul.w	r3, r1, r3
 8003c0a:	4413      	add	r3, r2
 8003c0c:	333f      	adds	r3, #63	; 0x3f
 8003c0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d126      	bne.n	8003c62 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	015a      	lsls	r2, r3, #5
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68fa      	ldr	r2, [r7, #12]
 8003c24:	0151      	lsls	r1, r2, #5
 8003c26:	693a      	ldr	r2, [r7, #16]
 8003c28:	440a      	add	r2, r1
 8003c2a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003c2e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c32:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c34:	687a      	ldr	r2, [r7, #4]
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	212c      	movs	r1, #44	; 0x2c
 8003c3a:	fb01 f303 	mul.w	r3, r1, r3
 8003c3e:	4413      	add	r3, r2
 8003c40:	3360      	adds	r3, #96	; 0x60
 8003c42:	2201      	movs	r2, #1
 8003c44:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	b2d9      	uxtb	r1, r3
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	202c      	movs	r0, #44	; 0x2c
 8003c50:	fb00 f303 	mul.w	r3, r0, r3
 8003c54:	4413      	add	r3, r2
 8003c56:	3360      	adds	r3, #96	; 0x60
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	461a      	mov	r2, r3
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f00d fe4d 	bl	80118fc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d12b      	bne.n	8003cc2 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003c6a:	687a      	ldr	r2, [r7, #4]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	212c      	movs	r1, #44	; 0x2c
 8003c70:	fb01 f303 	mul.w	r3, r1, r3
 8003c74:	4413      	add	r3, r2
 8003c76:	3348      	adds	r3, #72	; 0x48
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	6879      	ldr	r1, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	202c      	movs	r0, #44	; 0x2c
 8003c80:	fb00 f202 	mul.w	r2, r0, r2
 8003c84:	440a      	add	r2, r1
 8003c86:	3240      	adds	r2, #64	; 0x40
 8003c88:	8812      	ldrh	r2, [r2, #0]
 8003c8a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c8e:	f003 0301 	and.w	r3, r3, #1
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	f000 825a 	beq.w	800414c <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c98:	687a      	ldr	r2, [r7, #4]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	212c      	movs	r1, #44	; 0x2c
 8003c9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ca2:	4413      	add	r3, r2
 8003ca4:	3354      	adds	r3, #84	; 0x54
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	f083 0301 	eor.w	r3, r3, #1
 8003cac:	b2d8      	uxtb	r0, r3
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3354      	adds	r3, #84	; 0x54
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	701a      	strb	r2, [r3, #0]
 8003cc0:	e244      	b.n	800414c <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	3354      	adds	r3, #84	; 0x54
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	f083 0301 	eor.w	r3, r3, #1
 8003cd6:	b2d8      	uxtb	r0, r3
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	3354      	adds	r3, #84	; 0x54
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	701a      	strb	r2, [r3, #0]
 8003cea:	e22f      	b.n	800414c <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	68fa      	ldr	r2, [r7, #12]
 8003cf2:	b2d2      	uxtb	r2, r2
 8003cf4:	4611      	mov	r1, r2
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f007 ff0b 	bl	800bb12 <USB_ReadChInterrupts>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	f003 0320 	and.w	r3, r3, #32
 8003d02:	2b20      	cmp	r3, #32
 8003d04:	d109      	bne.n	8003d1a <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	461a      	mov	r2, r3
 8003d14:	2320      	movs	r3, #32
 8003d16:	6093      	str	r3, [r2, #8]
 8003d18:	e218      	b.n	800414c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68fa      	ldr	r2, [r7, #12]
 8003d20:	b2d2      	uxtb	r2, r2
 8003d22:	4611      	mov	r1, r2
 8003d24:	4618      	mov	r0, r3
 8003d26:	f007 fef4 	bl	800bb12 <USB_ReadChInterrupts>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f003 0302 	and.w	r3, r3, #2
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	f040 816b 	bne.w	800400c <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	015a      	lsls	r2, r3, #5
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	4413      	add	r3, r2
 8003d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d42:	461a      	mov	r2, r3
 8003d44:	2302      	movs	r3, #2
 8003d46:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3361      	adds	r3, #97	; 0x61
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d112      	bne.n	8003d82 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3361      	adds	r3, #97	; 0x61
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	3360      	adds	r3, #96	; 0x60
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
 8003d80:	e135      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	3361      	adds	r3, #97	; 0x61
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	2b06      	cmp	r3, #6
 8003d94:	d112      	bne.n	8003dbc <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3361      	adds	r3, #97	; 0x61
 8003da4:	2202      	movs	r2, #2
 8003da6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3360      	adds	r3, #96	; 0x60
 8003db6:	2205      	movs	r2, #5
 8003db8:	701a      	strb	r2, [r3, #0]
 8003dba:	e118      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	212c      	movs	r1, #44	; 0x2c
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	4413      	add	r3, r2
 8003dc8:	3361      	adds	r3, #97	; 0x61
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	2b07      	cmp	r3, #7
 8003dce:	d009      	beq.n	8003de4 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	212c      	movs	r1, #44	; 0x2c
 8003dd6:	fb01 f303 	mul.w	r3, r1, r3
 8003dda:	4413      	add	r3, r2
 8003ddc:	3361      	adds	r3, #97	; 0x61
 8003dde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003de0:	2b09      	cmp	r3, #9
 8003de2:	d159      	bne.n	8003e98 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	212c      	movs	r1, #44	; 0x2c
 8003dea:	fb01 f303 	mul.w	r3, r1, r3
 8003dee:	4413      	add	r3, r2
 8003df0:	3361      	adds	r3, #97	; 0x61
 8003df2:	2202      	movs	r2, #2
 8003df4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003df6:	687a      	ldr	r2, [r7, #4]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	212c      	movs	r1, #44	; 0x2c
 8003dfc:	fb01 f303 	mul.w	r3, r1, r3
 8003e00:	4413      	add	r3, r2
 8003e02:	335c      	adds	r3, #92	; 0x5c
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	1c5a      	adds	r2, r3, #1
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	202c      	movs	r0, #44	; 0x2c
 8003e0e:	fb00 f303 	mul.w	r3, r0, r3
 8003e12:	440b      	add	r3, r1
 8003e14:	335c      	adds	r3, #92	; 0x5c
 8003e16:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	335c      	adds	r3, #92	; 0x5c
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	2b02      	cmp	r3, #2
 8003e2a:	d912      	bls.n	8003e52 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	212c      	movs	r1, #44	; 0x2c
 8003e32:	fb01 f303 	mul.w	r3, r1, r3
 8003e36:	4413      	add	r3, r2
 8003e38:	335c      	adds	r3, #92	; 0x5c
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e3e:	687a      	ldr	r2, [r7, #4]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	212c      	movs	r1, #44	; 0x2c
 8003e44:	fb01 f303 	mul.w	r3, r1, r3
 8003e48:	4413      	add	r3, r2
 8003e4a:	3360      	adds	r3, #96	; 0x60
 8003e4c:	2204      	movs	r2, #4
 8003e4e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e50:	e0cd      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e52:	687a      	ldr	r2, [r7, #4]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	212c      	movs	r1, #44	; 0x2c
 8003e58:	fb01 f303 	mul.w	r3, r1, r3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	3360      	adds	r3, #96	; 0x60
 8003e60:	2202      	movs	r2, #2
 8003e62:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	015a      	lsls	r2, r3, #5
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	4413      	add	r3, r2
 8003e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e7a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e82:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	693b      	ldr	r3, [r7, #16]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e90:	461a      	mov	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e96:	e0aa      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	212c      	movs	r1, #44	; 0x2c
 8003e9e:	fb01 f303 	mul.w	r3, r1, r3
 8003ea2:	4413      	add	r3, r2
 8003ea4:	3361      	adds	r3, #97	; 0x61
 8003ea6:	781b      	ldrb	r3, [r3, #0]
 8003ea8:	2b05      	cmp	r3, #5
 8003eaa:	d109      	bne.n	8003ec0 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	212c      	movs	r1, #44	; 0x2c
 8003eb2:	fb01 f303 	mul.w	r3, r1, r3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	3361      	adds	r3, #97	; 0x61
 8003eba:	2202      	movs	r2, #2
 8003ebc:	701a      	strb	r2, [r3, #0]
 8003ebe:	e096      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003ec0:	687a      	ldr	r2, [r7, #4]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	212c      	movs	r1, #44	; 0x2c
 8003ec6:	fb01 f303 	mul.w	r3, r1, r3
 8003eca:	4413      	add	r3, r2
 8003ecc:	3361      	adds	r3, #97	; 0x61
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b03      	cmp	r3, #3
 8003ed2:	d109      	bne.n	8003ee8 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	212c      	movs	r1, #44	; 0x2c
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	3361      	adds	r3, #97	; 0x61
 8003ee2:	2202      	movs	r2, #2
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e082      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3361      	adds	r3, #97	; 0x61
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b04      	cmp	r3, #4
 8003efa:	d13f      	bne.n	8003f7c <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	3361      	adds	r3, #97	; 0x61
 8003f0a:	2202      	movs	r2, #2
 8003f0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	3360      	adds	r3, #96	; 0x60
 8003f1c:	2202      	movs	r2, #2
 8003f1e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	212c      	movs	r1, #44	; 0x2c
 8003f26:	fb01 f303 	mul.w	r3, r1, r3
 8003f2a:	4413      	add	r3, r2
 8003f2c:	333f      	adds	r3, #63	; 0x3f
 8003f2e:	781b      	ldrb	r3, [r3, #0]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d009      	beq.n	8003f48 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	212c      	movs	r1, #44	; 0x2c
 8003f3a:	fb01 f303 	mul.w	r3, r1, r3
 8003f3e:	4413      	add	r3, r2
 8003f40:	333f      	adds	r3, #63	; 0x3f
 8003f42:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f44:	2b02      	cmp	r3, #2
 8003f46:	d152      	bne.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	015a      	lsls	r2, r3, #5
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	4413      	add	r3, r2
 8003f50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003f5e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003f60:	68bb      	ldr	r3, [r7, #8]
 8003f62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003f66:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	015a      	lsls	r2, r3, #5
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4413      	add	r3, r2
 8003f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f74:	461a      	mov	r2, r3
 8003f76:	68bb      	ldr	r3, [r7, #8]
 8003f78:	6013      	str	r3, [r2, #0]
 8003f7a:	e038      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003f7c:	687a      	ldr	r2, [r7, #4]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	212c      	movs	r1, #44	; 0x2c
 8003f82:	fb01 f303 	mul.w	r3, r1, r3
 8003f86:	4413      	add	r3, r2
 8003f88:	3361      	adds	r3, #97	; 0x61
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d123      	bne.n	8003fd8 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	212c      	movs	r1, #44	; 0x2c
 8003f96:	fb01 f303 	mul.w	r3, r1, r3
 8003f9a:	4413      	add	r3, r2
 8003f9c:	3361      	adds	r3, #97	; 0x61
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	212c      	movs	r1, #44	; 0x2c
 8003fa8:	fb01 f303 	mul.w	r3, r1, r3
 8003fac:	4413      	add	r3, r2
 8003fae:	335c      	adds	r3, #92	; 0x5c
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	1c5a      	adds	r2, r3, #1
 8003fb4:	6879      	ldr	r1, [r7, #4]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	202c      	movs	r0, #44	; 0x2c
 8003fba:	fb00 f303 	mul.w	r3, r0, r3
 8003fbe:	440b      	add	r3, r1
 8003fc0:	335c      	adds	r3, #92	; 0x5c
 8003fc2:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	212c      	movs	r1, #44	; 0x2c
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	4413      	add	r3, r2
 8003fd0:	3360      	adds	r3, #96	; 0x60
 8003fd2:	2204      	movs	r2, #4
 8003fd4:	701a      	strb	r2, [r3, #0]
 8003fd6:	e00a      	b.n	8003fee <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3361      	adds	r3, #97	; 0x61
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	f000 80ae 	beq.w	800414a <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	b2d9      	uxtb	r1, r3
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	202c      	movs	r0, #44	; 0x2c
 8003ff8:	fb00 f303 	mul.w	r3, r0, r3
 8003ffc:	4413      	add	r3, r2
 8003ffe:	3360      	adds	r3, #96	; 0x60
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	461a      	mov	r2, r3
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f00d fc79 	bl	80118fc <HAL_HCD_HC_NotifyURBChange_Callback>
 800400a:	e09f      	b.n	800414c <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	b2d2      	uxtb	r2, r2
 8004014:	4611      	mov	r1, r2
 8004016:	4618      	mov	r0, r3
 8004018:	f007 fd7b 	bl	800bb12 <USB_ReadChInterrupts>
 800401c:	4603      	mov	r3, r0
 800401e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004022:	2b40      	cmp	r3, #64	; 0x40
 8004024:	d123      	bne.n	800406e <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004032:	461a      	mov	r2, r3
 8004034:	2340      	movs	r3, #64	; 0x40
 8004036:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	212c      	movs	r1, #44	; 0x2c
 800403e:	fb01 f303 	mul.w	r3, r1, r3
 8004042:	4413      	add	r3, r2
 8004044:	3361      	adds	r3, #97	; 0x61
 8004046:	2205      	movs	r2, #5
 8004048:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800404a:	687a      	ldr	r2, [r7, #4]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	212c      	movs	r1, #44	; 0x2c
 8004050:	fb01 f303 	mul.w	r3, r1, r3
 8004054:	4413      	add	r3, r2
 8004056:	335c      	adds	r3, #92	; 0x5c
 8004058:	2200      	movs	r2, #0
 800405a:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68fa      	ldr	r2, [r7, #12]
 8004062:	b2d2      	uxtb	r2, r2
 8004064:	4611      	mov	r1, r2
 8004066:	4618      	mov	r0, r3
 8004068:	f008 faa7 	bl	800c5ba <USB_HC_Halt>
 800406c:	e06e      	b.n	800414c <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	68fa      	ldr	r2, [r7, #12]
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f007 fd4a 	bl	800bb12 <USB_ReadChInterrupts>
 800407e:	4603      	mov	r3, r0
 8004080:	f003 0310 	and.w	r3, r3, #16
 8004084:	2b10      	cmp	r3, #16
 8004086:	d161      	bne.n	800414c <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	212c      	movs	r1, #44	; 0x2c
 800408e:	fb01 f303 	mul.w	r3, r1, r3
 8004092:	4413      	add	r3, r2
 8004094:	333f      	adds	r3, #63	; 0x3f
 8004096:	781b      	ldrb	r3, [r3, #0]
 8004098:	2b03      	cmp	r3, #3
 800409a:	d11a      	bne.n	80040d2 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	212c      	movs	r1, #44	; 0x2c
 80040a2:	fb01 f303 	mul.w	r3, r1, r3
 80040a6:	4413      	add	r3, r2
 80040a8:	335c      	adds	r3, #92	; 0x5c
 80040aa:	2200      	movs	r2, #0
 80040ac:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	212c      	movs	r1, #44	; 0x2c
 80040b4:	fb01 f303 	mul.w	r3, r1, r3
 80040b8:	4413      	add	r3, r2
 80040ba:	3361      	adds	r3, #97	; 0x61
 80040bc:	2204      	movs	r2, #4
 80040be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	b2d2      	uxtb	r2, r2
 80040c8:	4611      	mov	r1, r2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f008 fa75 	bl	800c5ba <USB_HC_Halt>
 80040d0:	e031      	b.n	8004136 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	212c      	movs	r1, #44	; 0x2c
 80040d8:	fb01 f303 	mul.w	r3, r1, r3
 80040dc:	4413      	add	r3, r2
 80040de:	333f      	adds	r3, #63	; 0x3f
 80040e0:	781b      	ldrb	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80040e6:	687a      	ldr	r2, [r7, #4]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	212c      	movs	r1, #44	; 0x2c
 80040ec:	fb01 f303 	mul.w	r3, r1, r3
 80040f0:	4413      	add	r3, r2
 80040f2:	333f      	adds	r3, #63	; 0x3f
 80040f4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80040f6:	2b02      	cmp	r3, #2
 80040f8:	d11d      	bne.n	8004136 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80040fa:	687a      	ldr	r2, [r7, #4]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	212c      	movs	r1, #44	; 0x2c
 8004100:	fb01 f303 	mul.w	r3, r1, r3
 8004104:	4413      	add	r3, r2
 8004106:	335c      	adds	r3, #92	; 0x5c
 8004108:	2200      	movs	r2, #0
 800410a:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d110      	bne.n	8004136 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	212c      	movs	r1, #44	; 0x2c
 800411a:	fb01 f303 	mul.w	r3, r1, r3
 800411e:	4413      	add	r3, r2
 8004120:	3361      	adds	r3, #97	; 0x61
 8004122:	2204      	movs	r2, #4
 8004124:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68fa      	ldr	r2, [r7, #12]
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	4611      	mov	r1, r2
 8004130:	4618      	mov	r0, r3
 8004132:	f008 fa42 	bl	800c5ba <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004142:	461a      	mov	r2, r3
 8004144:	2310      	movs	r3, #16
 8004146:	6093      	str	r3, [r2, #8]
 8004148:	e000      	b.n	800414c <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800414a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}

08004152 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004152:	b580      	push	{r7, lr}
 8004154:	b088      	sub	sp, #32
 8004156:	af00      	add	r7, sp, #0
 8004158:	6078      	str	r0, [r7, #4]
 800415a:	460b      	mov	r3, r1
 800415c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004168:	78fb      	ldrb	r3, [r7, #3]
 800416a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	b2d2      	uxtb	r2, r2
 8004174:	4611      	mov	r1, r2
 8004176:	4618      	mov	r0, r3
 8004178:	f007 fccb 	bl	800bb12 <USB_ReadChInterrupts>
 800417c:	4603      	mov	r3, r0
 800417e:	f003 0304 	and.w	r3, r3, #4
 8004182:	2b04      	cmp	r3, #4
 8004184:	d11a      	bne.n	80041bc <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	015a      	lsls	r2, r3, #5
 800418a:	69bb      	ldr	r3, [r7, #24]
 800418c:	4413      	add	r3, r2
 800418e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004192:	461a      	mov	r2, r3
 8004194:	2304      	movs	r3, #4
 8004196:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	212c      	movs	r1, #44	; 0x2c
 800419e:	fb01 f303 	mul.w	r3, r1, r3
 80041a2:	4413      	add	r3, r2
 80041a4:	3361      	adds	r3, #97	; 0x61
 80041a6:	2207      	movs	r2, #7
 80041a8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	697a      	ldr	r2, [r7, #20]
 80041b0:	b2d2      	uxtb	r2, r2
 80041b2:	4611      	mov	r1, r2
 80041b4:	4618      	mov	r0, r3
 80041b6:	f008 fa00 	bl	800c5ba <USB_HC_Halt>
 80041ba:	e393      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	697a      	ldr	r2, [r7, #20]
 80041c2:	b2d2      	uxtb	r2, r2
 80041c4:	4611      	mov	r1, r2
 80041c6:	4618      	mov	r0, r3
 80041c8:	f007 fca3 	bl	800bb12 <USB_ReadChInterrupts>
 80041cc:	4603      	mov	r3, r0
 80041ce:	f003 0320 	and.w	r3, r3, #32
 80041d2:	2b20      	cmp	r3, #32
 80041d4:	d137      	bne.n	8004246 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	015a      	lsls	r2, r3, #5
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	4413      	add	r3, r2
 80041de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041e2:	461a      	mov	r2, r3
 80041e4:	2320      	movs	r3, #32
 80041e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80041e8:	687a      	ldr	r2, [r7, #4]
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	212c      	movs	r1, #44	; 0x2c
 80041ee:	fb01 f303 	mul.w	r3, r1, r3
 80041f2:	4413      	add	r3, r2
 80041f4:	333d      	adds	r3, #61	; 0x3d
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	f040 8373 	bne.w	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	697b      	ldr	r3, [r7, #20]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	333d      	adds	r3, #61	; 0x3d
 800420c:	2200      	movs	r2, #0
 800420e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	212c      	movs	r1, #44	; 0x2c
 8004216:	fb01 f303 	mul.w	r3, r1, r3
 800421a:	4413      	add	r3, r2
 800421c:	3360      	adds	r3, #96	; 0x60
 800421e:	2202      	movs	r2, #2
 8004220:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	212c      	movs	r1, #44	; 0x2c
 8004228:	fb01 f303 	mul.w	r3, r1, r3
 800422c:	4413      	add	r3, r2
 800422e:	3361      	adds	r3, #97	; 0x61
 8004230:	2203      	movs	r2, #3
 8004232:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	697a      	ldr	r2, [r7, #20]
 800423a:	b2d2      	uxtb	r2, r2
 800423c:	4611      	mov	r1, r2
 800423e:	4618      	mov	r0, r3
 8004240:	f008 f9bb 	bl	800c5ba <USB_HC_Halt>
 8004244:	e34e      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	4611      	mov	r1, r2
 8004250:	4618      	mov	r0, r3
 8004252:	f007 fc5e 	bl	800bb12 <USB_ReadChInterrupts>
 8004256:	4603      	mov	r3, r0
 8004258:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800425c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004260:	d112      	bne.n	8004288 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	461a      	mov	r2, r3
 8004270:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004274:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	b2d2      	uxtb	r2, r2
 800427e:	4611      	mov	r1, r2
 8004280:	4618      	mov	r0, r3
 8004282:	f008 f99a 	bl	800c5ba <USB_HC_Halt>
 8004286:	e32d      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	697a      	ldr	r2, [r7, #20]
 800428e:	b2d2      	uxtb	r2, r2
 8004290:	4611      	mov	r1, r2
 8004292:	4618      	mov	r0, r3
 8004294:	f007 fc3d 	bl	800bb12 <USB_ReadChInterrupts>
 8004298:	4603      	mov	r3, r0
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d142      	bne.n	8004328 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	697b      	ldr	r3, [r7, #20]
 80042a6:	212c      	movs	r1, #44	; 0x2c
 80042a8:	fb01 f303 	mul.w	r3, r1, r3
 80042ac:	4413      	add	r3, r2
 80042ae:	335c      	adds	r3, #92	; 0x5c
 80042b0:	2200      	movs	r2, #0
 80042b2:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	b2d2      	uxtb	r2, r2
 80042bc:	4611      	mov	r1, r2
 80042be:	4618      	mov	r0, r3
 80042c0:	f007 fc27 	bl	800bb12 <USB_ReadChInterrupts>
 80042c4:	4603      	mov	r3, r0
 80042c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ca:	2b40      	cmp	r3, #64	; 0x40
 80042cc:	d111      	bne.n	80042f2 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	212c      	movs	r1, #44	; 0x2c
 80042d4:	fb01 f303 	mul.w	r3, r1, r3
 80042d8:	4413      	add	r3, r2
 80042da:	333d      	adds	r3, #61	; 0x3d
 80042dc:	2201      	movs	r2, #1
 80042de:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042ec:	461a      	mov	r2, r3
 80042ee:	2340      	movs	r3, #64	; 0x40
 80042f0:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	015a      	lsls	r2, r3, #5
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	4413      	add	r3, r2
 80042fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042fe:	461a      	mov	r2, r3
 8004300:	2301      	movs	r3, #1
 8004302:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	212c      	movs	r1, #44	; 0x2c
 800430a:	fb01 f303 	mul.w	r3, r1, r3
 800430e:	4413      	add	r3, r2
 8004310:	3361      	adds	r3, #97	; 0x61
 8004312:	2201      	movs	r2, #1
 8004314:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	697a      	ldr	r2, [r7, #20]
 800431c:	b2d2      	uxtb	r2, r2
 800431e:	4611      	mov	r1, r2
 8004320:	4618      	mov	r0, r3
 8004322:	f008 f94a 	bl	800c5ba <USB_HC_Halt>
 8004326:	e2dd      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	b2d2      	uxtb	r2, r2
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f007 fbed 	bl	800bb12 <USB_ReadChInterrupts>
 8004338:	4603      	mov	r3, r0
 800433a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800433e:	2b40      	cmp	r3, #64	; 0x40
 8004340:	d12c      	bne.n	800439c <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8004342:	687a      	ldr	r2, [r7, #4]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	212c      	movs	r1, #44	; 0x2c
 8004348:	fb01 f303 	mul.w	r3, r1, r3
 800434c:	4413      	add	r3, r2
 800434e:	3361      	adds	r3, #97	; 0x61
 8004350:	2205      	movs	r2, #5
 8004352:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	212c      	movs	r1, #44	; 0x2c
 800435a:	fb01 f303 	mul.w	r3, r1, r3
 800435e:	4413      	add	r3, r2
 8004360:	333d      	adds	r3, #61	; 0x3d
 8004362:	2201      	movs	r2, #1
 8004364:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	335c      	adds	r3, #92	; 0x5c
 8004374:	2200      	movs	r2, #0
 8004376:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	b2d2      	uxtb	r2, r2
 8004380:	4611      	mov	r1, r2
 8004382:	4618      	mov	r0, r3
 8004384:	f008 f919 	bl	800c5ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004394:	461a      	mov	r2, r3
 8004396:	2340      	movs	r3, #64	; 0x40
 8004398:	6093      	str	r3, [r2, #8]
 800439a:	e2a3      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	697a      	ldr	r2, [r7, #20]
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	4611      	mov	r1, r2
 80043a6:	4618      	mov	r0, r3
 80043a8:	f007 fbb3 	bl	800bb12 <USB_ReadChInterrupts>
 80043ac:	4603      	mov	r3, r0
 80043ae:	f003 0308 	and.w	r3, r3, #8
 80043b2:	2b08      	cmp	r3, #8
 80043b4:	d11a      	bne.n	80043ec <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80043b6:	697b      	ldr	r3, [r7, #20]
 80043b8:	015a      	lsls	r2, r3, #5
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4413      	add	r3, r2
 80043be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043c2:	461a      	mov	r2, r3
 80043c4:	2308      	movs	r3, #8
 80043c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80043c8:	687a      	ldr	r2, [r7, #4]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	212c      	movs	r1, #44	; 0x2c
 80043ce:	fb01 f303 	mul.w	r3, r1, r3
 80043d2:	4413      	add	r3, r2
 80043d4:	3361      	adds	r3, #97	; 0x61
 80043d6:	2206      	movs	r2, #6
 80043d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	b2d2      	uxtb	r2, r2
 80043e2:	4611      	mov	r1, r2
 80043e4:	4618      	mov	r0, r3
 80043e6:	f008 f8e8 	bl	800c5ba <USB_HC_Halt>
 80043ea:	e27b      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	697a      	ldr	r2, [r7, #20]
 80043f2:	b2d2      	uxtb	r2, r2
 80043f4:	4611      	mov	r1, r2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f007 fb8b 	bl	800bb12 <USB_ReadChInterrupts>
 80043fc:	4603      	mov	r3, r0
 80043fe:	f003 0310 	and.w	r3, r3, #16
 8004402:	2b10      	cmp	r3, #16
 8004404:	d140      	bne.n	8004488 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	212c      	movs	r1, #44	; 0x2c
 800440c:	fb01 f303 	mul.w	r3, r1, r3
 8004410:	4413      	add	r3, r2
 8004412:	335c      	adds	r3, #92	; 0x5c
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004418:	687a      	ldr	r2, [r7, #4]
 800441a:	697b      	ldr	r3, [r7, #20]
 800441c:	212c      	movs	r1, #44	; 0x2c
 800441e:	fb01 f303 	mul.w	r3, r1, r3
 8004422:	4413      	add	r3, r2
 8004424:	3361      	adds	r3, #97	; 0x61
 8004426:	2204      	movs	r2, #4
 8004428:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	212c      	movs	r1, #44	; 0x2c
 8004430:	fb01 f303 	mul.w	r3, r1, r3
 8004434:	4413      	add	r3, r2
 8004436:	333d      	adds	r3, #61	; 0x3d
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d112      	bne.n	8004464 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	212c      	movs	r1, #44	; 0x2c
 8004444:	fb01 f303 	mul.w	r3, r1, r3
 8004448:	4413      	add	r3, r2
 800444a:	333c      	adds	r3, #60	; 0x3c
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d108      	bne.n	8004464 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	212c      	movs	r1, #44	; 0x2c
 8004458:	fb01 f303 	mul.w	r3, r1, r3
 800445c:	4413      	add	r3, r2
 800445e:	333d      	adds	r3, #61	; 0x3d
 8004460:	2201      	movs	r2, #1
 8004462:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	697a      	ldr	r2, [r7, #20]
 800446a:	b2d2      	uxtb	r2, r2
 800446c:	4611      	mov	r1, r2
 800446e:	4618      	mov	r0, r3
 8004470:	f008 f8a3 	bl	800c5ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	015a      	lsls	r2, r3, #5
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	4413      	add	r3, r2
 800447c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004480:	461a      	mov	r2, r3
 8004482:	2310      	movs	r3, #16
 8004484:	6093      	str	r3, [r2, #8]
 8004486:	e22d      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	697a      	ldr	r2, [r7, #20]
 800448e:	b2d2      	uxtb	r2, r2
 8004490:	4611      	mov	r1, r2
 8004492:	4618      	mov	r0, r3
 8004494:	f007 fb3d 	bl	800bb12 <USB_ReadChInterrupts>
 8004498:	4603      	mov	r3, r0
 800449a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d164      	bne.n	800456c <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d111      	bne.n	80044ce <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	212c      	movs	r1, #44	; 0x2c
 80044b0:	fb01 f303 	mul.w	r3, r1, r3
 80044b4:	4413      	add	r3, r2
 80044b6:	3361      	adds	r3, #97	; 0x61
 80044b8:	2207      	movs	r2, #7
 80044ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	697a      	ldr	r2, [r7, #20]
 80044c2:	b2d2      	uxtb	r2, r2
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f008 f877 	bl	800c5ba <USB_HC_Halt>
 80044cc:	e044      	b.n	8004558 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80044ce:	687a      	ldr	r2, [r7, #4]
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	212c      	movs	r1, #44	; 0x2c
 80044d4:	fb01 f303 	mul.w	r3, r1, r3
 80044d8:	4413      	add	r3, r2
 80044da:	335c      	adds	r3, #92	; 0x5c
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	6879      	ldr	r1, [r7, #4]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	202c      	movs	r0, #44	; 0x2c
 80044e6:	fb00 f303 	mul.w	r3, r0, r3
 80044ea:	440b      	add	r3, r1
 80044ec:	335c      	adds	r3, #92	; 0x5c
 80044ee:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	212c      	movs	r1, #44	; 0x2c
 80044f6:	fb01 f303 	mul.w	r3, r1, r3
 80044fa:	4413      	add	r3, r2
 80044fc:	335c      	adds	r3, #92	; 0x5c
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b02      	cmp	r3, #2
 8004502:	d920      	bls.n	8004546 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	212c      	movs	r1, #44	; 0x2c
 800450a:	fb01 f303 	mul.w	r3, r1, r3
 800450e:	4413      	add	r3, r2
 8004510:	335c      	adds	r3, #92	; 0x5c
 8004512:	2200      	movs	r2, #0
 8004514:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	212c      	movs	r1, #44	; 0x2c
 800451c:	fb01 f303 	mul.w	r3, r1, r3
 8004520:	4413      	add	r3, r2
 8004522:	3360      	adds	r3, #96	; 0x60
 8004524:	2204      	movs	r2, #4
 8004526:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	b2d9      	uxtb	r1, r3
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	202c      	movs	r0, #44	; 0x2c
 8004532:	fb00 f303 	mul.w	r3, r0, r3
 8004536:	4413      	add	r3, r2
 8004538:	3360      	adds	r3, #96	; 0x60
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	461a      	mov	r2, r3
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f00d f9dc 	bl	80118fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8004544:	e008      	b.n	8004558 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	212c      	movs	r1, #44	; 0x2c
 800454c:	fb01 f303 	mul.w	r3, r1, r3
 8004550:	4413      	add	r3, r2
 8004552:	3360      	adds	r3, #96	; 0x60
 8004554:	2202      	movs	r2, #2
 8004556:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	015a      	lsls	r2, r3, #5
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	4413      	add	r3, r2
 8004560:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004564:	461a      	mov	r2, r3
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	6093      	str	r3, [r2, #8]
 800456a:	e1bb      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	697a      	ldr	r2, [r7, #20]
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	4611      	mov	r1, r2
 8004576:	4618      	mov	r0, r3
 8004578:	f007 facb 	bl	800bb12 <USB_ReadChInterrupts>
 800457c:	4603      	mov	r3, r0
 800457e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004582:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004586:	d11b      	bne.n	80045c0 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	3361      	adds	r3, #97	; 0x61
 8004596:	2209      	movs	r2, #9
 8004598:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	b2d2      	uxtb	r2, r2
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f008 f808 	bl	800c5ba <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	015a      	lsls	r2, r3, #5
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	4413      	add	r3, r2
 80045b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045b6:	461a      	mov	r2, r3
 80045b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80045bc:	6093      	str	r3, [r2, #8]
 80045be:	e191      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	4611      	mov	r1, r2
 80045ca:	4618      	mov	r0, r3
 80045cc:	f007 faa1 	bl	800bb12 <USB_ReadChInterrupts>
 80045d0:	4603      	mov	r3, r0
 80045d2:	f003 0302 	and.w	r3, r3, #2
 80045d6:	2b02      	cmp	r3, #2
 80045d8:	f040 8184 	bne.w	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80045dc:	697b      	ldr	r3, [r7, #20]
 80045de:	015a      	lsls	r2, r3, #5
 80045e0:	69bb      	ldr	r3, [r7, #24]
 80045e2:	4413      	add	r3, r2
 80045e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045e8:	461a      	mov	r2, r3
 80045ea:	2302      	movs	r3, #2
 80045ec:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	212c      	movs	r1, #44	; 0x2c
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	4413      	add	r3, r2
 80045fa:	3361      	adds	r3, #97	; 0x61
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b01      	cmp	r3, #1
 8004600:	f040 8087 	bne.w	8004712 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004604:	687a      	ldr	r2, [r7, #4]
 8004606:	697b      	ldr	r3, [r7, #20]
 8004608:	212c      	movs	r1, #44	; 0x2c
 800460a:	fb01 f303 	mul.w	r3, r1, r3
 800460e:	4413      	add	r3, r2
 8004610:	3361      	adds	r3, #97	; 0x61
 8004612:	2202      	movs	r2, #2
 8004614:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	212c      	movs	r1, #44	; 0x2c
 800461c:	fb01 f303 	mul.w	r3, r1, r3
 8004620:	4413      	add	r3, r2
 8004622:	3360      	adds	r3, #96	; 0x60
 8004624:	2201      	movs	r2, #1
 8004626:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004628:	687a      	ldr	r2, [r7, #4]
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	212c      	movs	r1, #44	; 0x2c
 800462e:	fb01 f303 	mul.w	r3, r1, r3
 8004632:	4413      	add	r3, r2
 8004634:	333f      	adds	r3, #63	; 0x3f
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b02      	cmp	r3, #2
 800463a:	d00a      	beq.n	8004652 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800463c:	687a      	ldr	r2, [r7, #4]
 800463e:	697b      	ldr	r3, [r7, #20]
 8004640:	212c      	movs	r1, #44	; 0x2c
 8004642:	fb01 f303 	mul.w	r3, r1, r3
 8004646:	4413      	add	r3, r2
 8004648:	333f      	adds	r3, #63	; 0x3f
 800464a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800464c:	2b03      	cmp	r3, #3
 800464e:	f040 8139 	bne.w	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d113      	bne.n	8004682 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800465a:	687a      	ldr	r2, [r7, #4]
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	212c      	movs	r1, #44	; 0x2c
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	3355      	adds	r3, #85	; 0x55
 8004668:	781b      	ldrb	r3, [r3, #0]
 800466a:	f083 0301 	eor.w	r3, r3, #1
 800466e:	b2d8      	uxtb	r0, r3
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	212c      	movs	r1, #44	; 0x2c
 8004676:	fb01 f303 	mul.w	r3, r1, r3
 800467a:	4413      	add	r3, r2
 800467c:	3355      	adds	r3, #85	; 0x55
 800467e:	4602      	mov	r2, r0
 8004680:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	2b01      	cmp	r3, #1
 8004688:	f040 811c 	bne.w	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
 800468c:	687a      	ldr	r2, [r7, #4]
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	212c      	movs	r1, #44	; 0x2c
 8004692:	fb01 f303 	mul.w	r3, r1, r3
 8004696:	4413      	add	r3, r2
 8004698:	334c      	adds	r3, #76	; 0x4c
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	f000 8111 	beq.w	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	212c      	movs	r1, #44	; 0x2c
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	334c      	adds	r3, #76	; 0x4c
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	6879      	ldr	r1, [r7, #4]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	202c      	movs	r0, #44	; 0x2c
 80046b8:	fb00 f202 	mul.w	r2, r0, r2
 80046bc:	440a      	add	r2, r1
 80046be:	3240      	adds	r2, #64	; 0x40
 80046c0:	8812      	ldrh	r2, [r2, #0]
 80046c2:	4413      	add	r3, r2
 80046c4:	3b01      	subs	r3, #1
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	202c      	movs	r0, #44	; 0x2c
 80046cc:	fb00 f202 	mul.w	r2, r0, r2
 80046d0:	440a      	add	r2, r1
 80046d2:	3240      	adds	r2, #64	; 0x40
 80046d4:	8812      	ldrh	r2, [r2, #0]
 80046d6:	fbb3 f3f2 	udiv	r3, r3, r2
 80046da:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	f000 80ee 	beq.w	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80046e8:	687a      	ldr	r2, [r7, #4]
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	212c      	movs	r1, #44	; 0x2c
 80046ee:	fb01 f303 	mul.w	r3, r1, r3
 80046f2:	4413      	add	r3, r2
 80046f4:	3355      	adds	r3, #85	; 0x55
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	f083 0301 	eor.w	r3, r3, #1
 80046fc:	b2d8      	uxtb	r0, r3
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	212c      	movs	r1, #44	; 0x2c
 8004704:	fb01 f303 	mul.w	r3, r1, r3
 8004708:	4413      	add	r3, r2
 800470a:	3355      	adds	r3, #85	; 0x55
 800470c:	4602      	mov	r2, r0
 800470e:	701a      	strb	r2, [r3, #0]
 8004710:	e0d8      	b.n	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8004712:	687a      	ldr	r2, [r7, #4]
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	212c      	movs	r1, #44	; 0x2c
 8004718:	fb01 f303 	mul.w	r3, r1, r3
 800471c:	4413      	add	r3, r2
 800471e:	3361      	adds	r3, #97	; 0x61
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d109      	bne.n	800473a <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004726:	687a      	ldr	r2, [r7, #4]
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	212c      	movs	r1, #44	; 0x2c
 800472c:	fb01 f303 	mul.w	r3, r1, r3
 8004730:	4413      	add	r3, r2
 8004732:	3361      	adds	r3, #97	; 0x61
 8004734:	2202      	movs	r2, #2
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e0c4      	b.n	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	212c      	movs	r1, #44	; 0x2c
 8004740:	fb01 f303 	mul.w	r3, r1, r3
 8004744:	4413      	add	r3, r2
 8004746:	3361      	adds	r3, #97	; 0x61
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b04      	cmp	r3, #4
 800474c:	d112      	bne.n	8004774 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	697b      	ldr	r3, [r7, #20]
 8004752:	212c      	movs	r1, #44	; 0x2c
 8004754:	fb01 f303 	mul.w	r3, r1, r3
 8004758:	4413      	add	r3, r2
 800475a:	3361      	adds	r3, #97	; 0x61
 800475c:	2202      	movs	r2, #2
 800475e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004760:	687a      	ldr	r2, [r7, #4]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	212c      	movs	r1, #44	; 0x2c
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	4413      	add	r3, r2
 800476c:	3360      	adds	r3, #96	; 0x60
 800476e:	2202      	movs	r2, #2
 8004770:	701a      	strb	r2, [r3, #0]
 8004772:	e0a7      	b.n	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	212c      	movs	r1, #44	; 0x2c
 800477a:	fb01 f303 	mul.w	r3, r1, r3
 800477e:	4413      	add	r3, r2
 8004780:	3361      	adds	r3, #97	; 0x61
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b05      	cmp	r3, #5
 8004786:	d112      	bne.n	80047ae <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004788:	687a      	ldr	r2, [r7, #4]
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	212c      	movs	r1, #44	; 0x2c
 800478e:	fb01 f303 	mul.w	r3, r1, r3
 8004792:	4413      	add	r3, r2
 8004794:	3361      	adds	r3, #97	; 0x61
 8004796:	2202      	movs	r2, #2
 8004798:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800479a:	687a      	ldr	r2, [r7, #4]
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	212c      	movs	r1, #44	; 0x2c
 80047a0:	fb01 f303 	mul.w	r3, r1, r3
 80047a4:	4413      	add	r3, r2
 80047a6:	3360      	adds	r3, #96	; 0x60
 80047a8:	2202      	movs	r2, #2
 80047aa:	701a      	strb	r2, [r3, #0]
 80047ac:	e08a      	b.n	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80047ae:	687a      	ldr	r2, [r7, #4]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	212c      	movs	r1, #44	; 0x2c
 80047b4:	fb01 f303 	mul.w	r3, r1, r3
 80047b8:	4413      	add	r3, r2
 80047ba:	3361      	adds	r3, #97	; 0x61
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b06      	cmp	r3, #6
 80047c0:	d112      	bne.n	80047e8 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80047c2:	687a      	ldr	r2, [r7, #4]
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	212c      	movs	r1, #44	; 0x2c
 80047c8:	fb01 f303 	mul.w	r3, r1, r3
 80047cc:	4413      	add	r3, r2
 80047ce:	3361      	adds	r3, #97	; 0x61
 80047d0:	2202      	movs	r2, #2
 80047d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	212c      	movs	r1, #44	; 0x2c
 80047da:	fb01 f303 	mul.w	r3, r1, r3
 80047de:	4413      	add	r3, r2
 80047e0:	3360      	adds	r3, #96	; 0x60
 80047e2:	2205      	movs	r2, #5
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e06d      	b.n	80048c4 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80047e8:	687a      	ldr	r2, [r7, #4]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	212c      	movs	r1, #44	; 0x2c
 80047ee:	fb01 f303 	mul.w	r3, r1, r3
 80047f2:	4413      	add	r3, r2
 80047f4:	3361      	adds	r3, #97	; 0x61
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	2b07      	cmp	r3, #7
 80047fa:	d009      	beq.n	8004810 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	212c      	movs	r1, #44	; 0x2c
 8004802:	fb01 f303 	mul.w	r3, r1, r3
 8004806:	4413      	add	r3, r2
 8004808:	3361      	adds	r3, #97	; 0x61
 800480a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800480c:	2b09      	cmp	r3, #9
 800480e:	d168      	bne.n	80048e2 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	697b      	ldr	r3, [r7, #20]
 8004814:	212c      	movs	r1, #44	; 0x2c
 8004816:	fb01 f303 	mul.w	r3, r1, r3
 800481a:	4413      	add	r3, r2
 800481c:	3361      	adds	r3, #97	; 0x61
 800481e:	2202      	movs	r2, #2
 8004820:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	697b      	ldr	r3, [r7, #20]
 8004826:	212c      	movs	r1, #44	; 0x2c
 8004828:	fb01 f303 	mul.w	r3, r1, r3
 800482c:	4413      	add	r3, r2
 800482e:	335c      	adds	r3, #92	; 0x5c
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	1c5a      	adds	r2, r3, #1
 8004834:	6879      	ldr	r1, [r7, #4]
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	202c      	movs	r0, #44	; 0x2c
 800483a:	fb00 f303 	mul.w	r3, r0, r3
 800483e:	440b      	add	r3, r1
 8004840:	335c      	adds	r3, #92	; 0x5c
 8004842:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004844:	687a      	ldr	r2, [r7, #4]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	212c      	movs	r1, #44	; 0x2c
 800484a:	fb01 f303 	mul.w	r3, r1, r3
 800484e:	4413      	add	r3, r2
 8004850:	335c      	adds	r3, #92	; 0x5c
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b02      	cmp	r3, #2
 8004856:	d912      	bls.n	800487e <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004858:	687a      	ldr	r2, [r7, #4]
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	212c      	movs	r1, #44	; 0x2c
 800485e:	fb01 f303 	mul.w	r3, r1, r3
 8004862:	4413      	add	r3, r2
 8004864:	335c      	adds	r3, #92	; 0x5c
 8004866:	2200      	movs	r2, #0
 8004868:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800486a:	687a      	ldr	r2, [r7, #4]
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	212c      	movs	r1, #44	; 0x2c
 8004870:	fb01 f303 	mul.w	r3, r1, r3
 8004874:	4413      	add	r3, r2
 8004876:	3360      	adds	r3, #96	; 0x60
 8004878:	2204      	movs	r2, #4
 800487a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800487c:	e021      	b.n	80048c2 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800487e:	687a      	ldr	r2, [r7, #4]
 8004880:	697b      	ldr	r3, [r7, #20]
 8004882:	212c      	movs	r1, #44	; 0x2c
 8004884:	fb01 f303 	mul.w	r3, r1, r3
 8004888:	4413      	add	r3, r2
 800488a:	3360      	adds	r3, #96	; 0x60
 800488c:	2202      	movs	r2, #2
 800488e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	4413      	add	r3, r2
 8004898:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048a6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80048a8:	693b      	ldr	r3, [r7, #16]
 80048aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80048ae:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80048b0:	697b      	ldr	r3, [r7, #20]
 80048b2:	015a      	lsls	r2, r3, #5
 80048b4:	69bb      	ldr	r3, [r7, #24]
 80048b6:	4413      	add	r3, r2
 80048b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048bc:	461a      	mov	r2, r3
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80048c2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80048c4:	697b      	ldr	r3, [r7, #20]
 80048c6:	b2d9      	uxtb	r1, r3
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	202c      	movs	r0, #44	; 0x2c
 80048ce:	fb00 f303 	mul.w	r3, r0, r3
 80048d2:	4413      	add	r3, r2
 80048d4:	3360      	adds	r3, #96	; 0x60
 80048d6:	781b      	ldrb	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f00d f80e 	bl	80118fc <HAL_HCD_HC_NotifyURBChange_Callback>
 80048e0:	e000      	b.n	80048e4 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 80048e2:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80048e4:	3720      	adds	r7, #32
 80048e6:	46bd      	mov	sp, r7
 80048e8:	bd80      	pop	{r7, pc}

080048ea <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80048ea:	b580      	push	{r7, lr}
 80048ec:	b08a      	sub	sp, #40	; 0x28
 80048ee:	af00      	add	r7, sp, #0
 80048f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048fa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	6a1b      	ldr	r3, [r3, #32]
 8004902:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f003 030f 	and.w	r3, r3, #15
 800490a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	0c5b      	lsrs	r3, r3, #17
 8004910:	f003 030f 	and.w	r3, r3, #15
 8004914:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	091b      	lsrs	r3, r3, #4
 800491a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800491e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004920:	697b      	ldr	r3, [r7, #20]
 8004922:	2b02      	cmp	r3, #2
 8004924:	d004      	beq.n	8004930 <HCD_RXQLVL_IRQHandler+0x46>
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	2b05      	cmp	r3, #5
 800492a:	f000 80a9 	beq.w	8004a80 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800492e:	e0aa      	b.n	8004a86 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004930:	693b      	ldr	r3, [r7, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	f000 80a6 	beq.w	8004a84 <HCD_RXQLVL_IRQHandler+0x19a>
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	69bb      	ldr	r3, [r7, #24]
 800493c:	212c      	movs	r1, #44	; 0x2c
 800493e:	fb01 f303 	mul.w	r3, r1, r3
 8004942:	4413      	add	r3, r2
 8004944:	3344      	adds	r3, #68	; 0x44
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	f000 809b 	beq.w	8004a84 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	3350      	adds	r3, #80	; 0x50
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	441a      	add	r2, r3
 8004962:	6879      	ldr	r1, [r7, #4]
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	202c      	movs	r0, #44	; 0x2c
 8004968:	fb00 f303 	mul.w	r3, r0, r3
 800496c:	440b      	add	r3, r1
 800496e:	334c      	adds	r3, #76	; 0x4c
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d87a      	bhi.n	8004a6c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	212c      	movs	r1, #44	; 0x2c
 8004980:	fb01 f303 	mul.w	r3, r1, r3
 8004984:	4413      	add	r3, r2
 8004986:	3344      	adds	r3, #68	; 0x44
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	693a      	ldr	r2, [r7, #16]
 800498c:	b292      	uxth	r2, r2
 800498e:	4619      	mov	r1, r3
 8004990:	f006 ff18 	bl	800b7c4 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	69bb      	ldr	r3, [r7, #24]
 8004998:	212c      	movs	r1, #44	; 0x2c
 800499a:	fb01 f303 	mul.w	r3, r1, r3
 800499e:	4413      	add	r3, r2
 80049a0:	3344      	adds	r3, #68	; 0x44
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	441a      	add	r2, r3
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	202c      	movs	r0, #44	; 0x2c
 80049ae:	fb00 f303 	mul.w	r3, r0, r3
 80049b2:	440b      	add	r3, r1
 80049b4:	3344      	adds	r3, #68	; 0x44
 80049b6:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	212c      	movs	r1, #44	; 0x2c
 80049be:	fb01 f303 	mul.w	r3, r1, r3
 80049c2:	4413      	add	r3, r2
 80049c4:	3350      	adds	r3, #80	; 0x50
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	693b      	ldr	r3, [r7, #16]
 80049ca:	441a      	add	r2, r3
 80049cc:	6879      	ldr	r1, [r7, #4]
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	202c      	movs	r0, #44	; 0x2c
 80049d2:	fb00 f303 	mul.w	r3, r0, r3
 80049d6:	440b      	add	r3, r1
 80049d8:	3350      	adds	r3, #80	; 0x50
 80049da:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80049dc:	69bb      	ldr	r3, [r7, #24]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	0cdb      	lsrs	r3, r3, #19
 80049ec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80049f0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80049f2:	687a      	ldr	r2, [r7, #4]
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	212c      	movs	r1, #44	; 0x2c
 80049f8:	fb01 f303 	mul.w	r3, r1, r3
 80049fc:	4413      	add	r3, r2
 80049fe:	3340      	adds	r3, #64	; 0x40
 8004a00:	881b      	ldrh	r3, [r3, #0]
 8004a02:	461a      	mov	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d13c      	bne.n	8004a84 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d039      	beq.n	8004a84 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	015a      	lsls	r2, r3, #5
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	4413      	add	r3, r2
 8004a18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004a26:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004a2e:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	015a      	lsls	r2, r3, #5
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	4413      	add	r3, r2
 8004a38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	212c      	movs	r1, #44	; 0x2c
 8004a48:	fb01 f303 	mul.w	r3, r1, r3
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3354      	adds	r3, #84	; 0x54
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	f083 0301 	eor.w	r3, r3, #1
 8004a56:	b2d8      	uxtb	r0, r3
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	212c      	movs	r1, #44	; 0x2c
 8004a5e:	fb01 f303 	mul.w	r3, r1, r3
 8004a62:	4413      	add	r3, r2
 8004a64:	3354      	adds	r3, #84	; 0x54
 8004a66:	4602      	mov	r2, r0
 8004a68:	701a      	strb	r2, [r3, #0]
      break;
 8004a6a:	e00b      	b.n	8004a84 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004a6c:	687a      	ldr	r2, [r7, #4]
 8004a6e:	69bb      	ldr	r3, [r7, #24]
 8004a70:	212c      	movs	r1, #44	; 0x2c
 8004a72:	fb01 f303 	mul.w	r3, r1, r3
 8004a76:	4413      	add	r3, r2
 8004a78:	3360      	adds	r3, #96	; 0x60
 8004a7a:	2204      	movs	r2, #4
 8004a7c:	701a      	strb	r2, [r3, #0]
      break;
 8004a7e:	e001      	b.n	8004a84 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004a80:	bf00      	nop
 8004a82:	e000      	b.n	8004a86 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004a84:	bf00      	nop
  }
}
 8004a86:	bf00      	nop
 8004a88:	3728      	adds	r7, #40	; 0x28
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	bd80      	pop	{r7, pc}

08004a8e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a8e:	b580      	push	{r7, lr}
 8004a90:	b086      	sub	sp, #24
 8004a92:	af00      	add	r7, sp, #0
 8004a94:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004aba:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f003 0302 	and.w	r3, r3, #2
 8004ac2:	2b02      	cmp	r3, #2
 8004ac4:	d10b      	bne.n	8004ade <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f003 0301 	and.w	r3, r3, #1
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d102      	bne.n	8004ad6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f00c fef7 	bl	80118c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f043 0302 	orr.w	r3, r3, #2
 8004adc:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f003 0308 	and.w	r3, r3, #8
 8004ae4:	2b08      	cmp	r3, #8
 8004ae6:	d132      	bne.n	8004b4e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	f043 0308 	orr.w	r3, r3, #8
 8004aee:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f003 0304 	and.w	r3, r3, #4
 8004af6:	2b04      	cmp	r3, #4
 8004af8:	d126      	bne.n	8004b48 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d113      	bne.n	8004b2a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004b08:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004b0c:	d106      	bne.n	8004b1c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	2102      	movs	r1, #2
 8004b14:	4618      	mov	r0, r3
 8004b16:	f007 fa15 	bl	800bf44 <USB_InitFSLSPClkSel>
 8004b1a:	e011      	b.n	8004b40 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2101      	movs	r1, #1
 8004b22:	4618      	mov	r0, r3
 8004b24:	f007 fa0e 	bl	800bf44 <USB_InitFSLSPClkSel>
 8004b28:	e00a      	b.n	8004b40 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	2b01      	cmp	r3, #1
 8004b30:	d106      	bne.n	8004b40 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004b38:	461a      	mov	r2, r3
 8004b3a:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004b3e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004b40:	6878      	ldr	r0, [r7, #4]
 8004b42:	f00c fee9 	bl	8011918 <HAL_HCD_PortEnabled_Callback>
 8004b46:	e002      	b.n	8004b4e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f00c fef3 	bl	8011934 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b20      	cmp	r3, #32
 8004b56:	d103      	bne.n	8004b60 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f043 0320 	orr.w	r3, r3, #32
 8004b5e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	6013      	str	r3, [r2, #0]
}
 8004b6c:	bf00      	nop
 8004b6e:	3718      	adds	r7, #24
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004b74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b76:	b08f      	sub	sp, #60	; 0x3c
 8004b78:	af0a      	add	r7, sp, #40	; 0x28
 8004b7a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d101      	bne.n	8004b86 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e116      	b.n	8004db4 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d106      	bne.n	8004ba6 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f00c fa47 	bl	8011034 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2203      	movs	r2, #3
 8004baa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d102      	bne.n	8004bc0 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4618      	mov	r0, r3
 8004bc6:	f005 fda8 	bl	800a71a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	603b      	str	r3, [r7, #0]
 8004bd0:	687e      	ldr	r6, [r7, #4]
 8004bd2:	466d      	mov	r5, sp
 8004bd4:	f106 0410 	add.w	r4, r6, #16
 8004bd8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004bdc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004bde:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004be0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004be4:	e885 0003 	stmia.w	r5, {r0, r1}
 8004be8:	1d33      	adds	r3, r6, #4
 8004bea:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004bec:	6838      	ldr	r0, [r7, #0]
 8004bee:	f005 fc89 	bl	800a504 <USB_CoreInit>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d005      	beq.n	8004c04 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2202      	movs	r2, #2
 8004bfc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	e0d7      	b.n	8004db4 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2100      	movs	r1, #0
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f005 fd96 	bl	800a73c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004c10:	2300      	movs	r3, #0
 8004c12:	73fb      	strb	r3, [r7, #15]
 8004c14:	e04a      	b.n	8004cac <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004c16:	7bfa      	ldrb	r2, [r7, #15]
 8004c18:	6879      	ldr	r1, [r7, #4]
 8004c1a:	4613      	mov	r3, r2
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4413      	add	r3, r2
 8004c20:	009b      	lsls	r3, r3, #2
 8004c22:	440b      	add	r3, r1
 8004c24:	333d      	adds	r3, #61	; 0x3d
 8004c26:	2201      	movs	r2, #1
 8004c28:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004c2a:	7bfa      	ldrb	r2, [r7, #15]
 8004c2c:	6879      	ldr	r1, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4413      	add	r3, r2
 8004c34:	009b      	lsls	r3, r3, #2
 8004c36:	440b      	add	r3, r1
 8004c38:	333c      	adds	r3, #60	; 0x3c
 8004c3a:	7bfa      	ldrb	r2, [r7, #15]
 8004c3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004c3e:	7bfa      	ldrb	r2, [r7, #15]
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
 8004c42:	b298      	uxth	r0, r3
 8004c44:	6879      	ldr	r1, [r7, #4]
 8004c46:	4613      	mov	r3, r2
 8004c48:	00db      	lsls	r3, r3, #3
 8004c4a:	4413      	add	r3, r2
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	440b      	add	r3, r1
 8004c50:	3344      	adds	r3, #68	; 0x44
 8004c52:	4602      	mov	r2, r0
 8004c54:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004c56:	7bfa      	ldrb	r2, [r7, #15]
 8004c58:	6879      	ldr	r1, [r7, #4]
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	00db      	lsls	r3, r3, #3
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	440b      	add	r3, r1
 8004c64:	3340      	adds	r3, #64	; 0x40
 8004c66:	2200      	movs	r2, #0
 8004c68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004c6a:	7bfa      	ldrb	r2, [r7, #15]
 8004c6c:	6879      	ldr	r1, [r7, #4]
 8004c6e:	4613      	mov	r3, r2
 8004c70:	00db      	lsls	r3, r3, #3
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	3348      	adds	r3, #72	; 0x48
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004c7e:	7bfa      	ldrb	r2, [r7, #15]
 8004c80:	6879      	ldr	r1, [r7, #4]
 8004c82:	4613      	mov	r3, r2
 8004c84:	00db      	lsls	r3, r3, #3
 8004c86:	4413      	add	r3, r2
 8004c88:	009b      	lsls	r3, r3, #2
 8004c8a:	440b      	add	r3, r1
 8004c8c:	334c      	adds	r3, #76	; 0x4c
 8004c8e:	2200      	movs	r2, #0
 8004c90:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004c92:	7bfa      	ldrb	r2, [r7, #15]
 8004c94:	6879      	ldr	r1, [r7, #4]
 8004c96:	4613      	mov	r3, r2
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	3354      	adds	r3, #84	; 0x54
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ca6:	7bfb      	ldrb	r3, [r7, #15]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	73fb      	strb	r3, [r7, #15]
 8004cac:	7bfa      	ldrb	r2, [r7, #15]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	d3af      	bcc.n	8004c16 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	73fb      	strb	r3, [r7, #15]
 8004cba:	e044      	b.n	8004d46 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004cbc:	7bfa      	ldrb	r2, [r7, #15]
 8004cbe:	6879      	ldr	r1, [r7, #4]
 8004cc0:	4613      	mov	r3, r2
 8004cc2:	00db      	lsls	r3, r3, #3
 8004cc4:	4413      	add	r3, r2
 8004cc6:	009b      	lsls	r3, r3, #2
 8004cc8:	440b      	add	r3, r1
 8004cca:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004cce:	2200      	movs	r2, #0
 8004cd0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004cd2:	7bfa      	ldrb	r2, [r7, #15]
 8004cd4:	6879      	ldr	r1, [r7, #4]
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	00db      	lsls	r3, r3, #3
 8004cda:	4413      	add	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	440b      	add	r3, r1
 8004ce0:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004ce4:	7bfa      	ldrb	r2, [r7, #15]
 8004ce6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004ce8:	7bfa      	ldrb	r2, [r7, #15]
 8004cea:	6879      	ldr	r1, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004cfa:	2200      	movs	r2, #0
 8004cfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004cfe:	7bfa      	ldrb	r2, [r7, #15]
 8004d00:	6879      	ldr	r1, [r7, #4]
 8004d02:	4613      	mov	r3, r2
 8004d04:	00db      	lsls	r3, r3, #3
 8004d06:	4413      	add	r3, r2
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	440b      	add	r3, r1
 8004d0c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004d14:	7bfa      	ldrb	r2, [r7, #15]
 8004d16:	6879      	ldr	r1, [r7, #4]
 8004d18:	4613      	mov	r3, r2
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	440b      	add	r3, r1
 8004d22:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004d26:	2200      	movs	r2, #0
 8004d28:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004d2a:	7bfa      	ldrb	r2, [r7, #15]
 8004d2c:	6879      	ldr	r1, [r7, #4]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	440b      	add	r3, r1
 8004d38:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d40:	7bfb      	ldrb	r3, [r7, #15]
 8004d42:	3301      	adds	r3, #1
 8004d44:	73fb      	strb	r3, [r7, #15]
 8004d46:	7bfa      	ldrb	r2, [r7, #15]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	429a      	cmp	r2, r3
 8004d4e:	d3b5      	bcc.n	8004cbc <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	603b      	str	r3, [r7, #0]
 8004d56:	687e      	ldr	r6, [r7, #4]
 8004d58:	466d      	mov	r5, sp
 8004d5a:	f106 0410 	add.w	r4, r6, #16
 8004d5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d66:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d6a:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d6e:	1d33      	adds	r3, r6, #4
 8004d70:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d72:	6838      	ldr	r0, [r7, #0]
 8004d74:	f005 fd2e 	bl	800a7d4 <USB_DevInit>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d005      	beq.n	8004d8a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2202      	movs	r2, #2
 8004d82:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d86:	2301      	movs	r3, #1
 8004d88:	e014      	b.n	8004db4 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	2201      	movs	r2, #1
 8004d96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d102      	bne.n	8004da8 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f001 f97a 	bl	800609c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f006 fe7c 	bl	800baaa <USB_DevDisconnect>

  return HAL_OK;
 8004db2:	2300      	movs	r3, #0
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004dbc <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b082      	sub	sp, #8
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004dca:	2b01      	cmp	r3, #1
 8004dcc:	d101      	bne.n	8004dd2 <HAL_PCD_Start+0x16>
 8004dce:	2302      	movs	r3, #2
 8004dd0:	e012      	b.n	8004df8 <HAL_PCD_Start+0x3c>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2201      	movs	r2, #1
 8004dd6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	4618      	mov	r0, r3
 8004de0:	f005 fc8a 	bl	800a6f8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	4618      	mov	r0, r3
 8004dea:	f006 fe3d 	bl	800ba68 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004df6:	2300      	movs	r3, #0
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3708      	adds	r7, #8
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}

08004e00 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004e00:	b590      	push	{r4, r7, lr}
 8004e02:	b08d      	sub	sp, #52	; 0x34
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e0e:	6a3b      	ldr	r3, [r7, #32]
 8004e10:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	4618      	mov	r0, r3
 8004e18:	f006 ff1c 	bl	800bc54 <USB_GetMode>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	f040 84b7 	bne.w	8005792 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f006 fe5f 	bl	800baec <USB_ReadInterrupts>
 8004e2e:	4603      	mov	r3, r0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 84ad 	beq.w	8005790 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	0a1b      	lsrs	r3, r3, #8
 8004e40:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4618      	mov	r0, r3
 8004e50:	f006 fe4c 	bl	800baec <USB_ReadInterrupts>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f003 0302 	and.w	r3, r3, #2
 8004e5a:	2b02      	cmp	r3, #2
 8004e5c:	d107      	bne.n	8004e6e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	695a      	ldr	r2, [r3, #20]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f002 0202 	and.w	r2, r2, #2
 8004e6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f006 fe3a 	bl	800baec <USB_ReadInterrupts>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	f003 0310 	and.w	r3, r3, #16
 8004e7e:	2b10      	cmp	r3, #16
 8004e80:	d161      	bne.n	8004f46 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699a      	ldr	r2, [r3, #24]
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	f022 0210 	bic.w	r2, r2, #16
 8004e90:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	6a1b      	ldr	r3, [r3, #32]
 8004e96:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004e98:	69bb      	ldr	r3, [r7, #24]
 8004e9a:	f003 020f 	and.w	r2, r3, #15
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	00db      	lsls	r3, r3, #3
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004eaa:	687a      	ldr	r2, [r7, #4]
 8004eac:	4413      	add	r3, r2
 8004eae:	3304      	adds	r3, #4
 8004eb0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	0c5b      	lsrs	r3, r3, #17
 8004eb6:	f003 030f 	and.w	r3, r3, #15
 8004eba:	2b02      	cmp	r3, #2
 8004ebc:	d124      	bne.n	8004f08 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004ebe:	69ba      	ldr	r2, [r7, #24]
 8004ec0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d035      	beq.n	8004f36 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ece:	69bb      	ldr	r3, [r7, #24]
 8004ed0:	091b      	lsrs	r3, r3, #4
 8004ed2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ed4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004ed8:	b29b      	uxth	r3, r3
 8004eda:	461a      	mov	r2, r3
 8004edc:	6a38      	ldr	r0, [r7, #32]
 8004ede:	f006 fc71 	bl	800b7c4 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	691a      	ldr	r2, [r3, #16]
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	091b      	lsrs	r3, r3, #4
 8004eea:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004eee:	441a      	add	r2, r3
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	6a1a      	ldr	r2, [r3, #32]
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	091b      	lsrs	r3, r3, #4
 8004efc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f00:	441a      	add	r2, r3
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	621a      	str	r2, [r3, #32]
 8004f06:	e016      	b.n	8004f36 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	0c5b      	lsrs	r3, r3, #17
 8004f0c:	f003 030f 	and.w	r3, r3, #15
 8004f10:	2b06      	cmp	r3, #6
 8004f12:	d110      	bne.n	8004f36 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004f1a:	2208      	movs	r2, #8
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	6a38      	ldr	r0, [r7, #32]
 8004f20:	f006 fc50 	bl	800b7c4 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	6a1a      	ldr	r2, [r3, #32]
 8004f28:	69bb      	ldr	r3, [r7, #24]
 8004f2a:	091b      	lsrs	r3, r3, #4
 8004f2c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004f30:	441a      	add	r2, r3
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699a      	ldr	r2, [r3, #24]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f042 0210 	orr.w	r2, r2, #16
 8004f44:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f006 fdce 	bl	800baec <USB_ReadInterrupts>
 8004f50:	4603      	mov	r3, r0
 8004f52:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004f56:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004f5a:	f040 80a7 	bne.w	80050ac <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004f5e:	2300      	movs	r3, #0
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f006 fdf4 	bl	800bb54 <USB_ReadDevAllOutEpInterrupt>
 8004f6c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004f6e:	e099      	b.n	80050a4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f72:	f003 0301 	and.w	r3, r3, #1
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	f000 808e 	beq.w	8005098 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f82:	b2d2      	uxtb	r2, r2
 8004f84:	4611      	mov	r1, r2
 8004f86:	4618      	mov	r0, r3
 8004f88:	f006 fe18 	bl	800bbbc <USB_ReadDevOutEPInterrupt>
 8004f8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d00c      	beq.n	8004fb2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa4:	461a      	mov	r2, r3
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004faa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 feef 	bl	8005d90 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	f003 0308 	and.w	r3, r3, #8
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00c      	beq.n	8004fd6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc8:	461a      	mov	r2, r3
 8004fca:	2308      	movs	r3, #8
 8004fcc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004fce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f000 ffc5 	bl	8005f60 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	f003 0310 	and.w	r3, r3, #16
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d008      	beq.n	8004ff2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fe2:	015a      	lsls	r2, r3, #5
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	4413      	add	r3, r2
 8004fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fec:	461a      	mov	r2, r3
 8004fee:	2310      	movs	r3, #16
 8004ff0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d030      	beq.n	800505e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	695b      	ldr	r3, [r3, #20]
 8005000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005004:	2b80      	cmp	r3, #128	; 0x80
 8005006:	d109      	bne.n	800501c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	69fa      	ldr	r2, [r7, #28]
 8005012:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005016:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800501a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800501c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800501e:	4613      	mov	r3, r2
 8005020:	00db      	lsls	r3, r3, #3
 8005022:	4413      	add	r3, r2
 8005024:	009b      	lsls	r3, r3, #2
 8005026:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4413      	add	r3, r2
 800502e:	3304      	adds	r3, #4
 8005030:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	78db      	ldrb	r3, [r3, #3]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d108      	bne.n	800504c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2200      	movs	r2, #0
 800503e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005042:	b2db      	uxtb	r3, r3
 8005044:	4619      	mov	r1, r3
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f00c f90e 	bl	8011268 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	461a      	mov	r2, r3
 800505a:	2302      	movs	r3, #2
 800505c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	f003 0320 	and.w	r3, r3, #32
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	015a      	lsls	r2, r3, #5
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	4413      	add	r3, r2
 8005070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005074:	461a      	mov	r2, r3
 8005076:	2320      	movs	r3, #32
 8005078:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800507a:	693b      	ldr	r3, [r7, #16]
 800507c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005080:	2b00      	cmp	r3, #0
 8005082:	d009      	beq.n	8005098 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005090:	461a      	mov	r2, r3
 8005092:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005096:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800509a:	3301      	adds	r3, #1
 800509c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	085b      	lsrs	r3, r3, #1
 80050a2:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80050a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f47f af62 	bne.w	8004f70 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f006 fd1b 	bl	800baec <USB_ReadInterrupts>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050bc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80050c0:	f040 80db 	bne.w	800527a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4618      	mov	r0, r3
 80050ca:	f006 fd5d 	bl	800bb88 <USB_ReadDevAllInEpInterrupt>
 80050ce:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80050d0:	2300      	movs	r3, #0
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80050d4:	e0cd      	b.n	8005272 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80050d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050d8:	f003 0301 	and.w	r3, r3, #1
 80050dc:	2b00      	cmp	r3, #0
 80050de:	f000 80c2 	beq.w	8005266 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	4611      	mov	r1, r2
 80050ec:	4618      	mov	r0, r3
 80050ee:	f006 fd83 	bl	800bbf8 <USB_ReadDevInEPInterrupt>
 80050f2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	f003 0301 	and.w	r3, r3, #1
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d057      	beq.n	80051ae <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	2201      	movs	r2, #1
 8005106:	fa02 f303 	lsl.w	r3, r2, r3
 800510a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005112:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	43db      	mvns	r3, r3
 8005118:	69f9      	ldr	r1, [r7, #28]
 800511a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800511e:	4013      	ands	r3, r2
 8005120:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800512e:	461a      	mov	r2, r3
 8005130:	2301      	movs	r3, #1
 8005132:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d132      	bne.n	80051a2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800513c:	6879      	ldr	r1, [r7, #4]
 800513e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005140:	4613      	mov	r3, r2
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4413      	add	r3, r2
 8005146:	009b      	lsls	r3, r3, #2
 8005148:	440b      	add	r3, r1
 800514a:	334c      	adds	r3, #76	; 0x4c
 800514c:	6819      	ldr	r1, [r3, #0]
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005152:	4613      	mov	r3, r2
 8005154:	00db      	lsls	r3, r3, #3
 8005156:	4413      	add	r3, r2
 8005158:	009b      	lsls	r3, r3, #2
 800515a:	4403      	add	r3, r0
 800515c:	3348      	adds	r3, #72	; 0x48
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	4419      	add	r1, r3
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005166:	4613      	mov	r3, r2
 8005168:	00db      	lsls	r3, r3, #3
 800516a:	4413      	add	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4403      	add	r3, r0
 8005170:	334c      	adds	r3, #76	; 0x4c
 8005172:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005176:	2b00      	cmp	r3, #0
 8005178:	d113      	bne.n	80051a2 <HAL_PCD_IRQHandler+0x3a2>
 800517a:	6879      	ldr	r1, [r7, #4]
 800517c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517e:	4613      	mov	r3, r2
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	3354      	adds	r3, #84	; 0x54
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d108      	bne.n	80051a2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6818      	ldr	r0, [r3, #0]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800519a:	461a      	mov	r2, r3
 800519c:	2101      	movs	r1, #1
 800519e:	f006 fd8b 	bl	800bcb8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80051a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a4:	b2db      	uxtb	r3, r3
 80051a6:	4619      	mov	r1, r3
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f00b ffd8 	bl	801115e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	f003 0308 	and.w	r3, r3, #8
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d008      	beq.n	80051ca <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80051b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	2308      	movs	r3, #8
 80051c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80051ca:	693b      	ldr	r3, [r7, #16]
 80051cc:	f003 0310 	and.w	r3, r3, #16
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d008      	beq.n	80051e6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80051d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d6:	015a      	lsls	r2, r3, #5
 80051d8:	69fb      	ldr	r3, [r7, #28]
 80051da:	4413      	add	r3, r2
 80051dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e0:	461a      	mov	r2, r3
 80051e2:	2310      	movs	r3, #16
 80051e4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80051e6:	693b      	ldr	r3, [r7, #16]
 80051e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d008      	beq.n	8005202 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80051f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	461a      	mov	r2, r3
 80051fe:	2340      	movs	r3, #64	; 0x40
 8005200:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f003 0302 	and.w	r3, r3, #2
 8005208:	2b00      	cmp	r3, #0
 800520a:	d023      	beq.n	8005254 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800520c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800520e:	6a38      	ldr	r0, [r7, #32]
 8005210:	f005 fc3e 	bl	800aa90 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005214:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005216:	4613      	mov	r3, r2
 8005218:	00db      	lsls	r3, r3, #3
 800521a:	4413      	add	r3, r2
 800521c:	009b      	lsls	r3, r3, #2
 800521e:	3338      	adds	r3, #56	; 0x38
 8005220:	687a      	ldr	r2, [r7, #4]
 8005222:	4413      	add	r3, r2
 8005224:	3304      	adds	r3, #4
 8005226:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	78db      	ldrb	r3, [r3, #3]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d108      	bne.n	8005242 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	2200      	movs	r2, #0
 8005234:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	b2db      	uxtb	r3, r3
 800523a:	4619      	mov	r1, r3
 800523c:	6878      	ldr	r0, [r7, #4]
 800523e:	f00c f825 	bl	801128c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800524e:	461a      	mov	r2, r3
 8005250:	2302      	movs	r3, #2
 8005252:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800525a:	2b00      	cmp	r3, #0
 800525c:	d003      	beq.n	8005266 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800525e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005260:	6878      	ldr	r0, [r7, #4]
 8005262:	f000 fd08 	bl	8005c76 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005268:	3301      	adds	r3, #1
 800526a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800526c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800526e:	085b      	lsrs	r3, r3, #1
 8005270:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	2b00      	cmp	r3, #0
 8005276:	f47f af2e 	bne.w	80050d6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4618      	mov	r0, r3
 8005280:	f006 fc34 	bl	800baec <USB_ReadInterrupts>
 8005284:	4603      	mov	r3, r0
 8005286:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800528a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800528e:	d122      	bne.n	80052d6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	69fa      	ldr	r2, [r7, #28]
 800529a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800529e:	f023 0301 	bic.w	r3, r3, #1
 80052a2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80052aa:	2b01      	cmp	r3, #1
 80052ac:	d108      	bne.n	80052c0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80052b6:	2100      	movs	r1, #0
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f00c f9a5 	bl	8011608 <HAL_PCDEx_LPM_Callback>
 80052be:	e002      	b.n	80052c6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f00b ffc3 	bl	801124c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695a      	ldr	r2, [r3, #20]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80052d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f006 fc06 	bl	800baec <USB_ReadInterrupts>
 80052e0:	4603      	mov	r3, r0
 80052e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052ea:	d112      	bne.n	8005312 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80052ec:	69fb      	ldr	r3, [r7, #28]
 80052ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d102      	bne.n	8005302 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f00b ff7f 	bl	8011200 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695a      	ldr	r2, [r3, #20]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005310:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4618      	mov	r0, r3
 8005318:	f006 fbe8 	bl	800baec <USB_ReadInterrupts>
 800531c:	4603      	mov	r3, r0
 800531e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005322:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005326:	d121      	bne.n	800536c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005336:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800533e:	2b00      	cmp	r3, #0
 8005340:	d111      	bne.n	8005366 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2201      	movs	r2, #1
 8005346:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005350:	089b      	lsrs	r3, r3, #2
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800535c:	2101      	movs	r1, #1
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f00c f952 	bl	8011608 <HAL_PCDEx_LPM_Callback>
 8005364:	e002      	b.n	800536c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f00b ff4a 	bl	8011200 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4618      	mov	r0, r3
 8005372:	f006 fbbb 	bl	800baec <USB_ReadInterrupts>
 8005376:	4603      	mov	r3, r0
 8005378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800537c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005380:	f040 80b7 	bne.w	80054f2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	69fa      	ldr	r2, [r7, #28]
 800538e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005392:	f023 0301 	bic.w	r3, r3, #1
 8005396:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	2110      	movs	r1, #16
 800539e:	4618      	mov	r0, r3
 80053a0:	f005 fb76 	bl	800aa90 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053a4:	2300      	movs	r3, #0
 80053a6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053a8:	e046      	b.n	8005438 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	015a      	lsls	r2, r3, #5
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	4413      	add	r3, r2
 80053b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053b6:	461a      	mov	r2, r3
 80053b8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053bc:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80053be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c0:	015a      	lsls	r2, r3, #5
 80053c2:	69fb      	ldr	r3, [r7, #28]
 80053c4:	4413      	add	r3, r2
 80053c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053ce:	0151      	lsls	r1, r2, #5
 80053d0:	69fa      	ldr	r2, [r7, #28]
 80053d2:	440a      	add	r2, r1
 80053d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053dc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80053de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	461a      	mov	r2, r3
 80053ec:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80053f0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80053f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f4:	015a      	lsls	r2, r3, #5
 80053f6:	69fb      	ldr	r3, [r7, #28]
 80053f8:	4413      	add	r3, r2
 80053fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005402:	0151      	lsls	r1, r2, #5
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	440a      	add	r2, r1
 8005408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800540c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005410:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	69fb      	ldr	r3, [r7, #28]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	69fa      	ldr	r2, [r7, #28]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800542c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005430:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005434:	3301      	adds	r3, #1
 8005436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	685b      	ldr	r3, [r3, #4]
 800543c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800543e:	429a      	cmp	r2, r3
 8005440:	d3b3      	bcc.n	80053aa <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	69fa      	ldr	r2, [r7, #28]
 800544c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005450:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005454:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545a:	2b00      	cmp	r3, #0
 800545c:	d016      	beq.n	800548c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005464:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800546e:	f043 030b 	orr.w	r3, r3, #11
 8005472:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005476:	69fb      	ldr	r3, [r7, #28]
 8005478:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800547e:	69fa      	ldr	r2, [r7, #28]
 8005480:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005484:	f043 030b 	orr.w	r3, r3, #11
 8005488:	6453      	str	r3, [r2, #68]	; 0x44
 800548a:	e015      	b.n	80054b8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005492:	695a      	ldr	r2, [r3, #20]
 8005494:	69fb      	ldr	r3, [r7, #28]
 8005496:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800549a:	4619      	mov	r1, r3
 800549c:	f242 032b 	movw	r3, #8235	; 0x202b
 80054a0:	4313      	orrs	r3, r2
 80054a2:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80054a4:	69fb      	ldr	r3, [r7, #28]
 80054a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054aa:	691b      	ldr	r3, [r3, #16]
 80054ac:	69fa      	ldr	r2, [r7, #28]
 80054ae:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b2:	f043 030b 	orr.w	r3, r3, #11
 80054b6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	69fa      	ldr	r2, [r7, #28]
 80054c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054c6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80054ca:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6818      	ldr	r0, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	691b      	ldr	r3, [r3, #16]
 80054d4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80054dc:	461a      	mov	r2, r3
 80054de:	f006 fbeb 	bl	800bcb8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	695a      	ldr	r2, [r3, #20]
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80054f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f006 faf8 	bl	800baec <USB_ReadInterrupts>
 80054fc:	4603      	mov	r3, r0
 80054fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005502:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005506:	d124      	bne.n	8005552 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4618      	mov	r0, r3
 800550e:	f006 fbaf 	bl	800bc70 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4618      	mov	r0, r3
 8005518:	f005 fb37 	bl	800ab8a <USB_GetDevSpeed>
 800551c:	4603      	mov	r3, r0
 800551e:	461a      	mov	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681c      	ldr	r4, [r3, #0]
 8005528:	f001 fad0 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 800552c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005532:	b2db      	uxtb	r3, r3
 8005534:	461a      	mov	r2, r3
 8005536:	4620      	mov	r0, r4
 8005538:	f005 f83c 	bl	800a5b4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800553c:	6878      	ldr	r0, [r7, #4]
 800553e:	f00b fe36 	bl	80111ae <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005550:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	4618      	mov	r0, r3
 8005558:	f006 fac8 	bl	800baec <USB_ReadInterrupts>
 800555c:	4603      	mov	r3, r0
 800555e:	f003 0308 	and.w	r3, r3, #8
 8005562:	2b08      	cmp	r3, #8
 8005564:	d10a      	bne.n	800557c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005566:	6878      	ldr	r0, [r7, #4]
 8005568:	f00b fe13 	bl	8011192 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	695a      	ldr	r2, [r3, #20]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f002 0208 	and.w	r2, r2, #8
 800557a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4618      	mov	r0, r3
 8005582:	f006 fab3 	bl	800baec <USB_ReadInterrupts>
 8005586:	4603      	mov	r3, r0
 8005588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800558c:	2b80      	cmp	r3, #128	; 0x80
 800558e:	d122      	bne.n	80055d6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	699b      	ldr	r3, [r3, #24]
 8005594:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005598:	6a3b      	ldr	r3, [r7, #32]
 800559a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800559c:	2301      	movs	r3, #1
 800559e:	627b      	str	r3, [r7, #36]	; 0x24
 80055a0:	e014      	b.n	80055cc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80055a2:	6879      	ldr	r1, [r7, #4]
 80055a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055a6:	4613      	mov	r3, r2
 80055a8:	00db      	lsls	r3, r3, #3
 80055aa:	4413      	add	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	440b      	add	r3, r1
 80055b0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	2b01      	cmp	r3, #1
 80055b8:	d105      	bne.n	80055c6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	4619      	mov	r1, r3
 80055c0:	6878      	ldr	r0, [r7, #4]
 80055c2:	f000 fb27 	bl	8005c14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c8:	3301      	adds	r3, #1
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	685b      	ldr	r3, [r3, #4]
 80055d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055d2:	429a      	cmp	r2, r3
 80055d4:	d3e5      	bcc.n	80055a2 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4618      	mov	r0, r3
 80055dc:	f006 fa86 	bl	800baec <USB_ReadInterrupts>
 80055e0:	4603      	mov	r3, r0
 80055e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ea:	d13b      	bne.n	8005664 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80055ec:	2301      	movs	r3, #1
 80055ee:	627b      	str	r3, [r7, #36]	; 0x24
 80055f0:	e02b      	b.n	800564a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	015a      	lsls	r2, r3, #5
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	4413      	add	r3, r2
 80055fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005602:	6879      	ldr	r1, [r7, #4]
 8005604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005606:	4613      	mov	r3, r2
 8005608:	00db      	lsls	r3, r3, #3
 800560a:	4413      	add	r3, r2
 800560c:	009b      	lsls	r3, r3, #2
 800560e:	440b      	add	r3, r1
 8005610:	3340      	adds	r3, #64	; 0x40
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	2b01      	cmp	r3, #1
 8005616:	d115      	bne.n	8005644 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005618:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800561a:	2b00      	cmp	r3, #0
 800561c:	da12      	bge.n	8005644 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800561e:	6879      	ldr	r1, [r7, #4]
 8005620:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005622:	4613      	mov	r3, r2
 8005624:	00db      	lsls	r3, r3, #3
 8005626:	4413      	add	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	440b      	add	r3, r1
 800562c:	333f      	adds	r3, #63	; 0x3f
 800562e:	2201      	movs	r2, #1
 8005630:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005634:	b2db      	uxtb	r3, r3
 8005636:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800563a:	b2db      	uxtb	r3, r3
 800563c:	4619      	mov	r1, r3
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 fae8 	bl	8005c14 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005646:	3301      	adds	r3, #1
 8005648:	627b      	str	r3, [r7, #36]	; 0x24
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005650:	429a      	cmp	r2, r3
 8005652:	d3ce      	bcc.n	80055f2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	695a      	ldr	r2, [r3, #20]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005662:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4618      	mov	r0, r3
 800566a:	f006 fa3f 	bl	800baec <USB_ReadInterrupts>
 800566e:	4603      	mov	r3, r0
 8005670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005678:	d155      	bne.n	8005726 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800567a:	2301      	movs	r3, #1
 800567c:	627b      	str	r3, [r7, #36]	; 0x24
 800567e:	e045      	b.n	800570c <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	69fb      	ldr	r3, [r7, #28]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005690:	6879      	ldr	r1, [r7, #4]
 8005692:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005694:	4613      	mov	r3, r2
 8005696:	00db      	lsls	r3, r3, #3
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80056a2:	781b      	ldrb	r3, [r3, #0]
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d12e      	bne.n	8005706 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80056a8:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	da2b      	bge.n	8005706 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80056ae:	69bb      	ldr	r3, [r7, #24]
 80056b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80056ba:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80056be:	429a      	cmp	r2, r3
 80056c0:	d121      	bne.n	8005706 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80056c2:	6879      	ldr	r1, [r7, #4]
 80056c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056c6:	4613      	mov	r3, r2
 80056c8:	00db      	lsls	r3, r3, #3
 80056ca:	4413      	add	r3, r2
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	440b      	add	r3, r1
 80056d0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056d4:	2201      	movs	r2, #1
 80056d6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80056d8:	6a3b      	ldr	r3, [r7, #32]
 80056da:	699b      	ldr	r3, [r3, #24]
 80056dc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80056e4:	6a3b      	ldr	r3, [r7, #32]
 80056e6:	695b      	ldr	r3, [r3, #20]
 80056e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80056f0:	69fb      	ldr	r3, [r7, #28]
 80056f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	69fa      	ldr	r2, [r7, #28]
 80056fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80056fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005702:	6053      	str	r3, [r2, #4]
            break;
 8005704:	e007      	b.n	8005716 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	3301      	adds	r3, #1
 800570a:	627b      	str	r3, [r7, #36]	; 0x24
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005712:	429a      	cmp	r2, r3
 8005714:	d3b4      	bcc.n	8005680 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695a      	ldr	r2, [r3, #20]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005724:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f006 f9de 	bl	800baec <USB_ReadInterrupts>
 8005730:	4603      	mov	r3, r0
 8005732:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800573a:	d10a      	bne.n	8005752 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f00b fdb7 	bl	80112b0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	695a      	ldr	r2, [r3, #20]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005750:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4618      	mov	r0, r3
 8005758:	f006 f9c8 	bl	800baec <USB_ReadInterrupts>
 800575c:	4603      	mov	r3, r0
 800575e:	f003 0304 	and.w	r3, r3, #4
 8005762:	2b04      	cmp	r3, #4
 8005764:	d115      	bne.n	8005792 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	685b      	ldr	r3, [r3, #4]
 800576c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800576e:	69bb      	ldr	r3, [r7, #24]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	d002      	beq.n	800577e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f00b fda7 	bl	80112cc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	69ba      	ldr	r2, [r7, #24]
 800578a:	430a      	orrs	r2, r1
 800578c:	605a      	str	r2, [r3, #4]
 800578e:	e000      	b.n	8005792 <HAL_PCD_IRQHandler+0x992>
      return;
 8005790:	bf00      	nop
    }
  }
}
 8005792:	3734      	adds	r7, #52	; 0x34
 8005794:	46bd      	mov	sp, r7
 8005796:	bd90      	pop	{r4, r7, pc}

08005798 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005798:	b580      	push	{r7, lr}
 800579a:	b082      	sub	sp, #8
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	460b      	mov	r3, r1
 80057a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057aa:	2b01      	cmp	r3, #1
 80057ac:	d101      	bne.n	80057b2 <HAL_PCD_SetAddress+0x1a>
 80057ae:	2302      	movs	r3, #2
 80057b0:	e013      	b.n	80057da <HAL_PCD_SetAddress+0x42>
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	78fa      	ldrb	r2, [r7, #3]
 80057be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	78fa      	ldrb	r2, [r7, #3]
 80057c8:	4611      	mov	r1, r2
 80057ca:	4618      	mov	r0, r3
 80057cc:	f006 f926 	bl	800ba1c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	4608      	mov	r0, r1
 80057ec:	4611      	mov	r1, r2
 80057ee:	461a      	mov	r2, r3
 80057f0:	4603      	mov	r3, r0
 80057f2:	70fb      	strb	r3, [r7, #3]
 80057f4:	460b      	mov	r3, r1
 80057f6:	803b      	strh	r3, [r7, #0]
 80057f8:	4613      	mov	r3, r2
 80057fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80057fc:	2300      	movs	r3, #0
 80057fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005804:	2b00      	cmp	r3, #0
 8005806:	da0f      	bge.n	8005828 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	f003 020f 	and.w	r2, r3, #15
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	3338      	adds	r3, #56	; 0x38
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4413      	add	r3, r2
 800581c:	3304      	adds	r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	705a      	strb	r2, [r3, #1]
 8005826:	e00f      	b.n	8005848 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005828:	78fb      	ldrb	r3, [r7, #3]
 800582a:	f003 020f 	and.w	r2, r3, #15
 800582e:	4613      	mov	r3, r2
 8005830:	00db      	lsls	r3, r3, #3
 8005832:	4413      	add	r3, r2
 8005834:	009b      	lsls	r3, r3, #2
 8005836:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800583a:	687a      	ldr	r2, [r7, #4]
 800583c:	4413      	add	r3, r2
 800583e:	3304      	adds	r3, #4
 8005840:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2200      	movs	r2, #0
 8005846:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005848:	78fb      	ldrb	r3, [r7, #3]
 800584a:	f003 030f 	and.w	r3, r3, #15
 800584e:	b2da      	uxtb	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005854:	883a      	ldrh	r2, [r7, #0]
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	78ba      	ldrb	r2, [r7, #2]
 800585e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	785b      	ldrb	r3, [r3, #1]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d004      	beq.n	8005872 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	781b      	ldrb	r3, [r3, #0]
 800586c:	b29a      	uxth	r2, r3
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005872:	78bb      	ldrb	r3, [r7, #2]
 8005874:	2b02      	cmp	r3, #2
 8005876:	d102      	bne.n	800587e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005884:	2b01      	cmp	r3, #1
 8005886:	d101      	bne.n	800588c <HAL_PCD_EP_Open+0xaa>
 8005888:	2302      	movs	r3, #2
 800588a:	e00e      	b.n	80058aa <HAL_PCD_EP_Open+0xc8>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68f9      	ldr	r1, [r7, #12]
 800589a:	4618      	mov	r0, r3
 800589c:	f005 f99a 	bl	800abd4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2200      	movs	r2, #0
 80058a4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80058a8:	7afb      	ldrb	r3, [r7, #11]
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3710      	adds	r7, #16
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b084      	sub	sp, #16
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80058be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	da0f      	bge.n	80058e6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058c6:	78fb      	ldrb	r3, [r7, #3]
 80058c8:	f003 020f 	and.w	r2, r3, #15
 80058cc:	4613      	mov	r3, r2
 80058ce:	00db      	lsls	r3, r3, #3
 80058d0:	4413      	add	r3, r2
 80058d2:	009b      	lsls	r3, r3, #2
 80058d4:	3338      	adds	r3, #56	; 0x38
 80058d6:	687a      	ldr	r2, [r7, #4]
 80058d8:	4413      	add	r3, r2
 80058da:	3304      	adds	r3, #4
 80058dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2201      	movs	r2, #1
 80058e2:	705a      	strb	r2, [r3, #1]
 80058e4:	e00f      	b.n	8005906 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058e6:	78fb      	ldrb	r3, [r7, #3]
 80058e8:	f003 020f 	and.w	r2, r3, #15
 80058ec:	4613      	mov	r3, r2
 80058ee:	00db      	lsls	r3, r3, #3
 80058f0:	4413      	add	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	4413      	add	r3, r2
 80058fc:	3304      	adds	r3, #4
 80058fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	f003 030f 	and.w	r3, r3, #15
 800590c:	b2da      	uxtb	r2, r3
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005918:	2b01      	cmp	r3, #1
 800591a:	d101      	bne.n	8005920 <HAL_PCD_EP_Close+0x6e>
 800591c:	2302      	movs	r3, #2
 800591e:	e00e      	b.n	800593e <HAL_PCD_EP_Close+0x8c>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68f9      	ldr	r1, [r7, #12]
 800592e:	4618      	mov	r0, r3
 8005930:	f005 f9d8 	bl	800ace4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	2200      	movs	r2, #0
 8005938:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}

08005946 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005946:	b580      	push	{r7, lr}
 8005948:	b086      	sub	sp, #24
 800594a:	af00      	add	r7, sp, #0
 800594c:	60f8      	str	r0, [r7, #12]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	603b      	str	r3, [r7, #0]
 8005952:	460b      	mov	r3, r1
 8005954:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005956:	7afb      	ldrb	r3, [r7, #11]
 8005958:	f003 020f 	and.w	r2, r3, #15
 800595c:	4613      	mov	r3, r2
 800595e:	00db      	lsls	r3, r3, #3
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	4413      	add	r3, r2
 800596c:	3304      	adds	r3, #4
 800596e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	687a      	ldr	r2, [r7, #4]
 8005974:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	683a      	ldr	r2, [r7, #0]
 800597a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2200      	movs	r2, #0
 8005980:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	2200      	movs	r2, #0
 8005986:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005988:	7afb      	ldrb	r3, [r7, #11]
 800598a:	f003 030f 	and.w	r3, r3, #15
 800598e:	b2da      	uxtb	r2, r3
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d102      	bne.n	80059a2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800599c:	687a      	ldr	r2, [r7, #4]
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80059a2:	7afb      	ldrb	r3, [r7, #11]
 80059a4:	f003 030f 	and.w	r3, r3, #15
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6818      	ldr	r0, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	691b      	ldr	r3, [r3, #16]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	461a      	mov	r2, r3
 80059b8:	6979      	ldr	r1, [r7, #20]
 80059ba:	f005 fcbf 	bl	800b33c <USB_EP0StartXfer>
 80059be:	e008      	b.n	80059d2 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6818      	ldr	r0, [r3, #0]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	461a      	mov	r2, r3
 80059cc:	6979      	ldr	r1, [r7, #20]
 80059ce:	f005 fa65 	bl	800ae9c <USB_EPStartXfer>
  }

  return HAL_OK;
 80059d2:	2300      	movs	r3, #0
}
 80059d4:	4618      	mov	r0, r3
 80059d6:	3718      	adds	r7, #24
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
 80059e4:	460b      	mov	r3, r1
 80059e6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80059e8:	78fb      	ldrb	r3, [r7, #3]
 80059ea:	f003 020f 	and.w	r2, r3, #15
 80059ee:	6879      	ldr	r1, [r7, #4]
 80059f0:	4613      	mov	r3, r2
 80059f2:	00db      	lsls	r3, r3, #3
 80059f4:	4413      	add	r3, r2
 80059f6:	009b      	lsls	r3, r3, #2
 80059f8:	440b      	add	r3, r1
 80059fa:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 80059fe:	681b      	ldr	r3, [r3, #0]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	370c      	adds	r7, #12
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr

08005a0c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	607a      	str	r2, [r7, #4]
 8005a16:	603b      	str	r3, [r7, #0]
 8005a18:	460b      	mov	r3, r1
 8005a1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a1c:	7afb      	ldrb	r3, [r7, #11]
 8005a1e:	f003 020f 	and.w	r2, r3, #15
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	3338      	adds	r3, #56	; 0x38
 8005a2c:	68fa      	ldr	r2, [r7, #12]
 8005a2e:	4413      	add	r3, r2
 8005a30:	3304      	adds	r3, #4
 8005a32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	687a      	ldr	r2, [r7, #4]
 8005a38:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	683a      	ldr	r2, [r7, #0]
 8005a3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	2200      	movs	r2, #0
 8005a44:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2201      	movs	r2, #1
 8005a4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005a4c:	7afb      	ldrb	r3, [r7, #11]
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	691b      	ldr	r3, [r3, #16]
 8005a5c:	2b01      	cmp	r3, #1
 8005a5e:	d102      	bne.n	8005a66 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005a66:	7afb      	ldrb	r3, [r7, #11]
 8005a68:	f003 030f 	and.w	r3, r3, #15
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d109      	bne.n	8005a84 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6818      	ldr	r0, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	691b      	ldr	r3, [r3, #16]
 8005a78:	b2db      	uxtb	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6979      	ldr	r1, [r7, #20]
 8005a7e:	f005 fc5d 	bl	800b33c <USB_EP0StartXfer>
 8005a82:	e008      	b.n	8005a96 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	6818      	ldr	r0, [r3, #0]
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	691b      	ldr	r3, [r3, #16]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	461a      	mov	r2, r3
 8005a90:	6979      	ldr	r1, [r7, #20]
 8005a92:	f005 fa03 	bl	800ae9c <USB_EPStartXfer>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3718      	adds	r7, #24
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005aac:	78fb      	ldrb	r3, [r7, #3]
 8005aae:	f003 020f 	and.w	r2, r3, #15
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d901      	bls.n	8005abe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005aba:	2301      	movs	r3, #1
 8005abc:	e050      	b.n	8005b60 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005abe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	da0f      	bge.n	8005ae6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ac6:	78fb      	ldrb	r3, [r7, #3]
 8005ac8:	f003 020f 	and.w	r2, r3, #15
 8005acc:	4613      	mov	r3, r2
 8005ace:	00db      	lsls	r3, r3, #3
 8005ad0:	4413      	add	r3, r2
 8005ad2:	009b      	lsls	r3, r3, #2
 8005ad4:	3338      	adds	r3, #56	; 0x38
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	4413      	add	r3, r2
 8005ada:	3304      	adds	r3, #4
 8005adc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	705a      	strb	r2, [r3, #1]
 8005ae4:	e00d      	b.n	8005b02 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005ae6:	78fa      	ldrb	r2, [r7, #3]
 8005ae8:	4613      	mov	r3, r2
 8005aea:	00db      	lsls	r3, r3, #3
 8005aec:	4413      	add	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	4413      	add	r3, r2
 8005af8:	3304      	adds	r3, #4
 8005afa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2200      	movs	r2, #0
 8005b00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2201      	movs	r2, #1
 8005b06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b08:	78fb      	ldrb	r3, [r7, #3]
 8005b0a:	f003 030f 	and.w	r3, r3, #15
 8005b0e:	b2da      	uxtb	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_PCD_EP_SetStall+0x82>
 8005b1e:	2302      	movs	r3, #2
 8005b20:	e01e      	b.n	8005b60 <HAL_PCD_EP_SetStall+0xc0>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2201      	movs	r2, #1
 8005b26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	68f9      	ldr	r1, [r7, #12]
 8005b30:	4618      	mov	r0, r3
 8005b32:	f005 fe9f 	bl	800b874 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b36:	78fb      	ldrb	r3, [r7, #3]
 8005b38:	f003 030f 	and.w	r3, r3, #15
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d10a      	bne.n	8005b56 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6818      	ldr	r0, [r3, #0]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	691b      	ldr	r3, [r3, #16]
 8005b48:	b2d9      	uxtb	r1, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b50:	461a      	mov	r2, r3
 8005b52:	f006 f8b1 	bl	800bcb8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	2200      	movs	r2, #0
 8005b5a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
 8005b70:	460b      	mov	r3, r1
 8005b72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005b74:	78fb      	ldrb	r3, [r7, #3]
 8005b76:	f003 020f 	and.w	r2, r3, #15
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d901      	bls.n	8005b86 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005b82:	2301      	movs	r3, #1
 8005b84:	e042      	b.n	8005c0c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005b86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	da0f      	bge.n	8005bae <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b8e:	78fb      	ldrb	r3, [r7, #3]
 8005b90:	f003 020f 	and.w	r2, r3, #15
 8005b94:	4613      	mov	r3, r2
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4413      	add	r3, r2
 8005b9a:	009b      	lsls	r3, r3, #2
 8005b9c:	3338      	adds	r3, #56	; 0x38
 8005b9e:	687a      	ldr	r2, [r7, #4]
 8005ba0:	4413      	add	r3, r2
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2201      	movs	r2, #1
 8005baa:	705a      	strb	r2, [r3, #1]
 8005bac:	e00f      	b.n	8005bce <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bae:	78fb      	ldrb	r3, [r7, #3]
 8005bb0:	f003 020f 	and.w	r2, r3, #15
 8005bb4:	4613      	mov	r3, r2
 8005bb6:	00db      	lsls	r3, r3, #3
 8005bb8:	4413      	add	r3, r2
 8005bba:	009b      	lsls	r3, r3, #2
 8005bbc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005bc0:	687a      	ldr	r2, [r7, #4]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	3304      	adds	r3, #4
 8005bc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bd4:	78fb      	ldrb	r3, [r7, #3]
 8005bd6:	f003 030f 	and.w	r3, r3, #15
 8005bda:	b2da      	uxtb	r2, r3
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005be6:	2b01      	cmp	r3, #1
 8005be8:	d101      	bne.n	8005bee <HAL_PCD_EP_ClrStall+0x86>
 8005bea:	2302      	movs	r3, #2
 8005bec:	e00e      	b.n	8005c0c <HAL_PCD_EP_ClrStall+0xa4>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68f9      	ldr	r1, [r7, #12]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f005 fea7 	bl	800b950 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2200      	movs	r2, #0
 8005c06:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	3710      	adds	r7, #16
 8005c10:	46bd      	mov	sp, r7
 8005c12:	bd80      	pop	{r7, pc}

08005c14 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b084      	sub	sp, #16
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005c20:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	da0c      	bge.n	8005c42 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c28:	78fb      	ldrb	r3, [r7, #3]
 8005c2a:	f003 020f 	and.w	r2, r3, #15
 8005c2e:	4613      	mov	r3, r2
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	4413      	add	r3, r2
 8005c34:	009b      	lsls	r3, r3, #2
 8005c36:	3338      	adds	r3, #56	; 0x38
 8005c38:	687a      	ldr	r2, [r7, #4]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	3304      	adds	r3, #4
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	e00c      	b.n	8005c5c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005c42:	78fb      	ldrb	r3, [r7, #3]
 8005c44:	f003 020f 	and.w	r2, r3, #15
 8005c48:	4613      	mov	r3, r2
 8005c4a:	00db      	lsls	r3, r3, #3
 8005c4c:	4413      	add	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	4413      	add	r3, r2
 8005c58:	3304      	adds	r3, #4
 8005c5a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	68f9      	ldr	r1, [r7, #12]
 8005c62:	4618      	mov	r0, r3
 8005c64:	f005 fcc6 	bl	800b5f4 <USB_EPStopXfer>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005c6c:	7afb      	ldrb	r3, [r7, #11]
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}

08005c76 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005c76:	b580      	push	{r7, lr}
 8005c78:	b08a      	sub	sp, #40	; 0x28
 8005c7a:	af02      	add	r7, sp, #8
 8005c7c:	6078      	str	r0, [r7, #4]
 8005c7e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	3338      	adds	r3, #56	; 0x38
 8005c96:	687a      	ldr	r2, [r7, #4]
 8005c98:	4413      	add	r3, r2
 8005c9a:	3304      	adds	r3, #4
 8005c9c:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6a1a      	ldr	r2, [r3, #32]
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	699b      	ldr	r3, [r3, #24]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d901      	bls.n	8005cae <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005caa:	2301      	movs	r3, #1
 8005cac:	e06c      	b.n	8005d88 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	699a      	ldr	r2, [r3, #24]
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d902      	bls.n	8005cca <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	68db      	ldr	r3, [r3, #12]
 8005cc8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	3303      	adds	r3, #3
 8005cce:	089b      	lsrs	r3, r3, #2
 8005cd0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005cd2:	e02b      	b.n	8005d2c <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	699a      	ldr	r2, [r3, #24]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
 8005cdc:	1ad3      	subs	r3, r2, r3
 8005cde:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	69fa      	ldr	r2, [r7, #28]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d902      	bls.n	8005cf0 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	68db      	ldr	r3, [r3, #12]
 8005cee:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005cf0:	69fb      	ldr	r3, [r7, #28]
 8005cf2:	3303      	adds	r3, #3
 8005cf4:	089b      	lsrs	r3, r3, #2
 8005cf6:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	6919      	ldr	r1, [r3, #16]
 8005cfc:	683b      	ldr	r3, [r7, #0]
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	9300      	str	r3, [sp, #0]
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	6978      	ldr	r0, [r7, #20]
 8005d10:	f005 fd1a 	bl	800b748 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	691a      	ldr	r2, [r3, #16]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	441a      	add	r2, r3
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	441a      	add	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	69ba      	ldr	r2, [r7, #24]
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d809      	bhi.n	8005d56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	6a1a      	ldr	r2, [r3, #32]
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d203      	bcs.n	8005d56 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	699b      	ldr	r3, [r3, #24]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d1be      	bne.n	8005cd4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699a      	ldr	r2, [r3, #24]
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6a1b      	ldr	r3, [r3, #32]
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d811      	bhi.n	8005d86 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	2201      	movs	r2, #1
 8005d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005d6e:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d76:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	43db      	mvns	r3, r3
 8005d7c:	6939      	ldr	r1, [r7, #16]
 8005d7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005d82:	4013      	ands	r3, r2
 8005d84:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005d86:	2300      	movs	r3, #0
}
 8005d88:	4618      	mov	r0, r3
 8005d8a:	3720      	adds	r7, #32
 8005d8c:	46bd      	mov	sp, r7
 8005d8e:	bd80      	pop	{r7, pc}

08005d90 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b088      	sub	sp, #32
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
 8005d98:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	333c      	adds	r3, #60	; 0x3c
 8005da8:	3304      	adds	r3, #4
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	69bb      	ldr	r3, [r7, #24]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d17b      	bne.n	8005ebe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	f003 0308 	and.w	r3, r3, #8
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005dd0:	697b      	ldr	r3, [r7, #20]
 8005dd2:	4a61      	ldr	r2, [pc, #388]	; (8005f58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	f240 80b9 	bls.w	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005dda:	693b      	ldr	r3, [r7, #16]
 8005ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	f000 80b3 	beq.w	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005de6:	683b      	ldr	r3, [r7, #0]
 8005de8:	015a      	lsls	r2, r3, #5
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	4413      	add	r3, r2
 8005dee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df2:	461a      	mov	r2, r3
 8005df4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005df8:	6093      	str	r3, [r2, #8]
 8005dfa:	e0a7      	b.n	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	f003 0320 	and.w	r3, r3, #32
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d009      	beq.n	8005e1a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	015a      	lsls	r2, r3, #5
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e12:	461a      	mov	r2, r3
 8005e14:	2320      	movs	r3, #32
 8005e16:	6093      	str	r3, [r2, #8]
 8005e18:	e098      	b.n	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	f040 8093 	bne.w	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4a4b      	ldr	r2, [pc, #300]	; (8005f58 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005e2a:	4293      	cmp	r3, r2
 8005e2c:	d90f      	bls.n	8005e4e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d00a      	beq.n	8005e4e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	015a      	lsls	r2, r3, #5
 8005e3c:	69bb      	ldr	r3, [r7, #24]
 8005e3e:	4413      	add	r3, r2
 8005e40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e44:	461a      	mov	r2, r3
 8005e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e4a:	6093      	str	r3, [r2, #8]
 8005e4c:	e07e      	b.n	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005e4e:	683a      	ldr	r2, [r7, #0]
 8005e50:	4613      	mov	r3, r2
 8005e52:	00db      	lsls	r3, r3, #3
 8005e54:	4413      	add	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e5c:	687a      	ldr	r2, [r7, #4]
 8005e5e:	4413      	add	r3, r2
 8005e60:	3304      	adds	r3, #4
 8005e62:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	0159      	lsls	r1, r3, #5
 8005e6c:	69bb      	ldr	r3, [r7, #24]
 8005e6e:	440b      	add	r3, r1
 8005e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e74:	691b      	ldr	r3, [r3, #16]
 8005e76:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e7a:	1ad2      	subs	r2, r2, r3
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d114      	bne.n	8005eb0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	699b      	ldr	r3, [r3, #24]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d109      	bne.n	8005ea2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6818      	ldr	r0, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005e98:	461a      	mov	r2, r3
 8005e9a:	2101      	movs	r1, #1
 8005e9c:	f005 ff0c 	bl	800bcb8 <USB_EP0_OutStart>
 8005ea0:	e006      	b.n	8005eb0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	691a      	ldr	r2, [r3, #16]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	441a      	add	r2, r3
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005eb0:	683b      	ldr	r3, [r7, #0]
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f00b f936 	bl	8011128 <HAL_PCD_DataOutStageCallback>
 8005ebc:	e046      	b.n	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	4a26      	ldr	r2, [pc, #152]	; (8005f5c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005ec2:	4293      	cmp	r3, r2
 8005ec4:	d124      	bne.n	8005f10 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d00a      	beq.n	8005ee6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	015a      	lsls	r2, r3, #5
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	4413      	add	r3, r2
 8005ed8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005edc:	461a      	mov	r2, r3
 8005ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ee2:	6093      	str	r3, [r2, #8]
 8005ee4:	e032      	b.n	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f003 0320 	and.w	r3, r3, #32
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d008      	beq.n	8005f02 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	015a      	lsls	r2, r3, #5
 8005ef4:	69bb      	ldr	r3, [r7, #24]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005efc:	461a      	mov	r2, r3
 8005efe:	2320      	movs	r3, #32
 8005f00:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f00b f90d 	bl	8011128 <HAL_PCD_DataOutStageCallback>
 8005f0e:	e01d      	b.n	8005f4c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d114      	bne.n	8005f40 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	683a      	ldr	r2, [r7, #0]
 8005f1a:	4613      	mov	r3, r2
 8005f1c:	00db      	lsls	r3, r3, #3
 8005f1e:	4413      	add	r3, r2
 8005f20:	009b      	lsls	r3, r3, #2
 8005f22:	440b      	add	r3, r1
 8005f24:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d108      	bne.n	8005f40 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6818      	ldr	r0, [r3, #0]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005f38:	461a      	mov	r2, r3
 8005f3a:	2100      	movs	r1, #0
 8005f3c:	f005 febc 	bl	800bcb8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	b2db      	uxtb	r3, r3
 8005f44:	4619      	mov	r1, r3
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f00b f8ee 	bl	8011128 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005f4c:	2300      	movs	r3, #0
}
 8005f4e:	4618      	mov	r0, r3
 8005f50:	3720      	adds	r7, #32
 8005f52:	46bd      	mov	sp, r7
 8005f54:	bd80      	pop	{r7, pc}
 8005f56:	bf00      	nop
 8005f58:	4f54300a 	.word	0x4f54300a
 8005f5c:	4f54310a 	.word	0x4f54310a

08005f60 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	b086      	sub	sp, #24
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
 8005f68:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f70:	697b      	ldr	r3, [r7, #20]
 8005f72:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	333c      	adds	r3, #60	; 0x3c
 8005f78:	3304      	adds	r3, #4
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	015a      	lsls	r2, r3, #5
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	4413      	add	r3, r2
 8005f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d90e      	bls.n	8005fb4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d009      	beq.n	8005fb4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	015a      	lsls	r2, r3, #5
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fac:	461a      	mov	r2, r3
 8005fae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005fb2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f00b f8a5 	bl	8011104 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4a0a      	ldr	r2, [pc, #40]	; (8005fe8 <PCD_EP_OutSetupPacket_int+0x88>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d90c      	bls.n	8005fdc <PCD_EP_OutSetupPacket_int+0x7c>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	2b01      	cmp	r3, #1
 8005fc8:	d108      	bne.n	8005fdc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6818      	ldr	r0, [r3, #0]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fd4:	461a      	mov	r2, r3
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	f005 fe6e 	bl	800bcb8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3718      	adds	r7, #24
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	bd80      	pop	{r7, pc}
 8005fe6:	bf00      	nop
 8005fe8:	4f54300a 	.word	0x4f54300a

08005fec <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005fec:	b480      	push	{r7}
 8005fee:	b085      	sub	sp, #20
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
 8005ff8:	4613      	mov	r3, r2
 8005ffa:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006002:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006004:	78fb      	ldrb	r3, [r7, #3]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d107      	bne.n	800601a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800600a:	883b      	ldrh	r3, [r7, #0]
 800600c:	0419      	lsls	r1, r3, #16
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68ba      	ldr	r2, [r7, #8]
 8006014:	430a      	orrs	r2, r1
 8006016:	629a      	str	r2, [r3, #40]	; 0x28
 8006018:	e028      	b.n	800606c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006020:	0c1b      	lsrs	r3, r3, #16
 8006022:	68ba      	ldr	r2, [r7, #8]
 8006024:	4413      	add	r3, r2
 8006026:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006028:	2300      	movs	r3, #0
 800602a:	73fb      	strb	r3, [r7, #15]
 800602c:	e00d      	b.n	800604a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	7bfb      	ldrb	r3, [r7, #15]
 8006034:	3340      	adds	r3, #64	; 0x40
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	4413      	add	r3, r2
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	0c1b      	lsrs	r3, r3, #16
 800603e:	68ba      	ldr	r2, [r7, #8]
 8006040:	4413      	add	r3, r2
 8006042:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006044:	7bfb      	ldrb	r3, [r7, #15]
 8006046:	3301      	adds	r3, #1
 8006048:	73fb      	strb	r3, [r7, #15]
 800604a:	7bfa      	ldrb	r2, [r7, #15]
 800604c:	78fb      	ldrb	r3, [r7, #3]
 800604e:	3b01      	subs	r3, #1
 8006050:	429a      	cmp	r2, r3
 8006052:	d3ec      	bcc.n	800602e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006054:	883b      	ldrh	r3, [r7, #0]
 8006056:	0418      	lsls	r0, r3, #16
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6819      	ldr	r1, [r3, #0]
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	3b01      	subs	r3, #1
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	4302      	orrs	r2, r0
 8006064:	3340      	adds	r3, #64	; 0x40
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	440b      	add	r3, r1
 800606a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800606c:	2300      	movs	r3, #0
}
 800606e:	4618      	mov	r0, r3
 8006070:	3714      	adds	r7, #20
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr

0800607a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800607a:	b480      	push	{r7}
 800607c:	b083      	sub	sp, #12
 800607e:	af00      	add	r7, sp, #0
 8006080:	6078      	str	r0, [r7, #4]
 8006082:	460b      	mov	r3, r1
 8006084:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	887a      	ldrh	r2, [r7, #2]
 800608c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609a:	4770      	bx	lr

0800609c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800609c:	b480      	push	{r7}
 800609e:	b085      	sub	sp, #20
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	2201      	movs	r2, #1
 80060ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2200      	movs	r2, #0
 80060b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	699b      	ldr	r3, [r3, #24]
 80060be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80060ca:	4b05      	ldr	r3, [pc, #20]	; (80060e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80060cc:	4313      	orrs	r3, r2
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80060d2:	2300      	movs	r3, #0
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3714      	adds	r7, #20
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr
 80060e0:	10000003 	.word	0x10000003

080060e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80060e4:	b480      	push	{r7}
 80060e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060e8:	4b05      	ldr	r3, [pc, #20]	; (8006100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a04      	ldr	r2, [pc, #16]	; (8006100 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80060ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80060f2:	6013      	str	r3, [r2, #0]
}
 80060f4:	bf00      	nop
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40007000 	.word	0x40007000

08006104 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b082      	sub	sp, #8
 8006108:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800610a:	2300      	movs	r3, #0
 800610c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800610e:	4b23      	ldr	r3, [pc, #140]	; (800619c <HAL_PWREx_EnableOverDrive+0x98>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4a22      	ldr	r2, [pc, #136]	; (800619c <HAL_PWREx_EnableOverDrive+0x98>)
 8006114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006118:	6413      	str	r3, [r2, #64]	; 0x40
 800611a:	4b20      	ldr	r3, [pc, #128]	; (800619c <HAL_PWREx_EnableOverDrive+0x98>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	603b      	str	r3, [r7, #0]
 8006124:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006126:	4b1e      	ldr	r3, [pc, #120]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a1d      	ldr	r2, [pc, #116]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800612c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006130:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006132:	f7fb ff2d 	bl	8001f90 <HAL_GetTick>
 8006136:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006138:	e009      	b.n	800614e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800613a:	f7fb ff29 	bl	8001f90 <HAL_GetTick>
 800613e:	4602      	mov	r2, r0
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	1ad3      	subs	r3, r2, r3
 8006144:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006148:	d901      	bls.n	800614e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e022      	b.n	8006194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800614e:	4b14      	ldr	r3, [pc, #80]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006156:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615a:	d1ee      	bne.n	800613a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800615c:	4b10      	ldr	r3, [pc, #64]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	4a0f      	ldr	r2, [pc, #60]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006162:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006166:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006168:	f7fb ff12 	bl	8001f90 <HAL_GetTick>
 800616c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800616e:	e009      	b.n	8006184 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006170:	f7fb ff0e 	bl	8001f90 <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800617e:	d901      	bls.n	8006184 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006180:	2303      	movs	r3, #3
 8006182:	e007      	b.n	8006194 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006184:	4b06      	ldr	r3, [pc, #24]	; (80061a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006190:	d1ee      	bne.n	8006170 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}
 800619c:	40023800 	.word	0x40023800
 80061a0:	40007000 	.word	0x40007000

080061a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b086      	sub	sp, #24
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80061ac:	2300      	movs	r3, #0
 80061ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d101      	bne.n	80061ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e291      	b.n	80066de <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	f000 8087 	beq.w	80062d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80061c8:	4b96      	ldr	r3, [pc, #600]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80061ca:	689b      	ldr	r3, [r3, #8]
 80061cc:	f003 030c 	and.w	r3, r3, #12
 80061d0:	2b04      	cmp	r3, #4
 80061d2:	d00c      	beq.n	80061ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80061d4:	4b93      	ldr	r3, [pc, #588]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	f003 030c 	and.w	r3, r3, #12
 80061dc:	2b08      	cmp	r3, #8
 80061de:	d112      	bne.n	8006206 <HAL_RCC_OscConfig+0x62>
 80061e0:	4b90      	ldr	r3, [pc, #576]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061ec:	d10b      	bne.n	8006206 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80061ee:	4b8d      	ldr	r3, [pc, #564]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d06c      	beq.n	80062d4 <HAL_RCC_OscConfig+0x130>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d168      	bne.n	80062d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8006202:	2301      	movs	r3, #1
 8006204:	e26b      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800620e:	d106      	bne.n	800621e <HAL_RCC_OscConfig+0x7a>
 8006210:	4b84      	ldr	r3, [pc, #528]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	4a83      	ldr	r2, [pc, #524]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800621a:	6013      	str	r3, [r2, #0]
 800621c:	e02e      	b.n	800627c <HAL_RCC_OscConfig+0xd8>
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d10c      	bne.n	8006240 <HAL_RCC_OscConfig+0x9c>
 8006226:	4b7f      	ldr	r3, [pc, #508]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a7e      	ldr	r2, [pc, #504]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800622c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	4b7c      	ldr	r3, [pc, #496]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	4a7b      	ldr	r2, [pc, #492]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006238:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800623c:	6013      	str	r3, [r2, #0]
 800623e:	e01d      	b.n	800627c <HAL_RCC_OscConfig+0xd8>
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006248:	d10c      	bne.n	8006264 <HAL_RCC_OscConfig+0xc0>
 800624a:	4b76      	ldr	r3, [pc, #472]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	4a75      	ldr	r2, [pc, #468]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006250:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006254:	6013      	str	r3, [r2, #0]
 8006256:	4b73      	ldr	r3, [pc, #460]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4a72      	ldr	r2, [pc, #456]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800625c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006260:	6013      	str	r3, [r2, #0]
 8006262:	e00b      	b.n	800627c <HAL_RCC_OscConfig+0xd8>
 8006264:	4b6f      	ldr	r3, [pc, #444]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	4a6e      	ldr	r2, [pc, #440]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800626a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4b6c      	ldr	r3, [pc, #432]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	4a6b      	ldr	r2, [pc, #428]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006276:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800627a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	685b      	ldr	r3, [r3, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	d013      	beq.n	80062ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006284:	f7fb fe84 	bl	8001f90 <HAL_GetTick>
 8006288:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800628a:	e008      	b.n	800629e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800628c:	f7fb fe80 	bl	8001f90 <HAL_GetTick>
 8006290:	4602      	mov	r2, r0
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	1ad3      	subs	r3, r2, r3
 8006296:	2b64      	cmp	r3, #100	; 0x64
 8006298:	d901      	bls.n	800629e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800629a:	2303      	movs	r3, #3
 800629c:	e21f      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800629e:	4b61      	ldr	r3, [pc, #388]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d0f0      	beq.n	800628c <HAL_RCC_OscConfig+0xe8>
 80062aa:	e014      	b.n	80062d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80062ac:	f7fb fe70 	bl	8001f90 <HAL_GetTick>
 80062b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062b2:	e008      	b.n	80062c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80062b4:	f7fb fe6c 	bl	8001f90 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	2b64      	cmp	r3, #100	; 0x64
 80062c0:	d901      	bls.n	80062c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80062c2:	2303      	movs	r3, #3
 80062c4:	e20b      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80062c6:	4b57      	ldr	r3, [pc, #348]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d1f0      	bne.n	80062b4 <HAL_RCC_OscConfig+0x110>
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0302 	and.w	r3, r3, #2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d069      	beq.n	80063b6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80062e2:	4b50      	ldr	r3, [pc, #320]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	f003 030c 	and.w	r3, r3, #12
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00b      	beq.n	8006306 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80062ee:	4b4d      	ldr	r3, [pc, #308]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062f0:	689b      	ldr	r3, [r3, #8]
 80062f2:	f003 030c 	and.w	r3, r3, #12
 80062f6:	2b08      	cmp	r3, #8
 80062f8:	d11c      	bne.n	8006334 <HAL_RCC_OscConfig+0x190>
 80062fa:	4b4a      	ldr	r3, [pc, #296]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006302:	2b00      	cmp	r3, #0
 8006304:	d116      	bne.n	8006334 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006306:	4b47      	ldr	r3, [pc, #284]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0302 	and.w	r3, r3, #2
 800630e:	2b00      	cmp	r3, #0
 8006310:	d005      	beq.n	800631e <HAL_RCC_OscConfig+0x17a>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	68db      	ldr	r3, [r3, #12]
 8006316:	2b01      	cmp	r3, #1
 8006318:	d001      	beq.n	800631e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800631a:	2301      	movs	r3, #1
 800631c:	e1df      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800631e:	4b41      	ldr	r3, [pc, #260]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	691b      	ldr	r3, [r3, #16]
 800632a:	00db      	lsls	r3, r3, #3
 800632c:	493d      	ldr	r1, [pc, #244]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800632e:	4313      	orrs	r3, r2
 8006330:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006332:	e040      	b.n	80063b6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d023      	beq.n	8006384 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800633c:	4b39      	ldr	r3, [pc, #228]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a38      	ldr	r2, [pc, #224]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006342:	f043 0301 	orr.w	r3, r3, #1
 8006346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006348:	f7fb fe22 	bl	8001f90 <HAL_GetTick>
 800634c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800634e:	e008      	b.n	8006362 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006350:	f7fb fe1e 	bl	8001f90 <HAL_GetTick>
 8006354:	4602      	mov	r2, r0
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	2b02      	cmp	r3, #2
 800635c:	d901      	bls.n	8006362 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800635e:	2303      	movs	r3, #3
 8006360:	e1bd      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006362:	4b30      	ldr	r3, [pc, #192]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	f003 0302 	and.w	r3, r3, #2
 800636a:	2b00      	cmp	r3, #0
 800636c:	d0f0      	beq.n	8006350 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800636e:	4b2d      	ldr	r3, [pc, #180]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	00db      	lsls	r3, r3, #3
 800637c:	4929      	ldr	r1, [pc, #164]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800637e:	4313      	orrs	r3, r2
 8006380:	600b      	str	r3, [r1, #0]
 8006382:	e018      	b.n	80063b6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006384:	4b27      	ldr	r3, [pc, #156]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a26      	ldr	r2, [pc, #152]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 800638a:	f023 0301 	bic.w	r3, r3, #1
 800638e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006390:	f7fb fdfe 	bl	8001f90 <HAL_GetTick>
 8006394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006396:	e008      	b.n	80063aa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006398:	f7fb fdfa 	bl	8001f90 <HAL_GetTick>
 800639c:	4602      	mov	r2, r0
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	1ad3      	subs	r3, r2, r3
 80063a2:	2b02      	cmp	r3, #2
 80063a4:	d901      	bls.n	80063aa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e199      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80063aa:	4b1e      	ldr	r3, [pc, #120]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d1f0      	bne.n	8006398 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f003 0308 	and.w	r3, r3, #8
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d038      	beq.n	8006434 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d019      	beq.n	80063fe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80063ca:	4b16      	ldr	r3, [pc, #88]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80063cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063ce:	4a15      	ldr	r2, [pc, #84]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80063d0:	f043 0301 	orr.w	r3, r3, #1
 80063d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d6:	f7fb fddb 	bl	8001f90 <HAL_GetTick>
 80063da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063dc:	e008      	b.n	80063f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80063de:	f7fb fdd7 	bl	8001f90 <HAL_GetTick>
 80063e2:	4602      	mov	r2, r0
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	2b02      	cmp	r3, #2
 80063ea:	d901      	bls.n	80063f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80063ec:	2303      	movs	r3, #3
 80063ee:	e176      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063f0:	4b0c      	ldr	r3, [pc, #48]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 80063f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d0f0      	beq.n	80063de <HAL_RCC_OscConfig+0x23a>
 80063fc:	e01a      	b.n	8006434 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80063fe:	4b09      	ldr	r3, [pc, #36]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006402:	4a08      	ldr	r2, [pc, #32]	; (8006424 <HAL_RCC_OscConfig+0x280>)
 8006404:	f023 0301 	bic.w	r3, r3, #1
 8006408:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800640a:	f7fb fdc1 	bl	8001f90 <HAL_GetTick>
 800640e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006410:	e00a      	b.n	8006428 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006412:	f7fb fdbd 	bl	8001f90 <HAL_GetTick>
 8006416:	4602      	mov	r2, r0
 8006418:	693b      	ldr	r3, [r7, #16]
 800641a:	1ad3      	subs	r3, r2, r3
 800641c:	2b02      	cmp	r3, #2
 800641e:	d903      	bls.n	8006428 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8006420:	2303      	movs	r3, #3
 8006422:	e15c      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
 8006424:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006428:	4b91      	ldr	r3, [pc, #580]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 800642a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642c:	f003 0302 	and.w	r3, r3, #2
 8006430:	2b00      	cmp	r3, #0
 8006432:	d1ee      	bne.n	8006412 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0304 	and.w	r3, r3, #4
 800643c:	2b00      	cmp	r3, #0
 800643e:	f000 80a4 	beq.w	800658a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006442:	4b8b      	ldr	r3, [pc, #556]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d10d      	bne.n	800646a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800644e:	4b88      	ldr	r3, [pc, #544]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006452:	4a87      	ldr	r2, [pc, #540]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006458:	6413      	str	r3, [r2, #64]	; 0x40
 800645a:	4b85      	ldr	r3, [pc, #532]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 800645c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006462:	60bb      	str	r3, [r7, #8]
 8006464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006466:	2301      	movs	r3, #1
 8006468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800646a:	4b82      	ldr	r3, [pc, #520]	; (8006674 <HAL_RCC_OscConfig+0x4d0>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006472:	2b00      	cmp	r3, #0
 8006474:	d118      	bne.n	80064a8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8006476:	4b7f      	ldr	r3, [pc, #508]	; (8006674 <HAL_RCC_OscConfig+0x4d0>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a7e      	ldr	r2, [pc, #504]	; (8006674 <HAL_RCC_OscConfig+0x4d0>)
 800647c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006482:	f7fb fd85 	bl	8001f90 <HAL_GetTick>
 8006486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006488:	e008      	b.n	800649c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800648a:	f7fb fd81 	bl	8001f90 <HAL_GetTick>
 800648e:	4602      	mov	r2, r0
 8006490:	693b      	ldr	r3, [r7, #16]
 8006492:	1ad3      	subs	r3, r2, r3
 8006494:	2b64      	cmp	r3, #100	; 0x64
 8006496:	d901      	bls.n	800649c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8006498:	2303      	movs	r3, #3
 800649a:	e120      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800649c:	4b75      	ldr	r3, [pc, #468]	; (8006674 <HAL_RCC_OscConfig+0x4d0>)
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d0f0      	beq.n	800648a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	689b      	ldr	r3, [r3, #8]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d106      	bne.n	80064be <HAL_RCC_OscConfig+0x31a>
 80064b0:	4b6f      	ldr	r3, [pc, #444]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064b4:	4a6e      	ldr	r2, [pc, #440]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064b6:	f043 0301 	orr.w	r3, r3, #1
 80064ba:	6713      	str	r3, [r2, #112]	; 0x70
 80064bc:	e02d      	b.n	800651a <HAL_RCC_OscConfig+0x376>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d10c      	bne.n	80064e0 <HAL_RCC_OscConfig+0x33c>
 80064c6:	4b6a      	ldr	r3, [pc, #424]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ca:	4a69      	ldr	r2, [pc, #420]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064cc:	f023 0301 	bic.w	r3, r3, #1
 80064d0:	6713      	str	r3, [r2, #112]	; 0x70
 80064d2:	4b67      	ldr	r3, [pc, #412]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064d6:	4a66      	ldr	r2, [pc, #408]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064d8:	f023 0304 	bic.w	r3, r3, #4
 80064dc:	6713      	str	r3, [r2, #112]	; 0x70
 80064de:	e01c      	b.n	800651a <HAL_RCC_OscConfig+0x376>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	689b      	ldr	r3, [r3, #8]
 80064e4:	2b05      	cmp	r3, #5
 80064e6:	d10c      	bne.n	8006502 <HAL_RCC_OscConfig+0x35e>
 80064e8:	4b61      	ldr	r3, [pc, #388]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064ec:	4a60      	ldr	r2, [pc, #384]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064ee:	f043 0304 	orr.w	r3, r3, #4
 80064f2:	6713      	str	r3, [r2, #112]	; 0x70
 80064f4:	4b5e      	ldr	r3, [pc, #376]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80064f8:	4a5d      	ldr	r2, [pc, #372]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80064fa:	f043 0301 	orr.w	r3, r3, #1
 80064fe:	6713      	str	r3, [r2, #112]	; 0x70
 8006500:	e00b      	b.n	800651a <HAL_RCC_OscConfig+0x376>
 8006502:	4b5b      	ldr	r3, [pc, #364]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006504:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006506:	4a5a      	ldr	r2, [pc, #360]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006508:	f023 0301 	bic.w	r3, r3, #1
 800650c:	6713      	str	r3, [r2, #112]	; 0x70
 800650e:	4b58      	ldr	r3, [pc, #352]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006510:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006512:	4a57      	ldr	r2, [pc, #348]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006514:	f023 0304 	bic.w	r3, r3, #4
 8006518:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	689b      	ldr	r3, [r3, #8]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d015      	beq.n	800654e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006522:	f7fb fd35 	bl	8001f90 <HAL_GetTick>
 8006526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006528:	e00a      	b.n	8006540 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800652a:	f7fb fd31 	bl	8001f90 <HAL_GetTick>
 800652e:	4602      	mov	r2, r0
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f241 3288 	movw	r2, #5000	; 0x1388
 8006538:	4293      	cmp	r3, r2
 800653a:	d901      	bls.n	8006540 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e0ce      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006540:	4b4b      	ldr	r3, [pc, #300]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006542:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006544:	f003 0302 	and.w	r3, r3, #2
 8006548:	2b00      	cmp	r3, #0
 800654a:	d0ee      	beq.n	800652a <HAL_RCC_OscConfig+0x386>
 800654c:	e014      	b.n	8006578 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800654e:	f7fb fd1f 	bl	8001f90 <HAL_GetTick>
 8006552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006554:	e00a      	b.n	800656c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006556:	f7fb fd1b 	bl	8001f90 <HAL_GetTick>
 800655a:	4602      	mov	r2, r0
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	1ad3      	subs	r3, r2, r3
 8006560:	f241 3288 	movw	r2, #5000	; 0x1388
 8006564:	4293      	cmp	r3, r2
 8006566:	d901      	bls.n	800656c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006568:	2303      	movs	r3, #3
 800656a:	e0b8      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800656c:	4b40      	ldr	r3, [pc, #256]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 800656e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006570:	f003 0302 	and.w	r3, r3, #2
 8006574:	2b00      	cmp	r3, #0
 8006576:	d1ee      	bne.n	8006556 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006578:	7dfb      	ldrb	r3, [r7, #23]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d105      	bne.n	800658a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800657e:	4b3c      	ldr	r3, [pc, #240]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006582:	4a3b      	ldr	r2, [pc, #236]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006588:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	699b      	ldr	r3, [r3, #24]
 800658e:	2b00      	cmp	r3, #0
 8006590:	f000 80a4 	beq.w	80066dc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006594:	4b36      	ldr	r3, [pc, #216]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 030c 	and.w	r3, r3, #12
 800659c:	2b08      	cmp	r3, #8
 800659e:	d06b      	beq.n	8006678 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b02      	cmp	r3, #2
 80065a6:	d149      	bne.n	800663c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80065a8:	4b31      	ldr	r3, [pc, #196]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	4a30      	ldr	r2, [pc, #192]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80065ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80065b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80065b4:	f7fb fcec 	bl	8001f90 <HAL_GetTick>
 80065b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ba:	e008      	b.n	80065ce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80065bc:	f7fb fce8 	bl	8001f90 <HAL_GetTick>
 80065c0:	4602      	mov	r2, r0
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	1ad3      	subs	r3, r2, r3
 80065c6:	2b02      	cmp	r3, #2
 80065c8:	d901      	bls.n	80065ce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e087      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80065ce:	4b28      	ldr	r3, [pc, #160]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d1f0      	bne.n	80065bc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	69da      	ldr	r2, [r3, #28]
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	6a1b      	ldr	r3, [r3, #32]
 80065e2:	431a      	orrs	r2, r3
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	019b      	lsls	r3, r3, #6
 80065ea:	431a      	orrs	r2, r3
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f0:	085b      	lsrs	r3, r3, #1
 80065f2:	3b01      	subs	r3, #1
 80065f4:	041b      	lsls	r3, r3, #16
 80065f6:	431a      	orrs	r2, r3
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	061b      	lsls	r3, r3, #24
 80065fe:	4313      	orrs	r3, r2
 8006600:	4a1b      	ldr	r2, [pc, #108]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006602:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006606:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006608:	4b19      	ldr	r3, [pc, #100]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a18      	ldr	r2, [pc, #96]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 800660e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006614:	f7fb fcbc 	bl	8001f90 <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800661a:	e008      	b.n	800662e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800661c:	f7fb fcb8 	bl	8001f90 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	2b02      	cmp	r3, #2
 8006628:	d901      	bls.n	800662e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800662a:	2303      	movs	r3, #3
 800662c:	e057      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800662e:	4b10      	ldr	r3, [pc, #64]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f0      	beq.n	800661c <HAL_RCC_OscConfig+0x478>
 800663a:	e04f      	b.n	80066dc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800663c:	4b0c      	ldr	r3, [pc, #48]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 800663e:	681b      	ldr	r3, [r3, #0]
 8006640:	4a0b      	ldr	r2, [pc, #44]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006646:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006648:	f7fb fca2 	bl	8001f90 <HAL_GetTick>
 800664c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800664e:	e008      	b.n	8006662 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006650:	f7fb fc9e 	bl	8001f90 <HAL_GetTick>
 8006654:	4602      	mov	r2, r0
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	1ad3      	subs	r3, r2, r3
 800665a:	2b02      	cmp	r3, #2
 800665c:	d901      	bls.n	8006662 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800665e:	2303      	movs	r3, #3
 8006660:	e03d      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006662:	4b03      	ldr	r3, [pc, #12]	; (8006670 <HAL_RCC_OscConfig+0x4cc>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1f0      	bne.n	8006650 <HAL_RCC_OscConfig+0x4ac>
 800666e:	e035      	b.n	80066dc <HAL_RCC_OscConfig+0x538>
 8006670:	40023800 	.word	0x40023800
 8006674:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006678:	4b1b      	ldr	r3, [pc, #108]	; (80066e8 <HAL_RCC_OscConfig+0x544>)
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	699b      	ldr	r3, [r3, #24]
 8006682:	2b01      	cmp	r3, #1
 8006684:	d028      	beq.n	80066d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006690:	429a      	cmp	r2, r3
 8006692:	d121      	bne.n	80066d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800669e:	429a      	cmp	r2, r3
 80066a0:	d11a      	bne.n	80066d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80066a8:	4013      	ands	r3, r2
 80066aa:	687a      	ldr	r2, [r7, #4]
 80066ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80066ae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80066b0:	4293      	cmp	r3, r2
 80066b2:	d111      	bne.n	80066d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066be:	085b      	lsrs	r3, r3, #1
 80066c0:	3b01      	subs	r3, #1
 80066c2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d107      	bne.n	80066d8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d001      	beq.n	80066dc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80066d8:	2301      	movs	r3, #1
 80066da:	e000      	b.n	80066de <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	40023800 	.word	0x40023800

080066ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80066ec:	b580      	push	{r7, lr}
 80066ee:	b084      	sub	sp, #16
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80066f6:	2300      	movs	r3, #0
 80066f8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d101      	bne.n	8006704 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e0d0      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006704:	4b6a      	ldr	r3, [pc, #424]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	f003 030f 	and.w	r3, r3, #15
 800670c:	683a      	ldr	r2, [r7, #0]
 800670e:	429a      	cmp	r2, r3
 8006710:	d910      	bls.n	8006734 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006712:	4b67      	ldr	r3, [pc, #412]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f023 020f 	bic.w	r2, r3, #15
 800671a:	4965      	ldr	r1, [pc, #404]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	4313      	orrs	r3, r2
 8006720:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006722:	4b63      	ldr	r3, [pc, #396]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f003 030f 	and.w	r3, r3, #15
 800672a:	683a      	ldr	r2, [r7, #0]
 800672c:	429a      	cmp	r2, r3
 800672e:	d001      	beq.n	8006734 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006730:	2301      	movs	r3, #1
 8006732:	e0b8      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0302 	and.w	r3, r3, #2
 800673c:	2b00      	cmp	r3, #0
 800673e:	d020      	beq.n	8006782 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0304 	and.w	r3, r3, #4
 8006748:	2b00      	cmp	r3, #0
 800674a:	d005      	beq.n	8006758 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800674c:	4b59      	ldr	r3, [pc, #356]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	4a58      	ldr	r2, [pc, #352]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006752:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006756:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f003 0308 	and.w	r3, r3, #8
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006764:	4b53      	ldr	r3, [pc, #332]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	4a52      	ldr	r2, [pc, #328]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 800676a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800676e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006770:	4b50      	ldr	r3, [pc, #320]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	689b      	ldr	r3, [r3, #8]
 800677c:	494d      	ldr	r1, [pc, #308]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 800677e:	4313      	orrs	r3, r2
 8006780:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d040      	beq.n	8006810 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b01      	cmp	r3, #1
 8006794:	d107      	bne.n	80067a6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006796:	4b47      	ldr	r3, [pc, #284]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d115      	bne.n	80067ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067a2:	2301      	movs	r3, #1
 80067a4:	e07f      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2b02      	cmp	r3, #2
 80067ac:	d107      	bne.n	80067be <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80067ae:	4b41      	ldr	r3, [pc, #260]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d109      	bne.n	80067ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e073      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067be:	4b3d      	ldr	r3, [pc, #244]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f003 0302 	and.w	r3, r3, #2
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d101      	bne.n	80067ce <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80067ca:	2301      	movs	r3, #1
 80067cc:	e06b      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80067ce:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	f023 0203 	bic.w	r2, r3, #3
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	4936      	ldr	r1, [pc, #216]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 80067dc:	4313      	orrs	r3, r2
 80067de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80067e0:	f7fb fbd6 	bl	8001f90 <HAL_GetTick>
 80067e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067e6:	e00a      	b.n	80067fe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80067e8:	f7fb fbd2 	bl	8001f90 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d901      	bls.n	80067fe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80067fa:	2303      	movs	r3, #3
 80067fc:	e053      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80067fe:	4b2d      	ldr	r3, [pc, #180]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006800:	689b      	ldr	r3, [r3, #8]
 8006802:	f003 020c 	and.w	r2, r3, #12
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	685b      	ldr	r3, [r3, #4]
 800680a:	009b      	lsls	r3, r3, #2
 800680c:	429a      	cmp	r2, r3
 800680e:	d1eb      	bne.n	80067e8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006810:	4b27      	ldr	r3, [pc, #156]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f003 030f 	and.w	r3, r3, #15
 8006818:	683a      	ldr	r2, [r7, #0]
 800681a:	429a      	cmp	r2, r3
 800681c:	d210      	bcs.n	8006840 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800681e:	4b24      	ldr	r3, [pc, #144]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f023 020f 	bic.w	r2, r3, #15
 8006826:	4922      	ldr	r1, [pc, #136]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	4313      	orrs	r3, r2
 800682c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800682e:	4b20      	ldr	r3, [pc, #128]	; (80068b0 <HAL_RCC_ClockConfig+0x1c4>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f003 030f 	and.w	r3, r3, #15
 8006836:	683a      	ldr	r2, [r7, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d001      	beq.n	8006840 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	e032      	b.n	80068a6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d008      	beq.n	800685e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800684c:	4b19      	ldr	r3, [pc, #100]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 800684e:	689b      	ldr	r3, [r3, #8]
 8006850:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4916      	ldr	r1, [pc, #88]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 800685a:	4313      	orrs	r3, r2
 800685c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f003 0308 	and.w	r3, r3, #8
 8006866:	2b00      	cmp	r3, #0
 8006868:	d009      	beq.n	800687e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 800686c:	689b      	ldr	r3, [r3, #8]
 800686e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	691b      	ldr	r3, [r3, #16]
 8006876:	00db      	lsls	r3, r3, #3
 8006878:	490e      	ldr	r1, [pc, #56]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 800687a:	4313      	orrs	r3, r2
 800687c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800687e:	f000 f821 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 8006882:	4602      	mov	r2, r0
 8006884:	4b0b      	ldr	r3, [pc, #44]	; (80068b4 <HAL_RCC_ClockConfig+0x1c8>)
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	091b      	lsrs	r3, r3, #4
 800688a:	f003 030f 	and.w	r3, r3, #15
 800688e:	490a      	ldr	r1, [pc, #40]	; (80068b8 <HAL_RCC_ClockConfig+0x1cc>)
 8006890:	5ccb      	ldrb	r3, [r1, r3]
 8006892:	fa22 f303 	lsr.w	r3, r2, r3
 8006896:	4a09      	ldr	r2, [pc, #36]	; (80068bc <HAL_RCC_ClockConfig+0x1d0>)
 8006898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800689a:	4b09      	ldr	r3, [pc, #36]	; (80068c0 <HAL_RCC_ClockConfig+0x1d4>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7fb fb32 	bl	8001f08 <HAL_InitTick>

  return HAL_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3710      	adds	r7, #16
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}
 80068ae:	bf00      	nop
 80068b0:	40023c00 	.word	0x40023c00
 80068b4:	40023800 	.word	0x40023800
 80068b8:	0801483c 	.word	0x0801483c
 80068bc:	20000000 	.word	0x20000000
 80068c0:	20000004 	.word	0x20000004

080068c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80068c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c8:	b094      	sub	sp, #80	; 0x50
 80068ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80068cc:	2300      	movs	r3, #0
 80068ce:	647b      	str	r3, [r7, #68]	; 0x44
 80068d0:	2300      	movs	r3, #0
 80068d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80068d4:	2300      	movs	r3, #0
 80068d6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80068d8:	2300      	movs	r3, #0
 80068da:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80068dc:	4b79      	ldr	r3, [pc, #484]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	f003 030c 	and.w	r3, r3, #12
 80068e4:	2b08      	cmp	r3, #8
 80068e6:	d00d      	beq.n	8006904 <HAL_RCC_GetSysClockFreq+0x40>
 80068e8:	2b08      	cmp	r3, #8
 80068ea:	f200 80e1 	bhi.w	8006ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d002      	beq.n	80068f8 <HAL_RCC_GetSysClockFreq+0x34>
 80068f2:	2b04      	cmp	r3, #4
 80068f4:	d003      	beq.n	80068fe <HAL_RCC_GetSysClockFreq+0x3a>
 80068f6:	e0db      	b.n	8006ab0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80068f8:	4b73      	ldr	r3, [pc, #460]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 80068fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80068fc:	e0db      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80068fe:	4b72      	ldr	r3, [pc, #456]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006900:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006902:	e0d8      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006904:	4b6f      	ldr	r3, [pc, #444]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006906:	685b      	ldr	r3, [r3, #4]
 8006908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800690c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800690e:	4b6d      	ldr	r3, [pc, #436]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006910:	685b      	ldr	r3, [r3, #4]
 8006912:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006916:	2b00      	cmp	r3, #0
 8006918:	d063      	beq.n	80069e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800691a:	4b6a      	ldr	r3, [pc, #424]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	099b      	lsrs	r3, r3, #6
 8006920:	2200      	movs	r2, #0
 8006922:	63bb      	str	r3, [r7, #56]	; 0x38
 8006924:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006928:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800692c:	633b      	str	r3, [r7, #48]	; 0x30
 800692e:	2300      	movs	r3, #0
 8006930:	637b      	str	r3, [r7, #52]	; 0x34
 8006932:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006936:	4622      	mov	r2, r4
 8006938:	462b      	mov	r3, r5
 800693a:	f04f 0000 	mov.w	r0, #0
 800693e:	f04f 0100 	mov.w	r1, #0
 8006942:	0159      	lsls	r1, r3, #5
 8006944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006948:	0150      	lsls	r0, r2, #5
 800694a:	4602      	mov	r2, r0
 800694c:	460b      	mov	r3, r1
 800694e:	4621      	mov	r1, r4
 8006950:	1a51      	subs	r1, r2, r1
 8006952:	6139      	str	r1, [r7, #16]
 8006954:	4629      	mov	r1, r5
 8006956:	eb63 0301 	sbc.w	r3, r3, r1
 800695a:	617b      	str	r3, [r7, #20]
 800695c:	f04f 0200 	mov.w	r2, #0
 8006960:	f04f 0300 	mov.w	r3, #0
 8006964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006968:	4659      	mov	r1, fp
 800696a:	018b      	lsls	r3, r1, #6
 800696c:	4651      	mov	r1, sl
 800696e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006972:	4651      	mov	r1, sl
 8006974:	018a      	lsls	r2, r1, #6
 8006976:	4651      	mov	r1, sl
 8006978:	ebb2 0801 	subs.w	r8, r2, r1
 800697c:	4659      	mov	r1, fp
 800697e:	eb63 0901 	sbc.w	r9, r3, r1
 8006982:	f04f 0200 	mov.w	r2, #0
 8006986:	f04f 0300 	mov.w	r3, #0
 800698a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800698e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006996:	4690      	mov	r8, r2
 8006998:	4699      	mov	r9, r3
 800699a:	4623      	mov	r3, r4
 800699c:	eb18 0303 	adds.w	r3, r8, r3
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	462b      	mov	r3, r5
 80069a4:	eb49 0303 	adc.w	r3, r9, r3
 80069a8:	60fb      	str	r3, [r7, #12]
 80069aa:	f04f 0200 	mov.w	r2, #0
 80069ae:	f04f 0300 	mov.w	r3, #0
 80069b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80069b6:	4629      	mov	r1, r5
 80069b8:	028b      	lsls	r3, r1, #10
 80069ba:	4621      	mov	r1, r4
 80069bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80069c0:	4621      	mov	r1, r4
 80069c2:	028a      	lsls	r2, r1, #10
 80069c4:	4610      	mov	r0, r2
 80069c6:	4619      	mov	r1, r3
 80069c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80069ca:	2200      	movs	r2, #0
 80069cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80069ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80069d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80069d4:	f7fa f908 	bl	8000be8 <__aeabi_uldivmod>
 80069d8:	4602      	mov	r2, r0
 80069da:	460b      	mov	r3, r1
 80069dc:	4613      	mov	r3, r2
 80069de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80069e0:	e058      	b.n	8006a94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069e2:	4b38      	ldr	r3, [pc, #224]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	099b      	lsrs	r3, r3, #6
 80069e8:	2200      	movs	r2, #0
 80069ea:	4618      	mov	r0, r3
 80069ec:	4611      	mov	r1, r2
 80069ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80069f2:	623b      	str	r3, [r7, #32]
 80069f4:	2300      	movs	r3, #0
 80069f6:	627b      	str	r3, [r7, #36]	; 0x24
 80069f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80069fc:	4642      	mov	r2, r8
 80069fe:	464b      	mov	r3, r9
 8006a00:	f04f 0000 	mov.w	r0, #0
 8006a04:	f04f 0100 	mov.w	r1, #0
 8006a08:	0159      	lsls	r1, r3, #5
 8006a0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a0e:	0150      	lsls	r0, r2, #5
 8006a10:	4602      	mov	r2, r0
 8006a12:	460b      	mov	r3, r1
 8006a14:	4641      	mov	r1, r8
 8006a16:	ebb2 0a01 	subs.w	sl, r2, r1
 8006a1a:	4649      	mov	r1, r9
 8006a1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8006a20:	f04f 0200 	mov.w	r2, #0
 8006a24:	f04f 0300 	mov.w	r3, #0
 8006a28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006a2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006a30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006a34:	ebb2 040a 	subs.w	r4, r2, sl
 8006a38:	eb63 050b 	sbc.w	r5, r3, fp
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	00eb      	lsls	r3, r5, #3
 8006a46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006a4a:	00e2      	lsls	r2, r4, #3
 8006a4c:	4614      	mov	r4, r2
 8006a4e:	461d      	mov	r5, r3
 8006a50:	4643      	mov	r3, r8
 8006a52:	18e3      	adds	r3, r4, r3
 8006a54:	603b      	str	r3, [r7, #0]
 8006a56:	464b      	mov	r3, r9
 8006a58:	eb45 0303 	adc.w	r3, r5, r3
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	f04f 0200 	mov.w	r2, #0
 8006a62:	f04f 0300 	mov.w	r3, #0
 8006a66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006a6a:	4629      	mov	r1, r5
 8006a6c:	028b      	lsls	r3, r1, #10
 8006a6e:	4621      	mov	r1, r4
 8006a70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006a74:	4621      	mov	r1, r4
 8006a76:	028a      	lsls	r2, r1, #10
 8006a78:	4610      	mov	r0, r2
 8006a7a:	4619      	mov	r1, r3
 8006a7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006a7e:	2200      	movs	r2, #0
 8006a80:	61bb      	str	r3, [r7, #24]
 8006a82:	61fa      	str	r2, [r7, #28]
 8006a84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a88:	f7fa f8ae 	bl	8000be8 <__aeabi_uldivmod>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	460b      	mov	r3, r1
 8006a90:	4613      	mov	r3, r2
 8006a92:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006a94:	4b0b      	ldr	r3, [pc, #44]	; (8006ac4 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a96:	685b      	ldr	r3, [r3, #4]
 8006a98:	0c1b      	lsrs	r3, r3, #16
 8006a9a:	f003 0303 	and.w	r3, r3, #3
 8006a9e:	3301      	adds	r3, #1
 8006aa0:	005b      	lsls	r3, r3, #1
 8006aa2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006aa6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006aae:	e002      	b.n	8006ab6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <HAL_RCC_GetSysClockFreq+0x204>)
 8006ab2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006ab4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ab6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	3750      	adds	r7, #80	; 0x50
 8006abc:	46bd      	mov	sp, r7
 8006abe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ac2:	bf00      	nop
 8006ac4:	40023800 	.word	0x40023800
 8006ac8:	00f42400 	.word	0x00f42400

08006acc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ad0:	4b03      	ldr	r3, [pc, #12]	; (8006ae0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ad2:	681b      	ldr	r3, [r3, #0]
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr
 8006ade:	bf00      	nop
 8006ae0:	20000000 	.word	0x20000000

08006ae4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ae8:	f7ff fff0 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006aec:	4602      	mov	r2, r0
 8006aee:	4b05      	ldr	r3, [pc, #20]	; (8006b04 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006af0:	689b      	ldr	r3, [r3, #8]
 8006af2:	0a9b      	lsrs	r3, r3, #10
 8006af4:	f003 0307 	and.w	r3, r3, #7
 8006af8:	4903      	ldr	r1, [pc, #12]	; (8006b08 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006afa:	5ccb      	ldrb	r3, [r1, r3]
 8006afc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	bd80      	pop	{r7, pc}
 8006b04:	40023800 	.word	0x40023800
 8006b08:	0801484c 	.word	0x0801484c

08006b0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b10:	f7ff ffdc 	bl	8006acc <HAL_RCC_GetHCLKFreq>
 8006b14:	4602      	mov	r2, r0
 8006b16:	4b05      	ldr	r3, [pc, #20]	; (8006b2c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b18:	689b      	ldr	r3, [r3, #8]
 8006b1a:	0b5b      	lsrs	r3, r3, #13
 8006b1c:	f003 0307 	and.w	r3, r3, #7
 8006b20:	4903      	ldr	r1, [pc, #12]	; (8006b30 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b22:	5ccb      	ldrb	r3, [r1, r3]
 8006b24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	40023800 	.word	0x40023800
 8006b30:	0801484c 	.word	0x0801484c

08006b34 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006b40:	2300      	movs	r3, #0
 8006b42:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006b44:	2300      	movs	r3, #0
 8006b46:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006b48:	2300      	movs	r3, #0
 8006b4a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006b4c:	2300      	movs	r3, #0
 8006b4e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0301 	and.w	r3, r3, #1
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d012      	beq.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006b5c:	4b69      	ldr	r3, [pc, #420]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b5e:	689b      	ldr	r3, [r3, #8]
 8006b60:	4a68      	ldr	r2, [pc, #416]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b62:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006b66:	6093      	str	r3, [r2, #8]
 8006b68:	4b66      	ldr	r3, [pc, #408]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b6a:	689a      	ldr	r2, [r3, #8]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b70:	4964      	ldr	r1, [pc, #400]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b72:	4313      	orrs	r3, r2
 8006b74:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d101      	bne.n	8006b82 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d017      	beq.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006b8e:	4b5d      	ldr	r3, [pc, #372]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b9c:	4959      	ldr	r1, [pc, #356]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d101      	bne.n	8006bbe <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006bba:	2301      	movs	r3, #1
 8006bbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d017      	beq.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006bca:	4b4e      	ldr	r3, [pc, #312]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006bd0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bd8:	494a      	ldr	r1, [pc, #296]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006be8:	d101      	bne.n	8006bee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006bea:	2301      	movs	r3, #1
 8006bec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d001      	beq.n	8006c0a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006c06:	2301      	movs	r3, #1
 8006c08:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 0320 	and.w	r3, r3, #32
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	f000 808b 	beq.w	8006d2e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006c18:	4b3a      	ldr	r3, [pc, #232]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c1c:	4a39      	ldr	r2, [pc, #228]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c22:	6413      	str	r3, [r2, #64]	; 0x40
 8006c24:	4b37      	ldr	r3, [pc, #220]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c2c:	60bb      	str	r3, [r7, #8]
 8006c2e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006c30:	4b35      	ldr	r3, [pc, #212]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	4a34      	ldr	r2, [pc, #208]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006c3c:	f7fb f9a8 	bl	8001f90 <HAL_GetTick>
 8006c40:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c42:	e008      	b.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006c44:	f7fb f9a4 	bl	8001f90 <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	2b64      	cmp	r3, #100	; 0x64
 8006c50:	d901      	bls.n	8006c56 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006c52:	2303      	movs	r3, #3
 8006c54:	e31f      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006c56:	4b2c      	ldr	r3, [pc, #176]	; (8006d08 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d0f0      	beq.n	8006c44 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006c62:	4b28      	ldr	r3, [pc, #160]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c6a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006c6c:	693b      	ldr	r3, [r7, #16]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d035      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c7a:	693a      	ldr	r2, [r7, #16]
 8006c7c:	429a      	cmp	r2, r3
 8006c7e:	d02e      	beq.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006c80:	4b20      	ldr	r3, [pc, #128]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c84:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c88:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006c8a:	4b1e      	ldr	r3, [pc, #120]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c8e:	4a1d      	ldr	r2, [pc, #116]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c94:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006c96:	4b1b      	ldr	r3, [pc, #108]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c9a:	4a1a      	ldr	r2, [pc, #104]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ca0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006ca2:	4a18      	ldr	r2, [pc, #96]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ca8:	4b16      	ldr	r3, [pc, #88]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006caa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cac:	f003 0301 	and.w	r3, r3, #1
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d114      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006cb4:	f7fb f96c 	bl	8001f90 <HAL_GetTick>
 8006cb8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cba:	e00a      	b.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006cbc:	f7fb f968 	bl	8001f90 <HAL_GetTick>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	697b      	ldr	r3, [r7, #20]
 8006cc4:	1ad3      	subs	r3, r2, r3
 8006cc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cca:	4293      	cmp	r3, r2
 8006ccc:	d901      	bls.n	8006cd2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006cce:	2303      	movs	r3, #3
 8006cd0:	e2e1      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006cd2:	4b0c      	ldr	r3, [pc, #48]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cd6:	f003 0302 	and.w	r3, r3, #2
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d0ee      	beq.n	8006cbc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ce2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ce6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006cea:	d111      	bne.n	8006d10 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006cec:	4b05      	ldr	r3, [pc, #20]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cee:	689b      	ldr	r3, [r3, #8]
 8006cf0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006cf8:	4b04      	ldr	r3, [pc, #16]	; (8006d0c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006cfa:	400b      	ands	r3, r1
 8006cfc:	4901      	ldr	r1, [pc, #4]	; (8006d04 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	608b      	str	r3, [r1, #8]
 8006d02:	e00b      	b.n	8006d1c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006d04:	40023800 	.word	0x40023800
 8006d08:	40007000 	.word	0x40007000
 8006d0c:	0ffffcff 	.word	0x0ffffcff
 8006d10:	4ba8      	ldr	r3, [pc, #672]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	4aa7      	ldr	r2, [pc, #668]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d16:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006d1a:	6093      	str	r3, [r2, #8]
 8006d1c:	4ba5      	ldr	r3, [pc, #660]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d1e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d28:	49a2      	ldr	r1, [pc, #648]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d2a:	4313      	orrs	r3, r2
 8006d2c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	f003 0310 	and.w	r3, r3, #16
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d010      	beq.n	8006d5c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006d3a:	4b9e      	ldr	r3, [pc, #632]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006d40:	4a9c      	ldr	r2, [pc, #624]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006d46:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006d4a:	4b9a      	ldr	r3, [pc, #616]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d4c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d54:	4997      	ldr	r1, [pc, #604]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d56:	4313      	orrs	r3, r2
 8006d58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d00a      	beq.n	8006d7e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006d68:	4b92      	ldr	r3, [pc, #584]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d76:	498f      	ldr	r1, [pc, #572]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d78:	4313      	orrs	r3, r2
 8006d7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d00a      	beq.n	8006da0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006d8a:	4b8a      	ldr	r3, [pc, #552]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d98:	4986      	ldr	r1, [pc, #536]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006dac:	4b81      	ldr	r3, [pc, #516]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006dba:	497e      	ldr	r1, [pc, #504]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d00a      	beq.n	8006de4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006dce:	4b79      	ldr	r3, [pc, #484]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006dd4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ddc:	4975      	ldr	r1, [pc, #468]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d00a      	beq.n	8006e06 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006df0:	4b70      	ldr	r3, [pc, #448]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006df6:	f023 0203 	bic.w	r2, r3, #3
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dfe:	496d      	ldr	r1, [pc, #436]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e00:	4313      	orrs	r3, r2
 8006e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00a      	beq.n	8006e28 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006e12:	4b68      	ldr	r3, [pc, #416]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e18:	f023 020c 	bic.w	r2, r3, #12
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e20:	4964      	ldr	r1, [pc, #400]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e22:	4313      	orrs	r3, r2
 8006e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006e34:	4b5f      	ldr	r3, [pc, #380]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e3a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e42:	495c      	ldr	r1, [pc, #368]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e44:	4313      	orrs	r3, r2
 8006e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00a      	beq.n	8006e6c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006e56:	4b57      	ldr	r3, [pc, #348]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e5c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e64:	4953      	ldr	r1, [pc, #332]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e66:	4313      	orrs	r3, r2
 8006e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d00a      	beq.n	8006e8e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006e78:	4b4e      	ldr	r3, [pc, #312]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e7e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e86:	494b      	ldr	r1, [pc, #300]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00a      	beq.n	8006eb0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006e9a:	4b46      	ldr	r3, [pc, #280]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ea0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ea8:	4942      	ldr	r1, [pc, #264]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006eaa:	4313      	orrs	r3, r2
 8006eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00a      	beq.n	8006ed2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006ebc:	4b3d      	ldr	r3, [pc, #244]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ec2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006eca:	493a      	ldr	r1, [pc, #232]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d00a      	beq.n	8006ef4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8006ede:	4b35      	ldr	r3, [pc, #212]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ee4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006eec:	4931      	ldr	r1, [pc, #196]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006eee:	4313      	orrs	r3, r2
 8006ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d00a      	beq.n	8006f16 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006f00:	4b2c      	ldr	r3, [pc, #176]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f06:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f0e:	4929      	ldr	r1, [pc, #164]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f10:	4313      	orrs	r3, r2
 8006f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d011      	beq.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8006f22:	4b24      	ldr	r3, [pc, #144]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f28:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f30:	4920      	ldr	r1, [pc, #128]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006f3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006f40:	d101      	bne.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8006f42:	2301      	movs	r3, #1
 8006f44:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006f52:	4b18      	ldr	r3, [pc, #96]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f58:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f60:	4914      	ldr	r1, [pc, #80]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f62:	4313      	orrs	r3, r2
 8006f64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d00b      	beq.n	8006f8c <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8006f74:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f7a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f84:	490b      	ldr	r1, [pc, #44]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f86:	4313      	orrs	r3, r2
 8006f88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d006      	beq.n	8006fa0 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	f000 80d8 	beq.w	8007150 <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fa0:	4b04      	ldr	r3, [pc, #16]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	4a03      	ldr	r2, [pc, #12]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fa6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006faa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006fac:	f7fa fff0 	bl	8001f90 <HAL_GetTick>
 8006fb0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fb2:	e00a      	b.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x496>
 8006fb4:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fb8:	f7fa ffea 	bl	8001f90 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	2b64      	cmp	r3, #100	; 0x64
 8006fc4:	d901      	bls.n	8006fca <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e165      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fca:	4ba9      	ldr	r3, [pc, #676]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d1f0      	bne.n	8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	f003 0301 	and.w	r3, r3, #1
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d021      	beq.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d11d      	bne.n	8007026 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8006fea:	4ba1      	ldr	r3, [pc, #644]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006fec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ff0:	0c1b      	lsrs	r3, r3, #16
 8006ff2:	f003 0303 	and.w	r3, r3, #3
 8006ff6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8006ff8:	4b9d      	ldr	r3, [pc, #628]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006ffa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006ffe:	0e1b      	lsrs	r3, r3, #24
 8007000:	f003 030f 	and.w	r3, r3, #15
 8007004:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	019a      	lsls	r2, r3, #6
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	041b      	lsls	r3, r3, #16
 8007010:	431a      	orrs	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	061b      	lsls	r3, r3, #24
 8007016:	431a      	orrs	r2, r3
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	071b      	lsls	r3, r3, #28
 800701e:	4994      	ldr	r1, [pc, #592]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007020:	4313      	orrs	r3, r2
 8007022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d004      	beq.n	800703c <HAL_RCCEx_PeriphCLKConfig+0x508>
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007036:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800703a:	d00a      	beq.n	8007052 <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007044:	2b00      	cmp	r3, #0
 8007046:	d02e      	beq.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800704c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007050:	d129      	bne.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007052:	4b87      	ldr	r3, [pc, #540]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007054:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007058:	0c1b      	lsrs	r3, r3, #16
 800705a:	f003 0303 	and.w	r3, r3, #3
 800705e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007060:	4b83      	ldr	r3, [pc, #524]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007062:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007066:	0f1b      	lsrs	r3, r3, #28
 8007068:	f003 0307 	and.w	r3, r3, #7
 800706c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	019a      	lsls	r2, r3, #6
 8007074:	693b      	ldr	r3, [r7, #16]
 8007076:	041b      	lsls	r3, r3, #16
 8007078:	431a      	orrs	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	68db      	ldr	r3, [r3, #12]
 800707e:	061b      	lsls	r3, r3, #24
 8007080:	431a      	orrs	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	071b      	lsls	r3, r3, #28
 8007086:	497a      	ldr	r1, [pc, #488]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007088:	4313      	orrs	r3, r2
 800708a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800708e:	4b78      	ldr	r3, [pc, #480]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007094:	f023 021f 	bic.w	r2, r3, #31
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800709c:	3b01      	subs	r3, #1
 800709e:	4974      	ldr	r1, [pc, #464]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80070a0:	4313      	orrs	r3, r2
 80070a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01d      	beq.n	80070ee <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80070b2:	4b6f      	ldr	r3, [pc, #444]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80070b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070b8:	0e1b      	lsrs	r3, r3, #24
 80070ba:	f003 030f 	and.w	r3, r3, #15
 80070be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80070c0:	4b6b      	ldr	r3, [pc, #428]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80070c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070c6:	0f1b      	lsrs	r3, r3, #28
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	685b      	ldr	r3, [r3, #4]
 80070d2:	019a      	lsls	r2, r3, #6
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	691b      	ldr	r3, [r3, #16]
 80070d8:	041b      	lsls	r3, r3, #16
 80070da:	431a      	orrs	r2, r3
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	061b      	lsls	r3, r3, #24
 80070e0:	431a      	orrs	r2, r3
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	071b      	lsls	r3, r3, #28
 80070e6:	4962      	ldr	r1, [pc, #392]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80070e8:	4313      	orrs	r3, r2
 80070ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d011      	beq.n	800711e <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	019a      	lsls	r2, r3, #6
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	431a      	orrs	r2, r3
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	68db      	ldr	r3, [r3, #12]
 800710c:	061b      	lsls	r3, r3, #24
 800710e:	431a      	orrs	r2, r3
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	071b      	lsls	r3, r3, #28
 8007116:	4956      	ldr	r1, [pc, #344]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007118:	4313      	orrs	r3, r2
 800711a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800711e:	4b54      	ldr	r3, [pc, #336]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	4a53      	ldr	r2, [pc, #332]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007124:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007128:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800712a:	f7fa ff31 	bl	8001f90 <HAL_GetTick>
 800712e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007130:	e008      	b.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007132:	f7fa ff2d 	bl	8001f90 <HAL_GetTick>
 8007136:	4602      	mov	r2, r0
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	1ad3      	subs	r3, r2, r3
 800713c:	2b64      	cmp	r3, #100	; 0x64
 800713e:	d901      	bls.n	8007144 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007140:	2303      	movs	r3, #3
 8007142:	e0a8      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007144:	4b4a      	ldr	r3, [pc, #296]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800714c:	2b00      	cmp	r3, #0
 800714e:	d0f0      	beq.n	8007132 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007150:	69bb      	ldr	r3, [r7, #24]
 8007152:	2b01      	cmp	r3, #1
 8007154:	f040 809e 	bne.w	8007294 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007158:	4b45      	ldr	r3, [pc, #276]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4a44      	ldr	r2, [pc, #272]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800715e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007162:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007164:	f7fa ff14 	bl	8001f90 <HAL_GetTick>
 8007168:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800716a:	e008      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800716c:	f7fa ff10 	bl	8001f90 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b64      	cmp	r3, #100	; 0x64
 8007178:	d901      	bls.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e08b      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800717e:	4b3c      	ldr	r3, [pc, #240]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007186:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800718a:	d0ef      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d02e      	beq.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d12a      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80071b4:	4b2e      	ldr	r3, [pc, #184]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071ba:	0c1b      	lsrs	r3, r3, #16
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80071c2:	4b2b      	ldr	r3, [pc, #172]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80071c8:	0f1b      	lsrs	r3, r3, #28
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	695b      	ldr	r3, [r3, #20]
 80071d4:	019a      	lsls	r2, r3, #6
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	041b      	lsls	r3, r3, #16
 80071da:	431a      	orrs	r2, r3
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	699b      	ldr	r3, [r3, #24]
 80071e0:	061b      	lsls	r3, r3, #24
 80071e2:	431a      	orrs	r2, r3
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	071b      	lsls	r3, r3, #28
 80071e8:	4921      	ldr	r1, [pc, #132]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071ea:	4313      	orrs	r3, r2
 80071ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80071f0:	4b1f      	ldr	r3, [pc, #124]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071f6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071fe:	3b01      	subs	r3, #1
 8007200:	021b      	lsls	r3, r3, #8
 8007202:	491b      	ldr	r1, [pc, #108]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007204:	4313      	orrs	r3, r2
 8007206:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d022      	beq.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800721e:	d11d      	bne.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007220:	4b13      	ldr	r3, [pc, #76]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007222:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007226:	0e1b      	lsrs	r3, r3, #24
 8007228:	f003 030f 	and.w	r3, r3, #15
 800722c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800722e:	4b10      	ldr	r3, [pc, #64]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007230:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007234:	0f1b      	lsrs	r3, r3, #28
 8007236:	f003 0307 	and.w	r3, r3, #7
 800723a:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	019a      	lsls	r2, r3, #6
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	041b      	lsls	r3, r3, #16
 8007248:	431a      	orrs	r2, r3
 800724a:	693b      	ldr	r3, [r7, #16]
 800724c:	061b      	lsls	r3, r3, #24
 800724e:	431a      	orrs	r2, r3
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	071b      	lsls	r3, r3, #28
 8007254:	4906      	ldr	r1, [pc, #24]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007256:	4313      	orrs	r3, r2
 8007258:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800725c:	4b04      	ldr	r3, [pc, #16]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a03      	ldr	r2, [pc, #12]	; (8007270 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007266:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007268:	f7fa fe92 	bl	8001f90 <HAL_GetTick>
 800726c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800726e:	e00a      	b.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x752>
 8007270:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007274:	f7fa fe8c 	bl	8001f90 <HAL_GetTick>
 8007278:	4602      	mov	r2, r0
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	1ad3      	subs	r3, r2, r3
 800727e:	2b64      	cmp	r3, #100	; 0x64
 8007280:	d901      	bls.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007282:	2303      	movs	r3, #3
 8007284:	e007      	b.n	8007296 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007286:	4b06      	ldr	r3, [pc, #24]	; (80072a0 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800728e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007292:	d1ef      	bne.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8007294:	2300      	movs	r3, #0
}
 8007296:	4618      	mov	r0, r3
 8007298:	3720      	adds	r7, #32
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop
 80072a0:	40023800 	.word	0x40023800

080072a4 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80072a4:	b580      	push	{r7, lr}
 80072a6:	b082      	sub	sp, #8
 80072a8:	af00      	add	r7, sp, #0
 80072aa:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d101      	bne.n	80072b6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80072b2:	2301      	movs	r3, #1
 80072b4:	e022      	b.n	80072fc <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80072bc:	b2db      	uxtb	r3, r3
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d105      	bne.n	80072ce <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fa fa6b 	bl	80017a4 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2203      	movs	r2, #3
 80072d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f814 	bl	8007304 <HAL_SD_InitCard>
 80072dc:	4603      	mov	r3, r0
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d001      	beq.n	80072e6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80072e2:	2301      	movs	r3, #1
 80072e4:	e00a      	b.n	80072fc <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2201      	movs	r2, #1
 80072f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80072fa:	2300      	movs	r3, #0
}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3708      	adds	r7, #8
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007304:	b5b0      	push	{r4, r5, r7, lr}
 8007306:	b08e      	sub	sp, #56	; 0x38
 8007308:	af04      	add	r7, sp, #16
 800730a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 800730c:	2300      	movs	r3, #0
 800730e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007314:	2300      	movs	r3, #0
 8007316:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007318:	2300      	movs	r3, #0
 800731a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800731c:	2300      	movs	r3, #0
 800731e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8007320:	2376      	movs	r3, #118	; 0x76
 8007322:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681d      	ldr	r5, [r3, #0]
 8007328:	466c      	mov	r4, sp
 800732a:	f107 0314 	add.w	r3, r7, #20
 800732e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007332:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007336:	f107 0308 	add.w	r3, r7, #8
 800733a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800733c:	4628      	mov	r0, r5
 800733e:	f002 fbaf 	bl	8009aa0 <SDMMC_Init>
 8007342:	4603      	mov	r3, r0
 8007344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007348:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800734c:	2b00      	cmp	r3, #0
 800734e:	d001      	beq.n	8007354 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007350:	2301      	movs	r3, #1
 8007352:	e059      	b.n	8007408 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	685a      	ldr	r2, [r3, #4]
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007362:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	4618      	mov	r0, r3
 800736a:	f002 fbe3 	bl	8009b34 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800737c:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 800737e:	2002      	movs	r0, #2
 8007380:	f7fa fe12 	bl	8001fa8 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007384:	6878      	ldr	r0, [r7, #4]
 8007386:	f000 fe67 	bl	8008058 <SD_PowerON>
 800738a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800738c:	6a3b      	ldr	r3, [r7, #32]
 800738e:	2b00      	cmp	r3, #0
 8007390:	d00b      	beq.n	80073aa <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	2201      	movs	r2, #1
 8007396:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800739e:	6a3b      	ldr	r3, [r7, #32]
 80073a0:	431a      	orrs	r2, r3
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80073a6:	2301      	movs	r3, #1
 80073a8:	e02e      	b.n	8007408 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fd86 	bl	8007ebc <SD_InitCard>
 80073b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073b2:	6a3b      	ldr	r3, [r7, #32]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d00b      	beq.n	80073d0 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073c4:	6a3b      	ldr	r3, [r7, #32]
 80073c6:	431a      	orrs	r2, r3
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80073cc:	2301      	movs	r3, #1
 80073ce:	e01b      	b.n	8007408 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073d8:	4618      	mov	r0, r3
 80073da:	f002 fc3d 	bl	8009c58 <SDMMC_CmdBlockLength>
 80073de:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80073e0:	6a3b      	ldr	r3, [r7, #32]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d00f      	beq.n	8007406 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a09      	ldr	r2, [pc, #36]	; (8007410 <HAL_SD_InitCard+0x10c>)
 80073ec:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80073f2:	6a3b      	ldr	r3, [r7, #32]
 80073f4:	431a      	orrs	r2, r3
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007402:	2301      	movs	r3, #1
 8007404:	e000      	b.n	8007408 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8007406:	2300      	movs	r3, #0
}
 8007408:	4618      	mov	r0, r3
 800740a:	3728      	adds	r7, #40	; 0x28
 800740c:	46bd      	mov	sp, r7
 800740e:	bdb0      	pop	{r4, r5, r7, pc}
 8007410:	004005ff 	.word	0x004005ff

08007414 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b092      	sub	sp, #72	; 0x48
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
 8007420:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007422:	f7fa fdb5 	bl	8001f90 <HAL_GetTick>
 8007426:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007430:	68bb      	ldr	r3, [r7, #8]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d107      	bne.n	8007446 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800743a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007442:	2301      	movs	r3, #1
 8007444:	e1bd      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800744c:	b2db      	uxtb	r3, r3
 800744e:	2b01      	cmp	r3, #1
 8007450:	f040 81b0 	bne.w	80077b4 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800745a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	441a      	add	r2, r3
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007464:	429a      	cmp	r2, r3
 8007466:	d907      	bls.n	8007478 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800746c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007474:	2301      	movs	r3, #1
 8007476:	e1a4      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	2203      	movs	r2, #3
 800747c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2200      	movs	r2, #0
 8007486:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800748c:	2b01      	cmp	r3, #1
 800748e:	d002      	beq.n	8007496 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007492:	025b      	lsls	r3, r3, #9
 8007494:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007496:	f04f 33ff 	mov.w	r3, #4294967295
 800749a:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	025b      	lsls	r3, r3, #9
 80074a0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80074a2:	2390      	movs	r3, #144	; 0x90
 80074a4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80074a6:	2302      	movs	r3, #2
 80074a8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80074aa:	2300      	movs	r3, #0
 80074ac:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80074ae:	2301      	movs	r3, #1
 80074b0:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f107 0214 	add.w	r2, r7, #20
 80074ba:	4611      	mov	r1, r2
 80074bc:	4618      	mov	r0, r3
 80074be:	f002 fb9f 	bl	8009c00 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80074c2:	683b      	ldr	r3, [r7, #0]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d90a      	bls.n	80074de <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	2202      	movs	r2, #2
 80074cc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074d4:	4618      	mov	r0, r3
 80074d6:	f002 fc03 	bl	8009ce0 <SDMMC_CmdReadMultiBlock>
 80074da:	6478      	str	r0, [r7, #68]	; 0x44
 80074dc:	e009      	b.n	80074f2 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	2201      	movs	r2, #1
 80074e2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80074ea:	4618      	mov	r0, r3
 80074ec:	f002 fbd6 	bl	8009c9c <SDMMC_CmdReadSingleBlock>
 80074f0:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80074f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d012      	beq.n	800751e <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a7a      	ldr	r2, [pc, #488]	; (80076e8 <HAL_SD_ReadBlocks+0x2d4>)
 80074fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007506:	431a      	orrs	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2201      	movs	r2, #1
 8007510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	e151      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007522:	e061      	b.n	80075e8 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800752a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800752e:	2b00      	cmp	r3, #0
 8007530:	d03c      	beq.n	80075ac <HAL_SD_ReadBlocks+0x198>
 8007532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007534:	2b00      	cmp	r3, #0
 8007536:	d039      	beq.n	80075ac <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007538:	2300      	movs	r3, #0
 800753a:	643b      	str	r3, [r7, #64]	; 0x40
 800753c:	e033      	b.n	80075a6 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	4618      	mov	r0, r3
 8007544:	f002 fad8 	bl	8009af8 <SDMMC_ReadFIFO>
 8007548:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	b2da      	uxtb	r2, r3
 800754e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007550:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007554:	3301      	adds	r3, #1
 8007556:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007558:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755a:	3b01      	subs	r3, #1
 800755c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800755e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007560:	0a1b      	lsrs	r3, r3, #8
 8007562:	b2da      	uxtb	r2, r3
 8007564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007566:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800756a:	3301      	adds	r3, #1
 800756c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800756e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007570:	3b01      	subs	r3, #1
 8007572:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007576:	0c1b      	lsrs	r3, r3, #16
 8007578:	b2da      	uxtb	r2, r3
 800757a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800757c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800757e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007580:	3301      	adds	r3, #1
 8007582:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007586:	3b01      	subs	r3, #1
 8007588:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 800758a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800758c:	0e1b      	lsrs	r3, r3, #24
 800758e:	b2da      	uxtb	r2, r3
 8007590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007592:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007594:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007596:	3301      	adds	r3, #1
 8007598:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800759a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800759c:	3b01      	subs	r3, #1
 800759e:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80075a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a2:	3301      	adds	r3, #1
 80075a4:	643b      	str	r3, [r7, #64]	; 0x40
 80075a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a8:	2b07      	cmp	r3, #7
 80075aa:	d9c8      	bls.n	800753e <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80075ac:	f7fa fcf0 	bl	8001f90 <HAL_GetTick>
 80075b0:	4602      	mov	r2, r0
 80075b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075b4:	1ad3      	subs	r3, r2, r3
 80075b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d902      	bls.n	80075c2 <HAL_SD_ReadBlocks+0x1ae>
 80075bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d112      	bne.n	80075e8 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	4a48      	ldr	r2, [pc, #288]	; (80076e8 <HAL_SD_ReadBlocks+0x2d4>)
 80075c8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	2201      	movs	r2, #1
 80075da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2200      	movs	r2, #0
 80075e2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80075e4:	2303      	movs	r3, #3
 80075e6:	e0ec      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075ee:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d096      	beq.n	8007524 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80075f6:	68fb      	ldr	r3, [r7, #12]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007600:	2b00      	cmp	r3, #0
 8007602:	d022      	beq.n	800764a <HAL_SD_ReadBlocks+0x236>
 8007604:	683b      	ldr	r3, [r7, #0]
 8007606:	2b01      	cmp	r3, #1
 8007608:	d91f      	bls.n	800764a <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800760e:	2b03      	cmp	r3, #3
 8007610:	d01b      	beq.n	800764a <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	4618      	mov	r0, r3
 8007618:	f002 fbc8 	bl	8009dac <SDMMC_CmdStopTransfer>
 800761c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800761e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007620:	2b00      	cmp	r3, #0
 8007622:	d012      	beq.n	800764a <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a2f      	ldr	r2, [pc, #188]	; (80076e8 <HAL_SD_ReadBlocks+0x2d4>)
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007632:	431a      	orrs	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e0bb      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007650:	f003 0308 	and.w	r3, r3, #8
 8007654:	2b00      	cmp	r3, #0
 8007656:	d012      	beq.n	800767e <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	4a22      	ldr	r2, [pc, #136]	; (80076e8 <HAL_SD_ReadBlocks+0x2d4>)
 800765e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007664:	f043 0208 	orr.w	r2, r3, #8
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2201      	movs	r2, #1
 8007670:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	2200      	movs	r2, #0
 8007678:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800767a:	2301      	movs	r3, #1
 800767c:	e0a1      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007684:	f003 0302 	and.w	r3, r3, #2
 8007688:	2b00      	cmp	r3, #0
 800768a:	d012      	beq.n	80076b2 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a15      	ldr	r2, [pc, #84]	; (80076e8 <HAL_SD_ReadBlocks+0x2d4>)
 8007692:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007698:	f043 0202 	orr.w	r2, r3, #2
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e087      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076b8:	f003 0320 	and.w	r3, r3, #32
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d064      	beq.n	800778a <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4a08      	ldr	r2, [pc, #32]	; (80076e8 <HAL_SD_ReadBlocks+0x2d4>)
 80076c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	f043 0220 	orr.w	r2, r3, #32
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	2201      	movs	r2, #1
 80076d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	2200      	movs	r2, #0
 80076e0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	e06d      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
 80076e6:	bf00      	nop
 80076e8:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f002 fa01 	bl	8009af8 <SDMMC_ReadFIFO>
 80076f6:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 80076f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076fe:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007700:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007702:	3301      	adds	r3, #1
 8007704:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007706:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007708:	3b01      	subs	r3, #1
 800770a:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800770c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800770e:	0a1b      	lsrs	r3, r3, #8
 8007710:	b2da      	uxtb	r2, r3
 8007712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007714:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007718:	3301      	adds	r3, #1
 800771a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800771c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800771e:	3b01      	subs	r3, #1
 8007720:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	b2da      	uxtb	r2, r3
 8007728:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800772c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800772e:	3301      	adds	r3, #1
 8007730:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007734:	3b01      	subs	r3, #1
 8007736:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800773a:	0e1b      	lsrs	r3, r3, #24
 800773c:	b2da      	uxtb	r2, r3
 800773e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007740:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007744:	3301      	adds	r3, #1
 8007746:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007748:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800774a:	3b01      	subs	r3, #1
 800774c:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800774e:	f7fa fc1f 	bl	8001f90 <HAL_GetTick>
 8007752:	4602      	mov	r2, r0
 8007754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007756:	1ad3      	subs	r3, r2, r3
 8007758:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800775a:	429a      	cmp	r2, r3
 800775c:	d902      	bls.n	8007764 <HAL_SD_ReadBlocks+0x350>
 800775e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007760:	2b00      	cmp	r3, #0
 8007762:	d112      	bne.n	800778a <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a18      	ldr	r2, [pc, #96]	; (80077cc <HAL_SD_ReadBlocks+0x3b8>)
 800776a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007770:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007786:	2301      	movs	r3, #1
 8007788:	e01b      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007790:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d002      	beq.n	800779e <HAL_SD_ReadBlocks+0x38a>
 8007798:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800779a:	2b00      	cmp	r3, #0
 800779c:	d1a6      	bne.n	80076ec <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f240 523a 	movw	r2, #1338	; 0x53a
 80077a6:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	2201      	movs	r2, #1
 80077ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80077b0:	2300      	movs	r3, #0
 80077b2:	e006      	b.n	80077c2 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077c0:	2301      	movs	r3, #1
  }
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3748      	adds	r7, #72	; 0x48
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	004005ff 	.word	0x004005ff

080077d0 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b092      	sub	sp, #72	; 0x48
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	60f8      	str	r0, [r7, #12]
 80077d8:	60b9      	str	r1, [r7, #8]
 80077da:	607a      	str	r2, [r7, #4]
 80077dc:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80077de:	f7fa fbd7 	bl	8001f90 <HAL_GetTick>
 80077e2:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80077e8:	68bb      	ldr	r3, [r7, #8]
 80077ea:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d107      	bne.n	8007802 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f6:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80077fe:	2301      	movs	r3, #1
 8007800:	e165      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007808:	b2db      	uxtb	r3, r3
 800780a:	2b01      	cmp	r3, #1
 800780c:	f040 8158 	bne.w	8007ac0 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007816:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007818:	683b      	ldr	r3, [r7, #0]
 800781a:	441a      	add	r2, r3
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007820:	429a      	cmp	r2, r3
 8007822:	d907      	bls.n	8007834 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007828:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007830:	2301      	movs	r3, #1
 8007832:	e14c      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	2203      	movs	r2, #3
 8007838:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	2200      	movs	r2, #0
 8007842:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007848:	2b01      	cmp	r3, #1
 800784a:	d002      	beq.n	8007852 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 800784c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800784e:	025b      	lsls	r3, r3, #9
 8007850:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007852:	f04f 33ff 	mov.w	r3, #4294967295
 8007856:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	025b      	lsls	r3, r3, #9
 800785c:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800785e:	2390      	movs	r3, #144	; 0x90
 8007860:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007862:	2300      	movs	r3, #0
 8007864:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007866:	2300      	movs	r3, #0
 8007868:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 800786a:	2301      	movs	r3, #1
 800786c:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f107 0218 	add.w	r2, r7, #24
 8007876:	4611      	mov	r1, r2
 8007878:	4618      	mov	r0, r3
 800787a:	f002 f9c1 	bl	8009c00 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 800787e:	683b      	ldr	r3, [r7, #0]
 8007880:	2b01      	cmp	r3, #1
 8007882:	d90a      	bls.n	800789a <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2220      	movs	r2, #32
 8007888:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007890:	4618      	mov	r0, r3
 8007892:	f002 fa69 	bl	8009d68 <SDMMC_CmdWriteMultiBlock>
 8007896:	6478      	str	r0, [r7, #68]	; 0x44
 8007898:	e009      	b.n	80078ae <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	2210      	movs	r2, #16
 800789e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80078a6:	4618      	mov	r0, r3
 80078a8:	f002 fa3c 	bl	8009d24 <SDMMC_CmdWriteSingleBlock>
 80078ac:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80078ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d012      	beq.n	80078da <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	4a87      	ldr	r2, [pc, #540]	; (8007ad8 <HAL_SD_WriteBlocks+0x308>)
 80078ba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80078c2:	431a      	orrs	r2, r3
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2201      	movs	r2, #1
 80078cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80078d6:	2301      	movs	r3, #1
 80078d8:	e0f9      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 80078da:	69fb      	ldr	r3, [r7, #28]
 80078dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80078de:	e065      	b.n	80079ac <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d040      	beq.n	8007970 <HAL_SD_WriteBlocks+0x1a0>
 80078ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d03d      	beq.n	8007970 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 80078f4:	2300      	movs	r3, #0
 80078f6:	643b      	str	r3, [r7, #64]	; 0x40
 80078f8:	e037      	b.n	800796a <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 80078fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007902:	3301      	adds	r3, #1
 8007904:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007906:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007908:	3b01      	subs	r3, #1
 800790a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 800790c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	021a      	lsls	r2, r3, #8
 8007912:	697b      	ldr	r3, [r7, #20]
 8007914:	4313      	orrs	r3, r2
 8007916:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007918:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800791a:	3301      	adds	r3, #1
 800791c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800791e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007920:	3b01      	subs	r3, #1
 8007922:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007926:	781b      	ldrb	r3, [r3, #0]
 8007928:	041a      	lsls	r2, r3, #16
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	4313      	orrs	r3, r2
 800792e:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007932:	3301      	adds	r3, #1
 8007934:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007936:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007938:	3b01      	subs	r3, #1
 800793a:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 800793c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800793e:	781b      	ldrb	r3, [r3, #0]
 8007940:	061a      	lsls	r2, r3, #24
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	4313      	orrs	r3, r2
 8007946:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800794a:	3301      	adds	r3, #1
 800794c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800794e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007950:	3b01      	subs	r3, #1
 8007952:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f107 0214 	add.w	r2, r7, #20
 800795c:	4611      	mov	r1, r2
 800795e:	4618      	mov	r0, r3
 8007960:	f002 f8d7 	bl	8009b12 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007964:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007966:	3301      	adds	r3, #1
 8007968:	643b      	str	r3, [r7, #64]	; 0x40
 800796a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800796c:	2b07      	cmp	r3, #7
 800796e:	d9c4      	bls.n	80078fa <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007970:	f7fa fb0e 	bl	8001f90 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800797c:	429a      	cmp	r2, r3
 800797e:	d902      	bls.n	8007986 <HAL_SD_WriteBlocks+0x1b6>
 8007980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007982:	2b00      	cmp	r3, #0
 8007984:	d112      	bne.n	80079ac <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a53      	ldr	r2, [pc, #332]	; (8007ad8 <HAL_SD_WriteBlocks+0x308>)
 800798c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007992:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007994:	431a      	orrs	r2, r3
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	2201      	movs	r2, #1
 800799e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2200      	movs	r2, #0
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e090      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079b2:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d092      	beq.n	80078e0 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d022      	beq.n	8007a0e <HAL_SD_WriteBlocks+0x23e>
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	2b01      	cmp	r3, #1
 80079cc:	d91f      	bls.n	8007a0e <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d2:	2b03      	cmp	r3, #3
 80079d4:	d01b      	beq.n	8007a0e <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	4618      	mov	r0, r3
 80079dc:	f002 f9e6 	bl	8009dac <SDMMC_CmdStopTransfer>
 80079e0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 80079e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d012      	beq.n	8007a0e <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a3a      	ldr	r2, [pc, #232]	; (8007ad8 <HAL_SD_WriteBlocks+0x308>)
 80079ee:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079f6:	431a      	orrs	r2, r3
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	e05f      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a14:	f003 0308 	and.w	r3, r3, #8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d012      	beq.n	8007a42 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4a2d      	ldr	r2, [pc, #180]	; (8007ad8 <HAL_SD_WriteBlocks+0x308>)
 8007a22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a28:	f043 0208 	orr.w	r2, r3, #8
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	2201      	movs	r2, #1
 8007a34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e045      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a48:	f003 0302 	and.w	r3, r3, #2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d012      	beq.n	8007a76 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a20      	ldr	r2, [pc, #128]	; (8007ad8 <HAL_SD_WriteBlocks+0x308>)
 8007a56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a5c:	f043 0202 	orr.w	r2, r3, #2
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	2201      	movs	r2, #1
 8007a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a72:	2301      	movs	r3, #1
 8007a74:	e02b      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7c:	f003 0310 	and.w	r3, r3, #16
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d012      	beq.n	8007aaa <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	4a13      	ldr	r2, [pc, #76]	; (8007ad8 <HAL_SD_WriteBlocks+0x308>)
 8007a8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a90:	f043 0210 	orr.w	r2, r3, #16
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	e011      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f240 523a 	movw	r2, #1338	; 0x53a
 8007ab2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007abc:	2300      	movs	r3, #0
 8007abe:	e006      	b.n	8007ace <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
  }
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3748      	adds	r7, #72	; 0x48
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
 8007ad6:	bf00      	nop
 8007ad8:	004005ff 	.word	0x004005ff

08007adc <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007adc:	b480      	push	{r7}
 8007ade:	b083      	sub	sp, #12
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]
 8007ae4:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007aea:	0f9b      	lsrs	r3, r3, #30
 8007aec:	b2da      	uxtb	r2, r3
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007af6:	0e9b      	lsrs	r3, r3, #26
 8007af8:	b2db      	uxtb	r3, r3
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	b2da      	uxtb	r2, r3
 8007b00:	683b      	ldr	r3, [r7, #0]
 8007b02:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b08:	0e1b      	lsrs	r3, r3, #24
 8007b0a:	b2db      	uxtb	r3, r3
 8007b0c:	f003 0303 	and.w	r3, r3, #3
 8007b10:	b2da      	uxtb	r2, r3
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b1a:	0c1b      	lsrs	r3, r3, #16
 8007b1c:	b2da      	uxtb	r2, r3
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b26:	0a1b      	lsrs	r3, r3, #8
 8007b28:	b2da      	uxtb	r2, r3
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b32:	b2da      	uxtb	r2, r3
 8007b34:	683b      	ldr	r3, [r7, #0]
 8007b36:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b3c:	0d1b      	lsrs	r3, r3, #20
 8007b3e:	b29a      	uxth	r2, r3
 8007b40:	683b      	ldr	r3, [r7, #0]
 8007b42:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b48:	0c1b      	lsrs	r3, r3, #16
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	f003 030f 	and.w	r3, r3, #15
 8007b50:	b2da      	uxtb	r2, r3
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b5a:	0bdb      	lsrs	r3, r3, #15
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	f003 0301 	and.w	r3, r3, #1
 8007b62:	b2da      	uxtb	r2, r3
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b6c:	0b9b      	lsrs	r3, r3, #14
 8007b6e:	b2db      	uxtb	r3, r3
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	b2da      	uxtb	r2, r3
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b7e:	0b5b      	lsrs	r3, r3, #13
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	f003 0301 	and.w	r3, r3, #1
 8007b86:	b2da      	uxtb	r2, r3
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007b90:	0b1b      	lsrs	r3, r3, #12
 8007b92:	b2db      	uxtb	r3, r3
 8007b94:	f003 0301 	and.w	r3, r3, #1
 8007b98:	b2da      	uxtb	r2, r3
 8007b9a:	683b      	ldr	r3, [r7, #0]
 8007b9c:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d163      	bne.n	8007c74 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007bb0:	009a      	lsls	r2, r3, #2
 8007bb2:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007bb6:	4013      	ands	r3, r2
 8007bb8:	687a      	ldr	r2, [r7, #4]
 8007bba:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007bbc:	0f92      	lsrs	r2, r2, #30
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bc8:	0edb      	lsrs	r3, r3, #27
 8007bca:	b2db      	uxtb	r3, r3
 8007bcc:	f003 0307 	and.w	r3, r3, #7
 8007bd0:	b2da      	uxtb	r2, r3
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bda:	0e1b      	lsrs	r3, r3, #24
 8007bdc:	b2db      	uxtb	r3, r3
 8007bde:	f003 0307 	and.w	r3, r3, #7
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bec:	0d5b      	lsrs	r3, r3, #21
 8007bee:	b2db      	uxtb	r3, r3
 8007bf0:	f003 0307 	and.w	r3, r3, #7
 8007bf4:	b2da      	uxtb	r2, r3
 8007bf6:	683b      	ldr	r3, [r7, #0]
 8007bf8:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007bfe:	0c9b      	lsrs	r3, r3, #18
 8007c00:	b2db      	uxtb	r3, r3
 8007c02:	f003 0307 	and.w	r3, r3, #7
 8007c06:	b2da      	uxtb	r2, r3
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c10:	0bdb      	lsrs	r3, r3, #15
 8007c12:	b2db      	uxtb	r3, r3
 8007c14:	f003 0307 	and.w	r3, r3, #7
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	691b      	ldr	r3, [r3, #16]
 8007c22:	1c5a      	adds	r2, r3, #1
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007c28:	683b      	ldr	r3, [r7, #0]
 8007c2a:	7e1b      	ldrb	r3, [r3, #24]
 8007c2c:	b2db      	uxtb	r3, r3
 8007c2e:	f003 0307 	and.w	r3, r3, #7
 8007c32:	3302      	adds	r3, #2
 8007c34:	2201      	movs	r2, #1
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007c3e:	fb03 f202 	mul.w	r2, r3, r2
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007c46:	683b      	ldr	r3, [r7, #0]
 8007c48:	7a1b      	ldrb	r3, [r3, #8]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	f003 030f 	and.w	r3, r3, #15
 8007c50:	2201      	movs	r2, #1
 8007c52:	409a      	lsls	r2, r3
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c5c:	687a      	ldr	r2, [r7, #4]
 8007c5e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007c60:	0a52      	lsrs	r2, r2, #9
 8007c62:	fb03 f202 	mul.w	r2, r3, r2
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c70:	661a      	str	r2, [r3, #96]	; 0x60
 8007c72:	e031      	b.n	8007cd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	d11d      	bne.n	8007cb8 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c80:	041b      	lsls	r3, r3, #16
 8007c82:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c8a:	0c1b      	lsrs	r3, r3, #16
 8007c8c:	431a      	orrs	r2, r3
 8007c8e:	683b      	ldr	r3, [r7, #0]
 8007c90:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	691b      	ldr	r3, [r3, #16]
 8007c96:	3301      	adds	r3, #1
 8007c98:	029a      	lsls	r2, r3, #10
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007cac:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	661a      	str	r2, [r3, #96]	; 0x60
 8007cb6:	e00f      	b.n	8007cd8 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	4a58      	ldr	r2, [pc, #352]	; (8007e20 <HAL_SD_GetCardCSD+0x344>)
 8007cbe:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cc4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2201      	movs	r2, #1
 8007cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	e09d      	b.n	8007e14 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cdc:	0b9b      	lsrs	r3, r3, #14
 8007cde:	b2db      	uxtb	r3, r3
 8007ce0:	f003 0301 	and.w	r3, r3, #1
 8007ce4:	b2da      	uxtb	r2, r3
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cee:	09db      	lsrs	r3, r3, #7
 8007cf0:	b2db      	uxtb	r3, r3
 8007cf2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007cf6:	b2da      	uxtb	r2, r3
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d06:	b2da      	uxtb	r2, r3
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d10:	0fdb      	lsrs	r3, r3, #31
 8007d12:	b2da      	uxtb	r2, r3
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1c:	0f5b      	lsrs	r3, r3, #29
 8007d1e:	b2db      	uxtb	r3, r3
 8007d20:	f003 0303 	and.w	r3, r3, #3
 8007d24:	b2da      	uxtb	r2, r3
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d2e:	0e9b      	lsrs	r3, r3, #26
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	f003 0307 	and.w	r3, r3, #7
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d40:	0d9b      	lsrs	r3, r3, #22
 8007d42:	b2db      	uxtb	r3, r3
 8007d44:	f003 030f 	and.w	r3, r3, #15
 8007d48:	b2da      	uxtb	r2, r3
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d52:	0d5b      	lsrs	r3, r3, #21
 8007d54:	b2db      	uxtb	r3, r3
 8007d56:	f003 0301 	and.w	r3, r3, #1
 8007d5a:	b2da      	uxtb	r2, r3
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	2200      	movs	r2, #0
 8007d66:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d6e:	0c1b      	lsrs	r3, r3, #16
 8007d70:	b2db      	uxtb	r3, r3
 8007d72:	f003 0301 	and.w	r3, r3, #1
 8007d76:	b2da      	uxtb	r2, r3
 8007d78:	683b      	ldr	r3, [r7, #0]
 8007d7a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d82:	0bdb      	lsrs	r3, r3, #15
 8007d84:	b2db      	uxtb	r3, r3
 8007d86:	f003 0301 	and.w	r3, r3, #1
 8007d8a:	b2da      	uxtb	r2, r3
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d96:	0b9b      	lsrs	r3, r3, #14
 8007d98:	b2db      	uxtb	r3, r3
 8007d9a:	f003 0301 	and.w	r3, r3, #1
 8007d9e:	b2da      	uxtb	r2, r3
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007daa:	0b5b      	lsrs	r3, r3, #13
 8007dac:	b2db      	uxtb	r3, r3
 8007dae:	f003 0301 	and.w	r3, r3, #1
 8007db2:	b2da      	uxtb	r2, r3
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dbe:	0b1b      	lsrs	r3, r3, #12
 8007dc0:	b2db      	uxtb	r3, r3
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd2:	0a9b      	lsrs	r3, r3, #10
 8007dd4:	b2db      	uxtb	r3, r3
 8007dd6:	f003 0303 	and.w	r3, r3, #3
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007de6:	0a1b      	lsrs	r3, r3, #8
 8007de8:	b2db      	uxtb	r3, r3
 8007dea:	f003 0303 	and.w	r3, r3, #3
 8007dee:	b2da      	uxtb	r2, r3
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfa:	085b      	lsrs	r3, r3, #1
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e02:	b2da      	uxtb	r2, r3
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007e12:	2300      	movs	r3, #0
}
 8007e14:	4618      	mov	r0, r3
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr
 8007e20:	004005ff 	.word	0x004005ff

08007e24 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007e24:	b480      	push	{r7}
 8007e26:	b083      	sub	sp, #12
 8007e28:	af00      	add	r7, sp, #0
 8007e2a:	6078      	str	r0, [r7, #4]
 8007e2c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007e4a:	683b      	ldr	r3, [r7, #0]
 8007e4c:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007e62:	683b      	ldr	r3, [r7, #0]
 8007e64:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	370c      	adds	r7, #12
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr

08007e7c <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b086      	sub	sp, #24
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007e84:	2300      	movs	r3, #0
 8007e86:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007e88:	f107 030c 	add.w	r3, r7, #12
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f970 	bl	8008174 <SD_SendStatus>
 8007e94:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007e96:	697b      	ldr	r3, [r7, #20]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d005      	beq.n	8007ea8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007ea0:	697b      	ldr	r3, [r7, #20]
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	0a5b      	lsrs	r3, r3, #9
 8007eac:	f003 030f 	and.w	r3, r3, #15
 8007eb0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007eb2:	693b      	ldr	r3, [r7, #16]
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3718      	adds	r7, #24
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007ebc:	b5b0      	push	{r4, r5, r7, lr}
 8007ebe:	b094      	sub	sp, #80	; 0x50
 8007ec0:	af04      	add	r7, sp, #16
 8007ec2:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007ec4:	2301      	movs	r3, #1
 8007ec6:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4618      	mov	r0, r3
 8007ece:	f001 fe3f 	bl	8009b50 <SDMMC_GetPowerState>
 8007ed2:	4603      	mov	r3, r0
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d102      	bne.n	8007ede <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8007ed8:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8007edc:	e0b8      	b.n	8008050 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee2:	2b03      	cmp	r3, #3
 8007ee4:	d02f      	beq.n	8007f46 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	4618      	mov	r0, r3
 8007eec:	f002 f826 	bl	8009f3c <SDMMC_CmdSendCID>
 8007ef0:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d001      	beq.n	8007efc <SD_InitCard+0x40>
    {
      return errorstate;
 8007ef8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007efa:	e0a9      	b.n	8008050 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2100      	movs	r1, #0
 8007f02:	4618      	mov	r0, r3
 8007f04:	f001 fe69 	bl	8009bda <SDMMC_GetResponse>
 8007f08:	4602      	mov	r2, r0
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2104      	movs	r1, #4
 8007f14:	4618      	mov	r0, r3
 8007f16:	f001 fe60 	bl	8009bda <SDMMC_GetResponse>
 8007f1a:	4602      	mov	r2, r0
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2108      	movs	r1, #8
 8007f26:	4618      	mov	r0, r3
 8007f28:	f001 fe57 	bl	8009bda <SDMMC_GetResponse>
 8007f2c:	4602      	mov	r2, r0
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	210c      	movs	r1, #12
 8007f38:	4618      	mov	r0, r3
 8007f3a:	f001 fe4e 	bl	8009bda <SDMMC_GetResponse>
 8007f3e:	4602      	mov	r2, r0
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f4a:	2b03      	cmp	r3, #3
 8007f4c:	d00d      	beq.n	8007f6a <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	f107 020e 	add.w	r2, r7, #14
 8007f56:	4611      	mov	r1, r2
 8007f58:	4618      	mov	r0, r3
 8007f5a:	f002 f82c 	bl	8009fb6 <SDMMC_CmdSetRelAdd>
 8007f5e:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <SD_InitCard+0xae>
    {
      return errorstate;
 8007f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f68:	e072      	b.n	8008050 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6e:	2b03      	cmp	r3, #3
 8007f70:	d036      	beq.n	8007fe0 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8007f72:	89fb      	ldrh	r3, [r7, #14]
 8007f74:	461a      	mov	r2, r3
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f82:	041b      	lsls	r3, r3, #16
 8007f84:	4619      	mov	r1, r3
 8007f86:	4610      	mov	r0, r2
 8007f88:	f001 fff6 	bl	8009f78 <SDMMC_CmdSendCSD>
 8007f8c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8007f8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d001      	beq.n	8007f98 <SD_InitCard+0xdc>
    {
      return errorstate;
 8007f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f96:	e05b      	b.n	8008050 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2100      	movs	r1, #0
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	f001 fe1b 	bl	8009bda <SDMMC_GetResponse>
 8007fa4:	4602      	mov	r2, r0
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	2104      	movs	r1, #4
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	f001 fe12 	bl	8009bda <SDMMC_GetResponse>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2108      	movs	r1, #8
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f001 fe09 	bl	8009bda <SDMMC_GetResponse>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	210c      	movs	r1, #12
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f001 fe00 	bl	8009bda <SDMMC_GetResponse>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	2104      	movs	r1, #4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f001 fdf7 	bl	8009bda <SDMMC_GetResponse>
 8007fec:	4603      	mov	r3, r0
 8007fee:	0d1a      	lsrs	r2, r3, #20
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8007ff4:	f107 0310 	add.w	r3, r7, #16
 8007ff8:	4619      	mov	r1, r3
 8007ffa:	6878      	ldr	r0, [r7, #4]
 8007ffc:	f7ff fd6e 	bl	8007adc <HAL_SD_GetCardCSD>
 8008000:	4603      	mov	r3, r0
 8008002:	2b00      	cmp	r3, #0
 8008004:	d002      	beq.n	800800c <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008006:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800800a:	e021      	b.n	8008050 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6819      	ldr	r1, [r3, #0]
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008014:	041b      	lsls	r3, r3, #16
 8008016:	2200      	movs	r2, #0
 8008018:	461c      	mov	r4, r3
 800801a:	4615      	mov	r5, r2
 800801c:	4622      	mov	r2, r4
 800801e:	462b      	mov	r3, r5
 8008020:	4608      	mov	r0, r1
 8008022:	f001 fee5 	bl	8009df0 <SDMMC_CmdSelDesel>
 8008026:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800802a:	2b00      	cmp	r3, #0
 800802c:	d001      	beq.n	8008032 <SD_InitCard+0x176>
  {
    return errorstate;
 800802e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008030:	e00e      	b.n	8008050 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	466c      	mov	r4, sp
 800803a:	f103 0210 	add.w	r2, r3, #16
 800803e:	ca07      	ldmia	r2, {r0, r1, r2}
 8008040:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008044:	3304      	adds	r3, #4
 8008046:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008048:	4628      	mov	r0, r5
 800804a:	f001 fd29 	bl	8009aa0 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800804e:	2300      	movs	r3, #0
}
 8008050:	4618      	mov	r0, r3
 8008052:	3740      	adds	r7, #64	; 0x40
 8008054:	46bd      	mov	sp, r7
 8008056:	bdb0      	pop	{r4, r5, r7, pc}

08008058 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	617b      	str	r3, [r7, #20]
 8008068:	2300      	movs	r3, #0
 800806a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4618      	mov	r0, r3
 8008072:	f001 fee0 	bl	8009e36 <SDMMC_CmdGoIdleState>
 8008076:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d001      	beq.n	8008082 <SD_PowerON+0x2a>
  {
    return errorstate;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	e072      	b.n	8008168 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4618      	mov	r0, r3
 8008088:	f001 fef3 	bl	8009e72 <SDMMC_CmdOperCond>
 800808c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2b00      	cmp	r3, #0
 8008092:	d00d      	beq.n	80080b0 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4618      	mov	r0, r3
 80080a0:	f001 fec9 	bl	8009e36 <SDMMC_CmdGoIdleState>
 80080a4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d004      	beq.n	80080b6 <SD_PowerON+0x5e>
    {
      return errorstate;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	e05b      	b.n	8008168 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2201      	movs	r2, #1
 80080b4:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d137      	bne.n	800812e <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2100      	movs	r1, #0
 80080c4:	4618      	mov	r0, r3
 80080c6:	f001 fef3 	bl	8009eb0 <SDMMC_CmdAppCommand>
 80080ca:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d02d      	beq.n	800812e <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80080d2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80080d6:	e047      	b.n	8008168 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f001 fee6 	bl	8009eb0 <SDMMC_CmdAppCommand>
 80080e4:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d001      	beq.n	80080f0 <SD_PowerON+0x98>
    {
      return errorstate;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	e03b      	b.n	8008168 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	491e      	ldr	r1, [pc, #120]	; (8008170 <SD_PowerON+0x118>)
 80080f6:	4618      	mov	r0, r3
 80080f8:	f001 fefc 	bl	8009ef4 <SDMMC_CmdAppOperCommand>
 80080fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d002      	beq.n	800810a <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008104:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008108:	e02e      	b.n	8008168 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2100      	movs	r1, #0
 8008110:	4618      	mov	r0, r3
 8008112:	f001 fd62 	bl	8009bda <SDMMC_GetResponse>
 8008116:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	0fdb      	lsrs	r3, r3, #31
 800811c:	2b01      	cmp	r3, #1
 800811e:	d101      	bne.n	8008124 <SD_PowerON+0xcc>
 8008120:	2301      	movs	r3, #1
 8008122:	e000      	b.n	8008126 <SD_PowerON+0xce>
 8008124:	2300      	movs	r3, #0
 8008126:	613b      	str	r3, [r7, #16]

    count++;
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	3301      	adds	r3, #1
 800812c:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008134:	4293      	cmp	r3, r2
 8008136:	d802      	bhi.n	800813e <SD_PowerON+0xe6>
 8008138:	693b      	ldr	r3, [r7, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d0cc      	beq.n	80080d8 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800813e:	68bb      	ldr	r3, [r7, #8]
 8008140:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008144:	4293      	cmp	r3, r2
 8008146:	d902      	bls.n	800814e <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800814c:	e00c      	b.n	8008168 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800814e:	697b      	ldr	r3, [r7, #20]
 8008150:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008154:	2b00      	cmp	r3, #0
 8008156:	d003      	beq.n	8008160 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	645a      	str	r2, [r3, #68]	; 0x44
 800815e:	e002      	b.n	8008166 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008166:	2300      	movs	r3, #0
}
 8008168:	4618      	mov	r0, r3
 800816a:	3718      	adds	r7, #24
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}
 8008170:	c1100000 	.word	0xc1100000

08008174 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b084      	sub	sp, #16
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d102      	bne.n	800818a <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008184:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008188:	e018      	b.n	80081bc <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681a      	ldr	r2, [r3, #0]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008192:	041b      	lsls	r3, r3, #16
 8008194:	4619      	mov	r1, r3
 8008196:	4610      	mov	r0, r2
 8008198:	f001 ff2e 	bl	8009ff8 <SDMMC_CmdSendStatus>
 800819c:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d001      	beq.n	80081a8 <SD_SendStatus+0x34>
  {
    return errorstate;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	e009      	b.n	80081bc <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2100      	movs	r1, #0
 80081ae:	4618      	mov	r0, r3
 80081b0:	f001 fd13 	bl	8009bda <SDMMC_GetResponse>
 80081b4:	4602      	mov	r2, r0
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80081ba:	2300      	movs	r3, #0
}
 80081bc:	4618      	mov	r0, r3
 80081be:	3710      	adds	r7, #16
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b084      	sub	sp, #16
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d101      	bne.n	80081da <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80081d6:	2301      	movs	r3, #1
 80081d8:	e038      	b.n	800824c <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80081e0:	b2db      	uxtb	r3, r3
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d106      	bne.n	80081f4 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	2200      	movs	r2, #0
 80081ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80081ee:	68f8      	ldr	r0, [r7, #12]
 80081f0:	f7f9 fd16 	bl	8001c20 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681a      	ldr	r2, [r3, #0]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	3308      	adds	r3, #8
 80081fc:	4619      	mov	r1, r3
 80081fe:	4610      	mov	r0, r2
 8008200:	f001 fb36 	bl	8009870 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	6818      	ldr	r0, [r3, #0]
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	461a      	mov	r2, r3
 800820e:	68b9      	ldr	r1, [r7, #8]
 8008210:	f001 fbbe 	bl	8009990 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6858      	ldr	r0, [r3, #4]
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	689a      	ldr	r2, [r3, #8]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008220:	6879      	ldr	r1, [r7, #4]
 8008222:	f001 fc05 	bl	8009a30 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	6892      	ldr	r2, [r2, #8]
 800822e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008232:	68fb      	ldr	r3, [r7, #12]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	68fa      	ldr	r2, [r7, #12]
 8008238:	6892      	ldr	r2, [r2, #8]
 800823a:	f041 0101 	orr.w	r1, r1, #1
 800823e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800824a:	2300      	movs	r3, #0
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d101      	bne.n	8008266 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008262:	2301      	movs	r3, #1
 8008264:	e049      	b.n	80082fa <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	d106      	bne.n	8008280 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	2200      	movs	r2, #0
 8008276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7f9 fb98 	bl	80019b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2202      	movs	r2, #2
 8008284:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681a      	ldr	r2, [r3, #0]
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	3304      	adds	r3, #4
 8008290:	4619      	mov	r1, r3
 8008292:	4610      	mov	r0, r2
 8008294:	f000 fa74 	bl	8008780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	2201      	movs	r2, #1
 80082cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2201      	movs	r2, #1
 80082d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2201      	movs	r2, #1
 80082dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2201      	movs	r2, #1
 80082e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2201      	movs	r2, #1
 80082ec:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082f8:	2300      	movs	r3, #0
}
 80082fa:	4618      	mov	r0, r3
 80082fc:	3708      	adds	r7, #8
 80082fe:	46bd      	mov	sp, r7
 8008300:	bd80      	pop	{r7, pc}

08008302 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008302:	b580      	push	{r7, lr}
 8008304:	b082      	sub	sp, #8
 8008306:	af00      	add	r7, sp, #0
 8008308:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008310:	2301      	movs	r3, #1
 8008312:	e049      	b.n	80083a8 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b00      	cmp	r3, #0
 800831e:	d106      	bne.n	800832e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2200      	movs	r2, #0
 8008324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f000 f841 	bl	80083b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2202      	movs	r2, #2
 8008332:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	3304      	adds	r3, #4
 800833e:	4619      	mov	r1, r3
 8008340:	4610      	mov	r0, r2
 8008342:	f000 fa1d 	bl	8008780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2201      	movs	r2, #1
 800836a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2201      	movs	r2, #1
 8008382:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2201      	movs	r2, #1
 800838a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2201      	movs	r2, #1
 8008392:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	2201      	movs	r2, #1
 800839a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2201      	movs	r2, #1
 80083a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80083a6:	2300      	movs	r3, #0
}
 80083a8:	4618      	mov	r0, r3
 80083aa:	3708      	adds	r7, #8
 80083ac:	46bd      	mov	sp, r7
 80083ae:	bd80      	pop	{r7, pc}

080083b0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b083      	sub	sp, #12
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80083b8:	bf00      	nop
 80083ba:	370c      	adds	r7, #12
 80083bc:	46bd      	mov	sp, r7
 80083be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c2:	4770      	bx	lr

080083c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80083c4:	b580      	push	{r7, lr}
 80083c6:	b086      	sub	sp, #24
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	60f8      	str	r0, [r7, #12]
 80083cc:	60b9      	str	r1, [r7, #8]
 80083ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80083de:	2302      	movs	r3, #2
 80083e0:	e0ff      	b.n	80085e2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2201      	movs	r2, #1
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	2b14      	cmp	r3, #20
 80083ee:	f200 80f0 	bhi.w	80085d2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80083f2:	a201      	add	r2, pc, #4	; (adr r2, 80083f8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80083f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083f8:	0800844d 	.word	0x0800844d
 80083fc:	080085d3 	.word	0x080085d3
 8008400:	080085d3 	.word	0x080085d3
 8008404:	080085d3 	.word	0x080085d3
 8008408:	0800848d 	.word	0x0800848d
 800840c:	080085d3 	.word	0x080085d3
 8008410:	080085d3 	.word	0x080085d3
 8008414:	080085d3 	.word	0x080085d3
 8008418:	080084cf 	.word	0x080084cf
 800841c:	080085d3 	.word	0x080085d3
 8008420:	080085d3 	.word	0x080085d3
 8008424:	080085d3 	.word	0x080085d3
 8008428:	0800850f 	.word	0x0800850f
 800842c:	080085d3 	.word	0x080085d3
 8008430:	080085d3 	.word	0x080085d3
 8008434:	080085d3 	.word	0x080085d3
 8008438:	08008551 	.word	0x08008551
 800843c:	080085d3 	.word	0x080085d3
 8008440:	080085d3 	.word	0x080085d3
 8008444:	080085d3 	.word	0x080085d3
 8008448:	08008591 	.word	0x08008591
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	68b9      	ldr	r1, [r7, #8]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fa34 	bl	80088c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	699a      	ldr	r2, [r3, #24]
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	f042 0208 	orr.w	r2, r2, #8
 8008466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	699a      	ldr	r2, [r3, #24]
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f022 0204 	bic.w	r2, r2, #4
 8008476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	6999      	ldr	r1, [r3, #24]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	691a      	ldr	r2, [r3, #16]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	430a      	orrs	r2, r1
 8008488:	619a      	str	r2, [r3, #24]
      break;
 800848a:	e0a5      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	68b9      	ldr	r1, [r7, #8]
 8008492:	4618      	mov	r0, r3
 8008494:	f000 fa86 	bl	80089a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	699a      	ldr	r2, [r3, #24]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80084a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	699a      	ldr	r2, [r3, #24]
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80084b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6999      	ldr	r1, [r3, #24]
 80084be:	68bb      	ldr	r3, [r7, #8]
 80084c0:	691b      	ldr	r3, [r3, #16]
 80084c2:	021a      	lsls	r2, r3, #8
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	430a      	orrs	r2, r1
 80084ca:	619a      	str	r2, [r3, #24]
      break;
 80084cc:	e084      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68b9      	ldr	r1, [r7, #8]
 80084d4:	4618      	mov	r0, r3
 80084d6:	f000 fadd 	bl	8008a94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	69da      	ldr	r2, [r3, #28]
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f042 0208 	orr.w	r2, r2, #8
 80084e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	69da      	ldr	r2, [r3, #28]
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	f022 0204 	bic.w	r2, r2, #4
 80084f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	69d9      	ldr	r1, [r3, #28]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	691a      	ldr	r2, [r3, #16]
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	430a      	orrs	r2, r1
 800850a:	61da      	str	r2, [r3, #28]
      break;
 800850c:	e064      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	68b9      	ldr	r1, [r7, #8]
 8008514:	4618      	mov	r0, r3
 8008516:	f000 fb33 	bl	8008b80 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	69da      	ldr	r2, [r3, #28]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	69da      	ldr	r2, [r3, #28]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69d9      	ldr	r1, [r3, #28]
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	691b      	ldr	r3, [r3, #16]
 8008544:	021a      	lsls	r2, r3, #8
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	430a      	orrs	r2, r1
 800854c:	61da      	str	r2, [r3, #28]
      break;
 800854e:	e043      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	68b9      	ldr	r1, [r7, #8]
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fb6a 	bl	8008c30 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	f042 0208 	orr.w	r2, r2, #8
 800856a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	f022 0204 	bic.w	r2, r2, #4
 800857a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	691a      	ldr	r2, [r3, #16]
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	430a      	orrs	r2, r1
 800858c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800858e:	e023      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	68b9      	ldr	r1, [r7, #8]
 8008596:	4618      	mov	r0, r3
 8008598:	f000 fb9c 	bl	8008cd4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085aa:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085ba:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	691b      	ldr	r3, [r3, #16]
 80085c6:	021a      	lsls	r2, r3, #8
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	430a      	orrs	r2, r1
 80085ce:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80085d0:	e002      	b.n	80085d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	75fb      	strb	r3, [r7, #23]
      break;
 80085d6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2200      	movs	r2, #0
 80085dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80085e2:	4618      	mov	r0, r3
 80085e4:	3718      	adds	r7, #24
 80085e6:	46bd      	mov	sp, r7
 80085e8:	bd80      	pop	{r7, pc}
 80085ea:	bf00      	nop

080085ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b084      	sub	sp, #16
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	6078      	str	r0, [r7, #4]
 80085f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085f6:	2300      	movs	r3, #0
 80085f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008600:	2b01      	cmp	r3, #1
 8008602:	d101      	bne.n	8008608 <HAL_TIM_ConfigClockSource+0x1c>
 8008604:	2302      	movs	r3, #2
 8008606:	e0b4      	b.n	8008772 <HAL_TIM_ConfigClockSource+0x186>
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2201      	movs	r2, #1
 800860c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2202      	movs	r2, #2
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	689b      	ldr	r3, [r3, #8]
 800861e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008620:	68ba      	ldr	r2, [r7, #8]
 8008622:	4b56      	ldr	r3, [pc, #344]	; (800877c <HAL_TIM_ConfigClockSource+0x190>)
 8008624:	4013      	ands	r3, r2
 8008626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008628:	68bb      	ldr	r3, [r7, #8]
 800862a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800862e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68ba      	ldr	r2, [r7, #8]
 8008636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008638:	683b      	ldr	r3, [r7, #0]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008640:	d03e      	beq.n	80086c0 <HAL_TIM_ConfigClockSource+0xd4>
 8008642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008646:	f200 8087 	bhi.w	8008758 <HAL_TIM_ConfigClockSource+0x16c>
 800864a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800864e:	f000 8086 	beq.w	800875e <HAL_TIM_ConfigClockSource+0x172>
 8008652:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008656:	d87f      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x16c>
 8008658:	2b70      	cmp	r3, #112	; 0x70
 800865a:	d01a      	beq.n	8008692 <HAL_TIM_ConfigClockSource+0xa6>
 800865c:	2b70      	cmp	r3, #112	; 0x70
 800865e:	d87b      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x16c>
 8008660:	2b60      	cmp	r3, #96	; 0x60
 8008662:	d050      	beq.n	8008706 <HAL_TIM_ConfigClockSource+0x11a>
 8008664:	2b60      	cmp	r3, #96	; 0x60
 8008666:	d877      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x16c>
 8008668:	2b50      	cmp	r3, #80	; 0x50
 800866a:	d03c      	beq.n	80086e6 <HAL_TIM_ConfigClockSource+0xfa>
 800866c:	2b50      	cmp	r3, #80	; 0x50
 800866e:	d873      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x16c>
 8008670:	2b40      	cmp	r3, #64	; 0x40
 8008672:	d058      	beq.n	8008726 <HAL_TIM_ConfigClockSource+0x13a>
 8008674:	2b40      	cmp	r3, #64	; 0x40
 8008676:	d86f      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x16c>
 8008678:	2b30      	cmp	r3, #48	; 0x30
 800867a:	d064      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x15a>
 800867c:	2b30      	cmp	r3, #48	; 0x30
 800867e:	d86b      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x16c>
 8008680:	2b20      	cmp	r3, #32
 8008682:	d060      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x15a>
 8008684:	2b20      	cmp	r3, #32
 8008686:	d867      	bhi.n	8008758 <HAL_TIM_ConfigClockSource+0x16c>
 8008688:	2b00      	cmp	r3, #0
 800868a:	d05c      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x15a>
 800868c:	2b10      	cmp	r3, #16
 800868e:	d05a      	beq.n	8008746 <HAL_TIM_ConfigClockSource+0x15a>
 8008690:	e062      	b.n	8008758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6818      	ldr	r0, [r3, #0]
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	6899      	ldr	r1, [r3, #8]
 800869a:	683b      	ldr	r3, [r7, #0]
 800869c:	685a      	ldr	r2, [r3, #4]
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	f000 fbe5 	bl	8008e70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	689b      	ldr	r3, [r3, #8]
 80086ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80086b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	68ba      	ldr	r2, [r7, #8]
 80086bc:	609a      	str	r2, [r3, #8]
      break;
 80086be:	e04f      	b.n	8008760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	6818      	ldr	r0, [r3, #0]
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	6899      	ldr	r1, [r3, #8]
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	685a      	ldr	r2, [r3, #4]
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	f000 fbce 	bl	8008e70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	689a      	ldr	r2, [r3, #8]
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086e2:	609a      	str	r2, [r3, #8]
      break;
 80086e4:	e03c      	b.n	8008760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	6818      	ldr	r0, [r3, #0]
 80086ea:	683b      	ldr	r3, [r7, #0]
 80086ec:	6859      	ldr	r1, [r3, #4]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	68db      	ldr	r3, [r3, #12]
 80086f2:	461a      	mov	r2, r3
 80086f4:	f000 fb42 	bl	8008d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	2150      	movs	r1, #80	; 0x50
 80086fe:	4618      	mov	r0, r3
 8008700:	f000 fb9b 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 8008704:	e02c      	b.n	8008760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	6818      	ldr	r0, [r3, #0]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	6859      	ldr	r1, [r3, #4]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	461a      	mov	r2, r3
 8008714:	f000 fb61 	bl	8008dda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	2160      	movs	r1, #96	; 0x60
 800871e:	4618      	mov	r0, r3
 8008720:	f000 fb8b 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 8008724:	e01c      	b.n	8008760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	6818      	ldr	r0, [r3, #0]
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	6859      	ldr	r1, [r3, #4]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	68db      	ldr	r3, [r3, #12]
 8008732:	461a      	mov	r2, r3
 8008734:	f000 fb22 	bl	8008d7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	2140      	movs	r1, #64	; 0x40
 800873e:	4618      	mov	r0, r3
 8008740:	f000 fb7b 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 8008744:	e00c      	b.n	8008760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	683b      	ldr	r3, [r7, #0]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	4619      	mov	r1, r3
 8008750:	4610      	mov	r0, r2
 8008752:	f000 fb72 	bl	8008e3a <TIM_ITRx_SetConfig>
      break;
 8008756:	e003      	b.n	8008760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	73fb      	strb	r3, [r7, #15]
      break;
 800875c:	e000      	b.n	8008760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800875e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2201      	movs	r2, #1
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008770:	7bfb      	ldrb	r3, [r7, #15]
}
 8008772:	4618      	mov	r0, r3
 8008774:	3710      	adds	r7, #16
 8008776:	46bd      	mov	sp, r7
 8008778:	bd80      	pop	{r7, pc}
 800877a:	bf00      	nop
 800877c:	fffeff88 	.word	0xfffeff88

08008780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008780:	b480      	push	{r7}
 8008782:	b085      	sub	sp, #20
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	4a40      	ldr	r2, [pc, #256]	; (8008894 <TIM_Base_SetConfig+0x114>)
 8008794:	4293      	cmp	r3, r2
 8008796:	d013      	beq.n	80087c0 <TIM_Base_SetConfig+0x40>
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800879e:	d00f      	beq.n	80087c0 <TIM_Base_SetConfig+0x40>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4a3d      	ldr	r2, [pc, #244]	; (8008898 <TIM_Base_SetConfig+0x118>)
 80087a4:	4293      	cmp	r3, r2
 80087a6:	d00b      	beq.n	80087c0 <TIM_Base_SetConfig+0x40>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	4a3c      	ldr	r2, [pc, #240]	; (800889c <TIM_Base_SetConfig+0x11c>)
 80087ac:	4293      	cmp	r3, r2
 80087ae:	d007      	beq.n	80087c0 <TIM_Base_SetConfig+0x40>
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	4a3b      	ldr	r2, [pc, #236]	; (80088a0 <TIM_Base_SetConfig+0x120>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d003      	beq.n	80087c0 <TIM_Base_SetConfig+0x40>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	4a3a      	ldr	r2, [pc, #232]	; (80088a4 <TIM_Base_SetConfig+0x124>)
 80087bc:	4293      	cmp	r3, r2
 80087be:	d108      	bne.n	80087d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087c8:	683b      	ldr	r3, [r7, #0]
 80087ca:	685b      	ldr	r3, [r3, #4]
 80087cc:	68fa      	ldr	r2, [r7, #12]
 80087ce:	4313      	orrs	r3, r2
 80087d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	4a2f      	ldr	r2, [pc, #188]	; (8008894 <TIM_Base_SetConfig+0x114>)
 80087d6:	4293      	cmp	r3, r2
 80087d8:	d02b      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087e0:	d027      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	4a2c      	ldr	r2, [pc, #176]	; (8008898 <TIM_Base_SetConfig+0x118>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d023      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	4a2b      	ldr	r2, [pc, #172]	; (800889c <TIM_Base_SetConfig+0x11c>)
 80087ee:	4293      	cmp	r3, r2
 80087f0:	d01f      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	4a2a      	ldr	r2, [pc, #168]	; (80088a0 <TIM_Base_SetConfig+0x120>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d01b      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	4a29      	ldr	r2, [pc, #164]	; (80088a4 <TIM_Base_SetConfig+0x124>)
 80087fe:	4293      	cmp	r3, r2
 8008800:	d017      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a28      	ldr	r2, [pc, #160]	; (80088a8 <TIM_Base_SetConfig+0x128>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d013      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	4a27      	ldr	r2, [pc, #156]	; (80088ac <TIM_Base_SetConfig+0x12c>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d00f      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a26      	ldr	r2, [pc, #152]	; (80088b0 <TIM_Base_SetConfig+0x130>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d00b      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a25      	ldr	r2, [pc, #148]	; (80088b4 <TIM_Base_SetConfig+0x134>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d007      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a24      	ldr	r2, [pc, #144]	; (80088b8 <TIM_Base_SetConfig+0x138>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d003      	beq.n	8008832 <TIM_Base_SetConfig+0xb2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a23      	ldr	r2, [pc, #140]	; (80088bc <TIM_Base_SetConfig+0x13c>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d108      	bne.n	8008844 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008838:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	68fa      	ldr	r2, [r7, #12]
 8008840:	4313      	orrs	r3, r2
 8008842:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800884a:	683b      	ldr	r3, [r7, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	4313      	orrs	r3, r2
 8008850:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68fa      	ldr	r2, [r7, #12]
 8008856:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	689a      	ldr	r2, [r3, #8]
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a0a      	ldr	r2, [pc, #40]	; (8008894 <TIM_Base_SetConfig+0x114>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_Base_SetConfig+0xf8>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a0c      	ldr	r2, [pc, #48]	; (80088a4 <TIM_Base_SetConfig+0x124>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d103      	bne.n	8008880 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008878:	683b      	ldr	r3, [r7, #0]
 800887a:	691a      	ldr	r2, [r3, #16]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2201      	movs	r2, #1
 8008884:	615a      	str	r2, [r3, #20]
}
 8008886:	bf00      	nop
 8008888:	3714      	adds	r7, #20
 800888a:	46bd      	mov	sp, r7
 800888c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008890:	4770      	bx	lr
 8008892:	bf00      	nop
 8008894:	40010000 	.word	0x40010000
 8008898:	40000400 	.word	0x40000400
 800889c:	40000800 	.word	0x40000800
 80088a0:	40000c00 	.word	0x40000c00
 80088a4:	40010400 	.word	0x40010400
 80088a8:	40014000 	.word	0x40014000
 80088ac:	40014400 	.word	0x40014400
 80088b0:	40014800 	.word	0x40014800
 80088b4:	40001800 	.word	0x40001800
 80088b8:	40001c00 	.word	0x40001c00
 80088bc:	40002000 	.word	0x40002000

080088c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80088c0:	b480      	push	{r7}
 80088c2:	b087      	sub	sp, #28
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
 80088c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6a1b      	ldr	r3, [r3, #32]
 80088ce:	f023 0201 	bic.w	r2, r3, #1
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	6a1b      	ldr	r3, [r3, #32]
 80088da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	699b      	ldr	r3, [r3, #24]
 80088e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4b2b      	ldr	r3, [pc, #172]	; (8008998 <TIM_OC1_SetConfig+0xd8>)
 80088ec:	4013      	ands	r3, r2
 80088ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	f023 0303 	bic.w	r3, r3, #3
 80088f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	68fa      	ldr	r2, [r7, #12]
 80088fe:	4313      	orrs	r3, r2
 8008900:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	f023 0302 	bic.w	r3, r3, #2
 8008908:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	689b      	ldr	r3, [r3, #8]
 800890e:	697a      	ldr	r2, [r7, #20]
 8008910:	4313      	orrs	r3, r2
 8008912:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	4a21      	ldr	r2, [pc, #132]	; (800899c <TIM_OC1_SetConfig+0xdc>)
 8008918:	4293      	cmp	r3, r2
 800891a:	d003      	beq.n	8008924 <TIM_OC1_SetConfig+0x64>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	4a20      	ldr	r2, [pc, #128]	; (80089a0 <TIM_OC1_SetConfig+0xe0>)
 8008920:	4293      	cmp	r3, r2
 8008922:	d10c      	bne.n	800893e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	f023 0308 	bic.w	r3, r3, #8
 800892a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	697a      	ldr	r2, [r7, #20]
 8008932:	4313      	orrs	r3, r2
 8008934:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008936:	697b      	ldr	r3, [r7, #20]
 8008938:	f023 0304 	bic.w	r3, r3, #4
 800893c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a16      	ldr	r2, [pc, #88]	; (800899c <TIM_OC1_SetConfig+0xdc>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d003      	beq.n	800894e <TIM_OC1_SetConfig+0x8e>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a15      	ldr	r2, [pc, #84]	; (80089a0 <TIM_OC1_SetConfig+0xe0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d111      	bne.n	8008972 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008956:	693b      	ldr	r3, [r7, #16]
 8008958:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800895c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	695b      	ldr	r3, [r3, #20]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	4313      	orrs	r3, r2
 8008966:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	693a      	ldr	r2, [r7, #16]
 800896e:	4313      	orrs	r3, r2
 8008970:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	693a      	ldr	r2, [r7, #16]
 8008976:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68fa      	ldr	r2, [r7, #12]
 800897c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	685a      	ldr	r2, [r3, #4]
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	621a      	str	r2, [r3, #32]
}
 800898c:	bf00      	nop
 800898e:	371c      	adds	r7, #28
 8008990:	46bd      	mov	sp, r7
 8008992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008996:	4770      	bx	lr
 8008998:	fffeff8f 	.word	0xfffeff8f
 800899c:	40010000 	.word	0x40010000
 80089a0:	40010400 	.word	0x40010400

080089a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b087      	sub	sp, #28
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
 80089ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	6a1b      	ldr	r3, [r3, #32]
 80089b2:	f023 0210 	bic.w	r2, r3, #16
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6a1b      	ldr	r3, [r3, #32]
 80089be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	685b      	ldr	r3, [r3, #4]
 80089c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	699b      	ldr	r3, [r3, #24]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80089cc:	68fa      	ldr	r2, [r7, #12]
 80089ce:	4b2e      	ldr	r3, [pc, #184]	; (8008a88 <TIM_OC2_SetConfig+0xe4>)
 80089d0:	4013      	ands	r3, r2
 80089d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80089da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089dc:	683b      	ldr	r3, [r7, #0]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	021b      	lsls	r3, r3, #8
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0320 	bic.w	r3, r3, #32
 80089ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689b      	ldr	r3, [r3, #8]
 80089f4:	011b      	lsls	r3, r3, #4
 80089f6:	697a      	ldr	r2, [r7, #20]
 80089f8:	4313      	orrs	r3, r2
 80089fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	4a23      	ldr	r2, [pc, #140]	; (8008a8c <TIM_OC2_SetConfig+0xe8>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d003      	beq.n	8008a0c <TIM_OC2_SetConfig+0x68>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	4a22      	ldr	r2, [pc, #136]	; (8008a90 <TIM_OC2_SetConfig+0xec>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d10d      	bne.n	8008a28 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a0c:	697b      	ldr	r3, [r7, #20]
 8008a0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	011b      	lsls	r3, r3, #4
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a26:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	4a18      	ldr	r2, [pc, #96]	; (8008a8c <TIM_OC2_SetConfig+0xe8>)
 8008a2c:	4293      	cmp	r3, r2
 8008a2e:	d003      	beq.n	8008a38 <TIM_OC2_SetConfig+0x94>
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	4a17      	ldr	r2, [pc, #92]	; (8008a90 <TIM_OC2_SetConfig+0xec>)
 8008a34:	4293      	cmp	r3, r2
 8008a36:	d113      	bne.n	8008a60 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008a3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008a46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	695b      	ldr	r3, [r3, #20]
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	693a      	ldr	r2, [r7, #16]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a54:	683b      	ldr	r3, [r7, #0]
 8008a56:	699b      	ldr	r3, [r3, #24]
 8008a58:	009b      	lsls	r3, r3, #2
 8008a5a:	693a      	ldr	r2, [r7, #16]
 8008a5c:	4313      	orrs	r3, r2
 8008a5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	68fa      	ldr	r2, [r7, #12]
 8008a6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	685a      	ldr	r2, [r3, #4]
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	697a      	ldr	r2, [r7, #20]
 8008a78:	621a      	str	r2, [r3, #32]
}
 8008a7a:	bf00      	nop
 8008a7c:	371c      	adds	r7, #28
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a84:	4770      	bx	lr
 8008a86:	bf00      	nop
 8008a88:	feff8fff 	.word	0xfeff8fff
 8008a8c:	40010000 	.word	0x40010000
 8008a90:	40010400 	.word	0x40010400

08008a94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b087      	sub	sp, #28
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6a1b      	ldr	r3, [r3, #32]
 8008aae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685b      	ldr	r3, [r3, #4]
 8008ab4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	69db      	ldr	r3, [r3, #28]
 8008aba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008abc:	68fa      	ldr	r2, [r7, #12]
 8008abe:	4b2d      	ldr	r3, [pc, #180]	; (8008b74 <TIM_OC3_SetConfig+0xe0>)
 8008ac0:	4013      	ands	r3, r2
 8008ac2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f023 0303 	bic.w	r3, r3, #3
 8008aca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	68fa      	ldr	r2, [r7, #12]
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008ad6:	697b      	ldr	r3, [r7, #20]
 8008ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008adc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008ade:	683b      	ldr	r3, [r7, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	021b      	lsls	r3, r3, #8
 8008ae4:	697a      	ldr	r2, [r7, #20]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	4a22      	ldr	r2, [pc, #136]	; (8008b78 <TIM_OC3_SetConfig+0xe4>)
 8008aee:	4293      	cmp	r3, r2
 8008af0:	d003      	beq.n	8008afa <TIM_OC3_SetConfig+0x66>
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	4a21      	ldr	r2, [pc, #132]	; (8008b7c <TIM_OC3_SetConfig+0xe8>)
 8008af6:	4293      	cmp	r3, r2
 8008af8:	d10d      	bne.n	8008b16 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008afa:	697b      	ldr	r3, [r7, #20]
 8008afc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b02:	683b      	ldr	r3, [r7, #0]
 8008b04:	68db      	ldr	r3, [r3, #12]
 8008b06:	021b      	lsls	r3, r3, #8
 8008b08:	697a      	ldr	r2, [r7, #20]
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a17      	ldr	r2, [pc, #92]	; (8008b78 <TIM_OC3_SetConfig+0xe4>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d003      	beq.n	8008b26 <TIM_OC3_SetConfig+0x92>
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	4a16      	ldr	r2, [pc, #88]	; (8008b7c <TIM_OC3_SetConfig+0xe8>)
 8008b22:	4293      	cmp	r3, r2
 8008b24:	d113      	bne.n	8008b4e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b26:	693b      	ldr	r3, [r7, #16]
 8008b28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	011b      	lsls	r3, r3, #4
 8008b3c:	693a      	ldr	r2, [r7, #16]
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b42:	683b      	ldr	r3, [r7, #0]
 8008b44:	699b      	ldr	r3, [r3, #24]
 8008b46:	011b      	lsls	r3, r3, #4
 8008b48:	693a      	ldr	r2, [r7, #16]
 8008b4a:	4313      	orrs	r3, r2
 8008b4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	68fa      	ldr	r2, [r7, #12]
 8008b58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	685a      	ldr	r2, [r3, #4]
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	697a      	ldr	r2, [r7, #20]
 8008b66:	621a      	str	r2, [r3, #32]
}
 8008b68:	bf00      	nop
 8008b6a:	371c      	adds	r7, #28
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr
 8008b74:	fffeff8f 	.word	0xfffeff8f
 8008b78:	40010000 	.word	0x40010000
 8008b7c:	40010400 	.word	0x40010400

08008b80 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008b80:	b480      	push	{r7}
 8008b82:	b087      	sub	sp, #28
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]
 8008b88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	6a1b      	ldr	r3, [r3, #32]
 8008b8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	685b      	ldr	r3, [r3, #4]
 8008ba0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008ba8:	68fa      	ldr	r2, [r7, #12]
 8008baa:	4b1e      	ldr	r3, [pc, #120]	; (8008c24 <TIM_OC4_SetConfig+0xa4>)
 8008bac:	4013      	ands	r3, r2
 8008bae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bb8:	683b      	ldr	r3, [r7, #0]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	021b      	lsls	r3, r3, #8
 8008bbe:	68fa      	ldr	r2, [r7, #12]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bc4:	693b      	ldr	r3, [r7, #16]
 8008bc6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008bca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bcc:	683b      	ldr	r3, [r7, #0]
 8008bce:	689b      	ldr	r3, [r3, #8]
 8008bd0:	031b      	lsls	r3, r3, #12
 8008bd2:	693a      	ldr	r2, [r7, #16]
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	4a13      	ldr	r2, [pc, #76]	; (8008c28 <TIM_OC4_SetConfig+0xa8>)
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d003      	beq.n	8008be8 <TIM_OC4_SetConfig+0x68>
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	4a12      	ldr	r2, [pc, #72]	; (8008c2c <TIM_OC4_SetConfig+0xac>)
 8008be4:	4293      	cmp	r3, r2
 8008be6:	d109      	bne.n	8008bfc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008bee:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008bf0:	683b      	ldr	r3, [r7, #0]
 8008bf2:	695b      	ldr	r3, [r3, #20]
 8008bf4:	019b      	lsls	r3, r3, #6
 8008bf6:	697a      	ldr	r2, [r7, #20]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	697a      	ldr	r2, [r7, #20]
 8008c00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	621a      	str	r2, [r3, #32]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr
 8008c22:	bf00      	nop
 8008c24:	feff8fff 	.word	0xfeff8fff
 8008c28:	40010000 	.word	0x40010000
 8008c2c:	40010400 	.word	0x40010400

08008c30 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008c30:	b480      	push	{r7}
 8008c32:	b087      	sub	sp, #28
 8008c34:	af00      	add	r7, sp, #0
 8008c36:	6078      	str	r0, [r7, #4]
 8008c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a1b      	ldr	r3, [r3, #32]
 8008c3e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a1b      	ldr	r3, [r3, #32]
 8008c4a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	685b      	ldr	r3, [r3, #4]
 8008c50:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008c58:	68fa      	ldr	r2, [r7, #12]
 8008c5a:	4b1b      	ldr	r3, [pc, #108]	; (8008cc8 <TIM_OC5_SetConfig+0x98>)
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68fa      	ldr	r2, [r7, #12]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008c6a:	693b      	ldr	r3, [r7, #16]
 8008c6c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c70:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008c72:	683b      	ldr	r3, [r7, #0]
 8008c74:	689b      	ldr	r3, [r3, #8]
 8008c76:	041b      	lsls	r3, r3, #16
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	4a12      	ldr	r2, [pc, #72]	; (8008ccc <TIM_OC5_SetConfig+0x9c>)
 8008c82:	4293      	cmp	r3, r2
 8008c84:	d003      	beq.n	8008c8e <TIM_OC5_SetConfig+0x5e>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a11      	ldr	r2, [pc, #68]	; (8008cd0 <TIM_OC5_SetConfig+0xa0>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d109      	bne.n	8008ca2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008c8e:	697b      	ldr	r3, [r7, #20]
 8008c90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c94:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008c96:	683b      	ldr	r3, [r7, #0]
 8008c98:	695b      	ldr	r3, [r3, #20]
 8008c9a:	021b      	lsls	r3, r3, #8
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	4313      	orrs	r3, r2
 8008ca0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	697a      	ldr	r2, [r7, #20]
 8008ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	68fa      	ldr	r2, [r7, #12]
 8008cac:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	693a      	ldr	r2, [r7, #16]
 8008cba:	621a      	str	r2, [r3, #32]
}
 8008cbc:	bf00      	nop
 8008cbe:	371c      	adds	r7, #28
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc6:	4770      	bx	lr
 8008cc8:	fffeff8f 	.word	0xfffeff8f
 8008ccc:	40010000 	.word	0x40010000
 8008cd0:	40010400 	.word	0x40010400

08008cd4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008cd4:	b480      	push	{r7}
 8008cd6:	b087      	sub	sp, #28
 8008cd8:	af00      	add	r7, sp, #0
 8008cda:	6078      	str	r0, [r7, #4]
 8008cdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	6a1b      	ldr	r3, [r3, #32]
 8008ce2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	6a1b      	ldr	r3, [r3, #32]
 8008cee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	685b      	ldr	r3, [r3, #4]
 8008cf4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008cfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008cfc:	68fa      	ldr	r2, [r7, #12]
 8008cfe:	4b1c      	ldr	r3, [pc, #112]	; (8008d70 <TIM_OC6_SetConfig+0x9c>)
 8008d00:	4013      	ands	r3, r2
 8008d02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008d04:	683b      	ldr	r3, [r7, #0]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	021b      	lsls	r3, r3, #8
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	4313      	orrs	r3, r2
 8008d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008d16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	689b      	ldr	r3, [r3, #8]
 8008d1c:	051b      	lsls	r3, r3, #20
 8008d1e:	693a      	ldr	r2, [r7, #16]
 8008d20:	4313      	orrs	r3, r2
 8008d22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a13      	ldr	r2, [pc, #76]	; (8008d74 <TIM_OC6_SetConfig+0xa0>)
 8008d28:	4293      	cmp	r3, r2
 8008d2a:	d003      	beq.n	8008d34 <TIM_OC6_SetConfig+0x60>
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a12      	ldr	r2, [pc, #72]	; (8008d78 <TIM_OC6_SetConfig+0xa4>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d109      	bne.n	8008d48 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d3a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	695b      	ldr	r3, [r3, #20]
 8008d40:	029b      	lsls	r3, r3, #10
 8008d42:	697a      	ldr	r2, [r7, #20]
 8008d44:	4313      	orrs	r3, r2
 8008d46:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	697a      	ldr	r2, [r7, #20]
 8008d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008d54:	683b      	ldr	r3, [r7, #0]
 8008d56:	685a      	ldr	r2, [r3, #4]
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	621a      	str	r2, [r3, #32]
}
 8008d62:	bf00      	nop
 8008d64:	371c      	adds	r7, #28
 8008d66:	46bd      	mov	sp, r7
 8008d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d6c:	4770      	bx	lr
 8008d6e:	bf00      	nop
 8008d70:	feff8fff 	.word	0xfeff8fff
 8008d74:	40010000 	.word	0x40010000
 8008d78:	40010400 	.word	0x40010400

08008d7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f023 0201 	bic.w	r2, r3, #1
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	699b      	ldr	r3, [r3, #24]
 8008d9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008da0:	693b      	ldr	r3, [r7, #16]
 8008da2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008da6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	011b      	lsls	r3, r3, #4
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f023 030a 	bic.w	r3, r3, #10
 8008db8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008dba:	697a      	ldr	r2, [r7, #20]
 8008dbc:	68bb      	ldr	r3, [r7, #8]
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	693a      	ldr	r2, [r7, #16]
 8008dc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	697a      	ldr	r2, [r7, #20]
 8008dcc:	621a      	str	r2, [r3, #32]
}
 8008dce:	bf00      	nop
 8008dd0:	371c      	adds	r7, #28
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr

08008dda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008dda:	b480      	push	{r7}
 8008ddc:	b087      	sub	sp, #28
 8008dde:	af00      	add	r7, sp, #0
 8008de0:	60f8      	str	r0, [r7, #12]
 8008de2:	60b9      	str	r1, [r7, #8]
 8008de4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	6a1b      	ldr	r3, [r3, #32]
 8008dea:	f023 0210 	bic.w	r2, r3, #16
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	6a1b      	ldr	r3, [r3, #32]
 8008dfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008dfe:	697b      	ldr	r3, [r7, #20]
 8008e00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008e04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	031b      	lsls	r3, r3, #12
 8008e0a:	697a      	ldr	r2, [r7, #20]
 8008e0c:	4313      	orrs	r3, r2
 8008e0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008e16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008e18:	68bb      	ldr	r3, [r7, #8]
 8008e1a:	011b      	lsls	r3, r3, #4
 8008e1c:	693a      	ldr	r2, [r7, #16]
 8008e1e:	4313      	orrs	r3, r2
 8008e20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	697a      	ldr	r2, [r7, #20]
 8008e26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	693a      	ldr	r2, [r7, #16]
 8008e2c:	621a      	str	r2, [r3, #32]
}
 8008e2e:	bf00      	nop
 8008e30:	371c      	adds	r7, #28
 8008e32:	46bd      	mov	sp, r7
 8008e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e38:	4770      	bx	lr

08008e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008e3a:	b480      	push	{r7}
 8008e3c:	b085      	sub	sp, #20
 8008e3e:	af00      	add	r7, sp, #0
 8008e40:	6078      	str	r0, [r7, #4]
 8008e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008e52:	683a      	ldr	r2, [r7, #0]
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4313      	orrs	r3, r2
 8008e58:	f043 0307 	orr.w	r3, r3, #7
 8008e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	68fa      	ldr	r2, [r7, #12]
 8008e62:	609a      	str	r2, [r3, #8]
}
 8008e64:	bf00      	nop
 8008e66:	3714      	adds	r7, #20
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
 8008e7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	689b      	ldr	r3, [r3, #8]
 8008e82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008e8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008e8c:	683b      	ldr	r3, [r7, #0]
 8008e8e:	021a      	lsls	r2, r3, #8
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	431a      	orrs	r2, r3
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	4313      	orrs	r3, r2
 8008e98:	697a      	ldr	r2, [r7, #20]
 8008e9a:	4313      	orrs	r3, r2
 8008e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	697a      	ldr	r2, [r7, #20]
 8008ea2:	609a      	str	r2, [r3, #8]
}
 8008ea4:	bf00      	nop
 8008ea6:	371c      	adds	r7, #28
 8008ea8:	46bd      	mov	sp, r7
 8008eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eae:	4770      	bx	lr

08008eb0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b085      	sub	sp, #20
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
 8008eb8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ec0:	2b01      	cmp	r3, #1
 8008ec2:	d101      	bne.n	8008ec8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ec4:	2302      	movs	r3, #2
 8008ec6:	e06d      	b.n	8008fa4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2201      	movs	r2, #1
 8008ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2202      	movs	r2, #2
 8008ed4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a30      	ldr	r2, [pc, #192]	; (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d004      	beq.n	8008efc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a2f      	ldr	r2, [pc, #188]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d108      	bne.n	8008f0e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008f02:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	68fa      	ldr	r2, [r7, #12]
 8008f0a:	4313      	orrs	r3, r2
 8008f0c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f14:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	68fa      	ldr	r2, [r7, #12]
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a20      	ldr	r2, [pc, #128]	; (8008fb0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d022      	beq.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f3a:	d01d      	beq.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	4a1d      	ldr	r2, [pc, #116]	; (8008fb8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d018      	beq.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	4a1c      	ldr	r2, [pc, #112]	; (8008fbc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d013      	beq.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	4a1a      	ldr	r2, [pc, #104]	; (8008fc0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8008f56:	4293      	cmp	r3, r2
 8008f58:	d00e      	beq.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	4a15      	ldr	r2, [pc, #84]	; (8008fb4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8008f60:	4293      	cmp	r3, r2
 8008f62:	d009      	beq.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	4a16      	ldr	r2, [pc, #88]	; (8008fc4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d004      	beq.n	8008f78 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a15      	ldr	r2, [pc, #84]	; (8008fc8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8008f74:	4293      	cmp	r3, r2
 8008f76:	d10c      	bne.n	8008f92 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008f7e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	68ba      	ldr	r2, [r7, #8]
 8008f86:	4313      	orrs	r3, r2
 8008f88:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	68ba      	ldr	r2, [r7, #8]
 8008f90:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2201      	movs	r2, #1
 8008f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008fa2:	2300      	movs	r3, #0
}
 8008fa4:	4618      	mov	r0, r3
 8008fa6:	3714      	adds	r7, #20
 8008fa8:	46bd      	mov	sp, r7
 8008faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fae:	4770      	bx	lr
 8008fb0:	40010000 	.word	0x40010000
 8008fb4:	40010400 	.word	0x40010400
 8008fb8:	40000400 	.word	0x40000400
 8008fbc:	40000800 	.word	0x40000800
 8008fc0:	40000c00 	.word	0x40000c00
 8008fc4:	40014000 	.word	0x40014000
 8008fc8:	40001800 	.word	0x40001800

08008fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	b082      	sub	sp, #8
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d101      	bne.n	8008fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008fda:	2301      	movs	r3, #1
 8008fdc:	e040      	b.n	8009060 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d106      	bne.n	8008ff4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2200      	movs	r2, #0
 8008fea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008fee:	6878      	ldr	r0, [r7, #4]
 8008ff0:	f7f8 fd4a 	bl	8001a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2224      	movs	r2, #36	; 0x24
 8008ff8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f022 0201 	bic.w	r2, r2, #1
 8009008:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800900a:	6878      	ldr	r0, [r7, #4]
 800900c:	f000 f82c 	bl	8009068 <UART_SetConfig>
 8009010:	4603      	mov	r3, r0
 8009012:	2b01      	cmp	r3, #1
 8009014:	d101      	bne.n	800901a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009016:	2301      	movs	r3, #1
 8009018:	e022      	b.n	8009060 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800901e:	2b00      	cmp	r3, #0
 8009020:	d002      	beq.n	8009028 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f000 fa84 	bl	8009530 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	685a      	ldr	r2, [r3, #4]
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009036:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	681b      	ldr	r3, [r3, #0]
 800903c:	689a      	ldr	r2, [r3, #8]
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009046:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681a      	ldr	r2, [r3, #0]
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	f042 0201 	orr.w	r2, r2, #1
 8009056:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009058:	6878      	ldr	r0, [r7, #4]
 800905a:	f000 fb0b 	bl	8009674 <UART_CheckIdleState>
 800905e:	4603      	mov	r3, r0
}
 8009060:	4618      	mov	r0, r3
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}

08009068 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	b088      	sub	sp, #32
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009070:	2300      	movs	r3, #0
 8009072:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	689a      	ldr	r2, [r3, #8]
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	691b      	ldr	r3, [r3, #16]
 800907c:	431a      	orrs	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	695b      	ldr	r3, [r3, #20]
 8009082:	431a      	orrs	r2, r3
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	69db      	ldr	r3, [r3, #28]
 8009088:	4313      	orrs	r3, r2
 800908a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	681a      	ldr	r2, [r3, #0]
 8009092:	4ba6      	ldr	r3, [pc, #664]	; (800932c <UART_SetConfig+0x2c4>)
 8009094:	4013      	ands	r3, r2
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	6812      	ldr	r2, [r2, #0]
 800909a:	6979      	ldr	r1, [r7, #20]
 800909c:	430b      	orrs	r3, r1
 800909e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	685b      	ldr	r3, [r3, #4]
 80090a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	68da      	ldr	r2, [r3, #12]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	430a      	orrs	r2, r1
 80090b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6a1b      	ldr	r3, [r3, #32]
 80090c0:	697a      	ldr	r2, [r7, #20]
 80090c2:	4313      	orrs	r3, r2
 80090c4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	689b      	ldr	r3, [r3, #8]
 80090cc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	697a      	ldr	r2, [r7, #20]
 80090d6:	430a      	orrs	r2, r1
 80090d8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	4a94      	ldr	r2, [pc, #592]	; (8009330 <UART_SetConfig+0x2c8>)
 80090e0:	4293      	cmp	r3, r2
 80090e2:	d120      	bne.n	8009126 <UART_SetConfig+0xbe>
 80090e4:	4b93      	ldr	r3, [pc, #588]	; (8009334 <UART_SetConfig+0x2cc>)
 80090e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80090ea:	f003 0303 	and.w	r3, r3, #3
 80090ee:	2b03      	cmp	r3, #3
 80090f0:	d816      	bhi.n	8009120 <UART_SetConfig+0xb8>
 80090f2:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <UART_SetConfig+0x90>)
 80090f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f8:	08009109 	.word	0x08009109
 80090fc:	08009115 	.word	0x08009115
 8009100:	0800910f 	.word	0x0800910f
 8009104:	0800911b 	.word	0x0800911b
 8009108:	2301      	movs	r3, #1
 800910a:	77fb      	strb	r3, [r7, #31]
 800910c:	e150      	b.n	80093b0 <UART_SetConfig+0x348>
 800910e:	2302      	movs	r3, #2
 8009110:	77fb      	strb	r3, [r7, #31]
 8009112:	e14d      	b.n	80093b0 <UART_SetConfig+0x348>
 8009114:	2304      	movs	r3, #4
 8009116:	77fb      	strb	r3, [r7, #31]
 8009118:	e14a      	b.n	80093b0 <UART_SetConfig+0x348>
 800911a:	2308      	movs	r3, #8
 800911c:	77fb      	strb	r3, [r7, #31]
 800911e:	e147      	b.n	80093b0 <UART_SetConfig+0x348>
 8009120:	2310      	movs	r3, #16
 8009122:	77fb      	strb	r3, [r7, #31]
 8009124:	e144      	b.n	80093b0 <UART_SetConfig+0x348>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a83      	ldr	r2, [pc, #524]	; (8009338 <UART_SetConfig+0x2d0>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d132      	bne.n	8009196 <UART_SetConfig+0x12e>
 8009130:	4b80      	ldr	r3, [pc, #512]	; (8009334 <UART_SetConfig+0x2cc>)
 8009132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009136:	f003 030c 	and.w	r3, r3, #12
 800913a:	2b0c      	cmp	r3, #12
 800913c:	d828      	bhi.n	8009190 <UART_SetConfig+0x128>
 800913e:	a201      	add	r2, pc, #4	; (adr r2, 8009144 <UART_SetConfig+0xdc>)
 8009140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009144:	08009179 	.word	0x08009179
 8009148:	08009191 	.word	0x08009191
 800914c:	08009191 	.word	0x08009191
 8009150:	08009191 	.word	0x08009191
 8009154:	08009185 	.word	0x08009185
 8009158:	08009191 	.word	0x08009191
 800915c:	08009191 	.word	0x08009191
 8009160:	08009191 	.word	0x08009191
 8009164:	0800917f 	.word	0x0800917f
 8009168:	08009191 	.word	0x08009191
 800916c:	08009191 	.word	0x08009191
 8009170:	08009191 	.word	0x08009191
 8009174:	0800918b 	.word	0x0800918b
 8009178:	2300      	movs	r3, #0
 800917a:	77fb      	strb	r3, [r7, #31]
 800917c:	e118      	b.n	80093b0 <UART_SetConfig+0x348>
 800917e:	2302      	movs	r3, #2
 8009180:	77fb      	strb	r3, [r7, #31]
 8009182:	e115      	b.n	80093b0 <UART_SetConfig+0x348>
 8009184:	2304      	movs	r3, #4
 8009186:	77fb      	strb	r3, [r7, #31]
 8009188:	e112      	b.n	80093b0 <UART_SetConfig+0x348>
 800918a:	2308      	movs	r3, #8
 800918c:	77fb      	strb	r3, [r7, #31]
 800918e:	e10f      	b.n	80093b0 <UART_SetConfig+0x348>
 8009190:	2310      	movs	r3, #16
 8009192:	77fb      	strb	r3, [r7, #31]
 8009194:	e10c      	b.n	80093b0 <UART_SetConfig+0x348>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	4a68      	ldr	r2, [pc, #416]	; (800933c <UART_SetConfig+0x2d4>)
 800919c:	4293      	cmp	r3, r2
 800919e:	d120      	bne.n	80091e2 <UART_SetConfig+0x17a>
 80091a0:	4b64      	ldr	r3, [pc, #400]	; (8009334 <UART_SetConfig+0x2cc>)
 80091a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80091aa:	2b30      	cmp	r3, #48	; 0x30
 80091ac:	d013      	beq.n	80091d6 <UART_SetConfig+0x16e>
 80091ae:	2b30      	cmp	r3, #48	; 0x30
 80091b0:	d814      	bhi.n	80091dc <UART_SetConfig+0x174>
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d009      	beq.n	80091ca <UART_SetConfig+0x162>
 80091b6:	2b20      	cmp	r3, #32
 80091b8:	d810      	bhi.n	80091dc <UART_SetConfig+0x174>
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d002      	beq.n	80091c4 <UART_SetConfig+0x15c>
 80091be:	2b10      	cmp	r3, #16
 80091c0:	d006      	beq.n	80091d0 <UART_SetConfig+0x168>
 80091c2:	e00b      	b.n	80091dc <UART_SetConfig+0x174>
 80091c4:	2300      	movs	r3, #0
 80091c6:	77fb      	strb	r3, [r7, #31]
 80091c8:	e0f2      	b.n	80093b0 <UART_SetConfig+0x348>
 80091ca:	2302      	movs	r3, #2
 80091cc:	77fb      	strb	r3, [r7, #31]
 80091ce:	e0ef      	b.n	80093b0 <UART_SetConfig+0x348>
 80091d0:	2304      	movs	r3, #4
 80091d2:	77fb      	strb	r3, [r7, #31]
 80091d4:	e0ec      	b.n	80093b0 <UART_SetConfig+0x348>
 80091d6:	2308      	movs	r3, #8
 80091d8:	77fb      	strb	r3, [r7, #31]
 80091da:	e0e9      	b.n	80093b0 <UART_SetConfig+0x348>
 80091dc:	2310      	movs	r3, #16
 80091de:	77fb      	strb	r3, [r7, #31]
 80091e0:	e0e6      	b.n	80093b0 <UART_SetConfig+0x348>
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	4a56      	ldr	r2, [pc, #344]	; (8009340 <UART_SetConfig+0x2d8>)
 80091e8:	4293      	cmp	r3, r2
 80091ea:	d120      	bne.n	800922e <UART_SetConfig+0x1c6>
 80091ec:	4b51      	ldr	r3, [pc, #324]	; (8009334 <UART_SetConfig+0x2cc>)
 80091ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80091f6:	2bc0      	cmp	r3, #192	; 0xc0
 80091f8:	d013      	beq.n	8009222 <UART_SetConfig+0x1ba>
 80091fa:	2bc0      	cmp	r3, #192	; 0xc0
 80091fc:	d814      	bhi.n	8009228 <UART_SetConfig+0x1c0>
 80091fe:	2b80      	cmp	r3, #128	; 0x80
 8009200:	d009      	beq.n	8009216 <UART_SetConfig+0x1ae>
 8009202:	2b80      	cmp	r3, #128	; 0x80
 8009204:	d810      	bhi.n	8009228 <UART_SetConfig+0x1c0>
 8009206:	2b00      	cmp	r3, #0
 8009208:	d002      	beq.n	8009210 <UART_SetConfig+0x1a8>
 800920a:	2b40      	cmp	r3, #64	; 0x40
 800920c:	d006      	beq.n	800921c <UART_SetConfig+0x1b4>
 800920e:	e00b      	b.n	8009228 <UART_SetConfig+0x1c0>
 8009210:	2300      	movs	r3, #0
 8009212:	77fb      	strb	r3, [r7, #31]
 8009214:	e0cc      	b.n	80093b0 <UART_SetConfig+0x348>
 8009216:	2302      	movs	r3, #2
 8009218:	77fb      	strb	r3, [r7, #31]
 800921a:	e0c9      	b.n	80093b0 <UART_SetConfig+0x348>
 800921c:	2304      	movs	r3, #4
 800921e:	77fb      	strb	r3, [r7, #31]
 8009220:	e0c6      	b.n	80093b0 <UART_SetConfig+0x348>
 8009222:	2308      	movs	r3, #8
 8009224:	77fb      	strb	r3, [r7, #31]
 8009226:	e0c3      	b.n	80093b0 <UART_SetConfig+0x348>
 8009228:	2310      	movs	r3, #16
 800922a:	77fb      	strb	r3, [r7, #31]
 800922c:	e0c0      	b.n	80093b0 <UART_SetConfig+0x348>
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a44      	ldr	r2, [pc, #272]	; (8009344 <UART_SetConfig+0x2dc>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d125      	bne.n	8009284 <UART_SetConfig+0x21c>
 8009238:	4b3e      	ldr	r3, [pc, #248]	; (8009334 <UART_SetConfig+0x2cc>)
 800923a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800923e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009242:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009246:	d017      	beq.n	8009278 <UART_SetConfig+0x210>
 8009248:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800924c:	d817      	bhi.n	800927e <UART_SetConfig+0x216>
 800924e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009252:	d00b      	beq.n	800926c <UART_SetConfig+0x204>
 8009254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009258:	d811      	bhi.n	800927e <UART_SetConfig+0x216>
 800925a:	2b00      	cmp	r3, #0
 800925c:	d003      	beq.n	8009266 <UART_SetConfig+0x1fe>
 800925e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009262:	d006      	beq.n	8009272 <UART_SetConfig+0x20a>
 8009264:	e00b      	b.n	800927e <UART_SetConfig+0x216>
 8009266:	2300      	movs	r3, #0
 8009268:	77fb      	strb	r3, [r7, #31]
 800926a:	e0a1      	b.n	80093b0 <UART_SetConfig+0x348>
 800926c:	2302      	movs	r3, #2
 800926e:	77fb      	strb	r3, [r7, #31]
 8009270:	e09e      	b.n	80093b0 <UART_SetConfig+0x348>
 8009272:	2304      	movs	r3, #4
 8009274:	77fb      	strb	r3, [r7, #31]
 8009276:	e09b      	b.n	80093b0 <UART_SetConfig+0x348>
 8009278:	2308      	movs	r3, #8
 800927a:	77fb      	strb	r3, [r7, #31]
 800927c:	e098      	b.n	80093b0 <UART_SetConfig+0x348>
 800927e:	2310      	movs	r3, #16
 8009280:	77fb      	strb	r3, [r7, #31]
 8009282:	e095      	b.n	80093b0 <UART_SetConfig+0x348>
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	4a2f      	ldr	r2, [pc, #188]	; (8009348 <UART_SetConfig+0x2e0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d125      	bne.n	80092da <UART_SetConfig+0x272>
 800928e:	4b29      	ldr	r3, [pc, #164]	; (8009334 <UART_SetConfig+0x2cc>)
 8009290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009294:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009298:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800929c:	d017      	beq.n	80092ce <UART_SetConfig+0x266>
 800929e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80092a2:	d817      	bhi.n	80092d4 <UART_SetConfig+0x26c>
 80092a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092a8:	d00b      	beq.n	80092c2 <UART_SetConfig+0x25a>
 80092aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80092ae:	d811      	bhi.n	80092d4 <UART_SetConfig+0x26c>
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	d003      	beq.n	80092bc <UART_SetConfig+0x254>
 80092b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80092b8:	d006      	beq.n	80092c8 <UART_SetConfig+0x260>
 80092ba:	e00b      	b.n	80092d4 <UART_SetConfig+0x26c>
 80092bc:	2301      	movs	r3, #1
 80092be:	77fb      	strb	r3, [r7, #31]
 80092c0:	e076      	b.n	80093b0 <UART_SetConfig+0x348>
 80092c2:	2302      	movs	r3, #2
 80092c4:	77fb      	strb	r3, [r7, #31]
 80092c6:	e073      	b.n	80093b0 <UART_SetConfig+0x348>
 80092c8:	2304      	movs	r3, #4
 80092ca:	77fb      	strb	r3, [r7, #31]
 80092cc:	e070      	b.n	80093b0 <UART_SetConfig+0x348>
 80092ce:	2308      	movs	r3, #8
 80092d0:	77fb      	strb	r3, [r7, #31]
 80092d2:	e06d      	b.n	80093b0 <UART_SetConfig+0x348>
 80092d4:	2310      	movs	r3, #16
 80092d6:	77fb      	strb	r3, [r7, #31]
 80092d8:	e06a      	b.n	80093b0 <UART_SetConfig+0x348>
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	4a1b      	ldr	r2, [pc, #108]	; (800934c <UART_SetConfig+0x2e4>)
 80092e0:	4293      	cmp	r3, r2
 80092e2:	d138      	bne.n	8009356 <UART_SetConfig+0x2ee>
 80092e4:	4b13      	ldr	r3, [pc, #76]	; (8009334 <UART_SetConfig+0x2cc>)
 80092e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ea:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80092ee:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092f2:	d017      	beq.n	8009324 <UART_SetConfig+0x2bc>
 80092f4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80092f8:	d82a      	bhi.n	8009350 <UART_SetConfig+0x2e8>
 80092fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092fe:	d00b      	beq.n	8009318 <UART_SetConfig+0x2b0>
 8009300:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009304:	d824      	bhi.n	8009350 <UART_SetConfig+0x2e8>
 8009306:	2b00      	cmp	r3, #0
 8009308:	d003      	beq.n	8009312 <UART_SetConfig+0x2aa>
 800930a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800930e:	d006      	beq.n	800931e <UART_SetConfig+0x2b6>
 8009310:	e01e      	b.n	8009350 <UART_SetConfig+0x2e8>
 8009312:	2300      	movs	r3, #0
 8009314:	77fb      	strb	r3, [r7, #31]
 8009316:	e04b      	b.n	80093b0 <UART_SetConfig+0x348>
 8009318:	2302      	movs	r3, #2
 800931a:	77fb      	strb	r3, [r7, #31]
 800931c:	e048      	b.n	80093b0 <UART_SetConfig+0x348>
 800931e:	2304      	movs	r3, #4
 8009320:	77fb      	strb	r3, [r7, #31]
 8009322:	e045      	b.n	80093b0 <UART_SetConfig+0x348>
 8009324:	2308      	movs	r3, #8
 8009326:	77fb      	strb	r3, [r7, #31]
 8009328:	e042      	b.n	80093b0 <UART_SetConfig+0x348>
 800932a:	bf00      	nop
 800932c:	efff69f3 	.word	0xefff69f3
 8009330:	40011000 	.word	0x40011000
 8009334:	40023800 	.word	0x40023800
 8009338:	40004400 	.word	0x40004400
 800933c:	40004800 	.word	0x40004800
 8009340:	40004c00 	.word	0x40004c00
 8009344:	40005000 	.word	0x40005000
 8009348:	40011400 	.word	0x40011400
 800934c:	40007800 	.word	0x40007800
 8009350:	2310      	movs	r3, #16
 8009352:	77fb      	strb	r3, [r7, #31]
 8009354:	e02c      	b.n	80093b0 <UART_SetConfig+0x348>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a72      	ldr	r2, [pc, #456]	; (8009524 <UART_SetConfig+0x4bc>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d125      	bne.n	80093ac <UART_SetConfig+0x344>
 8009360:	4b71      	ldr	r3, [pc, #452]	; (8009528 <UART_SetConfig+0x4c0>)
 8009362:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009366:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800936a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800936e:	d017      	beq.n	80093a0 <UART_SetConfig+0x338>
 8009370:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009374:	d817      	bhi.n	80093a6 <UART_SetConfig+0x33e>
 8009376:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800937a:	d00b      	beq.n	8009394 <UART_SetConfig+0x32c>
 800937c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009380:	d811      	bhi.n	80093a6 <UART_SetConfig+0x33e>
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <UART_SetConfig+0x326>
 8009386:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800938a:	d006      	beq.n	800939a <UART_SetConfig+0x332>
 800938c:	e00b      	b.n	80093a6 <UART_SetConfig+0x33e>
 800938e:	2300      	movs	r3, #0
 8009390:	77fb      	strb	r3, [r7, #31]
 8009392:	e00d      	b.n	80093b0 <UART_SetConfig+0x348>
 8009394:	2302      	movs	r3, #2
 8009396:	77fb      	strb	r3, [r7, #31]
 8009398:	e00a      	b.n	80093b0 <UART_SetConfig+0x348>
 800939a:	2304      	movs	r3, #4
 800939c:	77fb      	strb	r3, [r7, #31]
 800939e:	e007      	b.n	80093b0 <UART_SetConfig+0x348>
 80093a0:	2308      	movs	r3, #8
 80093a2:	77fb      	strb	r3, [r7, #31]
 80093a4:	e004      	b.n	80093b0 <UART_SetConfig+0x348>
 80093a6:	2310      	movs	r3, #16
 80093a8:	77fb      	strb	r3, [r7, #31]
 80093aa:	e001      	b.n	80093b0 <UART_SetConfig+0x348>
 80093ac:	2310      	movs	r3, #16
 80093ae:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	69db      	ldr	r3, [r3, #28]
 80093b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093b8:	d15b      	bne.n	8009472 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80093ba:	7ffb      	ldrb	r3, [r7, #31]
 80093bc:	2b08      	cmp	r3, #8
 80093be:	d828      	bhi.n	8009412 <UART_SetConfig+0x3aa>
 80093c0:	a201      	add	r2, pc, #4	; (adr r2, 80093c8 <UART_SetConfig+0x360>)
 80093c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093c6:	bf00      	nop
 80093c8:	080093ed 	.word	0x080093ed
 80093cc:	080093f5 	.word	0x080093f5
 80093d0:	080093fd 	.word	0x080093fd
 80093d4:	08009413 	.word	0x08009413
 80093d8:	08009403 	.word	0x08009403
 80093dc:	08009413 	.word	0x08009413
 80093e0:	08009413 	.word	0x08009413
 80093e4:	08009413 	.word	0x08009413
 80093e8:	0800940b 	.word	0x0800940b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80093ec:	f7fd fb7a 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 80093f0:	61b8      	str	r0, [r7, #24]
        break;
 80093f2:	e013      	b.n	800941c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80093f4:	f7fd fb8a 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 80093f8:	61b8      	str	r0, [r7, #24]
        break;
 80093fa:	e00f      	b.n	800941c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80093fc:	4b4b      	ldr	r3, [pc, #300]	; (800952c <UART_SetConfig+0x4c4>)
 80093fe:	61bb      	str	r3, [r7, #24]
        break;
 8009400:	e00c      	b.n	800941c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009402:	f7fd fa5f 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 8009406:	61b8      	str	r0, [r7, #24]
        break;
 8009408:	e008      	b.n	800941c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800940a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800940e:	61bb      	str	r3, [r7, #24]
        break;
 8009410:	e004      	b.n	800941c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8009412:	2300      	movs	r3, #0
 8009414:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009416:	2301      	movs	r3, #1
 8009418:	77bb      	strb	r3, [r7, #30]
        break;
 800941a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800941c:	69bb      	ldr	r3, [r7, #24]
 800941e:	2b00      	cmp	r3, #0
 8009420:	d074      	beq.n	800950c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009422:	69bb      	ldr	r3, [r7, #24]
 8009424:	005a      	lsls	r2, r3, #1
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	685b      	ldr	r3, [r3, #4]
 800942a:	085b      	lsrs	r3, r3, #1
 800942c:	441a      	add	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	685b      	ldr	r3, [r3, #4]
 8009432:	fbb2 f3f3 	udiv	r3, r2, r3
 8009436:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	2b0f      	cmp	r3, #15
 800943c:	d916      	bls.n	800946c <UART_SetConfig+0x404>
 800943e:	693b      	ldr	r3, [r7, #16]
 8009440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009444:	d212      	bcs.n	800946c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	b29b      	uxth	r3, r3
 800944a:	f023 030f 	bic.w	r3, r3, #15
 800944e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009450:	693b      	ldr	r3, [r7, #16]
 8009452:	085b      	lsrs	r3, r3, #1
 8009454:	b29b      	uxth	r3, r3
 8009456:	f003 0307 	and.w	r3, r3, #7
 800945a:	b29a      	uxth	r2, r3
 800945c:	89fb      	ldrh	r3, [r7, #14]
 800945e:	4313      	orrs	r3, r2
 8009460:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	89fa      	ldrh	r2, [r7, #14]
 8009468:	60da      	str	r2, [r3, #12]
 800946a:	e04f      	b.n	800950c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800946c:	2301      	movs	r3, #1
 800946e:	77bb      	strb	r3, [r7, #30]
 8009470:	e04c      	b.n	800950c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009472:	7ffb      	ldrb	r3, [r7, #31]
 8009474:	2b08      	cmp	r3, #8
 8009476:	d828      	bhi.n	80094ca <UART_SetConfig+0x462>
 8009478:	a201      	add	r2, pc, #4	; (adr r2, 8009480 <UART_SetConfig+0x418>)
 800947a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800947e:	bf00      	nop
 8009480:	080094a5 	.word	0x080094a5
 8009484:	080094ad 	.word	0x080094ad
 8009488:	080094b5 	.word	0x080094b5
 800948c:	080094cb 	.word	0x080094cb
 8009490:	080094bb 	.word	0x080094bb
 8009494:	080094cb 	.word	0x080094cb
 8009498:	080094cb 	.word	0x080094cb
 800949c:	080094cb 	.word	0x080094cb
 80094a0:	080094c3 	.word	0x080094c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80094a4:	f7fd fb1e 	bl	8006ae4 <HAL_RCC_GetPCLK1Freq>
 80094a8:	61b8      	str	r0, [r7, #24]
        break;
 80094aa:	e013      	b.n	80094d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80094ac:	f7fd fb2e 	bl	8006b0c <HAL_RCC_GetPCLK2Freq>
 80094b0:	61b8      	str	r0, [r7, #24]
        break;
 80094b2:	e00f      	b.n	80094d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80094b4:	4b1d      	ldr	r3, [pc, #116]	; (800952c <UART_SetConfig+0x4c4>)
 80094b6:	61bb      	str	r3, [r7, #24]
        break;
 80094b8:	e00c      	b.n	80094d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80094ba:	f7fd fa03 	bl	80068c4 <HAL_RCC_GetSysClockFreq>
 80094be:	61b8      	str	r0, [r7, #24]
        break;
 80094c0:	e008      	b.n	80094d4 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80094c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094c6:	61bb      	str	r3, [r7, #24]
        break;
 80094c8:	e004      	b.n	80094d4 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80094ca:	2300      	movs	r3, #0
 80094cc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	77bb      	strb	r3, [r7, #30]
        break;
 80094d2:	bf00      	nop
    }

    if (pclk != 0U)
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d018      	beq.n	800950c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	085a      	lsrs	r2, r3, #1
 80094e0:	69bb      	ldr	r3, [r7, #24]
 80094e2:	441a      	add	r2, r3
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80094ec:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80094ee:	693b      	ldr	r3, [r7, #16]
 80094f0:	2b0f      	cmp	r3, #15
 80094f2:	d909      	bls.n	8009508 <UART_SetConfig+0x4a0>
 80094f4:	693b      	ldr	r3, [r7, #16]
 80094f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80094fa:	d205      	bcs.n	8009508 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80094fc:	693b      	ldr	r3, [r7, #16]
 80094fe:	b29a      	uxth	r2, r3
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	60da      	str	r2, [r3, #12]
 8009506:	e001      	b.n	800950c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	2200      	movs	r2, #0
 8009510:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2200      	movs	r2, #0
 8009516:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009518:	7fbb      	ldrb	r3, [r7, #30]
}
 800951a:	4618      	mov	r0, r3
 800951c:	3720      	adds	r7, #32
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}
 8009522:	bf00      	nop
 8009524:	40007c00 	.word	0x40007c00
 8009528:	40023800 	.word	0x40023800
 800952c:	00f42400 	.word	0x00f42400

08009530 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800953c:	f003 0301 	and.w	r3, r3, #1
 8009540:	2b00      	cmp	r3, #0
 8009542:	d00a      	beq.n	800955a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	430a      	orrs	r2, r1
 8009558:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800955e:	f003 0302 	and.w	r3, r3, #2
 8009562:	2b00      	cmp	r3, #0
 8009564:	d00a      	beq.n	800957c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	685b      	ldr	r3, [r3, #4]
 800956c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009580:	f003 0304 	and.w	r3, r3, #4
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00a      	beq.n	800959e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	685b      	ldr	r3, [r3, #4]
 800958e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	430a      	orrs	r2, r1
 800959c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a2:	f003 0308 	and.w	r3, r3, #8
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d00a      	beq.n	80095c0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	685b      	ldr	r3, [r3, #4]
 80095b0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095c4:	f003 0310 	and.w	r3, r3, #16
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d00a      	beq.n	80095e2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	430a      	orrs	r2, r1
 80095e0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095e6:	f003 0320 	and.w	r3, r3, #32
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d00a      	beq.n	8009604 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	689b      	ldr	r3, [r3, #8]
 80095f4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	430a      	orrs	r2, r1
 8009602:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800960c:	2b00      	cmp	r3, #0
 800960e:	d01a      	beq.n	8009646 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	685b      	ldr	r3, [r3, #4]
 8009616:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	430a      	orrs	r2, r1
 8009624:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800962a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800962e:	d10a      	bne.n	8009646 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	685b      	ldr	r3, [r3, #4]
 8009636:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	430a      	orrs	r2, r1
 8009644:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800964a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800964e:	2b00      	cmp	r3, #0
 8009650:	d00a      	beq.n	8009668 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	685b      	ldr	r3, [r3, #4]
 8009658:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	430a      	orrs	r2, r1
 8009666:	605a      	str	r2, [r3, #4]
  }
}
 8009668:	bf00      	nop
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009672:	4770      	bx	lr

08009674 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009674:	b580      	push	{r7, lr}
 8009676:	b086      	sub	sp, #24
 8009678:	af02      	add	r7, sp, #8
 800967a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2200      	movs	r2, #0
 8009680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009684:	f7f8 fc84 	bl	8001f90 <HAL_GetTick>
 8009688:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0308 	and.w	r3, r3, #8
 8009694:	2b08      	cmp	r3, #8
 8009696:	d10e      	bne.n	80096b6 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009698:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800969c:	9300      	str	r3, [sp, #0]
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2200      	movs	r2, #0
 80096a2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80096a6:	6878      	ldr	r0, [r7, #4]
 80096a8:	f000 f81b 	bl	80096e2 <UART_WaitOnFlagUntilTimeout>
 80096ac:	4603      	mov	r3, r0
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d001      	beq.n	80096b6 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80096b2:	2303      	movs	r3, #3
 80096b4:	e011      	b.n	80096da <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	2220      	movs	r2, #32
 80096ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2220      	movs	r2, #32
 80096c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80096d8:	2300      	movs	r3, #0
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}

080096e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80096e2:	b580      	push	{r7, lr}
 80096e4:	b09c      	sub	sp, #112	; 0x70
 80096e6:	af00      	add	r7, sp, #0
 80096e8:	60f8      	str	r0, [r7, #12]
 80096ea:	60b9      	str	r1, [r7, #8]
 80096ec:	603b      	str	r3, [r7, #0]
 80096ee:	4613      	mov	r3, r2
 80096f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80096f2:	e0a7      	b.n	8009844 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80096f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80096f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80096fa:	f000 80a3 	beq.w	8009844 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80096fe:	f7f8 fc47 	bl	8001f90 <HAL_GetTick>
 8009702:	4602      	mov	r2, r0
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	1ad3      	subs	r3, r2, r3
 8009708:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800970a:	429a      	cmp	r2, r3
 800970c:	d302      	bcc.n	8009714 <UART_WaitOnFlagUntilTimeout+0x32>
 800970e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009710:	2b00      	cmp	r3, #0
 8009712:	d13f      	bne.n	8009794 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800971a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800971c:	e853 3f00 	ldrex	r3, [r3]
 8009720:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009724:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009728:	667b      	str	r3, [r7, #100]	; 0x64
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	461a      	mov	r2, r3
 8009730:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009732:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009734:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009736:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009738:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800973a:	e841 2300 	strex	r3, r2, [r1]
 800973e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009740:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009742:	2b00      	cmp	r3, #0
 8009744:	d1e6      	bne.n	8009714 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	3308      	adds	r3, #8
 800974c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800974e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009750:	e853 3f00 	ldrex	r3, [r3]
 8009754:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009758:	f023 0301 	bic.w	r3, r3, #1
 800975c:	663b      	str	r3, [r7, #96]	; 0x60
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	3308      	adds	r3, #8
 8009764:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009766:	64ba      	str	r2, [r7, #72]	; 0x48
 8009768:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800976a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800976c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800976e:	e841 2300 	strex	r3, r2, [r1]
 8009772:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009774:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009776:	2b00      	cmp	r3, #0
 8009778:	d1e5      	bne.n	8009746 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2220      	movs	r2, #32
 800977e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2220      	movs	r2, #32
 8009784:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009788:	68fb      	ldr	r3, [r7, #12]
 800978a:	2200      	movs	r2, #0
 800978c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009790:	2303      	movs	r3, #3
 8009792:	e068      	b.n	8009866 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f003 0304 	and.w	r3, r3, #4
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d050      	beq.n	8009844 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	69db      	ldr	r3, [r3, #28]
 80097a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80097ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097b0:	d148      	bne.n	8009844 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80097ba:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80097c4:	e853 3f00 	ldrex	r3, [r3]
 80097c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097cc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80097d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80097d2:	68fb      	ldr	r3, [r7, #12]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	461a      	mov	r2, r3
 80097d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80097da:	637b      	str	r3, [r7, #52]	; 0x34
 80097dc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80097e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80097e2:	e841 2300 	strex	r3, r2, [r1]
 80097e6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80097e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80097ea:	2b00      	cmp	r3, #0
 80097ec:	d1e6      	bne.n	80097bc <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	3308      	adds	r3, #8
 80097f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f6:	697b      	ldr	r3, [r7, #20]
 80097f8:	e853 3f00 	ldrex	r3, [r3]
 80097fc:	613b      	str	r3, [r7, #16]
   return(result);
 80097fe:	693b      	ldr	r3, [r7, #16]
 8009800:	f023 0301 	bic.w	r3, r3, #1
 8009804:	66bb      	str	r3, [r7, #104]	; 0x68
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	3308      	adds	r3, #8
 800980c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800980e:	623a      	str	r2, [r7, #32]
 8009810:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009812:	69f9      	ldr	r1, [r7, #28]
 8009814:	6a3a      	ldr	r2, [r7, #32]
 8009816:	e841 2300 	strex	r3, r2, [r1]
 800981a:	61bb      	str	r3, [r7, #24]
   return(result);
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d1e5      	bne.n	80097ee <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2220      	movs	r2, #32
 8009826:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2220      	movs	r2, #32
 800982c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	2220      	movs	r2, #32
 8009834:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	2200      	movs	r2, #0
 800983c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009840:	2303      	movs	r3, #3
 8009842:	e010      	b.n	8009866 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	681b      	ldr	r3, [r3, #0]
 8009848:	69da      	ldr	r2, [r3, #28]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	4013      	ands	r3, r2
 800984e:	68ba      	ldr	r2, [r7, #8]
 8009850:	429a      	cmp	r2, r3
 8009852:	bf0c      	ite	eq
 8009854:	2301      	moveq	r3, #1
 8009856:	2300      	movne	r3, #0
 8009858:	b2db      	uxtb	r3, r3
 800985a:	461a      	mov	r2, r3
 800985c:	79fb      	ldrb	r3, [r7, #7]
 800985e:	429a      	cmp	r2, r3
 8009860:	f43f af48 	beq.w	80096f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009864:	2300      	movs	r3, #0
}
 8009866:	4618      	mov	r0, r3
 8009868:	3770      	adds	r7, #112	; 0x70
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}
	...

08009870 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009870:	b480      	push	{r7}
 8009872:	b087      	sub	sp, #28
 8009874:	af00      	add	r7, sp, #0
 8009876:	6078      	str	r0, [r7, #4]
 8009878:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	681a      	ldr	r2, [r3, #0]
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009884:	683a      	ldr	r2, [r7, #0]
 8009886:	6812      	ldr	r2, [r2, #0]
 8009888:	f023 0101 	bic.w	r1, r3, #1
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	689b      	ldr	r3, [r3, #8]
 8009896:	2b08      	cmp	r3, #8
 8009898:	d102      	bne.n	80098a0 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800989a:	2340      	movs	r3, #64	; 0x40
 800989c:	617b      	str	r3, [r7, #20]
 800989e:	e001      	b.n	80098a4 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80098a0:	2300      	movs	r3, #0
 80098a2:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80098a8:	697b      	ldr	r3, [r7, #20]
 80098aa:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80098b0:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80098b2:	683b      	ldr	r3, [r7, #0]
 80098b4:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80098b6:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80098b8:	683b      	ldr	r3, [r7, #0]
 80098ba:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80098bc:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80098be:	683b      	ldr	r3, [r7, #0]
 80098c0:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80098c2:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80098c8:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80098ce:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 80098d4:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 80098da:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80098dc:	683b      	ldr	r3, [r7, #0]
 80098de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 80098e0:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 80098e6:	4313      	orrs	r3, r2
 80098e8:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ee:	693a      	ldr	r2, [r7, #16]
 80098f0:	4313      	orrs	r3, r2
 80098f2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	4313      	orrs	r3, r2
 80098fc:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009902:	693a      	ldr	r2, [r7, #16]
 8009904:	4313      	orrs	r3, r2
 8009906:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8009908:	4b20      	ldr	r3, [pc, #128]	; (800998c <FMC_NORSRAM_Init+0x11c>)
 800990a:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009912:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800991a:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009922:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009924:	683b      	ldr	r3, [r7, #0]
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	43db      	mvns	r3, r3
 8009932:	ea02 0103 	and.w	r1, r2, r3
 8009936:	683b      	ldr	r3, [r7, #0]
 8009938:	681a      	ldr	r2, [r3, #0]
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	4319      	orrs	r1, r3
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800994c:	d10c      	bne.n	8009968 <FMC_NORSRAM_Init+0xf8>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d008      	beq.n	8009968 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009962:	431a      	orrs	r2, r3
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009968:	683b      	ldr	r3, [r7, #0]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	2b00      	cmp	r3, #0
 800996e:	d006      	beq.n	800997e <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681a      	ldr	r2, [r3, #0]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009978:	431a      	orrs	r2, r3
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800997e:	2300      	movs	r3, #0
}
 8009980:	4618      	mov	r0, r3
 8009982:	371c      	adds	r7, #28
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	0008fb7f 	.word	0x0008fb7f

08009990 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009990:	b480      	push	{r7}
 8009992:	b087      	sub	sp, #28
 8009994:	af00      	add	r7, sp, #0
 8009996:	60f8      	str	r0, [r7, #12]
 8009998:	60b9      	str	r1, [r7, #8]
 800999a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	1c5a      	adds	r2, r3, #1
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a6:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 80099aa:	68bb      	ldr	r3, [r7, #8]
 80099ac:	681a      	ldr	r2, [r3, #0]
 80099ae:	68bb      	ldr	r3, [r7, #8]
 80099b0:	685b      	ldr	r3, [r3, #4]
 80099b2:	011b      	lsls	r3, r3, #4
 80099b4:	431a      	orrs	r2, r3
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	689b      	ldr	r3, [r3, #8]
 80099ba:	021b      	lsls	r3, r3, #8
 80099bc:	431a      	orrs	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	041b      	lsls	r3, r3, #16
 80099c4:	431a      	orrs	r2, r3
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	3b01      	subs	r3, #1
 80099cc:	051b      	lsls	r3, r3, #20
 80099ce:	431a      	orrs	r2, r3
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	695b      	ldr	r3, [r3, #20]
 80099d4:	3b02      	subs	r3, #2
 80099d6:	061b      	lsls	r3, r3, #24
 80099d8:	431a      	orrs	r2, r3
 80099da:	68bb      	ldr	r3, [r7, #8]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	4313      	orrs	r3, r2
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	3201      	adds	r2, #1
 80099e4:	4319      	orrs	r1, r3
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80099f8:	d113      	bne.n	8009a22 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009a02:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	691b      	ldr	r3, [r3, #16]
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	051b      	lsls	r3, r3, #20
 8009a0c:	697a      	ldr	r2, [r7, #20]
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	685b      	ldr	r3, [r3, #4]
 8009a16:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009a1a:	697b      	ldr	r3, [r7, #20]
 8009a1c:	431a      	orrs	r2, r3
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009a22:	2300      	movs	r3, #0
}
 8009a24:	4618      	mov	r0, r3
 8009a26:	371c      	adds	r7, #28
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b085      	sub	sp, #20
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009a44:	d11d      	bne.n	8009a82 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	687a      	ldr	r2, [r7, #4]
 8009a4a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a4e:	4b13      	ldr	r3, [pc, #76]	; (8009a9c <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009a50:	4013      	ands	r3, r2
 8009a52:	68ba      	ldr	r2, [r7, #8]
 8009a54:	6811      	ldr	r1, [r2, #0]
 8009a56:	68ba      	ldr	r2, [r7, #8]
 8009a58:	6852      	ldr	r2, [r2, #4]
 8009a5a:	0112      	lsls	r2, r2, #4
 8009a5c:	4311      	orrs	r1, r2
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	6892      	ldr	r2, [r2, #8]
 8009a62:	0212      	lsls	r2, r2, #8
 8009a64:	4311      	orrs	r1, r2
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	6992      	ldr	r2, [r2, #24]
 8009a6a:	4311      	orrs	r1, r2
 8009a6c:	68ba      	ldr	r2, [r7, #8]
 8009a6e:	68d2      	ldr	r2, [r2, #12]
 8009a70:	0412      	lsls	r2, r2, #16
 8009a72:	430a      	orrs	r2, r1
 8009a74:	ea43 0102 	orr.w	r1, r3, r2
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009a80:	e005      	b.n	8009a8e <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	687a      	ldr	r2, [r7, #4]
 8009a86:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009a8e:	2300      	movs	r3, #0
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3714      	adds	r7, #20
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	cff00000 	.word	0xcff00000

08009aa0 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009aa0:	b084      	sub	sp, #16
 8009aa2:	b480      	push	{r7}
 8009aa4:	b085      	sub	sp, #20
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	6078      	str	r0, [r7, #4]
 8009aaa:	f107 001c 	add.w	r0, r7, #28
 8009aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009ab2:	2300      	movs	r3, #0
 8009ab4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009ab6:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009ab8:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009aba:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009abe:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009ac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009ac2:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009ac6:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009ac8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009aca:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009acc:	68fa      	ldr	r2, [r7, #12]
 8009ace:	4313      	orrs	r3, r2
 8009ad0:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	685a      	ldr	r2, [r3, #4]
 8009ad6:	4b07      	ldr	r3, [pc, #28]	; (8009af4 <SDMMC_Init+0x54>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	68fa      	ldr	r2, [r7, #12]
 8009adc:	431a      	orrs	r2, r3
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009ae2:	2300      	movs	r3, #0
}
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	3714      	adds	r7, #20
 8009ae8:	46bd      	mov	sp, r7
 8009aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aee:	b004      	add	sp, #16
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	ffff8100 	.word	0xffff8100

08009af8 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009af8:	b480      	push	{r7}
 8009afa:	b083      	sub	sp, #12
 8009afc:	af00      	add	r7, sp, #0
 8009afe:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	370c      	adds	r7, #12
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr

08009b12 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009b12:	b480      	push	{r7}
 8009b14:	b083      	sub	sp, #12
 8009b16:	af00      	add	r7, sp, #0
 8009b18:	6078      	str	r0, [r7, #4]
 8009b1a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009b1c:	683b      	ldr	r3, [r7, #0]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009b26:	2300      	movs	r3, #0
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009b34:	b480      	push	{r7}
 8009b36:	b083      	sub	sp, #12
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2203      	movs	r2, #3
 8009b40:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009b42:	2300      	movs	r3, #0
}
 8009b44:	4618      	mov	r0, r3
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f003 0303 	and.w	r3, r3, #3
}
 8009b60:	4618      	mov	r0, r3
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b085      	sub	sp, #20
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
 8009b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009b76:	2300      	movs	r3, #0
 8009b78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009b7a:	683b      	ldr	r3, [r7, #0]
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b82:	683b      	ldr	r3, [r7, #0]
 8009b84:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009b86:	683b      	ldr	r3, [r7, #0]
 8009b88:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b8a:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009b90:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009b96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	4313      	orrs	r3, r2
 8009b9c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	4b06      	ldr	r3, [pc, #24]	; (8009bbc <SDMMC_SendCommand+0x50>)
 8009ba4:	4013      	ands	r3, r2
 8009ba6:	68fa      	ldr	r2, [r7, #12]
 8009ba8:	431a      	orrs	r2, r3
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009bae:	2300      	movs	r3, #0
}
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3714      	adds	r7, #20
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bba:	4770      	bx	lr
 8009bbc:	fffff000 	.word	0xfffff000

08009bc0 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009bc0:	b480      	push	{r7}
 8009bc2:	b083      	sub	sp, #12
 8009bc4:	af00      	add	r7, sp, #0
 8009bc6:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	691b      	ldr	r3, [r3, #16]
 8009bcc:	b2db      	uxtb	r3, r3
}
 8009bce:	4618      	mov	r0, r3
 8009bd0:	370c      	adds	r7, #12
 8009bd2:	46bd      	mov	sp, r7
 8009bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd8:	4770      	bx	lr

08009bda <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009bda:	b480      	push	{r7}
 8009bdc:	b085      	sub	sp, #20
 8009bde:	af00      	add	r7, sp, #0
 8009be0:	6078      	str	r0, [r7, #4]
 8009be2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	3314      	adds	r3, #20
 8009be8:	461a      	mov	r2, r3
 8009bea:	683b      	ldr	r3, [r7, #0]
 8009bec:	4413      	add	r3, r2
 8009bee:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
}  
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	3714      	adds	r7, #20
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b085      	sub	sp, #20
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009c0e:	683b      	ldr	r3, [r7, #0]
 8009c10:	681a      	ldr	r2, [r3, #0]
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	685a      	ldr	r2, [r3, #4]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009c22:	683b      	ldr	r3, [r7, #0]
 8009c24:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c26:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009c28:	683b      	ldr	r3, [r7, #0]
 8009c2a:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009c2c:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009c32:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009c34:	68fa      	ldr	r2, [r7, #12]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3e:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	431a      	orrs	r2, r3
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009c4a:	2300      	movs	r3, #0

}
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	3714      	adds	r7, #20
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009c58:	b580      	push	{r7, lr}
 8009c5a:	b088      	sub	sp, #32
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
 8009c60:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009c66:	2310      	movs	r3, #16
 8009c68:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009c6a:	2340      	movs	r3, #64	; 0x40
 8009c6c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009c6e:	2300      	movs	r3, #0
 8009c70:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009c72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009c76:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009c78:	f107 0308 	add.w	r3, r7, #8
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f7ff ff74 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009c84:	f241 3288 	movw	r2, #5000	; 0x1388
 8009c88:	2110      	movs	r1, #16
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f9d6 	bl	800a03c <SDMMC_GetCmdResp1>
 8009c90:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009c92:	69fb      	ldr	r3, [r7, #28]
}
 8009c94:	4618      	mov	r0, r3
 8009c96:	3720      	adds	r7, #32
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b088      	sub	sp, #32
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009caa:	2311      	movs	r3, #17
 8009cac:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cae:	2340      	movs	r3, #64	; 0x40
 8009cb0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cb2:	2300      	movs	r3, #0
 8009cb4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cba:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009cbc:	f107 0308 	add.w	r3, r7, #8
 8009cc0:	4619      	mov	r1, r3
 8009cc2:	6878      	ldr	r0, [r7, #4]
 8009cc4:	f7ff ff52 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ccc:	2111      	movs	r1, #17
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f9b4 	bl	800a03c <SDMMC_GetCmdResp1>
 8009cd4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009cd6:	69fb      	ldr	r3, [r7, #28]
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3720      	adds	r7, #32
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b088      	sub	sp, #32
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009cee:	2312      	movs	r3, #18
 8009cf0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009cf2:	2340      	movs	r3, #64	; 0x40
 8009cf4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009cfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009cfe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d00:	f107 0308 	add.w	r3, r7, #8
 8009d04:	4619      	mov	r1, r3
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f7ff ff30 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d10:	2112      	movs	r1, #18
 8009d12:	6878      	ldr	r0, [r7, #4]
 8009d14:	f000 f992 	bl	800a03c <SDMMC_GetCmdResp1>
 8009d18:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d1a:	69fb      	ldr	r3, [r7, #28]
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3720      	adds	r7, #32
 8009d20:	46bd      	mov	sp, r7
 8009d22:	bd80      	pop	{r7, pc}

08009d24 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b088      	sub	sp, #32
 8009d28:	af00      	add	r7, sp, #0
 8009d2a:	6078      	str	r0, [r7, #4]
 8009d2c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d2e:	683b      	ldr	r3, [r7, #0]
 8009d30:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009d32:	2318      	movs	r3, #24
 8009d34:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d36:	2340      	movs	r3, #64	; 0x40
 8009d38:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d3e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d42:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d44:	f107 0308 	add.w	r3, r7, #8
 8009d48:	4619      	mov	r1, r3
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f7ff ff0e 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009d50:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d54:	2118      	movs	r1, #24
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f970 	bl	800a03c <SDMMC_GetCmdResp1>
 8009d5c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009d5e:	69fb      	ldr	r3, [r7, #28]
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3720      	adds	r7, #32
 8009d64:	46bd      	mov	sp, r7
 8009d66:	bd80      	pop	{r7, pc}

08009d68 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b088      	sub	sp, #32
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009d72:	683b      	ldr	r3, [r7, #0]
 8009d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009d76:	2319      	movs	r3, #25
 8009d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d7a:	2340      	movs	r3, #64	; 0x40
 8009d7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009d86:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009d88:	f107 0308 	add.w	r3, r7, #8
 8009d8c:	4619      	mov	r1, r3
 8009d8e:	6878      	ldr	r0, [r7, #4]
 8009d90:	f7ff feec 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009d94:	f241 3288 	movw	r2, #5000	; 0x1388
 8009d98:	2119      	movs	r1, #25
 8009d9a:	6878      	ldr	r0, [r7, #4]
 8009d9c:	f000 f94e 	bl	800a03c <SDMMC_GetCmdResp1>
 8009da0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009da2:	69fb      	ldr	r3, [r7, #28]
}
 8009da4:	4618      	mov	r0, r3
 8009da6:	3720      	adds	r7, #32
 8009da8:	46bd      	mov	sp, r7
 8009daa:	bd80      	pop	{r7, pc}

08009dac <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009dac:	b580      	push	{r7, lr}
 8009dae:	b088      	sub	sp, #32
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009db8:	230c      	movs	r3, #12
 8009dba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dbc:	2340      	movs	r3, #64	; 0x40
 8009dbe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dc0:	2300      	movs	r3, #0
 8009dc2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009dc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009dc8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009dca:	f107 0308 	add.w	r3, r7, #8
 8009dce:	4619      	mov	r1, r3
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f7ff fecb 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009dd6:	4a05      	ldr	r2, [pc, #20]	; (8009dec <SDMMC_CmdStopTransfer+0x40>)
 8009dd8:	210c      	movs	r1, #12
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f000 f92e 	bl	800a03c <SDMMC_GetCmdResp1>
 8009de0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009de2:	69fb      	ldr	r3, [r7, #28]
}
 8009de4:	4618      	mov	r0, r3
 8009de6:	3720      	adds	r7, #32
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	05f5e100 	.word	0x05f5e100

08009df0 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009df0:	b580      	push	{r7, lr}
 8009df2:	b08a      	sub	sp, #40	; 0x28
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	60f8      	str	r0, [r7, #12]
 8009df8:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009dfc:	683b      	ldr	r3, [r7, #0]
 8009dfe:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009e00:	2307      	movs	r3, #7
 8009e02:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e04:	2340      	movs	r3, #64	; 0x40
 8009e06:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e08:	2300      	movs	r3, #0
 8009e0a:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e10:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e12:	f107 0310 	add.w	r3, r7, #16
 8009e16:	4619      	mov	r1, r3
 8009e18:	68f8      	ldr	r0, [r7, #12]
 8009e1a:	f7ff fea7 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009e1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e22:	2107      	movs	r1, #7
 8009e24:	68f8      	ldr	r0, [r7, #12]
 8009e26:	f000 f909 	bl	800a03c <SDMMC_GetCmdResp1>
 8009e2a:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e2e:	4618      	mov	r0, r3
 8009e30:	3728      	adds	r7, #40	; 0x28
 8009e32:	46bd      	mov	sp, r7
 8009e34:	bd80      	pop	{r7, pc}

08009e36 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009e36:	b580      	push	{r7, lr}
 8009e38:	b088      	sub	sp, #32
 8009e3a:	af00      	add	r7, sp, #0
 8009e3c:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009e42:	2300      	movs	r3, #0
 8009e44:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009e46:	2300      	movs	r3, #0
 8009e48:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e52:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e54:	f107 0308 	add.w	r3, r7, #8
 8009e58:	4619      	mov	r1, r3
 8009e5a:	6878      	ldr	r0, [r7, #4]
 8009e5c:	f7ff fe86 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009e60:	6878      	ldr	r0, [r7, #4]
 8009e62:	f000 fb23 	bl	800a4ac <SDMMC_GetCmdError>
 8009e66:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e68:	69fb      	ldr	r3, [r7, #28]
}
 8009e6a:	4618      	mov	r0, r3
 8009e6c:	3720      	adds	r7, #32
 8009e6e:	46bd      	mov	sp, r7
 8009e70:	bd80      	pop	{r7, pc}

08009e72 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009e72:	b580      	push	{r7, lr}
 8009e74:	b088      	sub	sp, #32
 8009e76:	af00      	add	r7, sp, #0
 8009e78:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009e7a:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009e7e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009e80:	2308      	movs	r3, #8
 8009e82:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e84:	2340      	movs	r3, #64	; 0x40
 8009e86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e88:	2300      	movs	r3, #0
 8009e8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e92:	f107 0308 	add.w	r3, r7, #8
 8009e96:	4619      	mov	r1, r3
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f7ff fe67 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009e9e:	6878      	ldr	r0, [r7, #4]
 8009ea0:	f000 fab6 	bl	800a410 <SDMMC_GetCmdResp7>
 8009ea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ea6:	69fb      	ldr	r3, [r7, #28]
}
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	3720      	adds	r7, #32
 8009eac:	46bd      	mov	sp, r7
 8009eae:	bd80      	pop	{r7, pc}

08009eb0 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009eb0:	b580      	push	{r7, lr}
 8009eb2:	b088      	sub	sp, #32
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
 8009eb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009eba:	683b      	ldr	r3, [r7, #0]
 8009ebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009ebe:	2337      	movs	r3, #55	; 0x37
 8009ec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ec2:	2340      	movs	r3, #64	; 0x40
 8009ec4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ece:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ed0:	f107 0308 	add.w	r3, r7, #8
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	6878      	ldr	r0, [r7, #4]
 8009ed8:	f7ff fe48 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8009edc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ee0:	2137      	movs	r1, #55	; 0x37
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f000 f8aa 	bl	800a03c <SDMMC_GetCmdResp1>
 8009ee8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009eea:	69fb      	ldr	r3, [r7, #28]
}
 8009eec:	4618      	mov	r0, r3
 8009eee:	3720      	adds	r7, #32
 8009ef0:	46bd      	mov	sp, r7
 8009ef2:	bd80      	pop	{r7, pc}

08009ef4 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b088      	sub	sp, #32
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
 8009efc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8009efe:	683a      	ldr	r2, [r7, #0]
 8009f00:	4b0d      	ldr	r3, [pc, #52]	; (8009f38 <SDMMC_CmdAppOperCommand+0x44>)
 8009f02:	4313      	orrs	r3, r2
 8009f04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8009f06:	2329      	movs	r3, #41	; 0x29
 8009f08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f0a:	2340      	movs	r3, #64	; 0x40
 8009f0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f18:	f107 0308 	add.w	r3, r7, #8
 8009f1c:	4619      	mov	r1, r3
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f7ff fe24 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f000 f9bf 	bl	800a2a8 <SDMMC_GetCmdResp3>
 8009f2a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f2c:	69fb      	ldr	r3, [r7, #28]
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	3720      	adds	r7, #32
 8009f32:	46bd      	mov	sp, r7
 8009f34:	bd80      	pop	{r7, pc}
 8009f36:	bf00      	nop
 8009f38:	80100000 	.word	0x80100000

08009f3c <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b088      	sub	sp, #32
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8009f44:	2300      	movs	r3, #0
 8009f46:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8009f48:	2302      	movs	r3, #2
 8009f4a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009f4c:	23c0      	movs	r3, #192	; 0xc0
 8009f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f50:	2300      	movs	r3, #0
 8009f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f5a:	f107 0308 	add.w	r3, r7, #8
 8009f5e:	4619      	mov	r1, r3
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f7ff fe03 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009f66:	6878      	ldr	r0, [r7, #4]
 8009f68:	f000 f956 	bl	800a218 <SDMMC_GetCmdResp2>
 8009f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f6e:	69fb      	ldr	r3, [r7, #28]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3720      	adds	r7, #32
 8009f74:	46bd      	mov	sp, r7
 8009f76:	bd80      	pop	{r7, pc}

08009f78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b088      	sub	sp, #32
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8009f82:	683b      	ldr	r3, [r7, #0]
 8009f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8009f86:	2309      	movs	r3, #9
 8009f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8009f8a:	23c0      	movs	r3, #192	; 0xc0
 8009f8c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f8e:	2300      	movs	r3, #0
 8009f90:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f96:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f98:	f107 0308 	add.w	r3, r7, #8
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	6878      	ldr	r0, [r7, #4]
 8009fa0:	f7ff fde4 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8009fa4:	6878      	ldr	r0, [r7, #4]
 8009fa6:	f000 f937 	bl	800a218 <SDMMC_GetCmdResp2>
 8009faa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fac:	69fb      	ldr	r3, [r7, #28]
}
 8009fae:	4618      	mov	r0, r3
 8009fb0:	3720      	adds	r7, #32
 8009fb2:	46bd      	mov	sp, r7
 8009fb4:	bd80      	pop	{r7, pc}

08009fb6 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8009fb6:	b580      	push	{r7, lr}
 8009fb8:	b088      	sub	sp, #32
 8009fba:	af00      	add	r7, sp, #0
 8009fbc:	6078      	str	r0, [r7, #4]
 8009fbe:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8009fc0:	2300      	movs	r3, #0
 8009fc2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8009fc4:	2303      	movs	r3, #3
 8009fc6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fc8:	2340      	movs	r3, #64	; 0x40
 8009fca:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fd0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fd4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fd6:	f107 0308 	add.w	r3, r7, #8
 8009fda:	4619      	mov	r1, r3
 8009fdc:	6878      	ldr	r0, [r7, #4]
 8009fde:	f7ff fdc5 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8009fe2:	683a      	ldr	r2, [r7, #0]
 8009fe4:	2103      	movs	r1, #3
 8009fe6:	6878      	ldr	r0, [r7, #4]
 8009fe8:	f000 f99c 	bl	800a324 <SDMMC_GetCmdResp6>
 8009fec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fee:	69fb      	ldr	r3, [r7, #28]
}
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	3720      	adds	r7, #32
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	bd80      	pop	{r7, pc}

08009ff8 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b088      	sub	sp, #32
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
 800a000:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a006:	230d      	movs	r3, #13
 800a008:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a00a:	2340      	movs	r3, #64	; 0x40
 800a00c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a00e:	2300      	movs	r3, #0
 800a010:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a016:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a018:	f107 0308 	add.w	r3, r7, #8
 800a01c:	4619      	mov	r1, r3
 800a01e:	6878      	ldr	r0, [r7, #4]
 800a020:	f7ff fda4 	bl	8009b6c <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a024:	f241 3288 	movw	r2, #5000	; 0x1388
 800a028:	210d      	movs	r1, #13
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f000 f806 	bl	800a03c <SDMMC_GetCmdResp1>
 800a030:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a032:	69fb      	ldr	r3, [r7, #28]
}
 800a034:	4618      	mov	r0, r3
 800a036:	3720      	adds	r7, #32
 800a038:	46bd      	mov	sp, r7
 800a03a:	bd80      	pop	{r7, pc}

0800a03c <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a03c:	b580      	push	{r7, lr}
 800a03e:	b088      	sub	sp, #32
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	460b      	mov	r3, r1
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a04a:	4b70      	ldr	r3, [pc, #448]	; (800a20c <SDMMC_GetCmdResp1+0x1d0>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	4a70      	ldr	r2, [pc, #448]	; (800a210 <SDMMC_GetCmdResp1+0x1d4>)
 800a050:	fba2 2303 	umull	r2, r3, r2, r3
 800a054:	0a5a      	lsrs	r2, r3, #9
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	fb02 f303 	mul.w	r3, r2, r3
 800a05c:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a05e:	69fb      	ldr	r3, [r7, #28]
 800a060:	1e5a      	subs	r2, r3, #1
 800a062:	61fa      	str	r2, [r7, #28]
 800a064:	2b00      	cmp	r3, #0
 800a066:	d102      	bne.n	800a06e <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a068:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a06c:	e0c9      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a072:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a074:	69bb      	ldr	r3, [r7, #24]
 800a076:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d0ef      	beq.n	800a05e <SDMMC_GetCmdResp1+0x22>
 800a07e:	69bb      	ldr	r3, [r7, #24]
 800a080:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a084:	2b00      	cmp	r3, #0
 800a086:	d1ea      	bne.n	800a05e <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a08c:	f003 0304 	and.w	r3, r3, #4
 800a090:	2b00      	cmp	r3, #0
 800a092:	d004      	beq.n	800a09e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2204      	movs	r2, #4
 800a098:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a09a:	2304      	movs	r3, #4
 800a09c:	e0b1      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d004      	beq.n	800a0b4 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2201      	movs	r2, #1
 800a0ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0b0:	2301      	movs	r3, #1
 800a0b2:	e0a6      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	22c5      	movs	r2, #197	; 0xc5
 800a0b8:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f7ff fd80 	bl	8009bc0 <SDMMC_GetCommandResponse>
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	461a      	mov	r2, r3
 800a0c4:	7afb      	ldrb	r3, [r7, #11]
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d001      	beq.n	800a0ce <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a0ca:	2301      	movs	r3, #1
 800a0cc:	e099      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a0ce:	2100      	movs	r1, #0
 800a0d0:	68f8      	ldr	r0, [r7, #12]
 800a0d2:	f7ff fd82 	bl	8009bda <SDMMC_GetResponse>
 800a0d6:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	4b4e      	ldr	r3, [pc, #312]	; (800a214 <SDMMC_GetCmdResp1+0x1d8>)
 800a0dc:	4013      	ands	r3, r2
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d101      	bne.n	800a0e6 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a0e2:	2300      	movs	r3, #0
 800a0e4:	e08d      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a0e6:	697b      	ldr	r3, [r7, #20]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	da02      	bge.n	800a0f2 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a0ec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a0f0:	e087      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a0f2:	697b      	ldr	r3, [r7, #20]
 800a0f4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d001      	beq.n	800a100 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a0fc:	2340      	movs	r3, #64	; 0x40
 800a0fe:	e080      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a106:	2b00      	cmp	r3, #0
 800a108:	d001      	beq.n	800a10e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a10a:	2380      	movs	r3, #128	; 0x80
 800a10c:	e079      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a10e:	697b      	ldr	r3, [r7, #20]
 800a110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a114:	2b00      	cmp	r3, #0
 800a116:	d002      	beq.n	800a11e <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a118:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a11c:	e071      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a11e:	697b      	ldr	r3, [r7, #20]
 800a120:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a124:	2b00      	cmp	r3, #0
 800a126:	d002      	beq.n	800a12e <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a128:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a12c:	e069      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a12e:	697b      	ldr	r3, [r7, #20]
 800a130:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a134:	2b00      	cmp	r3, #0
 800a136:	d002      	beq.n	800a13e <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a138:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13c:	e061      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a144:	2b00      	cmp	r3, #0
 800a146:	d002      	beq.n	800a14e <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a14c:	e059      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a14e:	697b      	ldr	r3, [r7, #20]
 800a150:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a154:	2b00      	cmp	r3, #0
 800a156:	d002      	beq.n	800a15e <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a158:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a15c:	e051      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a15e:	697b      	ldr	r3, [r7, #20]
 800a160:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a164:	2b00      	cmp	r3, #0
 800a166:	d002      	beq.n	800a16e <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a168:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a16c:	e049      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a174:	2b00      	cmp	r3, #0
 800a176:	d002      	beq.n	800a17e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a178:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a17c:	e041      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a17e:	697b      	ldr	r3, [r7, #20]
 800a180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a184:	2b00      	cmp	r3, #0
 800a186:	d002      	beq.n	800a18e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a188:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a18c:	e039      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a18e:	697b      	ldr	r3, [r7, #20]
 800a190:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a194:	2b00      	cmp	r3, #0
 800a196:	d002      	beq.n	800a19e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a198:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a19c:	e031      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a19e:	697b      	ldr	r3, [r7, #20]
 800a1a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d002      	beq.n	800a1ae <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a1a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a1ac:	e029      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d002      	beq.n	800a1be <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a1b8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a1bc:	e021      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a1be:	697b      	ldr	r3, [r7, #20]
 800a1c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d002      	beq.n	800a1ce <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a1c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a1cc:	e019      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d002      	beq.n	800a1de <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a1d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a1dc:	e011      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d002      	beq.n	800a1ee <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a1e8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a1ec:	e009      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a1ee:	697b      	ldr	r3, [r7, #20]
 800a1f0:	f003 0308 	and.w	r3, r3, #8
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d002      	beq.n	800a1fe <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a1f8:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a1fc:	e001      	b.n	800a202 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a1fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a202:	4618      	mov	r0, r3
 800a204:	3720      	adds	r7, #32
 800a206:	46bd      	mov	sp, r7
 800a208:	bd80      	pop	{r7, pc}
 800a20a:	bf00      	nop
 800a20c:	20000000 	.word	0x20000000
 800a210:	10624dd3 	.word	0x10624dd3
 800a214:	fdffe008 	.word	0xfdffe008

0800a218 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a218:	b480      	push	{r7}
 800a21a:	b085      	sub	sp, #20
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a220:	4b1f      	ldr	r3, [pc, #124]	; (800a2a0 <SDMMC_GetCmdResp2+0x88>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a1f      	ldr	r2, [pc, #124]	; (800a2a4 <SDMMC_GetCmdResp2+0x8c>)
 800a226:	fba2 2303 	umull	r2, r3, r2, r3
 800a22a:	0a5b      	lsrs	r3, r3, #9
 800a22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a230:	fb02 f303 	mul.w	r3, r2, r3
 800a234:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	1e5a      	subs	r2, r3, #1
 800a23a:	60fa      	str	r2, [r7, #12]
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d102      	bne.n	800a246 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a240:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a244:	e026      	b.n	800a294 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a24a:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a252:	2b00      	cmp	r3, #0
 800a254:	d0ef      	beq.n	800a236 <SDMMC_GetCmdResp2+0x1e>
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d1ea      	bne.n	800a236 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a264:	f003 0304 	and.w	r3, r3, #4
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d004      	beq.n	800a276 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	2204      	movs	r2, #4
 800a270:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a272:	2304      	movs	r3, #4
 800a274:	e00e      	b.n	800a294 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a27a:	f003 0301 	and.w	r3, r3, #1
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d004      	beq.n	800a28c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a288:	2301      	movs	r3, #1
 800a28a:	e003      	b.n	800a294 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	22c5      	movs	r2, #197	; 0xc5
 800a290:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a292:	2300      	movs	r3, #0
}
 800a294:	4618      	mov	r0, r3
 800a296:	3714      	adds	r7, #20
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr
 800a2a0:	20000000 	.word	0x20000000
 800a2a4:	10624dd3 	.word	0x10624dd3

0800a2a8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a2b0:	4b1a      	ldr	r3, [pc, #104]	; (800a31c <SDMMC_GetCmdResp3+0x74>)
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	4a1a      	ldr	r2, [pc, #104]	; (800a320 <SDMMC_GetCmdResp3+0x78>)
 800a2b6:	fba2 2303 	umull	r2, r3, r2, r3
 800a2ba:	0a5b      	lsrs	r3, r3, #9
 800a2bc:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2c0:	fb02 f303 	mul.w	r3, r2, r3
 800a2c4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	1e5a      	subs	r2, r3, #1
 800a2ca:	60fa      	str	r2, [r7, #12]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d102      	bne.n	800a2d6 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a2d0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a2d4:	e01b      	b.n	800a30e <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2da:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2dc:	68bb      	ldr	r3, [r7, #8]
 800a2de:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d0ef      	beq.n	800a2c6 <SDMMC_GetCmdResp3+0x1e>
 800a2e6:	68bb      	ldr	r3, [r7, #8]
 800a2e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d1ea      	bne.n	800a2c6 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a2f4:	f003 0304 	and.w	r3, r3, #4
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d004      	beq.n	800a306 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2204      	movs	r2, #4
 800a300:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a302:	2304      	movs	r3, #4
 800a304:	e003      	b.n	800a30e <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	22c5      	movs	r2, #197	; 0xc5
 800a30a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a30c:	2300      	movs	r3, #0
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr
 800a31a:	bf00      	nop
 800a31c:	20000000 	.word	0x20000000
 800a320:	10624dd3 	.word	0x10624dd3

0800a324 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b088      	sub	sp, #32
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	460b      	mov	r3, r1
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a332:	4b35      	ldr	r3, [pc, #212]	; (800a408 <SDMMC_GetCmdResp6+0xe4>)
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	4a35      	ldr	r2, [pc, #212]	; (800a40c <SDMMC_GetCmdResp6+0xe8>)
 800a338:	fba2 2303 	umull	r2, r3, r2, r3
 800a33c:	0a5b      	lsrs	r3, r3, #9
 800a33e:	f241 3288 	movw	r2, #5000	; 0x1388
 800a342:	fb02 f303 	mul.w	r3, r2, r3
 800a346:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a348:	69fb      	ldr	r3, [r7, #28]
 800a34a:	1e5a      	subs	r2, r3, #1
 800a34c:	61fa      	str	r2, [r7, #28]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d102      	bne.n	800a358 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a352:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a356:	e052      	b.n	800a3fe <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a35c:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a35e:	69bb      	ldr	r3, [r7, #24]
 800a360:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a364:	2b00      	cmp	r3, #0
 800a366:	d0ef      	beq.n	800a348 <SDMMC_GetCmdResp6+0x24>
 800a368:	69bb      	ldr	r3, [r7, #24]
 800a36a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a36e:	2b00      	cmp	r3, #0
 800a370:	d1ea      	bne.n	800a348 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d004      	beq.n	800a388 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	2204      	movs	r2, #4
 800a382:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a384:	2304      	movs	r3, #4
 800a386:	e03a      	b.n	800a3fe <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a38c:	f003 0301 	and.w	r3, r3, #1
 800a390:	2b00      	cmp	r3, #0
 800a392:	d004      	beq.n	800a39e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2201      	movs	r2, #1
 800a398:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a39a:	2301      	movs	r3, #1
 800a39c:	e02f      	b.n	800a3fe <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a39e:	68f8      	ldr	r0, [r7, #12]
 800a3a0:	f7ff fc0e 	bl	8009bc0 <SDMMC_GetCommandResponse>
 800a3a4:	4603      	mov	r3, r0
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	7afb      	ldrb	r3, [r7, #11]
 800a3aa:	4293      	cmp	r3, r2
 800a3ac:	d001      	beq.n	800a3b2 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3ae:	2301      	movs	r3, #1
 800a3b0:	e025      	b.n	800a3fe <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	22c5      	movs	r2, #197	; 0xc5
 800a3b6:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a3b8:	2100      	movs	r1, #0
 800a3ba:	68f8      	ldr	r0, [r7, #12]
 800a3bc:	f7ff fc0d 	bl	8009bda <SDMMC_GetResponse>
 800a3c0:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d106      	bne.n	800a3da <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	0c1b      	lsrs	r3, r3, #16
 800a3d0:	b29a      	uxth	r2, r3
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e011      	b.n	800a3fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a3da:	697b      	ldr	r3, [r7, #20]
 800a3dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d002      	beq.n	800a3ea <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a3e4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a3e8:	e009      	b.n	800a3fe <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a3ea:	697b      	ldr	r3, [r7, #20]
 800a3ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	d002      	beq.n	800a3fa <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a3f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a3f8:	e001      	b.n	800a3fe <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a3fa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a3fe:	4618      	mov	r0, r3
 800a400:	3720      	adds	r7, #32
 800a402:	46bd      	mov	sp, r7
 800a404:	bd80      	pop	{r7, pc}
 800a406:	bf00      	nop
 800a408:	20000000 	.word	0x20000000
 800a40c:	10624dd3 	.word	0x10624dd3

0800a410 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a418:	4b22      	ldr	r3, [pc, #136]	; (800a4a4 <SDMMC_GetCmdResp7+0x94>)
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	4a22      	ldr	r2, [pc, #136]	; (800a4a8 <SDMMC_GetCmdResp7+0x98>)
 800a41e:	fba2 2303 	umull	r2, r3, r2, r3
 800a422:	0a5b      	lsrs	r3, r3, #9
 800a424:	f241 3288 	movw	r2, #5000	; 0x1388
 800a428:	fb02 f303 	mul.w	r3, r2, r3
 800a42c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	1e5a      	subs	r2, r3, #1
 800a432:	60fa      	str	r2, [r7, #12]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d102      	bne.n	800a43e <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a438:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a43c:	e02c      	b.n	800a498 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a442:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d0ef      	beq.n	800a42e <SDMMC_GetCmdResp7+0x1e>
 800a44e:	68bb      	ldr	r3, [r7, #8]
 800a450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a454:	2b00      	cmp	r3, #0
 800a456:	d1ea      	bne.n	800a42e <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a45c:	f003 0304 	and.w	r3, r3, #4
 800a460:	2b00      	cmp	r3, #0
 800a462:	d004      	beq.n	800a46e <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2204      	movs	r2, #4
 800a468:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a46a:	2304      	movs	r3, #4
 800a46c:	e014      	b.n	800a498 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a472:	f003 0301 	and.w	r3, r3, #1
 800a476:	2b00      	cmp	r3, #0
 800a478:	d004      	beq.n	800a484 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2201      	movs	r2, #1
 800a47e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a480:	2301      	movs	r3, #1
 800a482:	e009      	b.n	800a498 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d002      	beq.n	800a496 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	2240      	movs	r2, #64	; 0x40
 800a494:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a496:	2300      	movs	r3, #0
  
}
 800a498:	4618      	mov	r0, r3
 800a49a:	3714      	adds	r7, #20
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	20000000 	.word	0x20000000
 800a4a8:	10624dd3 	.word	0x10624dd3

0800a4ac <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a4b4:	4b11      	ldr	r3, [pc, #68]	; (800a4fc <SDMMC_GetCmdError+0x50>)
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	4a11      	ldr	r2, [pc, #68]	; (800a500 <SDMMC_GetCmdError+0x54>)
 800a4ba:	fba2 2303 	umull	r2, r3, r2, r3
 800a4be:	0a5b      	lsrs	r3, r3, #9
 800a4c0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4c4:	fb02 f303 	mul.w	r3, r2, r3
 800a4c8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	1e5a      	subs	r2, r3, #1
 800a4ce:	60fa      	str	r2, [r7, #12]
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d102      	bne.n	800a4da <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a4d4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a4d8:	e009      	b.n	800a4ee <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d0f1      	beq.n	800a4ca <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	22c5      	movs	r2, #197	; 0xc5
 800a4ea:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a4ec:	2300      	movs	r3, #0
}
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	3714      	adds	r7, #20
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
 800a4fa:	bf00      	nop
 800a4fc:	20000000 	.word	0x20000000
 800a500:	10624dd3 	.word	0x10624dd3

0800a504 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a504:	b084      	sub	sp, #16
 800a506:	b580      	push	{r7, lr}
 800a508:	b084      	sub	sp, #16
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
 800a50e:	f107 001c 	add.w	r0, r7, #28
 800a512:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d120      	bne.n	800a55e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a520:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	68da      	ldr	r2, [r3, #12]
 800a52c:	4b20      	ldr	r3, [pc, #128]	; (800a5b0 <USB_CoreInit+0xac>)
 800a52e:	4013      	ands	r3, r2
 800a530:	687a      	ldr	r2, [r7, #4]
 800a532:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	68db      	ldr	r3, [r3, #12]
 800a538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a542:	2b01      	cmp	r3, #1
 800a544:	d105      	bne.n	800a552 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a552:	6878      	ldr	r0, [r7, #4]
 800a554:	f001 fc0e 	bl	800bd74 <USB_CoreReset>
 800a558:	4603      	mov	r3, r0
 800a55a:	73fb      	strb	r3, [r7, #15]
 800a55c:	e010      	b.n	800a580 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	68db      	ldr	r3, [r3, #12]
 800a562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a56a:	6878      	ldr	r0, [r7, #4]
 800a56c:	f001 fc02 	bl	800bd74 <USB_CoreReset>
 800a570:	4603      	mov	r3, r0
 800a572:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a578:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a582:	2b01      	cmp	r3, #1
 800a584:	d10b      	bne.n	800a59e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	689b      	ldr	r3, [r3, #8]
 800a58a:	f043 0206 	orr.w	r2, r3, #6
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	689b      	ldr	r3, [r3, #8]
 800a596:	f043 0220 	orr.w	r2, r3, #32
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a59e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3710      	adds	r7, #16
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a5aa:	b004      	add	sp, #16
 800a5ac:	4770      	bx	lr
 800a5ae:	bf00      	nop
 800a5b0:	ffbdffbf 	.word	0xffbdffbf

0800a5b4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a5b4:	b480      	push	{r7}
 800a5b6:	b087      	sub	sp, #28
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	4613      	mov	r3, r2
 800a5c0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a5c2:	79fb      	ldrb	r3, [r7, #7]
 800a5c4:	2b02      	cmp	r3, #2
 800a5c6:	d165      	bne.n	800a694 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a5c8:	68bb      	ldr	r3, [r7, #8]
 800a5ca:	4a41      	ldr	r2, [pc, #260]	; (800a6d0 <USB_SetTurnaroundTime+0x11c>)
 800a5cc:	4293      	cmp	r3, r2
 800a5ce:	d906      	bls.n	800a5de <USB_SetTurnaroundTime+0x2a>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	4a40      	ldr	r2, [pc, #256]	; (800a6d4 <USB_SetTurnaroundTime+0x120>)
 800a5d4:	4293      	cmp	r3, r2
 800a5d6:	d202      	bcs.n	800a5de <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a5d8:	230f      	movs	r3, #15
 800a5da:	617b      	str	r3, [r7, #20]
 800a5dc:	e062      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	4a3c      	ldr	r2, [pc, #240]	; (800a6d4 <USB_SetTurnaroundTime+0x120>)
 800a5e2:	4293      	cmp	r3, r2
 800a5e4:	d306      	bcc.n	800a5f4 <USB_SetTurnaroundTime+0x40>
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	4a3b      	ldr	r2, [pc, #236]	; (800a6d8 <USB_SetTurnaroundTime+0x124>)
 800a5ea:	4293      	cmp	r3, r2
 800a5ec:	d202      	bcs.n	800a5f4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a5ee:	230e      	movs	r3, #14
 800a5f0:	617b      	str	r3, [r7, #20]
 800a5f2:	e057      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a5f4:	68bb      	ldr	r3, [r7, #8]
 800a5f6:	4a38      	ldr	r2, [pc, #224]	; (800a6d8 <USB_SetTurnaroundTime+0x124>)
 800a5f8:	4293      	cmp	r3, r2
 800a5fa:	d306      	bcc.n	800a60a <USB_SetTurnaroundTime+0x56>
 800a5fc:	68bb      	ldr	r3, [r7, #8]
 800a5fe:	4a37      	ldr	r2, [pc, #220]	; (800a6dc <USB_SetTurnaroundTime+0x128>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d202      	bcs.n	800a60a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a604:	230d      	movs	r3, #13
 800a606:	617b      	str	r3, [r7, #20]
 800a608:	e04c      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a60a:	68bb      	ldr	r3, [r7, #8]
 800a60c:	4a33      	ldr	r2, [pc, #204]	; (800a6dc <USB_SetTurnaroundTime+0x128>)
 800a60e:	4293      	cmp	r3, r2
 800a610:	d306      	bcc.n	800a620 <USB_SetTurnaroundTime+0x6c>
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	4a32      	ldr	r2, [pc, #200]	; (800a6e0 <USB_SetTurnaroundTime+0x12c>)
 800a616:	4293      	cmp	r3, r2
 800a618:	d802      	bhi.n	800a620 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a61a:	230c      	movs	r3, #12
 800a61c:	617b      	str	r3, [r7, #20]
 800a61e:	e041      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a620:	68bb      	ldr	r3, [r7, #8]
 800a622:	4a2f      	ldr	r2, [pc, #188]	; (800a6e0 <USB_SetTurnaroundTime+0x12c>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d906      	bls.n	800a636 <USB_SetTurnaroundTime+0x82>
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	4a2e      	ldr	r2, [pc, #184]	; (800a6e4 <USB_SetTurnaroundTime+0x130>)
 800a62c:	4293      	cmp	r3, r2
 800a62e:	d802      	bhi.n	800a636 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a630:	230b      	movs	r3, #11
 800a632:	617b      	str	r3, [r7, #20]
 800a634:	e036      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a636:	68bb      	ldr	r3, [r7, #8]
 800a638:	4a2a      	ldr	r2, [pc, #168]	; (800a6e4 <USB_SetTurnaroundTime+0x130>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d906      	bls.n	800a64c <USB_SetTurnaroundTime+0x98>
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	4a29      	ldr	r2, [pc, #164]	; (800a6e8 <USB_SetTurnaroundTime+0x134>)
 800a642:	4293      	cmp	r3, r2
 800a644:	d802      	bhi.n	800a64c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a646:	230a      	movs	r3, #10
 800a648:	617b      	str	r3, [r7, #20]
 800a64a:	e02b      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a64c:	68bb      	ldr	r3, [r7, #8]
 800a64e:	4a26      	ldr	r2, [pc, #152]	; (800a6e8 <USB_SetTurnaroundTime+0x134>)
 800a650:	4293      	cmp	r3, r2
 800a652:	d906      	bls.n	800a662 <USB_SetTurnaroundTime+0xae>
 800a654:	68bb      	ldr	r3, [r7, #8]
 800a656:	4a25      	ldr	r2, [pc, #148]	; (800a6ec <USB_SetTurnaroundTime+0x138>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d202      	bcs.n	800a662 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a65c:	2309      	movs	r3, #9
 800a65e:	617b      	str	r3, [r7, #20]
 800a660:	e020      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a662:	68bb      	ldr	r3, [r7, #8]
 800a664:	4a21      	ldr	r2, [pc, #132]	; (800a6ec <USB_SetTurnaroundTime+0x138>)
 800a666:	4293      	cmp	r3, r2
 800a668:	d306      	bcc.n	800a678 <USB_SetTurnaroundTime+0xc4>
 800a66a:	68bb      	ldr	r3, [r7, #8]
 800a66c:	4a20      	ldr	r2, [pc, #128]	; (800a6f0 <USB_SetTurnaroundTime+0x13c>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d802      	bhi.n	800a678 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a672:	2308      	movs	r3, #8
 800a674:	617b      	str	r3, [r7, #20]
 800a676:	e015      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a678:	68bb      	ldr	r3, [r7, #8]
 800a67a:	4a1d      	ldr	r2, [pc, #116]	; (800a6f0 <USB_SetTurnaroundTime+0x13c>)
 800a67c:	4293      	cmp	r3, r2
 800a67e:	d906      	bls.n	800a68e <USB_SetTurnaroundTime+0xda>
 800a680:	68bb      	ldr	r3, [r7, #8]
 800a682:	4a1c      	ldr	r2, [pc, #112]	; (800a6f4 <USB_SetTurnaroundTime+0x140>)
 800a684:	4293      	cmp	r3, r2
 800a686:	d202      	bcs.n	800a68e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a688:	2307      	movs	r3, #7
 800a68a:	617b      	str	r3, [r7, #20]
 800a68c:	e00a      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a68e:	2306      	movs	r3, #6
 800a690:	617b      	str	r3, [r7, #20]
 800a692:	e007      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a694:	79fb      	ldrb	r3, [r7, #7]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d102      	bne.n	800a6a0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a69a:	2309      	movs	r3, #9
 800a69c:	617b      	str	r3, [r7, #20]
 800a69e:	e001      	b.n	800a6a4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a6a0:	2309      	movs	r3, #9
 800a6a2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	68db      	ldr	r3, [r3, #12]
 800a6a8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	68da      	ldr	r2, [r3, #12]
 800a6b4:	697b      	ldr	r3, [r7, #20]
 800a6b6:	029b      	lsls	r3, r3, #10
 800a6b8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a6bc:	431a      	orrs	r2, r3
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a6c2:	2300      	movs	r3, #0
}
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	371c      	adds	r7, #28
 800a6c8:	46bd      	mov	sp, r7
 800a6ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ce:	4770      	bx	lr
 800a6d0:	00d8acbf 	.word	0x00d8acbf
 800a6d4:	00e4e1c0 	.word	0x00e4e1c0
 800a6d8:	00f42400 	.word	0x00f42400
 800a6dc:	01067380 	.word	0x01067380
 800a6e0:	011a499f 	.word	0x011a499f
 800a6e4:	01312cff 	.word	0x01312cff
 800a6e8:	014ca43f 	.word	0x014ca43f
 800a6ec:	016e3600 	.word	0x016e3600
 800a6f0:	01a6ab1f 	.word	0x01a6ab1f
 800a6f4:	01e84800 	.word	0x01e84800

0800a6f8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a6f8:	b480      	push	{r7}
 800a6fa:	b083      	sub	sp, #12
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	689b      	ldr	r3, [r3, #8]
 800a704:	f043 0201 	orr.w	r2, r3, #1
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr

0800a71a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a71a:	b480      	push	{r7}
 800a71c:	b083      	sub	sp, #12
 800a71e:	af00      	add	r7, sp, #0
 800a720:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	689b      	ldr	r3, [r3, #8]
 800a726:	f023 0201 	bic.w	r2, r3, #1
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	370c      	adds	r7, #12
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b084      	sub	sp, #16
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	460b      	mov	r3, r1
 800a746:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a748:	2300      	movs	r3, #0
 800a74a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a758:	78fb      	ldrb	r3, [r7, #3]
 800a75a:	2b01      	cmp	r3, #1
 800a75c:	d115      	bne.n	800a78a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	68db      	ldr	r3, [r3, #12]
 800a762:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a76a:	2001      	movs	r0, #1
 800a76c:	f7f7 fc1c 	bl	8001fa8 <HAL_Delay>
      ms++;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	3301      	adds	r3, #1
 800a774:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a776:	6878      	ldr	r0, [r7, #4]
 800a778:	f001 fa6c 	bl	800bc54 <USB_GetMode>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b01      	cmp	r3, #1
 800a780:	d01e      	beq.n	800a7c0 <USB_SetCurrentMode+0x84>
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b31      	cmp	r3, #49	; 0x31
 800a786:	d9f0      	bls.n	800a76a <USB_SetCurrentMode+0x2e>
 800a788:	e01a      	b.n	800a7c0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a78a:	78fb      	ldrb	r3, [r7, #3]
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d115      	bne.n	800a7bc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a79c:	2001      	movs	r0, #1
 800a79e:	f7f7 fc03 	bl	8001fa8 <HAL_Delay>
      ms++;
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 fa53 	bl	800bc54 <USB_GetMode>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <USB_SetCurrentMode+0x84>
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	2b31      	cmp	r3, #49	; 0x31
 800a7b8:	d9f0      	bls.n	800a79c <USB_SetCurrentMode+0x60>
 800a7ba:	e001      	b.n	800a7c0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	e005      	b.n	800a7cc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	2b32      	cmp	r3, #50	; 0x32
 800a7c4:	d101      	bne.n	800a7ca <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e000      	b.n	800a7cc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a7ca:	2300      	movs	r3, #0
}
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	3710      	adds	r7, #16
 800a7d0:	46bd      	mov	sp, r7
 800a7d2:	bd80      	pop	{r7, pc}

0800a7d4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	b580      	push	{r7, lr}
 800a7d8:	b086      	sub	sp, #24
 800a7da:	af00      	add	r7, sp, #0
 800a7dc:	6078      	str	r0, [r7, #4]
 800a7de:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a7e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a7e6:	2300      	movs	r3, #0
 800a7e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	613b      	str	r3, [r7, #16]
 800a7f2:	e009      	b.n	800a808 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a7f4:	687a      	ldr	r2, [r7, #4]
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	3340      	adds	r3, #64	; 0x40
 800a7fa:	009b      	lsls	r3, r3, #2
 800a7fc:	4413      	add	r3, r2
 800a7fe:	2200      	movs	r2, #0
 800a800:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a802:	693b      	ldr	r3, [r7, #16]
 800a804:	3301      	adds	r3, #1
 800a806:	613b      	str	r3, [r7, #16]
 800a808:	693b      	ldr	r3, [r7, #16]
 800a80a:	2b0e      	cmp	r3, #14
 800a80c:	d9f2      	bls.n	800a7f4 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a80e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a810:	2b00      	cmp	r3, #0
 800a812:	d11c      	bne.n	800a84e <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a81a:	685b      	ldr	r3, [r3, #4]
 800a81c:	68fa      	ldr	r2, [r7, #12]
 800a81e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a822:	f043 0302 	orr.w	r3, r3, #2
 800a826:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a82c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	e005      	b.n	800a85a <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a852:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a860:	461a      	mov	r2, r3
 800a862:	2300      	movs	r3, #0
 800a864:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a86c:	4619      	mov	r1, r3
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a874:	461a      	mov	r2, r3
 800a876:	680b      	ldr	r3, [r1, #0]
 800a878:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a87a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a87c:	2b01      	cmp	r3, #1
 800a87e:	d10c      	bne.n	800a89a <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a882:	2b00      	cmp	r3, #0
 800a884:	d104      	bne.n	800a890 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a886:	2100      	movs	r1, #0
 800a888:	6878      	ldr	r0, [r7, #4]
 800a88a:	f000 f965 	bl	800ab58 <USB_SetDevSpeed>
 800a88e:	e008      	b.n	800a8a2 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a890:	2101      	movs	r1, #1
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f000 f960 	bl	800ab58 <USB_SetDevSpeed>
 800a898:	e003      	b.n	800a8a2 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a89a:	2103      	movs	r1, #3
 800a89c:	6878      	ldr	r0, [r7, #4]
 800a89e:	f000 f95b 	bl	800ab58 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a8a2:	2110      	movs	r1, #16
 800a8a4:	6878      	ldr	r0, [r7, #4]
 800a8a6:	f000 f8f3 	bl	800aa90 <USB_FlushTxFifo>
 800a8aa:	4603      	mov	r3, r0
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d001      	beq.n	800a8b4 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a8b0:	2301      	movs	r3, #1
 800a8b2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a8b4:	6878      	ldr	r0, [r7, #4]
 800a8b6:	f000 f91f 	bl	800aaf8 <USB_FlushRxFifo>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d001      	beq.n	800a8c4 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8d6:	461a      	mov	r2, r3
 800a8d8:	2300      	movs	r3, #0
 800a8da:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a8e2:	461a      	mov	r2, r3
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a8e8:	2300      	movs	r3, #0
 800a8ea:	613b      	str	r3, [r7, #16]
 800a8ec:	e043      	b.n	800a976 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	015a      	lsls	r2, r3, #5
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	4413      	add	r3, r2
 800a8f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a900:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a904:	d118      	bne.n	800a938 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	2b00      	cmp	r3, #0
 800a90a:	d10a      	bne.n	800a922 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	015a      	lsls	r2, r3, #5
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	4413      	add	r3, r2
 800a914:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a918:	461a      	mov	r2, r3
 800a91a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a91e:	6013      	str	r3, [r2, #0]
 800a920:	e013      	b.n	800a94a <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	015a      	lsls	r2, r3, #5
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	4413      	add	r3, r2
 800a92a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a92e:	461a      	mov	r2, r3
 800a930:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a934:	6013      	str	r3, [r2, #0]
 800a936:	e008      	b.n	800a94a <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	015a      	lsls	r2, r3, #5
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	4413      	add	r3, r2
 800a940:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a944:	461a      	mov	r2, r3
 800a946:	2300      	movs	r3, #0
 800a948:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	015a      	lsls	r2, r3, #5
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	4413      	add	r3, r2
 800a952:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a956:	461a      	mov	r2, r3
 800a958:	2300      	movs	r3, #0
 800a95a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	015a      	lsls	r2, r3, #5
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	4413      	add	r3, r2
 800a964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a968:	461a      	mov	r2, r3
 800a96a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800a96e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	3301      	adds	r3, #1
 800a974:	613b      	str	r3, [r7, #16]
 800a976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a978:	693a      	ldr	r2, [r7, #16]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	d3b7      	bcc.n	800a8ee <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800a97e:	2300      	movs	r3, #0
 800a980:	613b      	str	r3, [r7, #16]
 800a982:	e043      	b.n	800aa0c <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a984:	693b      	ldr	r3, [r7, #16]
 800a986:	015a      	lsls	r2, r3, #5
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	4413      	add	r3, r2
 800a98c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a996:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a99a:	d118      	bne.n	800a9ce <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800a99c:	693b      	ldr	r3, [r7, #16]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d10a      	bne.n	800a9b8 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	015a      	lsls	r2, r3, #5
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	4413      	add	r3, r2
 800a9aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ae:	461a      	mov	r2, r3
 800a9b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800a9b4:	6013      	str	r3, [r2, #0]
 800a9b6:	e013      	b.n	800a9e0 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	015a      	lsls	r2, r3, #5
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	4413      	add	r3, r2
 800a9c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9c4:	461a      	mov	r2, r3
 800a9c6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800a9ca:	6013      	str	r3, [r2, #0]
 800a9cc:	e008      	b.n	800a9e0 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800a9ce:	693b      	ldr	r3, [r7, #16]
 800a9d0:	015a      	lsls	r2, r3, #5
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	4413      	add	r3, r2
 800a9d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9da:	461a      	mov	r2, r3
 800a9dc:	2300      	movs	r3, #0
 800a9de:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	015a      	lsls	r2, r3, #5
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	4413      	add	r3, r2
 800a9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9ec:	461a      	mov	r2, r3
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800a9f2:	693b      	ldr	r3, [r7, #16]
 800a9f4:	015a      	lsls	r2, r3, #5
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a9fe:	461a      	mov	r2, r3
 800aa00:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa04:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa06:	693b      	ldr	r3, [r7, #16]
 800aa08:	3301      	adds	r3, #1
 800aa0a:	613b      	str	r3, [r7, #16]
 800aa0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa0e:	693a      	ldr	r2, [r7, #16]
 800aa10:	429a      	cmp	r2, r3
 800aa12:	d3b7      	bcc.n	800a984 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa1a:	691b      	ldr	r3, [r3, #16]
 800aa1c:	68fa      	ldr	r2, [r7, #12]
 800aa1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aa22:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aa26:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2200      	movs	r2, #0
 800aa2c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aa34:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aa36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d105      	bne.n	800aa48 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	699b      	ldr	r3, [r3, #24]
 800aa40:	f043 0210 	orr.w	r2, r3, #16
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	699a      	ldr	r2, [r3, #24]
 800aa4c:	4b0e      	ldr	r3, [pc, #56]	; (800aa88 <USB_DevInit+0x2b4>)
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	687a      	ldr	r2, [r7, #4]
 800aa52:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800aa54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d005      	beq.n	800aa66 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	699b      	ldr	r3, [r3, #24]
 800aa5e:	f043 0208 	orr.w	r2, r3, #8
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800aa66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa68:	2b01      	cmp	r3, #1
 800aa6a:	d105      	bne.n	800aa78 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	699a      	ldr	r2, [r3, #24]
 800aa70:	4b06      	ldr	r3, [pc, #24]	; (800aa8c <USB_DevInit+0x2b8>)
 800aa72:	4313      	orrs	r3, r2
 800aa74:	687a      	ldr	r2, [r7, #4]
 800aa76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aa78:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa7a:	4618      	mov	r0, r3
 800aa7c:	3718      	adds	r7, #24
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa84:	b004      	add	sp, #16
 800aa86:	4770      	bx	lr
 800aa88:	803c3800 	.word	0x803c3800
 800aa8c:	40000004 	.word	0x40000004

0800aa90 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800aa90:	b480      	push	{r7}
 800aa92:	b085      	sub	sp, #20
 800aa94:	af00      	add	r7, sp, #0
 800aa96:	6078      	str	r0, [r7, #4]
 800aa98:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800aa9a:	2300      	movs	r3, #0
 800aa9c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	3301      	adds	r3, #1
 800aaa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	4a13      	ldr	r2, [pc, #76]	; (800aaf4 <USB_FlushTxFifo+0x64>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d901      	bls.n	800aab0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800aaac:	2303      	movs	r3, #3
 800aaae:	e01b      	b.n	800aae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	daf2      	bge.n	800aa9e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800aab8:	2300      	movs	r3, #0
 800aaba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	019b      	lsls	r3, r3, #6
 800aac0:	f043 0220 	orr.w	r2, r3, #32
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	3301      	adds	r3, #1
 800aacc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	4a08      	ldr	r2, [pc, #32]	; (800aaf4 <USB_FlushTxFifo+0x64>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d901      	bls.n	800aada <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800aad6:	2303      	movs	r3, #3
 800aad8:	e006      	b.n	800aae8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	691b      	ldr	r3, [r3, #16]
 800aade:	f003 0320 	and.w	r3, r3, #32
 800aae2:	2b20      	cmp	r3, #32
 800aae4:	d0f0      	beq.n	800aac8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800aae6:	2300      	movs	r3, #0
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3714      	adds	r7, #20
 800aaec:	46bd      	mov	sp, r7
 800aaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaf2:	4770      	bx	lr
 800aaf4:	00030d40 	.word	0x00030d40

0800aaf8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800aaf8:	b480      	push	{r7}
 800aafa:	b085      	sub	sp, #20
 800aafc:	af00      	add	r7, sp, #0
 800aafe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ab00:	2300      	movs	r3, #0
 800ab02:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	3301      	adds	r3, #1
 800ab08:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	4a11      	ldr	r2, [pc, #68]	; (800ab54 <USB_FlushRxFifo+0x5c>)
 800ab0e:	4293      	cmp	r3, r2
 800ab10:	d901      	bls.n	800ab16 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ab12:	2303      	movs	r3, #3
 800ab14:	e018      	b.n	800ab48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	691b      	ldr	r3, [r3, #16]
 800ab1a:	2b00      	cmp	r3, #0
 800ab1c:	daf2      	bge.n	800ab04 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	2210      	movs	r2, #16
 800ab26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	3301      	adds	r3, #1
 800ab2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	4a08      	ldr	r2, [pc, #32]	; (800ab54 <USB_FlushRxFifo+0x5c>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d901      	bls.n	800ab3a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ab36:	2303      	movs	r3, #3
 800ab38:	e006      	b.n	800ab48 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	691b      	ldr	r3, [r3, #16]
 800ab3e:	f003 0310 	and.w	r3, r3, #16
 800ab42:	2b10      	cmp	r3, #16
 800ab44:	d0f0      	beq.n	800ab28 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ab46:	2300      	movs	r3, #0
}
 800ab48:	4618      	mov	r0, r3
 800ab4a:	3714      	adds	r7, #20
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr
 800ab54:	00030d40 	.word	0x00030d40

0800ab58 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b085      	sub	sp, #20
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
 800ab60:	460b      	mov	r3, r1
 800ab62:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	78fb      	ldrb	r3, [r7, #3]
 800ab72:	68f9      	ldr	r1, [r7, #12]
 800ab74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800ab7c:	2300      	movs	r3, #0
}
 800ab7e:	4618      	mov	r0, r3
 800ab80:	3714      	adds	r7, #20
 800ab82:	46bd      	mov	sp, r7
 800ab84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab88:	4770      	bx	lr

0800ab8a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800ab8a:	b480      	push	{r7}
 800ab8c:	b087      	sub	sp, #28
 800ab8e:	af00      	add	r7, sp, #0
 800ab90:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800ab96:	693b      	ldr	r3, [r7, #16]
 800ab98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab9c:	689b      	ldr	r3, [r3, #8]
 800ab9e:	f003 0306 	and.w	r3, r3, #6
 800aba2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d102      	bne.n	800abb0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800abaa:	2300      	movs	r3, #0
 800abac:	75fb      	strb	r3, [r7, #23]
 800abae:	e00a      	b.n	800abc6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2b02      	cmp	r3, #2
 800abb4:	d002      	beq.n	800abbc <USB_GetDevSpeed+0x32>
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	2b06      	cmp	r3, #6
 800abba:	d102      	bne.n	800abc2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800abbc:	2302      	movs	r3, #2
 800abbe:	75fb      	strb	r3, [r7, #23]
 800abc0:	e001      	b.n	800abc6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800abc2:	230f      	movs	r3, #15
 800abc4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800abc6:	7dfb      	ldrb	r3, [r7, #23]
}
 800abc8:	4618      	mov	r0, r3
 800abca:	371c      	adds	r7, #28
 800abcc:	46bd      	mov	sp, r7
 800abce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abd2:	4770      	bx	lr

0800abd4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b085      	sub	sp, #20
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
 800abdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800abe2:	683b      	ldr	r3, [r7, #0]
 800abe4:	781b      	ldrb	r3, [r3, #0]
 800abe6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	785b      	ldrb	r3, [r3, #1]
 800abec:	2b01      	cmp	r3, #1
 800abee:	d139      	bne.n	800ac64 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800abf6:	69da      	ldr	r2, [r3, #28]
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	781b      	ldrb	r3, [r3, #0]
 800abfc:	f003 030f 	and.w	r3, r3, #15
 800ac00:	2101      	movs	r1, #1
 800ac02:	fa01 f303 	lsl.w	r3, r1, r3
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	68f9      	ldr	r1, [r7, #12]
 800ac0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac0e:	4313      	orrs	r3, r2
 800ac10:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ac12:	68bb      	ldr	r3, [r7, #8]
 800ac14:	015a      	lsls	r2, r3, #5
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d153      	bne.n	800acd0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac28:	68bb      	ldr	r3, [r7, #8]
 800ac2a:	015a      	lsls	r2, r3, #5
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	4413      	add	r3, r2
 800ac30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac34:	681a      	ldr	r2, [r3, #0]
 800ac36:	683b      	ldr	r3, [r7, #0]
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	791b      	ldrb	r3, [r3, #4]
 800ac42:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac44:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	059b      	lsls	r3, r3, #22
 800ac4a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ac4c:	431a      	orrs	r2, r3
 800ac4e:	68bb      	ldr	r3, [r7, #8]
 800ac50:	0159      	lsls	r1, r3, #5
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	440b      	add	r3, r1
 800ac56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ac5a:	4619      	mov	r1, r3
 800ac5c:	4b20      	ldr	r3, [pc, #128]	; (800ace0 <USB_ActivateEndpoint+0x10c>)
 800ac5e:	4313      	orrs	r3, r2
 800ac60:	600b      	str	r3, [r1, #0]
 800ac62:	e035      	b.n	800acd0 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac6a:	69da      	ldr	r2, [r3, #28]
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	781b      	ldrb	r3, [r3, #0]
 800ac70:	f003 030f 	and.w	r3, r3, #15
 800ac74:	2101      	movs	r1, #1
 800ac76:	fa01 f303 	lsl.w	r3, r1, r3
 800ac7a:	041b      	lsls	r3, r3, #16
 800ac7c:	68f9      	ldr	r1, [r7, #12]
 800ac7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ac82:	4313      	orrs	r3, r2
 800ac84:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800ac86:	68bb      	ldr	r3, [r7, #8]
 800ac88:	015a      	lsls	r2, r3, #5
 800ac8a:	68fb      	ldr	r3, [r7, #12]
 800ac8c:	4413      	add	r3, r2
 800ac8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d119      	bne.n	800acd0 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	015a      	lsls	r2, r3, #5
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4413      	add	r3, r2
 800aca4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aca8:	681a      	ldr	r2, [r3, #0]
 800acaa:	683b      	ldr	r3, [r7, #0]
 800acac:	68db      	ldr	r3, [r3, #12]
 800acae:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800acb2:	683b      	ldr	r3, [r7, #0]
 800acb4:	791b      	ldrb	r3, [r3, #4]
 800acb6:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800acb8:	430b      	orrs	r3, r1
 800acba:	431a      	orrs	r2, r3
 800acbc:	68bb      	ldr	r3, [r7, #8]
 800acbe:	0159      	lsls	r1, r3, #5
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	440b      	add	r3, r1
 800acc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800acc8:	4619      	mov	r1, r3
 800acca:	4b05      	ldr	r3, [pc, #20]	; (800ace0 <USB_ActivateEndpoint+0x10c>)
 800accc:	4313      	orrs	r3, r2
 800acce:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800acd0:	2300      	movs	r3, #0
}
 800acd2:	4618      	mov	r0, r3
 800acd4:	3714      	adds	r7, #20
 800acd6:	46bd      	mov	sp, r7
 800acd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acdc:	4770      	bx	lr
 800acde:	bf00      	nop
 800ace0:	10008000 	.word	0x10008000

0800ace4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ace4:	b480      	push	{r7}
 800ace6:	b085      	sub	sp, #20
 800ace8:	af00      	add	r7, sp, #0
 800acea:	6078      	str	r0, [r7, #4]
 800acec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800acf2:	683b      	ldr	r3, [r7, #0]
 800acf4:	781b      	ldrb	r3, [r3, #0]
 800acf6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800acf8:	683b      	ldr	r3, [r7, #0]
 800acfa:	785b      	ldrb	r3, [r3, #1]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d161      	bne.n	800adc4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	015a      	lsls	r2, r3, #5
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	4413      	add	r3, r2
 800ad08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ad12:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ad16:	d11f      	bne.n	800ad58 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	015a      	lsls	r2, r3, #5
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	4413      	add	r3, r2
 800ad20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	0151      	lsls	r1, r2, #5
 800ad2a:	68fa      	ldr	r2, [r7, #12]
 800ad2c:	440a      	add	r2, r1
 800ad2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad32:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ad36:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ad38:	68bb      	ldr	r3, [r7, #8]
 800ad3a:	015a      	lsls	r2, r3, #5
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	4413      	add	r3, r2
 800ad40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad44:	681b      	ldr	r3, [r3, #0]
 800ad46:	68ba      	ldr	r2, [r7, #8]
 800ad48:	0151      	lsls	r1, r2, #5
 800ad4a:	68fa      	ldr	r2, [r7, #12]
 800ad4c:	440a      	add	r2, r1
 800ad4e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ad52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ad56:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad5e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ad60:	683b      	ldr	r3, [r7, #0]
 800ad62:	781b      	ldrb	r3, [r3, #0]
 800ad64:	f003 030f 	and.w	r3, r3, #15
 800ad68:	2101      	movs	r1, #1
 800ad6a:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	43db      	mvns	r3, r3
 800ad72:	68f9      	ldr	r1, [r7, #12]
 800ad74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad78:	4013      	ands	r3, r2
 800ad7a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad82:	69da      	ldr	r2, [r3, #28]
 800ad84:	683b      	ldr	r3, [r7, #0]
 800ad86:	781b      	ldrb	r3, [r3, #0]
 800ad88:	f003 030f 	and.w	r3, r3, #15
 800ad8c:	2101      	movs	r1, #1
 800ad8e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad92:	b29b      	uxth	r3, r3
 800ad94:	43db      	mvns	r3, r3
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad9c:	4013      	ands	r3, r2
 800ad9e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	015a      	lsls	r2, r3, #5
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	4413      	add	r3, r2
 800ada8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adac:	681a      	ldr	r2, [r3, #0]
 800adae:	68bb      	ldr	r3, [r7, #8]
 800adb0:	0159      	lsls	r1, r3, #5
 800adb2:	68fb      	ldr	r3, [r7, #12]
 800adb4:	440b      	add	r3, r1
 800adb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adba:	4619      	mov	r1, r3
 800adbc:	4b35      	ldr	r3, [pc, #212]	; (800ae94 <USB_DeactivateEndpoint+0x1b0>)
 800adbe:	4013      	ands	r3, r2
 800adc0:	600b      	str	r3, [r1, #0]
 800adc2:	e060      	b.n	800ae86 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800adc4:	68bb      	ldr	r3, [r7, #8]
 800adc6:	015a      	lsls	r2, r3, #5
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	4413      	add	r3, r2
 800adcc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800add6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adda:	d11f      	bne.n	800ae1c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800addc:	68bb      	ldr	r3, [r7, #8]
 800adde:	015a      	lsls	r2, r3, #5
 800ade0:	68fb      	ldr	r3, [r7, #12]
 800ade2:	4413      	add	r3, r2
 800ade4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	0151      	lsls	r1, r2, #5
 800adee:	68fa      	ldr	r2, [r7, #12]
 800adf0:	440a      	add	r2, r1
 800adf2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800adf6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800adfa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800adfc:	68bb      	ldr	r3, [r7, #8]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	68ba      	ldr	r2, [r7, #8]
 800ae0c:	0151      	lsls	r1, r2, #5
 800ae0e:	68fa      	ldr	r2, [r7, #12]
 800ae10:	440a      	add	r2, r1
 800ae12:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ae16:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae1a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	781b      	ldrb	r3, [r3, #0]
 800ae28:	f003 030f 	and.w	r3, r3, #15
 800ae2c:	2101      	movs	r1, #1
 800ae2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae32:	041b      	lsls	r3, r3, #16
 800ae34:	43db      	mvns	r3, r3
 800ae36:	68f9      	ldr	r1, [r7, #12]
 800ae38:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae3c:	4013      	ands	r3, r2
 800ae3e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800ae40:	68fb      	ldr	r3, [r7, #12]
 800ae42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae46:	69da      	ldr	r2, [r3, #28]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	781b      	ldrb	r3, [r3, #0]
 800ae4c:	f003 030f 	and.w	r3, r3, #15
 800ae50:	2101      	movs	r1, #1
 800ae52:	fa01 f303 	lsl.w	r3, r1, r3
 800ae56:	041b      	lsls	r3, r3, #16
 800ae58:	43db      	mvns	r3, r3
 800ae5a:	68f9      	ldr	r1, [r7, #12]
 800ae5c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ae60:	4013      	ands	r3, r2
 800ae62:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae70:	681a      	ldr	r2, [r3, #0]
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	0159      	lsls	r1, r3, #5
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	440b      	add	r3, r1
 800ae7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae7e:	4619      	mov	r1, r3
 800ae80:	4b05      	ldr	r3, [pc, #20]	; (800ae98 <USB_DeactivateEndpoint+0x1b4>)
 800ae82:	4013      	ands	r3, r2
 800ae84:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3714      	adds	r7, #20
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae92:	4770      	bx	lr
 800ae94:	ec337800 	.word	0xec337800
 800ae98:	eff37800 	.word	0xeff37800

0800ae9c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800ae9c:	b580      	push	{r7, lr}
 800ae9e:	b08a      	sub	sp, #40	; 0x28
 800aea0:	af02      	add	r7, sp, #8
 800aea2:	60f8      	str	r0, [r7, #12]
 800aea4:	60b9      	str	r1, [r7, #8]
 800aea6:	4613      	mov	r3, r2
 800aea8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800aeae:	68bb      	ldr	r3, [r7, #8]
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	785b      	ldrb	r3, [r3, #1]
 800aeb8:	2b01      	cmp	r3, #1
 800aeba:	f040 8163 	bne.w	800b184 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	699b      	ldr	r3, [r3, #24]
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d132      	bne.n	800af2c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aec6:	69bb      	ldr	r3, [r7, #24]
 800aec8:	015a      	lsls	r2, r3, #5
 800aeca:	69fb      	ldr	r3, [r7, #28]
 800aecc:	4413      	add	r3, r2
 800aece:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed2:	691a      	ldr	r2, [r3, #16]
 800aed4:	69bb      	ldr	r3, [r7, #24]
 800aed6:	0159      	lsls	r1, r3, #5
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	440b      	add	r3, r1
 800aedc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee0:	4619      	mov	r1, r3
 800aee2:	4ba5      	ldr	r3, [pc, #660]	; (800b178 <USB_EPStartXfer+0x2dc>)
 800aee4:	4013      	ands	r3, r2
 800aee6:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800aee8:	69bb      	ldr	r3, [r7, #24]
 800aeea:	015a      	lsls	r2, r3, #5
 800aeec:	69fb      	ldr	r3, [r7, #28]
 800aeee:	4413      	add	r3, r2
 800aef0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aef4:	691b      	ldr	r3, [r3, #16]
 800aef6:	69ba      	ldr	r2, [r7, #24]
 800aef8:	0151      	lsls	r1, r2, #5
 800aefa:	69fa      	ldr	r2, [r7, #28]
 800aefc:	440a      	add	r2, r1
 800aefe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800af02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800af06:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af08:	69bb      	ldr	r3, [r7, #24]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	69fb      	ldr	r3, [r7, #28]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af14:	691a      	ldr	r2, [r3, #16]
 800af16:	69bb      	ldr	r3, [r7, #24]
 800af18:	0159      	lsls	r1, r3, #5
 800af1a:	69fb      	ldr	r3, [r7, #28]
 800af1c:	440b      	add	r3, r1
 800af1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af22:	4619      	mov	r1, r3
 800af24:	4b95      	ldr	r3, [pc, #596]	; (800b17c <USB_EPStartXfer+0x2e0>)
 800af26:	4013      	ands	r3, r2
 800af28:	610b      	str	r3, [r1, #16]
 800af2a:	e074      	b.n	800b016 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	015a      	lsls	r2, r3, #5
 800af30:	69fb      	ldr	r3, [r7, #28]
 800af32:	4413      	add	r3, r2
 800af34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af38:	691a      	ldr	r2, [r3, #16]
 800af3a:	69bb      	ldr	r3, [r7, #24]
 800af3c:	0159      	lsls	r1, r3, #5
 800af3e:	69fb      	ldr	r3, [r7, #28]
 800af40:	440b      	add	r3, r1
 800af42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af46:	4619      	mov	r1, r3
 800af48:	4b8c      	ldr	r3, [pc, #560]	; (800b17c <USB_EPStartXfer+0x2e0>)
 800af4a:	4013      	ands	r3, r2
 800af4c:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800af4e:	69bb      	ldr	r3, [r7, #24]
 800af50:	015a      	lsls	r2, r3, #5
 800af52:	69fb      	ldr	r3, [r7, #28]
 800af54:	4413      	add	r3, r2
 800af56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af5a:	691a      	ldr	r2, [r3, #16]
 800af5c:	69bb      	ldr	r3, [r7, #24]
 800af5e:	0159      	lsls	r1, r3, #5
 800af60:	69fb      	ldr	r3, [r7, #28]
 800af62:	440b      	add	r3, r1
 800af64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af68:	4619      	mov	r1, r3
 800af6a:	4b83      	ldr	r3, [pc, #524]	; (800b178 <USB_EPStartXfer+0x2dc>)
 800af6c:	4013      	ands	r3, r2
 800af6e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800af70:	69bb      	ldr	r3, [r7, #24]
 800af72:	015a      	lsls	r2, r3, #5
 800af74:	69fb      	ldr	r3, [r7, #28]
 800af76:	4413      	add	r3, r2
 800af78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800af7c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800af7e:	68bb      	ldr	r3, [r7, #8]
 800af80:	6999      	ldr	r1, [r3, #24]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	440b      	add	r3, r1
 800af88:	1e59      	subs	r1, r3, #1
 800af8a:	68bb      	ldr	r3, [r7, #8]
 800af8c:	68db      	ldr	r3, [r3, #12]
 800af8e:	fbb1 f3f3 	udiv	r3, r1, r3
 800af92:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800af94:	4b7a      	ldr	r3, [pc, #488]	; (800b180 <USB_EPStartXfer+0x2e4>)
 800af96:	400b      	ands	r3, r1
 800af98:	69b9      	ldr	r1, [r7, #24]
 800af9a:	0148      	lsls	r0, r1, #5
 800af9c:	69f9      	ldr	r1, [r7, #28]
 800af9e:	4401      	add	r1, r0
 800afa0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afa4:	4313      	orrs	r3, r2
 800afa6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800afa8:	69bb      	ldr	r3, [r7, #24]
 800afaa:	015a      	lsls	r2, r3, #5
 800afac:	69fb      	ldr	r3, [r7, #28]
 800afae:	4413      	add	r3, r2
 800afb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afb4:	691a      	ldr	r2, [r3, #16]
 800afb6:	68bb      	ldr	r3, [r7, #8]
 800afb8:	699b      	ldr	r3, [r3, #24]
 800afba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800afbe:	69b9      	ldr	r1, [r7, #24]
 800afc0:	0148      	lsls	r0, r1, #5
 800afc2:	69f9      	ldr	r1, [r7, #28]
 800afc4:	4401      	add	r1, r0
 800afc6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800afca:	4313      	orrs	r3, r2
 800afcc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	791b      	ldrb	r3, [r3, #4]
 800afd2:	2b01      	cmp	r3, #1
 800afd4:	d11f      	bne.n	800b016 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800afd6:	69bb      	ldr	r3, [r7, #24]
 800afd8:	015a      	lsls	r2, r3, #5
 800afda:	69fb      	ldr	r3, [r7, #28]
 800afdc:	4413      	add	r3, r2
 800afde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	69ba      	ldr	r2, [r7, #24]
 800afe6:	0151      	lsls	r1, r2, #5
 800afe8:	69fa      	ldr	r2, [r7, #28]
 800afea:	440a      	add	r2, r1
 800afec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800aff0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800aff4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800aff6:	69bb      	ldr	r3, [r7, #24]
 800aff8:	015a      	lsls	r2, r3, #5
 800affa:	69fb      	ldr	r3, [r7, #28]
 800affc:	4413      	add	r3, r2
 800affe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b002:	691b      	ldr	r3, [r3, #16]
 800b004:	69ba      	ldr	r2, [r7, #24]
 800b006:	0151      	lsls	r1, r2, #5
 800b008:	69fa      	ldr	r2, [r7, #28]
 800b00a:	440a      	add	r2, r1
 800b00c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b010:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b014:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b016:	79fb      	ldrb	r3, [r7, #7]
 800b018:	2b01      	cmp	r3, #1
 800b01a:	d14b      	bne.n	800b0b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	2b00      	cmp	r3, #0
 800b022:	d009      	beq.n	800b038 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b024:	69bb      	ldr	r3, [r7, #24]
 800b026:	015a      	lsls	r2, r3, #5
 800b028:	69fb      	ldr	r3, [r7, #28]
 800b02a:	4413      	add	r3, r2
 800b02c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b030:	461a      	mov	r2, r3
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	695b      	ldr	r3, [r3, #20]
 800b036:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	791b      	ldrb	r3, [r3, #4]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d128      	bne.n	800b092 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b040:	69fb      	ldr	r3, [r7, #28]
 800b042:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b046:	689b      	ldr	r3, [r3, #8]
 800b048:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d110      	bne.n	800b072 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b050:	69bb      	ldr	r3, [r7, #24]
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	69ba      	ldr	r2, [r7, #24]
 800b060:	0151      	lsls	r1, r2, #5
 800b062:	69fa      	ldr	r2, [r7, #28]
 800b064:	440a      	add	r2, r1
 800b066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b06a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	e00f      	b.n	800b092 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b072:	69bb      	ldr	r3, [r7, #24]
 800b074:	015a      	lsls	r2, r3, #5
 800b076:	69fb      	ldr	r3, [r7, #28]
 800b078:	4413      	add	r3, r2
 800b07a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	69ba      	ldr	r2, [r7, #24]
 800b082:	0151      	lsls	r1, r2, #5
 800b084:	69fa      	ldr	r2, [r7, #28]
 800b086:	440a      	add	r2, r1
 800b088:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b08c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b090:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b092:	69bb      	ldr	r3, [r7, #24]
 800b094:	015a      	lsls	r2, r3, #5
 800b096:	69fb      	ldr	r3, [r7, #28]
 800b098:	4413      	add	r3, r2
 800b09a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	69ba      	ldr	r2, [r7, #24]
 800b0a2:	0151      	lsls	r1, r2, #5
 800b0a4:	69fa      	ldr	r2, [r7, #28]
 800b0a6:	440a      	add	r2, r1
 800b0a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0b0:	6013      	str	r3, [r2, #0]
 800b0b2:	e137      	b.n	800b324 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b0b4:	69bb      	ldr	r3, [r7, #24]
 800b0b6:	015a      	lsls	r2, r3, #5
 800b0b8:	69fb      	ldr	r3, [r7, #28]
 800b0ba:	4413      	add	r3, r2
 800b0bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	69ba      	ldr	r2, [r7, #24]
 800b0c4:	0151      	lsls	r1, r2, #5
 800b0c6:	69fa      	ldr	r2, [r7, #28]
 800b0c8:	440a      	add	r2, r1
 800b0ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b0ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b0d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b0d4:	68bb      	ldr	r3, [r7, #8]
 800b0d6:	791b      	ldrb	r3, [r3, #4]
 800b0d8:	2b01      	cmp	r3, #1
 800b0da:	d015      	beq.n	800b108 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b0dc:	68bb      	ldr	r3, [r7, #8]
 800b0de:	699b      	ldr	r3, [r3, #24]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 811f 	beq.w	800b324 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b0e6:	69fb      	ldr	r3, [r7, #28]
 800b0e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	781b      	ldrb	r3, [r3, #0]
 800b0f2:	f003 030f 	and.w	r3, r3, #15
 800b0f6:	2101      	movs	r1, #1
 800b0f8:	fa01 f303 	lsl.w	r3, r1, r3
 800b0fc:	69f9      	ldr	r1, [r7, #28]
 800b0fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b102:	4313      	orrs	r3, r2
 800b104:	634b      	str	r3, [r1, #52]	; 0x34
 800b106:	e10d      	b.n	800b324 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b108:	69fb      	ldr	r3, [r7, #28]
 800b10a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b10e:	689b      	ldr	r3, [r3, #8]
 800b110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b114:	2b00      	cmp	r3, #0
 800b116:	d110      	bne.n	800b13a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b118:	69bb      	ldr	r3, [r7, #24]
 800b11a:	015a      	lsls	r2, r3, #5
 800b11c:	69fb      	ldr	r3, [r7, #28]
 800b11e:	4413      	add	r3, r2
 800b120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	69ba      	ldr	r2, [r7, #24]
 800b128:	0151      	lsls	r1, r2, #5
 800b12a:	69fa      	ldr	r2, [r7, #28]
 800b12c:	440a      	add	r2, r1
 800b12e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b132:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b136:	6013      	str	r3, [r2, #0]
 800b138:	e00f      	b.n	800b15a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b13a:	69bb      	ldr	r3, [r7, #24]
 800b13c:	015a      	lsls	r2, r3, #5
 800b13e:	69fb      	ldr	r3, [r7, #28]
 800b140:	4413      	add	r3, r2
 800b142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	69ba      	ldr	r2, [r7, #24]
 800b14a:	0151      	lsls	r1, r2, #5
 800b14c:	69fa      	ldr	r2, [r7, #28]
 800b14e:	440a      	add	r2, r1
 800b150:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b154:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b158:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	6919      	ldr	r1, [r3, #16]
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	781a      	ldrb	r2, [r3, #0]
 800b162:	68bb      	ldr	r3, [r7, #8]
 800b164:	699b      	ldr	r3, [r3, #24]
 800b166:	b298      	uxth	r0, r3
 800b168:	79fb      	ldrb	r3, [r7, #7]
 800b16a:	9300      	str	r3, [sp, #0]
 800b16c:	4603      	mov	r3, r0
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f000 faea 	bl	800b748 <USB_WritePacket>
 800b174:	e0d6      	b.n	800b324 <USB_EPStartXfer+0x488>
 800b176:	bf00      	nop
 800b178:	e007ffff 	.word	0xe007ffff
 800b17c:	fff80000 	.word	0xfff80000
 800b180:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b184:	69bb      	ldr	r3, [r7, #24]
 800b186:	015a      	lsls	r2, r3, #5
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	4413      	add	r3, r2
 800b18c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b190:	691a      	ldr	r2, [r3, #16]
 800b192:	69bb      	ldr	r3, [r7, #24]
 800b194:	0159      	lsls	r1, r3, #5
 800b196:	69fb      	ldr	r3, [r7, #28]
 800b198:	440b      	add	r3, r1
 800b19a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b19e:	4619      	mov	r1, r3
 800b1a0:	4b63      	ldr	r3, [pc, #396]	; (800b330 <USB_EPStartXfer+0x494>)
 800b1a2:	4013      	ands	r3, r2
 800b1a4:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b1a6:	69bb      	ldr	r3, [r7, #24]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	69fb      	ldr	r3, [r7, #28]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b2:	691a      	ldr	r2, [r3, #16]
 800b1b4:	69bb      	ldr	r3, [r7, #24]
 800b1b6:	0159      	lsls	r1, r3, #5
 800b1b8:	69fb      	ldr	r3, [r7, #28]
 800b1ba:	440b      	add	r3, r1
 800b1bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c0:	4619      	mov	r1, r3
 800b1c2:	4b5c      	ldr	r3, [pc, #368]	; (800b334 <USB_EPStartXfer+0x498>)
 800b1c4:	4013      	ands	r3, r2
 800b1c6:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	699b      	ldr	r3, [r3, #24]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d123      	bne.n	800b218 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b1d0:	69bb      	ldr	r3, [r7, #24]
 800b1d2:	015a      	lsls	r2, r3, #5
 800b1d4:	69fb      	ldr	r3, [r7, #28]
 800b1d6:	4413      	add	r3, r2
 800b1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1dc:	691a      	ldr	r2, [r3, #16]
 800b1de:	68bb      	ldr	r3, [r7, #8]
 800b1e0:	68db      	ldr	r3, [r3, #12]
 800b1e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b1e6:	69b9      	ldr	r1, [r7, #24]
 800b1e8:	0148      	lsls	r0, r1, #5
 800b1ea:	69f9      	ldr	r1, [r7, #28]
 800b1ec:	4401      	add	r1, r0
 800b1ee:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	015a      	lsls	r2, r3, #5
 800b1fa:	69fb      	ldr	r3, [r7, #28]
 800b1fc:	4413      	add	r3, r2
 800b1fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b202:	691b      	ldr	r3, [r3, #16]
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	0151      	lsls	r1, r2, #5
 800b208:	69fa      	ldr	r2, [r7, #28]
 800b20a:	440a      	add	r2, r1
 800b20c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b210:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b214:	6113      	str	r3, [r2, #16]
 800b216:	e037      	b.n	800b288 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b218:	68bb      	ldr	r3, [r7, #8]
 800b21a:	699a      	ldr	r2, [r3, #24]
 800b21c:	68bb      	ldr	r3, [r7, #8]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	4413      	add	r3, r2
 800b222:	1e5a      	subs	r2, r3, #1
 800b224:	68bb      	ldr	r3, [r7, #8]
 800b226:	68db      	ldr	r3, [r3, #12]
 800b228:	fbb2 f3f3 	udiv	r3, r2, r3
 800b22c:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	68db      	ldr	r3, [r3, #12]
 800b232:	8afa      	ldrh	r2, [r7, #22]
 800b234:	fb03 f202 	mul.w	r2, r3, r2
 800b238:	68bb      	ldr	r3, [r7, #8]
 800b23a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	015a      	lsls	r2, r3, #5
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	4413      	add	r3, r2
 800b244:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b248:	691a      	ldr	r2, [r3, #16]
 800b24a:	8afb      	ldrh	r3, [r7, #22]
 800b24c:	04d9      	lsls	r1, r3, #19
 800b24e:	4b3a      	ldr	r3, [pc, #232]	; (800b338 <USB_EPStartXfer+0x49c>)
 800b250:	400b      	ands	r3, r1
 800b252:	69b9      	ldr	r1, [r7, #24]
 800b254:	0148      	lsls	r0, r1, #5
 800b256:	69f9      	ldr	r1, [r7, #28]
 800b258:	4401      	add	r1, r0
 800b25a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b25e:	4313      	orrs	r3, r2
 800b260:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b262:	69bb      	ldr	r3, [r7, #24]
 800b264:	015a      	lsls	r2, r3, #5
 800b266:	69fb      	ldr	r3, [r7, #28]
 800b268:	4413      	add	r3, r2
 800b26a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b26e:	691a      	ldr	r2, [r3, #16]
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	69db      	ldr	r3, [r3, #28]
 800b274:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b278:	69b9      	ldr	r1, [r7, #24]
 800b27a:	0148      	lsls	r0, r1, #5
 800b27c:	69f9      	ldr	r1, [r7, #28]
 800b27e:	4401      	add	r1, r0
 800b280:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b284:	4313      	orrs	r3, r2
 800b286:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b288:	79fb      	ldrb	r3, [r7, #7]
 800b28a:	2b01      	cmp	r3, #1
 800b28c:	d10d      	bne.n	800b2aa <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	691b      	ldr	r3, [r3, #16]
 800b292:	2b00      	cmp	r3, #0
 800b294:	d009      	beq.n	800b2aa <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	6919      	ldr	r1, [r3, #16]
 800b29a:	69bb      	ldr	r3, [r7, #24]
 800b29c:	015a      	lsls	r2, r3, #5
 800b29e:	69fb      	ldr	r3, [r7, #28]
 800b2a0:	4413      	add	r3, r2
 800b2a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2a6:	460a      	mov	r2, r1
 800b2a8:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b2aa:	68bb      	ldr	r3, [r7, #8]
 800b2ac:	791b      	ldrb	r3, [r3, #4]
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d128      	bne.n	800b304 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b2b2:	69fb      	ldr	r3, [r7, #28]
 800b2b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2b8:	689b      	ldr	r3, [r3, #8]
 800b2ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d110      	bne.n	800b2e4 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b2c2:	69bb      	ldr	r3, [r7, #24]
 800b2c4:	015a      	lsls	r2, r3, #5
 800b2c6:	69fb      	ldr	r3, [r7, #28]
 800b2c8:	4413      	add	r3, r2
 800b2ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	69ba      	ldr	r2, [r7, #24]
 800b2d2:	0151      	lsls	r1, r2, #5
 800b2d4:	69fa      	ldr	r2, [r7, #28]
 800b2d6:	440a      	add	r2, r1
 800b2d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2dc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	e00f      	b.n	800b304 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b2e4:	69bb      	ldr	r3, [r7, #24]
 800b2e6:	015a      	lsls	r2, r3, #5
 800b2e8:	69fb      	ldr	r3, [r7, #28]
 800b2ea:	4413      	add	r3, r2
 800b2ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	69ba      	ldr	r2, [r7, #24]
 800b2f4:	0151      	lsls	r1, r2, #5
 800b2f6:	69fa      	ldr	r2, [r7, #28]
 800b2f8:	440a      	add	r2, r1
 800b2fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b302:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b304:	69bb      	ldr	r3, [r7, #24]
 800b306:	015a      	lsls	r2, r3, #5
 800b308:	69fb      	ldr	r3, [r7, #28]
 800b30a:	4413      	add	r3, r2
 800b30c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	69ba      	ldr	r2, [r7, #24]
 800b314:	0151      	lsls	r1, r2, #5
 800b316:	69fa      	ldr	r2, [r7, #28]
 800b318:	440a      	add	r2, r1
 800b31a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b31e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b322:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b324:	2300      	movs	r3, #0
}
 800b326:	4618      	mov	r0, r3
 800b328:	3720      	adds	r7, #32
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop
 800b330:	fff80000 	.word	0xfff80000
 800b334:	e007ffff 	.word	0xe007ffff
 800b338:	1ff80000 	.word	0x1ff80000

0800b33c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b33c:	b480      	push	{r7}
 800b33e:	b087      	sub	sp, #28
 800b340:	af00      	add	r7, sp, #0
 800b342:	60f8      	str	r0, [r7, #12]
 800b344:	60b9      	str	r1, [r7, #8]
 800b346:	4613      	mov	r3, r2
 800b348:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b34e:	68bb      	ldr	r3, [r7, #8]
 800b350:	781b      	ldrb	r3, [r3, #0]
 800b352:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b354:	68bb      	ldr	r3, [r7, #8]
 800b356:	785b      	ldrb	r3, [r3, #1]
 800b358:	2b01      	cmp	r3, #1
 800b35a:	f040 80ce 	bne.w	800b4fa <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	699b      	ldr	r3, [r3, #24]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d132      	bne.n	800b3cc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	015a      	lsls	r2, r3, #5
 800b36a:	697b      	ldr	r3, [r7, #20]
 800b36c:	4413      	add	r3, r2
 800b36e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b372:	691a      	ldr	r2, [r3, #16]
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	0159      	lsls	r1, r3, #5
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	440b      	add	r3, r1
 800b37c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b380:	4619      	mov	r1, r3
 800b382:	4b9a      	ldr	r3, [pc, #616]	; (800b5ec <USB_EP0StartXfer+0x2b0>)
 800b384:	4013      	ands	r3, r2
 800b386:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	015a      	lsls	r2, r3, #5
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	4413      	add	r3, r2
 800b390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b394:	691b      	ldr	r3, [r3, #16]
 800b396:	693a      	ldr	r2, [r7, #16]
 800b398:	0151      	lsls	r1, r2, #5
 800b39a:	697a      	ldr	r2, [r7, #20]
 800b39c:	440a      	add	r2, r1
 800b39e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3a6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	015a      	lsls	r2, r3, #5
 800b3ac:	697b      	ldr	r3, [r7, #20]
 800b3ae:	4413      	add	r3, r2
 800b3b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b4:	691a      	ldr	r2, [r3, #16]
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	0159      	lsls	r1, r3, #5
 800b3ba:	697b      	ldr	r3, [r7, #20]
 800b3bc:	440b      	add	r3, r1
 800b3be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3c2:	4619      	mov	r1, r3
 800b3c4:	4b8a      	ldr	r3, [pc, #552]	; (800b5f0 <USB_EP0StartXfer+0x2b4>)
 800b3c6:	4013      	ands	r3, r2
 800b3c8:	610b      	str	r3, [r1, #16]
 800b3ca:	e04e      	b.n	800b46a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3cc:	693b      	ldr	r3, [r7, #16]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	697b      	ldr	r3, [r7, #20]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	0159      	lsls	r1, r3, #5
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	440b      	add	r3, r1
 800b3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4b81      	ldr	r3, [pc, #516]	; (800b5f0 <USB_EP0StartXfer+0x2b4>)
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	697b      	ldr	r3, [r7, #20]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fa:	691a      	ldr	r2, [r3, #16]
 800b3fc:	693b      	ldr	r3, [r7, #16]
 800b3fe:	0159      	lsls	r1, r3, #5
 800b400:	697b      	ldr	r3, [r7, #20]
 800b402:	440b      	add	r3, r1
 800b404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b408:	4619      	mov	r1, r3
 800b40a:	4b78      	ldr	r3, [pc, #480]	; (800b5ec <USB_EP0StartXfer+0x2b0>)
 800b40c:	4013      	ands	r3, r2
 800b40e:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	699a      	ldr	r2, [r3, #24]
 800b414:	68bb      	ldr	r3, [r7, #8]
 800b416:	68db      	ldr	r3, [r3, #12]
 800b418:	429a      	cmp	r2, r3
 800b41a:	d903      	bls.n	800b424 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b41c:	68bb      	ldr	r3, [r7, #8]
 800b41e:	68da      	ldr	r2, [r3, #12]
 800b420:	68bb      	ldr	r3, [r7, #8]
 800b422:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	015a      	lsls	r2, r3, #5
 800b428:	697b      	ldr	r3, [r7, #20]
 800b42a:	4413      	add	r3, r2
 800b42c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b430:	691b      	ldr	r3, [r3, #16]
 800b432:	693a      	ldr	r2, [r7, #16]
 800b434:	0151      	lsls	r1, r2, #5
 800b436:	697a      	ldr	r2, [r7, #20]
 800b438:	440a      	add	r2, r1
 800b43a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b43e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b442:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b444:	693b      	ldr	r3, [r7, #16]
 800b446:	015a      	lsls	r2, r3, #5
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	4413      	add	r3, r2
 800b44c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b450:	691a      	ldr	r2, [r3, #16]
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b45a:	6939      	ldr	r1, [r7, #16]
 800b45c:	0148      	lsls	r0, r1, #5
 800b45e:	6979      	ldr	r1, [r7, #20]
 800b460:	4401      	add	r1, r0
 800b462:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b466:	4313      	orrs	r3, r2
 800b468:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b46a:	79fb      	ldrb	r3, [r7, #7]
 800b46c:	2b01      	cmp	r3, #1
 800b46e:	d11e      	bne.n	800b4ae <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	695b      	ldr	r3, [r3, #20]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d009      	beq.n	800b48c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b478:	693b      	ldr	r3, [r7, #16]
 800b47a:	015a      	lsls	r2, r3, #5
 800b47c:	697b      	ldr	r3, [r7, #20]
 800b47e:	4413      	add	r3, r2
 800b480:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b484:	461a      	mov	r2, r3
 800b486:	68bb      	ldr	r3, [r7, #8]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b48c:	693b      	ldr	r3, [r7, #16]
 800b48e:	015a      	lsls	r2, r3, #5
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	4413      	add	r3, r2
 800b494:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	693a      	ldr	r2, [r7, #16]
 800b49c:	0151      	lsls	r1, r2, #5
 800b49e:	697a      	ldr	r2, [r7, #20]
 800b4a0:	440a      	add	r2, r1
 800b4a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4aa:	6013      	str	r3, [r2, #0]
 800b4ac:	e097      	b.n	800b5de <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b4ae:	693b      	ldr	r3, [r7, #16]
 800b4b0:	015a      	lsls	r2, r3, #5
 800b4b2:	697b      	ldr	r3, [r7, #20]
 800b4b4:	4413      	add	r3, r2
 800b4b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	693a      	ldr	r2, [r7, #16]
 800b4be:	0151      	lsls	r1, r2, #5
 800b4c0:	697a      	ldr	r2, [r7, #20]
 800b4c2:	440a      	add	r2, r1
 800b4c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b4cc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	699b      	ldr	r3, [r3, #24]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	f000 8083 	beq.w	800b5de <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	781b      	ldrb	r3, [r3, #0]
 800b4e4:	f003 030f 	and.w	r3, r3, #15
 800b4e8:	2101      	movs	r1, #1
 800b4ea:	fa01 f303 	lsl.w	r3, r1, r3
 800b4ee:	6979      	ldr	r1, [r7, #20]
 800b4f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	634b      	str	r3, [r1, #52]	; 0x34
 800b4f8:	e071      	b.n	800b5de <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b4fa:	693b      	ldr	r3, [r7, #16]
 800b4fc:	015a      	lsls	r2, r3, #5
 800b4fe:	697b      	ldr	r3, [r7, #20]
 800b500:	4413      	add	r3, r2
 800b502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b506:	691a      	ldr	r2, [r3, #16]
 800b508:	693b      	ldr	r3, [r7, #16]
 800b50a:	0159      	lsls	r1, r3, #5
 800b50c:	697b      	ldr	r3, [r7, #20]
 800b50e:	440b      	add	r3, r1
 800b510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b514:	4619      	mov	r1, r3
 800b516:	4b36      	ldr	r3, [pc, #216]	; (800b5f0 <USB_EP0StartXfer+0x2b4>)
 800b518:	4013      	ands	r3, r2
 800b51a:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b51c:	693b      	ldr	r3, [r7, #16]
 800b51e:	015a      	lsls	r2, r3, #5
 800b520:	697b      	ldr	r3, [r7, #20]
 800b522:	4413      	add	r3, r2
 800b524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b528:	691a      	ldr	r2, [r3, #16]
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	0159      	lsls	r1, r3, #5
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	440b      	add	r3, r1
 800b532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b536:	4619      	mov	r1, r3
 800b538:	4b2c      	ldr	r3, [pc, #176]	; (800b5ec <USB_EP0StartXfer+0x2b0>)
 800b53a:	4013      	ands	r3, r2
 800b53c:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b53e:	68bb      	ldr	r3, [r7, #8]
 800b540:	699b      	ldr	r3, [r3, #24]
 800b542:	2b00      	cmp	r3, #0
 800b544:	d003      	beq.n	800b54e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b546:	68bb      	ldr	r3, [r7, #8]
 800b548:	68da      	ldr	r2, [r3, #12]
 800b54a:	68bb      	ldr	r3, [r7, #8]
 800b54c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b54e:	68bb      	ldr	r3, [r7, #8]
 800b550:	68da      	ldr	r2, [r3, #12]
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b556:	693b      	ldr	r3, [r7, #16]
 800b558:	015a      	lsls	r2, r3, #5
 800b55a:	697b      	ldr	r3, [r7, #20]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b562:	691b      	ldr	r3, [r3, #16]
 800b564:	693a      	ldr	r2, [r7, #16]
 800b566:	0151      	lsls	r1, r2, #5
 800b568:	697a      	ldr	r2, [r7, #20]
 800b56a:	440a      	add	r2, r1
 800b56c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b570:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b574:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	015a      	lsls	r2, r3, #5
 800b57a:	697b      	ldr	r3, [r7, #20]
 800b57c:	4413      	add	r3, r2
 800b57e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b582:	691a      	ldr	r2, [r3, #16]
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	69db      	ldr	r3, [r3, #28]
 800b588:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b58c:	6939      	ldr	r1, [r7, #16]
 800b58e:	0148      	lsls	r0, r1, #5
 800b590:	6979      	ldr	r1, [r7, #20]
 800b592:	4401      	add	r1, r0
 800b594:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b598:	4313      	orrs	r3, r2
 800b59a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b59c:	79fb      	ldrb	r3, [r7, #7]
 800b59e:	2b01      	cmp	r3, #1
 800b5a0:	d10d      	bne.n	800b5be <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b5a2:	68bb      	ldr	r3, [r7, #8]
 800b5a4:	691b      	ldr	r3, [r3, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d009      	beq.n	800b5be <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	6919      	ldr	r1, [r3, #16]
 800b5ae:	693b      	ldr	r3, [r7, #16]
 800b5b0:	015a      	lsls	r2, r3, #5
 800b5b2:	697b      	ldr	r3, [r7, #20]
 800b5b4:	4413      	add	r3, r2
 800b5b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ba:	460a      	mov	r2, r1
 800b5bc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b5be:	693b      	ldr	r3, [r7, #16]
 800b5c0:	015a      	lsls	r2, r3, #5
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	4413      	add	r3, r2
 800b5c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	693a      	ldr	r2, [r7, #16]
 800b5ce:	0151      	lsls	r1, r2, #5
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	440a      	add	r2, r1
 800b5d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5dc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b5de:	2300      	movs	r3, #0
}
 800b5e0:	4618      	mov	r0, r3
 800b5e2:	371c      	adds	r7, #28
 800b5e4:	46bd      	mov	sp, r7
 800b5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ea:	4770      	bx	lr
 800b5ec:	e007ffff 	.word	0xe007ffff
 800b5f0:	fff80000 	.word	0xfff80000

0800b5f4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b5f4:	b480      	push	{r7}
 800b5f6:	b087      	sub	sp, #28
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
 800b5fc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b5fe:	2300      	movs	r3, #0
 800b600:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b602:	2300      	movs	r3, #0
 800b604:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	785b      	ldrb	r3, [r3, #1]
 800b60e:	2b01      	cmp	r3, #1
 800b610:	d14a      	bne.n	800b6a8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b612:	683b      	ldr	r3, [r7, #0]
 800b614:	781b      	ldrb	r3, [r3, #0]
 800b616:	015a      	lsls	r2, r3, #5
 800b618:	693b      	ldr	r3, [r7, #16]
 800b61a:	4413      	add	r3, r2
 800b61c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b626:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b62a:	f040 8086 	bne.w	800b73a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	781b      	ldrb	r3, [r3, #0]
 800b632:	015a      	lsls	r2, r3, #5
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	4413      	add	r3, r2
 800b638:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	683a      	ldr	r2, [r7, #0]
 800b640:	7812      	ldrb	r2, [r2, #0]
 800b642:	0151      	lsls	r1, r2, #5
 800b644:	693a      	ldr	r2, [r7, #16]
 800b646:	440a      	add	r2, r1
 800b648:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b64c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b650:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	781b      	ldrb	r3, [r3, #0]
 800b656:	015a      	lsls	r2, r3, #5
 800b658:	693b      	ldr	r3, [r7, #16]
 800b65a:	4413      	add	r3, r2
 800b65c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	683a      	ldr	r2, [r7, #0]
 800b664:	7812      	ldrb	r2, [r2, #0]
 800b666:	0151      	lsls	r1, r2, #5
 800b668:	693a      	ldr	r2, [r7, #16]
 800b66a:	440a      	add	r2, r1
 800b66c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b670:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b674:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	3301      	adds	r3, #1
 800b67a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b682:	4293      	cmp	r3, r2
 800b684:	d902      	bls.n	800b68c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	75fb      	strb	r3, [r7, #23]
          break;
 800b68a:	e056      	b.n	800b73a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b68c:	683b      	ldr	r3, [r7, #0]
 800b68e:	781b      	ldrb	r3, [r3, #0]
 800b690:	015a      	lsls	r2, r3, #5
 800b692:	693b      	ldr	r3, [r7, #16]
 800b694:	4413      	add	r3, r2
 800b696:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6a4:	d0e7      	beq.n	800b676 <USB_EPStopXfer+0x82>
 800b6a6:	e048      	b.n	800b73a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b6a8:	683b      	ldr	r3, [r7, #0]
 800b6aa:	781b      	ldrb	r3, [r3, #0]
 800b6ac:	015a      	lsls	r2, r3, #5
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	4413      	add	r3, r2
 800b6b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b6bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b6c0:	d13b      	bne.n	800b73a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b6c2:	683b      	ldr	r3, [r7, #0]
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	015a      	lsls	r2, r3, #5
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	4413      	add	r3, r2
 800b6cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6d0:	681b      	ldr	r3, [r3, #0]
 800b6d2:	683a      	ldr	r2, [r7, #0]
 800b6d4:	7812      	ldrb	r2, [r2, #0]
 800b6d6:	0151      	lsls	r1, r2, #5
 800b6d8:	693a      	ldr	r2, [r7, #16]
 800b6da:	440a      	add	r2, r1
 800b6dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6e0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b6e4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	015a      	lsls	r2, r3, #5
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f4:	681b      	ldr	r3, [r3, #0]
 800b6f6:	683a      	ldr	r2, [r7, #0]
 800b6f8:	7812      	ldrb	r2, [r2, #0]
 800b6fa:	0151      	lsls	r1, r2, #5
 800b6fc:	693a      	ldr	r2, [r7, #16]
 800b6fe:	440a      	add	r2, r1
 800b700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b704:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b708:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	3301      	adds	r3, #1
 800b70e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f242 7210 	movw	r2, #10000	; 0x2710
 800b716:	4293      	cmp	r3, r2
 800b718:	d902      	bls.n	800b720 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	75fb      	strb	r3, [r7, #23]
          break;
 800b71e:	e00c      	b.n	800b73a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	781b      	ldrb	r3, [r3, #0]
 800b724:	015a      	lsls	r2, r3, #5
 800b726:	693b      	ldr	r3, [r7, #16]
 800b728:	4413      	add	r3, r2
 800b72a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b734:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b738:	d0e7      	beq.n	800b70a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b73a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b73c:	4618      	mov	r0, r3
 800b73e:	371c      	adds	r7, #28
 800b740:	46bd      	mov	sp, r7
 800b742:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b746:	4770      	bx	lr

0800b748 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b748:	b480      	push	{r7}
 800b74a:	b089      	sub	sp, #36	; 0x24
 800b74c:	af00      	add	r7, sp, #0
 800b74e:	60f8      	str	r0, [r7, #12]
 800b750:	60b9      	str	r1, [r7, #8]
 800b752:	4611      	mov	r1, r2
 800b754:	461a      	mov	r2, r3
 800b756:	460b      	mov	r3, r1
 800b758:	71fb      	strb	r3, [r7, #7]
 800b75a:	4613      	mov	r3, r2
 800b75c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b75e:	68fb      	ldr	r3, [r7, #12]
 800b760:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b762:	68bb      	ldr	r3, [r7, #8]
 800b764:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b766:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d123      	bne.n	800b7b6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b76e:	88bb      	ldrh	r3, [r7, #4]
 800b770:	3303      	adds	r3, #3
 800b772:	089b      	lsrs	r3, r3, #2
 800b774:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b776:	2300      	movs	r3, #0
 800b778:	61bb      	str	r3, [r7, #24]
 800b77a:	e018      	b.n	800b7ae <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b77c:	79fb      	ldrb	r3, [r7, #7]
 800b77e:	031a      	lsls	r2, r3, #12
 800b780:	697b      	ldr	r3, [r7, #20]
 800b782:	4413      	add	r3, r2
 800b784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b788:	461a      	mov	r2, r3
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b790:	69fb      	ldr	r3, [r7, #28]
 800b792:	3301      	adds	r3, #1
 800b794:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b796:	69fb      	ldr	r3, [r7, #28]
 800b798:	3301      	adds	r3, #1
 800b79a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b79c:	69fb      	ldr	r3, [r7, #28]
 800b79e:	3301      	adds	r3, #1
 800b7a0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b7a2:	69fb      	ldr	r3, [r7, #28]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	3301      	adds	r3, #1
 800b7ac:	61bb      	str	r3, [r7, #24]
 800b7ae:	69ba      	ldr	r2, [r7, #24]
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	429a      	cmp	r2, r3
 800b7b4:	d3e2      	bcc.n	800b77c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b7b6:	2300      	movs	r3, #0
}
 800b7b8:	4618      	mov	r0, r3
 800b7ba:	3724      	adds	r7, #36	; 0x24
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr

0800b7c4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b7c4:	b480      	push	{r7}
 800b7c6:	b08b      	sub	sp, #44	; 0x2c
 800b7c8:	af00      	add	r7, sp, #0
 800b7ca:	60f8      	str	r0, [r7, #12]
 800b7cc:	60b9      	str	r1, [r7, #8]
 800b7ce:	4613      	mov	r3, r2
 800b7d0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b7d2:	68fb      	ldr	r3, [r7, #12]
 800b7d4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b7d6:	68bb      	ldr	r3, [r7, #8]
 800b7d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b7da:	88fb      	ldrh	r3, [r7, #6]
 800b7dc:	089b      	lsrs	r3, r3, #2
 800b7de:	b29b      	uxth	r3, r3
 800b7e0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b7e2:	88fb      	ldrh	r3, [r7, #6]
 800b7e4:	f003 0303 	and.w	r3, r3, #3
 800b7e8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	623b      	str	r3, [r7, #32]
 800b7ee:	e014      	b.n	800b81a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b7f0:	69bb      	ldr	r3, [r7, #24]
 800b7f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b7f6:	681a      	ldr	r2, [r3, #0]
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fa:	601a      	str	r2, [r3, #0]
    pDest++;
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7fe:	3301      	adds	r3, #1
 800b800:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b804:	3301      	adds	r3, #1
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b80a:	3301      	adds	r3, #1
 800b80c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b80e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b810:	3301      	adds	r3, #1
 800b812:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b814:	6a3b      	ldr	r3, [r7, #32]
 800b816:	3301      	adds	r3, #1
 800b818:	623b      	str	r3, [r7, #32]
 800b81a:	6a3a      	ldr	r2, [r7, #32]
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	429a      	cmp	r2, r3
 800b820:	d3e6      	bcc.n	800b7f0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b822:	8bfb      	ldrh	r3, [r7, #30]
 800b824:	2b00      	cmp	r3, #0
 800b826:	d01e      	beq.n	800b866 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b828:	2300      	movs	r3, #0
 800b82a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b82c:	69bb      	ldr	r3, [r7, #24]
 800b82e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b832:	461a      	mov	r2, r3
 800b834:	f107 0310 	add.w	r3, r7, #16
 800b838:	6812      	ldr	r2, [r2, #0]
 800b83a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b83c:	693a      	ldr	r2, [r7, #16]
 800b83e:	6a3b      	ldr	r3, [r7, #32]
 800b840:	b2db      	uxtb	r3, r3
 800b842:	00db      	lsls	r3, r3, #3
 800b844:	fa22 f303 	lsr.w	r3, r2, r3
 800b848:	b2da      	uxtb	r2, r3
 800b84a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b84c:	701a      	strb	r2, [r3, #0]
      i++;
 800b84e:	6a3b      	ldr	r3, [r7, #32]
 800b850:	3301      	adds	r3, #1
 800b852:	623b      	str	r3, [r7, #32]
      pDest++;
 800b854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b856:	3301      	adds	r3, #1
 800b858:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b85a:	8bfb      	ldrh	r3, [r7, #30]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b860:	8bfb      	ldrh	r3, [r7, #30]
 800b862:	2b00      	cmp	r3, #0
 800b864:	d1ea      	bne.n	800b83c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b868:	4618      	mov	r0, r3
 800b86a:	372c      	adds	r7, #44	; 0x2c
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b874:	b480      	push	{r7}
 800b876:	b085      	sub	sp, #20
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
 800b87c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	781b      	ldrb	r3, [r3, #0]
 800b886:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b888:	683b      	ldr	r3, [r7, #0]
 800b88a:	785b      	ldrb	r3, [r3, #1]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d12c      	bne.n	800b8ea <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b890:	68bb      	ldr	r3, [r7, #8]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	db12      	blt.n	800b8c8 <USB_EPSetStall+0x54>
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00f      	beq.n	800b8c8 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b8a8:	68bb      	ldr	r3, [r7, #8]
 800b8aa:	015a      	lsls	r2, r3, #5
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	68ba      	ldr	r2, [r7, #8]
 800b8b8:	0151      	lsls	r1, r2, #5
 800b8ba:	68fa      	ldr	r2, [r7, #12]
 800b8bc:	440a      	add	r2, r1
 800b8be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b8c6:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b8c8:	68bb      	ldr	r3, [r7, #8]
 800b8ca:	015a      	lsls	r2, r3, #5
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	68ba      	ldr	r2, [r7, #8]
 800b8d8:	0151      	lsls	r1, r2, #5
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	440a      	add	r2, r1
 800b8de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b8e6:	6013      	str	r3, [r2, #0]
 800b8e8:	e02b      	b.n	800b942 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b8ea:	68bb      	ldr	r3, [r7, #8]
 800b8ec:	015a      	lsls	r2, r3, #5
 800b8ee:	68fb      	ldr	r3, [r7, #12]
 800b8f0:	4413      	add	r3, r2
 800b8f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	db12      	blt.n	800b922 <USB_EPSetStall+0xae>
 800b8fc:	68bb      	ldr	r3, [r7, #8]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	d00f      	beq.n	800b922 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	015a      	lsls	r2, r3, #5
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	4413      	add	r3, r2
 800b90a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	68ba      	ldr	r2, [r7, #8]
 800b912:	0151      	lsls	r1, r2, #5
 800b914:	68fa      	ldr	r2, [r7, #12]
 800b916:	440a      	add	r2, r1
 800b918:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b91c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b920:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800b922:	68bb      	ldr	r3, [r7, #8]
 800b924:	015a      	lsls	r2, r3, #5
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	4413      	add	r3, r2
 800b92a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68ba      	ldr	r2, [r7, #8]
 800b932:	0151      	lsls	r1, r2, #5
 800b934:	68fa      	ldr	r2, [r7, #12]
 800b936:	440a      	add	r2, r1
 800b938:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b93c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800b940:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b942:	2300      	movs	r3, #0
}
 800b944:	4618      	mov	r0, r3
 800b946:	3714      	adds	r7, #20
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b950:	b480      	push	{r7}
 800b952:	b085      	sub	sp, #20
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
 800b958:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b964:	683b      	ldr	r3, [r7, #0]
 800b966:	785b      	ldrb	r3, [r3, #1]
 800b968:	2b01      	cmp	r3, #1
 800b96a:	d128      	bne.n	800b9be <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	015a      	lsls	r2, r3, #5
 800b970:	68fb      	ldr	r3, [r7, #12]
 800b972:	4413      	add	r3, r2
 800b974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	68ba      	ldr	r2, [r7, #8]
 800b97c:	0151      	lsls	r1, r2, #5
 800b97e:	68fa      	ldr	r2, [r7, #12]
 800b980:	440a      	add	r2, r1
 800b982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b986:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b98a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	791b      	ldrb	r3, [r3, #4]
 800b990:	2b03      	cmp	r3, #3
 800b992:	d003      	beq.n	800b99c <USB_EPClearStall+0x4c>
 800b994:	683b      	ldr	r3, [r7, #0]
 800b996:	791b      	ldrb	r3, [r3, #4]
 800b998:	2b02      	cmp	r3, #2
 800b99a:	d138      	bne.n	800ba0e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b99c:	68bb      	ldr	r3, [r7, #8]
 800b99e:	015a      	lsls	r2, r3, #5
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	4413      	add	r3, r2
 800b9a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9a8:	681b      	ldr	r3, [r3, #0]
 800b9aa:	68ba      	ldr	r2, [r7, #8]
 800b9ac:	0151      	lsls	r1, r2, #5
 800b9ae:	68fa      	ldr	r2, [r7, #12]
 800b9b0:	440a      	add	r2, r1
 800b9b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b9ba:	6013      	str	r3, [r2, #0]
 800b9bc:	e027      	b.n	800ba0e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	015a      	lsls	r2, r3, #5
 800b9c2:	68fb      	ldr	r3, [r7, #12]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	0151      	lsls	r1, r2, #5
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	440a      	add	r2, r1
 800b9d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b9d8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b9dc:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800b9de:	683b      	ldr	r3, [r7, #0]
 800b9e0:	791b      	ldrb	r3, [r3, #4]
 800b9e2:	2b03      	cmp	r3, #3
 800b9e4:	d003      	beq.n	800b9ee <USB_EPClearStall+0x9e>
 800b9e6:	683b      	ldr	r3, [r7, #0]
 800b9e8:	791b      	ldrb	r3, [r3, #4]
 800b9ea:	2b02      	cmp	r3, #2
 800b9ec:	d10f      	bne.n	800ba0e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	015a      	lsls	r2, r3, #5
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	4413      	add	r3, r2
 800b9f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fa:	681b      	ldr	r3, [r3, #0]
 800b9fc:	68ba      	ldr	r2, [r7, #8]
 800b9fe:	0151      	lsls	r1, r2, #5
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	440a      	add	r2, r1
 800ba04:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ba0c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800ba0e:	2300      	movs	r3, #0
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	3714      	adds	r7, #20
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800ba1c:	b480      	push	{r7}
 800ba1e:	b085      	sub	sp, #20
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	460b      	mov	r3, r1
 800ba26:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba32:	681b      	ldr	r3, [r3, #0]
 800ba34:	68fa      	ldr	r2, [r7, #12]
 800ba36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba3a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800ba3e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba46:	681a      	ldr	r2, [r3, #0]
 800ba48:	78fb      	ldrb	r3, [r7, #3]
 800ba4a:	011b      	lsls	r3, r3, #4
 800ba4c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800ba50:	68f9      	ldr	r1, [r7, #12]
 800ba52:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ba56:	4313      	orrs	r3, r2
 800ba58:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800ba5a:	2300      	movs	r3, #0
}
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	3714      	adds	r7, #20
 800ba60:	46bd      	mov	sp, r7
 800ba62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba66:	4770      	bx	lr

0800ba68 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800ba68:	b480      	push	{r7}
 800ba6a:	b085      	sub	sp, #20
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68fa      	ldr	r2, [r7, #12]
 800ba7e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800ba82:	f023 0303 	bic.w	r3, r3, #3
 800ba86:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800ba88:	68fb      	ldr	r3, [r7, #12]
 800ba8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ba8e:	685b      	ldr	r3, [r3, #4]
 800ba90:	68fa      	ldr	r2, [r7, #12]
 800ba92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ba96:	f023 0302 	bic.w	r3, r3, #2
 800ba9a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa8:	4770      	bx	lr

0800baaa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800baaa:	b480      	push	{r7}
 800baac:	b085      	sub	sp, #20
 800baae:	af00      	add	r7, sp, #0
 800bab0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	68fa      	ldr	r2, [r7, #12]
 800bac0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bac4:	f023 0303 	bic.w	r3, r3, #3
 800bac8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bad0:	685b      	ldr	r3, [r3, #4]
 800bad2:	68fa      	ldr	r2, [r7, #12]
 800bad4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bad8:	f043 0302 	orr.w	r3, r3, #2
 800badc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	3714      	adds	r7, #20
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800baec:	b480      	push	{r7}
 800baee:	b085      	sub	sp, #20
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	695b      	ldr	r3, [r3, #20]
 800baf8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	68fa      	ldr	r2, [r7, #12]
 800bb00:	4013      	ands	r3, r2
 800bb02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bb04:	68fb      	ldr	r3, [r7, #12]
}
 800bb06:	4618      	mov	r0, r3
 800bb08:	3714      	adds	r7, #20
 800bb0a:	46bd      	mov	sp, r7
 800bb0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb10:	4770      	bx	lr

0800bb12 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800bb12:	b480      	push	{r7}
 800bb14:	b085      	sub	sp, #20
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	460b      	mov	r3, r1
 800bb1c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800bb22:	78fb      	ldrb	r3, [r7, #3]
 800bb24:	015a      	lsls	r2, r3, #5
 800bb26:	68fb      	ldr	r3, [r7, #12]
 800bb28:	4413      	add	r3, r2
 800bb2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb2e:	689b      	ldr	r3, [r3, #8]
 800bb30:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bb32:	78fb      	ldrb	r3, [r7, #3]
 800bb34:	015a      	lsls	r2, r3, #5
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	4413      	add	r3, r2
 800bb3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bb3e:	68db      	ldr	r3, [r3, #12]
 800bb40:	68ba      	ldr	r2, [r7, #8]
 800bb42:	4013      	ands	r3, r2
 800bb44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bb46:	68bb      	ldr	r3, [r7, #8]
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb54:	b480      	push	{r7}
 800bb56:	b085      	sub	sp, #20
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb66:	699b      	ldr	r3, [r3, #24]
 800bb68:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb70:	69db      	ldr	r3, [r3, #28]
 800bb72:	68ba      	ldr	r2, [r7, #8]
 800bb74:	4013      	ands	r3, r2
 800bb76:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	0c1b      	lsrs	r3, r3, #16
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3714      	adds	r7, #20
 800bb80:	46bd      	mov	sp, r7
 800bb82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb86:	4770      	bx	lr

0800bb88 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bb88:	b480      	push	{r7}
 800bb8a:	b085      	sub	sp, #20
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bb94:	68fb      	ldr	r3, [r7, #12]
 800bb96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb9a:	699b      	ldr	r3, [r3, #24]
 800bb9c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bb9e:	68fb      	ldr	r3, [r7, #12]
 800bba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	68ba      	ldr	r2, [r7, #8]
 800bba8:	4013      	ands	r3, r2
 800bbaa:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bbac:	68bb      	ldr	r3, [r7, #8]
 800bbae:	b29b      	uxth	r3, r3
}
 800bbb0:	4618      	mov	r0, r3
 800bbb2:	3714      	adds	r7, #20
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbbc:	b480      	push	{r7}
 800bbbe:	b085      	sub	sp, #20
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	6078      	str	r0, [r7, #4]
 800bbc4:	460b      	mov	r3, r1
 800bbc6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bbcc:	78fb      	ldrb	r3, [r7, #3]
 800bbce:	015a      	lsls	r2, r3, #5
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	4413      	add	r3, r2
 800bbd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbd8:	689b      	ldr	r3, [r3, #8]
 800bbda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbe2:	695b      	ldr	r3, [r3, #20]
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	4013      	ands	r3, r2
 800bbe8:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bbea:	68bb      	ldr	r3, [r7, #8]
}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3714      	adds	r7, #20
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf6:	4770      	bx	lr

0800bbf8 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b087      	sub	sp, #28
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
 800bc00:	460b      	mov	r3, r1
 800bc02:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bc08:	697b      	ldr	r3, [r7, #20]
 800bc0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc0e:	691b      	ldr	r3, [r3, #16]
 800bc10:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bc12:	697b      	ldr	r3, [r7, #20]
 800bc14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bc1a:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bc1c:	78fb      	ldrb	r3, [r7, #3]
 800bc1e:	f003 030f 	and.w	r3, r3, #15
 800bc22:	68fa      	ldr	r2, [r7, #12]
 800bc24:	fa22 f303 	lsr.w	r3, r2, r3
 800bc28:	01db      	lsls	r3, r3, #7
 800bc2a:	b2db      	uxtb	r3, r3
 800bc2c:	693a      	ldr	r2, [r7, #16]
 800bc2e:	4313      	orrs	r3, r2
 800bc30:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bc32:	78fb      	ldrb	r3, [r7, #3]
 800bc34:	015a      	lsls	r2, r3, #5
 800bc36:	697b      	ldr	r3, [r7, #20]
 800bc38:	4413      	add	r3, r2
 800bc3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc3e:	689b      	ldr	r3, [r3, #8]
 800bc40:	693a      	ldr	r2, [r7, #16]
 800bc42:	4013      	ands	r3, r2
 800bc44:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc46:	68bb      	ldr	r3, [r7, #8]
}
 800bc48:	4618      	mov	r0, r3
 800bc4a:	371c      	adds	r7, #28
 800bc4c:	46bd      	mov	sp, r7
 800bc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc52:	4770      	bx	lr

0800bc54 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bc54:	b480      	push	{r7}
 800bc56:	b083      	sub	sp, #12
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	695b      	ldr	r3, [r3, #20]
 800bc60:	f003 0301 	and.w	r3, r3, #1
}
 800bc64:	4618      	mov	r0, r3
 800bc66:	370c      	adds	r7, #12
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bc7c:	68fb      	ldr	r3, [r7, #12]
 800bc7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc82:	681a      	ldr	r2, [r3, #0]
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc8a:	4619      	mov	r1, r3
 800bc8c:	4b09      	ldr	r3, [pc, #36]	; (800bcb4 <USB_ActivateSetup+0x44>)
 800bc8e:	4013      	ands	r3, r2
 800bc90:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bca4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bca6:	2300      	movs	r3, #0
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr
 800bcb4:	fffff800 	.word	0xfffff800

0800bcb8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bcb8:	b480      	push	{r7}
 800bcba:	b087      	sub	sp, #28
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	460b      	mov	r3, r1
 800bcc2:	607a      	str	r2, [r7, #4]
 800bcc4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	333c      	adds	r3, #60	; 0x3c
 800bcce:	3304      	adds	r3, #4
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	4a26      	ldr	r2, [pc, #152]	; (800bd70 <USB_EP0_OutStart+0xb8>)
 800bcd8:	4293      	cmp	r3, r2
 800bcda:	d90a      	bls.n	800bcf2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bcdc:	697b      	ldr	r3, [r7, #20]
 800bcde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bce8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcec:	d101      	bne.n	800bcf2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	e037      	b.n	800bd62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800bcf2:	697b      	ldr	r3, [r7, #20]
 800bcf4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcf8:	461a      	mov	r2, r3
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800bcfe:	697b      	ldr	r3, [r7, #20]
 800bd00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd04:	691b      	ldr	r3, [r3, #16]
 800bd06:	697a      	ldr	r2, [r7, #20]
 800bd08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800bd10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800bd12:	697b      	ldr	r3, [r7, #20]
 800bd14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	697a      	ldr	r2, [r7, #20]
 800bd1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd20:	f043 0318 	orr.w	r3, r3, #24
 800bd24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800bd26:	697b      	ldr	r3, [r7, #20]
 800bd28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd2c:	691b      	ldr	r3, [r3, #16]
 800bd2e:	697a      	ldr	r2, [r7, #20]
 800bd30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800bd38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800bd3a:	7afb      	ldrb	r3, [r7, #11]
 800bd3c:	2b01      	cmp	r3, #1
 800bd3e:	d10f      	bne.n	800bd60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd46:	461a      	mov	r2, r3
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	697a      	ldr	r2, [r7, #20]
 800bd56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bd5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800bd5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bd60:	2300      	movs	r3, #0
}
 800bd62:	4618      	mov	r0, r3
 800bd64:	371c      	adds	r7, #28
 800bd66:	46bd      	mov	sp, r7
 800bd68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6c:	4770      	bx	lr
 800bd6e:	bf00      	nop
 800bd70:	4f54300a 	.word	0x4f54300a

0800bd74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bd74:	b480      	push	{r7}
 800bd76:	b085      	sub	sp, #20
 800bd78:	af00      	add	r7, sp, #0
 800bd7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	3301      	adds	r3, #1
 800bd84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bd86:	68fb      	ldr	r3, [r7, #12]
 800bd88:	4a13      	ldr	r2, [pc, #76]	; (800bdd8 <USB_CoreReset+0x64>)
 800bd8a:	4293      	cmp	r3, r2
 800bd8c:	d901      	bls.n	800bd92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bd8e:	2303      	movs	r3, #3
 800bd90:	e01b      	b.n	800bdca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	691b      	ldr	r3, [r3, #16]
 800bd96:	2b00      	cmp	r3, #0
 800bd98:	daf2      	bge.n	800bd80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	691b      	ldr	r3, [r3, #16]
 800bda2:	f043 0201 	orr.w	r2, r3, #1
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3301      	adds	r3, #1
 800bdae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	4a09      	ldr	r2, [pc, #36]	; (800bdd8 <USB_CoreReset+0x64>)
 800bdb4:	4293      	cmp	r3, r2
 800bdb6:	d901      	bls.n	800bdbc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bdb8:	2303      	movs	r3, #3
 800bdba:	e006      	b.n	800bdca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	691b      	ldr	r3, [r3, #16]
 800bdc0:	f003 0301 	and.w	r3, r3, #1
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d0f0      	beq.n	800bdaa <USB_CoreReset+0x36>

  return HAL_OK;
 800bdc8:	2300      	movs	r3, #0
}
 800bdca:	4618      	mov	r0, r3
 800bdcc:	3714      	adds	r7, #20
 800bdce:	46bd      	mov	sp, r7
 800bdd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop
 800bdd8:	00030d40 	.word	0x00030d40

0800bddc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bddc:	b084      	sub	sp, #16
 800bdde:	b580      	push	{r7, lr}
 800bde0:	b086      	sub	sp, #24
 800bde2:	af00      	add	r7, sp, #0
 800bde4:	6078      	str	r0, [r7, #4]
 800bde6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bdea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bdee:	2300      	movs	r3, #0
 800bdf0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bdfc:	461a      	mov	r2, r3
 800bdfe:	2300      	movs	r3, #0
 800be00:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be06:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be16:	2b00      	cmp	r3, #0
 800be18:	d018      	beq.n	800be4c <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800be1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be1c:	2b01      	cmp	r3, #1
 800be1e:	d10a      	bne.n	800be36 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	68fa      	ldr	r2, [r7, #12]
 800be2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be2e:	f043 0304 	orr.w	r3, r3, #4
 800be32:	6013      	str	r3, [r2, #0]
 800be34:	e014      	b.n	800be60 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800be36:	68fb      	ldr	r3, [r7, #12]
 800be38:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68fa      	ldr	r2, [r7, #12]
 800be40:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be44:	f023 0304 	bic.w	r3, r3, #4
 800be48:	6013      	str	r3, [r2, #0]
 800be4a:	e009      	b.n	800be60 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be52:	681b      	ldr	r3, [r3, #0]
 800be54:	68fa      	ldr	r2, [r7, #12]
 800be56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800be5a:	f023 0304 	bic.w	r3, r3, #4
 800be5e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800be60:	2110      	movs	r1, #16
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7fe fe14 	bl	800aa90 <USB_FlushTxFifo>
 800be68:	4603      	mov	r3, r0
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	d001      	beq.n	800be72 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800be6e:	2301      	movs	r3, #1
 800be70:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f7fe fe40 	bl	800aaf8 <USB_FlushRxFifo>
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800be7e:	2301      	movs	r3, #1
 800be80:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800be82:	2300      	movs	r3, #0
 800be84:	613b      	str	r3, [r7, #16]
 800be86:	e015      	b.n	800beb4 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800be88:	693b      	ldr	r3, [r7, #16]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800be94:	461a      	mov	r2, r3
 800be96:	f04f 33ff 	mov.w	r3, #4294967295
 800be9a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	015a      	lsls	r2, r3, #5
 800bea0:	68fb      	ldr	r3, [r7, #12]
 800bea2:	4413      	add	r3, r2
 800bea4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bea8:	461a      	mov	r2, r3
 800beaa:	2300      	movs	r3, #0
 800beac:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	3301      	adds	r3, #1
 800beb2:	613b      	str	r3, [r7, #16]
 800beb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beb6:	693a      	ldr	r2, [r7, #16]
 800beb8:	429a      	cmp	r2, r3
 800beba:	d3e5      	bcc.n	800be88 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	2200      	movs	r2, #0
 800bec0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bec2:	687b      	ldr	r3, [r7, #4]
 800bec4:	f04f 32ff 	mov.w	r2, #4294967295
 800bec8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bece:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d00b      	beq.n	800beee <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bedc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a13      	ldr	r2, [pc, #76]	; (800bf30 <USB_HostInit+0x154>)
 800bee2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	4a13      	ldr	r2, [pc, #76]	; (800bf34 <USB_HostInit+0x158>)
 800bee8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800beec:	e009      	b.n	800bf02 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	2280      	movs	r2, #128	; 0x80
 800bef2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	4a10      	ldr	r2, [pc, #64]	; (800bf38 <USB_HostInit+0x15c>)
 800bef8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	4a0f      	ldr	r2, [pc, #60]	; (800bf3c <USB_HostInit+0x160>)
 800befe:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bf02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d105      	bne.n	800bf14 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	699b      	ldr	r3, [r3, #24]
 800bf0c:	f043 0210 	orr.w	r2, r3, #16
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	699a      	ldr	r2, [r3, #24]
 800bf18:	4b09      	ldr	r3, [pc, #36]	; (800bf40 <USB_HostInit+0x164>)
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	687a      	ldr	r2, [r7, #4]
 800bf1e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800bf20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf22:	4618      	mov	r0, r3
 800bf24:	3718      	adds	r7, #24
 800bf26:	46bd      	mov	sp, r7
 800bf28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf2c:	b004      	add	sp, #16
 800bf2e:	4770      	bx	lr
 800bf30:	01000200 	.word	0x01000200
 800bf34:	00e00300 	.word	0x00e00300
 800bf38:	00600080 	.word	0x00600080
 800bf3c:	004000e0 	.word	0x004000e0
 800bf40:	a3200008 	.word	0xa3200008

0800bf44 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bf44:	b480      	push	{r7}
 800bf46:	b085      	sub	sp, #20
 800bf48:	af00      	add	r7, sp, #0
 800bf4a:	6078      	str	r0, [r7, #4]
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bf54:	68fb      	ldr	r3, [r7, #12]
 800bf56:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	68fa      	ldr	r2, [r7, #12]
 800bf5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf62:	f023 0303 	bic.w	r3, r3, #3
 800bf66:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bf68:	68fb      	ldr	r3, [r7, #12]
 800bf6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf6e:	681a      	ldr	r2, [r3, #0]
 800bf70:	78fb      	ldrb	r3, [r7, #3]
 800bf72:	f003 0303 	and.w	r3, r3, #3
 800bf76:	68f9      	ldr	r1, [r7, #12]
 800bf78:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800bf7c:	4313      	orrs	r3, r2
 800bf7e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bf80:	78fb      	ldrb	r3, [r7, #3]
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d107      	bne.n	800bf96 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf8c:	461a      	mov	r2, r3
 800bf8e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800bf92:	6053      	str	r3, [r2, #4]
 800bf94:	e009      	b.n	800bfaa <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800bf96:	78fb      	ldrb	r3, [r7, #3]
 800bf98:	2b02      	cmp	r3, #2
 800bf9a:	d106      	bne.n	800bfaa <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f241 7370 	movw	r3, #6000	; 0x1770
 800bfa8:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800bfaa:	2300      	movs	r3, #0
}
 800bfac:	4618      	mov	r0, r3
 800bfae:	3714      	adds	r7, #20
 800bfb0:	46bd      	mov	sp, r7
 800bfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb6:	4770      	bx	lr

0800bfb8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800bfc4:	2300      	movs	r3, #0
 800bfc6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800bfd2:	68bb      	ldr	r3, [r7, #8]
 800bfd4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800bfd8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800bfda:	68bb      	ldr	r3, [r7, #8]
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bfe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bfe6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800bfe8:	2064      	movs	r0, #100	; 0x64
 800bfea:	f7f5 ffdd 	bl	8001fa8 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800bfee:	68bb      	ldr	r3, [r7, #8]
 800bff0:	68fa      	ldr	r2, [r7, #12]
 800bff2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800bff6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bffa:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800bffc:	200a      	movs	r0, #10
 800bffe:	f7f5 ffd3 	bl	8001fa8 <HAL_Delay>

  return HAL_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3710      	adds	r7, #16
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}

0800c00c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c00c:	b480      	push	{r7}
 800c00e:	b085      	sub	sp, #20
 800c010:	af00      	add	r7, sp, #0
 800c012:	6078      	str	r0, [r7, #4]
 800c014:	460b      	mov	r3, r1
 800c016:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c01c:	2300      	movs	r3, #0
 800c01e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c030:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d109      	bne.n	800c050 <USB_DriveVbus+0x44>
 800c03c:	78fb      	ldrb	r3, [r7, #3]
 800c03e:	2b01      	cmp	r3, #1
 800c040:	d106      	bne.n	800c050 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c042:	68bb      	ldr	r3, [r7, #8]
 800c044:	68fa      	ldr	r2, [r7, #12]
 800c046:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c04a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c04e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c05a:	d109      	bne.n	800c070 <USB_DriveVbus+0x64>
 800c05c:	78fb      	ldrb	r3, [r7, #3]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d106      	bne.n	800c070 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c06a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c06e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c070:	2300      	movs	r3, #0
}
 800c072:	4618      	mov	r0, r3
 800c074:	3714      	adds	r7, #20
 800c076:	46bd      	mov	sp, r7
 800c078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07c:	4770      	bx	lr

0800c07e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c07e:	b480      	push	{r7}
 800c080:	b085      	sub	sp, #20
 800c082:	af00      	add	r7, sp, #0
 800c084:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c08a:	2300      	movs	r3, #0
 800c08c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c094:	681b      	ldr	r3, [r3, #0]
 800c096:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c098:	68bb      	ldr	r3, [r7, #8]
 800c09a:	0c5b      	lsrs	r3, r3, #17
 800c09c:	f003 0303 	and.w	r3, r3, #3
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0be:	689b      	ldr	r3, [r3, #8]
 800c0c0:	b29b      	uxth	r3, r3
}
 800c0c2:	4618      	mov	r0, r3
 800c0c4:	3714      	adds	r7, #20
 800c0c6:	46bd      	mov	sp, r7
 800c0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0cc:	4770      	bx	lr
	...

0800c0d0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b088      	sub	sp, #32
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	4608      	mov	r0, r1
 800c0da:	4611      	mov	r1, r2
 800c0dc:	461a      	mov	r2, r3
 800c0de:	4603      	mov	r3, r0
 800c0e0:	70fb      	strb	r3, [r7, #3]
 800c0e2:	460b      	mov	r3, r1
 800c0e4:	70bb      	strb	r3, [r7, #2]
 800c0e6:	4613      	mov	r3, r2
 800c0e8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c0f2:	78fb      	ldrb	r3, [r7, #3]
 800c0f4:	015a      	lsls	r2, r3, #5
 800c0f6:	693b      	ldr	r3, [r7, #16]
 800c0f8:	4413      	add	r3, r2
 800c0fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c0fe:	461a      	mov	r2, r3
 800c100:	f04f 33ff 	mov.w	r3, #4294967295
 800c104:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c106:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c10a:	2b03      	cmp	r3, #3
 800c10c:	d87e      	bhi.n	800c20c <USB_HC_Init+0x13c>
 800c10e:	a201      	add	r2, pc, #4	; (adr r2, 800c114 <USB_HC_Init+0x44>)
 800c110:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c114:	0800c125 	.word	0x0800c125
 800c118:	0800c1cf 	.word	0x0800c1cf
 800c11c:	0800c125 	.word	0x0800c125
 800c120:	0800c191 	.word	0x0800c191
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c124:	78fb      	ldrb	r3, [r7, #3]
 800c126:	015a      	lsls	r2, r3, #5
 800c128:	693b      	ldr	r3, [r7, #16]
 800c12a:	4413      	add	r3, r2
 800c12c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c130:	461a      	mov	r2, r3
 800c132:	f240 439d 	movw	r3, #1181	; 0x49d
 800c136:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c138:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	da10      	bge.n	800c162 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c140:	78fb      	ldrb	r3, [r7, #3]
 800c142:	015a      	lsls	r2, r3, #5
 800c144:	693b      	ldr	r3, [r7, #16]
 800c146:	4413      	add	r3, r2
 800c148:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c14c:	68db      	ldr	r3, [r3, #12]
 800c14e:	78fa      	ldrb	r2, [r7, #3]
 800c150:	0151      	lsls	r1, r2, #5
 800c152:	693a      	ldr	r2, [r7, #16]
 800c154:	440a      	add	r2, r1
 800c156:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c15a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c15e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c160:	e057      	b.n	800c212 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c162:	687b      	ldr	r3, [r7, #4]
 800c164:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d051      	beq.n	800c212 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c16e:	78fb      	ldrb	r3, [r7, #3]
 800c170:	015a      	lsls	r2, r3, #5
 800c172:	693b      	ldr	r3, [r7, #16]
 800c174:	4413      	add	r3, r2
 800c176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c17a:	68db      	ldr	r3, [r3, #12]
 800c17c:	78fa      	ldrb	r2, [r7, #3]
 800c17e:	0151      	lsls	r1, r2, #5
 800c180:	693a      	ldr	r2, [r7, #16]
 800c182:	440a      	add	r2, r1
 800c184:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c188:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c18c:	60d3      	str	r3, [r2, #12]
      break;
 800c18e:	e040      	b.n	800c212 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c190:	78fb      	ldrb	r3, [r7, #3]
 800c192:	015a      	lsls	r2, r3, #5
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	4413      	add	r3, r2
 800c198:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c19c:	461a      	mov	r2, r3
 800c19e:	f240 639d 	movw	r3, #1693	; 0x69d
 800c1a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c1a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	da34      	bge.n	800c216 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c1ac:	78fb      	ldrb	r3, [r7, #3]
 800c1ae:	015a      	lsls	r2, r3, #5
 800c1b0:	693b      	ldr	r3, [r7, #16]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1b8:	68db      	ldr	r3, [r3, #12]
 800c1ba:	78fa      	ldrb	r2, [r7, #3]
 800c1bc:	0151      	lsls	r1, r2, #5
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	440a      	add	r2, r1
 800c1c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c1c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c1ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c1cc:	e023      	b.n	800c216 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c1ce:	78fb      	ldrb	r3, [r7, #3]
 800c1d0:	015a      	lsls	r2, r3, #5
 800c1d2:	693b      	ldr	r3, [r7, #16]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1da:	461a      	mov	r2, r3
 800c1dc:	f240 2325 	movw	r3, #549	; 0x225
 800c1e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c1e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	da17      	bge.n	800c21a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c1ea:	78fb      	ldrb	r3, [r7, #3]
 800c1ec:	015a      	lsls	r2, r3, #5
 800c1ee:	693b      	ldr	r3, [r7, #16]
 800c1f0:	4413      	add	r3, r2
 800c1f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c1f6:	68db      	ldr	r3, [r3, #12]
 800c1f8:	78fa      	ldrb	r2, [r7, #3]
 800c1fa:	0151      	lsls	r1, r2, #5
 800c1fc:	693a      	ldr	r2, [r7, #16]
 800c1fe:	440a      	add	r2, r1
 800c200:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c204:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c208:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c20a:	e006      	b.n	800c21a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c20c:	2301      	movs	r3, #1
 800c20e:	77fb      	strb	r3, [r7, #31]
      break;
 800c210:	e004      	b.n	800c21c <USB_HC_Init+0x14c>
      break;
 800c212:	bf00      	nop
 800c214:	e002      	b.n	800c21c <USB_HC_Init+0x14c>
      break;
 800c216:	bf00      	nop
 800c218:	e000      	b.n	800c21c <USB_HC_Init+0x14c>
      break;
 800c21a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c21c:	78fb      	ldrb	r3, [r7, #3]
 800c21e:	015a      	lsls	r2, r3, #5
 800c220:	693b      	ldr	r3, [r7, #16]
 800c222:	4413      	add	r3, r2
 800c224:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c228:	68db      	ldr	r3, [r3, #12]
 800c22a:	78fa      	ldrb	r2, [r7, #3]
 800c22c:	0151      	lsls	r1, r2, #5
 800c22e:	693a      	ldr	r2, [r7, #16]
 800c230:	440a      	add	r2, r1
 800c232:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c236:	f043 0302 	orr.w	r3, r3, #2
 800c23a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c23c:	693b      	ldr	r3, [r7, #16]
 800c23e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c242:	699a      	ldr	r2, [r3, #24]
 800c244:	78fb      	ldrb	r3, [r7, #3]
 800c246:	f003 030f 	and.w	r3, r3, #15
 800c24a:	2101      	movs	r1, #1
 800c24c:	fa01 f303 	lsl.w	r3, r1, r3
 800c250:	6939      	ldr	r1, [r7, #16]
 800c252:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c256:	4313      	orrs	r3, r2
 800c258:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	699b      	ldr	r3, [r3, #24]
 800c25e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c266:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	da03      	bge.n	800c276 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c26e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c272:	61bb      	str	r3, [r7, #24]
 800c274:	e001      	b.n	800c27a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c276:	2300      	movs	r3, #0
 800c278:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c27a:	6878      	ldr	r0, [r7, #4]
 800c27c:	f7ff feff 	bl	800c07e <USB_GetHostSpeed>
 800c280:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c282:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c286:	2b02      	cmp	r3, #2
 800c288:	d106      	bne.n	800c298 <USB_HC_Init+0x1c8>
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	2b02      	cmp	r3, #2
 800c28e:	d003      	beq.n	800c298 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c290:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c294:	617b      	str	r3, [r7, #20]
 800c296:	e001      	b.n	800c29c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c298:	2300      	movs	r3, #0
 800c29a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c29c:	787b      	ldrb	r3, [r7, #1]
 800c29e:	059b      	lsls	r3, r3, #22
 800c2a0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c2a4:	78bb      	ldrb	r3, [r7, #2]
 800c2a6:	02db      	lsls	r3, r3, #11
 800c2a8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c2ac:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c2ae:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2b2:	049b      	lsls	r3, r3, #18
 800c2b4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c2b8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c2ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c2bc:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c2c0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c2c6:	78fb      	ldrb	r3, [r7, #3]
 800c2c8:	0159      	lsls	r1, r3, #5
 800c2ca:	693b      	ldr	r3, [r7, #16]
 800c2cc:	440b      	add	r3, r1
 800c2ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2d2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c2d8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c2da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2de:	2b03      	cmp	r3, #3
 800c2e0:	d003      	beq.n	800c2ea <USB_HC_Init+0x21a>
 800c2e2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c2e6:	2b01      	cmp	r3, #1
 800c2e8:	d10f      	bne.n	800c30a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c2ea:	78fb      	ldrb	r3, [r7, #3]
 800c2ec:	015a      	lsls	r2, r3, #5
 800c2ee:	693b      	ldr	r3, [r7, #16]
 800c2f0:	4413      	add	r3, r2
 800c2f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	78fa      	ldrb	r2, [r7, #3]
 800c2fa:	0151      	lsls	r1, r2, #5
 800c2fc:	693a      	ldr	r2, [r7, #16]
 800c2fe:	440a      	add	r2, r1
 800c300:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c304:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c308:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c30a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3720      	adds	r7, #32
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}

0800c314 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c314:	b580      	push	{r7, lr}
 800c316:	b08c      	sub	sp, #48	; 0x30
 800c318:	af02      	add	r7, sp, #8
 800c31a:	60f8      	str	r0, [r7, #12]
 800c31c:	60b9      	str	r1, [r7, #8]
 800c31e:	4613      	mov	r3, r2
 800c320:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	785b      	ldrb	r3, [r3, #1]
 800c32a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c32c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c330:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	d02d      	beq.n	800c39a <USB_HC_StartXfer+0x86>
 800c33e:	68bb      	ldr	r3, [r7, #8]
 800c340:	791b      	ldrb	r3, [r3, #4]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d129      	bne.n	800c39a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c346:	79fb      	ldrb	r3, [r7, #7]
 800c348:	2b01      	cmp	r3, #1
 800c34a:	d117      	bne.n	800c37c <USB_HC_StartXfer+0x68>
 800c34c:	68bb      	ldr	r3, [r7, #8]
 800c34e:	79db      	ldrb	r3, [r3, #7]
 800c350:	2b00      	cmp	r3, #0
 800c352:	d003      	beq.n	800c35c <USB_HC_StartXfer+0x48>
 800c354:	68bb      	ldr	r3, [r7, #8]
 800c356:	79db      	ldrb	r3, [r3, #7]
 800c358:	2b02      	cmp	r3, #2
 800c35a:	d10f      	bne.n	800c37c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c35c:	69fb      	ldr	r3, [r7, #28]
 800c35e:	015a      	lsls	r2, r3, #5
 800c360:	6a3b      	ldr	r3, [r7, #32]
 800c362:	4413      	add	r3, r2
 800c364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c368:	68db      	ldr	r3, [r3, #12]
 800c36a:	69fa      	ldr	r2, [r7, #28]
 800c36c:	0151      	lsls	r1, r2, #5
 800c36e:	6a3a      	ldr	r2, [r7, #32]
 800c370:	440a      	add	r2, r1
 800c372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c376:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c37a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c37c:	79fb      	ldrb	r3, [r7, #7]
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d10b      	bne.n	800c39a <USB_HC_StartXfer+0x86>
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	795b      	ldrb	r3, [r3, #5]
 800c386:	2b01      	cmp	r3, #1
 800c388:	d107      	bne.n	800c39a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	785b      	ldrb	r3, [r3, #1]
 800c38e:	4619      	mov	r1, r3
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f000 fa0f 	bl	800c7b4 <USB_DoPing>
      return HAL_OK;
 800c396:	2300      	movs	r3, #0
 800c398:	e0f8      	b.n	800c58c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c39a:	68bb      	ldr	r3, [r7, #8]
 800c39c:	695b      	ldr	r3, [r3, #20]
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d018      	beq.n	800c3d4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c3a2:	68bb      	ldr	r3, [r7, #8]
 800c3a4:	695b      	ldr	r3, [r3, #20]
 800c3a6:	68ba      	ldr	r2, [r7, #8]
 800c3a8:	8912      	ldrh	r2, [r2, #8]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	68ba      	ldr	r2, [r7, #8]
 800c3b0:	8912      	ldrh	r2, [r2, #8]
 800c3b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c3b6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c3b8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c3ba:	8b7b      	ldrh	r3, [r7, #26]
 800c3bc:	429a      	cmp	r2, r3
 800c3be:	d90b      	bls.n	800c3d8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c3c0:	8b7b      	ldrh	r3, [r7, #26]
 800c3c2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c3c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3c6:	68ba      	ldr	r2, [r7, #8]
 800c3c8:	8912      	ldrh	r2, [r2, #8]
 800c3ca:	fb03 f202 	mul.w	r2, r3, r2
 800c3ce:	68bb      	ldr	r3, [r7, #8]
 800c3d0:	611a      	str	r2, [r3, #16]
 800c3d2:	e001      	b.n	800c3d8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c3d4:	2301      	movs	r3, #1
 800c3d6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	78db      	ldrb	r3, [r3, #3]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d007      	beq.n	800c3f0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c3e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c3e2:	68ba      	ldr	r2, [r7, #8]
 800c3e4:	8912      	ldrh	r2, [r2, #8]
 800c3e6:	fb03 f202 	mul.w	r2, r3, r2
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	611a      	str	r2, [r3, #16]
 800c3ee:	e003      	b.n	800c3f8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c3f0:	68bb      	ldr	r3, [r7, #8]
 800c3f2:	695a      	ldr	r2, [r3, #20]
 800c3f4:	68bb      	ldr	r3, [r7, #8]
 800c3f6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c3f8:	68bb      	ldr	r3, [r7, #8]
 800c3fa:	691b      	ldr	r3, [r3, #16]
 800c3fc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c400:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c402:	04d9      	lsls	r1, r3, #19
 800c404:	4b63      	ldr	r3, [pc, #396]	; (800c594 <USB_HC_StartXfer+0x280>)
 800c406:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c408:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	7a9b      	ldrb	r3, [r3, #10]
 800c40e:	075b      	lsls	r3, r3, #29
 800c410:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c414:	69f9      	ldr	r1, [r7, #28]
 800c416:	0148      	lsls	r0, r1, #5
 800c418:	6a39      	ldr	r1, [r7, #32]
 800c41a:	4401      	add	r1, r0
 800c41c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c420:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c422:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c424:	79fb      	ldrb	r3, [r7, #7]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d009      	beq.n	800c43e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	68d9      	ldr	r1, [r3, #12]
 800c42e:	69fb      	ldr	r3, [r7, #28]
 800c430:	015a      	lsls	r2, r3, #5
 800c432:	6a3b      	ldr	r3, [r7, #32]
 800c434:	4413      	add	r3, r2
 800c436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c43a:	460a      	mov	r2, r1
 800c43c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c43e:	6a3b      	ldr	r3, [r7, #32]
 800c440:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c444:	689b      	ldr	r3, [r3, #8]
 800c446:	f003 0301 	and.w	r3, r3, #1
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	bf0c      	ite	eq
 800c44e:	2301      	moveq	r3, #1
 800c450:	2300      	movne	r3, #0
 800c452:	b2db      	uxtb	r3, r3
 800c454:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c456:	69fb      	ldr	r3, [r7, #28]
 800c458:	015a      	lsls	r2, r3, #5
 800c45a:	6a3b      	ldr	r3, [r7, #32]
 800c45c:	4413      	add	r3, r2
 800c45e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	69fa      	ldr	r2, [r7, #28]
 800c466:	0151      	lsls	r1, r2, #5
 800c468:	6a3a      	ldr	r2, [r7, #32]
 800c46a:	440a      	add	r2, r1
 800c46c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c470:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c474:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c476:	69fb      	ldr	r3, [r7, #28]
 800c478:	015a      	lsls	r2, r3, #5
 800c47a:	6a3b      	ldr	r3, [r7, #32]
 800c47c:	4413      	add	r3, r2
 800c47e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c482:	681a      	ldr	r2, [r3, #0]
 800c484:	7e7b      	ldrb	r3, [r7, #25]
 800c486:	075b      	lsls	r3, r3, #29
 800c488:	69f9      	ldr	r1, [r7, #28]
 800c48a:	0148      	lsls	r0, r1, #5
 800c48c:	6a39      	ldr	r1, [r7, #32]
 800c48e:	4401      	add	r1, r0
 800c490:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c494:	4313      	orrs	r3, r2
 800c496:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c498:	69fb      	ldr	r3, [r7, #28]
 800c49a:	015a      	lsls	r2, r3, #5
 800c49c:	6a3b      	ldr	r3, [r7, #32]
 800c49e:	4413      	add	r3, r2
 800c4a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c4a8:	693b      	ldr	r3, [r7, #16]
 800c4aa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c4ae:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c4b0:	68bb      	ldr	r3, [r7, #8]
 800c4b2:	78db      	ldrb	r3, [r3, #3]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d004      	beq.n	800c4c2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c4b8:	693b      	ldr	r3, [r7, #16]
 800c4ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c4be:	613b      	str	r3, [r7, #16]
 800c4c0:	e003      	b.n	800c4ca <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c4c8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c4ca:	693b      	ldr	r3, [r7, #16]
 800c4cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c4d0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	015a      	lsls	r2, r3, #5
 800c4d6:	6a3b      	ldr	r3, [r7, #32]
 800c4d8:	4413      	add	r3, r2
 800c4da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c4de:	461a      	mov	r2, r3
 800c4e0:	693b      	ldr	r3, [r7, #16]
 800c4e2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c4e4:	79fb      	ldrb	r3, [r7, #7]
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d001      	beq.n	800c4ee <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	e04e      	b.n	800c58c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	78db      	ldrb	r3, [r3, #3]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d149      	bne.n	800c58a <USB_HC_StartXfer+0x276>
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	695b      	ldr	r3, [r3, #20]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d045      	beq.n	800c58a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c4fe:	68bb      	ldr	r3, [r7, #8]
 800c500:	79db      	ldrb	r3, [r3, #7]
 800c502:	2b03      	cmp	r3, #3
 800c504:	d830      	bhi.n	800c568 <USB_HC_StartXfer+0x254>
 800c506:	a201      	add	r2, pc, #4	; (adr r2, 800c50c <USB_HC_StartXfer+0x1f8>)
 800c508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50c:	0800c51d 	.word	0x0800c51d
 800c510:	0800c541 	.word	0x0800c541
 800c514:	0800c51d 	.word	0x0800c51d
 800c518:	0800c541 	.word	0x0800c541
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	695b      	ldr	r3, [r3, #20]
 800c520:	3303      	adds	r3, #3
 800c522:	089b      	lsrs	r3, r3, #2
 800c524:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c526:	8afa      	ldrh	r2, [r7, #22]
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c52c:	b29b      	uxth	r3, r3
 800c52e:	429a      	cmp	r2, r3
 800c530:	d91c      	bls.n	800c56c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	699b      	ldr	r3, [r3, #24]
 800c536:	f043 0220 	orr.w	r2, r3, #32
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	619a      	str	r2, [r3, #24]
        }
        break;
 800c53e:	e015      	b.n	800c56c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c540:	68bb      	ldr	r3, [r7, #8]
 800c542:	695b      	ldr	r3, [r3, #20]
 800c544:	3303      	adds	r3, #3
 800c546:	089b      	lsrs	r3, r3, #2
 800c548:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c54a:	8afa      	ldrh	r2, [r7, #22]
 800c54c:	6a3b      	ldr	r3, [r7, #32]
 800c54e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c552:	691b      	ldr	r3, [r3, #16]
 800c554:	b29b      	uxth	r3, r3
 800c556:	429a      	cmp	r2, r3
 800c558:	d90a      	bls.n	800c570 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	699b      	ldr	r3, [r3, #24]
 800c55e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c562:	68fb      	ldr	r3, [r7, #12]
 800c564:	619a      	str	r2, [r3, #24]
        }
        break;
 800c566:	e003      	b.n	800c570 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c568:	bf00      	nop
 800c56a:	e002      	b.n	800c572 <USB_HC_StartXfer+0x25e>
        break;
 800c56c:	bf00      	nop
 800c56e:	e000      	b.n	800c572 <USB_HC_StartXfer+0x25e>
        break;
 800c570:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c572:	68bb      	ldr	r3, [r7, #8]
 800c574:	68d9      	ldr	r1, [r3, #12]
 800c576:	68bb      	ldr	r3, [r7, #8]
 800c578:	785a      	ldrb	r2, [r3, #1]
 800c57a:	68bb      	ldr	r3, [r7, #8]
 800c57c:	695b      	ldr	r3, [r3, #20]
 800c57e:	b29b      	uxth	r3, r3
 800c580:	2000      	movs	r0, #0
 800c582:	9000      	str	r0, [sp, #0]
 800c584:	68f8      	ldr	r0, [r7, #12]
 800c586:	f7ff f8df 	bl	800b748 <USB_WritePacket>
  }

  return HAL_OK;
 800c58a:	2300      	movs	r3, #0
}
 800c58c:	4618      	mov	r0, r3
 800c58e:	3728      	adds	r7, #40	; 0x28
 800c590:	46bd      	mov	sp, r7
 800c592:	bd80      	pop	{r7, pc}
 800c594:	1ff80000 	.word	0x1ff80000

0800c598 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c598:	b480      	push	{r7}
 800c59a:	b085      	sub	sp, #20
 800c59c:	af00      	add	r7, sp, #0
 800c59e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c5a4:	68fb      	ldr	r3, [r7, #12]
 800c5a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c5aa:	695b      	ldr	r3, [r3, #20]
 800c5ac:	b29b      	uxth	r3, r3
}
 800c5ae:	4618      	mov	r0, r3
 800c5b0:	3714      	adds	r7, #20
 800c5b2:	46bd      	mov	sp, r7
 800c5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5b8:	4770      	bx	lr

0800c5ba <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c5ba:	b480      	push	{r7}
 800c5bc:	b089      	sub	sp, #36	; 0x24
 800c5be:	af00      	add	r7, sp, #0
 800c5c0:	6078      	str	r0, [r7, #4]
 800c5c2:	460b      	mov	r3, r1
 800c5c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c5ca:	78fb      	ldrb	r3, [r7, #3]
 800c5cc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	015a      	lsls	r2, r3, #5
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	4413      	add	r3, r2
 800c5da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5de:	681b      	ldr	r3, [r3, #0]
 800c5e0:	0c9b      	lsrs	r3, r3, #18
 800c5e2:	f003 0303 	and.w	r3, r3, #3
 800c5e6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c5e8:	69bb      	ldr	r3, [r7, #24]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	69fb      	ldr	r3, [r7, #28]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	0fdb      	lsrs	r3, r3, #31
 800c5f8:	f003 0301 	and.w	r3, r3, #1
 800c5fc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	689b      	ldr	r3, [r3, #8]
 800c602:	f003 0320 	and.w	r3, r3, #32
 800c606:	2b20      	cmp	r3, #32
 800c608:	d104      	bne.n	800c614 <USB_HC_Halt+0x5a>
 800c60a:	693b      	ldr	r3, [r7, #16]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d101      	bne.n	800c614 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c610:	2300      	movs	r3, #0
 800c612:	e0c8      	b.n	800c7a6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c614:	697b      	ldr	r3, [r7, #20]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d002      	beq.n	800c620 <USB_HC_Halt+0x66>
 800c61a:	697b      	ldr	r3, [r7, #20]
 800c61c:	2b02      	cmp	r3, #2
 800c61e:	d163      	bne.n	800c6e8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c620:	69bb      	ldr	r3, [r7, #24]
 800c622:	015a      	lsls	r2, r3, #5
 800c624:	69fb      	ldr	r3, [r7, #28]
 800c626:	4413      	add	r3, r2
 800c628:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c62c:	681b      	ldr	r3, [r3, #0]
 800c62e:	69ba      	ldr	r2, [r7, #24]
 800c630:	0151      	lsls	r1, r2, #5
 800c632:	69fa      	ldr	r2, [r7, #28]
 800c634:	440a      	add	r2, r1
 800c636:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c63a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c63e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	689b      	ldr	r3, [r3, #8]
 800c644:	f003 0320 	and.w	r3, r3, #32
 800c648:	2b00      	cmp	r3, #0
 800c64a:	f040 80ab 	bne.w	800c7a4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c652:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c656:	2b00      	cmp	r3, #0
 800c658:	d133      	bne.n	800c6c2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c65a:	69bb      	ldr	r3, [r7, #24]
 800c65c:	015a      	lsls	r2, r3, #5
 800c65e:	69fb      	ldr	r3, [r7, #28]
 800c660:	4413      	add	r3, r2
 800c662:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	69ba      	ldr	r2, [r7, #24]
 800c66a:	0151      	lsls	r1, r2, #5
 800c66c:	69fa      	ldr	r2, [r7, #28]
 800c66e:	440a      	add	r2, r1
 800c670:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c674:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c678:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c67a:	69bb      	ldr	r3, [r7, #24]
 800c67c:	015a      	lsls	r2, r3, #5
 800c67e:	69fb      	ldr	r3, [r7, #28]
 800c680:	4413      	add	r3, r2
 800c682:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	69ba      	ldr	r2, [r7, #24]
 800c68a:	0151      	lsls	r1, r2, #5
 800c68c:	69fa      	ldr	r2, [r7, #28]
 800c68e:	440a      	add	r2, r1
 800c690:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c694:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c698:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	3301      	adds	r3, #1
 800c69e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c6a0:	68fb      	ldr	r3, [r7, #12]
 800c6a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c6a6:	d81d      	bhi.n	800c6e4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c6a8:	69bb      	ldr	r3, [r7, #24]
 800c6aa:	015a      	lsls	r2, r3, #5
 800c6ac:	69fb      	ldr	r3, [r7, #28]
 800c6ae:	4413      	add	r3, r2
 800c6b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6b4:	681b      	ldr	r3, [r3, #0]
 800c6b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c6ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c6be:	d0ec      	beq.n	800c69a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c6c0:	e070      	b.n	800c7a4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c6c2:	69bb      	ldr	r3, [r7, #24]
 800c6c4:	015a      	lsls	r2, r3, #5
 800c6c6:	69fb      	ldr	r3, [r7, #28]
 800c6c8:	4413      	add	r3, r2
 800c6ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	69ba      	ldr	r2, [r7, #24]
 800c6d2:	0151      	lsls	r1, r2, #5
 800c6d4:	69fa      	ldr	r2, [r7, #28]
 800c6d6:	440a      	add	r2, r1
 800c6d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6dc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c6e0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c6e2:	e05f      	b.n	800c7a4 <USB_HC_Halt+0x1ea>
            break;
 800c6e4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c6e6:	e05d      	b.n	800c7a4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c6e8:	69bb      	ldr	r3, [r7, #24]
 800c6ea:	015a      	lsls	r2, r3, #5
 800c6ec:	69fb      	ldr	r3, [r7, #28]
 800c6ee:	4413      	add	r3, r2
 800c6f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	69ba      	ldr	r2, [r7, #24]
 800c6f8:	0151      	lsls	r1, r2, #5
 800c6fa:	69fa      	ldr	r2, [r7, #28]
 800c6fc:	440a      	add	r2, r1
 800c6fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c702:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c706:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c70e:	691b      	ldr	r3, [r3, #16]
 800c710:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c714:	2b00      	cmp	r3, #0
 800c716:	d133      	bne.n	800c780 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c718:	69bb      	ldr	r3, [r7, #24]
 800c71a:	015a      	lsls	r2, r3, #5
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	4413      	add	r3, r2
 800c720:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c724:	681b      	ldr	r3, [r3, #0]
 800c726:	69ba      	ldr	r2, [r7, #24]
 800c728:	0151      	lsls	r1, r2, #5
 800c72a:	69fa      	ldr	r2, [r7, #28]
 800c72c:	440a      	add	r2, r1
 800c72e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c732:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c736:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c738:	69bb      	ldr	r3, [r7, #24]
 800c73a:	015a      	lsls	r2, r3, #5
 800c73c:	69fb      	ldr	r3, [r7, #28]
 800c73e:	4413      	add	r3, r2
 800c740:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c744:	681b      	ldr	r3, [r3, #0]
 800c746:	69ba      	ldr	r2, [r7, #24]
 800c748:	0151      	lsls	r1, r2, #5
 800c74a:	69fa      	ldr	r2, [r7, #28]
 800c74c:	440a      	add	r2, r1
 800c74e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c752:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c756:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	3301      	adds	r3, #1
 800c75c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c764:	d81d      	bhi.n	800c7a2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c766:	69bb      	ldr	r3, [r7, #24]
 800c768:	015a      	lsls	r2, r3, #5
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	4413      	add	r3, r2
 800c76e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c778:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c77c:	d0ec      	beq.n	800c758 <USB_HC_Halt+0x19e>
 800c77e:	e011      	b.n	800c7a4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	015a      	lsls	r2, r3, #5
 800c784:	69fb      	ldr	r3, [r7, #28]
 800c786:	4413      	add	r3, r2
 800c788:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	69ba      	ldr	r2, [r7, #24]
 800c790:	0151      	lsls	r1, r2, #5
 800c792:	69fa      	ldr	r2, [r7, #28]
 800c794:	440a      	add	r2, r1
 800c796:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c79a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c79e:	6013      	str	r3, [r2, #0]
 800c7a0:	e000      	b.n	800c7a4 <USB_HC_Halt+0x1ea>
          break;
 800c7a2:	bf00      	nop
    }
  }

  return HAL_OK;
 800c7a4:	2300      	movs	r3, #0
}
 800c7a6:	4618      	mov	r0, r3
 800c7a8:	3724      	adds	r7, #36	; 0x24
 800c7aa:	46bd      	mov	sp, r7
 800c7ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b0:	4770      	bx	lr
	...

0800c7b4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	b087      	sub	sp, #28
 800c7b8:	af00      	add	r7, sp, #0
 800c7ba:	6078      	str	r0, [r7, #4]
 800c7bc:	460b      	mov	r3, r1
 800c7be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c7c4:	78fb      	ldrb	r3, [r7, #3]
 800c7c6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c7c8:	2301      	movs	r3, #1
 800c7ca:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	04da      	lsls	r2, r3, #19
 800c7d0:	4b15      	ldr	r3, [pc, #84]	; (800c828 <USB_DoPing+0x74>)
 800c7d2:	4013      	ands	r3, r2
 800c7d4:	693a      	ldr	r2, [r7, #16]
 800c7d6:	0151      	lsls	r1, r2, #5
 800c7d8:	697a      	ldr	r2, [r7, #20]
 800c7da:	440a      	add	r2, r1
 800c7dc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7e4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c7e6:	693b      	ldr	r3, [r7, #16]
 800c7e8:	015a      	lsls	r2, r3, #5
 800c7ea:	697b      	ldr	r3, [r7, #20]
 800c7ec:	4413      	add	r3, r2
 800c7ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c7f6:	68bb      	ldr	r3, [r7, #8]
 800c7f8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c7fc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c7fe:	68bb      	ldr	r3, [r7, #8]
 800c800:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c804:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c806:	693b      	ldr	r3, [r7, #16]
 800c808:	015a      	lsls	r2, r3, #5
 800c80a:	697b      	ldr	r3, [r7, #20]
 800c80c:	4413      	add	r3, r2
 800c80e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c812:	461a      	mov	r2, r3
 800c814:	68bb      	ldr	r3, [r7, #8]
 800c816:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c818:	2300      	movs	r3, #0
}
 800c81a:	4618      	mov	r0, r3
 800c81c:	371c      	adds	r7, #28
 800c81e:	46bd      	mov	sp, r7
 800c820:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c824:	4770      	bx	lr
 800c826:	bf00      	nop
 800c828:	1ff80000 	.word	0x1ff80000

0800c82c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c82c:	b580      	push	{r7, lr}
 800c82e:	b088      	sub	sp, #32
 800c830:	af00      	add	r7, sp, #0
 800c832:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c834:	2300      	movs	r3, #0
 800c836:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c83c:	2300      	movs	r3, #0
 800c83e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c840:	6878      	ldr	r0, [r7, #4]
 800c842:	f7fd ff6a 	bl	800a71a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c846:	2110      	movs	r1, #16
 800c848:	6878      	ldr	r0, [r7, #4]
 800c84a:	f7fe f921 	bl	800aa90 <USB_FlushTxFifo>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d001      	beq.n	800c858 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c854:	2301      	movs	r3, #1
 800c856:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c858:	6878      	ldr	r0, [r7, #4]
 800c85a:	f7fe f94d 	bl	800aaf8 <USB_FlushRxFifo>
 800c85e:	4603      	mov	r3, r0
 800c860:	2b00      	cmp	r3, #0
 800c862:	d001      	beq.n	800c868 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c864:	2301      	movs	r3, #1
 800c866:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c868:	2300      	movs	r3, #0
 800c86a:	61bb      	str	r3, [r7, #24]
 800c86c:	e01f      	b.n	800c8ae <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c86e:	69bb      	ldr	r3, [r7, #24]
 800c870:	015a      	lsls	r2, r3, #5
 800c872:	697b      	ldr	r3, [r7, #20]
 800c874:	4413      	add	r3, r2
 800c876:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c87e:	693b      	ldr	r3, [r7, #16]
 800c880:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c884:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c88c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c88e:	693b      	ldr	r3, [r7, #16]
 800c890:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c894:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	015a      	lsls	r2, r3, #5
 800c89a:	697b      	ldr	r3, [r7, #20]
 800c89c:	4413      	add	r3, r2
 800c89e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8a2:	461a      	mov	r2, r3
 800c8a4:	693b      	ldr	r3, [r7, #16]
 800c8a6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c8a8:	69bb      	ldr	r3, [r7, #24]
 800c8aa:	3301      	adds	r3, #1
 800c8ac:	61bb      	str	r3, [r7, #24]
 800c8ae:	69bb      	ldr	r3, [r7, #24]
 800c8b0:	2b0f      	cmp	r3, #15
 800c8b2:	d9dc      	bls.n	800c86e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c8b4:	2300      	movs	r3, #0
 800c8b6:	61bb      	str	r3, [r7, #24]
 800c8b8:	e034      	b.n	800c924 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c8ba:	69bb      	ldr	r3, [r7, #24]
 800c8bc:	015a      	lsls	r2, r3, #5
 800c8be:	697b      	ldr	r3, [r7, #20]
 800c8c0:	4413      	add	r3, r2
 800c8c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c8ca:	693b      	ldr	r3, [r7, #16]
 800c8cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c8d0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c8d2:	693b      	ldr	r3, [r7, #16]
 800c8d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8d8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c8da:	693b      	ldr	r3, [r7, #16]
 800c8dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c8e0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c8e2:	69bb      	ldr	r3, [r7, #24]
 800c8e4:	015a      	lsls	r2, r3, #5
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	4413      	add	r3, r2
 800c8ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8ee:	461a      	mov	r2, r3
 800c8f0:	693b      	ldr	r3, [r7, #16]
 800c8f2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	3301      	adds	r3, #1
 800c8f8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c900:	d80c      	bhi.n	800c91c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c902:	69bb      	ldr	r3, [r7, #24]
 800c904:	015a      	lsls	r2, r3, #5
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	4413      	add	r3, r2
 800c90a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c90e:	681b      	ldr	r3, [r3, #0]
 800c910:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c914:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c918:	d0ec      	beq.n	800c8f4 <USB_StopHost+0xc8>
 800c91a:	e000      	b.n	800c91e <USB_StopHost+0xf2>
        break;
 800c91c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800c91e:	69bb      	ldr	r3, [r7, #24]
 800c920:	3301      	adds	r3, #1
 800c922:	61bb      	str	r3, [r7, #24]
 800c924:	69bb      	ldr	r3, [r7, #24]
 800c926:	2b0f      	cmp	r3, #15
 800c928:	d9c7      	bls.n	800c8ba <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c930:	461a      	mov	r2, r3
 800c932:	f04f 33ff 	mov.w	r3, #4294967295
 800c936:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	f04f 32ff 	mov.w	r2, #4294967295
 800c93e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800c940:	6878      	ldr	r0, [r7, #4]
 800c942:	f7fd fed9 	bl	800a6f8 <USB_EnableGlobalInt>

  return ret;
 800c946:	7ffb      	ldrb	r3, [r7, #31]
}
 800c948:	4618      	mov	r0, r3
 800c94a:	3720      	adds	r7, #32
 800c94c:	46bd      	mov	sp, r7
 800c94e:	bd80      	pop	{r7, pc}

0800c950 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c950:	b580      	push	{r7, lr}
 800c952:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800c954:	4904      	ldr	r1, [pc, #16]	; (800c968 <MX_FATFS_Init+0x18>)
 800c956:	4805      	ldr	r0, [pc, #20]	; (800c96c <MX_FATFS_Init+0x1c>)
 800c958:	f004 f96a 	bl	8010c30 <FATFS_LinkDriver>
 800c95c:	4603      	mov	r3, r0
 800c95e:	461a      	mov	r2, r3
 800c960:	4b03      	ldr	r3, [pc, #12]	; (800c970 <MX_FATFS_Init+0x20>)
 800c962:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c964:	bf00      	nop
 800c966:	bd80      	pop	{r7, pc}
 800c968:	20000680 	.word	0x20000680
 800c96c:	0801485c 	.word	0x0801485c
 800c970:	2000067c 	.word	0x2000067c

0800c974 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800c974:	b580      	push	{r7, lr}
 800c976:	b082      	sub	sp, #8
 800c978:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800c97a:	2300      	movs	r3, #0
 800c97c:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800c97e:	f000 f86b 	bl	800ca58 <BSP_SD_IsDetected>
 800c982:	4603      	mov	r3, r0
 800c984:	2b01      	cmp	r3, #1
 800c986:	d001      	beq.n	800c98c <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800c988:	2302      	movs	r3, #2
 800c98a:	e005      	b.n	800c998 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800c98c:	4804      	ldr	r0, [pc, #16]	; (800c9a0 <BSP_SD_Init+0x2c>)
 800c98e:	f7fa fc89 	bl	80072a4 <HAL_SD_Init>
 800c992:	4603      	mov	r3, r0
 800c994:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800c996:	79fb      	ldrb	r3, [r7, #7]
}
 800c998:	4618      	mov	r0, r3
 800c99a:	3708      	adds	r7, #8
 800c99c:	46bd      	mov	sp, r7
 800c99e:	bd80      	pop	{r7, pc}
 800c9a0:	200003c0 	.word	0x200003c0

0800c9a4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c9a4:	b580      	push	{r7, lr}
 800c9a6:	b088      	sub	sp, #32
 800c9a8:	af02      	add	r7, sp, #8
 800c9aa:	60f8      	str	r0, [r7, #12]
 800c9ac:	60b9      	str	r1, [r7, #8]
 800c9ae:	607a      	str	r2, [r7, #4]
 800c9b0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	9300      	str	r3, [sp, #0]
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	68ba      	ldr	r2, [r7, #8]
 800c9be:	68f9      	ldr	r1, [r7, #12]
 800c9c0:	4806      	ldr	r0, [pc, #24]	; (800c9dc <BSP_SD_ReadBlocks+0x38>)
 800c9c2:	f7fa fd27 	bl	8007414 <HAL_SD_ReadBlocks>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800c9cc:	2301      	movs	r3, #1
 800c9ce:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800c9d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c9d2:	4618      	mov	r0, r3
 800c9d4:	3718      	adds	r7, #24
 800c9d6:	46bd      	mov	sp, r7
 800c9d8:	bd80      	pop	{r7, pc}
 800c9da:	bf00      	nop
 800c9dc:	200003c0 	.word	0x200003c0

0800c9e0 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b088      	sub	sp, #32
 800c9e4:	af02      	add	r7, sp, #8
 800c9e6:	60f8      	str	r0, [r7, #12]
 800c9e8:	60b9      	str	r1, [r7, #8]
 800c9ea:	607a      	str	r2, [r7, #4]
 800c9ec:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800c9ee:	2300      	movs	r3, #0
 800c9f0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800c9f2:	683b      	ldr	r3, [r7, #0]
 800c9f4:	9300      	str	r3, [sp, #0]
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	68ba      	ldr	r2, [r7, #8]
 800c9fa:	68f9      	ldr	r1, [r7, #12]
 800c9fc:	4806      	ldr	r0, [pc, #24]	; (800ca18 <BSP_SD_WriteBlocks+0x38>)
 800c9fe:	f7fa fee7 	bl	80077d0 <HAL_SD_WriteBlocks>
 800ca02:	4603      	mov	r3, r0
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d001      	beq.n	800ca0c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ca08:	2301      	movs	r3, #1
 800ca0a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ca0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3718      	adds	r7, #24
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	200003c0 	.word	0x200003c0

0800ca1c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800ca20:	4805      	ldr	r0, [pc, #20]	; (800ca38 <BSP_SD_GetCardState+0x1c>)
 800ca22:	f7fb fa2b 	bl	8007e7c <HAL_SD_GetCardState>
 800ca26:	4603      	mov	r3, r0
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	bf14      	ite	ne
 800ca2c:	2301      	movne	r3, #1
 800ca2e:	2300      	moveq	r3, #0
 800ca30:	b2db      	uxtb	r3, r3
}
 800ca32:	4618      	mov	r0, r3
 800ca34:	bd80      	pop	{r7, pc}
 800ca36:	bf00      	nop
 800ca38:	200003c0 	.word	0x200003c0

0800ca3c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800ca3c:	b580      	push	{r7, lr}
 800ca3e:	b082      	sub	sp, #8
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800ca44:	6879      	ldr	r1, [r7, #4]
 800ca46:	4803      	ldr	r0, [pc, #12]	; (800ca54 <BSP_SD_GetCardInfo+0x18>)
 800ca48:	f7fb f9ec 	bl	8007e24 <HAL_SD_GetCardInfo>
}
 800ca4c:	bf00      	nop
 800ca4e:	3708      	adds	r7, #8
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	200003c0 	.word	0x200003c0

0800ca58 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800ca58:	b580      	push	{r7, lr}
 800ca5a:	b082      	sub	sp, #8
 800ca5c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800ca5e:	2301      	movs	r3, #1
 800ca60:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800ca62:	f000 f80b 	bl	800ca7c <BSP_PlatformIsDetected>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800ca6c:	2300      	movs	r3, #0
 800ca6e:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	b2db      	uxtb	r3, r3
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3708      	adds	r7, #8
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	b082      	sub	sp, #8
 800ca80:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800ca82:	2301      	movs	r3, #1
 800ca84:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800ca86:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ca8a:	4806      	ldr	r0, [pc, #24]	; (800caa4 <BSP_PlatformIsDetected+0x28>)
 800ca8c:	f7f6 faec 	bl	8003068 <HAL_GPIO_ReadPin>
 800ca90:	4603      	mov	r3, r0
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d001      	beq.n	800ca9a <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800ca96:	2300      	movs	r3, #0
 800ca98:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
}
 800ca9c:	4618      	mov	r0, r3
 800ca9e:	3708      	adds	r7, #8
 800caa0:	46bd      	mov	sp, r7
 800caa2:	bd80      	pop	{r7, pc}
 800caa4:	40020000 	.word	0x40020000

0800caa8 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b082      	sub	sp, #8
 800caac:	af00      	add	r7, sp, #0
 800caae:	4603      	mov	r3, r0
 800cab0:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cab2:	4b0b      	ldr	r3, [pc, #44]	; (800cae0 <SD_CheckStatus+0x38>)
 800cab4:	2201      	movs	r2, #1
 800cab6:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cab8:	f7ff ffb0 	bl	800ca1c <BSP_SD_GetCardState>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d107      	bne.n	800cad2 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cac2:	4b07      	ldr	r3, [pc, #28]	; (800cae0 <SD_CheckStatus+0x38>)
 800cac4:	781b      	ldrb	r3, [r3, #0]
 800cac6:	b2db      	uxtb	r3, r3
 800cac8:	f023 0301 	bic.w	r3, r3, #1
 800cacc:	b2da      	uxtb	r2, r3
 800cace:	4b04      	ldr	r3, [pc, #16]	; (800cae0 <SD_CheckStatus+0x38>)
 800cad0:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cad2:	4b03      	ldr	r3, [pc, #12]	; (800cae0 <SD_CheckStatus+0x38>)
 800cad4:	781b      	ldrb	r3, [r3, #0]
 800cad6:	b2db      	uxtb	r3, r3
}
 800cad8:	4618      	mov	r0, r3
 800cada:	3708      	adds	r7, #8
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}
 800cae0:	20000009 	.word	0x20000009

0800cae4 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	4603      	mov	r3, r0
 800caec:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800caee:	4b0b      	ldr	r3, [pc, #44]	; (800cb1c <SD_initialize+0x38>)
 800caf0:	2201      	movs	r2, #1
 800caf2:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800caf4:	f7ff ff3e 	bl	800c974 <BSP_SD_Init>
 800caf8:	4603      	mov	r3, r0
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d107      	bne.n	800cb0e <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cafe:	79fb      	ldrb	r3, [r7, #7]
 800cb00:	4618      	mov	r0, r3
 800cb02:	f7ff ffd1 	bl	800caa8 <SD_CheckStatus>
 800cb06:	4603      	mov	r3, r0
 800cb08:	461a      	mov	r2, r3
 800cb0a:	4b04      	ldr	r3, [pc, #16]	; (800cb1c <SD_initialize+0x38>)
 800cb0c:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cb0e:	4b03      	ldr	r3, [pc, #12]	; (800cb1c <SD_initialize+0x38>)
 800cb10:	781b      	ldrb	r3, [r3, #0]
 800cb12:	b2db      	uxtb	r3, r3
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3708      	adds	r7, #8
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	20000009 	.word	0x20000009

0800cb20 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b082      	sub	sp, #8
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cb2a:	79fb      	ldrb	r3, [r7, #7]
 800cb2c:	4618      	mov	r0, r3
 800cb2e:	f7ff ffbb 	bl	800caa8 <SD_CheckStatus>
 800cb32:	4603      	mov	r3, r0
}
 800cb34:	4618      	mov	r0, r3
 800cb36:	3708      	adds	r7, #8
 800cb38:	46bd      	mov	sp, r7
 800cb3a:	bd80      	pop	{r7, pc}

0800cb3c <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cb3c:	b580      	push	{r7, lr}
 800cb3e:	b086      	sub	sp, #24
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	60b9      	str	r1, [r7, #8]
 800cb44:	607a      	str	r2, [r7, #4]
 800cb46:	603b      	str	r3, [r7, #0]
 800cb48:	4603      	mov	r3, r0
 800cb4a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb4c:	2301      	movs	r3, #1
 800cb4e:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cb50:	f04f 33ff 	mov.w	r3, #4294967295
 800cb54:	683a      	ldr	r2, [r7, #0]
 800cb56:	6879      	ldr	r1, [r7, #4]
 800cb58:	68b8      	ldr	r0, [r7, #8]
 800cb5a:	f7ff ff23 	bl	800c9a4 <BSP_SD_ReadBlocks>
 800cb5e:	4603      	mov	r3, r0
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d107      	bne.n	800cb74 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cb64:	bf00      	nop
 800cb66:	f7ff ff59 	bl	800ca1c <BSP_SD_GetCardState>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d1fa      	bne.n	800cb66 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cb70:	2300      	movs	r3, #0
 800cb72:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cb74:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3718      	adds	r7, #24
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	bd80      	pop	{r7, pc}

0800cb7e <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800cb7e:	b580      	push	{r7, lr}
 800cb80:	b086      	sub	sp, #24
 800cb82:	af00      	add	r7, sp, #0
 800cb84:	60b9      	str	r1, [r7, #8]
 800cb86:	607a      	str	r2, [r7, #4]
 800cb88:	603b      	str	r3, [r7, #0]
 800cb8a:	4603      	mov	r3, r0
 800cb8c:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800cb92:	f04f 33ff 	mov.w	r3, #4294967295
 800cb96:	683a      	ldr	r2, [r7, #0]
 800cb98:	6879      	ldr	r1, [r7, #4]
 800cb9a:	68b8      	ldr	r0, [r7, #8]
 800cb9c:	f7ff ff20 	bl	800c9e0 <BSP_SD_WriteBlocks>
 800cba0:	4603      	mov	r3, r0
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d107      	bne.n	800cbb6 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800cba6:	bf00      	nop
 800cba8:	f7ff ff38 	bl	800ca1c <BSP_SD_GetCardState>
 800cbac:	4603      	mov	r3, r0
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d1fa      	bne.n	800cba8 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cbb6:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbb8:	4618      	mov	r0, r3
 800cbba:	3718      	adds	r7, #24
 800cbbc:	46bd      	mov	sp, r7
 800cbbe:	bd80      	pop	{r7, pc}

0800cbc0 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800cbc0:	b580      	push	{r7, lr}
 800cbc2:	b08c      	sub	sp, #48	; 0x30
 800cbc4:	af00      	add	r7, sp, #0
 800cbc6:	4603      	mov	r3, r0
 800cbc8:	603a      	str	r2, [r7, #0]
 800cbca:	71fb      	strb	r3, [r7, #7]
 800cbcc:	460b      	mov	r3, r1
 800cbce:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800cbd0:	2301      	movs	r3, #1
 800cbd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cbd6:	4b25      	ldr	r3, [pc, #148]	; (800cc6c <SD_ioctl+0xac>)
 800cbd8:	781b      	ldrb	r3, [r3, #0]
 800cbda:	b2db      	uxtb	r3, r3
 800cbdc:	f003 0301 	and.w	r3, r3, #1
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d001      	beq.n	800cbe8 <SD_ioctl+0x28>
 800cbe4:	2303      	movs	r3, #3
 800cbe6:	e03c      	b.n	800cc62 <SD_ioctl+0xa2>

  switch (cmd)
 800cbe8:	79bb      	ldrb	r3, [r7, #6]
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d834      	bhi.n	800cc58 <SD_ioctl+0x98>
 800cbee:	a201      	add	r2, pc, #4	; (adr r2, 800cbf4 <SD_ioctl+0x34>)
 800cbf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbf4:	0800cc05 	.word	0x0800cc05
 800cbf8:	0800cc0d 	.word	0x0800cc0d
 800cbfc:	0800cc25 	.word	0x0800cc25
 800cc00:	0800cc3f 	.word	0x0800cc3f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cc04:	2300      	movs	r3, #0
 800cc06:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc0a:	e028      	b.n	800cc5e <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc0c:	f107 030c 	add.w	r3, r7, #12
 800cc10:	4618      	mov	r0, r3
 800cc12:	f7ff ff13 	bl	800ca3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cc16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc22:	e01c      	b.n	800cc5e <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc24:	f107 030c 	add.w	r3, r7, #12
 800cc28:	4618      	mov	r0, r3
 800cc2a:	f7ff ff07 	bl	800ca3c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cc2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc30:	b29a      	uxth	r2, r3
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cc36:	2300      	movs	r3, #0
 800cc38:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc3c:	e00f      	b.n	800cc5e <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cc3e:	f107 030c 	add.w	r3, r7, #12
 800cc42:	4618      	mov	r0, r3
 800cc44:	f7ff fefa 	bl	800ca3c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cc48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc4a:	0a5a      	lsrs	r2, r3, #9
 800cc4c:	683b      	ldr	r3, [r7, #0]
 800cc4e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cc50:	2300      	movs	r3, #0
 800cc52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cc56:	e002      	b.n	800cc5e <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cc58:	2304      	movs	r3, #4
 800cc5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cc5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cc62:	4618      	mov	r0, r3
 800cc64:	3730      	adds	r7, #48	; 0x30
 800cc66:	46bd      	mov	sp, r7
 800cc68:	bd80      	pop	{r7, pc}
 800cc6a:	bf00      	nop
 800cc6c:	20000009 	.word	0x20000009

0800cc70 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cc70:	b580      	push	{r7, lr}
 800cc72:	b084      	sub	sp, #16
 800cc74:	af00      	add	r7, sp, #0
 800cc76:	6078      	str	r0, [r7, #4]
 800cc78:	460b      	mov	r3, r1
 800cc7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cc7c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cc80:	f005 f884 	bl	8011d8c <malloc>
 800cc84:	4603      	mov	r3, r0
 800cc86:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cc88:	68fb      	ldr	r3, [r7, #12]
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d109      	bne.n	800cca2 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	32b0      	adds	r2, #176	; 0xb0
 800cc98:	2100      	movs	r1, #0
 800cc9a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cc9e:	2302      	movs	r3, #2
 800cca0:	e0d4      	b.n	800ce4c <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cca2:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cca6:	2100      	movs	r1, #0
 800cca8:	68f8      	ldr	r0, [r7, #12]
 800ccaa:	f005 f87f 	bl	8011dac <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	32b0      	adds	r2, #176	; 0xb0
 800ccb8:	68f9      	ldr	r1, [r7, #12]
 800ccba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	32b0      	adds	r2, #176	; 0xb0
 800ccc8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	7c1b      	ldrb	r3, [r3, #16]
 800ccd6:	2b00      	cmp	r3, #0
 800ccd8:	d138      	bne.n	800cd4c <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ccda:	4b5e      	ldr	r3, [pc, #376]	; (800ce54 <USBD_CDC_Init+0x1e4>)
 800ccdc:	7819      	ldrb	r1, [r3, #0]
 800ccde:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cce2:	2202      	movs	r2, #2
 800cce4:	6878      	ldr	r0, [r7, #4]
 800cce6:	f004 fb6c 	bl	80113c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ccea:	4b5a      	ldr	r3, [pc, #360]	; (800ce54 <USBD_CDC_Init+0x1e4>)
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	f003 020f 	and.w	r2, r3, #15
 800ccf2:	6879      	ldr	r1, [r7, #4]
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	440b      	add	r3, r1
 800ccfe:	3324      	adds	r3, #36	; 0x24
 800cd00:	2201      	movs	r2, #1
 800cd02:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cd04:	4b54      	ldr	r3, [pc, #336]	; (800ce58 <USBD_CDC_Init+0x1e8>)
 800cd06:	7819      	ldrb	r1, [r3, #0]
 800cd08:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cd0c:	2202      	movs	r2, #2
 800cd0e:	6878      	ldr	r0, [r7, #4]
 800cd10:	f004 fb57 	bl	80113c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd14:	4b50      	ldr	r3, [pc, #320]	; (800ce58 <USBD_CDC_Init+0x1e8>)
 800cd16:	781b      	ldrb	r3, [r3, #0]
 800cd18:	f003 020f 	and.w	r2, r3, #15
 800cd1c:	6879      	ldr	r1, [r7, #4]
 800cd1e:	4613      	mov	r3, r2
 800cd20:	009b      	lsls	r3, r3, #2
 800cd22:	4413      	add	r3, r2
 800cd24:	009b      	lsls	r3, r3, #2
 800cd26:	440b      	add	r3, r1
 800cd28:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd2c:	2201      	movs	r2, #1
 800cd2e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800cd30:	4b4a      	ldr	r3, [pc, #296]	; (800ce5c <USBD_CDC_Init+0x1ec>)
 800cd32:	781b      	ldrb	r3, [r3, #0]
 800cd34:	f003 020f 	and.w	r2, r3, #15
 800cd38:	6879      	ldr	r1, [r7, #4]
 800cd3a:	4613      	mov	r3, r2
 800cd3c:	009b      	lsls	r3, r3, #2
 800cd3e:	4413      	add	r3, r2
 800cd40:	009b      	lsls	r3, r3, #2
 800cd42:	440b      	add	r3, r1
 800cd44:	3326      	adds	r3, #38	; 0x26
 800cd46:	2210      	movs	r2, #16
 800cd48:	801a      	strh	r2, [r3, #0]
 800cd4a:	e035      	b.n	800cdb8 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800cd4c:	4b41      	ldr	r3, [pc, #260]	; (800ce54 <USBD_CDC_Init+0x1e4>)
 800cd4e:	7819      	ldrb	r1, [r3, #0]
 800cd50:	2340      	movs	r3, #64	; 0x40
 800cd52:	2202      	movs	r2, #2
 800cd54:	6878      	ldr	r0, [r7, #4]
 800cd56:	f004 fb34 	bl	80113c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800cd5a:	4b3e      	ldr	r3, [pc, #248]	; (800ce54 <USBD_CDC_Init+0x1e4>)
 800cd5c:	781b      	ldrb	r3, [r3, #0]
 800cd5e:	f003 020f 	and.w	r2, r3, #15
 800cd62:	6879      	ldr	r1, [r7, #4]
 800cd64:	4613      	mov	r3, r2
 800cd66:	009b      	lsls	r3, r3, #2
 800cd68:	4413      	add	r3, r2
 800cd6a:	009b      	lsls	r3, r3, #2
 800cd6c:	440b      	add	r3, r1
 800cd6e:	3324      	adds	r3, #36	; 0x24
 800cd70:	2201      	movs	r2, #1
 800cd72:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cd74:	4b38      	ldr	r3, [pc, #224]	; (800ce58 <USBD_CDC_Init+0x1e8>)
 800cd76:	7819      	ldrb	r1, [r3, #0]
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	2202      	movs	r2, #2
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f004 fb20 	bl	80113c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800cd82:	4b35      	ldr	r3, [pc, #212]	; (800ce58 <USBD_CDC_Init+0x1e8>)
 800cd84:	781b      	ldrb	r3, [r3, #0]
 800cd86:	f003 020f 	and.w	r2, r3, #15
 800cd8a:	6879      	ldr	r1, [r7, #4]
 800cd8c:	4613      	mov	r3, r2
 800cd8e:	009b      	lsls	r3, r3, #2
 800cd90:	4413      	add	r3, r2
 800cd92:	009b      	lsls	r3, r3, #2
 800cd94:	440b      	add	r3, r1
 800cd96:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cd9a:	2201      	movs	r2, #1
 800cd9c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800cd9e:	4b2f      	ldr	r3, [pc, #188]	; (800ce5c <USBD_CDC_Init+0x1ec>)
 800cda0:	781b      	ldrb	r3, [r3, #0]
 800cda2:	f003 020f 	and.w	r2, r3, #15
 800cda6:	6879      	ldr	r1, [r7, #4]
 800cda8:	4613      	mov	r3, r2
 800cdaa:	009b      	lsls	r3, r3, #2
 800cdac:	4413      	add	r3, r2
 800cdae:	009b      	lsls	r3, r3, #2
 800cdb0:	440b      	add	r3, r1
 800cdb2:	3326      	adds	r3, #38	; 0x26
 800cdb4:	2210      	movs	r2, #16
 800cdb6:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cdb8:	4b28      	ldr	r3, [pc, #160]	; (800ce5c <USBD_CDC_Init+0x1ec>)
 800cdba:	7819      	ldrb	r1, [r3, #0]
 800cdbc:	2308      	movs	r3, #8
 800cdbe:	2203      	movs	r2, #3
 800cdc0:	6878      	ldr	r0, [r7, #4]
 800cdc2:	f004 fafe 	bl	80113c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cdc6:	4b25      	ldr	r3, [pc, #148]	; (800ce5c <USBD_CDC_Init+0x1ec>)
 800cdc8:	781b      	ldrb	r3, [r3, #0]
 800cdca:	f003 020f 	and.w	r2, r3, #15
 800cdce:	6879      	ldr	r1, [r7, #4]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	440b      	add	r3, r1
 800cdda:	3324      	adds	r3, #36	; 0x24
 800cddc:	2201      	movs	r2, #1
 800cdde:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2200      	movs	r2, #0
 800cde4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cdee:	687a      	ldr	r2, [r7, #4]
 800cdf0:	33b0      	adds	r3, #176	; 0xb0
 800cdf2:	009b      	lsls	r3, r3, #2
 800cdf4:	4413      	add	r3, r2
 800cdf6:	685b      	ldr	r3, [r3, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	2200      	movs	r2, #0
 800ce08:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800ce0c:	68fb      	ldr	r3, [r7, #12]
 800ce0e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d101      	bne.n	800ce1a <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800ce16:	2302      	movs	r3, #2
 800ce18:	e018      	b.n	800ce4c <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	7c1b      	ldrb	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d10a      	bne.n	800ce38 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce22:	4b0d      	ldr	r3, [pc, #52]	; (800ce58 <USBD_CDC_Init+0x1e8>)
 800ce24:	7819      	ldrb	r1, [r3, #0]
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f004 fbb5 	bl	80115a0 <USBD_LL_PrepareReceive>
 800ce36:	e008      	b.n	800ce4a <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ce38:	4b07      	ldr	r3, [pc, #28]	; (800ce58 <USBD_CDC_Init+0x1e8>)
 800ce3a:	7819      	ldrb	r1, [r3, #0]
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ce42:	2340      	movs	r3, #64	; 0x40
 800ce44:	6878      	ldr	r0, [r7, #4]
 800ce46:	f004 fbab 	bl	80115a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ce4a:	2300      	movs	r3, #0
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3710      	adds	r7, #16
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20000093 	.word	0x20000093
 800ce58:	20000094 	.word	0x20000094
 800ce5c:	20000095 	.word	0x20000095

0800ce60 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce60:	b580      	push	{r7, lr}
 800ce62:	b082      	sub	sp, #8
 800ce64:	af00      	add	r7, sp, #0
 800ce66:	6078      	str	r0, [r7, #4]
 800ce68:	460b      	mov	r3, r1
 800ce6a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ce6c:	4b3a      	ldr	r3, [pc, #232]	; (800cf58 <USBD_CDC_DeInit+0xf8>)
 800ce6e:	781b      	ldrb	r3, [r3, #0]
 800ce70:	4619      	mov	r1, r3
 800ce72:	6878      	ldr	r0, [r7, #4]
 800ce74:	f004 facb 	bl	801140e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ce78:	4b37      	ldr	r3, [pc, #220]	; (800cf58 <USBD_CDC_DeInit+0xf8>)
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	f003 020f 	and.w	r2, r3, #15
 800ce80:	6879      	ldr	r1, [r7, #4]
 800ce82:	4613      	mov	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	4413      	add	r3, r2
 800ce88:	009b      	lsls	r3, r3, #2
 800ce8a:	440b      	add	r3, r1
 800ce8c:	3324      	adds	r3, #36	; 0x24
 800ce8e:	2200      	movs	r2, #0
 800ce90:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ce92:	4b32      	ldr	r3, [pc, #200]	; (800cf5c <USBD_CDC_DeInit+0xfc>)
 800ce94:	781b      	ldrb	r3, [r3, #0]
 800ce96:	4619      	mov	r1, r3
 800ce98:	6878      	ldr	r0, [r7, #4]
 800ce9a:	f004 fab8 	bl	801140e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ce9e:	4b2f      	ldr	r3, [pc, #188]	; (800cf5c <USBD_CDC_DeInit+0xfc>)
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	f003 020f 	and.w	r2, r3, #15
 800cea6:	6879      	ldr	r1, [r7, #4]
 800cea8:	4613      	mov	r3, r2
 800ceaa:	009b      	lsls	r3, r3, #2
 800ceac:	4413      	add	r3, r2
 800ceae:	009b      	lsls	r3, r3, #2
 800ceb0:	440b      	add	r3, r1
 800ceb2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ceb6:	2200      	movs	r2, #0
 800ceb8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ceba:	4b29      	ldr	r3, [pc, #164]	; (800cf60 <USBD_CDC_DeInit+0x100>)
 800cebc:	781b      	ldrb	r3, [r3, #0]
 800cebe:	4619      	mov	r1, r3
 800cec0:	6878      	ldr	r0, [r7, #4]
 800cec2:	f004 faa4 	bl	801140e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cec6:	4b26      	ldr	r3, [pc, #152]	; (800cf60 <USBD_CDC_DeInit+0x100>)
 800cec8:	781b      	ldrb	r3, [r3, #0]
 800ceca:	f003 020f 	and.w	r2, r3, #15
 800cece:	6879      	ldr	r1, [r7, #4]
 800ced0:	4613      	mov	r3, r2
 800ced2:	009b      	lsls	r3, r3, #2
 800ced4:	4413      	add	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	440b      	add	r3, r1
 800ceda:	3324      	adds	r3, #36	; 0x24
 800cedc:	2200      	movs	r2, #0
 800cede:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800cee0:	4b1f      	ldr	r3, [pc, #124]	; (800cf60 <USBD_CDC_DeInit+0x100>)
 800cee2:	781b      	ldrb	r3, [r3, #0]
 800cee4:	f003 020f 	and.w	r2, r3, #15
 800cee8:	6879      	ldr	r1, [r7, #4]
 800ceea:	4613      	mov	r3, r2
 800ceec:	009b      	lsls	r3, r3, #2
 800ceee:	4413      	add	r3, r2
 800cef0:	009b      	lsls	r3, r3, #2
 800cef2:	440b      	add	r3, r1
 800cef4:	3326      	adds	r3, #38	; 0x26
 800cef6:	2200      	movs	r2, #0
 800cef8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	32b0      	adds	r2, #176	; 0xb0
 800cf04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d01f      	beq.n	800cf4c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf12:	687a      	ldr	r2, [r7, #4]
 800cf14:	33b0      	adds	r3, #176	; 0xb0
 800cf16:	009b      	lsls	r3, r3, #2
 800cf18:	4413      	add	r3, r2
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	685b      	ldr	r3, [r3, #4]
 800cf1e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf26:	687b      	ldr	r3, [r7, #4]
 800cf28:	32b0      	adds	r2, #176	; 0xb0
 800cf2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf2e:	4618      	mov	r0, r3
 800cf30:	f004 ff34 	bl	8011d9c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	32b0      	adds	r2, #176	; 0xb0
 800cf3e:	2100      	movs	r1, #0
 800cf40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800cf44:	687b      	ldr	r3, [r7, #4]
 800cf46:	2200      	movs	r2, #0
 800cf48:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800cf4c:	2300      	movs	r3, #0
}
 800cf4e:	4618      	mov	r0, r3
 800cf50:	3708      	adds	r7, #8
 800cf52:	46bd      	mov	sp, r7
 800cf54:	bd80      	pop	{r7, pc}
 800cf56:	bf00      	nop
 800cf58:	20000093 	.word	0x20000093
 800cf5c:	20000094 	.word	0x20000094
 800cf60:	20000095 	.word	0x20000095

0800cf64 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b086      	sub	sp, #24
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	32b0      	adds	r2, #176	; 0xb0
 800cf78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf7c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800cf82:	2300      	movs	r3, #0
 800cf84:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800cf86:	2300      	movs	r3, #0
 800cf88:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800cf8a:	693b      	ldr	r3, [r7, #16]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	d101      	bne.n	800cf94 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800cf90:	2303      	movs	r3, #3
 800cf92:	e0bf      	b.n	800d114 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cf94:	683b      	ldr	r3, [r7, #0]
 800cf96:	781b      	ldrb	r3, [r3, #0]
 800cf98:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d050      	beq.n	800d042 <USBD_CDC_Setup+0xde>
 800cfa0:	2b20      	cmp	r3, #32
 800cfa2:	f040 80af 	bne.w	800d104 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800cfa6:	683b      	ldr	r3, [r7, #0]
 800cfa8:	88db      	ldrh	r3, [r3, #6]
 800cfaa:	2b00      	cmp	r3, #0
 800cfac:	d03a      	beq.n	800d024 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800cfae:	683b      	ldr	r3, [r7, #0]
 800cfb0:	781b      	ldrb	r3, [r3, #0]
 800cfb2:	b25b      	sxtb	r3, r3
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	da1b      	bge.n	800cff0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cfbe:	687a      	ldr	r2, [r7, #4]
 800cfc0:	33b0      	adds	r3, #176	; 0xb0
 800cfc2:	009b      	lsls	r3, r3, #2
 800cfc4:	4413      	add	r3, r2
 800cfc6:	685b      	ldr	r3, [r3, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	683a      	ldr	r2, [r7, #0]
 800cfcc:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800cfce:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800cfd0:	683a      	ldr	r2, [r7, #0]
 800cfd2:	88d2      	ldrh	r2, [r2, #6]
 800cfd4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800cfd6:	683b      	ldr	r3, [r7, #0]
 800cfd8:	88db      	ldrh	r3, [r3, #6]
 800cfda:	2b07      	cmp	r3, #7
 800cfdc:	bf28      	it	cs
 800cfde:	2307      	movcs	r3, #7
 800cfe0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	89fa      	ldrh	r2, [r7, #14]
 800cfe6:	4619      	mov	r1, r3
 800cfe8:	6878      	ldr	r0, [r7, #4]
 800cfea:	f001 fd6d 	bl	800eac8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800cfee:	e090      	b.n	800d112 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800cff0:	683b      	ldr	r3, [r7, #0]
 800cff2:	785a      	ldrb	r2, [r3, #1]
 800cff4:	693b      	ldr	r3, [r7, #16]
 800cff6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	88db      	ldrh	r3, [r3, #6]
 800cffe:	2b3f      	cmp	r3, #63	; 0x3f
 800d000:	d803      	bhi.n	800d00a <USBD_CDC_Setup+0xa6>
 800d002:	683b      	ldr	r3, [r7, #0]
 800d004:	88db      	ldrh	r3, [r3, #6]
 800d006:	b2da      	uxtb	r2, r3
 800d008:	e000      	b.n	800d00c <USBD_CDC_Setup+0xa8>
 800d00a:	2240      	movs	r2, #64	; 0x40
 800d00c:	693b      	ldr	r3, [r7, #16]
 800d00e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d012:	6939      	ldr	r1, [r7, #16]
 800d014:	693b      	ldr	r3, [r7, #16]
 800d016:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d01a:	461a      	mov	r2, r3
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f001 fd7f 	bl	800eb20 <USBD_CtlPrepareRx>
      break;
 800d022:	e076      	b.n	800d112 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d02a:	687a      	ldr	r2, [r7, #4]
 800d02c:	33b0      	adds	r3, #176	; 0xb0
 800d02e:	009b      	lsls	r3, r3, #2
 800d030:	4413      	add	r3, r2
 800d032:	685b      	ldr	r3, [r3, #4]
 800d034:	689b      	ldr	r3, [r3, #8]
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	7850      	ldrb	r0, [r2, #1]
 800d03a:	2200      	movs	r2, #0
 800d03c:	6839      	ldr	r1, [r7, #0]
 800d03e:	4798      	blx	r3
      break;
 800d040:	e067      	b.n	800d112 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d042:	683b      	ldr	r3, [r7, #0]
 800d044:	785b      	ldrb	r3, [r3, #1]
 800d046:	2b0b      	cmp	r3, #11
 800d048:	d851      	bhi.n	800d0ee <USBD_CDC_Setup+0x18a>
 800d04a:	a201      	add	r2, pc, #4	; (adr r2, 800d050 <USBD_CDC_Setup+0xec>)
 800d04c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d050:	0800d081 	.word	0x0800d081
 800d054:	0800d0fd 	.word	0x0800d0fd
 800d058:	0800d0ef 	.word	0x0800d0ef
 800d05c:	0800d0ef 	.word	0x0800d0ef
 800d060:	0800d0ef 	.word	0x0800d0ef
 800d064:	0800d0ef 	.word	0x0800d0ef
 800d068:	0800d0ef 	.word	0x0800d0ef
 800d06c:	0800d0ef 	.word	0x0800d0ef
 800d070:	0800d0ef 	.word	0x0800d0ef
 800d074:	0800d0ef 	.word	0x0800d0ef
 800d078:	0800d0ab 	.word	0x0800d0ab
 800d07c:	0800d0d5 	.word	0x0800d0d5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d086:	b2db      	uxtb	r3, r3
 800d088:	2b03      	cmp	r3, #3
 800d08a:	d107      	bne.n	800d09c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d08c:	f107 030a 	add.w	r3, r7, #10
 800d090:	2202      	movs	r2, #2
 800d092:	4619      	mov	r1, r3
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f001 fd17 	bl	800eac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d09a:	e032      	b.n	800d102 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d09c:	6839      	ldr	r1, [r7, #0]
 800d09e:	6878      	ldr	r0, [r7, #4]
 800d0a0:	f001 fca1 	bl	800e9e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0a4:	2303      	movs	r3, #3
 800d0a6:	75fb      	strb	r3, [r7, #23]
          break;
 800d0a8:	e02b      	b.n	800d102 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0b0:	b2db      	uxtb	r3, r3
 800d0b2:	2b03      	cmp	r3, #3
 800d0b4:	d107      	bne.n	800d0c6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d0b6:	f107 030d 	add.w	r3, r7, #13
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	4619      	mov	r1, r3
 800d0be:	6878      	ldr	r0, [r7, #4]
 800d0c0:	f001 fd02 	bl	800eac8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d0c4:	e01d      	b.n	800d102 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d0c6:	6839      	ldr	r1, [r7, #0]
 800d0c8:	6878      	ldr	r0, [r7, #4]
 800d0ca:	f001 fc8c 	bl	800e9e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0ce:	2303      	movs	r3, #3
 800d0d0:	75fb      	strb	r3, [r7, #23]
          break;
 800d0d2:	e016      	b.n	800d102 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d0da:	b2db      	uxtb	r3, r3
 800d0dc:	2b03      	cmp	r3, #3
 800d0de:	d00f      	beq.n	800d100 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d0e0:	6839      	ldr	r1, [r7, #0]
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f001 fc7f 	bl	800e9e6 <USBD_CtlError>
            ret = USBD_FAIL;
 800d0e8:	2303      	movs	r3, #3
 800d0ea:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d0ec:	e008      	b.n	800d100 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d0ee:	6839      	ldr	r1, [r7, #0]
 800d0f0:	6878      	ldr	r0, [r7, #4]
 800d0f2:	f001 fc78 	bl	800e9e6 <USBD_CtlError>
          ret = USBD_FAIL;
 800d0f6:	2303      	movs	r3, #3
 800d0f8:	75fb      	strb	r3, [r7, #23]
          break;
 800d0fa:	e002      	b.n	800d102 <USBD_CDC_Setup+0x19e>
          break;
 800d0fc:	bf00      	nop
 800d0fe:	e008      	b.n	800d112 <USBD_CDC_Setup+0x1ae>
          break;
 800d100:	bf00      	nop
      }
      break;
 800d102:	e006      	b.n	800d112 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d104:	6839      	ldr	r1, [r7, #0]
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f001 fc6d 	bl	800e9e6 <USBD_CtlError>
      ret = USBD_FAIL;
 800d10c:	2303      	movs	r3, #3
 800d10e:	75fb      	strb	r3, [r7, #23]
      break;
 800d110:	bf00      	nop
  }

  return (uint8_t)ret;
 800d112:	7dfb      	ldrb	r3, [r7, #23]
}
 800d114:	4618      	mov	r0, r3
 800d116:	3718      	adds	r7, #24
 800d118:	46bd      	mov	sp, r7
 800d11a:	bd80      	pop	{r7, pc}

0800d11c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	460b      	mov	r3, r1
 800d126:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d12e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	32b0      	adds	r2, #176	; 0xb0
 800d13a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d101      	bne.n	800d146 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d142:	2303      	movs	r3, #3
 800d144:	e065      	b.n	800d212 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d14c:	687b      	ldr	r3, [r7, #4]
 800d14e:	32b0      	adds	r2, #176	; 0xb0
 800d150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d154:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d156:	78fb      	ldrb	r3, [r7, #3]
 800d158:	f003 020f 	and.w	r2, r3, #15
 800d15c:	6879      	ldr	r1, [r7, #4]
 800d15e:	4613      	mov	r3, r2
 800d160:	009b      	lsls	r3, r3, #2
 800d162:	4413      	add	r3, r2
 800d164:	009b      	lsls	r3, r3, #2
 800d166:	440b      	add	r3, r1
 800d168:	3318      	adds	r3, #24
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	2b00      	cmp	r3, #0
 800d16e:	d02f      	beq.n	800d1d0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d170:	78fb      	ldrb	r3, [r7, #3]
 800d172:	f003 020f 	and.w	r2, r3, #15
 800d176:	6879      	ldr	r1, [r7, #4]
 800d178:	4613      	mov	r3, r2
 800d17a:	009b      	lsls	r3, r3, #2
 800d17c:	4413      	add	r3, r2
 800d17e:	009b      	lsls	r3, r3, #2
 800d180:	440b      	add	r3, r1
 800d182:	3318      	adds	r3, #24
 800d184:	681a      	ldr	r2, [r3, #0]
 800d186:	78fb      	ldrb	r3, [r7, #3]
 800d188:	f003 010f 	and.w	r1, r3, #15
 800d18c:	68f8      	ldr	r0, [r7, #12]
 800d18e:	460b      	mov	r3, r1
 800d190:	00db      	lsls	r3, r3, #3
 800d192:	440b      	add	r3, r1
 800d194:	009b      	lsls	r3, r3, #2
 800d196:	4403      	add	r3, r0
 800d198:	3348      	adds	r3, #72	; 0x48
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	fbb2 f1f3 	udiv	r1, r2, r3
 800d1a0:	fb01 f303 	mul.w	r3, r1, r3
 800d1a4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d112      	bne.n	800d1d0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d1aa:	78fb      	ldrb	r3, [r7, #3]
 800d1ac:	f003 020f 	and.w	r2, r3, #15
 800d1b0:	6879      	ldr	r1, [r7, #4]
 800d1b2:	4613      	mov	r3, r2
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	009b      	lsls	r3, r3, #2
 800d1ba:	440b      	add	r3, r1
 800d1bc:	3318      	adds	r3, #24
 800d1be:	2200      	movs	r2, #0
 800d1c0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d1c2:	78f9      	ldrb	r1, [r7, #3]
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f004 f9c8 	bl	801155e <USBD_LL_Transmit>
 800d1ce:	e01f      	b.n	800d210 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1de:	687a      	ldr	r2, [r7, #4]
 800d1e0:	33b0      	adds	r3, #176	; 0xb0
 800d1e2:	009b      	lsls	r3, r3, #2
 800d1e4:	4413      	add	r3, r2
 800d1e6:	685b      	ldr	r3, [r3, #4]
 800d1e8:	691b      	ldr	r3, [r3, #16]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d010      	beq.n	800d210 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d1ee:	687b      	ldr	r3, [r7, #4]
 800d1f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d1f4:	687a      	ldr	r2, [r7, #4]
 800d1f6:	33b0      	adds	r3, #176	; 0xb0
 800d1f8:	009b      	lsls	r3, r3, #2
 800d1fa:	4413      	add	r3, r2
 800d1fc:	685b      	ldr	r3, [r3, #4]
 800d1fe:	691b      	ldr	r3, [r3, #16]
 800d200:	68ba      	ldr	r2, [r7, #8]
 800d202:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d206:	68ba      	ldr	r2, [r7, #8]
 800d208:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d20c:	78fa      	ldrb	r2, [r7, #3]
 800d20e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d210:	2300      	movs	r3, #0
}
 800d212:	4618      	mov	r0, r3
 800d214:	3710      	adds	r7, #16
 800d216:	46bd      	mov	sp, r7
 800d218:	bd80      	pop	{r7, pc}

0800d21a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d21a:	b580      	push	{r7, lr}
 800d21c:	b084      	sub	sp, #16
 800d21e:	af00      	add	r7, sp, #0
 800d220:	6078      	str	r0, [r7, #4]
 800d222:	460b      	mov	r3, r1
 800d224:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d226:	687b      	ldr	r3, [r7, #4]
 800d228:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d22c:	687b      	ldr	r3, [r7, #4]
 800d22e:	32b0      	adds	r2, #176	; 0xb0
 800d230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d234:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	32b0      	adds	r2, #176	; 0xb0
 800d240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d244:	2b00      	cmp	r3, #0
 800d246:	d101      	bne.n	800d24c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d248:	2303      	movs	r3, #3
 800d24a:	e01a      	b.n	800d282 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d24c:	78fb      	ldrb	r3, [r7, #3]
 800d24e:	4619      	mov	r1, r3
 800d250:	6878      	ldr	r0, [r7, #4]
 800d252:	f004 f9c6 	bl	80115e2 <USBD_LL_GetRxDataSize>
 800d256:	4602      	mov	r2, r0
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d264:	687a      	ldr	r2, [r7, #4]
 800d266:	33b0      	adds	r3, #176	; 0xb0
 800d268:	009b      	lsls	r3, r3, #2
 800d26a:	4413      	add	r3, r2
 800d26c:	685b      	ldr	r3, [r3, #4]
 800d26e:	68db      	ldr	r3, [r3, #12]
 800d270:	68fa      	ldr	r2, [r7, #12]
 800d272:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d27c:	4611      	mov	r1, r2
 800d27e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d280:	2300      	movs	r3, #0
}
 800d282:	4618      	mov	r0, r3
 800d284:	3710      	adds	r7, #16
 800d286:	46bd      	mov	sp, r7
 800d288:	bd80      	pop	{r7, pc}

0800d28a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d28a:	b580      	push	{r7, lr}
 800d28c:	b084      	sub	sp, #16
 800d28e:	af00      	add	r7, sp, #0
 800d290:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d292:	687b      	ldr	r3, [r7, #4]
 800d294:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	32b0      	adds	r2, #176	; 0xb0
 800d29c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2a0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d101      	bne.n	800d2ac <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d2a8:	2303      	movs	r3, #3
 800d2aa:	e025      	b.n	800d2f8 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	33b0      	adds	r3, #176	; 0xb0
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d01a      	beq.n	800d2f6 <USBD_CDC_EP0_RxReady+0x6c>
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d2c6:	2bff      	cmp	r3, #255	; 0xff
 800d2c8:	d015      	beq.n	800d2f6 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2d0:	687a      	ldr	r2, [r7, #4]
 800d2d2:	33b0      	adds	r3, #176	; 0xb0
 800d2d4:	009b      	lsls	r3, r3, #2
 800d2d6:	4413      	add	r3, r2
 800d2d8:	685b      	ldr	r3, [r3, #4]
 800d2da:	689b      	ldr	r3, [r3, #8]
 800d2dc:	68fa      	ldr	r2, [r7, #12]
 800d2de:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d2e2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d2e4:	68fa      	ldr	r2, [r7, #12]
 800d2e6:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d2ea:	b292      	uxth	r2, r2
 800d2ec:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d2ee:	68fb      	ldr	r3, [r7, #12]
 800d2f0:	22ff      	movs	r2, #255	; 0xff
 800d2f2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	3710      	adds	r7, #16
 800d2fc:	46bd      	mov	sp, r7
 800d2fe:	bd80      	pop	{r7, pc}

0800d300 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d300:	b580      	push	{r7, lr}
 800d302:	b086      	sub	sp, #24
 800d304:	af00      	add	r7, sp, #0
 800d306:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d308:	2182      	movs	r1, #130	; 0x82
 800d30a:	4818      	ldr	r0, [pc, #96]	; (800d36c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d30c:	f000 fd09 	bl	800dd22 <USBD_GetEpDesc>
 800d310:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d312:	2101      	movs	r1, #1
 800d314:	4815      	ldr	r0, [pc, #84]	; (800d36c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d316:	f000 fd04 	bl	800dd22 <USBD_GetEpDesc>
 800d31a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d31c:	2181      	movs	r1, #129	; 0x81
 800d31e:	4813      	ldr	r0, [pc, #76]	; (800d36c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d320:	f000 fcff 	bl	800dd22 <USBD_GetEpDesc>
 800d324:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d326:	697b      	ldr	r3, [r7, #20]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d002      	beq.n	800d332 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d32c:	697b      	ldr	r3, [r7, #20]
 800d32e:	2210      	movs	r2, #16
 800d330:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d332:	693b      	ldr	r3, [r7, #16]
 800d334:	2b00      	cmp	r3, #0
 800d336:	d006      	beq.n	800d346 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	2200      	movs	r2, #0
 800d33c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d340:	711a      	strb	r2, [r3, #4]
 800d342:	2200      	movs	r2, #0
 800d344:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d346:	68fb      	ldr	r3, [r7, #12]
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d006      	beq.n	800d35a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	2200      	movs	r2, #0
 800d350:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d354:	711a      	strb	r2, [r3, #4]
 800d356:	2200      	movs	r2, #0
 800d358:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2243      	movs	r2, #67	; 0x43
 800d35e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d360:	4b02      	ldr	r3, [pc, #8]	; (800d36c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d362:	4618      	mov	r0, r3
 800d364:	3718      	adds	r7, #24
 800d366:	46bd      	mov	sp, r7
 800d368:	bd80      	pop	{r7, pc}
 800d36a:	bf00      	nop
 800d36c:	20000050 	.word	0x20000050

0800d370 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d370:	b580      	push	{r7, lr}
 800d372:	b086      	sub	sp, #24
 800d374:	af00      	add	r7, sp, #0
 800d376:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d378:	2182      	movs	r1, #130	; 0x82
 800d37a:	4818      	ldr	r0, [pc, #96]	; (800d3dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d37c:	f000 fcd1 	bl	800dd22 <USBD_GetEpDesc>
 800d380:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d382:	2101      	movs	r1, #1
 800d384:	4815      	ldr	r0, [pc, #84]	; (800d3dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d386:	f000 fccc 	bl	800dd22 <USBD_GetEpDesc>
 800d38a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d38c:	2181      	movs	r1, #129	; 0x81
 800d38e:	4813      	ldr	r0, [pc, #76]	; (800d3dc <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d390:	f000 fcc7 	bl	800dd22 <USBD_GetEpDesc>
 800d394:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d002      	beq.n	800d3a2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d39c:	697b      	ldr	r3, [r7, #20]
 800d39e:	2210      	movs	r2, #16
 800d3a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d3a2:	693b      	ldr	r3, [r7, #16]
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d006      	beq.n	800d3b6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	2200      	movs	r2, #0
 800d3ac:	711a      	strb	r2, [r3, #4]
 800d3ae:	2200      	movs	r2, #0
 800d3b0:	f042 0202 	orr.w	r2, r2, #2
 800d3b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d006      	beq.n	800d3ca <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	2200      	movs	r2, #0
 800d3c0:	711a      	strb	r2, [r3, #4]
 800d3c2:	2200      	movs	r2, #0
 800d3c4:	f042 0202 	orr.w	r2, r2, #2
 800d3c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	2243      	movs	r2, #67	; 0x43
 800d3ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d3d0:	4b02      	ldr	r3, [pc, #8]	; (800d3dc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d3d2:	4618      	mov	r0, r3
 800d3d4:	3718      	adds	r7, #24
 800d3d6:	46bd      	mov	sp, r7
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	20000050 	.word	0x20000050

0800d3e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d3e8:	2182      	movs	r1, #130	; 0x82
 800d3ea:	4818      	ldr	r0, [pc, #96]	; (800d44c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3ec:	f000 fc99 	bl	800dd22 <USBD_GetEpDesc>
 800d3f0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d3f2:	2101      	movs	r1, #1
 800d3f4:	4815      	ldr	r0, [pc, #84]	; (800d44c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d3f6:	f000 fc94 	bl	800dd22 <USBD_GetEpDesc>
 800d3fa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d3fc:	2181      	movs	r1, #129	; 0x81
 800d3fe:	4813      	ldr	r0, [pc, #76]	; (800d44c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d400:	f000 fc8f 	bl	800dd22 <USBD_GetEpDesc>
 800d404:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d406:	697b      	ldr	r3, [r7, #20]
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d002      	beq.n	800d412 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d40c:	697b      	ldr	r3, [r7, #20]
 800d40e:	2210      	movs	r2, #16
 800d410:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	2b00      	cmp	r3, #0
 800d416:	d006      	beq.n	800d426 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d418:	693b      	ldr	r3, [r7, #16]
 800d41a:	2200      	movs	r2, #0
 800d41c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d420:	711a      	strb	r2, [r3, #4]
 800d422:	2200      	movs	r2, #0
 800d424:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	d006      	beq.n	800d43a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	2200      	movs	r2, #0
 800d430:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d434:	711a      	strb	r2, [r3, #4]
 800d436:	2200      	movs	r2, #0
 800d438:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	2243      	movs	r2, #67	; 0x43
 800d43e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d440:	4b02      	ldr	r3, [pc, #8]	; (800d44c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d442:	4618      	mov	r0, r3
 800d444:	3718      	adds	r7, #24
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}
 800d44a:	bf00      	nop
 800d44c:	20000050 	.word	0x20000050

0800d450 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
 800d456:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	220a      	movs	r2, #10
 800d45c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d45e:	4b03      	ldr	r3, [pc, #12]	; (800d46c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d460:	4618      	mov	r0, r3
 800d462:	370c      	adds	r7, #12
 800d464:	46bd      	mov	sp, r7
 800d466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d46a:	4770      	bx	lr
 800d46c:	2000000c 	.word	0x2000000c

0800d470 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d470:	b480      	push	{r7}
 800d472:	b083      	sub	sp, #12
 800d474:	af00      	add	r7, sp, #0
 800d476:	6078      	str	r0, [r7, #4]
 800d478:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d47a:	683b      	ldr	r3, [r7, #0]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d101      	bne.n	800d484 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d480:	2303      	movs	r3, #3
 800d482:	e009      	b.n	800d498 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d484:	687b      	ldr	r3, [r7, #4]
 800d486:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d48a:	687a      	ldr	r2, [r7, #4]
 800d48c:	33b0      	adds	r3, #176	; 0xb0
 800d48e:	009b      	lsls	r3, r3, #2
 800d490:	4413      	add	r3, r2
 800d492:	683a      	ldr	r2, [r7, #0]
 800d494:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d496:	2300      	movs	r3, #0
}
 800d498:	4618      	mov	r0, r3
 800d49a:	370c      	adds	r7, #12
 800d49c:	46bd      	mov	sp, r7
 800d49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4a2:	4770      	bx	lr

0800d4a4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d4a4:	b480      	push	{r7}
 800d4a6:	b087      	sub	sp, #28
 800d4a8:	af00      	add	r7, sp, #0
 800d4aa:	60f8      	str	r0, [r7, #12]
 800d4ac:	60b9      	str	r1, [r7, #8]
 800d4ae:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	32b0      	adds	r2, #176	; 0xb0
 800d4ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d4be:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d4c0:	697b      	ldr	r3, [r7, #20]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d101      	bne.n	800d4ca <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d4c6:	2303      	movs	r3, #3
 800d4c8:	e008      	b.n	800d4dc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	68ba      	ldr	r2, [r7, #8]
 800d4ce:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d4d2:	697b      	ldr	r3, [r7, #20]
 800d4d4:	687a      	ldr	r2, [r7, #4]
 800d4d6:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d4da:	2300      	movs	r3, #0
}
 800d4dc:	4618      	mov	r0, r3
 800d4de:	371c      	adds	r7, #28
 800d4e0:	46bd      	mov	sp, r7
 800d4e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4e6:	4770      	bx	lr

0800d4e8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d4e8:	b480      	push	{r7}
 800d4ea:	b085      	sub	sp, #20
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	32b0      	adds	r2, #176	; 0xb0
 800d4fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d500:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d508:	2303      	movs	r3, #3
 800d50a:	e004      	b.n	800d516 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d50c:	68fb      	ldr	r3, [r7, #12]
 800d50e:	683a      	ldr	r2, [r7, #0]
 800d510:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d514:	2300      	movs	r3, #0
}
 800d516:	4618      	mov	r0, r3
 800d518:	3714      	adds	r7, #20
 800d51a:	46bd      	mov	sp, r7
 800d51c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d520:	4770      	bx	lr
	...

0800d524 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d524:	b580      	push	{r7, lr}
 800d526:	b084      	sub	sp, #16
 800d528:	af00      	add	r7, sp, #0
 800d52a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d52c:	687b      	ldr	r3, [r7, #4]
 800d52e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	32b0      	adds	r2, #176	; 0xb0
 800d536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d53a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	32b0      	adds	r2, #176	; 0xb0
 800d546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d101      	bne.n	800d552 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d54e:	2303      	movs	r3, #3
 800d550:	e018      	b.n	800d584 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	7c1b      	ldrb	r3, [r3, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d10a      	bne.n	800d570 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d55a:	4b0c      	ldr	r3, [pc, #48]	; (800d58c <USBD_CDC_ReceivePacket+0x68>)
 800d55c:	7819      	ldrb	r1, [r3, #0]
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d564:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d568:	6878      	ldr	r0, [r7, #4]
 800d56a:	f004 f819 	bl	80115a0 <USBD_LL_PrepareReceive>
 800d56e:	e008      	b.n	800d582 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d570:	4b06      	ldr	r3, [pc, #24]	; (800d58c <USBD_CDC_ReceivePacket+0x68>)
 800d572:	7819      	ldrb	r1, [r3, #0]
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d57a:	2340      	movs	r3, #64	; 0x40
 800d57c:	6878      	ldr	r0, [r7, #4]
 800d57e:	f004 f80f 	bl	80115a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d582:	2300      	movs	r3, #0
}
 800d584:	4618      	mov	r0, r3
 800d586:	3710      	adds	r7, #16
 800d588:	46bd      	mov	sp, r7
 800d58a:	bd80      	pop	{r7, pc}
 800d58c:	20000094 	.word	0x20000094

0800d590 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d590:	b580      	push	{r7, lr}
 800d592:	b086      	sub	sp, #24
 800d594:	af00      	add	r7, sp, #0
 800d596:	60f8      	str	r0, [r7, #12]
 800d598:	60b9      	str	r1, [r7, #8]
 800d59a:	4613      	mov	r3, r2
 800d59c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d101      	bne.n	800d5a8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d5a4:	2303      	movs	r3, #3
 800d5a6:	e01f      	b.n	800d5e8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	2200      	movs	r2, #0
 800d5ac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	2200      	movs	r2, #0
 800d5b4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d5c0:	68bb      	ldr	r3, [r7, #8]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	d003      	beq.n	800d5ce <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
 800d5c8:	68ba      	ldr	r2, [r7, #8]
 800d5ca:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	2201      	movs	r2, #1
 800d5d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	79fa      	ldrb	r2, [r7, #7]
 800d5da:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d5dc:	68f8      	ldr	r0, [r7, #12]
 800d5de:	f003 fe83 	bl	80112e8 <USBD_LL_Init>
 800d5e2:	4603      	mov	r3, r0
 800d5e4:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d5e6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	3718      	adds	r7, #24
 800d5ec:	46bd      	mov	sp, r7
 800d5ee:	bd80      	pop	{r7, pc}

0800d5f0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d5f0:	b580      	push	{r7, lr}
 800d5f2:	b084      	sub	sp, #16
 800d5f4:	af00      	add	r7, sp, #0
 800d5f6:	6078      	str	r0, [r7, #4]
 800d5f8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d5fe:	683b      	ldr	r3, [r7, #0]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d101      	bne.n	800d608 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d604:	2303      	movs	r3, #3
 800d606:	e025      	b.n	800d654 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	683a      	ldr	r2, [r7, #0]
 800d60c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d616:	687b      	ldr	r3, [r7, #4]
 800d618:	32ae      	adds	r2, #174	; 0xae
 800d61a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d61e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d620:	2b00      	cmp	r3, #0
 800d622:	d00f      	beq.n	800d644 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	32ae      	adds	r2, #174	; 0xae
 800d62e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d634:	f107 020e 	add.w	r2, r7, #14
 800d638:	4610      	mov	r0, r2
 800d63a:	4798      	blx	r3
 800d63c:	4602      	mov	r2, r0
 800d63e:	687b      	ldr	r3, [r7, #4]
 800d640:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d64a:	1c5a      	adds	r2, r3, #1
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d652:	2300      	movs	r3, #0
}
 800d654:	4618      	mov	r0, r3
 800d656:	3710      	adds	r7, #16
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d664:	6878      	ldr	r0, [r7, #4]
 800d666:	f003 fe91 	bl	801138c <USBD_LL_Start>
 800d66a:	4603      	mov	r3, r0
}
 800d66c:	4618      	mov	r0, r3
 800d66e:	3708      	adds	r7, #8
 800d670:	46bd      	mov	sp, r7
 800d672:	bd80      	pop	{r7, pc}

0800d674 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d674:	b480      	push	{r7}
 800d676:	b083      	sub	sp, #12
 800d678:	af00      	add	r7, sp, #0
 800d67a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d67c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d67e:	4618      	mov	r0, r3
 800d680:	370c      	adds	r7, #12
 800d682:	46bd      	mov	sp, r7
 800d684:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d688:	4770      	bx	lr

0800d68a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d68a:	b580      	push	{r7, lr}
 800d68c:	b084      	sub	sp, #16
 800d68e:	af00      	add	r7, sp, #0
 800d690:	6078      	str	r0, [r7, #4]
 800d692:	460b      	mov	r3, r1
 800d694:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d696:	2300      	movs	r3, #0
 800d698:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6a0:	2b00      	cmp	r3, #0
 800d6a2:	d009      	beq.n	800d6b8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6aa:	681b      	ldr	r3, [r3, #0]
 800d6ac:	78fa      	ldrb	r2, [r7, #3]
 800d6ae:	4611      	mov	r1, r2
 800d6b0:	6878      	ldr	r0, [r7, #4]
 800d6b2:	4798      	blx	r3
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d6b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	3710      	adds	r7, #16
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}

0800d6c2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d6c2:	b580      	push	{r7, lr}
 800d6c4:	b084      	sub	sp, #16
 800d6c6:	af00      	add	r7, sp, #0
 800d6c8:	6078      	str	r0, [r7, #4]
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d6d2:	687b      	ldr	r3, [r7, #4]
 800d6d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d6d8:	685b      	ldr	r3, [r3, #4]
 800d6da:	78fa      	ldrb	r2, [r7, #3]
 800d6dc:	4611      	mov	r1, r2
 800d6de:	6878      	ldr	r0, [r7, #4]
 800d6e0:	4798      	blx	r3
 800d6e2:	4603      	mov	r3, r0
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d001      	beq.n	800d6ec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d6e8:	2303      	movs	r3, #3
 800d6ea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b084      	sub	sp, #16
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
 800d6fe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d706:	6839      	ldr	r1, [r7, #0]
 800d708:	4618      	mov	r0, r3
 800d70a:	f001 f932 	bl	800e972 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	2201      	movs	r2, #1
 800d712:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d71c:	461a      	mov	r2, r3
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d72a:	f003 031f 	and.w	r3, r3, #31
 800d72e:	2b02      	cmp	r3, #2
 800d730:	d01a      	beq.n	800d768 <USBD_LL_SetupStage+0x72>
 800d732:	2b02      	cmp	r3, #2
 800d734:	d822      	bhi.n	800d77c <USBD_LL_SetupStage+0x86>
 800d736:	2b00      	cmp	r3, #0
 800d738:	d002      	beq.n	800d740 <USBD_LL_SetupStage+0x4a>
 800d73a:	2b01      	cmp	r3, #1
 800d73c:	d00a      	beq.n	800d754 <USBD_LL_SetupStage+0x5e>
 800d73e:	e01d      	b.n	800d77c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d746:	4619      	mov	r1, r3
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	f000 fb5f 	bl	800de0c <USBD_StdDevReq>
 800d74e:	4603      	mov	r3, r0
 800d750:	73fb      	strb	r3, [r7, #15]
      break;
 800d752:	e020      	b.n	800d796 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d75a:	4619      	mov	r1, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f000 fbc7 	bl	800def0 <USBD_StdItfReq>
 800d762:	4603      	mov	r3, r0
 800d764:	73fb      	strb	r3, [r7, #15]
      break;
 800d766:	e016      	b.n	800d796 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d76e:	4619      	mov	r1, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f000 fc29 	bl	800dfc8 <USBD_StdEPReq>
 800d776:	4603      	mov	r3, r0
 800d778:	73fb      	strb	r3, [r7, #15]
      break;
 800d77a:	e00c      	b.n	800d796 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d77c:	687b      	ldr	r3, [r7, #4]
 800d77e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d782:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d786:	b2db      	uxtb	r3, r3
 800d788:	4619      	mov	r1, r3
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f003 fe5e 	bl	801144c <USBD_LL_StallEP>
 800d790:	4603      	mov	r3, r0
 800d792:	73fb      	strb	r3, [r7, #15]
      break;
 800d794:	bf00      	nop
  }

  return ret;
 800d796:	7bfb      	ldrb	r3, [r7, #15]
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3710      	adds	r7, #16
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d7a0:	b580      	push	{r7, lr}
 800d7a2:	b086      	sub	sp, #24
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	60f8      	str	r0, [r7, #12]
 800d7a8:	460b      	mov	r3, r1
 800d7aa:	607a      	str	r2, [r7, #4]
 800d7ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d7ae:	2300      	movs	r3, #0
 800d7b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d7b2:	7afb      	ldrb	r3, [r7, #11]
 800d7b4:	2b00      	cmp	r3, #0
 800d7b6:	d16e      	bne.n	800d896 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d7b8:	68fb      	ldr	r3, [r7, #12]
 800d7ba:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d7be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d7c6:	2b03      	cmp	r3, #3
 800d7c8:	f040 8098 	bne.w	800d8fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d7cc:	693b      	ldr	r3, [r7, #16]
 800d7ce:	689a      	ldr	r2, [r3, #8]
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	68db      	ldr	r3, [r3, #12]
 800d7d4:	429a      	cmp	r2, r3
 800d7d6:	d913      	bls.n	800d800 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d7d8:	693b      	ldr	r3, [r7, #16]
 800d7da:	689a      	ldr	r2, [r3, #8]
 800d7dc:	693b      	ldr	r3, [r7, #16]
 800d7de:	68db      	ldr	r3, [r3, #12]
 800d7e0:	1ad2      	subs	r2, r2, r3
 800d7e2:	693b      	ldr	r3, [r7, #16]
 800d7e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d7e6:	693b      	ldr	r3, [r7, #16]
 800d7e8:	68da      	ldr	r2, [r3, #12]
 800d7ea:	693b      	ldr	r3, [r7, #16]
 800d7ec:	689b      	ldr	r3, [r3, #8]
 800d7ee:	4293      	cmp	r3, r2
 800d7f0:	bf28      	it	cs
 800d7f2:	4613      	movcs	r3, r2
 800d7f4:	461a      	mov	r2, r3
 800d7f6:	6879      	ldr	r1, [r7, #4]
 800d7f8:	68f8      	ldr	r0, [r7, #12]
 800d7fa:	f001 f9ae 	bl	800eb5a <USBD_CtlContinueRx>
 800d7fe:	e07d      	b.n	800d8fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d806:	f003 031f 	and.w	r3, r3, #31
 800d80a:	2b02      	cmp	r3, #2
 800d80c:	d014      	beq.n	800d838 <USBD_LL_DataOutStage+0x98>
 800d80e:	2b02      	cmp	r3, #2
 800d810:	d81d      	bhi.n	800d84e <USBD_LL_DataOutStage+0xae>
 800d812:	2b00      	cmp	r3, #0
 800d814:	d002      	beq.n	800d81c <USBD_LL_DataOutStage+0x7c>
 800d816:	2b01      	cmp	r3, #1
 800d818:	d003      	beq.n	800d822 <USBD_LL_DataOutStage+0x82>
 800d81a:	e018      	b.n	800d84e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d81c:	2300      	movs	r3, #0
 800d81e:	75bb      	strb	r3, [r7, #22]
            break;
 800d820:	e018      	b.n	800d854 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d828:	b2db      	uxtb	r3, r3
 800d82a:	4619      	mov	r1, r3
 800d82c:	68f8      	ldr	r0, [r7, #12]
 800d82e:	f000 fa5e 	bl	800dcee <USBD_CoreFindIF>
 800d832:	4603      	mov	r3, r0
 800d834:	75bb      	strb	r3, [r7, #22]
            break;
 800d836:	e00d      	b.n	800d854 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d83e:	b2db      	uxtb	r3, r3
 800d840:	4619      	mov	r1, r3
 800d842:	68f8      	ldr	r0, [r7, #12]
 800d844:	f000 fa60 	bl	800dd08 <USBD_CoreFindEP>
 800d848:	4603      	mov	r3, r0
 800d84a:	75bb      	strb	r3, [r7, #22]
            break;
 800d84c:	e002      	b.n	800d854 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d84e:	2300      	movs	r3, #0
 800d850:	75bb      	strb	r3, [r7, #22]
            break;
 800d852:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d854:	7dbb      	ldrb	r3, [r7, #22]
 800d856:	2b00      	cmp	r3, #0
 800d858:	d119      	bne.n	800d88e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d85a:	68fb      	ldr	r3, [r7, #12]
 800d85c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d860:	b2db      	uxtb	r3, r3
 800d862:	2b03      	cmp	r3, #3
 800d864:	d113      	bne.n	800d88e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d866:	7dba      	ldrb	r2, [r7, #22]
 800d868:	68fb      	ldr	r3, [r7, #12]
 800d86a:	32ae      	adds	r2, #174	; 0xae
 800d86c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d870:	691b      	ldr	r3, [r3, #16]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00b      	beq.n	800d88e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d876:	7dba      	ldrb	r2, [r7, #22]
 800d878:	68fb      	ldr	r3, [r7, #12]
 800d87a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d87e:	7dba      	ldrb	r2, [r7, #22]
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	32ae      	adds	r2, #174	; 0xae
 800d884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d888:	691b      	ldr	r3, [r3, #16]
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d88e:	68f8      	ldr	r0, [r7, #12]
 800d890:	f001 f974 	bl	800eb7c <USBD_CtlSendStatus>
 800d894:	e032      	b.n	800d8fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d896:	7afb      	ldrb	r3, [r7, #11]
 800d898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d89c:	b2db      	uxtb	r3, r3
 800d89e:	4619      	mov	r1, r3
 800d8a0:	68f8      	ldr	r0, [r7, #12]
 800d8a2:	f000 fa31 	bl	800dd08 <USBD_CoreFindEP>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8aa:	7dbb      	ldrb	r3, [r7, #22]
 800d8ac:	2bff      	cmp	r3, #255	; 0xff
 800d8ae:	d025      	beq.n	800d8fc <USBD_LL_DataOutStage+0x15c>
 800d8b0:	7dbb      	ldrb	r3, [r7, #22]
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d122      	bne.n	800d8fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d8bc:	b2db      	uxtb	r3, r3
 800d8be:	2b03      	cmp	r3, #3
 800d8c0:	d117      	bne.n	800d8f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d8c2:	7dba      	ldrb	r2, [r7, #22]
 800d8c4:	68fb      	ldr	r3, [r7, #12]
 800d8c6:	32ae      	adds	r2, #174	; 0xae
 800d8c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8cc:	699b      	ldr	r3, [r3, #24]
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00f      	beq.n	800d8f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d8d2:	7dba      	ldrb	r2, [r7, #22]
 800d8d4:	68fb      	ldr	r3, [r7, #12]
 800d8d6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d8da:	7dba      	ldrb	r2, [r7, #22]
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	32ae      	adds	r2, #174	; 0xae
 800d8e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8e4:	699b      	ldr	r3, [r3, #24]
 800d8e6:	7afa      	ldrb	r2, [r7, #11]
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	68f8      	ldr	r0, [r7, #12]
 800d8ec:	4798      	blx	r3
 800d8ee:	4603      	mov	r3, r0
 800d8f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d8f2:	7dfb      	ldrb	r3, [r7, #23]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d001      	beq.n	800d8fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d8f8:	7dfb      	ldrb	r3, [r7, #23]
 800d8fa:	e000      	b.n	800d8fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d8fc:	2300      	movs	r3, #0
}
 800d8fe:	4618      	mov	r0, r3
 800d900:	3718      	adds	r7, #24
 800d902:	46bd      	mov	sp, r7
 800d904:	bd80      	pop	{r7, pc}

0800d906 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d906:	b580      	push	{r7, lr}
 800d908:	b086      	sub	sp, #24
 800d90a:	af00      	add	r7, sp, #0
 800d90c:	60f8      	str	r0, [r7, #12]
 800d90e:	460b      	mov	r3, r1
 800d910:	607a      	str	r2, [r7, #4]
 800d912:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d914:	7afb      	ldrb	r3, [r7, #11]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d16f      	bne.n	800d9fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d91a:	68fb      	ldr	r3, [r7, #12]
 800d91c:	3314      	adds	r3, #20
 800d91e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d926:	2b02      	cmp	r3, #2
 800d928:	d15a      	bne.n	800d9e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d92a:	693b      	ldr	r3, [r7, #16]
 800d92c:	689a      	ldr	r2, [r3, #8]
 800d92e:	693b      	ldr	r3, [r7, #16]
 800d930:	68db      	ldr	r3, [r3, #12]
 800d932:	429a      	cmp	r2, r3
 800d934:	d914      	bls.n	800d960 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	689a      	ldr	r2, [r3, #8]
 800d93a:	693b      	ldr	r3, [r7, #16]
 800d93c:	68db      	ldr	r3, [r3, #12]
 800d93e:	1ad2      	subs	r2, r2, r3
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d944:	693b      	ldr	r3, [r7, #16]
 800d946:	689b      	ldr	r3, [r3, #8]
 800d948:	461a      	mov	r2, r3
 800d94a:	6879      	ldr	r1, [r7, #4]
 800d94c:	68f8      	ldr	r0, [r7, #12]
 800d94e:	f001 f8d6 	bl	800eafe <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d952:	2300      	movs	r3, #0
 800d954:	2200      	movs	r2, #0
 800d956:	2100      	movs	r1, #0
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f003 fe21 	bl	80115a0 <USBD_LL_PrepareReceive>
 800d95e:	e03f      	b.n	800d9e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	68da      	ldr	r2, [r3, #12]
 800d964:	693b      	ldr	r3, [r7, #16]
 800d966:	689b      	ldr	r3, [r3, #8]
 800d968:	429a      	cmp	r2, r3
 800d96a:	d11c      	bne.n	800d9a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d96c:	693b      	ldr	r3, [r7, #16]
 800d96e:	685a      	ldr	r2, [r3, #4]
 800d970:	693b      	ldr	r3, [r7, #16]
 800d972:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d974:	429a      	cmp	r2, r3
 800d976:	d316      	bcc.n	800d9a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	685a      	ldr	r2, [r3, #4]
 800d97c:	68fb      	ldr	r3, [r7, #12]
 800d97e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d982:	429a      	cmp	r2, r3
 800d984:	d20f      	bcs.n	800d9a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d986:	2200      	movs	r2, #0
 800d988:	2100      	movs	r1, #0
 800d98a:	68f8      	ldr	r0, [r7, #12]
 800d98c:	f001 f8b7 	bl	800eafe <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d990:	68fb      	ldr	r3, [r7, #12]
 800d992:	2200      	movs	r2, #0
 800d994:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d998:	2300      	movs	r3, #0
 800d99a:	2200      	movs	r2, #0
 800d99c:	2100      	movs	r1, #0
 800d99e:	68f8      	ldr	r0, [r7, #12]
 800d9a0:	f003 fdfe 	bl	80115a0 <USBD_LL_PrepareReceive>
 800d9a4:	e01c      	b.n	800d9e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9ac:	b2db      	uxtb	r3, r3
 800d9ae:	2b03      	cmp	r3, #3
 800d9b0:	d10f      	bne.n	800d9d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9b8:	68db      	ldr	r3, [r3, #12]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d009      	beq.n	800d9d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	2200      	movs	r2, #0
 800d9c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d9cc:	68db      	ldr	r3, [r3, #12]
 800d9ce:	68f8      	ldr	r0, [r7, #12]
 800d9d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d9d2:	2180      	movs	r1, #128	; 0x80
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f003 fd39 	bl	801144c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d9da:	68f8      	ldr	r0, [r7, #12]
 800d9dc:	f001 f8e1 	bl	800eba2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800d9e0:	68fb      	ldr	r3, [r7, #12]
 800d9e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d9e6:	2b00      	cmp	r3, #0
 800d9e8:	d03a      	beq.n	800da60 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d9ea:	68f8      	ldr	r0, [r7, #12]
 800d9ec:	f7ff fe42 	bl	800d674 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	2200      	movs	r2, #0
 800d9f4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d9f8:	e032      	b.n	800da60 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d9fa:	7afb      	ldrb	r3, [r7, #11]
 800d9fc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800da00:	b2db      	uxtb	r3, r3
 800da02:	4619      	mov	r1, r3
 800da04:	68f8      	ldr	r0, [r7, #12]
 800da06:	f000 f97f 	bl	800dd08 <USBD_CoreFindEP>
 800da0a:	4603      	mov	r3, r0
 800da0c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800da0e:	7dfb      	ldrb	r3, [r7, #23]
 800da10:	2bff      	cmp	r3, #255	; 0xff
 800da12:	d025      	beq.n	800da60 <USBD_LL_DataInStage+0x15a>
 800da14:	7dfb      	ldrb	r3, [r7, #23]
 800da16:	2b00      	cmp	r3, #0
 800da18:	d122      	bne.n	800da60 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da1a:	68fb      	ldr	r3, [r7, #12]
 800da1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800da20:	b2db      	uxtb	r3, r3
 800da22:	2b03      	cmp	r3, #3
 800da24:	d11c      	bne.n	800da60 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800da26:	7dfa      	ldrb	r2, [r7, #23]
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	32ae      	adds	r2, #174	; 0xae
 800da2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da30:	695b      	ldr	r3, [r3, #20]
 800da32:	2b00      	cmp	r3, #0
 800da34:	d014      	beq.n	800da60 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800da36:	7dfa      	ldrb	r2, [r7, #23]
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800da3e:	7dfa      	ldrb	r2, [r7, #23]
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	32ae      	adds	r2, #174	; 0xae
 800da44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da48:	695b      	ldr	r3, [r3, #20]
 800da4a:	7afa      	ldrb	r2, [r7, #11]
 800da4c:	4611      	mov	r1, r2
 800da4e:	68f8      	ldr	r0, [r7, #12]
 800da50:	4798      	blx	r3
 800da52:	4603      	mov	r3, r0
 800da54:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800da56:	7dbb      	ldrb	r3, [r7, #22]
 800da58:	2b00      	cmp	r3, #0
 800da5a:	d001      	beq.n	800da60 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800da5c:	7dbb      	ldrb	r3, [r7, #22]
 800da5e:	e000      	b.n	800da62 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800da60:	2300      	movs	r3, #0
}
 800da62:	4618      	mov	r0, r3
 800da64:	3718      	adds	r7, #24
 800da66:	46bd      	mov	sp, r7
 800da68:	bd80      	pop	{r7, pc}

0800da6a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800da6a:	b580      	push	{r7, lr}
 800da6c:	b084      	sub	sp, #16
 800da6e:	af00      	add	r7, sp, #0
 800da70:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800da72:	2300      	movs	r3, #0
 800da74:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2200      	movs	r2, #0
 800da82:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	2200      	movs	r2, #0
 800da8a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2200      	movs	r2, #0
 800da90:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800da9c:	687b      	ldr	r3, [r7, #4]
 800da9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d014      	beq.n	800dad0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daac:	685b      	ldr	r3, [r3, #4]
 800daae:	2b00      	cmp	r3, #0
 800dab0:	d00e      	beq.n	800dad0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dab8:	685b      	ldr	r3, [r3, #4]
 800daba:	687a      	ldr	r2, [r7, #4]
 800dabc:	6852      	ldr	r2, [r2, #4]
 800dabe:	b2d2      	uxtb	r2, r2
 800dac0:	4611      	mov	r1, r2
 800dac2:	6878      	ldr	r0, [r7, #4]
 800dac4:	4798      	blx	r3
 800dac6:	4603      	mov	r3, r0
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d001      	beq.n	800dad0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dacc:	2303      	movs	r3, #3
 800dace:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dad0:	2340      	movs	r3, #64	; 0x40
 800dad2:	2200      	movs	r2, #0
 800dad4:	2100      	movs	r1, #0
 800dad6:	6878      	ldr	r0, [r7, #4]
 800dad8:	f003 fc73 	bl	80113c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2201      	movs	r2, #1
 800dae0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	2240      	movs	r2, #64	; 0x40
 800dae8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800daec:	2340      	movs	r3, #64	; 0x40
 800daee:	2200      	movs	r2, #0
 800daf0:	2180      	movs	r1, #128	; 0x80
 800daf2:	6878      	ldr	r0, [r7, #4]
 800daf4:	f003 fc65 	bl	80113c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2201      	movs	r2, #1
 800dafc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	2240      	movs	r2, #64	; 0x40
 800db02:	621a      	str	r2, [r3, #32]

  return ret;
 800db04:	7bfb      	ldrb	r3, [r7, #15]
}
 800db06:	4618      	mov	r0, r3
 800db08:	3710      	adds	r7, #16
 800db0a:	46bd      	mov	sp, r7
 800db0c:	bd80      	pop	{r7, pc}

0800db0e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800db0e:	b480      	push	{r7}
 800db10:	b083      	sub	sp, #12
 800db12:	af00      	add	r7, sp, #0
 800db14:	6078      	str	r0, [r7, #4]
 800db16:	460b      	mov	r3, r1
 800db18:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	78fa      	ldrb	r2, [r7, #3]
 800db1e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800db20:	2300      	movs	r3, #0
}
 800db22:	4618      	mov	r0, r3
 800db24:	370c      	adds	r7, #12
 800db26:	46bd      	mov	sp, r7
 800db28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db2c:	4770      	bx	lr

0800db2e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800db2e:	b480      	push	{r7}
 800db30:	b083      	sub	sp, #12
 800db32:	af00      	add	r7, sp, #0
 800db34:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db3c:	b2da      	uxtb	r2, r3
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	2204      	movs	r2, #4
 800db48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800db4c:	2300      	movs	r3, #0
}
 800db4e:	4618      	mov	r0, r3
 800db50:	370c      	adds	r7, #12
 800db52:	46bd      	mov	sp, r7
 800db54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db58:	4770      	bx	lr

0800db5a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800db5a:	b480      	push	{r7}
 800db5c:	b083      	sub	sp, #12
 800db5e:	af00      	add	r7, sp, #0
 800db60:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db68:	b2db      	uxtb	r3, r3
 800db6a:	2b04      	cmp	r3, #4
 800db6c:	d106      	bne.n	800db7c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800db74:	b2da      	uxtb	r2, r3
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800db7c:	2300      	movs	r3, #0
}
 800db7e:	4618      	mov	r0, r3
 800db80:	370c      	adds	r7, #12
 800db82:	46bd      	mov	sp, r7
 800db84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db88:	4770      	bx	lr

0800db8a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800db8a:	b580      	push	{r7, lr}
 800db8c:	b082      	sub	sp, #8
 800db8e:	af00      	add	r7, sp, #0
 800db90:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db98:	b2db      	uxtb	r3, r3
 800db9a:	2b03      	cmp	r3, #3
 800db9c:	d110      	bne.n	800dbc0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d00b      	beq.n	800dbc0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbae:	69db      	ldr	r3, [r3, #28]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d005      	beq.n	800dbc0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dbb4:	687b      	ldr	r3, [r7, #4]
 800dbb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbba:	69db      	ldr	r3, [r3, #28]
 800dbbc:	6878      	ldr	r0, [r7, #4]
 800dbbe:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dbc0:	2300      	movs	r3, #0
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	3708      	adds	r7, #8
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	bd80      	pop	{r7, pc}

0800dbca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dbca:	b580      	push	{r7, lr}
 800dbcc:	b082      	sub	sp, #8
 800dbce:	af00      	add	r7, sp, #0
 800dbd0:	6078      	str	r0, [r7, #4]
 800dbd2:	460b      	mov	r3, r1
 800dbd4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	32ae      	adds	r2, #174	; 0xae
 800dbe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d101      	bne.n	800dbec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dbe8:	2303      	movs	r3, #3
 800dbea:	e01c      	b.n	800dc26 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dbec:	687b      	ldr	r3, [r7, #4]
 800dbee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dbf2:	b2db      	uxtb	r3, r3
 800dbf4:	2b03      	cmp	r3, #3
 800dbf6:	d115      	bne.n	800dc24 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	32ae      	adds	r2, #174	; 0xae
 800dc02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc06:	6a1b      	ldr	r3, [r3, #32]
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d00b      	beq.n	800dc24 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc12:	687b      	ldr	r3, [r7, #4]
 800dc14:	32ae      	adds	r2, #174	; 0xae
 800dc16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc1a:	6a1b      	ldr	r3, [r3, #32]
 800dc1c:	78fa      	ldrb	r2, [r7, #3]
 800dc1e:	4611      	mov	r1, r2
 800dc20:	6878      	ldr	r0, [r7, #4]
 800dc22:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc24:	2300      	movs	r3, #0
}
 800dc26:	4618      	mov	r0, r3
 800dc28:	3708      	adds	r7, #8
 800dc2a:	46bd      	mov	sp, r7
 800dc2c:	bd80      	pop	{r7, pc}

0800dc2e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dc2e:	b580      	push	{r7, lr}
 800dc30:	b082      	sub	sp, #8
 800dc32:	af00      	add	r7, sp, #0
 800dc34:	6078      	str	r0, [r7, #4]
 800dc36:	460b      	mov	r3, r1
 800dc38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc40:	687b      	ldr	r3, [r7, #4]
 800dc42:	32ae      	adds	r2, #174	; 0xae
 800dc44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc48:	2b00      	cmp	r3, #0
 800dc4a:	d101      	bne.n	800dc50 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dc4c:	2303      	movs	r3, #3
 800dc4e:	e01c      	b.n	800dc8a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc56:	b2db      	uxtb	r3, r3
 800dc58:	2b03      	cmp	r3, #3
 800dc5a:	d115      	bne.n	800dc88 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	32ae      	adds	r2, #174	; 0xae
 800dc66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d00b      	beq.n	800dc88 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	32ae      	adds	r2, #174	; 0xae
 800dc7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	78fa      	ldrb	r2, [r7, #3]
 800dc82:	4611      	mov	r1, r2
 800dc84:	6878      	ldr	r0, [r7, #4]
 800dc86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dc88:	2300      	movs	r3, #0
}
 800dc8a:	4618      	mov	r0, r3
 800dc8c:	3708      	adds	r7, #8
 800dc8e:	46bd      	mov	sp, r7
 800dc90:	bd80      	pop	{r7, pc}

0800dc92 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800dc92:	b480      	push	{r7}
 800dc94:	b083      	sub	sp, #12
 800dc96:	af00      	add	r7, sp, #0
 800dc98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dc9a:	2300      	movs	r3, #0
}
 800dc9c:	4618      	mov	r0, r3
 800dc9e:	370c      	adds	r7, #12
 800dca0:	46bd      	mov	sp, r7
 800dca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca6:	4770      	bx	lr

0800dca8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b084      	sub	sp, #16
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dcb0:	2300      	movs	r3, #0
 800dcb2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	2201      	movs	r2, #1
 800dcb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d00e      	beq.n	800dce4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dccc:	685b      	ldr	r3, [r3, #4]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	6852      	ldr	r2, [r2, #4]
 800dcd2:	b2d2      	uxtb	r2, r2
 800dcd4:	4611      	mov	r1, r2
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	4798      	blx	r3
 800dcda:	4603      	mov	r3, r0
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d001      	beq.n	800dce4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800dce0:	2303      	movs	r3, #3
 800dce2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dce4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dce6:	4618      	mov	r0, r3
 800dce8:	3710      	adds	r7, #16
 800dcea:	46bd      	mov	sp, r7
 800dcec:	bd80      	pop	{r7, pc}

0800dcee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dcee:	b480      	push	{r7}
 800dcf0:	b083      	sub	sp, #12
 800dcf2:	af00      	add	r7, sp, #0
 800dcf4:	6078      	str	r0, [r7, #4]
 800dcf6:	460b      	mov	r3, r1
 800dcf8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dcfa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dcfc:	4618      	mov	r0, r3
 800dcfe:	370c      	adds	r7, #12
 800dd00:	46bd      	mov	sp, r7
 800dd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd06:	4770      	bx	lr

0800dd08 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800dd08:	b480      	push	{r7}
 800dd0a:	b083      	sub	sp, #12
 800dd0c:	af00      	add	r7, sp, #0
 800dd0e:	6078      	str	r0, [r7, #4]
 800dd10:	460b      	mov	r3, r1
 800dd12:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800dd14:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800dd16:	4618      	mov	r0, r3
 800dd18:	370c      	adds	r7, #12
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr

0800dd22 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800dd22:	b580      	push	{r7, lr}
 800dd24:	b086      	sub	sp, #24
 800dd26:	af00      	add	r7, sp, #0
 800dd28:	6078      	str	r0, [r7, #4]
 800dd2a:	460b      	mov	r3, r1
 800dd2c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800dd36:	2300      	movs	r3, #0
 800dd38:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	885b      	ldrh	r3, [r3, #2]
 800dd3e:	b29a      	uxth	r2, r3
 800dd40:	68fb      	ldr	r3, [r7, #12]
 800dd42:	781b      	ldrb	r3, [r3, #0]
 800dd44:	b29b      	uxth	r3, r3
 800dd46:	429a      	cmp	r2, r3
 800dd48:	d920      	bls.n	800dd8c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	781b      	ldrb	r3, [r3, #0]
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800dd52:	e013      	b.n	800dd7c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800dd54:	f107 030a 	add.w	r3, r7, #10
 800dd58:	4619      	mov	r1, r3
 800dd5a:	6978      	ldr	r0, [r7, #20]
 800dd5c:	f000 f81b 	bl	800dd96 <USBD_GetNextDesc>
 800dd60:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800dd62:	697b      	ldr	r3, [r7, #20]
 800dd64:	785b      	ldrb	r3, [r3, #1]
 800dd66:	2b05      	cmp	r3, #5
 800dd68:	d108      	bne.n	800dd7c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800dd6a:	697b      	ldr	r3, [r7, #20]
 800dd6c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800dd6e:	693b      	ldr	r3, [r7, #16]
 800dd70:	789b      	ldrb	r3, [r3, #2]
 800dd72:	78fa      	ldrb	r2, [r7, #3]
 800dd74:	429a      	cmp	r2, r3
 800dd76:	d008      	beq.n	800dd8a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	885b      	ldrh	r3, [r3, #2]
 800dd80:	b29a      	uxth	r2, r3
 800dd82:	897b      	ldrh	r3, [r7, #10]
 800dd84:	429a      	cmp	r2, r3
 800dd86:	d8e5      	bhi.n	800dd54 <USBD_GetEpDesc+0x32>
 800dd88:	e000      	b.n	800dd8c <USBD_GetEpDesc+0x6a>
          break;
 800dd8a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800dd8c:	693b      	ldr	r3, [r7, #16]
}
 800dd8e:	4618      	mov	r0, r3
 800dd90:	3718      	adds	r7, #24
 800dd92:	46bd      	mov	sp, r7
 800dd94:	bd80      	pop	{r7, pc}

0800dd96 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dd96:	b480      	push	{r7}
 800dd98:	b085      	sub	sp, #20
 800dd9a:	af00      	add	r7, sp, #0
 800dd9c:	6078      	str	r0, [r7, #4]
 800dd9e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	881a      	ldrh	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	781b      	ldrb	r3, [r3, #0]
 800ddac:	b29b      	uxth	r3, r3
 800ddae:	4413      	add	r3, r2
 800ddb0:	b29a      	uxth	r2, r3
 800ddb2:	683b      	ldr	r3, [r7, #0]
 800ddb4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	781b      	ldrb	r3, [r3, #0]
 800ddba:	461a      	mov	r2, r3
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4413      	add	r3, r2
 800ddc0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ddc2:	68fb      	ldr	r3, [r7, #12]
}
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	3714      	adds	r7, #20
 800ddc8:	46bd      	mov	sp, r7
 800ddca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddce:	4770      	bx	lr

0800ddd0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ddd0:	b480      	push	{r7}
 800ddd2:	b087      	sub	sp, #28
 800ddd4:	af00      	add	r7, sp, #0
 800ddd6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800dddc:	697b      	ldr	r3, [r7, #20]
 800ddde:	781b      	ldrb	r3, [r3, #0]
 800dde0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800dde2:	697b      	ldr	r3, [r7, #20]
 800dde4:	3301      	adds	r3, #1
 800dde6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800dde8:	697b      	ldr	r3, [r7, #20]
 800ddea:	781b      	ldrb	r3, [r3, #0]
 800ddec:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ddee:	8a3b      	ldrh	r3, [r7, #16]
 800ddf0:	021b      	lsls	r3, r3, #8
 800ddf2:	b21a      	sxth	r2, r3
 800ddf4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ddf8:	4313      	orrs	r3, r2
 800ddfa:	b21b      	sxth	r3, r3
 800ddfc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ddfe:	89fb      	ldrh	r3, [r7, #14]
}
 800de00:	4618      	mov	r0, r3
 800de02:	371c      	adds	r7, #28
 800de04:	46bd      	mov	sp, r7
 800de06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de0a:	4770      	bx	lr

0800de0c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	b084      	sub	sp, #16
 800de10:	af00      	add	r7, sp, #0
 800de12:	6078      	str	r0, [r7, #4]
 800de14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de16:	2300      	movs	r3, #0
 800de18:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	781b      	ldrb	r3, [r3, #0]
 800de1e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800de22:	2b40      	cmp	r3, #64	; 0x40
 800de24:	d005      	beq.n	800de32 <USBD_StdDevReq+0x26>
 800de26:	2b40      	cmp	r3, #64	; 0x40
 800de28:	d857      	bhi.n	800deda <USBD_StdDevReq+0xce>
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00f      	beq.n	800de4e <USBD_StdDevReq+0x42>
 800de2e:	2b20      	cmp	r3, #32
 800de30:	d153      	bne.n	800deda <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800de38:	687b      	ldr	r3, [r7, #4]
 800de3a:	32ae      	adds	r2, #174	; 0xae
 800de3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de40:	689b      	ldr	r3, [r3, #8]
 800de42:	6839      	ldr	r1, [r7, #0]
 800de44:	6878      	ldr	r0, [r7, #4]
 800de46:	4798      	blx	r3
 800de48:	4603      	mov	r3, r0
 800de4a:	73fb      	strb	r3, [r7, #15]
      break;
 800de4c:	e04a      	b.n	800dee4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800de4e:	683b      	ldr	r3, [r7, #0]
 800de50:	785b      	ldrb	r3, [r3, #1]
 800de52:	2b09      	cmp	r3, #9
 800de54:	d83b      	bhi.n	800dece <USBD_StdDevReq+0xc2>
 800de56:	a201      	add	r2, pc, #4	; (adr r2, 800de5c <USBD_StdDevReq+0x50>)
 800de58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de5c:	0800deb1 	.word	0x0800deb1
 800de60:	0800dec5 	.word	0x0800dec5
 800de64:	0800decf 	.word	0x0800decf
 800de68:	0800debb 	.word	0x0800debb
 800de6c:	0800decf 	.word	0x0800decf
 800de70:	0800de8f 	.word	0x0800de8f
 800de74:	0800de85 	.word	0x0800de85
 800de78:	0800decf 	.word	0x0800decf
 800de7c:	0800dea7 	.word	0x0800dea7
 800de80:	0800de99 	.word	0x0800de99
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800de84:	6839      	ldr	r1, [r7, #0]
 800de86:	6878      	ldr	r0, [r7, #4]
 800de88:	f000 fa3c 	bl	800e304 <USBD_GetDescriptor>
          break;
 800de8c:	e024      	b.n	800ded8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800de8e:	6839      	ldr	r1, [r7, #0]
 800de90:	6878      	ldr	r0, [r7, #4]
 800de92:	f000 fbcb 	bl	800e62c <USBD_SetAddress>
          break;
 800de96:	e01f      	b.n	800ded8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 fc0a 	bl	800e6b4 <USBD_SetConfig>
 800dea0:	4603      	mov	r3, r0
 800dea2:	73fb      	strb	r3, [r7, #15]
          break;
 800dea4:	e018      	b.n	800ded8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dea6:	6839      	ldr	r1, [r7, #0]
 800dea8:	6878      	ldr	r0, [r7, #4]
 800deaa:	f000 fcad 	bl	800e808 <USBD_GetConfig>
          break;
 800deae:	e013      	b.n	800ded8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 fcde 	bl	800e874 <USBD_GetStatus>
          break;
 800deb8:	e00e      	b.n	800ded8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800deba:	6839      	ldr	r1, [r7, #0]
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f000 fd0d 	bl	800e8dc <USBD_SetFeature>
          break;
 800dec2:	e009      	b.n	800ded8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dec4:	6839      	ldr	r1, [r7, #0]
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 fd31 	bl	800e92e <USBD_ClrFeature>
          break;
 800decc:	e004      	b.n	800ded8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 fd88 	bl	800e9e6 <USBD_CtlError>
          break;
 800ded6:	bf00      	nop
      }
      break;
 800ded8:	e004      	b.n	800dee4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800deda:	6839      	ldr	r1, [r7, #0]
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f000 fd82 	bl	800e9e6 <USBD_CtlError>
      break;
 800dee2:	bf00      	nop
  }

  return ret;
 800dee4:	7bfb      	ldrb	r3, [r7, #15]
}
 800dee6:	4618      	mov	r0, r3
 800dee8:	3710      	adds	r7, #16
 800deea:	46bd      	mov	sp, r7
 800deec:	bd80      	pop	{r7, pc}
 800deee:	bf00      	nop

0800def0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b084      	sub	sp, #16
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
 800def8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800defa:	2300      	movs	r3, #0
 800defc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800defe:	683b      	ldr	r3, [r7, #0]
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df06:	2b40      	cmp	r3, #64	; 0x40
 800df08:	d005      	beq.n	800df16 <USBD_StdItfReq+0x26>
 800df0a:	2b40      	cmp	r3, #64	; 0x40
 800df0c:	d852      	bhi.n	800dfb4 <USBD_StdItfReq+0xc4>
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d001      	beq.n	800df16 <USBD_StdItfReq+0x26>
 800df12:	2b20      	cmp	r3, #32
 800df14:	d14e      	bne.n	800dfb4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df1c:	b2db      	uxtb	r3, r3
 800df1e:	3b01      	subs	r3, #1
 800df20:	2b02      	cmp	r3, #2
 800df22:	d840      	bhi.n	800dfa6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800df24:	683b      	ldr	r3, [r7, #0]
 800df26:	889b      	ldrh	r3, [r3, #4]
 800df28:	b2db      	uxtb	r3, r3
 800df2a:	2b01      	cmp	r3, #1
 800df2c:	d836      	bhi.n	800df9c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800df2e:	683b      	ldr	r3, [r7, #0]
 800df30:	889b      	ldrh	r3, [r3, #4]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	4619      	mov	r1, r3
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7ff fed9 	bl	800dcee <USBD_CoreFindIF>
 800df3c:	4603      	mov	r3, r0
 800df3e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df40:	7bbb      	ldrb	r3, [r7, #14]
 800df42:	2bff      	cmp	r3, #255	; 0xff
 800df44:	d01d      	beq.n	800df82 <USBD_StdItfReq+0x92>
 800df46:	7bbb      	ldrb	r3, [r7, #14]
 800df48:	2b00      	cmp	r3, #0
 800df4a:	d11a      	bne.n	800df82 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800df4c:	7bba      	ldrb	r2, [r7, #14]
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	32ae      	adds	r2, #174	; 0xae
 800df52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df56:	689b      	ldr	r3, [r3, #8]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d00f      	beq.n	800df7c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800df5c:	7bba      	ldrb	r2, [r7, #14]
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800df64:	7bba      	ldrb	r2, [r7, #14]
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	32ae      	adds	r2, #174	; 0xae
 800df6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df6e:	689b      	ldr	r3, [r3, #8]
 800df70:	6839      	ldr	r1, [r7, #0]
 800df72:	6878      	ldr	r0, [r7, #4]
 800df74:	4798      	blx	r3
 800df76:	4603      	mov	r3, r0
 800df78:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df7a:	e004      	b.n	800df86 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800df7c:	2303      	movs	r3, #3
 800df7e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800df80:	e001      	b.n	800df86 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800df82:	2303      	movs	r3, #3
 800df84:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800df86:	683b      	ldr	r3, [r7, #0]
 800df88:	88db      	ldrh	r3, [r3, #6]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d110      	bne.n	800dfb0 <USBD_StdItfReq+0xc0>
 800df8e:	7bfb      	ldrb	r3, [r7, #15]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d10d      	bne.n	800dfb0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 fdf1 	bl	800eb7c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800df9a:	e009      	b.n	800dfb0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800df9c:	6839      	ldr	r1, [r7, #0]
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f000 fd21 	bl	800e9e6 <USBD_CtlError>
          break;
 800dfa4:	e004      	b.n	800dfb0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800dfa6:	6839      	ldr	r1, [r7, #0]
 800dfa8:	6878      	ldr	r0, [r7, #4]
 800dfaa:	f000 fd1c 	bl	800e9e6 <USBD_CtlError>
          break;
 800dfae:	e000      	b.n	800dfb2 <USBD_StdItfReq+0xc2>
          break;
 800dfb0:	bf00      	nop
      }
      break;
 800dfb2:	e004      	b.n	800dfbe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800dfb4:	6839      	ldr	r1, [r7, #0]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f000 fd15 	bl	800e9e6 <USBD_CtlError>
      break;
 800dfbc:	bf00      	nop
  }

  return ret;
 800dfbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfc0:	4618      	mov	r0, r3
 800dfc2:	3710      	adds	r7, #16
 800dfc4:	46bd      	mov	sp, r7
 800dfc6:	bd80      	pop	{r7, pc}

0800dfc8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfc8:	b580      	push	{r7, lr}
 800dfca:	b084      	sub	sp, #16
 800dfcc:	af00      	add	r7, sp, #0
 800dfce:	6078      	str	r0, [r7, #4]
 800dfd0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800dfd2:	2300      	movs	r3, #0
 800dfd4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800dfd6:	683b      	ldr	r3, [r7, #0]
 800dfd8:	889b      	ldrh	r3, [r3, #4]
 800dfda:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800dfdc:	683b      	ldr	r3, [r7, #0]
 800dfde:	781b      	ldrb	r3, [r3, #0]
 800dfe0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800dfe4:	2b40      	cmp	r3, #64	; 0x40
 800dfe6:	d007      	beq.n	800dff8 <USBD_StdEPReq+0x30>
 800dfe8:	2b40      	cmp	r3, #64	; 0x40
 800dfea:	f200 817f 	bhi.w	800e2ec <USBD_StdEPReq+0x324>
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d02a      	beq.n	800e048 <USBD_StdEPReq+0x80>
 800dff2:	2b20      	cmp	r3, #32
 800dff4:	f040 817a 	bne.w	800e2ec <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800dff8:	7bbb      	ldrb	r3, [r7, #14]
 800dffa:	4619      	mov	r1, r3
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f7ff fe83 	bl	800dd08 <USBD_CoreFindEP>
 800e002:	4603      	mov	r3, r0
 800e004:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e006:	7b7b      	ldrb	r3, [r7, #13]
 800e008:	2bff      	cmp	r3, #255	; 0xff
 800e00a:	f000 8174 	beq.w	800e2f6 <USBD_StdEPReq+0x32e>
 800e00e:	7b7b      	ldrb	r3, [r7, #13]
 800e010:	2b00      	cmp	r3, #0
 800e012:	f040 8170 	bne.w	800e2f6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e016:	7b7a      	ldrb	r2, [r7, #13]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e01e:	7b7a      	ldrb	r2, [r7, #13]
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	32ae      	adds	r2, #174	; 0xae
 800e024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e028:	689b      	ldr	r3, [r3, #8]
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	f000 8163 	beq.w	800e2f6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e030:	7b7a      	ldrb	r2, [r7, #13]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	32ae      	adds	r2, #174	; 0xae
 800e036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e03a:	689b      	ldr	r3, [r3, #8]
 800e03c:	6839      	ldr	r1, [r7, #0]
 800e03e:	6878      	ldr	r0, [r7, #4]
 800e040:	4798      	blx	r3
 800e042:	4603      	mov	r3, r0
 800e044:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e046:	e156      	b.n	800e2f6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e048:	683b      	ldr	r3, [r7, #0]
 800e04a:	785b      	ldrb	r3, [r3, #1]
 800e04c:	2b03      	cmp	r3, #3
 800e04e:	d008      	beq.n	800e062 <USBD_StdEPReq+0x9a>
 800e050:	2b03      	cmp	r3, #3
 800e052:	f300 8145 	bgt.w	800e2e0 <USBD_StdEPReq+0x318>
 800e056:	2b00      	cmp	r3, #0
 800e058:	f000 809b 	beq.w	800e192 <USBD_StdEPReq+0x1ca>
 800e05c:	2b01      	cmp	r3, #1
 800e05e:	d03c      	beq.n	800e0da <USBD_StdEPReq+0x112>
 800e060:	e13e      	b.n	800e2e0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e062:	687b      	ldr	r3, [r7, #4]
 800e064:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e068:	b2db      	uxtb	r3, r3
 800e06a:	2b02      	cmp	r3, #2
 800e06c:	d002      	beq.n	800e074 <USBD_StdEPReq+0xac>
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d016      	beq.n	800e0a0 <USBD_StdEPReq+0xd8>
 800e072:	e02c      	b.n	800e0ce <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e074:	7bbb      	ldrb	r3, [r7, #14]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d00d      	beq.n	800e096 <USBD_StdEPReq+0xce>
 800e07a:	7bbb      	ldrb	r3, [r7, #14]
 800e07c:	2b80      	cmp	r3, #128	; 0x80
 800e07e:	d00a      	beq.n	800e096 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e080:	7bbb      	ldrb	r3, [r7, #14]
 800e082:	4619      	mov	r1, r3
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	f003 f9e1 	bl	801144c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e08a:	2180      	movs	r1, #128	; 0x80
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f003 f9dd 	bl	801144c <USBD_LL_StallEP>
 800e092:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e094:	e020      	b.n	800e0d8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 fca4 	bl	800e9e6 <USBD_CtlError>
              break;
 800e09e:	e01b      	b.n	800e0d8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e0a0:	683b      	ldr	r3, [r7, #0]
 800e0a2:	885b      	ldrh	r3, [r3, #2]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d10e      	bne.n	800e0c6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e0a8:	7bbb      	ldrb	r3, [r7, #14]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d00b      	beq.n	800e0c6 <USBD_StdEPReq+0xfe>
 800e0ae:	7bbb      	ldrb	r3, [r7, #14]
 800e0b0:	2b80      	cmp	r3, #128	; 0x80
 800e0b2:	d008      	beq.n	800e0c6 <USBD_StdEPReq+0xfe>
 800e0b4:	683b      	ldr	r3, [r7, #0]
 800e0b6:	88db      	ldrh	r3, [r3, #6]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	d104      	bne.n	800e0c6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0bc:	7bbb      	ldrb	r3, [r7, #14]
 800e0be:	4619      	mov	r1, r3
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f003 f9c3 	bl	801144c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e0c6:	6878      	ldr	r0, [r7, #4]
 800e0c8:	f000 fd58 	bl	800eb7c <USBD_CtlSendStatus>

              break;
 800e0cc:	e004      	b.n	800e0d8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e0ce:	6839      	ldr	r1, [r7, #0]
 800e0d0:	6878      	ldr	r0, [r7, #4]
 800e0d2:	f000 fc88 	bl	800e9e6 <USBD_CtlError>
              break;
 800e0d6:	bf00      	nop
          }
          break;
 800e0d8:	e107      	b.n	800e2ea <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0e0:	b2db      	uxtb	r3, r3
 800e0e2:	2b02      	cmp	r3, #2
 800e0e4:	d002      	beq.n	800e0ec <USBD_StdEPReq+0x124>
 800e0e6:	2b03      	cmp	r3, #3
 800e0e8:	d016      	beq.n	800e118 <USBD_StdEPReq+0x150>
 800e0ea:	e04b      	b.n	800e184 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e0ec:	7bbb      	ldrb	r3, [r7, #14]
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d00d      	beq.n	800e10e <USBD_StdEPReq+0x146>
 800e0f2:	7bbb      	ldrb	r3, [r7, #14]
 800e0f4:	2b80      	cmp	r3, #128	; 0x80
 800e0f6:	d00a      	beq.n	800e10e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e0f8:	7bbb      	ldrb	r3, [r7, #14]
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	6878      	ldr	r0, [r7, #4]
 800e0fe:	f003 f9a5 	bl	801144c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e102:	2180      	movs	r1, #128	; 0x80
 800e104:	6878      	ldr	r0, [r7, #4]
 800e106:	f003 f9a1 	bl	801144c <USBD_LL_StallEP>
 800e10a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e10c:	e040      	b.n	800e190 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e10e:	6839      	ldr	r1, [r7, #0]
 800e110:	6878      	ldr	r0, [r7, #4]
 800e112:	f000 fc68 	bl	800e9e6 <USBD_CtlError>
              break;
 800e116:	e03b      	b.n	800e190 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e118:	683b      	ldr	r3, [r7, #0]
 800e11a:	885b      	ldrh	r3, [r3, #2]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d136      	bne.n	800e18e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e120:	7bbb      	ldrb	r3, [r7, #14]
 800e122:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e126:	2b00      	cmp	r3, #0
 800e128:	d004      	beq.n	800e134 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e12a:	7bbb      	ldrb	r3, [r7, #14]
 800e12c:	4619      	mov	r1, r3
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f003 f9ab 	bl	801148a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e134:	6878      	ldr	r0, [r7, #4]
 800e136:	f000 fd21 	bl	800eb7c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e13a:	7bbb      	ldrb	r3, [r7, #14]
 800e13c:	4619      	mov	r1, r3
 800e13e:	6878      	ldr	r0, [r7, #4]
 800e140:	f7ff fde2 	bl	800dd08 <USBD_CoreFindEP>
 800e144:	4603      	mov	r3, r0
 800e146:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e148:	7b7b      	ldrb	r3, [r7, #13]
 800e14a:	2bff      	cmp	r3, #255	; 0xff
 800e14c:	d01f      	beq.n	800e18e <USBD_StdEPReq+0x1c6>
 800e14e:	7b7b      	ldrb	r3, [r7, #13]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d11c      	bne.n	800e18e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e154:	7b7a      	ldrb	r2, [r7, #13]
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e15c:	7b7a      	ldrb	r2, [r7, #13]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	32ae      	adds	r2, #174	; 0xae
 800e162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d010      	beq.n	800e18e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e16c:	7b7a      	ldrb	r2, [r7, #13]
 800e16e:	687b      	ldr	r3, [r7, #4]
 800e170:	32ae      	adds	r2, #174	; 0xae
 800e172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e176:	689b      	ldr	r3, [r3, #8]
 800e178:	6839      	ldr	r1, [r7, #0]
 800e17a:	6878      	ldr	r0, [r7, #4]
 800e17c:	4798      	blx	r3
 800e17e:	4603      	mov	r3, r0
 800e180:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e182:	e004      	b.n	800e18e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e184:	6839      	ldr	r1, [r7, #0]
 800e186:	6878      	ldr	r0, [r7, #4]
 800e188:	f000 fc2d 	bl	800e9e6 <USBD_CtlError>
              break;
 800e18c:	e000      	b.n	800e190 <USBD_StdEPReq+0x1c8>
              break;
 800e18e:	bf00      	nop
          }
          break;
 800e190:	e0ab      	b.n	800e2ea <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e192:	687b      	ldr	r3, [r7, #4]
 800e194:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e198:	b2db      	uxtb	r3, r3
 800e19a:	2b02      	cmp	r3, #2
 800e19c:	d002      	beq.n	800e1a4 <USBD_StdEPReq+0x1dc>
 800e19e:	2b03      	cmp	r3, #3
 800e1a0:	d032      	beq.n	800e208 <USBD_StdEPReq+0x240>
 800e1a2:	e097      	b.n	800e2d4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1a4:	7bbb      	ldrb	r3, [r7, #14]
 800e1a6:	2b00      	cmp	r3, #0
 800e1a8:	d007      	beq.n	800e1ba <USBD_StdEPReq+0x1f2>
 800e1aa:	7bbb      	ldrb	r3, [r7, #14]
 800e1ac:	2b80      	cmp	r3, #128	; 0x80
 800e1ae:	d004      	beq.n	800e1ba <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e1b0:	6839      	ldr	r1, [r7, #0]
 800e1b2:	6878      	ldr	r0, [r7, #4]
 800e1b4:	f000 fc17 	bl	800e9e6 <USBD_CtlError>
                break;
 800e1b8:	e091      	b.n	800e2de <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e1be:	2b00      	cmp	r3, #0
 800e1c0:	da0b      	bge.n	800e1da <USBD_StdEPReq+0x212>
 800e1c2:	7bbb      	ldrb	r3, [r7, #14]
 800e1c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e1c8:	4613      	mov	r3, r2
 800e1ca:	009b      	lsls	r3, r3, #2
 800e1cc:	4413      	add	r3, r2
 800e1ce:	009b      	lsls	r3, r3, #2
 800e1d0:	3310      	adds	r3, #16
 800e1d2:	687a      	ldr	r2, [r7, #4]
 800e1d4:	4413      	add	r3, r2
 800e1d6:	3304      	adds	r3, #4
 800e1d8:	e00b      	b.n	800e1f2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
 800e1dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e1e0:	4613      	mov	r3, r2
 800e1e2:	009b      	lsls	r3, r3, #2
 800e1e4:	4413      	add	r3, r2
 800e1e6:	009b      	lsls	r3, r3, #2
 800e1e8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e1ec:	687a      	ldr	r2, [r7, #4]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	3304      	adds	r3, #4
 800e1f2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e1f4:	68bb      	ldr	r3, [r7, #8]
 800e1f6:	2200      	movs	r2, #0
 800e1f8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e1fa:	68bb      	ldr	r3, [r7, #8]
 800e1fc:	2202      	movs	r2, #2
 800e1fe:	4619      	mov	r1, r3
 800e200:	6878      	ldr	r0, [r7, #4]
 800e202:	f000 fc61 	bl	800eac8 <USBD_CtlSendData>
              break;
 800e206:	e06a      	b.n	800e2de <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	da11      	bge.n	800e234 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e210:	7bbb      	ldrb	r3, [r7, #14]
 800e212:	f003 020f 	and.w	r2, r3, #15
 800e216:	6879      	ldr	r1, [r7, #4]
 800e218:	4613      	mov	r3, r2
 800e21a:	009b      	lsls	r3, r3, #2
 800e21c:	4413      	add	r3, r2
 800e21e:	009b      	lsls	r3, r3, #2
 800e220:	440b      	add	r3, r1
 800e222:	3324      	adds	r3, #36	; 0x24
 800e224:	881b      	ldrh	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d117      	bne.n	800e25a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e22a:	6839      	ldr	r1, [r7, #0]
 800e22c:	6878      	ldr	r0, [r7, #4]
 800e22e:	f000 fbda 	bl	800e9e6 <USBD_CtlError>
                  break;
 800e232:	e054      	b.n	800e2de <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e234:	7bbb      	ldrb	r3, [r7, #14]
 800e236:	f003 020f 	and.w	r2, r3, #15
 800e23a:	6879      	ldr	r1, [r7, #4]
 800e23c:	4613      	mov	r3, r2
 800e23e:	009b      	lsls	r3, r3, #2
 800e240:	4413      	add	r3, r2
 800e242:	009b      	lsls	r3, r3, #2
 800e244:	440b      	add	r3, r1
 800e246:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e24a:	881b      	ldrh	r3, [r3, #0]
 800e24c:	2b00      	cmp	r3, #0
 800e24e:	d104      	bne.n	800e25a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e250:	6839      	ldr	r1, [r7, #0]
 800e252:	6878      	ldr	r0, [r7, #4]
 800e254:	f000 fbc7 	bl	800e9e6 <USBD_CtlError>
                  break;
 800e258:	e041      	b.n	800e2de <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e25a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	da0b      	bge.n	800e27a <USBD_StdEPReq+0x2b2>
 800e262:	7bbb      	ldrb	r3, [r7, #14]
 800e264:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e268:	4613      	mov	r3, r2
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	4413      	add	r3, r2
 800e26e:	009b      	lsls	r3, r3, #2
 800e270:	3310      	adds	r3, #16
 800e272:	687a      	ldr	r2, [r7, #4]
 800e274:	4413      	add	r3, r2
 800e276:	3304      	adds	r3, #4
 800e278:	e00b      	b.n	800e292 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e27a:	7bbb      	ldrb	r3, [r7, #14]
 800e27c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e280:	4613      	mov	r3, r2
 800e282:	009b      	lsls	r3, r3, #2
 800e284:	4413      	add	r3, r2
 800e286:	009b      	lsls	r3, r3, #2
 800e288:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e28c:	687a      	ldr	r2, [r7, #4]
 800e28e:	4413      	add	r3, r2
 800e290:	3304      	adds	r3, #4
 800e292:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e294:	7bbb      	ldrb	r3, [r7, #14]
 800e296:	2b00      	cmp	r3, #0
 800e298:	d002      	beq.n	800e2a0 <USBD_StdEPReq+0x2d8>
 800e29a:	7bbb      	ldrb	r3, [r7, #14]
 800e29c:	2b80      	cmp	r3, #128	; 0x80
 800e29e:	d103      	bne.n	800e2a8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e2a0:	68bb      	ldr	r3, [r7, #8]
 800e2a2:	2200      	movs	r2, #0
 800e2a4:	601a      	str	r2, [r3, #0]
 800e2a6:	e00e      	b.n	800e2c6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e2a8:	7bbb      	ldrb	r3, [r7, #14]
 800e2aa:	4619      	mov	r1, r3
 800e2ac:	6878      	ldr	r0, [r7, #4]
 800e2ae:	f003 f90b 	bl	80114c8 <USBD_LL_IsStallEP>
 800e2b2:	4603      	mov	r3, r0
 800e2b4:	2b00      	cmp	r3, #0
 800e2b6:	d003      	beq.n	800e2c0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	2201      	movs	r2, #1
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	e002      	b.n	800e2c6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	2200      	movs	r2, #0
 800e2c4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e2c6:	68bb      	ldr	r3, [r7, #8]
 800e2c8:	2202      	movs	r2, #2
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6878      	ldr	r0, [r7, #4]
 800e2ce:	f000 fbfb 	bl	800eac8 <USBD_CtlSendData>
              break;
 800e2d2:	e004      	b.n	800e2de <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	6878      	ldr	r0, [r7, #4]
 800e2d8:	f000 fb85 	bl	800e9e6 <USBD_CtlError>
              break;
 800e2dc:	bf00      	nop
          }
          break;
 800e2de:	e004      	b.n	800e2ea <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e2e0:	6839      	ldr	r1, [r7, #0]
 800e2e2:	6878      	ldr	r0, [r7, #4]
 800e2e4:	f000 fb7f 	bl	800e9e6 <USBD_CtlError>
          break;
 800e2e8:	bf00      	nop
      }
      break;
 800e2ea:	e005      	b.n	800e2f8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e2ec:	6839      	ldr	r1, [r7, #0]
 800e2ee:	6878      	ldr	r0, [r7, #4]
 800e2f0:	f000 fb79 	bl	800e9e6 <USBD_CtlError>
      break;
 800e2f4:	e000      	b.n	800e2f8 <USBD_StdEPReq+0x330>
      break;
 800e2f6:	bf00      	nop
  }

  return ret;
 800e2f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2fa:	4618      	mov	r0, r3
 800e2fc:	3710      	adds	r7, #16
 800e2fe:	46bd      	mov	sp, r7
 800e300:	bd80      	pop	{r7, pc}
	...

0800e304 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e30e:	2300      	movs	r3, #0
 800e310:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e312:	2300      	movs	r3, #0
 800e314:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e316:	2300      	movs	r3, #0
 800e318:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e31a:	683b      	ldr	r3, [r7, #0]
 800e31c:	885b      	ldrh	r3, [r3, #2]
 800e31e:	0a1b      	lsrs	r3, r3, #8
 800e320:	b29b      	uxth	r3, r3
 800e322:	3b01      	subs	r3, #1
 800e324:	2b0e      	cmp	r3, #14
 800e326:	f200 8152 	bhi.w	800e5ce <USBD_GetDescriptor+0x2ca>
 800e32a:	a201      	add	r2, pc, #4	; (adr r2, 800e330 <USBD_GetDescriptor+0x2c>)
 800e32c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e330:	0800e3a1 	.word	0x0800e3a1
 800e334:	0800e3b9 	.word	0x0800e3b9
 800e338:	0800e3f9 	.word	0x0800e3f9
 800e33c:	0800e5cf 	.word	0x0800e5cf
 800e340:	0800e5cf 	.word	0x0800e5cf
 800e344:	0800e56f 	.word	0x0800e56f
 800e348:	0800e59b 	.word	0x0800e59b
 800e34c:	0800e5cf 	.word	0x0800e5cf
 800e350:	0800e5cf 	.word	0x0800e5cf
 800e354:	0800e5cf 	.word	0x0800e5cf
 800e358:	0800e5cf 	.word	0x0800e5cf
 800e35c:	0800e5cf 	.word	0x0800e5cf
 800e360:	0800e5cf 	.word	0x0800e5cf
 800e364:	0800e5cf 	.word	0x0800e5cf
 800e368:	0800e36d 	.word	0x0800e36d
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e372:	69db      	ldr	r3, [r3, #28]
 800e374:	2b00      	cmp	r3, #0
 800e376:	d00b      	beq.n	800e390 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e37e:	69db      	ldr	r3, [r3, #28]
 800e380:	687a      	ldr	r2, [r7, #4]
 800e382:	7c12      	ldrb	r2, [r2, #16]
 800e384:	f107 0108 	add.w	r1, r7, #8
 800e388:	4610      	mov	r0, r2
 800e38a:	4798      	blx	r3
 800e38c:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e38e:	e126      	b.n	800e5de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e390:	6839      	ldr	r1, [r7, #0]
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 fb27 	bl	800e9e6 <USBD_CtlError>
        err++;
 800e398:	7afb      	ldrb	r3, [r7, #11]
 800e39a:	3301      	adds	r3, #1
 800e39c:	72fb      	strb	r3, [r7, #11]
      break;
 800e39e:	e11e      	b.n	800e5de <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e3a0:	687b      	ldr	r3, [r7, #4]
 800e3a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e3a6:	681b      	ldr	r3, [r3, #0]
 800e3a8:	687a      	ldr	r2, [r7, #4]
 800e3aa:	7c12      	ldrb	r2, [r2, #16]
 800e3ac:	f107 0108 	add.w	r1, r7, #8
 800e3b0:	4610      	mov	r0, r2
 800e3b2:	4798      	blx	r3
 800e3b4:	60f8      	str	r0, [r7, #12]
      break;
 800e3b6:	e112      	b.n	800e5de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	7c1b      	ldrb	r3, [r3, #16]
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d10d      	bne.n	800e3dc <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e3c8:	f107 0208 	add.w	r2, r7, #8
 800e3cc:	4610      	mov	r0, r2
 800e3ce:	4798      	blx	r3
 800e3d0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	3301      	adds	r3, #1
 800e3d6:	2202      	movs	r2, #2
 800e3d8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e3da:	e100      	b.n	800e5de <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e3dc:	687b      	ldr	r3, [r7, #4]
 800e3de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e3e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e3e4:	f107 0208 	add.w	r2, r7, #8
 800e3e8:	4610      	mov	r0, r2
 800e3ea:	4798      	blx	r3
 800e3ec:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	3301      	adds	r3, #1
 800e3f2:	2202      	movs	r2, #2
 800e3f4:	701a      	strb	r2, [r3, #0]
      break;
 800e3f6:	e0f2      	b.n	800e5de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e3f8:	683b      	ldr	r3, [r7, #0]
 800e3fa:	885b      	ldrh	r3, [r3, #2]
 800e3fc:	b2db      	uxtb	r3, r3
 800e3fe:	2b05      	cmp	r3, #5
 800e400:	f200 80ac 	bhi.w	800e55c <USBD_GetDescriptor+0x258>
 800e404:	a201      	add	r2, pc, #4	; (adr r2, 800e40c <USBD_GetDescriptor+0x108>)
 800e406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e40a:	bf00      	nop
 800e40c:	0800e425 	.word	0x0800e425
 800e410:	0800e459 	.word	0x0800e459
 800e414:	0800e48d 	.word	0x0800e48d
 800e418:	0800e4c1 	.word	0x0800e4c1
 800e41c:	0800e4f5 	.word	0x0800e4f5
 800e420:	0800e529 	.word	0x0800e529
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e42a:	685b      	ldr	r3, [r3, #4]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d00b      	beq.n	800e448 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e436:	685b      	ldr	r3, [r3, #4]
 800e438:	687a      	ldr	r2, [r7, #4]
 800e43a:	7c12      	ldrb	r2, [r2, #16]
 800e43c:	f107 0108 	add.w	r1, r7, #8
 800e440:	4610      	mov	r0, r2
 800e442:	4798      	blx	r3
 800e444:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e446:	e091      	b.n	800e56c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e448:	6839      	ldr	r1, [r7, #0]
 800e44a:	6878      	ldr	r0, [r7, #4]
 800e44c:	f000 facb 	bl	800e9e6 <USBD_CtlError>
            err++;
 800e450:	7afb      	ldrb	r3, [r7, #11]
 800e452:	3301      	adds	r3, #1
 800e454:	72fb      	strb	r3, [r7, #11]
          break;
 800e456:	e089      	b.n	800e56c <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e45e:	689b      	ldr	r3, [r3, #8]
 800e460:	2b00      	cmp	r3, #0
 800e462:	d00b      	beq.n	800e47c <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e464:	687b      	ldr	r3, [r7, #4]
 800e466:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e46a:	689b      	ldr	r3, [r3, #8]
 800e46c:	687a      	ldr	r2, [r7, #4]
 800e46e:	7c12      	ldrb	r2, [r2, #16]
 800e470:	f107 0108 	add.w	r1, r7, #8
 800e474:	4610      	mov	r0, r2
 800e476:	4798      	blx	r3
 800e478:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e47a:	e077      	b.n	800e56c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e47c:	6839      	ldr	r1, [r7, #0]
 800e47e:	6878      	ldr	r0, [r7, #4]
 800e480:	f000 fab1 	bl	800e9e6 <USBD_CtlError>
            err++;
 800e484:	7afb      	ldrb	r3, [r7, #11]
 800e486:	3301      	adds	r3, #1
 800e488:	72fb      	strb	r3, [r7, #11]
          break;
 800e48a:	e06f      	b.n	800e56c <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e492:	68db      	ldr	r3, [r3, #12]
 800e494:	2b00      	cmp	r3, #0
 800e496:	d00b      	beq.n	800e4b0 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e49e:	68db      	ldr	r3, [r3, #12]
 800e4a0:	687a      	ldr	r2, [r7, #4]
 800e4a2:	7c12      	ldrb	r2, [r2, #16]
 800e4a4:	f107 0108 	add.w	r1, r7, #8
 800e4a8:	4610      	mov	r0, r2
 800e4aa:	4798      	blx	r3
 800e4ac:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4ae:	e05d      	b.n	800e56c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4b0:	6839      	ldr	r1, [r7, #0]
 800e4b2:	6878      	ldr	r0, [r7, #4]
 800e4b4:	f000 fa97 	bl	800e9e6 <USBD_CtlError>
            err++;
 800e4b8:	7afb      	ldrb	r3, [r7, #11]
 800e4ba:	3301      	adds	r3, #1
 800e4bc:	72fb      	strb	r3, [r7, #11]
          break;
 800e4be:	e055      	b.n	800e56c <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4c6:	691b      	ldr	r3, [r3, #16]
 800e4c8:	2b00      	cmp	r3, #0
 800e4ca:	d00b      	beq.n	800e4e4 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4d2:	691b      	ldr	r3, [r3, #16]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	7c12      	ldrb	r2, [r2, #16]
 800e4d8:	f107 0108 	add.w	r1, r7, #8
 800e4dc:	4610      	mov	r0, r2
 800e4de:	4798      	blx	r3
 800e4e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e4e2:	e043      	b.n	800e56c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e4e4:	6839      	ldr	r1, [r7, #0]
 800e4e6:	6878      	ldr	r0, [r7, #4]
 800e4e8:	f000 fa7d 	bl	800e9e6 <USBD_CtlError>
            err++;
 800e4ec:	7afb      	ldrb	r3, [r7, #11]
 800e4ee:	3301      	adds	r3, #1
 800e4f0:	72fb      	strb	r3, [r7, #11]
          break;
 800e4f2:	e03b      	b.n	800e56c <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4fa:	695b      	ldr	r3, [r3, #20]
 800e4fc:	2b00      	cmp	r3, #0
 800e4fe:	d00b      	beq.n	800e518 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e506:	695b      	ldr	r3, [r3, #20]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	7c12      	ldrb	r2, [r2, #16]
 800e50c:	f107 0108 	add.w	r1, r7, #8
 800e510:	4610      	mov	r0, r2
 800e512:	4798      	blx	r3
 800e514:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e516:	e029      	b.n	800e56c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e518:	6839      	ldr	r1, [r7, #0]
 800e51a:	6878      	ldr	r0, [r7, #4]
 800e51c:	f000 fa63 	bl	800e9e6 <USBD_CtlError>
            err++;
 800e520:	7afb      	ldrb	r3, [r7, #11]
 800e522:	3301      	adds	r3, #1
 800e524:	72fb      	strb	r3, [r7, #11]
          break;
 800e526:	e021      	b.n	800e56c <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e528:	687b      	ldr	r3, [r7, #4]
 800e52a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e52e:	699b      	ldr	r3, [r3, #24]
 800e530:	2b00      	cmp	r3, #0
 800e532:	d00b      	beq.n	800e54c <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e534:	687b      	ldr	r3, [r7, #4]
 800e536:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e53a:	699b      	ldr	r3, [r3, #24]
 800e53c:	687a      	ldr	r2, [r7, #4]
 800e53e:	7c12      	ldrb	r2, [r2, #16]
 800e540:	f107 0108 	add.w	r1, r7, #8
 800e544:	4610      	mov	r0, r2
 800e546:	4798      	blx	r3
 800e548:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e54a:	e00f      	b.n	800e56c <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e54c:	6839      	ldr	r1, [r7, #0]
 800e54e:	6878      	ldr	r0, [r7, #4]
 800e550:	f000 fa49 	bl	800e9e6 <USBD_CtlError>
            err++;
 800e554:	7afb      	ldrb	r3, [r7, #11]
 800e556:	3301      	adds	r3, #1
 800e558:	72fb      	strb	r3, [r7, #11]
          break;
 800e55a:	e007      	b.n	800e56c <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e55c:	6839      	ldr	r1, [r7, #0]
 800e55e:	6878      	ldr	r0, [r7, #4]
 800e560:	f000 fa41 	bl	800e9e6 <USBD_CtlError>
          err++;
 800e564:	7afb      	ldrb	r3, [r7, #11]
 800e566:	3301      	adds	r3, #1
 800e568:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e56a:	bf00      	nop
      }
      break;
 800e56c:	e037      	b.n	800e5de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	7c1b      	ldrb	r3, [r3, #16]
 800e572:	2b00      	cmp	r3, #0
 800e574:	d109      	bne.n	800e58a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e57c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e57e:	f107 0208 	add.w	r2, r7, #8
 800e582:	4610      	mov	r0, r2
 800e584:	4798      	blx	r3
 800e586:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e588:	e029      	b.n	800e5de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e58a:	6839      	ldr	r1, [r7, #0]
 800e58c:	6878      	ldr	r0, [r7, #4]
 800e58e:	f000 fa2a 	bl	800e9e6 <USBD_CtlError>
        err++;
 800e592:	7afb      	ldrb	r3, [r7, #11]
 800e594:	3301      	adds	r3, #1
 800e596:	72fb      	strb	r3, [r7, #11]
      break;
 800e598:	e021      	b.n	800e5de <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	7c1b      	ldrb	r3, [r3, #16]
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d10d      	bne.n	800e5be <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e5a2:	687b      	ldr	r3, [r7, #4]
 800e5a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5aa:	f107 0208 	add.w	r2, r7, #8
 800e5ae:	4610      	mov	r0, r2
 800e5b0:	4798      	blx	r3
 800e5b2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e5b4:	68fb      	ldr	r3, [r7, #12]
 800e5b6:	3301      	adds	r3, #1
 800e5b8:	2207      	movs	r2, #7
 800e5ba:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e5bc:	e00f      	b.n	800e5de <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e5be:	6839      	ldr	r1, [r7, #0]
 800e5c0:	6878      	ldr	r0, [r7, #4]
 800e5c2:	f000 fa10 	bl	800e9e6 <USBD_CtlError>
        err++;
 800e5c6:	7afb      	ldrb	r3, [r7, #11]
 800e5c8:	3301      	adds	r3, #1
 800e5ca:	72fb      	strb	r3, [r7, #11]
      break;
 800e5cc:	e007      	b.n	800e5de <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e5ce:	6839      	ldr	r1, [r7, #0]
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f000 fa08 	bl	800e9e6 <USBD_CtlError>
      err++;
 800e5d6:	7afb      	ldrb	r3, [r7, #11]
 800e5d8:	3301      	adds	r3, #1
 800e5da:	72fb      	strb	r3, [r7, #11]
      break;
 800e5dc:	bf00      	nop
  }

  if (err != 0U)
 800e5de:	7afb      	ldrb	r3, [r7, #11]
 800e5e0:	2b00      	cmp	r3, #0
 800e5e2:	d11e      	bne.n	800e622 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	88db      	ldrh	r3, [r3, #6]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d016      	beq.n	800e61a <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e5ec:	893b      	ldrh	r3, [r7, #8]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00e      	beq.n	800e610 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e5f2:	683b      	ldr	r3, [r7, #0]
 800e5f4:	88da      	ldrh	r2, [r3, #6]
 800e5f6:	893b      	ldrh	r3, [r7, #8]
 800e5f8:	4293      	cmp	r3, r2
 800e5fa:	bf28      	it	cs
 800e5fc:	4613      	movcs	r3, r2
 800e5fe:	b29b      	uxth	r3, r3
 800e600:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e602:	893b      	ldrh	r3, [r7, #8]
 800e604:	461a      	mov	r2, r3
 800e606:	68f9      	ldr	r1, [r7, #12]
 800e608:	6878      	ldr	r0, [r7, #4]
 800e60a:	f000 fa5d 	bl	800eac8 <USBD_CtlSendData>
 800e60e:	e009      	b.n	800e624 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e610:	6839      	ldr	r1, [r7, #0]
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 f9e7 	bl	800e9e6 <USBD_CtlError>
 800e618:	e004      	b.n	800e624 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e61a:	6878      	ldr	r0, [r7, #4]
 800e61c:	f000 faae 	bl	800eb7c <USBD_CtlSendStatus>
 800e620:	e000      	b.n	800e624 <USBD_GetDescriptor+0x320>
    return;
 800e622:	bf00      	nop
  }
}
 800e624:	3710      	adds	r7, #16
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop

0800e62c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e62c:	b580      	push	{r7, lr}
 800e62e:	b084      	sub	sp, #16
 800e630:	af00      	add	r7, sp, #0
 800e632:	6078      	str	r0, [r7, #4]
 800e634:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	889b      	ldrh	r3, [r3, #4]
 800e63a:	2b00      	cmp	r3, #0
 800e63c:	d131      	bne.n	800e6a2 <USBD_SetAddress+0x76>
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	88db      	ldrh	r3, [r3, #6]
 800e642:	2b00      	cmp	r3, #0
 800e644:	d12d      	bne.n	800e6a2 <USBD_SetAddress+0x76>
 800e646:	683b      	ldr	r3, [r7, #0]
 800e648:	885b      	ldrh	r3, [r3, #2]
 800e64a:	2b7f      	cmp	r3, #127	; 0x7f
 800e64c:	d829      	bhi.n	800e6a2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e64e:	683b      	ldr	r3, [r7, #0]
 800e650:	885b      	ldrh	r3, [r3, #2]
 800e652:	b2db      	uxtb	r3, r3
 800e654:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e658:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e65a:	687b      	ldr	r3, [r7, #4]
 800e65c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e660:	b2db      	uxtb	r3, r3
 800e662:	2b03      	cmp	r3, #3
 800e664:	d104      	bne.n	800e670 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e666:	6839      	ldr	r1, [r7, #0]
 800e668:	6878      	ldr	r0, [r7, #4]
 800e66a:	f000 f9bc 	bl	800e9e6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e66e:	e01d      	b.n	800e6ac <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	7bfa      	ldrb	r2, [r7, #15]
 800e674:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e678:	7bfb      	ldrb	r3, [r7, #15]
 800e67a:	4619      	mov	r1, r3
 800e67c:	6878      	ldr	r0, [r7, #4]
 800e67e:	f002 ff4f 	bl	8011520 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f000 fa7a 	bl	800eb7c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e688:	7bfb      	ldrb	r3, [r7, #15]
 800e68a:	2b00      	cmp	r3, #0
 800e68c:	d004      	beq.n	800e698 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	2202      	movs	r2, #2
 800e692:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e696:	e009      	b.n	800e6ac <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	2201      	movs	r2, #1
 800e69c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e6a0:	e004      	b.n	800e6ac <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e6a2:	6839      	ldr	r1, [r7, #0]
 800e6a4:	6878      	ldr	r0, [r7, #4]
 800e6a6:	f000 f99e 	bl	800e9e6 <USBD_CtlError>
  }
}
 800e6aa:	bf00      	nop
 800e6ac:	bf00      	nop
 800e6ae:	3710      	adds	r7, #16
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}

0800e6b4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e6b4:	b580      	push	{r7, lr}
 800e6b6:	b084      	sub	sp, #16
 800e6b8:	af00      	add	r7, sp, #0
 800e6ba:	6078      	str	r0, [r7, #4]
 800e6bc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e6be:	2300      	movs	r3, #0
 800e6c0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	885b      	ldrh	r3, [r3, #2]
 800e6c6:	b2da      	uxtb	r2, r3
 800e6c8:	4b4e      	ldr	r3, [pc, #312]	; (800e804 <USBD_SetConfig+0x150>)
 800e6ca:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e6cc:	4b4d      	ldr	r3, [pc, #308]	; (800e804 <USBD_SetConfig+0x150>)
 800e6ce:	781b      	ldrb	r3, [r3, #0]
 800e6d0:	2b01      	cmp	r3, #1
 800e6d2:	d905      	bls.n	800e6e0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e6d4:	6839      	ldr	r1, [r7, #0]
 800e6d6:	6878      	ldr	r0, [r7, #4]
 800e6d8:	f000 f985 	bl	800e9e6 <USBD_CtlError>
    return USBD_FAIL;
 800e6dc:	2303      	movs	r3, #3
 800e6de:	e08c      	b.n	800e7fa <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e6e0:	687b      	ldr	r3, [r7, #4]
 800e6e2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6e6:	b2db      	uxtb	r3, r3
 800e6e8:	2b02      	cmp	r3, #2
 800e6ea:	d002      	beq.n	800e6f2 <USBD_SetConfig+0x3e>
 800e6ec:	2b03      	cmp	r3, #3
 800e6ee:	d029      	beq.n	800e744 <USBD_SetConfig+0x90>
 800e6f0:	e075      	b.n	800e7de <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e6f2:	4b44      	ldr	r3, [pc, #272]	; (800e804 <USBD_SetConfig+0x150>)
 800e6f4:	781b      	ldrb	r3, [r3, #0]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d020      	beq.n	800e73c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e6fa:	4b42      	ldr	r3, [pc, #264]	; (800e804 <USBD_SetConfig+0x150>)
 800e6fc:	781b      	ldrb	r3, [r3, #0]
 800e6fe:	461a      	mov	r2, r3
 800e700:	687b      	ldr	r3, [r7, #4]
 800e702:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e704:	4b3f      	ldr	r3, [pc, #252]	; (800e804 <USBD_SetConfig+0x150>)
 800e706:	781b      	ldrb	r3, [r3, #0]
 800e708:	4619      	mov	r1, r3
 800e70a:	6878      	ldr	r0, [r7, #4]
 800e70c:	f7fe ffbd 	bl	800d68a <USBD_SetClassConfig>
 800e710:	4603      	mov	r3, r0
 800e712:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e714:	7bfb      	ldrb	r3, [r7, #15]
 800e716:	2b00      	cmp	r3, #0
 800e718:	d008      	beq.n	800e72c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e71a:	6839      	ldr	r1, [r7, #0]
 800e71c:	6878      	ldr	r0, [r7, #4]
 800e71e:	f000 f962 	bl	800e9e6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2202      	movs	r2, #2
 800e726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e72a:	e065      	b.n	800e7f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f000 fa25 	bl	800eb7c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	2203      	movs	r2, #3
 800e736:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e73a:	e05d      	b.n	800e7f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e73c:	6878      	ldr	r0, [r7, #4]
 800e73e:	f000 fa1d 	bl	800eb7c <USBD_CtlSendStatus>
      break;
 800e742:	e059      	b.n	800e7f8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e744:	4b2f      	ldr	r3, [pc, #188]	; (800e804 <USBD_SetConfig+0x150>)
 800e746:	781b      	ldrb	r3, [r3, #0]
 800e748:	2b00      	cmp	r3, #0
 800e74a:	d112      	bne.n	800e772 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2202      	movs	r2, #2
 800e750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e754:	4b2b      	ldr	r3, [pc, #172]	; (800e804 <USBD_SetConfig+0x150>)
 800e756:	781b      	ldrb	r3, [r3, #0]
 800e758:	461a      	mov	r2, r3
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e75e:	4b29      	ldr	r3, [pc, #164]	; (800e804 <USBD_SetConfig+0x150>)
 800e760:	781b      	ldrb	r3, [r3, #0]
 800e762:	4619      	mov	r1, r3
 800e764:	6878      	ldr	r0, [r7, #4]
 800e766:	f7fe ffac 	bl	800d6c2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e76a:	6878      	ldr	r0, [r7, #4]
 800e76c:	f000 fa06 	bl	800eb7c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e770:	e042      	b.n	800e7f8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e772:	4b24      	ldr	r3, [pc, #144]	; (800e804 <USBD_SetConfig+0x150>)
 800e774:	781b      	ldrb	r3, [r3, #0]
 800e776:	461a      	mov	r2, r3
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	685b      	ldr	r3, [r3, #4]
 800e77c:	429a      	cmp	r2, r3
 800e77e:	d02a      	beq.n	800e7d6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	685b      	ldr	r3, [r3, #4]
 800e784:	b2db      	uxtb	r3, r3
 800e786:	4619      	mov	r1, r3
 800e788:	6878      	ldr	r0, [r7, #4]
 800e78a:	f7fe ff9a 	bl	800d6c2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e78e:	4b1d      	ldr	r3, [pc, #116]	; (800e804 <USBD_SetConfig+0x150>)
 800e790:	781b      	ldrb	r3, [r3, #0]
 800e792:	461a      	mov	r2, r3
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e798:	4b1a      	ldr	r3, [pc, #104]	; (800e804 <USBD_SetConfig+0x150>)
 800e79a:	781b      	ldrb	r3, [r3, #0]
 800e79c:	4619      	mov	r1, r3
 800e79e:	6878      	ldr	r0, [r7, #4]
 800e7a0:	f7fe ff73 	bl	800d68a <USBD_SetClassConfig>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e7a8:	7bfb      	ldrb	r3, [r7, #15]
 800e7aa:	2b00      	cmp	r3, #0
 800e7ac:	d00f      	beq.n	800e7ce <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e7ae:	6839      	ldr	r1, [r7, #0]
 800e7b0:	6878      	ldr	r0, [r7, #4]
 800e7b2:	f000 f918 	bl	800e9e6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	b2db      	uxtb	r3, r3
 800e7bc:	4619      	mov	r1, r3
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f7fe ff7f 	bl	800d6c2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2202      	movs	r2, #2
 800e7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e7cc:	e014      	b.n	800e7f8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e7ce:	6878      	ldr	r0, [r7, #4]
 800e7d0:	f000 f9d4 	bl	800eb7c <USBD_CtlSendStatus>
      break;
 800e7d4:	e010      	b.n	800e7f8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e7d6:	6878      	ldr	r0, [r7, #4]
 800e7d8:	f000 f9d0 	bl	800eb7c <USBD_CtlSendStatus>
      break;
 800e7dc:	e00c      	b.n	800e7f8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e7de:	6839      	ldr	r1, [r7, #0]
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f000 f900 	bl	800e9e6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e7e6:	4b07      	ldr	r3, [pc, #28]	; (800e804 <USBD_SetConfig+0x150>)
 800e7e8:	781b      	ldrb	r3, [r3, #0]
 800e7ea:	4619      	mov	r1, r3
 800e7ec:	6878      	ldr	r0, [r7, #4]
 800e7ee:	f7fe ff68 	bl	800d6c2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e7f2:	2303      	movs	r3, #3
 800e7f4:	73fb      	strb	r3, [r7, #15]
      break;
 800e7f6:	bf00      	nop
  }

  return ret;
 800e7f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	3710      	adds	r7, #16
 800e7fe:	46bd      	mov	sp, r7
 800e800:	bd80      	pop	{r7, pc}
 800e802:	bf00      	nop
 800e804:	20000684 	.word	0x20000684

0800e808 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e808:	b580      	push	{r7, lr}
 800e80a:	b082      	sub	sp, #8
 800e80c:	af00      	add	r7, sp, #0
 800e80e:	6078      	str	r0, [r7, #4]
 800e810:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e812:	683b      	ldr	r3, [r7, #0]
 800e814:	88db      	ldrh	r3, [r3, #6]
 800e816:	2b01      	cmp	r3, #1
 800e818:	d004      	beq.n	800e824 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e81a:	6839      	ldr	r1, [r7, #0]
 800e81c:	6878      	ldr	r0, [r7, #4]
 800e81e:	f000 f8e2 	bl	800e9e6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e822:	e023      	b.n	800e86c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e82a:	b2db      	uxtb	r3, r3
 800e82c:	2b02      	cmp	r3, #2
 800e82e:	dc02      	bgt.n	800e836 <USBD_GetConfig+0x2e>
 800e830:	2b00      	cmp	r3, #0
 800e832:	dc03      	bgt.n	800e83c <USBD_GetConfig+0x34>
 800e834:	e015      	b.n	800e862 <USBD_GetConfig+0x5a>
 800e836:	2b03      	cmp	r3, #3
 800e838:	d00b      	beq.n	800e852 <USBD_GetConfig+0x4a>
 800e83a:	e012      	b.n	800e862 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2200      	movs	r2, #0
 800e840:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	3308      	adds	r3, #8
 800e846:	2201      	movs	r2, #1
 800e848:	4619      	mov	r1, r3
 800e84a:	6878      	ldr	r0, [r7, #4]
 800e84c:	f000 f93c 	bl	800eac8 <USBD_CtlSendData>
        break;
 800e850:	e00c      	b.n	800e86c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	3304      	adds	r3, #4
 800e856:	2201      	movs	r2, #1
 800e858:	4619      	mov	r1, r3
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f000 f934 	bl	800eac8 <USBD_CtlSendData>
        break;
 800e860:	e004      	b.n	800e86c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e862:	6839      	ldr	r1, [r7, #0]
 800e864:	6878      	ldr	r0, [r7, #4]
 800e866:	f000 f8be 	bl	800e9e6 <USBD_CtlError>
        break;
 800e86a:	bf00      	nop
}
 800e86c:	bf00      	nop
 800e86e:	3708      	adds	r7, #8
 800e870:	46bd      	mov	sp, r7
 800e872:	bd80      	pop	{r7, pc}

0800e874 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e874:	b580      	push	{r7, lr}
 800e876:	b082      	sub	sp, #8
 800e878:	af00      	add	r7, sp, #0
 800e87a:	6078      	str	r0, [r7, #4]
 800e87c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e884:	b2db      	uxtb	r3, r3
 800e886:	3b01      	subs	r3, #1
 800e888:	2b02      	cmp	r3, #2
 800e88a:	d81e      	bhi.n	800e8ca <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e88c:	683b      	ldr	r3, [r7, #0]
 800e88e:	88db      	ldrh	r3, [r3, #6]
 800e890:	2b02      	cmp	r3, #2
 800e892:	d004      	beq.n	800e89e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e894:	6839      	ldr	r1, [r7, #0]
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 f8a5 	bl	800e9e6 <USBD_CtlError>
        break;
 800e89c:	e01a      	b.n	800e8d4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e89e:	687b      	ldr	r3, [r7, #4]
 800e8a0:	2201      	movs	r2, #1
 800e8a2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e8aa:	2b00      	cmp	r3, #0
 800e8ac:	d005      	beq.n	800e8ba <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	68db      	ldr	r3, [r3, #12]
 800e8b2:	f043 0202 	orr.w	r2, r3, #2
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	330c      	adds	r3, #12
 800e8be:	2202      	movs	r2, #2
 800e8c0:	4619      	mov	r1, r3
 800e8c2:	6878      	ldr	r0, [r7, #4]
 800e8c4:	f000 f900 	bl	800eac8 <USBD_CtlSendData>
      break;
 800e8c8:	e004      	b.n	800e8d4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e8ca:	6839      	ldr	r1, [r7, #0]
 800e8cc:	6878      	ldr	r0, [r7, #4]
 800e8ce:	f000 f88a 	bl	800e9e6 <USBD_CtlError>
      break;
 800e8d2:	bf00      	nop
  }
}
 800e8d4:	bf00      	nop
 800e8d6:	3708      	adds	r7, #8
 800e8d8:	46bd      	mov	sp, r7
 800e8da:	bd80      	pop	{r7, pc}

0800e8dc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e8dc:	b580      	push	{r7, lr}
 800e8de:	b082      	sub	sp, #8
 800e8e0:	af00      	add	r7, sp, #0
 800e8e2:	6078      	str	r0, [r7, #4]
 800e8e4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e8e6:	683b      	ldr	r3, [r7, #0]
 800e8e8:	885b      	ldrh	r3, [r3, #2]
 800e8ea:	2b01      	cmp	r3, #1
 800e8ec:	d107      	bne.n	800e8fe <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2201      	movs	r2, #1
 800e8f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f000 f940 	bl	800eb7c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e8fc:	e013      	b.n	800e926 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e8fe:	683b      	ldr	r3, [r7, #0]
 800e900:	885b      	ldrh	r3, [r3, #2]
 800e902:	2b02      	cmp	r3, #2
 800e904:	d10b      	bne.n	800e91e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e906:	683b      	ldr	r3, [r7, #0]
 800e908:	889b      	ldrh	r3, [r3, #4]
 800e90a:	0a1b      	lsrs	r3, r3, #8
 800e90c:	b29b      	uxth	r3, r3
 800e90e:	b2da      	uxtb	r2, r3
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e916:	6878      	ldr	r0, [r7, #4]
 800e918:	f000 f930 	bl	800eb7c <USBD_CtlSendStatus>
}
 800e91c:	e003      	b.n	800e926 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e91e:	6839      	ldr	r1, [r7, #0]
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 f860 	bl	800e9e6 <USBD_CtlError>
}
 800e926:	bf00      	nop
 800e928:	3708      	adds	r7, #8
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}

0800e92e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e92e:	b580      	push	{r7, lr}
 800e930:	b082      	sub	sp, #8
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
 800e936:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e93e:	b2db      	uxtb	r3, r3
 800e940:	3b01      	subs	r3, #1
 800e942:	2b02      	cmp	r3, #2
 800e944:	d80b      	bhi.n	800e95e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e946:	683b      	ldr	r3, [r7, #0]
 800e948:	885b      	ldrh	r3, [r3, #2]
 800e94a:	2b01      	cmp	r3, #1
 800e94c:	d10c      	bne.n	800e968 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	2200      	movs	r2, #0
 800e952:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e956:	6878      	ldr	r0, [r7, #4]
 800e958:	f000 f910 	bl	800eb7c <USBD_CtlSendStatus>
      }
      break;
 800e95c:	e004      	b.n	800e968 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e95e:	6839      	ldr	r1, [r7, #0]
 800e960:	6878      	ldr	r0, [r7, #4]
 800e962:	f000 f840 	bl	800e9e6 <USBD_CtlError>
      break;
 800e966:	e000      	b.n	800e96a <USBD_ClrFeature+0x3c>
      break;
 800e968:	bf00      	nop
  }
}
 800e96a:	bf00      	nop
 800e96c:	3708      	adds	r7, #8
 800e96e:	46bd      	mov	sp, r7
 800e970:	bd80      	pop	{r7, pc}

0800e972 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e972:	b580      	push	{r7, lr}
 800e974:	b084      	sub	sp, #16
 800e976:	af00      	add	r7, sp, #0
 800e978:	6078      	str	r0, [r7, #4]
 800e97a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e980:	68fb      	ldr	r3, [r7, #12]
 800e982:	781a      	ldrb	r2, [r3, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	3301      	adds	r3, #1
 800e98c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e98e:	68fb      	ldr	r3, [r7, #12]
 800e990:	781a      	ldrb	r2, [r3, #0]
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	3301      	adds	r3, #1
 800e99a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e99c:	68f8      	ldr	r0, [r7, #12]
 800e99e:	f7ff fa17 	bl	800ddd0 <SWAPBYTE>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e9aa:	68fb      	ldr	r3, [r7, #12]
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9b0:	68fb      	ldr	r3, [r7, #12]
 800e9b2:	3301      	adds	r3, #1
 800e9b4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e9b6:	68f8      	ldr	r0, [r7, #12]
 800e9b8:	f7ff fa0a 	bl	800ddd0 <SWAPBYTE>
 800e9bc:	4603      	mov	r3, r0
 800e9be:	461a      	mov	r2, r3
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e9c4:	68fb      	ldr	r3, [r7, #12]
 800e9c6:	3301      	adds	r3, #1
 800e9c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	3301      	adds	r3, #1
 800e9ce:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e9d0:	68f8      	ldr	r0, [r7, #12]
 800e9d2:	f7ff f9fd 	bl	800ddd0 <SWAPBYTE>
 800e9d6:	4603      	mov	r3, r0
 800e9d8:	461a      	mov	r2, r3
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	80da      	strh	r2, [r3, #6]
}
 800e9de:	bf00      	nop
 800e9e0:	3710      	adds	r7, #16
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	bd80      	pop	{r7, pc}

0800e9e6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9e6:	b580      	push	{r7, lr}
 800e9e8:	b082      	sub	sp, #8
 800e9ea:	af00      	add	r7, sp, #0
 800e9ec:	6078      	str	r0, [r7, #4]
 800e9ee:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e9f0:	2180      	movs	r1, #128	; 0x80
 800e9f2:	6878      	ldr	r0, [r7, #4]
 800e9f4:	f002 fd2a 	bl	801144c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e9f8:	2100      	movs	r1, #0
 800e9fa:	6878      	ldr	r0, [r7, #4]
 800e9fc:	f002 fd26 	bl	801144c <USBD_LL_StallEP>
}
 800ea00:	bf00      	nop
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b086      	sub	sp, #24
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	60f8      	str	r0, [r7, #12]
 800ea10:	60b9      	str	r1, [r7, #8]
 800ea12:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ea14:	2300      	movs	r3, #0
 800ea16:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d036      	beq.n	800ea8c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ea22:	6938      	ldr	r0, [r7, #16]
 800ea24:	f000 f836 	bl	800ea94 <USBD_GetLen>
 800ea28:	4603      	mov	r3, r0
 800ea2a:	3301      	adds	r3, #1
 800ea2c:	b29b      	uxth	r3, r3
 800ea2e:	005b      	lsls	r3, r3, #1
 800ea30:	b29a      	uxth	r2, r3
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ea36:	7dfb      	ldrb	r3, [r7, #23]
 800ea38:	68ba      	ldr	r2, [r7, #8]
 800ea3a:	4413      	add	r3, r2
 800ea3c:	687a      	ldr	r2, [r7, #4]
 800ea3e:	7812      	ldrb	r2, [r2, #0]
 800ea40:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea42:	7dfb      	ldrb	r3, [r7, #23]
 800ea44:	3301      	adds	r3, #1
 800ea46:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ea48:	7dfb      	ldrb	r3, [r7, #23]
 800ea4a:	68ba      	ldr	r2, [r7, #8]
 800ea4c:	4413      	add	r3, r2
 800ea4e:	2203      	movs	r2, #3
 800ea50:	701a      	strb	r2, [r3, #0]
  idx++;
 800ea52:	7dfb      	ldrb	r3, [r7, #23]
 800ea54:	3301      	adds	r3, #1
 800ea56:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ea58:	e013      	b.n	800ea82 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ea5a:	7dfb      	ldrb	r3, [r7, #23]
 800ea5c:	68ba      	ldr	r2, [r7, #8]
 800ea5e:	4413      	add	r3, r2
 800ea60:	693a      	ldr	r2, [r7, #16]
 800ea62:	7812      	ldrb	r2, [r2, #0]
 800ea64:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800ea66:	693b      	ldr	r3, [r7, #16]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	613b      	str	r3, [r7, #16]
    idx++;
 800ea6c:	7dfb      	ldrb	r3, [r7, #23]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800ea72:	7dfb      	ldrb	r3, [r7, #23]
 800ea74:	68ba      	ldr	r2, [r7, #8]
 800ea76:	4413      	add	r3, r2
 800ea78:	2200      	movs	r2, #0
 800ea7a:	701a      	strb	r2, [r3, #0]
    idx++;
 800ea7c:	7dfb      	ldrb	r3, [r7, #23]
 800ea7e:	3301      	adds	r3, #1
 800ea80:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ea82:	693b      	ldr	r3, [r7, #16]
 800ea84:	781b      	ldrb	r3, [r3, #0]
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d1e7      	bne.n	800ea5a <USBD_GetString+0x52>
 800ea8a:	e000      	b.n	800ea8e <USBD_GetString+0x86>
    return;
 800ea8c:	bf00      	nop
  }
}
 800ea8e:	3718      	adds	r7, #24
 800ea90:	46bd      	mov	sp, r7
 800ea92:	bd80      	pop	{r7, pc}

0800ea94 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ea94:	b480      	push	{r7}
 800ea96:	b085      	sub	sp, #20
 800ea98:	af00      	add	r7, sp, #0
 800ea9a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ea9c:	2300      	movs	r3, #0
 800ea9e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800eaa4:	e005      	b.n	800eab2 <USBD_GetLen+0x1e>
  {
    len++;
 800eaa6:	7bfb      	ldrb	r3, [r7, #15]
 800eaa8:	3301      	adds	r3, #1
 800eaaa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	3301      	adds	r3, #1
 800eab0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eab2:	68bb      	ldr	r3, [r7, #8]
 800eab4:	781b      	ldrb	r3, [r3, #0]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d1f5      	bne.n	800eaa6 <USBD_GetLen+0x12>
  }

  return len;
 800eaba:	7bfb      	ldrb	r3, [r7, #15]
}
 800eabc:	4618      	mov	r0, r3
 800eabe:	3714      	adds	r7, #20
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800eac8:	b580      	push	{r7, lr}
 800eaca:	b084      	sub	sp, #16
 800eacc:	af00      	add	r7, sp, #0
 800eace:	60f8      	str	r0, [r7, #12]
 800ead0:	60b9      	str	r1, [r7, #8]
 800ead2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ead4:	68fb      	ldr	r3, [r7, #12]
 800ead6:	2202      	movs	r2, #2
 800ead8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	687a      	ldr	r2, [r7, #4]
 800eae0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	68ba      	ldr	r2, [r7, #8]
 800eaec:	2100      	movs	r1, #0
 800eaee:	68f8      	ldr	r0, [r7, #12]
 800eaf0:	f002 fd35 	bl	801155e <USBD_LL_Transmit>

  return USBD_OK;
 800eaf4:	2300      	movs	r3, #0
}
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	3710      	adds	r7, #16
 800eafa:	46bd      	mov	sp, r7
 800eafc:	bd80      	pop	{r7, pc}

0800eafe <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800eafe:	b580      	push	{r7, lr}
 800eb00:	b084      	sub	sp, #16
 800eb02:	af00      	add	r7, sp, #0
 800eb04:	60f8      	str	r0, [r7, #12]
 800eb06:	60b9      	str	r1, [r7, #8]
 800eb08:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	68ba      	ldr	r2, [r7, #8]
 800eb0e:	2100      	movs	r1, #0
 800eb10:	68f8      	ldr	r0, [r7, #12]
 800eb12:	f002 fd24 	bl	801155e <USBD_LL_Transmit>

  return USBD_OK;
 800eb16:	2300      	movs	r3, #0
}
 800eb18:	4618      	mov	r0, r3
 800eb1a:	3710      	adds	r7, #16
 800eb1c:	46bd      	mov	sp, r7
 800eb1e:	bd80      	pop	{r7, pc}

0800eb20 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800eb20:	b580      	push	{r7, lr}
 800eb22:	b084      	sub	sp, #16
 800eb24:	af00      	add	r7, sp, #0
 800eb26:	60f8      	str	r0, [r7, #12]
 800eb28:	60b9      	str	r1, [r7, #8]
 800eb2a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800eb2c:	68fb      	ldr	r3, [r7, #12]
 800eb2e:	2203      	movs	r2, #3
 800eb30:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	687a      	ldr	r2, [r7, #4]
 800eb38:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800eb3c:	68fb      	ldr	r3, [r7, #12]
 800eb3e:	687a      	ldr	r2, [r7, #4]
 800eb40:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	68ba      	ldr	r2, [r7, #8]
 800eb48:	2100      	movs	r1, #0
 800eb4a:	68f8      	ldr	r0, [r7, #12]
 800eb4c:	f002 fd28 	bl	80115a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb50:	2300      	movs	r3, #0
}
 800eb52:	4618      	mov	r0, r3
 800eb54:	3710      	adds	r7, #16
 800eb56:	46bd      	mov	sp, r7
 800eb58:	bd80      	pop	{r7, pc}

0800eb5a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800eb5a:	b580      	push	{r7, lr}
 800eb5c:	b084      	sub	sp, #16
 800eb5e:	af00      	add	r7, sp, #0
 800eb60:	60f8      	str	r0, [r7, #12]
 800eb62:	60b9      	str	r1, [r7, #8]
 800eb64:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	2100      	movs	r1, #0
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	f002 fd17 	bl	80115a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800eb72:	2300      	movs	r3, #0
}
 800eb74:	4618      	mov	r0, r3
 800eb76:	3710      	adds	r7, #16
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	bd80      	pop	{r7, pc}

0800eb7c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2204      	movs	r2, #4
 800eb88:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	2200      	movs	r2, #0
 800eb90:	2100      	movs	r1, #0
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f002 fce3 	bl	801155e <USBD_LL_Transmit>

  return USBD_OK;
 800eb98:	2300      	movs	r3, #0
}
 800eb9a:	4618      	mov	r0, r3
 800eb9c:	3708      	adds	r7, #8
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}

0800eba2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800eba2:	b580      	push	{r7, lr}
 800eba4:	b082      	sub	sp, #8
 800eba6:	af00      	add	r7, sp, #0
 800eba8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	2205      	movs	r2, #5
 800ebae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	2200      	movs	r2, #0
 800ebb6:	2100      	movs	r1, #0
 800ebb8:	6878      	ldr	r0, [r7, #4]
 800ebba:	f002 fcf1 	bl	80115a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ebbe:	2300      	movs	r3, #0
}
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	3708      	adds	r7, #8
 800ebc4:	46bd      	mov	sp, r7
 800ebc6:	bd80      	pop	{r7, pc}

0800ebc8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ebc8:	b590      	push	{r4, r7, lr}
 800ebca:	b089      	sub	sp, #36	; 0x24
 800ebcc:	af04      	add	r7, sp, #16
 800ebce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ebd0:	2301      	movs	r3, #1
 800ebd2:	2202      	movs	r2, #2
 800ebd4:	2102      	movs	r1, #2
 800ebd6:	6878      	ldr	r0, [r7, #4]
 800ebd8:	f000 fc85 	bl	800f4e6 <USBH_FindInterface>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ebe0:	7bfb      	ldrb	r3, [r7, #15]
 800ebe2:	2bff      	cmp	r3, #255	; 0xff
 800ebe4:	d002      	beq.n	800ebec <USBH_CDC_InterfaceInit+0x24>
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
 800ebe8:	2b01      	cmp	r3, #1
 800ebea:	d901      	bls.n	800ebf0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ebec:	2302      	movs	r3, #2
 800ebee:	e13d      	b.n	800ee6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ebf0:	7bfb      	ldrb	r3, [r7, #15]
 800ebf2:	4619      	mov	r1, r3
 800ebf4:	6878      	ldr	r0, [r7, #4]
 800ebf6:	f000 fc5a 	bl	800f4ae <USBH_SelectInterface>
 800ebfa:	4603      	mov	r3, r0
 800ebfc:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ebfe:	7bbb      	ldrb	r3, [r7, #14]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d001      	beq.n	800ec08 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ec04:	2302      	movs	r3, #2
 800ec06:	e131      	b.n	800ee6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ec08:	687b      	ldr	r3, [r7, #4]
 800ec0a:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ec0e:	2050      	movs	r0, #80	; 0x50
 800ec10:	f003 f8bc 	bl	8011d8c <malloc>
 800ec14:	4603      	mov	r3, r0
 800ec16:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ec18:	687b      	ldr	r3, [r7, #4]
 800ec1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ec1e:	69db      	ldr	r3, [r3, #28]
 800ec20:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ec22:	68bb      	ldr	r3, [r7, #8]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ec28:	2302      	movs	r3, #2
 800ec2a:	e11f      	b.n	800ee6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ec2c:	2250      	movs	r2, #80	; 0x50
 800ec2e:	2100      	movs	r1, #0
 800ec30:	68b8      	ldr	r0, [r7, #8]
 800ec32:	f003 f8bb 	bl	8011dac <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ec36:	7bfb      	ldrb	r3, [r7, #15]
 800ec38:	687a      	ldr	r2, [r7, #4]
 800ec3a:	211a      	movs	r1, #26
 800ec3c:	fb01 f303 	mul.w	r3, r1, r3
 800ec40:	4413      	add	r3, r2
 800ec42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ec46:	781b      	ldrb	r3, [r3, #0]
 800ec48:	b25b      	sxtb	r3, r3
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	da15      	bge.n	800ec7a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ec4e:	7bfb      	ldrb	r3, [r7, #15]
 800ec50:	687a      	ldr	r2, [r7, #4]
 800ec52:	211a      	movs	r1, #26
 800ec54:	fb01 f303 	mul.w	r3, r1, r3
 800ec58:	4413      	add	r3, r2
 800ec5a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ec5e:	781a      	ldrb	r2, [r3, #0]
 800ec60:	68bb      	ldr	r3, [r7, #8]
 800ec62:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ec64:	7bfb      	ldrb	r3, [r7, #15]
 800ec66:	687a      	ldr	r2, [r7, #4]
 800ec68:	211a      	movs	r1, #26
 800ec6a:	fb01 f303 	mul.w	r3, r1, r3
 800ec6e:	4413      	add	r3, r2
 800ec70:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ec74:	881a      	ldrh	r2, [r3, #0]
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	785b      	ldrb	r3, [r3, #1]
 800ec7e:	4619      	mov	r1, r3
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f001 ff26 	bl	8010ad2 <USBH_AllocPipe>
 800ec86:	4603      	mov	r3, r0
 800ec88:	461a      	mov	r2, r3
 800ec8a:	68bb      	ldr	r3, [r7, #8]
 800ec8c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	7819      	ldrb	r1, [r3, #0]
 800ec92:	68bb      	ldr	r3, [r7, #8]
 800ec94:	7858      	ldrb	r0, [r3, #1]
 800ec96:	687b      	ldr	r3, [r7, #4]
 800ec98:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800eca2:	68ba      	ldr	r2, [r7, #8]
 800eca4:	8952      	ldrh	r2, [r2, #10]
 800eca6:	9202      	str	r2, [sp, #8]
 800eca8:	2203      	movs	r2, #3
 800ecaa:	9201      	str	r2, [sp, #4]
 800ecac:	9300      	str	r3, [sp, #0]
 800ecae:	4623      	mov	r3, r4
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f001 fede 	bl	8010a74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	781b      	ldrb	r3, [r3, #0]
 800ecbc:	2200      	movs	r2, #0
 800ecbe:	4619      	mov	r1, r3
 800ecc0:	6878      	ldr	r0, [r7, #4]
 800ecc2:	f002 ffb5 	bl	8011c30 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800ecc6:	2300      	movs	r3, #0
 800ecc8:	2200      	movs	r2, #0
 800ecca:	210a      	movs	r1, #10
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f000 fc0a 	bl	800f4e6 <USBH_FindInterface>
 800ecd2:	4603      	mov	r3, r0
 800ecd4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ecd6:	7bfb      	ldrb	r3, [r7, #15]
 800ecd8:	2bff      	cmp	r3, #255	; 0xff
 800ecda:	d002      	beq.n	800ece2 <USBH_CDC_InterfaceInit+0x11a>
 800ecdc:	7bfb      	ldrb	r3, [r7, #15]
 800ecde:	2b01      	cmp	r3, #1
 800ece0:	d901      	bls.n	800ece6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ece2:	2302      	movs	r3, #2
 800ece4:	e0c2      	b.n	800ee6c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ece6:	7bfb      	ldrb	r3, [r7, #15]
 800ece8:	687a      	ldr	r2, [r7, #4]
 800ecea:	211a      	movs	r1, #26
 800ecec:	fb01 f303 	mul.w	r3, r1, r3
 800ecf0:	4413      	add	r3, r2
 800ecf2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ecf6:	781b      	ldrb	r3, [r3, #0]
 800ecf8:	b25b      	sxtb	r3, r3
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	da16      	bge.n	800ed2c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ecfe:	7bfb      	ldrb	r3, [r7, #15]
 800ed00:	687a      	ldr	r2, [r7, #4]
 800ed02:	211a      	movs	r1, #26
 800ed04:	fb01 f303 	mul.w	r3, r1, r3
 800ed08:	4413      	add	r3, r2
 800ed0a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ed0e:	781a      	ldrb	r2, [r3, #0]
 800ed10:	68bb      	ldr	r3, [r7, #8]
 800ed12:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ed14:	7bfb      	ldrb	r3, [r7, #15]
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	211a      	movs	r1, #26
 800ed1a:	fb01 f303 	mul.w	r3, r1, r3
 800ed1e:	4413      	add	r3, r2
 800ed20:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ed24:	881a      	ldrh	r2, [r3, #0]
 800ed26:	68bb      	ldr	r3, [r7, #8]
 800ed28:	835a      	strh	r2, [r3, #26]
 800ed2a:	e015      	b.n	800ed58 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ed2c:	7bfb      	ldrb	r3, [r7, #15]
 800ed2e:	687a      	ldr	r2, [r7, #4]
 800ed30:	211a      	movs	r1, #26
 800ed32:	fb01 f303 	mul.w	r3, r1, r3
 800ed36:	4413      	add	r3, r2
 800ed38:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ed3c:	781a      	ldrb	r2, [r3, #0]
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ed42:	7bfb      	ldrb	r3, [r7, #15]
 800ed44:	687a      	ldr	r2, [r7, #4]
 800ed46:	211a      	movs	r1, #26
 800ed48:	fb01 f303 	mul.w	r3, r1, r3
 800ed4c:	4413      	add	r3, r2
 800ed4e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ed52:	881a      	ldrh	r2, [r3, #0]
 800ed54:	68bb      	ldr	r3, [r7, #8]
 800ed56:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ed58:	7bfb      	ldrb	r3, [r7, #15]
 800ed5a:	687a      	ldr	r2, [r7, #4]
 800ed5c:	211a      	movs	r1, #26
 800ed5e:	fb01 f303 	mul.w	r3, r1, r3
 800ed62:	4413      	add	r3, r2
 800ed64:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ed68:	781b      	ldrb	r3, [r3, #0]
 800ed6a:	b25b      	sxtb	r3, r3
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	da16      	bge.n	800ed9e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ed70:	7bfb      	ldrb	r3, [r7, #15]
 800ed72:	687a      	ldr	r2, [r7, #4]
 800ed74:	211a      	movs	r1, #26
 800ed76:	fb01 f303 	mul.w	r3, r1, r3
 800ed7a:	4413      	add	r3, r2
 800ed7c:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ed80:	781a      	ldrb	r2, [r3, #0]
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ed86:	7bfb      	ldrb	r3, [r7, #15]
 800ed88:	687a      	ldr	r2, [r7, #4]
 800ed8a:	211a      	movs	r1, #26
 800ed8c:	fb01 f303 	mul.w	r3, r1, r3
 800ed90:	4413      	add	r3, r2
 800ed92:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800ed96:	881a      	ldrh	r2, [r3, #0]
 800ed98:	68bb      	ldr	r3, [r7, #8]
 800ed9a:	835a      	strh	r2, [r3, #26]
 800ed9c:	e015      	b.n	800edca <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ed9e:	7bfb      	ldrb	r3, [r7, #15]
 800eda0:	687a      	ldr	r2, [r7, #4]
 800eda2:	211a      	movs	r1, #26
 800eda4:	fb01 f303 	mul.w	r3, r1, r3
 800eda8:	4413      	add	r3, r2
 800edaa:	f203 3356 	addw	r3, r3, #854	; 0x356
 800edae:	781a      	ldrb	r2, [r3, #0]
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800edb4:	7bfb      	ldrb	r3, [r7, #15]
 800edb6:	687a      	ldr	r2, [r7, #4]
 800edb8:	211a      	movs	r1, #26
 800edba:	fb01 f303 	mul.w	r3, r1, r3
 800edbe:	4413      	add	r3, r2
 800edc0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800edc4:	881a      	ldrh	r2, [r3, #0]
 800edc6:	68bb      	ldr	r3, [r7, #8]
 800edc8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800edca:	68bb      	ldr	r3, [r7, #8]
 800edcc:	7b9b      	ldrb	r3, [r3, #14]
 800edce:	4619      	mov	r1, r3
 800edd0:	6878      	ldr	r0, [r7, #4]
 800edd2:	f001 fe7e 	bl	8010ad2 <USBH_AllocPipe>
 800edd6:	4603      	mov	r3, r0
 800edd8:	461a      	mov	r2, r3
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800edde:	68bb      	ldr	r3, [r7, #8]
 800ede0:	7bdb      	ldrb	r3, [r3, #15]
 800ede2:	4619      	mov	r1, r3
 800ede4:	6878      	ldr	r0, [r7, #4]
 800ede6:	f001 fe74 	bl	8010ad2 <USBH_AllocPipe>
 800edea:	4603      	mov	r3, r0
 800edec:	461a      	mov	r2, r3
 800edee:	68bb      	ldr	r3, [r7, #8]
 800edf0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800edf2:	68bb      	ldr	r3, [r7, #8]
 800edf4:	7b59      	ldrb	r1, [r3, #13]
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	7b98      	ldrb	r0, [r3, #14]
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ee06:	68ba      	ldr	r2, [r7, #8]
 800ee08:	8b12      	ldrh	r2, [r2, #24]
 800ee0a:	9202      	str	r2, [sp, #8]
 800ee0c:	2202      	movs	r2, #2
 800ee0e:	9201      	str	r2, [sp, #4]
 800ee10:	9300      	str	r3, [sp, #0]
 800ee12:	4623      	mov	r3, r4
 800ee14:	4602      	mov	r2, r0
 800ee16:	6878      	ldr	r0, [r7, #4]
 800ee18:	f001 fe2c 	bl	8010a74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	7b19      	ldrb	r1, [r3, #12]
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	7bd8      	ldrb	r0, [r3, #15]
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ee30:	68ba      	ldr	r2, [r7, #8]
 800ee32:	8b52      	ldrh	r2, [r2, #26]
 800ee34:	9202      	str	r2, [sp, #8]
 800ee36:	2202      	movs	r2, #2
 800ee38:	9201      	str	r2, [sp, #4]
 800ee3a:	9300      	str	r3, [sp, #0]
 800ee3c:	4623      	mov	r3, r4
 800ee3e:	4602      	mov	r2, r0
 800ee40:	6878      	ldr	r0, [r7, #4]
 800ee42:	f001 fe17 	bl	8010a74 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ee46:	68bb      	ldr	r3, [r7, #8]
 800ee48:	2200      	movs	r2, #0
 800ee4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ee4e:	68bb      	ldr	r3, [r7, #8]
 800ee50:	7b5b      	ldrb	r3, [r3, #13]
 800ee52:	2200      	movs	r2, #0
 800ee54:	4619      	mov	r1, r3
 800ee56:	6878      	ldr	r0, [r7, #4]
 800ee58:	f002 feea 	bl	8011c30 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ee5c:	68bb      	ldr	r3, [r7, #8]
 800ee5e:	7b1b      	ldrb	r3, [r3, #12]
 800ee60:	2200      	movs	r2, #0
 800ee62:	4619      	mov	r1, r3
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f002 fee3 	bl	8011c30 <USBH_LL_SetToggle>

  return USBH_OK;
 800ee6a:	2300      	movs	r3, #0
}
 800ee6c:	4618      	mov	r0, r3
 800ee6e:	3714      	adds	r7, #20
 800ee70:	46bd      	mov	sp, r7
 800ee72:	bd90      	pop	{r4, r7, pc}

0800ee74 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ee82:	69db      	ldr	r3, [r3, #28]
 800ee84:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ee86:	68fb      	ldr	r3, [r7, #12]
 800ee88:	781b      	ldrb	r3, [r3, #0]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d00e      	beq.n	800eeac <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	781b      	ldrb	r3, [r3, #0]
 800ee92:	4619      	mov	r1, r3
 800ee94:	6878      	ldr	r0, [r7, #4]
 800ee96:	f001 fe0c 	bl	8010ab2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	781b      	ldrb	r3, [r3, #0]
 800ee9e:	4619      	mov	r1, r3
 800eea0:	6878      	ldr	r0, [r7, #4]
 800eea2:	f001 fe37 	bl	8010b14 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800eea6:	68fb      	ldr	r3, [r7, #12]
 800eea8:	2200      	movs	r2, #0
 800eeaa:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800eeac:	68fb      	ldr	r3, [r7, #12]
 800eeae:	7b1b      	ldrb	r3, [r3, #12]
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00e      	beq.n	800eed2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800eeb4:	68fb      	ldr	r3, [r7, #12]
 800eeb6:	7b1b      	ldrb	r3, [r3, #12]
 800eeb8:	4619      	mov	r1, r3
 800eeba:	6878      	ldr	r0, [r7, #4]
 800eebc:	f001 fdf9 	bl	8010ab2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	7b1b      	ldrb	r3, [r3, #12]
 800eec4:	4619      	mov	r1, r3
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f001 fe24 	bl	8010b14 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	2200      	movs	r2, #0
 800eed0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	7b5b      	ldrb	r3, [r3, #13]
 800eed6:	2b00      	cmp	r3, #0
 800eed8:	d00e      	beq.n	800eef8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	7b5b      	ldrb	r3, [r3, #13]
 800eede:	4619      	mov	r1, r3
 800eee0:	6878      	ldr	r0, [r7, #4]
 800eee2:	f001 fde6 	bl	8010ab2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	7b5b      	ldrb	r3, [r3, #13]
 800eeea:	4619      	mov	r1, r3
 800eeec:	6878      	ldr	r0, [r7, #4]
 800eeee:	f001 fe11 	bl	8010b14 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	2200      	movs	r2, #0
 800eef6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800eefe:	69db      	ldr	r3, [r3, #28]
 800ef00:	2b00      	cmp	r3, #0
 800ef02:	d00b      	beq.n	800ef1c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef0a:	69db      	ldr	r3, [r3, #28]
 800ef0c:	4618      	mov	r0, r3
 800ef0e:	f002 ff45 	bl	8011d9c <free>
    phost->pActiveClass->pData = 0U;
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef18:	2200      	movs	r2, #0
 800ef1a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ef1c:	2300      	movs	r3, #0
}
 800ef1e:	4618      	mov	r0, r3
 800ef20:	3710      	adds	r7, #16
 800ef22:	46bd      	mov	sp, r7
 800ef24:	bd80      	pop	{r7, pc}

0800ef26 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ef26:	b580      	push	{r7, lr}
 800ef28:	b084      	sub	sp, #16
 800ef2a:	af00      	add	r7, sp, #0
 800ef2c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef34:	69db      	ldr	r3, [r3, #28]
 800ef36:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ef38:	68fb      	ldr	r3, [r7, #12]
 800ef3a:	3340      	adds	r3, #64	; 0x40
 800ef3c:	4619      	mov	r1, r3
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f000 f8b1 	bl	800f0a6 <GetLineCoding>
 800ef44:	4603      	mov	r3, r0
 800ef46:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ef48:	7afb      	ldrb	r3, [r7, #11]
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d105      	bne.n	800ef5a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800ef54:	2102      	movs	r1, #2
 800ef56:	6878      	ldr	r0, [r7, #4]
 800ef58:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ef5a:	7afb      	ldrb	r3, [r7, #11]
}
 800ef5c:	4618      	mov	r0, r3
 800ef5e:	3710      	adds	r7, #16
 800ef60:	46bd      	mov	sp, r7
 800ef62:	bd80      	pop	{r7, pc}

0800ef64 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ef70:	2300      	movs	r3, #0
 800ef72:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ef7a:	69db      	ldr	r3, [r3, #28]
 800ef7c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ef7e:	68bb      	ldr	r3, [r7, #8]
 800ef80:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800ef84:	2b04      	cmp	r3, #4
 800ef86:	d877      	bhi.n	800f078 <USBH_CDC_Process+0x114>
 800ef88:	a201      	add	r2, pc, #4	; (adr r2, 800ef90 <USBH_CDC_Process+0x2c>)
 800ef8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef8e:	bf00      	nop
 800ef90:	0800efa5 	.word	0x0800efa5
 800ef94:	0800efab 	.word	0x0800efab
 800ef98:	0800efdb 	.word	0x0800efdb
 800ef9c:	0800f04f 	.word	0x0800f04f
 800efa0:	0800f05d 	.word	0x0800f05d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800efa4:	2300      	movs	r3, #0
 800efa6:	73fb      	strb	r3, [r7, #15]
      break;
 800efa8:	e06d      	b.n	800f086 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800efaa:	68bb      	ldr	r3, [r7, #8]
 800efac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800efae:	4619      	mov	r1, r3
 800efb0:	6878      	ldr	r0, [r7, #4]
 800efb2:	f000 f897 	bl	800f0e4 <SetLineCoding>
 800efb6:	4603      	mov	r3, r0
 800efb8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800efba:	7bbb      	ldrb	r3, [r7, #14]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d104      	bne.n	800efca <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	2202      	movs	r2, #2
 800efc4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800efc8:	e058      	b.n	800f07c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800efca:	7bbb      	ldrb	r3, [r7, #14]
 800efcc:	2b01      	cmp	r3, #1
 800efce:	d055      	beq.n	800f07c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	2204      	movs	r2, #4
 800efd4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800efd8:	e050      	b.n	800f07c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800efda:	68bb      	ldr	r3, [r7, #8]
 800efdc:	3340      	adds	r3, #64	; 0x40
 800efde:	4619      	mov	r1, r3
 800efe0:	6878      	ldr	r0, [r7, #4]
 800efe2:	f000 f860 	bl	800f0a6 <GetLineCoding>
 800efe6:	4603      	mov	r3, r0
 800efe8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800efea:	7bbb      	ldrb	r3, [r7, #14]
 800efec:	2b00      	cmp	r3, #0
 800efee:	d126      	bne.n	800f03e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	2200      	movs	r2, #0
 800eff4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800eff8:	68bb      	ldr	r3, [r7, #8]
 800effa:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800effe:	68bb      	ldr	r3, [r7, #8]
 800f000:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f002:	791b      	ldrb	r3, [r3, #4]
 800f004:	429a      	cmp	r2, r3
 800f006:	d13b      	bne.n	800f080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f008:	68bb      	ldr	r3, [r7, #8]
 800f00a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800f00e:	68bb      	ldr	r3, [r7, #8]
 800f010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f012:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f014:	429a      	cmp	r2, r3
 800f016:	d133      	bne.n	800f080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f018:	68bb      	ldr	r3, [r7, #8]
 800f01a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800f01e:	68bb      	ldr	r3, [r7, #8]
 800f020:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f022:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f024:	429a      	cmp	r2, r3
 800f026:	d12b      	bne.n	800f080 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f030:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f032:	429a      	cmp	r2, r3
 800f034:	d124      	bne.n	800f080 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f036:	6878      	ldr	r0, [r7, #4]
 800f038:	f000 f958 	bl	800f2ec <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f03c:	e020      	b.n	800f080 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f03e:	7bbb      	ldrb	r3, [r7, #14]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d01d      	beq.n	800f080 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f044:	68bb      	ldr	r3, [r7, #8]
 800f046:	2204      	movs	r2, #4
 800f048:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f04c:	e018      	b.n	800f080 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f04e:	6878      	ldr	r0, [r7, #4]
 800f050:	f000 f867 	bl	800f122 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f054:	6878      	ldr	r0, [r7, #4]
 800f056:	f000 f8da 	bl	800f20e <CDC_ProcessReception>
      break;
 800f05a:	e014      	b.n	800f086 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f05c:	2100      	movs	r1, #0
 800f05e:	6878      	ldr	r0, [r7, #4]
 800f060:	f001 f80f 	bl	8010082 <USBH_ClrFeature>
 800f064:	4603      	mov	r3, r0
 800f066:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f068:	7bbb      	ldrb	r3, [r7, #14]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d10a      	bne.n	800f084 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f06e:	68bb      	ldr	r3, [r7, #8]
 800f070:	2200      	movs	r2, #0
 800f072:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800f076:	e005      	b.n	800f084 <USBH_CDC_Process+0x120>

    default:
      break;
 800f078:	bf00      	nop
 800f07a:	e004      	b.n	800f086 <USBH_CDC_Process+0x122>
      break;
 800f07c:	bf00      	nop
 800f07e:	e002      	b.n	800f086 <USBH_CDC_Process+0x122>
      break;
 800f080:	bf00      	nop
 800f082:	e000      	b.n	800f086 <USBH_CDC_Process+0x122>
      break;
 800f084:	bf00      	nop

  }

  return status;
 800f086:	7bfb      	ldrb	r3, [r7, #15]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f090:	b480      	push	{r7}
 800f092:	b083      	sub	sp, #12
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f098:	2300      	movs	r3, #0
}
 800f09a:	4618      	mov	r0, r3
 800f09c:	370c      	adds	r7, #12
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr

0800f0a6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f0a6:	b580      	push	{r7, lr}
 800f0a8:	b082      	sub	sp, #8
 800f0aa:	af00      	add	r7, sp, #0
 800f0ac:	6078      	str	r0, [r7, #4]
 800f0ae:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	22a1      	movs	r2, #161	; 0xa1
 800f0b4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2221      	movs	r2, #33	; 0x21
 800f0ba:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2200      	movs	r2, #0
 800f0c0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	2200      	movs	r2, #0
 800f0c6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2207      	movs	r2, #7
 800f0cc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f0ce:	683b      	ldr	r3, [r7, #0]
 800f0d0:	2207      	movs	r2, #7
 800f0d2:	4619      	mov	r1, r3
 800f0d4:	6878      	ldr	r0, [r7, #4]
 800f0d6:	f001 fa7b 	bl	80105d0 <USBH_CtlReq>
 800f0da:	4603      	mov	r3, r0
}
 800f0dc:	4618      	mov	r0, r3
 800f0de:	3708      	adds	r7, #8
 800f0e0:	46bd      	mov	sp, r7
 800f0e2:	bd80      	pop	{r7, pc}

0800f0e4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f0e4:	b580      	push	{r7, lr}
 800f0e6:	b082      	sub	sp, #8
 800f0e8:	af00      	add	r7, sp, #0
 800f0ea:	6078      	str	r0, [r7, #4]
 800f0ec:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2221      	movs	r2, #33	; 0x21
 800f0f2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2220      	movs	r2, #32
 800f0f8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f0fa:	687b      	ldr	r3, [r7, #4]
 800f0fc:	2200      	movs	r2, #0
 800f0fe:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f100:	687b      	ldr	r3, [r7, #4]
 800f102:	2200      	movs	r2, #0
 800f104:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	2207      	movs	r2, #7
 800f10a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f10c:	683b      	ldr	r3, [r7, #0]
 800f10e:	2207      	movs	r2, #7
 800f110:	4619      	mov	r1, r3
 800f112:	6878      	ldr	r0, [r7, #4]
 800f114:	f001 fa5c 	bl	80105d0 <USBH_CtlReq>
 800f118:	4603      	mov	r3, r0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f122:	b580      	push	{r7, lr}
 800f124:	b086      	sub	sp, #24
 800f126:	af02      	add	r7, sp, #8
 800f128:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f130:	69db      	ldr	r3, [r3, #28]
 800f132:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f134:	2300      	movs	r3, #0
 800f136:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f138:	68fb      	ldr	r3, [r7, #12]
 800f13a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f13e:	2b01      	cmp	r3, #1
 800f140:	d002      	beq.n	800f148 <CDC_ProcessTransmission+0x26>
 800f142:	2b02      	cmp	r3, #2
 800f144:	d023      	beq.n	800f18e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f146:	e05e      	b.n	800f206 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f14c:	68fa      	ldr	r2, [r7, #12]
 800f14e:	8b12      	ldrh	r2, [r2, #24]
 800f150:	4293      	cmp	r3, r2
 800f152:	d90b      	bls.n	800f16c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f154:	68fb      	ldr	r3, [r7, #12]
 800f156:	69d9      	ldr	r1, [r3, #28]
 800f158:	68fb      	ldr	r3, [r7, #12]
 800f15a:	8b1a      	ldrh	r2, [r3, #24]
 800f15c:	68fb      	ldr	r3, [r7, #12]
 800f15e:	7b5b      	ldrb	r3, [r3, #13]
 800f160:	2001      	movs	r0, #1
 800f162:	9000      	str	r0, [sp, #0]
 800f164:	6878      	ldr	r0, [r7, #4]
 800f166:	f001 fc42 	bl	80109ee <USBH_BulkSendData>
 800f16a:	e00b      	b.n	800f184 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800f174:	b29a      	uxth	r2, r3
 800f176:	68fb      	ldr	r3, [r7, #12]
 800f178:	7b5b      	ldrb	r3, [r3, #13]
 800f17a:	2001      	movs	r0, #1
 800f17c:	9000      	str	r0, [sp, #0]
 800f17e:	6878      	ldr	r0, [r7, #4]
 800f180:	f001 fc35 	bl	80109ee <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f184:	68fb      	ldr	r3, [r7, #12]
 800f186:	2202      	movs	r2, #2
 800f188:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f18c:	e03b      	b.n	800f206 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	7b5b      	ldrb	r3, [r3, #13]
 800f192:	4619      	mov	r1, r3
 800f194:	6878      	ldr	r0, [r7, #4]
 800f196:	f002 fd21 	bl	8011bdc <USBH_LL_GetURBState>
 800f19a:	4603      	mov	r3, r0
 800f19c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f19e:	7afb      	ldrb	r3, [r7, #11]
 800f1a0:	2b01      	cmp	r3, #1
 800f1a2:	d128      	bne.n	800f1f6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f1a4:	68fb      	ldr	r3, [r7, #12]
 800f1a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1a8:	68fa      	ldr	r2, [r7, #12]
 800f1aa:	8b12      	ldrh	r2, [r2, #24]
 800f1ac:	4293      	cmp	r3, r2
 800f1ae:	d90e      	bls.n	800f1ce <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f1b0:	68fb      	ldr	r3, [r7, #12]
 800f1b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1b4:	68fa      	ldr	r2, [r7, #12]
 800f1b6:	8b12      	ldrh	r2, [r2, #24]
 800f1b8:	1a9a      	subs	r2, r3, r2
 800f1ba:	68fb      	ldr	r3, [r7, #12]
 800f1bc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	69db      	ldr	r3, [r3, #28]
 800f1c2:	68fa      	ldr	r2, [r7, #12]
 800f1c4:	8b12      	ldrh	r2, [r2, #24]
 800f1c6:	441a      	add	r2, r3
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	61da      	str	r2, [r3, #28]
 800f1cc:	e002      	b.n	800f1d4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f1ce:	68fb      	ldr	r3, [r7, #12]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f1d4:	68fb      	ldr	r3, [r7, #12]
 800f1d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d004      	beq.n	800f1e6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f1dc:	68fb      	ldr	r3, [r7, #12]
 800f1de:	2201      	movs	r2, #1
 800f1e0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f1e4:	e00e      	b.n	800f204 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f1e6:	68fb      	ldr	r3, [r7, #12]
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 f868 	bl	800f2c4 <USBH_CDC_TransmitCallback>
      break;
 800f1f4:	e006      	b.n	800f204 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800f1f6:	7afb      	ldrb	r3, [r7, #11]
 800f1f8:	2b02      	cmp	r3, #2
 800f1fa:	d103      	bne.n	800f204 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f1fc:	68fb      	ldr	r3, [r7, #12]
 800f1fe:	2201      	movs	r2, #1
 800f200:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f204:	bf00      	nop
  }
}
 800f206:	bf00      	nop
 800f208:	3710      	adds	r7, #16
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f20e:	b580      	push	{r7, lr}
 800f210:	b086      	sub	sp, #24
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f21c:	69db      	ldr	r3, [r3, #28]
 800f21e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f220:	2300      	movs	r3, #0
 800f222:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f224:	697b      	ldr	r3, [r7, #20]
 800f226:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f22a:	2b03      	cmp	r3, #3
 800f22c:	d002      	beq.n	800f234 <CDC_ProcessReception+0x26>
 800f22e:	2b04      	cmp	r3, #4
 800f230:	d00e      	beq.n	800f250 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f232:	e043      	b.n	800f2bc <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800f234:	697b      	ldr	r3, [r7, #20]
 800f236:	6a19      	ldr	r1, [r3, #32]
 800f238:	697b      	ldr	r3, [r7, #20]
 800f23a:	8b5a      	ldrh	r2, [r3, #26]
 800f23c:	697b      	ldr	r3, [r7, #20]
 800f23e:	7b1b      	ldrb	r3, [r3, #12]
 800f240:	6878      	ldr	r0, [r7, #4]
 800f242:	f001 fbf9 	bl	8010a38 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f246:	697b      	ldr	r3, [r7, #20]
 800f248:	2204      	movs	r2, #4
 800f24a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f24e:	e035      	b.n	800f2bc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f250:	697b      	ldr	r3, [r7, #20]
 800f252:	7b1b      	ldrb	r3, [r3, #12]
 800f254:	4619      	mov	r1, r3
 800f256:	6878      	ldr	r0, [r7, #4]
 800f258:	f002 fcc0 	bl	8011bdc <USBH_LL_GetURBState>
 800f25c:	4603      	mov	r3, r0
 800f25e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f260:	7cfb      	ldrb	r3, [r7, #19]
 800f262:	2b01      	cmp	r3, #1
 800f264:	d129      	bne.n	800f2ba <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f266:	697b      	ldr	r3, [r7, #20]
 800f268:	7b1b      	ldrb	r3, [r3, #12]
 800f26a:	4619      	mov	r1, r3
 800f26c:	6878      	ldr	r0, [r7, #4]
 800f26e:	f002 fc23 	bl	8011ab8 <USBH_LL_GetLastXferSize>
 800f272:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f274:	697b      	ldr	r3, [r7, #20]
 800f276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	429a      	cmp	r2, r3
 800f27c:	d016      	beq.n	800f2ac <CDC_ProcessReception+0x9e>
 800f27e:	697b      	ldr	r3, [r7, #20]
 800f280:	8b5b      	ldrh	r3, [r3, #26]
 800f282:	461a      	mov	r2, r3
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	4293      	cmp	r3, r2
 800f288:	d910      	bls.n	800f2ac <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f28a:	697b      	ldr	r3, [r7, #20]
 800f28c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f28e:	68fb      	ldr	r3, [r7, #12]
 800f290:	1ad2      	subs	r2, r2, r3
 800f292:	697b      	ldr	r3, [r7, #20]
 800f294:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800f296:	697b      	ldr	r3, [r7, #20]
 800f298:	6a1a      	ldr	r2, [r3, #32]
 800f29a:	68fb      	ldr	r3, [r7, #12]
 800f29c:	441a      	add	r2, r3
 800f29e:	697b      	ldr	r3, [r7, #20]
 800f2a0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f2a2:	697b      	ldr	r3, [r7, #20]
 800f2a4:	2203      	movs	r2, #3
 800f2a6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f2aa:	e006      	b.n	800f2ba <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f2ac:	697b      	ldr	r3, [r7, #20]
 800f2ae:	2200      	movs	r2, #0
 800f2b0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f80f 	bl	800f2d8 <USBH_CDC_ReceiveCallback>
      break;
 800f2ba:	bf00      	nop
  }
}
 800f2bc:	bf00      	nop
 800f2be:	3718      	adds	r7, #24
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	bd80      	pop	{r7, pc}

0800f2c4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f2c4:	b480      	push	{r7}
 800f2c6:	b083      	sub	sp, #12
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f2cc:	bf00      	nop
 800f2ce:	370c      	adds	r7, #12
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f2d8:	b480      	push	{r7}
 800f2da:	b083      	sub	sp, #12
 800f2dc:	af00      	add	r7, sp, #0
 800f2de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f2e0:	bf00      	nop
 800f2e2:	370c      	adds	r7, #12
 800f2e4:	46bd      	mov	sp, r7
 800f2e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ea:	4770      	bx	lr

0800f2ec <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f2ec:	b480      	push	{r7}
 800f2ee:	b083      	sub	sp, #12
 800f2f0:	af00      	add	r7, sp, #0
 800f2f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f2f4:	bf00      	nop
 800f2f6:	370c      	adds	r7, #12
 800f2f8:	46bd      	mov	sp, r7
 800f2fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2fe:	4770      	bx	lr

0800f300 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f300:	b580      	push	{r7, lr}
 800f302:	b084      	sub	sp, #16
 800f304:	af00      	add	r7, sp, #0
 800f306:	60f8      	str	r0, [r7, #12]
 800f308:	60b9      	str	r1, [r7, #8]
 800f30a:	4613      	mov	r3, r2
 800f30c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f30e:	68fb      	ldr	r3, [r7, #12]
 800f310:	2b00      	cmp	r3, #0
 800f312:	d101      	bne.n	800f318 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f314:	2302      	movs	r3, #2
 800f316:	e029      	b.n	800f36c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f318:	68fb      	ldr	r3, [r7, #12]
 800f31a:	79fa      	ldrb	r2, [r7, #7]
 800f31c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	2200      	movs	r2, #0
 800f324:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2200      	movs	r2, #0
 800f32c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f330:	68f8      	ldr	r0, [r7, #12]
 800f332:	f000 f81f 	bl	800f374 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f336:	68fb      	ldr	r3, [r7, #12]
 800f338:	2200      	movs	r2, #0
 800f33a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	2200      	movs	r2, #0
 800f342:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	2200      	movs	r2, #0
 800f34a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	2200      	movs	r2, #0
 800f352:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f356:	68bb      	ldr	r3, [r7, #8]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d003      	beq.n	800f364 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f35c:	68fb      	ldr	r3, [r7, #12]
 800f35e:	68ba      	ldr	r2, [r7, #8]
 800f360:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f364:	68f8      	ldr	r0, [r7, #12]
 800f366:	f002 faf3 	bl	8011950 <USBH_LL_Init>

  return USBH_OK;
 800f36a:	2300      	movs	r3, #0
}
 800f36c:	4618      	mov	r0, r3
 800f36e:	3710      	adds	r7, #16
 800f370:	46bd      	mov	sp, r7
 800f372:	bd80      	pop	{r7, pc}

0800f374 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f374:	b580      	push	{r7, lr}
 800f376:	b084      	sub	sp, #16
 800f378:	af00      	add	r7, sp, #0
 800f37a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f37c:	2300      	movs	r3, #0
 800f37e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f380:	2300      	movs	r3, #0
 800f382:	60fb      	str	r3, [r7, #12]
 800f384:	e009      	b.n	800f39a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f386:	687a      	ldr	r2, [r7, #4]
 800f388:	68fb      	ldr	r3, [r7, #12]
 800f38a:	33e0      	adds	r3, #224	; 0xe0
 800f38c:	009b      	lsls	r3, r3, #2
 800f38e:	4413      	add	r3, r2
 800f390:	2200      	movs	r2, #0
 800f392:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	3301      	adds	r3, #1
 800f398:	60fb      	str	r3, [r7, #12]
 800f39a:	68fb      	ldr	r3, [r7, #12]
 800f39c:	2b0f      	cmp	r3, #15
 800f39e:	d9f2      	bls.n	800f386 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f3a0:	2300      	movs	r3, #0
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	e009      	b.n	800f3ba <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f3a6:	687a      	ldr	r2, [r7, #4]
 800f3a8:	68fb      	ldr	r3, [r7, #12]
 800f3aa:	4413      	add	r3, r2
 800f3ac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f3b0:	2200      	movs	r2, #0
 800f3b2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f3b4:	68fb      	ldr	r3, [r7, #12]
 800f3b6:	3301      	adds	r3, #1
 800f3b8:	60fb      	str	r3, [r7, #12]
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f3c0:	d3f1      	bcc.n	800f3a6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	2200      	movs	r2, #0
 800f3c6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	2200      	movs	r2, #0
 800f3cc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	2201      	movs	r2, #1
 800f3d2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2201      	movs	r2, #1
 800f3e0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	2240      	movs	r2, #64	; 0x40
 800f3e6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2200      	movs	r2, #0
 800f3ec:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	2200      	movs	r2, #0
 800f3f2:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	2201      	movs	r2, #1
 800f3fa:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	2200      	movs	r2, #0
 800f402:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f406:	687b      	ldr	r3, [r7, #4]
 800f408:	2200      	movs	r2, #0
 800f40a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	331c      	adds	r3, #28
 800f412:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f416:	2100      	movs	r1, #0
 800f418:	4618      	mov	r0, r3
 800f41a:	f002 fcc7 	bl	8011dac <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f424:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f428:	2100      	movs	r1, #0
 800f42a:	4618      	mov	r0, r3
 800f42c:	f002 fcbe 	bl	8011dac <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	f203 3326 	addw	r3, r3, #806	; 0x326
 800f436:	2212      	movs	r2, #18
 800f438:	2100      	movs	r1, #0
 800f43a:	4618      	mov	r0, r3
 800f43c:	f002 fcb6 	bl	8011dac <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f446:	223e      	movs	r2, #62	; 0x3e
 800f448:	2100      	movs	r1, #0
 800f44a:	4618      	mov	r0, r3
 800f44c:	f002 fcae 	bl	8011dac <memset>

  return USBH_OK;
 800f450:	2300      	movs	r3, #0
}
 800f452:	4618      	mov	r0, r3
 800f454:	3710      	adds	r7, #16
 800f456:	46bd      	mov	sp, r7
 800f458:	bd80      	pop	{r7, pc}

0800f45a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f45a:	b480      	push	{r7}
 800f45c:	b085      	sub	sp, #20
 800f45e:	af00      	add	r7, sp, #0
 800f460:	6078      	str	r0, [r7, #4]
 800f462:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f468:	683b      	ldr	r3, [r7, #0]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d016      	beq.n	800f49c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f474:	2b00      	cmp	r3, #0
 800f476:	d10e      	bne.n	800f496 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f478:	687b      	ldr	r3, [r7, #4]
 800f47a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f47e:	1c59      	adds	r1, r3, #1
 800f480:	687a      	ldr	r2, [r7, #4]
 800f482:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f486:	687a      	ldr	r2, [r7, #4]
 800f488:	33de      	adds	r3, #222	; 0xde
 800f48a:	6839      	ldr	r1, [r7, #0]
 800f48c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f490:	2300      	movs	r3, #0
 800f492:	73fb      	strb	r3, [r7, #15]
 800f494:	e004      	b.n	800f4a0 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f496:	2302      	movs	r3, #2
 800f498:	73fb      	strb	r3, [r7, #15]
 800f49a:	e001      	b.n	800f4a0 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f49c:	2302      	movs	r3, #2
 800f49e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f4a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4a2:	4618      	mov	r0, r3
 800f4a4:	3714      	adds	r7, #20
 800f4a6:	46bd      	mov	sp, r7
 800f4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ac:	4770      	bx	lr

0800f4ae <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f4ae:	b480      	push	{r7}
 800f4b0:	b085      	sub	sp, #20
 800f4b2:	af00      	add	r7, sp, #0
 800f4b4:	6078      	str	r0, [r7, #4]
 800f4b6:	460b      	mov	r3, r1
 800f4b8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f4ba:	2300      	movs	r3, #0
 800f4bc:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800f4c4:	78fa      	ldrb	r2, [r7, #3]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d204      	bcs.n	800f4d4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	78fa      	ldrb	r2, [r7, #3]
 800f4ce:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800f4d2:	e001      	b.n	800f4d8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f4d4:	2302      	movs	r3, #2
 800f4d6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f4d8:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4da:	4618      	mov	r0, r3
 800f4dc:	3714      	adds	r7, #20
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e4:	4770      	bx	lr

0800f4e6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f4e6:	b480      	push	{r7}
 800f4e8:	b087      	sub	sp, #28
 800f4ea:	af00      	add	r7, sp, #0
 800f4ec:	6078      	str	r0, [r7, #4]
 800f4ee:	4608      	mov	r0, r1
 800f4f0:	4611      	mov	r1, r2
 800f4f2:	461a      	mov	r2, r3
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	70fb      	strb	r3, [r7, #3]
 800f4f8:	460b      	mov	r3, r1
 800f4fa:	70bb      	strb	r3, [r7, #2]
 800f4fc:	4613      	mov	r3, r2
 800f4fe:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f500:	2300      	movs	r3, #0
 800f502:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f504:	2300      	movs	r3, #0
 800f506:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f50e:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f510:	e025      	b.n	800f55e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f512:	7dfb      	ldrb	r3, [r7, #23]
 800f514:	221a      	movs	r2, #26
 800f516:	fb02 f303 	mul.w	r3, r2, r3
 800f51a:	3308      	adds	r3, #8
 800f51c:	68fa      	ldr	r2, [r7, #12]
 800f51e:	4413      	add	r3, r2
 800f520:	3302      	adds	r3, #2
 800f522:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f524:	693b      	ldr	r3, [r7, #16]
 800f526:	795b      	ldrb	r3, [r3, #5]
 800f528:	78fa      	ldrb	r2, [r7, #3]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	d002      	beq.n	800f534 <USBH_FindInterface+0x4e>
 800f52e:	78fb      	ldrb	r3, [r7, #3]
 800f530:	2bff      	cmp	r3, #255	; 0xff
 800f532:	d111      	bne.n	800f558 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f538:	78ba      	ldrb	r2, [r7, #2]
 800f53a:	429a      	cmp	r2, r3
 800f53c:	d002      	beq.n	800f544 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f53e:	78bb      	ldrb	r3, [r7, #2]
 800f540:	2bff      	cmp	r3, #255	; 0xff
 800f542:	d109      	bne.n	800f558 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f544:	693b      	ldr	r3, [r7, #16]
 800f546:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f548:	787a      	ldrb	r2, [r7, #1]
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d002      	beq.n	800f554 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f54e:	787b      	ldrb	r3, [r7, #1]
 800f550:	2bff      	cmp	r3, #255	; 0xff
 800f552:	d101      	bne.n	800f558 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f554:	7dfb      	ldrb	r3, [r7, #23]
 800f556:	e006      	b.n	800f566 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f558:	7dfb      	ldrb	r3, [r7, #23]
 800f55a:	3301      	adds	r3, #1
 800f55c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f55e:	7dfb      	ldrb	r3, [r7, #23]
 800f560:	2b01      	cmp	r3, #1
 800f562:	d9d6      	bls.n	800f512 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f564:	23ff      	movs	r3, #255	; 0xff
}
 800f566:	4618      	mov	r0, r3
 800f568:	371c      	adds	r7, #28
 800f56a:	46bd      	mov	sp, r7
 800f56c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f570:	4770      	bx	lr

0800f572 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f572:	b580      	push	{r7, lr}
 800f574:	b082      	sub	sp, #8
 800f576:	af00      	add	r7, sp, #0
 800f578:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f002 fa24 	bl	80119c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f580:	2101      	movs	r1, #1
 800f582:	6878      	ldr	r0, [r7, #4]
 800f584:	f002 fb3d 	bl	8011c02 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f588:	2300      	movs	r3, #0
}
 800f58a:	4618      	mov	r0, r3
 800f58c:	3708      	adds	r7, #8
 800f58e:	46bd      	mov	sp, r7
 800f590:	bd80      	pop	{r7, pc}
	...

0800f594 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f594:	b580      	push	{r7, lr}
 800f596:	b088      	sub	sp, #32
 800f598:	af04      	add	r7, sp, #16
 800f59a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f59c:	2302      	movs	r3, #2
 800f59e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f5a0:	2300      	movs	r3, #0
 800f5a2:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800f5aa:	b2db      	uxtb	r3, r3
 800f5ac:	2b01      	cmp	r3, #1
 800f5ae:	d102      	bne.n	800f5b6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	2203      	movs	r2, #3
 800f5b4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f5b6:	687b      	ldr	r3, [r7, #4]
 800f5b8:	781b      	ldrb	r3, [r3, #0]
 800f5ba:	b2db      	uxtb	r3, r3
 800f5bc:	2b0b      	cmp	r3, #11
 800f5be:	f200 81be 	bhi.w	800f93e <USBH_Process+0x3aa>
 800f5c2:	a201      	add	r2, pc, #4	; (adr r2, 800f5c8 <USBH_Process+0x34>)
 800f5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5c8:	0800f5f9 	.word	0x0800f5f9
 800f5cc:	0800f62b 	.word	0x0800f62b
 800f5d0:	0800f693 	.word	0x0800f693
 800f5d4:	0800f8d9 	.word	0x0800f8d9
 800f5d8:	0800f93f 	.word	0x0800f93f
 800f5dc:	0800f737 	.word	0x0800f737
 800f5e0:	0800f87f 	.word	0x0800f87f
 800f5e4:	0800f76d 	.word	0x0800f76d
 800f5e8:	0800f78d 	.word	0x0800f78d
 800f5ec:	0800f7ad 	.word	0x0800f7ad
 800f5f0:	0800f7f1 	.word	0x0800f7f1
 800f5f4:	0800f8c1 	.word	0x0800f8c1
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f5f8:	687b      	ldr	r3, [r7, #4]
 800f5fa:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f5fe:	b2db      	uxtb	r3, r3
 800f600:	2b00      	cmp	r3, #0
 800f602:	f000 819e 	beq.w	800f942 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2201      	movs	r2, #1
 800f60a:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f60c:	20c8      	movs	r0, #200	; 0xc8
 800f60e:	f002 fb3f 	bl	8011c90 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f612:	6878      	ldr	r0, [r7, #4]
 800f614:	f002 fa35 	bl	8011a82 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2200      	movs	r2, #0
 800f61c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f620:	687b      	ldr	r3, [r7, #4]
 800f622:	2200      	movs	r2, #0
 800f624:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f628:	e18b      	b.n	800f942 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f62a:	687b      	ldr	r3, [r7, #4]
 800f62c:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f630:	2b01      	cmp	r3, #1
 800f632:	d107      	bne.n	800f644 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	2200      	movs	r2, #0
 800f638:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	2202      	movs	r2, #2
 800f640:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f642:	e18d      	b.n	800f960 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f64a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f64e:	d914      	bls.n	800f67a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f656:	3301      	adds	r3, #1
 800f658:	b2da      	uxtb	r2, r3
 800f65a:	687b      	ldr	r3, [r7, #4]
 800f65c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f666:	2b03      	cmp	r3, #3
 800f668:	d903      	bls.n	800f672 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f66a:	687b      	ldr	r3, [r7, #4]
 800f66c:	220d      	movs	r2, #13
 800f66e:	701a      	strb	r2, [r3, #0]
      break;
 800f670:	e176      	b.n	800f960 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	2200      	movs	r2, #0
 800f676:	701a      	strb	r2, [r3, #0]
      break;
 800f678:	e172      	b.n	800f960 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f680:	f103 020a 	add.w	r2, r3, #10
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f68a:	200a      	movs	r0, #10
 800f68c:	f002 fb00 	bl	8011c90 <USBH_Delay>
      break;
 800f690:	e166      	b.n	800f960 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f692:	687b      	ldr	r3, [r7, #4]
 800f694:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d005      	beq.n	800f6a8 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f69c:	687b      	ldr	r3, [r7, #4]
 800f69e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f6a2:	2104      	movs	r1, #4
 800f6a4:	6878      	ldr	r0, [r7, #4]
 800f6a6:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f6a8:	2064      	movs	r0, #100	; 0x64
 800f6aa:	f002 faf1 	bl	8011c90 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f002 f9c0 	bl	8011a34 <USBH_LL_GetSpeed>
 800f6b4:	4603      	mov	r3, r0
 800f6b6:	461a      	mov	r2, r3
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f6be:	687b      	ldr	r3, [r7, #4]
 800f6c0:	2205      	movs	r2, #5
 800f6c2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f6c4:	2100      	movs	r1, #0
 800f6c6:	6878      	ldr	r0, [r7, #4]
 800f6c8:	f001 fa03 	bl	8010ad2 <USBH_AllocPipe>
 800f6cc:	4603      	mov	r3, r0
 800f6ce:	461a      	mov	r2, r3
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f6d4:	2180      	movs	r1, #128	; 0x80
 800f6d6:	6878      	ldr	r0, [r7, #4]
 800f6d8:	f001 f9fb 	bl	8010ad2 <USBH_AllocPipe>
 800f6dc:	4603      	mov	r3, r0
 800f6de:	461a      	mov	r2, r3
 800f6e0:	687b      	ldr	r3, [r7, #4]
 800f6e2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	7919      	ldrb	r1, [r3, #4]
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f6f4:	687a      	ldr	r2, [r7, #4]
 800f6f6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f6f8:	b292      	uxth	r2, r2
 800f6fa:	9202      	str	r2, [sp, #8]
 800f6fc:	2200      	movs	r2, #0
 800f6fe:	9201      	str	r2, [sp, #4]
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	4603      	mov	r3, r0
 800f704:	2280      	movs	r2, #128	; 0x80
 800f706:	6878      	ldr	r0, [r7, #4]
 800f708:	f001 f9b4 	bl	8010a74 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	7959      	ldrb	r1, [r3, #5]
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f71c:	687a      	ldr	r2, [r7, #4]
 800f71e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f720:	b292      	uxth	r2, r2
 800f722:	9202      	str	r2, [sp, #8]
 800f724:	2200      	movs	r2, #0
 800f726:	9201      	str	r2, [sp, #4]
 800f728:	9300      	str	r3, [sp, #0]
 800f72a:	4603      	mov	r3, r0
 800f72c:	2200      	movs	r2, #0
 800f72e:	6878      	ldr	r0, [r7, #4]
 800f730:	f001 f9a0 	bl	8010a74 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f734:	e114      	b.n	800f960 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f736:	6878      	ldr	r0, [r7, #4]
 800f738:	f000 f918 	bl	800f96c <USBH_HandleEnum>
 800f73c:	4603      	mov	r3, r0
 800f73e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f740:	7bbb      	ldrb	r3, [r7, #14]
 800f742:	b2db      	uxtb	r3, r3
 800f744:	2b00      	cmp	r3, #0
 800f746:	f040 80fe 	bne.w	800f946 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	2200      	movs	r2, #0
 800f74e:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f758:	2b01      	cmp	r3, #1
 800f75a:	d103      	bne.n	800f764 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2208      	movs	r2, #8
 800f760:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f762:	e0f0      	b.n	800f946 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2207      	movs	r2, #7
 800f768:	701a      	strb	r2, [r3, #0]
      break;
 800f76a:	e0ec      	b.n	800f946 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f772:	2b00      	cmp	r3, #0
 800f774:	f000 80e9 	beq.w	800f94a <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f77e:	2101      	movs	r1, #1
 800f780:	6878      	ldr	r0, [r7, #4]
 800f782:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	2208      	movs	r2, #8
 800f788:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f78a:	e0de      	b.n	800f94a <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f792:	b29b      	uxth	r3, r3
 800f794:	4619      	mov	r1, r3
 800f796:	6878      	ldr	r0, [r7, #4]
 800f798:	f000 fc2c 	bl	800fff4 <USBH_SetCfg>
 800f79c:	4603      	mov	r3, r0
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f040 80d5 	bne.w	800f94e <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	2209      	movs	r2, #9
 800f7a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f7aa:	e0d0      	b.n	800f94e <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f7ac:	687b      	ldr	r3, [r7, #4]
 800f7ae:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f7b2:	f003 0320 	and.w	r3, r3, #32
 800f7b6:	2b00      	cmp	r3, #0
 800f7b8:	d016      	beq.n	800f7e8 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f7ba:	2101      	movs	r1, #1
 800f7bc:	6878      	ldr	r0, [r7, #4]
 800f7be:	f000 fc3c 	bl	801003a <USBH_SetFeature>
 800f7c2:	4603      	mov	r3, r0
 800f7c4:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f7c6:	7bbb      	ldrb	r3, [r7, #14]
 800f7c8:	b2db      	uxtb	r3, r3
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d103      	bne.n	800f7d6 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	220a      	movs	r2, #10
 800f7d2:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f7d4:	e0bd      	b.n	800f952 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800f7d6:	7bbb      	ldrb	r3, [r7, #14]
 800f7d8:	b2db      	uxtb	r3, r3
 800f7da:	2b03      	cmp	r3, #3
 800f7dc:	f040 80b9 	bne.w	800f952 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	220a      	movs	r2, #10
 800f7e4:	701a      	strb	r2, [r3, #0]
      break;
 800f7e6:	e0b4      	b.n	800f952 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800f7e8:	687b      	ldr	r3, [r7, #4]
 800f7ea:	220a      	movs	r2, #10
 800f7ec:	701a      	strb	r2, [r3, #0]
      break;
 800f7ee:	e0b0      	b.n	800f952 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f7f6:	2b00      	cmp	r3, #0
 800f7f8:	f000 80ad 	beq.w	800f956 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	2200      	movs	r2, #0
 800f800:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f804:	2300      	movs	r3, #0
 800f806:	73fb      	strb	r3, [r7, #15]
 800f808:	e016      	b.n	800f838 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f80a:	7bfa      	ldrb	r2, [r7, #15]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	32de      	adds	r2, #222	; 0xde
 800f810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f814:	791a      	ldrb	r2, [r3, #4]
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f81c:	429a      	cmp	r2, r3
 800f81e:	d108      	bne.n	800f832 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f820:	7bfa      	ldrb	r2, [r7, #15]
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	32de      	adds	r2, #222	; 0xde
 800f826:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f830:	e005      	b.n	800f83e <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f832:	7bfb      	ldrb	r3, [r7, #15]
 800f834:	3301      	adds	r3, #1
 800f836:	73fb      	strb	r3, [r7, #15]
 800f838:	7bfb      	ldrb	r3, [r7, #15]
 800f83a:	2b00      	cmp	r3, #0
 800f83c:	d0e5      	beq.n	800f80a <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800f83e:	687b      	ldr	r3, [r7, #4]
 800f840:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f844:	2b00      	cmp	r3, #0
 800f846:	d016      	beq.n	800f876 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f848:	687b      	ldr	r3, [r7, #4]
 800f84a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f84e:	689b      	ldr	r3, [r3, #8]
 800f850:	6878      	ldr	r0, [r7, #4]
 800f852:	4798      	blx	r3
 800f854:	4603      	mov	r3, r0
 800f856:	2b00      	cmp	r3, #0
 800f858:	d109      	bne.n	800f86e <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f85a:	687b      	ldr	r3, [r7, #4]
 800f85c:	2206      	movs	r2, #6
 800f85e:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f866:	2103      	movs	r1, #3
 800f868:	6878      	ldr	r0, [r7, #4]
 800f86a:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f86c:	e073      	b.n	800f956 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	220d      	movs	r2, #13
 800f872:	701a      	strb	r2, [r3, #0]
      break;
 800f874:	e06f      	b.n	800f956 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	220d      	movs	r2, #13
 800f87a:	701a      	strb	r2, [r3, #0]
      break;
 800f87c:	e06b      	b.n	800f956 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f884:	2b00      	cmp	r3, #0
 800f886:	d017      	beq.n	800f8b8 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f88e:	691b      	ldr	r3, [r3, #16]
 800f890:	6878      	ldr	r0, [r7, #4]
 800f892:	4798      	blx	r3
 800f894:	4603      	mov	r3, r0
 800f896:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f898:	7bbb      	ldrb	r3, [r7, #14]
 800f89a:	b2db      	uxtb	r3, r3
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d103      	bne.n	800f8a8 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	220b      	movs	r2, #11
 800f8a4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f8a6:	e058      	b.n	800f95a <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800f8a8:	7bbb      	ldrb	r3, [r7, #14]
 800f8aa:	b2db      	uxtb	r3, r3
 800f8ac:	2b02      	cmp	r3, #2
 800f8ae:	d154      	bne.n	800f95a <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	220d      	movs	r2, #13
 800f8b4:	701a      	strb	r2, [r3, #0]
      break;
 800f8b6:	e050      	b.n	800f95a <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	220d      	movs	r2, #13
 800f8bc:	701a      	strb	r2, [r3, #0]
      break;
 800f8be:	e04c      	b.n	800f95a <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d049      	beq.n	800f95e <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f8d0:	695b      	ldr	r3, [r3, #20]
 800f8d2:	6878      	ldr	r0, [r7, #4]
 800f8d4:	4798      	blx	r3
      }
      break;
 800f8d6:	e042      	b.n	800f95e <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	2200      	movs	r2, #0
 800f8dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800f8e0:	6878      	ldr	r0, [r7, #4]
 800f8e2:	f7ff fd47 	bl	800f374 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800f8e6:	687b      	ldr	r3, [r7, #4]
 800f8e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	d009      	beq.n	800f904 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800f8f0:	687b      	ldr	r3, [r7, #4]
 800f8f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f8f6:	68db      	ldr	r3, [r3, #12]
 800f8f8:	6878      	ldr	r0, [r7, #4]
 800f8fa:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800f8fc:	687b      	ldr	r3, [r7, #4]
 800f8fe:	2200      	movs	r2, #0
 800f900:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f90a:	2b00      	cmp	r3, #0
 800f90c:	d005      	beq.n	800f91a <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800f90e:	687b      	ldr	r3, [r7, #4]
 800f910:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f914:	2105      	movs	r1, #5
 800f916:	6878      	ldr	r0, [r7, #4]
 800f918:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800f91a:	687b      	ldr	r3, [r7, #4]
 800f91c:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800f920:	b2db      	uxtb	r3, r3
 800f922:	2b01      	cmp	r3, #1
 800f924:	d107      	bne.n	800f936 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2200      	movs	r2, #0
 800f92a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800f92e:	6878      	ldr	r0, [r7, #4]
 800f930:	f7ff fe1f 	bl	800f572 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f934:	e014      	b.n	800f960 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800f936:	6878      	ldr	r0, [r7, #4]
 800f938:	f002 f846 	bl	80119c8 <USBH_LL_Start>
      break;
 800f93c:	e010      	b.n	800f960 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800f93e:	bf00      	nop
 800f940:	e00e      	b.n	800f960 <USBH_Process+0x3cc>
      break;
 800f942:	bf00      	nop
 800f944:	e00c      	b.n	800f960 <USBH_Process+0x3cc>
      break;
 800f946:	bf00      	nop
 800f948:	e00a      	b.n	800f960 <USBH_Process+0x3cc>
    break;
 800f94a:	bf00      	nop
 800f94c:	e008      	b.n	800f960 <USBH_Process+0x3cc>
      break;
 800f94e:	bf00      	nop
 800f950:	e006      	b.n	800f960 <USBH_Process+0x3cc>
      break;
 800f952:	bf00      	nop
 800f954:	e004      	b.n	800f960 <USBH_Process+0x3cc>
      break;
 800f956:	bf00      	nop
 800f958:	e002      	b.n	800f960 <USBH_Process+0x3cc>
      break;
 800f95a:	bf00      	nop
 800f95c:	e000      	b.n	800f960 <USBH_Process+0x3cc>
      break;
 800f95e:	bf00      	nop
  }
  return USBH_OK;
 800f960:	2300      	movs	r3, #0
}
 800f962:	4618      	mov	r0, r3
 800f964:	3710      	adds	r7, #16
 800f966:	46bd      	mov	sp, r7
 800f968:	bd80      	pop	{r7, pc}
 800f96a:	bf00      	nop

0800f96c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800f96c:	b580      	push	{r7, lr}
 800f96e:	b088      	sub	sp, #32
 800f970:	af04      	add	r7, sp, #16
 800f972:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800f974:	2301      	movs	r3, #1
 800f976:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800f978:	2301      	movs	r3, #1
 800f97a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	785b      	ldrb	r3, [r3, #1]
 800f980:	2b07      	cmp	r3, #7
 800f982:	f200 81c1 	bhi.w	800fd08 <USBH_HandleEnum+0x39c>
 800f986:	a201      	add	r2, pc, #4	; (adr r2, 800f98c <USBH_HandleEnum+0x20>)
 800f988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f98c:	0800f9ad 	.word	0x0800f9ad
 800f990:	0800fa6b 	.word	0x0800fa6b
 800f994:	0800fad5 	.word	0x0800fad5
 800f998:	0800fb63 	.word	0x0800fb63
 800f99c:	0800fbcd 	.word	0x0800fbcd
 800f9a0:	0800fc3d 	.word	0x0800fc3d
 800f9a4:	0800fc83 	.word	0x0800fc83
 800f9a8:	0800fcc9 	.word	0x0800fcc9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800f9ac:	2108      	movs	r1, #8
 800f9ae:	6878      	ldr	r0, [r7, #4]
 800f9b0:	f000 fa50 	bl	800fe54 <USBH_Get_DevDesc>
 800f9b4:	4603      	mov	r3, r0
 800f9b6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800f9b8:	7bbb      	ldrb	r3, [r7, #14]
 800f9ba:	2b00      	cmp	r3, #0
 800f9bc:	d130      	bne.n	800fa20 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800f9be:	687b      	ldr	r3, [r7, #4]
 800f9c0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	2201      	movs	r2, #1
 800f9cc:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	7919      	ldrb	r1, [r3, #4]
 800f9d2:	687b      	ldr	r3, [r7, #4]
 800f9d4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800f9de:	687a      	ldr	r2, [r7, #4]
 800f9e0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800f9e2:	b292      	uxth	r2, r2
 800f9e4:	9202      	str	r2, [sp, #8]
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	9201      	str	r2, [sp, #4]
 800f9ea:	9300      	str	r3, [sp, #0]
 800f9ec:	4603      	mov	r3, r0
 800f9ee:	2280      	movs	r2, #128	; 0x80
 800f9f0:	6878      	ldr	r0, [r7, #4]
 800f9f2:	f001 f83f 	bl	8010a74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	7959      	ldrb	r1, [r3, #5]
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fa0a:	b292      	uxth	r2, r2
 800fa0c:	9202      	str	r2, [sp, #8]
 800fa0e:	2200      	movs	r2, #0
 800fa10:	9201      	str	r2, [sp, #4]
 800fa12:	9300      	str	r3, [sp, #0]
 800fa14:	4603      	mov	r3, r0
 800fa16:	2200      	movs	r2, #0
 800fa18:	6878      	ldr	r0, [r7, #4]
 800fa1a:	f001 f82b 	bl	8010a74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fa1e:	e175      	b.n	800fd0c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fa20:	7bbb      	ldrb	r3, [r7, #14]
 800fa22:	2b03      	cmp	r3, #3
 800fa24:	f040 8172 	bne.w	800fd0c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fa2e:	3301      	adds	r3, #1
 800fa30:	b2da      	uxtb	r2, r3
 800fa32:	687b      	ldr	r3, [r7, #4]
 800fa34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fa38:	687b      	ldr	r3, [r7, #4]
 800fa3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fa3e:	2b03      	cmp	r3, #3
 800fa40:	d903      	bls.n	800fa4a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800fa42:	687b      	ldr	r3, [r7, #4]
 800fa44:	220d      	movs	r2, #13
 800fa46:	701a      	strb	r2, [r3, #0]
      break;
 800fa48:	e160      	b.n	800fd0c <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	795b      	ldrb	r3, [r3, #5]
 800fa4e:	4619      	mov	r1, r3
 800fa50:	6878      	ldr	r0, [r7, #4]
 800fa52:	f001 f85f 	bl	8010b14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	791b      	ldrb	r3, [r3, #4]
 800fa5a:	4619      	mov	r1, r3
 800fa5c:	6878      	ldr	r0, [r7, #4]
 800fa5e:	f001 f859 	bl	8010b14 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fa62:	687b      	ldr	r3, [r7, #4]
 800fa64:	2200      	movs	r2, #0
 800fa66:	701a      	strb	r2, [r3, #0]
      break;
 800fa68:	e150      	b.n	800fd0c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fa6a:	2112      	movs	r1, #18
 800fa6c:	6878      	ldr	r0, [r7, #4]
 800fa6e:	f000 f9f1 	bl	800fe54 <USBH_Get_DevDesc>
 800fa72:	4603      	mov	r3, r0
 800fa74:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fa76:	7bbb      	ldrb	r3, [r7, #14]
 800fa78:	2b00      	cmp	r3, #0
 800fa7a:	d103      	bne.n	800fa84 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800fa7c:	687b      	ldr	r3, [r7, #4]
 800fa7e:	2202      	movs	r2, #2
 800fa80:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fa82:	e145      	b.n	800fd10 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fa84:	7bbb      	ldrb	r3, [r7, #14]
 800fa86:	2b03      	cmp	r3, #3
 800fa88:	f040 8142 	bne.w	800fd10 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fa92:	3301      	adds	r3, #1
 800fa94:	b2da      	uxtb	r2, r3
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800faa2:	2b03      	cmp	r3, #3
 800faa4:	d903      	bls.n	800faae <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	220d      	movs	r2, #13
 800faaa:	701a      	strb	r2, [r3, #0]
      break;
 800faac:	e130      	b.n	800fd10 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800faae:	687b      	ldr	r3, [r7, #4]
 800fab0:	795b      	ldrb	r3, [r3, #5]
 800fab2:	4619      	mov	r1, r3
 800fab4:	6878      	ldr	r0, [r7, #4]
 800fab6:	f001 f82d 	bl	8010b14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	791b      	ldrb	r3, [r3, #4]
 800fabe:	4619      	mov	r1, r3
 800fac0:	6878      	ldr	r0, [r7, #4]
 800fac2:	f001 f827 	bl	8010b14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2200      	movs	r2, #0
 800faca:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800facc:	687b      	ldr	r3, [r7, #4]
 800face:	2200      	movs	r2, #0
 800fad0:	701a      	strb	r2, [r3, #0]
      break;
 800fad2:	e11d      	b.n	800fd10 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fad4:	2101      	movs	r1, #1
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 fa68 	bl	800ffac <USBH_SetAddress>
 800fadc:	4603      	mov	r3, r0
 800fade:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fae0:	7bbb      	ldrb	r3, [r7, #14]
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d132      	bne.n	800fb4c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800fae6:	2002      	movs	r0, #2
 800fae8:	f002 f8d2 	bl	8011c90 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	2201      	movs	r2, #1
 800faf0:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2203      	movs	r2, #3
 800faf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	7919      	ldrb	r1, [r3, #4]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fb0e:	b292      	uxth	r2, r2
 800fb10:	9202      	str	r2, [sp, #8]
 800fb12:	2200      	movs	r2, #0
 800fb14:	9201      	str	r2, [sp, #4]
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2280      	movs	r2, #128	; 0x80
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f000 ffa9 	bl	8010a74 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	7959      	ldrb	r1, [r3, #5]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fb36:	b292      	uxth	r2, r2
 800fb38:	9202      	str	r2, [sp, #8]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	9201      	str	r2, [sp, #4]
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	4603      	mov	r3, r0
 800fb42:	2200      	movs	r2, #0
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f000 ff95 	bl	8010a74 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fb4a:	e0e3      	b.n	800fd14 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fb4c:	7bbb      	ldrb	r3, [r7, #14]
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	f040 80e0 	bne.w	800fd14 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	220d      	movs	r2, #13
 800fb58:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	705a      	strb	r2, [r3, #1]
      break;
 800fb60:	e0d8      	b.n	800fd14 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800fb62:	2109      	movs	r1, #9
 800fb64:	6878      	ldr	r0, [r7, #4]
 800fb66:	f000 f99d 	bl	800fea4 <USBH_Get_CfgDesc>
 800fb6a:	4603      	mov	r3, r0
 800fb6c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fb6e:	7bbb      	ldrb	r3, [r7, #14]
 800fb70:	2b00      	cmp	r3, #0
 800fb72:	d103      	bne.n	800fb7c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	2204      	movs	r2, #4
 800fb78:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fb7a:	e0cd      	b.n	800fd18 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fb7c:	7bbb      	ldrb	r3, [r7, #14]
 800fb7e:	2b03      	cmp	r3, #3
 800fb80:	f040 80ca 	bne.w	800fd18 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fb8a:	3301      	adds	r3, #1
 800fb8c:	b2da      	uxtb	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fb9a:	2b03      	cmp	r3, #3
 800fb9c:	d903      	bls.n	800fba6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	220d      	movs	r2, #13
 800fba2:	701a      	strb	r2, [r3, #0]
      break;
 800fba4:	e0b8      	b.n	800fd18 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	795b      	ldrb	r3, [r3, #5]
 800fbaa:	4619      	mov	r1, r3
 800fbac:	6878      	ldr	r0, [r7, #4]
 800fbae:	f000 ffb1 	bl	8010b14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	791b      	ldrb	r3, [r3, #4]
 800fbb6:	4619      	mov	r1, r3
 800fbb8:	6878      	ldr	r0, [r7, #4]
 800fbba:	f000 ffab 	bl	8010b14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	701a      	strb	r2, [r3, #0]
      break;
 800fbca:	e0a5      	b.n	800fd18 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800fbd2:	4619      	mov	r1, r3
 800fbd4:	6878      	ldr	r0, [r7, #4]
 800fbd6:	f000 f965 	bl	800fea4 <USBH_Get_CfgDesc>
 800fbda:	4603      	mov	r3, r0
 800fbdc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fbde:	7bbb      	ldrb	r3, [r7, #14]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d103      	bne.n	800fbec <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	2205      	movs	r2, #5
 800fbe8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fbea:	e097      	b.n	800fd1c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fbec:	7bbb      	ldrb	r3, [r7, #14]
 800fbee:	2b03      	cmp	r3, #3
 800fbf0:	f040 8094 	bne.w	800fd1c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800fbf4:	687b      	ldr	r3, [r7, #4]
 800fbf6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fbfa:	3301      	adds	r3, #1
 800fbfc:	b2da      	uxtb	r2, r3
 800fbfe:	687b      	ldr	r3, [r7, #4]
 800fc00:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fc0a:	2b03      	cmp	r3, #3
 800fc0c:	d903      	bls.n	800fc16 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	220d      	movs	r2, #13
 800fc12:	701a      	strb	r2, [r3, #0]
      break;
 800fc14:	e082      	b.n	800fd1c <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fc16:	687b      	ldr	r3, [r7, #4]
 800fc18:	795b      	ldrb	r3, [r3, #5]
 800fc1a:	4619      	mov	r1, r3
 800fc1c:	6878      	ldr	r0, [r7, #4]
 800fc1e:	f000 ff79 	bl	8010b14 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	791b      	ldrb	r3, [r3, #4]
 800fc26:	4619      	mov	r1, r3
 800fc28:	6878      	ldr	r0, [r7, #4]
 800fc2a:	f000 ff73 	bl	8010b14 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fc2e:	687b      	ldr	r3, [r7, #4]
 800fc30:	2200      	movs	r2, #0
 800fc32:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2200      	movs	r2, #0
 800fc38:	701a      	strb	r2, [r3, #0]
      break;
 800fc3a:	e06f      	b.n	800fd1c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d019      	beq.n	800fc7a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fc52:	23ff      	movs	r3, #255	; 0xff
 800fc54:	6878      	ldr	r0, [r7, #4]
 800fc56:	f000 f949 	bl	800feec <USBH_Get_StringDesc>
 800fc5a:	4603      	mov	r3, r0
 800fc5c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fc5e:	7bbb      	ldrb	r3, [r7, #14]
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d103      	bne.n	800fc6c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	2206      	movs	r2, #6
 800fc68:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fc6a:	e059      	b.n	800fd20 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fc6c:	7bbb      	ldrb	r3, [r7, #14]
 800fc6e:	2b03      	cmp	r3, #3
 800fc70:	d156      	bne.n	800fd20 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	2206      	movs	r2, #6
 800fc76:	705a      	strb	r2, [r3, #1]
      break;
 800fc78:	e052      	b.n	800fd20 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	2206      	movs	r2, #6
 800fc7e:	705a      	strb	r2, [r3, #1]
      break;
 800fc80:	e04e      	b.n	800fd20 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	d019      	beq.n	800fcc0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fc98:	23ff      	movs	r3, #255	; 0xff
 800fc9a:	6878      	ldr	r0, [r7, #4]
 800fc9c:	f000 f926 	bl	800feec <USBH_Get_StringDesc>
 800fca0:	4603      	mov	r3, r0
 800fca2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fca4:	7bbb      	ldrb	r3, [r7, #14]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d103      	bne.n	800fcb2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2207      	movs	r2, #7
 800fcae:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fcb0:	e038      	b.n	800fd24 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fcb2:	7bbb      	ldrb	r3, [r7, #14]
 800fcb4:	2b03      	cmp	r3, #3
 800fcb6:	d135      	bne.n	800fd24 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fcb8:	687b      	ldr	r3, [r7, #4]
 800fcba:	2207      	movs	r2, #7
 800fcbc:	705a      	strb	r2, [r3, #1]
      break;
 800fcbe:	e031      	b.n	800fd24 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	2207      	movs	r2, #7
 800fcc4:	705a      	strb	r2, [r3, #1]
      break;
 800fcc6:	e02d      	b.n	800fd24 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d017      	beq.n	800fd02 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fcde:	23ff      	movs	r3, #255	; 0xff
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f000 f903 	bl	800feec <USBH_Get_StringDesc>
 800fce6:	4603      	mov	r3, r0
 800fce8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fcea:	7bbb      	ldrb	r3, [r7, #14]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d102      	bne.n	800fcf6 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800fcf0:	2300      	movs	r3, #0
 800fcf2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800fcf4:	e018      	b.n	800fd28 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fcf6:	7bbb      	ldrb	r3, [r7, #14]
 800fcf8:	2b03      	cmp	r3, #3
 800fcfa:	d115      	bne.n	800fd28 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800fcfc:	2300      	movs	r3, #0
 800fcfe:	73fb      	strb	r3, [r7, #15]
      break;
 800fd00:	e012      	b.n	800fd28 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800fd02:	2300      	movs	r3, #0
 800fd04:	73fb      	strb	r3, [r7, #15]
      break;
 800fd06:	e00f      	b.n	800fd28 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800fd08:	bf00      	nop
 800fd0a:	e00e      	b.n	800fd2a <USBH_HandleEnum+0x3be>
      break;
 800fd0c:	bf00      	nop
 800fd0e:	e00c      	b.n	800fd2a <USBH_HandleEnum+0x3be>
      break;
 800fd10:	bf00      	nop
 800fd12:	e00a      	b.n	800fd2a <USBH_HandleEnum+0x3be>
      break;
 800fd14:	bf00      	nop
 800fd16:	e008      	b.n	800fd2a <USBH_HandleEnum+0x3be>
      break;
 800fd18:	bf00      	nop
 800fd1a:	e006      	b.n	800fd2a <USBH_HandleEnum+0x3be>
      break;
 800fd1c:	bf00      	nop
 800fd1e:	e004      	b.n	800fd2a <USBH_HandleEnum+0x3be>
      break;
 800fd20:	bf00      	nop
 800fd22:	e002      	b.n	800fd2a <USBH_HandleEnum+0x3be>
      break;
 800fd24:	bf00      	nop
 800fd26:	e000      	b.n	800fd2a <USBH_HandleEnum+0x3be>
      break;
 800fd28:	bf00      	nop
  }
  return Status;
 800fd2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	3710      	adds	r7, #16
 800fd30:	46bd      	mov	sp, r7
 800fd32:	bd80      	pop	{r7, pc}

0800fd34 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b083      	sub	sp, #12
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	683a      	ldr	r2, [r7, #0]
 800fd42:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800fd46:	bf00      	nop
 800fd48:	370c      	adds	r7, #12
 800fd4a:	46bd      	mov	sp, r7
 800fd4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd50:	4770      	bx	lr

0800fd52 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fd52:	b580      	push	{r7, lr}
 800fd54:	b082      	sub	sp, #8
 800fd56:	af00      	add	r7, sp, #0
 800fd58:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fd60:	1c5a      	adds	r2, r3, #1
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800fd68:	6878      	ldr	r0, [r7, #4]
 800fd6a:	f000 f804 	bl	800fd76 <USBH_HandleSof>
}
 800fd6e:	bf00      	nop
 800fd70:	3708      	adds	r7, #8
 800fd72:	46bd      	mov	sp, r7
 800fd74:	bd80      	pop	{r7, pc}

0800fd76 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800fd76:	b580      	push	{r7, lr}
 800fd78:	b082      	sub	sp, #8
 800fd7a:	af00      	add	r7, sp, #0
 800fd7c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800fd7e:	687b      	ldr	r3, [r7, #4]
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	b2db      	uxtb	r3, r3
 800fd84:	2b0b      	cmp	r3, #11
 800fd86:	d10a      	bne.n	800fd9e <USBH_HandleSof+0x28>
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d005      	beq.n	800fd9e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fd98:	699b      	ldr	r3, [r3, #24]
 800fd9a:	6878      	ldr	r0, [r7, #4]
 800fd9c:	4798      	blx	r3
  }
}
 800fd9e:	bf00      	nop
 800fda0:	3708      	adds	r7, #8
 800fda2:	46bd      	mov	sp, r7
 800fda4:	bd80      	pop	{r7, pc}

0800fda6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fda6:	b480      	push	{r7}
 800fda8:	b083      	sub	sp, #12
 800fdaa:	af00      	add	r7, sp, #0
 800fdac:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	2201      	movs	r2, #1
 800fdb2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800fdb6:	bf00      	nop
}
 800fdb8:	370c      	adds	r7, #12
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc0:	4770      	bx	lr

0800fdc2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800fdc2:	b480      	push	{r7}
 800fdc4:	b083      	sub	sp, #12
 800fdc6:	af00      	add	r7, sp, #0
 800fdc8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	2200      	movs	r2, #0
 800fdce:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800fdd2:	bf00      	nop
}
 800fdd4:	370c      	adds	r7, #12
 800fdd6:	46bd      	mov	sp, r7
 800fdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fddc:	4770      	bx	lr

0800fdde <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800fdde:	b480      	push	{r7}
 800fde0:	b083      	sub	sp, #12
 800fde2:	af00      	add	r7, sp, #0
 800fde4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	2201      	movs	r2, #1
 800fdea:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	2200      	movs	r2, #0
 800fdf2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	2200      	movs	r2, #0
 800fdfa:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800fdfe:	2300      	movs	r3, #0
}
 800fe00:	4618      	mov	r0, r3
 800fe02:	370c      	adds	r7, #12
 800fe04:	46bd      	mov	sp, r7
 800fe06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe0a:	4770      	bx	lr

0800fe0c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800fe0c:	b580      	push	{r7, lr}
 800fe0e:	b082      	sub	sp, #8
 800fe10:	af00      	add	r7, sp, #0
 800fe12:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	2201      	movs	r2, #1
 800fe18:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	2200      	movs	r2, #0
 800fe28:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f001 fde6 	bl	80119fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	791b      	ldrb	r3, [r3, #4]
 800fe36:	4619      	mov	r1, r3
 800fe38:	6878      	ldr	r0, [r7, #4]
 800fe3a:	f000 fe6b 	bl	8010b14 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	795b      	ldrb	r3, [r3, #5]
 800fe42:	4619      	mov	r1, r3
 800fe44:	6878      	ldr	r0, [r7, #4]
 800fe46:	f000 fe65 	bl	8010b14 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800fe4a:	2300      	movs	r3, #0
}
 800fe4c:	4618      	mov	r0, r3
 800fe4e:	3708      	adds	r7, #8
 800fe50:	46bd      	mov	sp, r7
 800fe52:	bd80      	pop	{r7, pc}

0800fe54 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800fe54:	b580      	push	{r7, lr}
 800fe56:	b086      	sub	sp, #24
 800fe58:	af02      	add	r7, sp, #8
 800fe5a:	6078      	str	r0, [r7, #4]
 800fe5c:	460b      	mov	r3, r1
 800fe5e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800fe66:	78fb      	ldrb	r3, [r7, #3]
 800fe68:	b29b      	uxth	r3, r3
 800fe6a:	9300      	str	r3, [sp, #0]
 800fe6c:	4613      	mov	r3, r2
 800fe6e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800fe72:	2100      	movs	r1, #0
 800fe74:	6878      	ldr	r0, [r7, #4]
 800fe76:	f000 f864 	bl	800ff42 <USBH_GetDescriptor>
 800fe7a:	4603      	mov	r3, r0
 800fe7c:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800fe7e:	7bfb      	ldrb	r3, [r7, #15]
 800fe80:	2b00      	cmp	r3, #0
 800fe82:	d10a      	bne.n	800fe9a <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800fe84:	687b      	ldr	r3, [r7, #4]
 800fe86:	f203 3026 	addw	r0, r3, #806	; 0x326
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800fe90:	78fa      	ldrb	r2, [r7, #3]
 800fe92:	b292      	uxth	r2, r2
 800fe94:	4619      	mov	r1, r3
 800fe96:	f000 f919 	bl	80100cc <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800fe9a:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe9c:	4618      	mov	r0, r3
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}

0800fea4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800fea4:	b580      	push	{r7, lr}
 800fea6:	b086      	sub	sp, #24
 800fea8:	af02      	add	r7, sp, #8
 800feaa:	6078      	str	r0, [r7, #4]
 800feac:	460b      	mov	r3, r1
 800feae:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	331c      	adds	r3, #28
 800feb4:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800feb6:	887b      	ldrh	r3, [r7, #2]
 800feb8:	9300      	str	r3, [sp, #0]
 800feba:	68bb      	ldr	r3, [r7, #8]
 800febc:	f44f 7200 	mov.w	r2, #512	; 0x200
 800fec0:	2100      	movs	r1, #0
 800fec2:	6878      	ldr	r0, [r7, #4]
 800fec4:	f000 f83d 	bl	800ff42 <USBH_GetDescriptor>
 800fec8:	4603      	mov	r3, r0
 800feca:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800fecc:	7bfb      	ldrb	r3, [r7, #15]
 800fece:	2b00      	cmp	r3, #0
 800fed0:	d107      	bne.n	800fee2 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800fed2:	887b      	ldrh	r3, [r7, #2]
 800fed4:	461a      	mov	r2, r3
 800fed6:	68b9      	ldr	r1, [r7, #8]
 800fed8:	6878      	ldr	r0, [r7, #4]
 800feda:	f000 f987 	bl	80101ec <USBH_ParseCfgDesc>
 800fede:	4603      	mov	r3, r0
 800fee0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fee2:	7bfb      	ldrb	r3, [r7, #15]
}
 800fee4:	4618      	mov	r0, r3
 800fee6:	3710      	adds	r7, #16
 800fee8:	46bd      	mov	sp, r7
 800feea:	bd80      	pop	{r7, pc}

0800feec <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 800feec:	b580      	push	{r7, lr}
 800feee:	b088      	sub	sp, #32
 800fef0:	af02      	add	r7, sp, #8
 800fef2:	60f8      	str	r0, [r7, #12]
 800fef4:	607a      	str	r2, [r7, #4]
 800fef6:	461a      	mov	r2, r3
 800fef8:	460b      	mov	r3, r1
 800fefa:	72fb      	strb	r3, [r7, #11]
 800fefc:	4613      	mov	r3, r2
 800fefe:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 800ff00:	7afb      	ldrb	r3, [r7, #11]
 800ff02:	b29b      	uxth	r3, r3
 800ff04:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800ff08:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800ff0a:	68fb      	ldr	r3, [r7, #12]
 800ff0c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ff10:	893b      	ldrh	r3, [r7, #8]
 800ff12:	9300      	str	r3, [sp, #0]
 800ff14:	460b      	mov	r3, r1
 800ff16:	2100      	movs	r1, #0
 800ff18:	68f8      	ldr	r0, [r7, #12]
 800ff1a:	f000 f812 	bl	800ff42 <USBH_GetDescriptor>
 800ff1e:	4603      	mov	r3, r0
 800ff20:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800ff22:	7dfb      	ldrb	r3, [r7, #23]
 800ff24:	2b00      	cmp	r3, #0
 800ff26:	d107      	bne.n	800ff38 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ff2e:	893a      	ldrh	r2, [r7, #8]
 800ff30:	6879      	ldr	r1, [r7, #4]
 800ff32:	4618      	mov	r0, r3
 800ff34:	f000 fafe 	bl	8010534 <USBH_ParseStringDesc>
  }

  return status;
 800ff38:	7dfb      	ldrb	r3, [r7, #23]
}
 800ff3a:	4618      	mov	r0, r3
 800ff3c:	3718      	adds	r7, #24
 800ff3e:	46bd      	mov	sp, r7
 800ff40:	bd80      	pop	{r7, pc}

0800ff42 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800ff42:	b580      	push	{r7, lr}
 800ff44:	b084      	sub	sp, #16
 800ff46:	af00      	add	r7, sp, #0
 800ff48:	60f8      	str	r0, [r7, #12]
 800ff4a:	607b      	str	r3, [r7, #4]
 800ff4c:	460b      	mov	r3, r1
 800ff4e:	72fb      	strb	r3, [r7, #11]
 800ff50:	4613      	mov	r3, r2
 800ff52:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800ff54:	68fb      	ldr	r3, [r7, #12]
 800ff56:	789b      	ldrb	r3, [r3, #2]
 800ff58:	2b01      	cmp	r3, #1
 800ff5a:	d11c      	bne.n	800ff96 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800ff5c:	7afb      	ldrb	r3, [r7, #11]
 800ff5e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ff62:	b2da      	uxtb	r2, r3
 800ff64:	68fb      	ldr	r3, [r7, #12]
 800ff66:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	2206      	movs	r2, #6
 800ff6c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	893a      	ldrh	r2, [r7, #8]
 800ff72:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800ff74:	893b      	ldrh	r3, [r7, #8]
 800ff76:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ff7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ff7e:	d104      	bne.n	800ff8a <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	f240 4209 	movw	r2, #1033	; 0x409
 800ff86:	829a      	strh	r2, [r3, #20]
 800ff88:	e002      	b.n	800ff90 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	2200      	movs	r2, #0
 800ff8e:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800ff90:	68fb      	ldr	r3, [r7, #12]
 800ff92:	8b3a      	ldrh	r2, [r7, #24]
 800ff94:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800ff96:	8b3b      	ldrh	r3, [r7, #24]
 800ff98:	461a      	mov	r2, r3
 800ff9a:	6879      	ldr	r1, [r7, #4]
 800ff9c:	68f8      	ldr	r0, [r7, #12]
 800ff9e:	f000 fb17 	bl	80105d0 <USBH_CtlReq>
 800ffa2:	4603      	mov	r3, r0
}
 800ffa4:	4618      	mov	r0, r3
 800ffa6:	3710      	adds	r7, #16
 800ffa8:	46bd      	mov	sp, r7
 800ffaa:	bd80      	pop	{r7, pc}

0800ffac <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b082      	sub	sp, #8
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	789b      	ldrb	r3, [r3, #2]
 800ffbc:	2b01      	cmp	r3, #1
 800ffbe:	d10f      	bne.n	800ffe0 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	2205      	movs	r2, #5
 800ffca:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800ffcc:	78fb      	ldrb	r3, [r7, #3]
 800ffce:	b29a      	uxth	r2, r3
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	2200      	movs	r2, #0
 800ffde:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800ffe0:	2200      	movs	r2, #0
 800ffe2:	2100      	movs	r1, #0
 800ffe4:	6878      	ldr	r0, [r7, #4]
 800ffe6:	f000 faf3 	bl	80105d0 <USBH_CtlReq>
 800ffea:	4603      	mov	r3, r0
}
 800ffec:	4618      	mov	r0, r3
 800ffee:	3708      	adds	r7, #8
 800fff0:	46bd      	mov	sp, r7
 800fff2:	bd80      	pop	{r7, pc}

0800fff4 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800fff4:	b580      	push	{r7, lr}
 800fff6:	b082      	sub	sp, #8
 800fff8:	af00      	add	r7, sp, #0
 800fffa:	6078      	str	r0, [r7, #4]
 800fffc:	460b      	mov	r3, r1
 800fffe:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010000:	687b      	ldr	r3, [r7, #4]
 8010002:	789b      	ldrb	r3, [r3, #2]
 8010004:	2b01      	cmp	r3, #1
 8010006:	d10e      	bne.n	8010026 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010008:	687b      	ldr	r3, [r7, #4]
 801000a:	2200      	movs	r2, #0
 801000c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801000e:	687b      	ldr	r3, [r7, #4]
 8010010:	2209      	movs	r2, #9
 8010012:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	887a      	ldrh	r2, [r7, #2]
 8010018:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2200      	movs	r2, #0
 801001e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	2200      	movs	r2, #0
 8010024:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010026:	2200      	movs	r2, #0
 8010028:	2100      	movs	r1, #0
 801002a:	6878      	ldr	r0, [r7, #4]
 801002c:	f000 fad0 	bl	80105d0 <USBH_CtlReq>
 8010030:	4603      	mov	r3, r0
}
 8010032:	4618      	mov	r0, r3
 8010034:	3708      	adds	r7, #8
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b082      	sub	sp, #8
 801003e:	af00      	add	r7, sp, #0
 8010040:	6078      	str	r0, [r7, #4]
 8010042:	460b      	mov	r3, r1
 8010044:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	789b      	ldrb	r3, [r3, #2]
 801004a:	2b01      	cmp	r3, #1
 801004c:	d10f      	bne.n	801006e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801004e:	687b      	ldr	r3, [r7, #4]
 8010050:	2200      	movs	r2, #0
 8010052:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010054:	687b      	ldr	r3, [r7, #4]
 8010056:	2203      	movs	r2, #3
 8010058:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801005a:	78fb      	ldrb	r3, [r7, #3]
 801005c:	b29a      	uxth	r2, r3
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	2200      	movs	r2, #0
 8010066:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801006e:	2200      	movs	r2, #0
 8010070:	2100      	movs	r1, #0
 8010072:	6878      	ldr	r0, [r7, #4]
 8010074:	f000 faac 	bl	80105d0 <USBH_CtlReq>
 8010078:	4603      	mov	r3, r0
}
 801007a:	4618      	mov	r0, r3
 801007c:	3708      	adds	r7, #8
 801007e:	46bd      	mov	sp, r7
 8010080:	bd80      	pop	{r7, pc}

08010082 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8010082:	b580      	push	{r7, lr}
 8010084:	b082      	sub	sp, #8
 8010086:	af00      	add	r7, sp, #0
 8010088:	6078      	str	r0, [r7, #4]
 801008a:	460b      	mov	r3, r1
 801008c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	789b      	ldrb	r3, [r3, #2]
 8010092:	2b01      	cmp	r3, #1
 8010094:	d10f      	bne.n	80100b6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	2202      	movs	r2, #2
 801009a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	2201      	movs	r2, #1
 80100a0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	2200      	movs	r2, #0
 80100a6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80100a8:	78fb      	ldrb	r3, [r7, #3]
 80100aa:	b29a      	uxth	r2, r3
 80100ac:	687b      	ldr	r3, [r7, #4]
 80100ae:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2200      	movs	r2, #0
 80100b4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80100b6:	2200      	movs	r2, #0
 80100b8:	2100      	movs	r1, #0
 80100ba:	6878      	ldr	r0, [r7, #4]
 80100bc:	f000 fa88 	bl	80105d0 <USBH_CtlReq>
 80100c0:	4603      	mov	r3, r0
}
 80100c2:	4618      	mov	r0, r3
 80100c4:	3708      	adds	r7, #8
 80100c6:	46bd      	mov	sp, r7
 80100c8:	bd80      	pop	{r7, pc}
	...

080100cc <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 80100cc:	b480      	push	{r7}
 80100ce:	b085      	sub	sp, #20
 80100d0:	af00      	add	r7, sp, #0
 80100d2:	60f8      	str	r0, [r7, #12]
 80100d4:	60b9      	str	r1, [r7, #8]
 80100d6:	4613      	mov	r3, r2
 80100d8:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80100da:	68bb      	ldr	r3, [r7, #8]
 80100dc:	781a      	ldrb	r2, [r3, #0]
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 80100e2:	68bb      	ldr	r3, [r7, #8]
 80100e4:	785a      	ldrb	r2, [r3, #1]
 80100e6:	68fb      	ldr	r3, [r7, #12]
 80100e8:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	3302      	adds	r3, #2
 80100ee:	781b      	ldrb	r3, [r3, #0]
 80100f0:	b29a      	uxth	r2, r3
 80100f2:	68bb      	ldr	r3, [r7, #8]
 80100f4:	3303      	adds	r3, #3
 80100f6:	781b      	ldrb	r3, [r3, #0]
 80100f8:	b29b      	uxth	r3, r3
 80100fa:	021b      	lsls	r3, r3, #8
 80100fc:	b29b      	uxth	r3, r3
 80100fe:	4313      	orrs	r3, r2
 8010100:	b29a      	uxth	r2, r3
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	791a      	ldrb	r2, [r3, #4]
 801010a:	68fb      	ldr	r3, [r7, #12]
 801010c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 801010e:	68bb      	ldr	r3, [r7, #8]
 8010110:	795a      	ldrb	r2, [r3, #5]
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	799a      	ldrb	r2, [r3, #6]
 801011a:	68fb      	ldr	r3, [r7, #12]
 801011c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 801011e:	68bb      	ldr	r3, [r7, #8]
 8010120:	79da      	ldrb	r2, [r3, #7]
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8010126:	68fb      	ldr	r3, [r7, #12]
 8010128:	79db      	ldrb	r3, [r3, #7]
 801012a:	2b20      	cmp	r3, #32
 801012c:	dc0e      	bgt.n	801014c <USBH_ParseDevDesc+0x80>
 801012e:	2b08      	cmp	r3, #8
 8010130:	db13      	blt.n	801015a <USBH_ParseDevDesc+0x8e>
 8010132:	3b08      	subs	r3, #8
 8010134:	2201      	movs	r2, #1
 8010136:	409a      	lsls	r2, r3
 8010138:	4b2b      	ldr	r3, [pc, #172]	; (80101e8 <USBH_ParseDevDesc+0x11c>)
 801013a:	4013      	ands	r3, r2
 801013c:	2b00      	cmp	r3, #0
 801013e:	bf14      	ite	ne
 8010140:	2301      	movne	r3, #1
 8010142:	2300      	moveq	r3, #0
 8010144:	b2db      	uxtb	r3, r3
 8010146:	2b00      	cmp	r3, #0
 8010148:	d102      	bne.n	8010150 <USBH_ParseDevDesc+0x84>
 801014a:	e006      	b.n	801015a <USBH_ParseDevDesc+0x8e>
 801014c:	2b40      	cmp	r3, #64	; 0x40
 801014e:	d104      	bne.n	801015a <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8010150:	68fb      	ldr	r3, [r7, #12]
 8010152:	79da      	ldrb	r2, [r3, #7]
 8010154:	68fb      	ldr	r3, [r7, #12]
 8010156:	71da      	strb	r2, [r3, #7]
      break;
 8010158:	e003      	b.n	8010162 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2240      	movs	r2, #64	; 0x40
 801015e:	71da      	strb	r2, [r3, #7]
      break;
 8010160:	bf00      	nop
  }

  if (length > 8U)
 8010162:	88fb      	ldrh	r3, [r7, #6]
 8010164:	2b08      	cmp	r3, #8
 8010166:	d939      	bls.n	80101dc <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8010168:	68bb      	ldr	r3, [r7, #8]
 801016a:	3308      	adds	r3, #8
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	b29a      	uxth	r2, r3
 8010170:	68bb      	ldr	r3, [r7, #8]
 8010172:	3309      	adds	r3, #9
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	b29b      	uxth	r3, r3
 8010178:	021b      	lsls	r3, r3, #8
 801017a:	b29b      	uxth	r3, r3
 801017c:	4313      	orrs	r3, r2
 801017e:	b29a      	uxth	r2, r3
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8010184:	68bb      	ldr	r3, [r7, #8]
 8010186:	330a      	adds	r3, #10
 8010188:	781b      	ldrb	r3, [r3, #0]
 801018a:	b29a      	uxth	r2, r3
 801018c:	68bb      	ldr	r3, [r7, #8]
 801018e:	330b      	adds	r3, #11
 8010190:	781b      	ldrb	r3, [r3, #0]
 8010192:	b29b      	uxth	r3, r3
 8010194:	021b      	lsls	r3, r3, #8
 8010196:	b29b      	uxth	r3, r3
 8010198:	4313      	orrs	r3, r2
 801019a:	b29a      	uxth	r2, r3
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	330c      	adds	r3, #12
 80101a4:	781b      	ldrb	r3, [r3, #0]
 80101a6:	b29a      	uxth	r2, r3
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	330d      	adds	r3, #13
 80101ac:	781b      	ldrb	r3, [r3, #0]
 80101ae:	b29b      	uxth	r3, r3
 80101b0:	021b      	lsls	r3, r3, #8
 80101b2:	b29b      	uxth	r3, r3
 80101b4:	4313      	orrs	r3, r2
 80101b6:	b29a      	uxth	r2, r3
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80101bc:	68bb      	ldr	r3, [r7, #8]
 80101be:	7b9a      	ldrb	r2, [r3, #14]
 80101c0:	68fb      	ldr	r3, [r7, #12]
 80101c2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80101c4:	68bb      	ldr	r3, [r7, #8]
 80101c6:	7bda      	ldrb	r2, [r3, #15]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80101cc:	68bb      	ldr	r3, [r7, #8]
 80101ce:	7c1a      	ldrb	r2, [r3, #16]
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80101d4:	68bb      	ldr	r3, [r7, #8]
 80101d6:	7c5a      	ldrb	r2, [r3, #17]
 80101d8:	68fb      	ldr	r3, [r7, #12]
 80101da:	745a      	strb	r2, [r3, #17]
  }
}
 80101dc:	bf00      	nop
 80101de:	3714      	adds	r7, #20
 80101e0:	46bd      	mov	sp, r7
 80101e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e6:	4770      	bx	lr
 80101e8:	01000101 	.word	0x01000101

080101ec <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80101ec:	b580      	push	{r7, lr}
 80101ee:	b08c      	sub	sp, #48	; 0x30
 80101f0:	af00      	add	r7, sp, #0
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	4613      	mov	r3, r2
 80101f8:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80101fa:	68fb      	ldr	r3, [r7, #12]
 80101fc:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010200:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010202:	2300      	movs	r3, #0
 8010204:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 801020c:	2300      	movs	r3, #0
 801020e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8010212:	2300      	movs	r3, #0
 8010214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010218:	68bb      	ldr	r3, [r7, #8]
 801021a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 801021c:	68bb      	ldr	r3, [r7, #8]
 801021e:	781a      	ldrb	r2, [r3, #0]
 8010220:	6a3b      	ldr	r3, [r7, #32]
 8010222:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8010224:	68bb      	ldr	r3, [r7, #8]
 8010226:	785a      	ldrb	r2, [r3, #1]
 8010228:	6a3b      	ldr	r3, [r7, #32]
 801022a:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 801022c:	68bb      	ldr	r3, [r7, #8]
 801022e:	3302      	adds	r3, #2
 8010230:	781b      	ldrb	r3, [r3, #0]
 8010232:	b29a      	uxth	r2, r3
 8010234:	68bb      	ldr	r3, [r7, #8]
 8010236:	3303      	adds	r3, #3
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	b29b      	uxth	r3, r3
 801023c:	021b      	lsls	r3, r3, #8
 801023e:	b29b      	uxth	r3, r3
 8010240:	4313      	orrs	r3, r2
 8010242:	b29b      	uxth	r3, r3
 8010244:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010248:	bf28      	it	cs
 801024a:	f44f 7380 	movcs.w	r3, #256	; 0x100
 801024e:	b29a      	uxth	r2, r3
 8010250:	6a3b      	ldr	r3, [r7, #32]
 8010252:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8010254:	68bb      	ldr	r3, [r7, #8]
 8010256:	791a      	ldrb	r2, [r3, #4]
 8010258:	6a3b      	ldr	r3, [r7, #32]
 801025a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 801025c:	68bb      	ldr	r3, [r7, #8]
 801025e:	795a      	ldrb	r2, [r3, #5]
 8010260:	6a3b      	ldr	r3, [r7, #32]
 8010262:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8010264:	68bb      	ldr	r3, [r7, #8]
 8010266:	799a      	ldrb	r2, [r3, #6]
 8010268:	6a3b      	ldr	r3, [r7, #32]
 801026a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 801026c:	68bb      	ldr	r3, [r7, #8]
 801026e:	79da      	ldrb	r2, [r3, #7]
 8010270:	6a3b      	ldr	r3, [r7, #32]
 8010272:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8010274:	68bb      	ldr	r3, [r7, #8]
 8010276:	7a1a      	ldrb	r2, [r3, #8]
 8010278:	6a3b      	ldr	r3, [r7, #32]
 801027a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 801027c:	6a3b      	ldr	r3, [r7, #32]
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	2b09      	cmp	r3, #9
 8010282:	d002      	beq.n	801028a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8010284:	6a3b      	ldr	r3, [r7, #32]
 8010286:	2209      	movs	r2, #9
 8010288:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 801028a:	88fb      	ldrh	r3, [r7, #6]
 801028c:	2b09      	cmp	r3, #9
 801028e:	f240 8099 	bls.w	80103c4 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 8010292:	2309      	movs	r3, #9
 8010294:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8010296:	2300      	movs	r3, #0
 8010298:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 801029a:	e07d      	b.n	8010398 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801029c:	f107 0316 	add.w	r3, r7, #22
 80102a0:	4619      	mov	r1, r3
 80102a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102a4:	f000 f979 	bl	801059a <USBH_GetNextDesc>
 80102a8:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80102aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ac:	785b      	ldrb	r3, [r3, #1]
 80102ae:	2b04      	cmp	r3, #4
 80102b0:	d172      	bne.n	8010398 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80102b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	2b09      	cmp	r3, #9
 80102b8:	d002      	beq.n	80102c0 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80102ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102bc:	2209      	movs	r2, #9
 80102be:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80102c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80102c4:	221a      	movs	r2, #26
 80102c6:	fb02 f303 	mul.w	r3, r2, r3
 80102ca:	3308      	adds	r3, #8
 80102cc:	6a3a      	ldr	r2, [r7, #32]
 80102ce:	4413      	add	r3, r2
 80102d0:	3302      	adds	r3, #2
 80102d2:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80102d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80102d6:	69f8      	ldr	r0, [r7, #28]
 80102d8:	f000 f87a 	bl	80103d0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80102dc:	2300      	movs	r3, #0
 80102de:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80102e2:	2300      	movs	r3, #0
 80102e4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80102e6:	e03f      	b.n	8010368 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80102e8:	f107 0316 	add.w	r3, r7, #22
 80102ec:	4619      	mov	r1, r3
 80102ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80102f0:	f000 f953 	bl	801059a <USBH_GetNextDesc>
 80102f4:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80102f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102f8:	785b      	ldrb	r3, [r3, #1]
 80102fa:	2b05      	cmp	r3, #5
 80102fc:	d134      	bne.n	8010368 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 80102fe:	69fb      	ldr	r3, [r7, #28]
 8010300:	795b      	ldrb	r3, [r3, #5]
 8010302:	2b01      	cmp	r3, #1
 8010304:	d10f      	bne.n	8010326 <USBH_ParseCfgDesc+0x13a>
 8010306:	69fb      	ldr	r3, [r7, #28]
 8010308:	799b      	ldrb	r3, [r3, #6]
 801030a:	2b02      	cmp	r3, #2
 801030c:	d10b      	bne.n	8010326 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801030e:	69fb      	ldr	r3, [r7, #28]
 8010310:	79db      	ldrb	r3, [r3, #7]
 8010312:	2b00      	cmp	r3, #0
 8010314:	d10b      	bne.n	801032e <USBH_ParseCfgDesc+0x142>
 8010316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010318:	781b      	ldrb	r3, [r3, #0]
 801031a:	2b09      	cmp	r3, #9
 801031c:	d007      	beq.n	801032e <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 801031e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010320:	2209      	movs	r2, #9
 8010322:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010324:	e003      	b.n	801032e <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010326:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010328:	2207      	movs	r2, #7
 801032a:	701a      	strb	r2, [r3, #0]
 801032c:	e000      	b.n	8010330 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801032e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010330:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010334:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010338:	3201      	adds	r2, #1
 801033a:	00d2      	lsls	r2, r2, #3
 801033c:	211a      	movs	r1, #26
 801033e:	fb01 f303 	mul.w	r3, r1, r3
 8010342:	4413      	add	r3, r2
 8010344:	3308      	adds	r3, #8
 8010346:	6a3a      	ldr	r2, [r7, #32]
 8010348:	4413      	add	r3, r2
 801034a:	3304      	adds	r3, #4
 801034c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801034e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010350:	69b9      	ldr	r1, [r7, #24]
 8010352:	68f8      	ldr	r0, [r7, #12]
 8010354:	f000 f86c 	bl	8010430 <USBH_ParseEPDesc>
 8010358:	4603      	mov	r3, r0
 801035a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 801035e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010362:	3301      	adds	r3, #1
 8010364:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010368:	69fb      	ldr	r3, [r7, #28]
 801036a:	791b      	ldrb	r3, [r3, #4]
 801036c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010370:	429a      	cmp	r2, r3
 8010372:	d204      	bcs.n	801037e <USBH_ParseCfgDesc+0x192>
 8010374:	6a3b      	ldr	r3, [r7, #32]
 8010376:	885a      	ldrh	r2, [r3, #2]
 8010378:	8afb      	ldrh	r3, [r7, #22]
 801037a:	429a      	cmp	r2, r3
 801037c:	d8b4      	bhi.n	80102e8 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 801037e:	69fb      	ldr	r3, [r7, #28]
 8010380:	791b      	ldrb	r3, [r3, #4]
 8010382:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010386:	429a      	cmp	r2, r3
 8010388:	d201      	bcs.n	801038e <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 801038a:	2303      	movs	r3, #3
 801038c:	e01c      	b.n	80103c8 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 801038e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010392:	3301      	adds	r3, #1
 8010394:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8010398:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801039c:	2b01      	cmp	r3, #1
 801039e:	d805      	bhi.n	80103ac <USBH_ParseCfgDesc+0x1c0>
 80103a0:	6a3b      	ldr	r3, [r7, #32]
 80103a2:	885a      	ldrh	r2, [r3, #2]
 80103a4:	8afb      	ldrh	r3, [r7, #22]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	f63f af78 	bhi.w	801029c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80103ac:	6a3b      	ldr	r3, [r7, #32]
 80103ae:	791b      	ldrb	r3, [r3, #4]
 80103b0:	2b02      	cmp	r3, #2
 80103b2:	bf28      	it	cs
 80103b4:	2302      	movcs	r3, #2
 80103b6:	b2db      	uxtb	r3, r3
 80103b8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80103bc:	429a      	cmp	r2, r3
 80103be:	d201      	bcs.n	80103c4 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 80103c0:	2303      	movs	r3, #3
 80103c2:	e001      	b.n	80103c8 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 80103c4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3730      	adds	r7, #48	; 0x30
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 80103d0:	b480      	push	{r7}
 80103d2:	b083      	sub	sp, #12
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
 80103d8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 80103da:	683b      	ldr	r3, [r7, #0]
 80103dc:	781a      	ldrb	r2, [r3, #0]
 80103de:	687b      	ldr	r3, [r7, #4]
 80103e0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 80103e2:	683b      	ldr	r3, [r7, #0]
 80103e4:	785a      	ldrb	r2, [r3, #1]
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 80103ea:	683b      	ldr	r3, [r7, #0]
 80103ec:	789a      	ldrb	r2, [r3, #2]
 80103ee:	687b      	ldr	r3, [r7, #4]
 80103f0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 80103f2:	683b      	ldr	r3, [r7, #0]
 80103f4:	78da      	ldrb	r2, [r3, #3]
 80103f6:	687b      	ldr	r3, [r7, #4]
 80103f8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 80103fa:	683b      	ldr	r3, [r7, #0]
 80103fc:	791a      	ldrb	r2, [r3, #4]
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8010402:	683b      	ldr	r3, [r7, #0]
 8010404:	795a      	ldrb	r2, [r3, #5]
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 801040a:	683b      	ldr	r3, [r7, #0]
 801040c:	799a      	ldrb	r2, [r3, #6]
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8010412:	683b      	ldr	r3, [r7, #0]
 8010414:	79da      	ldrb	r2, [r3, #7]
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	7a1a      	ldrb	r2, [r3, #8]
 801041e:	687b      	ldr	r3, [r7, #4]
 8010420:	721a      	strb	r2, [r3, #8]
}
 8010422:	bf00      	nop
 8010424:	370c      	adds	r7, #12
 8010426:	46bd      	mov	sp, r7
 8010428:	f85d 7b04 	ldr.w	r7, [sp], #4
 801042c:	4770      	bx	lr
	...

08010430 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8010430:	b480      	push	{r7}
 8010432:	b087      	sub	sp, #28
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 801043c:	2300      	movs	r3, #0
 801043e:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8010440:	687b      	ldr	r3, [r7, #4]
 8010442:	781a      	ldrb	r2, [r3, #0]
 8010444:	68bb      	ldr	r3, [r7, #8]
 8010446:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	785a      	ldrb	r2, [r3, #1]
 801044c:	68bb      	ldr	r3, [r7, #8]
 801044e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	789a      	ldrb	r2, [r3, #2]
 8010454:	68bb      	ldr	r3, [r7, #8]
 8010456:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8010458:	687b      	ldr	r3, [r7, #4]
 801045a:	78da      	ldrb	r2, [r3, #3]
 801045c:	68bb      	ldr	r3, [r7, #8]
 801045e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	3304      	adds	r3, #4
 8010464:	781b      	ldrb	r3, [r3, #0]
 8010466:	b29a      	uxth	r2, r3
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	3305      	adds	r3, #5
 801046c:	781b      	ldrb	r3, [r3, #0]
 801046e:	b29b      	uxth	r3, r3
 8010470:	021b      	lsls	r3, r3, #8
 8010472:	b29b      	uxth	r3, r3
 8010474:	4313      	orrs	r3, r2
 8010476:	b29a      	uxth	r2, r3
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	799a      	ldrb	r2, [r3, #6]
 8010480:	68bb      	ldr	r3, [r7, #8]
 8010482:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 8010484:	68bb      	ldr	r3, [r7, #8]
 8010486:	889b      	ldrh	r3, [r3, #4]
 8010488:	2b00      	cmp	r3, #0
 801048a:	d102      	bne.n	8010492 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 801048c:	2303      	movs	r3, #3
 801048e:	75fb      	strb	r3, [r7, #23]
 8010490:	e00d      	b.n	80104ae <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	889a      	ldrh	r2, [r3, #4]
 8010496:	4b26      	ldr	r3, [pc, #152]	; (8010530 <USBH_ParseEPDesc+0x100>)
 8010498:	4013      	ands	r3, r2
 801049a:	b29a      	uxth	r2, r3
 801049c:	68bb      	ldr	r3, [r7, #8]
 801049e:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 80104a0:	68bb      	ldr	r3, [r7, #8]
 80104a2:	889b      	ldrh	r3, [r3, #4]
 80104a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80104a8:	b29a      	uxth	r2, r3
 80104aa:	68bb      	ldr	r3, [r7, #8]
 80104ac:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80104ae:	68fb      	ldr	r3, [r7, #12]
 80104b0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d116      	bne.n	80104e6 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80104b8:	68bb      	ldr	r3, [r7, #8]
 80104ba:	78db      	ldrb	r3, [r3, #3]
 80104bc:	f003 0303 	and.w	r3, r3, #3
 80104c0:	2b01      	cmp	r3, #1
 80104c2:	d005      	beq.n	80104d0 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80104c4:	68bb      	ldr	r3, [r7, #8]
 80104c6:	78db      	ldrb	r3, [r3, #3]
 80104c8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80104cc:	2b03      	cmp	r3, #3
 80104ce:	d127      	bne.n	8010520 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80104d0:	68bb      	ldr	r3, [r7, #8]
 80104d2:	799b      	ldrb	r3, [r3, #6]
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d003      	beq.n	80104e0 <USBH_ParseEPDesc+0xb0>
 80104d8:	68bb      	ldr	r3, [r7, #8]
 80104da:	799b      	ldrb	r3, [r3, #6]
 80104dc:	2b10      	cmp	r3, #16
 80104de:	d91f      	bls.n	8010520 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 80104e0:	2303      	movs	r3, #3
 80104e2:	75fb      	strb	r3, [r7, #23]
 80104e4:	e01c      	b.n	8010520 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 80104e6:	68bb      	ldr	r3, [r7, #8]
 80104e8:	78db      	ldrb	r3, [r3, #3]
 80104ea:	f003 0303 	and.w	r3, r3, #3
 80104ee:	2b01      	cmp	r3, #1
 80104f0:	d10a      	bne.n	8010508 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80104f2:	68bb      	ldr	r3, [r7, #8]
 80104f4:	799b      	ldrb	r3, [r3, #6]
 80104f6:	2b00      	cmp	r3, #0
 80104f8:	d003      	beq.n	8010502 <USBH_ParseEPDesc+0xd2>
 80104fa:	68bb      	ldr	r3, [r7, #8]
 80104fc:	799b      	ldrb	r3, [r3, #6]
 80104fe:	2b10      	cmp	r3, #16
 8010500:	d90e      	bls.n	8010520 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8010502:	2303      	movs	r3, #3
 8010504:	75fb      	strb	r3, [r7, #23]
 8010506:	e00b      	b.n	8010520 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010508:	68bb      	ldr	r3, [r7, #8]
 801050a:	78db      	ldrb	r3, [r3, #3]
 801050c:	f003 0303 	and.w	r3, r3, #3
 8010510:	2b03      	cmp	r3, #3
 8010512:	d105      	bne.n	8010520 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8010514:	68bb      	ldr	r3, [r7, #8]
 8010516:	799b      	ldrb	r3, [r3, #6]
 8010518:	2b00      	cmp	r3, #0
 801051a:	d101      	bne.n	8010520 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801051c:	2303      	movs	r3, #3
 801051e:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8010520:	7dfb      	ldrb	r3, [r7, #23]
}
 8010522:	4618      	mov	r0, r3
 8010524:	371c      	adds	r7, #28
 8010526:	46bd      	mov	sp, r7
 8010528:	f85d 7b04 	ldr.w	r7, [sp], #4
 801052c:	4770      	bx	lr
 801052e:	bf00      	nop
 8010530:	fffff800 	.word	0xfffff800

08010534 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010534:	b480      	push	{r7}
 8010536:	b087      	sub	sp, #28
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	4613      	mov	r3, r2
 8010540:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010542:	68fb      	ldr	r3, [r7, #12]
 8010544:	3301      	adds	r3, #1
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	2b03      	cmp	r3, #3
 801054a:	d120      	bne.n	801058e <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 801054c:	68fb      	ldr	r3, [r7, #12]
 801054e:	781b      	ldrb	r3, [r3, #0]
 8010550:	1e9a      	subs	r2, r3, #2
 8010552:	88fb      	ldrh	r3, [r7, #6]
 8010554:	4293      	cmp	r3, r2
 8010556:	bf28      	it	cs
 8010558:	4613      	movcs	r3, r2
 801055a:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 801055c:	68fb      	ldr	r3, [r7, #12]
 801055e:	3302      	adds	r3, #2
 8010560:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010562:	2300      	movs	r3, #0
 8010564:	82fb      	strh	r3, [r7, #22]
 8010566:	e00b      	b.n	8010580 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010568:	8afb      	ldrh	r3, [r7, #22]
 801056a:	68fa      	ldr	r2, [r7, #12]
 801056c:	4413      	add	r3, r2
 801056e:	781a      	ldrb	r2, [r3, #0]
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010574:	68bb      	ldr	r3, [r7, #8]
 8010576:	3301      	adds	r3, #1
 8010578:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 801057a:	8afb      	ldrh	r3, [r7, #22]
 801057c:	3302      	adds	r3, #2
 801057e:	82fb      	strh	r3, [r7, #22]
 8010580:	8afa      	ldrh	r2, [r7, #22]
 8010582:	8abb      	ldrh	r3, [r7, #20]
 8010584:	429a      	cmp	r2, r3
 8010586:	d3ef      	bcc.n	8010568 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	2200      	movs	r2, #0
 801058c:	701a      	strb	r2, [r3, #0]
  }
}
 801058e:	bf00      	nop
 8010590:	371c      	adds	r7, #28
 8010592:	46bd      	mov	sp, r7
 8010594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010598:	4770      	bx	lr

0801059a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801059a:	b480      	push	{r7}
 801059c:	b085      	sub	sp, #20
 801059e:	af00      	add	r7, sp, #0
 80105a0:	6078      	str	r0, [r7, #4]
 80105a2:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80105a4:	683b      	ldr	r3, [r7, #0]
 80105a6:	881a      	ldrh	r2, [r3, #0]
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	781b      	ldrb	r3, [r3, #0]
 80105ac:	b29b      	uxth	r3, r3
 80105ae:	4413      	add	r3, r2
 80105b0:	b29a      	uxth	r2, r3
 80105b2:	683b      	ldr	r3, [r7, #0]
 80105b4:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80105b6:	687b      	ldr	r3, [r7, #4]
 80105b8:	781b      	ldrb	r3, [r3, #0]
 80105ba:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80105bc:	687b      	ldr	r3, [r7, #4]
 80105be:	4413      	add	r3, r2
 80105c0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80105c2:	68fb      	ldr	r3, [r7, #12]
}
 80105c4:	4618      	mov	r0, r3
 80105c6:	3714      	adds	r7, #20
 80105c8:	46bd      	mov	sp, r7
 80105ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ce:	4770      	bx	lr

080105d0 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80105d0:	b580      	push	{r7, lr}
 80105d2:	b086      	sub	sp, #24
 80105d4:	af00      	add	r7, sp, #0
 80105d6:	60f8      	str	r0, [r7, #12]
 80105d8:	60b9      	str	r1, [r7, #8]
 80105da:	4613      	mov	r3, r2
 80105dc:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80105de:	2301      	movs	r3, #1
 80105e0:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	789b      	ldrb	r3, [r3, #2]
 80105e6:	2b01      	cmp	r3, #1
 80105e8:	d002      	beq.n	80105f0 <USBH_CtlReq+0x20>
 80105ea:	2b02      	cmp	r3, #2
 80105ec:	d00f      	beq.n	801060e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80105ee:	e027      	b.n	8010640 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80105f0:	68fb      	ldr	r3, [r7, #12]
 80105f2:	68ba      	ldr	r2, [r7, #8]
 80105f4:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80105f6:	68fb      	ldr	r3, [r7, #12]
 80105f8:	88fa      	ldrh	r2, [r7, #6]
 80105fa:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80105fc:	68fb      	ldr	r3, [r7, #12]
 80105fe:	2201      	movs	r2, #1
 8010600:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010602:	68fb      	ldr	r3, [r7, #12]
 8010604:	2202      	movs	r2, #2
 8010606:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010608:	2301      	movs	r3, #1
 801060a:	75fb      	strb	r3, [r7, #23]
      break;
 801060c:	e018      	b.n	8010640 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801060e:	68f8      	ldr	r0, [r7, #12]
 8010610:	f000 f81c 	bl	801064c <USBH_HandleControl>
 8010614:	4603      	mov	r3, r0
 8010616:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010618:	7dfb      	ldrb	r3, [r7, #23]
 801061a:	2b00      	cmp	r3, #0
 801061c:	d002      	beq.n	8010624 <USBH_CtlReq+0x54>
 801061e:	7dfb      	ldrb	r3, [r7, #23]
 8010620:	2b03      	cmp	r3, #3
 8010622:	d106      	bne.n	8010632 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010624:	68fb      	ldr	r3, [r7, #12]
 8010626:	2201      	movs	r2, #1
 8010628:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	2200      	movs	r2, #0
 801062e:	761a      	strb	r2, [r3, #24]
      break;
 8010630:	e005      	b.n	801063e <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010632:	7dfb      	ldrb	r3, [r7, #23]
 8010634:	2b02      	cmp	r3, #2
 8010636:	d102      	bne.n	801063e <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010638:	68fb      	ldr	r3, [r7, #12]
 801063a:	2201      	movs	r2, #1
 801063c:	709a      	strb	r2, [r3, #2]
      break;
 801063e:	bf00      	nop
  }
  return status;
 8010640:	7dfb      	ldrb	r3, [r7, #23]
}
 8010642:	4618      	mov	r0, r3
 8010644:	3718      	adds	r7, #24
 8010646:	46bd      	mov	sp, r7
 8010648:	bd80      	pop	{r7, pc}
	...

0801064c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 801064c:	b580      	push	{r7, lr}
 801064e:	b086      	sub	sp, #24
 8010650:	af02      	add	r7, sp, #8
 8010652:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010654:	2301      	movs	r3, #1
 8010656:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010658:	2300      	movs	r3, #0
 801065a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	7e1b      	ldrb	r3, [r3, #24]
 8010660:	3b01      	subs	r3, #1
 8010662:	2b0a      	cmp	r3, #10
 8010664:	f200 8156 	bhi.w	8010914 <USBH_HandleControl+0x2c8>
 8010668:	a201      	add	r2, pc, #4	; (adr r2, 8010670 <USBH_HandleControl+0x24>)
 801066a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801066e:	bf00      	nop
 8010670:	0801069d 	.word	0x0801069d
 8010674:	080106b7 	.word	0x080106b7
 8010678:	08010721 	.word	0x08010721
 801067c:	08010747 	.word	0x08010747
 8010680:	0801077f 	.word	0x0801077f
 8010684:	080107a9 	.word	0x080107a9
 8010688:	080107fb 	.word	0x080107fb
 801068c:	0801081d 	.word	0x0801081d
 8010690:	08010859 	.word	0x08010859
 8010694:	0801087f 	.word	0x0801087f
 8010698:	080108bd 	.word	0x080108bd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 801069c:	687b      	ldr	r3, [r7, #4]
 801069e:	f103 0110 	add.w	r1, r3, #16
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	795b      	ldrb	r3, [r3, #5]
 80106a6:	461a      	mov	r2, r3
 80106a8:	6878      	ldr	r0, [r7, #4]
 80106aa:	f000 f943 	bl	8010934 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80106ae:	687b      	ldr	r3, [r7, #4]
 80106b0:	2202      	movs	r2, #2
 80106b2:	761a      	strb	r2, [r3, #24]
      break;
 80106b4:	e139      	b.n	801092a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	795b      	ldrb	r3, [r3, #5]
 80106ba:	4619      	mov	r1, r3
 80106bc:	6878      	ldr	r0, [r7, #4]
 80106be:	f001 fa8d 	bl	8011bdc <USBH_LL_GetURBState>
 80106c2:	4603      	mov	r3, r0
 80106c4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80106c6:	7bbb      	ldrb	r3, [r7, #14]
 80106c8:	2b01      	cmp	r3, #1
 80106ca:	d11e      	bne.n	801070a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80106cc:	687b      	ldr	r3, [r7, #4]
 80106ce:	7c1b      	ldrb	r3, [r3, #16]
 80106d0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80106d4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	8adb      	ldrh	r3, [r3, #22]
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d00a      	beq.n	80106f4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80106de:	7b7b      	ldrb	r3, [r7, #13]
 80106e0:	2b80      	cmp	r3, #128	; 0x80
 80106e2:	d103      	bne.n	80106ec <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2203      	movs	r2, #3
 80106e8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80106ea:	e115      	b.n	8010918 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	2205      	movs	r2, #5
 80106f0:	761a      	strb	r2, [r3, #24]
      break;
 80106f2:	e111      	b.n	8010918 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80106f4:	7b7b      	ldrb	r3, [r7, #13]
 80106f6:	2b80      	cmp	r3, #128	; 0x80
 80106f8:	d103      	bne.n	8010702 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80106fa:	687b      	ldr	r3, [r7, #4]
 80106fc:	2209      	movs	r2, #9
 80106fe:	761a      	strb	r2, [r3, #24]
      break;
 8010700:	e10a      	b.n	8010918 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	2207      	movs	r2, #7
 8010706:	761a      	strb	r2, [r3, #24]
      break;
 8010708:	e106      	b.n	8010918 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 801070a:	7bbb      	ldrb	r3, [r7, #14]
 801070c:	2b04      	cmp	r3, #4
 801070e:	d003      	beq.n	8010718 <USBH_HandleControl+0xcc>
 8010710:	7bbb      	ldrb	r3, [r7, #14]
 8010712:	2b02      	cmp	r3, #2
 8010714:	f040 8100 	bne.w	8010918 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	220b      	movs	r2, #11
 801071c:	761a      	strb	r2, [r3, #24]
      break;
 801071e:	e0fb      	b.n	8010918 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010720:	687b      	ldr	r3, [r7, #4]
 8010722:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010726:	b29a      	uxth	r2, r3
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	6899      	ldr	r1, [r3, #8]
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	899a      	ldrh	r2, [r3, #12]
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	791b      	ldrb	r3, [r3, #4]
 8010738:	6878      	ldr	r0, [r7, #4]
 801073a:	f000 f93a 	bl	80109b2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	2204      	movs	r2, #4
 8010742:	761a      	strb	r2, [r3, #24]
      break;
 8010744:	e0f1      	b.n	801092a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	791b      	ldrb	r3, [r3, #4]
 801074a:	4619      	mov	r1, r3
 801074c:	6878      	ldr	r0, [r7, #4]
 801074e:	f001 fa45 	bl	8011bdc <USBH_LL_GetURBState>
 8010752:	4603      	mov	r3, r0
 8010754:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010756:	7bbb      	ldrb	r3, [r7, #14]
 8010758:	2b01      	cmp	r3, #1
 801075a:	d102      	bne.n	8010762 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2209      	movs	r2, #9
 8010760:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010762:	7bbb      	ldrb	r3, [r7, #14]
 8010764:	2b05      	cmp	r3, #5
 8010766:	d102      	bne.n	801076e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010768:	2303      	movs	r3, #3
 801076a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801076c:	e0d6      	b.n	801091c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 801076e:	7bbb      	ldrb	r3, [r7, #14]
 8010770:	2b04      	cmp	r3, #4
 8010772:	f040 80d3 	bne.w	801091c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	220b      	movs	r2, #11
 801077a:	761a      	strb	r2, [r3, #24]
      break;
 801077c:	e0ce      	b.n	801091c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 801077e:	687b      	ldr	r3, [r7, #4]
 8010780:	6899      	ldr	r1, [r3, #8]
 8010782:	687b      	ldr	r3, [r7, #4]
 8010784:	899a      	ldrh	r2, [r3, #12]
 8010786:	687b      	ldr	r3, [r7, #4]
 8010788:	795b      	ldrb	r3, [r3, #5]
 801078a:	2001      	movs	r0, #1
 801078c:	9000      	str	r0, [sp, #0]
 801078e:	6878      	ldr	r0, [r7, #4]
 8010790:	f000 f8ea 	bl	8010968 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801079a:	b29a      	uxth	r2, r3
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80107a0:	687b      	ldr	r3, [r7, #4]
 80107a2:	2206      	movs	r2, #6
 80107a4:	761a      	strb	r2, [r3, #24]
      break;
 80107a6:	e0c0      	b.n	801092a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80107a8:	687b      	ldr	r3, [r7, #4]
 80107aa:	795b      	ldrb	r3, [r3, #5]
 80107ac:	4619      	mov	r1, r3
 80107ae:	6878      	ldr	r0, [r7, #4]
 80107b0:	f001 fa14 	bl	8011bdc <USBH_LL_GetURBState>
 80107b4:	4603      	mov	r3, r0
 80107b6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80107b8:	7bbb      	ldrb	r3, [r7, #14]
 80107ba:	2b01      	cmp	r3, #1
 80107bc:	d103      	bne.n	80107c6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80107be:	687b      	ldr	r3, [r7, #4]
 80107c0:	2207      	movs	r2, #7
 80107c2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80107c4:	e0ac      	b.n	8010920 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80107c6:	7bbb      	ldrb	r3, [r7, #14]
 80107c8:	2b05      	cmp	r3, #5
 80107ca:	d105      	bne.n	80107d8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80107cc:	687b      	ldr	r3, [r7, #4]
 80107ce:	220c      	movs	r2, #12
 80107d0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80107d2:	2303      	movs	r3, #3
 80107d4:	73fb      	strb	r3, [r7, #15]
      break;
 80107d6:	e0a3      	b.n	8010920 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80107d8:	7bbb      	ldrb	r3, [r7, #14]
 80107da:	2b02      	cmp	r3, #2
 80107dc:	d103      	bne.n	80107e6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	2205      	movs	r2, #5
 80107e2:	761a      	strb	r2, [r3, #24]
      break;
 80107e4:	e09c      	b.n	8010920 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80107e6:	7bbb      	ldrb	r3, [r7, #14]
 80107e8:	2b04      	cmp	r3, #4
 80107ea:	f040 8099 	bne.w	8010920 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80107ee:	687b      	ldr	r3, [r7, #4]
 80107f0:	220b      	movs	r2, #11
 80107f2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80107f4:	2302      	movs	r3, #2
 80107f6:	73fb      	strb	r3, [r7, #15]
      break;
 80107f8:	e092      	b.n	8010920 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	791b      	ldrb	r3, [r3, #4]
 80107fe:	2200      	movs	r2, #0
 8010800:	2100      	movs	r1, #0
 8010802:	6878      	ldr	r0, [r7, #4]
 8010804:	f000 f8d5 	bl	80109b2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010808:	687b      	ldr	r3, [r7, #4]
 801080a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801080e:	b29a      	uxth	r2, r3
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010814:	687b      	ldr	r3, [r7, #4]
 8010816:	2208      	movs	r2, #8
 8010818:	761a      	strb	r2, [r3, #24]

      break;
 801081a:	e086      	b.n	801092a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	791b      	ldrb	r3, [r3, #4]
 8010820:	4619      	mov	r1, r3
 8010822:	6878      	ldr	r0, [r7, #4]
 8010824:	f001 f9da 	bl	8011bdc <USBH_LL_GetURBState>
 8010828:	4603      	mov	r3, r0
 801082a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 801082c:	7bbb      	ldrb	r3, [r7, #14]
 801082e:	2b01      	cmp	r3, #1
 8010830:	d105      	bne.n	801083e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	220d      	movs	r2, #13
 8010836:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010838:	2300      	movs	r3, #0
 801083a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801083c:	e072      	b.n	8010924 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 801083e:	7bbb      	ldrb	r3, [r7, #14]
 8010840:	2b04      	cmp	r3, #4
 8010842:	d103      	bne.n	801084c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	220b      	movs	r2, #11
 8010848:	761a      	strb	r2, [r3, #24]
      break;
 801084a:	e06b      	b.n	8010924 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 801084c:	7bbb      	ldrb	r3, [r7, #14]
 801084e:	2b05      	cmp	r3, #5
 8010850:	d168      	bne.n	8010924 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8010852:	2303      	movs	r3, #3
 8010854:	73fb      	strb	r3, [r7, #15]
      break;
 8010856:	e065      	b.n	8010924 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	795b      	ldrb	r3, [r3, #5]
 801085c:	2201      	movs	r2, #1
 801085e:	9200      	str	r2, [sp, #0]
 8010860:	2200      	movs	r2, #0
 8010862:	2100      	movs	r1, #0
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 f87f 	bl	8010968 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010870:	b29a      	uxth	r2, r3
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	220a      	movs	r2, #10
 801087a:	761a      	strb	r2, [r3, #24]
      break;
 801087c:	e055      	b.n	801092a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 801087e:	687b      	ldr	r3, [r7, #4]
 8010880:	795b      	ldrb	r3, [r3, #5]
 8010882:	4619      	mov	r1, r3
 8010884:	6878      	ldr	r0, [r7, #4]
 8010886:	f001 f9a9 	bl	8011bdc <USBH_LL_GetURBState>
 801088a:	4603      	mov	r3, r0
 801088c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 801088e:	7bbb      	ldrb	r3, [r7, #14]
 8010890:	2b01      	cmp	r3, #1
 8010892:	d105      	bne.n	80108a0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010894:	2300      	movs	r3, #0
 8010896:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	220d      	movs	r2, #13
 801089c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 801089e:	e043      	b.n	8010928 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80108a0:	7bbb      	ldrb	r3, [r7, #14]
 80108a2:	2b02      	cmp	r3, #2
 80108a4:	d103      	bne.n	80108ae <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	2209      	movs	r2, #9
 80108aa:	761a      	strb	r2, [r3, #24]
      break;
 80108ac:	e03c      	b.n	8010928 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80108ae:	7bbb      	ldrb	r3, [r7, #14]
 80108b0:	2b04      	cmp	r3, #4
 80108b2:	d139      	bne.n	8010928 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	220b      	movs	r2, #11
 80108b8:	761a      	strb	r2, [r3, #24]
      break;
 80108ba:	e035      	b.n	8010928 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	7e5b      	ldrb	r3, [r3, #25]
 80108c0:	3301      	adds	r3, #1
 80108c2:	b2da      	uxtb	r2, r3
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	765a      	strb	r2, [r3, #25]
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	7e5b      	ldrb	r3, [r3, #25]
 80108cc:	2b02      	cmp	r3, #2
 80108ce:	d806      	bhi.n	80108de <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	2201      	movs	r2, #1
 80108d4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80108d6:	687b      	ldr	r3, [r7, #4]
 80108d8:	2201      	movs	r2, #1
 80108da:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80108dc:	e025      	b.n	801092a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80108e4:	2106      	movs	r1, #6
 80108e6:	6878      	ldr	r0, [r7, #4]
 80108e8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2200      	movs	r2, #0
 80108ee:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	795b      	ldrb	r3, [r3, #5]
 80108f4:	4619      	mov	r1, r3
 80108f6:	6878      	ldr	r0, [r7, #4]
 80108f8:	f000 f90c 	bl	8010b14 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	791b      	ldrb	r3, [r3, #4]
 8010900:	4619      	mov	r1, r3
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f000 f906 	bl	8010b14 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010908:	687b      	ldr	r3, [r7, #4]
 801090a:	2200      	movs	r2, #0
 801090c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 801090e:	2302      	movs	r3, #2
 8010910:	73fb      	strb	r3, [r7, #15]
      break;
 8010912:	e00a      	b.n	801092a <USBH_HandleControl+0x2de>

    default:
      break;
 8010914:	bf00      	nop
 8010916:	e008      	b.n	801092a <USBH_HandleControl+0x2de>
      break;
 8010918:	bf00      	nop
 801091a:	e006      	b.n	801092a <USBH_HandleControl+0x2de>
      break;
 801091c:	bf00      	nop
 801091e:	e004      	b.n	801092a <USBH_HandleControl+0x2de>
      break;
 8010920:	bf00      	nop
 8010922:	e002      	b.n	801092a <USBH_HandleControl+0x2de>
      break;
 8010924:	bf00      	nop
 8010926:	e000      	b.n	801092a <USBH_HandleControl+0x2de>
      break;
 8010928:	bf00      	nop
  }

  return status;
 801092a:	7bfb      	ldrb	r3, [r7, #15]
}
 801092c:	4618      	mov	r0, r3
 801092e:	3710      	adds	r7, #16
 8010930:	46bd      	mov	sp, r7
 8010932:	bd80      	pop	{r7, pc}

08010934 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010934:	b580      	push	{r7, lr}
 8010936:	b088      	sub	sp, #32
 8010938:	af04      	add	r7, sp, #16
 801093a:	60f8      	str	r0, [r7, #12]
 801093c:	60b9      	str	r1, [r7, #8]
 801093e:	4613      	mov	r3, r2
 8010940:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010942:	79f9      	ldrb	r1, [r7, #7]
 8010944:	2300      	movs	r3, #0
 8010946:	9303      	str	r3, [sp, #12]
 8010948:	2308      	movs	r3, #8
 801094a:	9302      	str	r3, [sp, #8]
 801094c:	68bb      	ldr	r3, [r7, #8]
 801094e:	9301      	str	r3, [sp, #4]
 8010950:	2300      	movs	r3, #0
 8010952:	9300      	str	r3, [sp, #0]
 8010954:	2300      	movs	r3, #0
 8010956:	2200      	movs	r2, #0
 8010958:	68f8      	ldr	r0, [r7, #12]
 801095a:	f001 f90e 	bl	8011b7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 801095e:	2300      	movs	r3, #0
}
 8010960:	4618      	mov	r0, r3
 8010962:	3710      	adds	r7, #16
 8010964:	46bd      	mov	sp, r7
 8010966:	bd80      	pop	{r7, pc}

08010968 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010968:	b580      	push	{r7, lr}
 801096a:	b088      	sub	sp, #32
 801096c:	af04      	add	r7, sp, #16
 801096e:	60f8      	str	r0, [r7, #12]
 8010970:	60b9      	str	r1, [r7, #8]
 8010972:	4611      	mov	r1, r2
 8010974:	461a      	mov	r2, r3
 8010976:	460b      	mov	r3, r1
 8010978:	80fb      	strh	r3, [r7, #6]
 801097a:	4613      	mov	r3, r2
 801097c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010984:	2b00      	cmp	r3, #0
 8010986:	d001      	beq.n	801098c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010988:	2300      	movs	r3, #0
 801098a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 801098c:	7979      	ldrb	r1, [r7, #5]
 801098e:	7e3b      	ldrb	r3, [r7, #24]
 8010990:	9303      	str	r3, [sp, #12]
 8010992:	88fb      	ldrh	r3, [r7, #6]
 8010994:	9302      	str	r3, [sp, #8]
 8010996:	68bb      	ldr	r3, [r7, #8]
 8010998:	9301      	str	r3, [sp, #4]
 801099a:	2301      	movs	r3, #1
 801099c:	9300      	str	r3, [sp, #0]
 801099e:	2300      	movs	r3, #0
 80109a0:	2200      	movs	r2, #0
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f001 f8e9 	bl	8011b7a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80109a8:	2300      	movs	r3, #0
}
 80109aa:	4618      	mov	r0, r3
 80109ac:	3710      	adds	r7, #16
 80109ae:	46bd      	mov	sp, r7
 80109b0:	bd80      	pop	{r7, pc}

080109b2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80109b2:	b580      	push	{r7, lr}
 80109b4:	b088      	sub	sp, #32
 80109b6:	af04      	add	r7, sp, #16
 80109b8:	60f8      	str	r0, [r7, #12]
 80109ba:	60b9      	str	r1, [r7, #8]
 80109bc:	4611      	mov	r1, r2
 80109be:	461a      	mov	r2, r3
 80109c0:	460b      	mov	r3, r1
 80109c2:	80fb      	strh	r3, [r7, #6]
 80109c4:	4613      	mov	r3, r2
 80109c6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80109c8:	7979      	ldrb	r1, [r7, #5]
 80109ca:	2300      	movs	r3, #0
 80109cc:	9303      	str	r3, [sp, #12]
 80109ce:	88fb      	ldrh	r3, [r7, #6]
 80109d0:	9302      	str	r3, [sp, #8]
 80109d2:	68bb      	ldr	r3, [r7, #8]
 80109d4:	9301      	str	r3, [sp, #4]
 80109d6:	2301      	movs	r3, #1
 80109d8:	9300      	str	r3, [sp, #0]
 80109da:	2300      	movs	r3, #0
 80109dc:	2201      	movs	r2, #1
 80109de:	68f8      	ldr	r0, [r7, #12]
 80109e0:	f001 f8cb 	bl	8011b7a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80109e4:	2300      	movs	r3, #0

}
 80109e6:	4618      	mov	r0, r3
 80109e8:	3710      	adds	r7, #16
 80109ea:	46bd      	mov	sp, r7
 80109ec:	bd80      	pop	{r7, pc}

080109ee <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80109ee:	b580      	push	{r7, lr}
 80109f0:	b088      	sub	sp, #32
 80109f2:	af04      	add	r7, sp, #16
 80109f4:	60f8      	str	r0, [r7, #12]
 80109f6:	60b9      	str	r1, [r7, #8]
 80109f8:	4611      	mov	r1, r2
 80109fa:	461a      	mov	r2, r3
 80109fc:	460b      	mov	r3, r1
 80109fe:	80fb      	strh	r3, [r7, #6]
 8010a00:	4613      	mov	r3, r2
 8010a02:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d001      	beq.n	8010a12 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010a0e:	2300      	movs	r3, #0
 8010a10:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010a12:	7979      	ldrb	r1, [r7, #5]
 8010a14:	7e3b      	ldrb	r3, [r7, #24]
 8010a16:	9303      	str	r3, [sp, #12]
 8010a18:	88fb      	ldrh	r3, [r7, #6]
 8010a1a:	9302      	str	r3, [sp, #8]
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	9301      	str	r3, [sp, #4]
 8010a20:	2301      	movs	r3, #1
 8010a22:	9300      	str	r3, [sp, #0]
 8010a24:	2302      	movs	r3, #2
 8010a26:	2200      	movs	r2, #0
 8010a28:	68f8      	ldr	r0, [r7, #12]
 8010a2a:	f001 f8a6 	bl	8011b7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010a2e:	2300      	movs	r3, #0
}
 8010a30:	4618      	mov	r0, r3
 8010a32:	3710      	adds	r7, #16
 8010a34:	46bd      	mov	sp, r7
 8010a36:	bd80      	pop	{r7, pc}

08010a38 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010a38:	b580      	push	{r7, lr}
 8010a3a:	b088      	sub	sp, #32
 8010a3c:	af04      	add	r7, sp, #16
 8010a3e:	60f8      	str	r0, [r7, #12]
 8010a40:	60b9      	str	r1, [r7, #8]
 8010a42:	4611      	mov	r1, r2
 8010a44:	461a      	mov	r2, r3
 8010a46:	460b      	mov	r3, r1
 8010a48:	80fb      	strh	r3, [r7, #6]
 8010a4a:	4613      	mov	r3, r2
 8010a4c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010a4e:	7979      	ldrb	r1, [r7, #5]
 8010a50:	2300      	movs	r3, #0
 8010a52:	9303      	str	r3, [sp, #12]
 8010a54:	88fb      	ldrh	r3, [r7, #6]
 8010a56:	9302      	str	r3, [sp, #8]
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	9301      	str	r3, [sp, #4]
 8010a5c:	2301      	movs	r3, #1
 8010a5e:	9300      	str	r3, [sp, #0]
 8010a60:	2302      	movs	r3, #2
 8010a62:	2201      	movs	r2, #1
 8010a64:	68f8      	ldr	r0, [r7, #12]
 8010a66:	f001 f888 	bl	8011b7a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010a6a:	2300      	movs	r3, #0
}
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	3710      	adds	r7, #16
 8010a70:	46bd      	mov	sp, r7
 8010a72:	bd80      	pop	{r7, pc}

08010a74 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b086      	sub	sp, #24
 8010a78:	af04      	add	r7, sp, #16
 8010a7a:	6078      	str	r0, [r7, #4]
 8010a7c:	4608      	mov	r0, r1
 8010a7e:	4611      	mov	r1, r2
 8010a80:	461a      	mov	r2, r3
 8010a82:	4603      	mov	r3, r0
 8010a84:	70fb      	strb	r3, [r7, #3]
 8010a86:	460b      	mov	r3, r1
 8010a88:	70bb      	strb	r3, [r7, #2]
 8010a8a:	4613      	mov	r3, r2
 8010a8c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010a8e:	7878      	ldrb	r0, [r7, #1]
 8010a90:	78ba      	ldrb	r2, [r7, #2]
 8010a92:	78f9      	ldrb	r1, [r7, #3]
 8010a94:	8b3b      	ldrh	r3, [r7, #24]
 8010a96:	9302      	str	r3, [sp, #8]
 8010a98:	7d3b      	ldrb	r3, [r7, #20]
 8010a9a:	9301      	str	r3, [sp, #4]
 8010a9c:	7c3b      	ldrb	r3, [r7, #16]
 8010a9e:	9300      	str	r3, [sp, #0]
 8010aa0:	4603      	mov	r3, r0
 8010aa2:	6878      	ldr	r0, [r7, #4]
 8010aa4:	f001 f81b 	bl	8011ade <USBH_LL_OpenPipe>

  return USBH_OK;
 8010aa8:	2300      	movs	r3, #0
}
 8010aaa:	4618      	mov	r0, r3
 8010aac:	3708      	adds	r7, #8
 8010aae:	46bd      	mov	sp, r7
 8010ab0:	bd80      	pop	{r7, pc}

08010ab2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010ab2:	b580      	push	{r7, lr}
 8010ab4:	b082      	sub	sp, #8
 8010ab6:	af00      	add	r7, sp, #0
 8010ab8:	6078      	str	r0, [r7, #4]
 8010aba:	460b      	mov	r3, r1
 8010abc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010abe:	78fb      	ldrb	r3, [r7, #3]
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	6878      	ldr	r0, [r7, #4]
 8010ac4:	f001 f83a 	bl	8011b3c <USBH_LL_ClosePipe>

  return USBH_OK;
 8010ac8:	2300      	movs	r3, #0
}
 8010aca:	4618      	mov	r0, r3
 8010acc:	3708      	adds	r7, #8
 8010ace:	46bd      	mov	sp, r7
 8010ad0:	bd80      	pop	{r7, pc}

08010ad2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010ad2:	b580      	push	{r7, lr}
 8010ad4:	b084      	sub	sp, #16
 8010ad6:	af00      	add	r7, sp, #0
 8010ad8:	6078      	str	r0, [r7, #4]
 8010ada:	460b      	mov	r3, r1
 8010adc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010ade:	6878      	ldr	r0, [r7, #4]
 8010ae0:	f000 f836 	bl	8010b50 <USBH_GetFreePipe>
 8010ae4:	4603      	mov	r3, r0
 8010ae6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010ae8:	89fb      	ldrh	r3, [r7, #14]
 8010aea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010aee:	4293      	cmp	r3, r2
 8010af0:	d00a      	beq.n	8010b08 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010af2:	78fa      	ldrb	r2, [r7, #3]
 8010af4:	89fb      	ldrh	r3, [r7, #14]
 8010af6:	f003 030f 	and.w	r3, r3, #15
 8010afa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010afe:	6879      	ldr	r1, [r7, #4]
 8010b00:	33e0      	adds	r3, #224	; 0xe0
 8010b02:	009b      	lsls	r3, r3, #2
 8010b04:	440b      	add	r3, r1
 8010b06:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010b08:	89fb      	ldrh	r3, [r7, #14]
 8010b0a:	b2db      	uxtb	r3, r3
}
 8010b0c:	4618      	mov	r0, r3
 8010b0e:	3710      	adds	r7, #16
 8010b10:	46bd      	mov	sp, r7
 8010b12:	bd80      	pop	{r7, pc}

08010b14 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010b14:	b480      	push	{r7}
 8010b16:	b083      	sub	sp, #12
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	6078      	str	r0, [r7, #4]
 8010b1c:	460b      	mov	r3, r1
 8010b1e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010b20:	78fb      	ldrb	r3, [r7, #3]
 8010b22:	2b0f      	cmp	r3, #15
 8010b24:	d80d      	bhi.n	8010b42 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010b26:	78fb      	ldrb	r3, [r7, #3]
 8010b28:	687a      	ldr	r2, [r7, #4]
 8010b2a:	33e0      	adds	r3, #224	; 0xe0
 8010b2c:	009b      	lsls	r3, r3, #2
 8010b2e:	4413      	add	r3, r2
 8010b30:	685a      	ldr	r2, [r3, #4]
 8010b32:	78fb      	ldrb	r3, [r7, #3]
 8010b34:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010b38:	6879      	ldr	r1, [r7, #4]
 8010b3a:	33e0      	adds	r3, #224	; 0xe0
 8010b3c:	009b      	lsls	r3, r3, #2
 8010b3e:	440b      	add	r3, r1
 8010b40:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010b42:	2300      	movs	r3, #0
}
 8010b44:	4618      	mov	r0, r3
 8010b46:	370c      	adds	r7, #12
 8010b48:	46bd      	mov	sp, r7
 8010b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b4e:	4770      	bx	lr

08010b50 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010b50:	b480      	push	{r7}
 8010b52:	b085      	sub	sp, #20
 8010b54:	af00      	add	r7, sp, #0
 8010b56:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010b58:	2300      	movs	r3, #0
 8010b5a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010b5c:	2300      	movs	r3, #0
 8010b5e:	73fb      	strb	r3, [r7, #15]
 8010b60:	e00f      	b.n	8010b82 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010b62:	7bfb      	ldrb	r3, [r7, #15]
 8010b64:	687a      	ldr	r2, [r7, #4]
 8010b66:	33e0      	adds	r3, #224	; 0xe0
 8010b68:	009b      	lsls	r3, r3, #2
 8010b6a:	4413      	add	r3, r2
 8010b6c:	685b      	ldr	r3, [r3, #4]
 8010b6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010b72:	2b00      	cmp	r3, #0
 8010b74:	d102      	bne.n	8010b7c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010b76:	7bfb      	ldrb	r3, [r7, #15]
 8010b78:	b29b      	uxth	r3, r3
 8010b7a:	e007      	b.n	8010b8c <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010b7c:	7bfb      	ldrb	r3, [r7, #15]
 8010b7e:	3301      	adds	r3, #1
 8010b80:	73fb      	strb	r3, [r7, #15]
 8010b82:	7bfb      	ldrb	r3, [r7, #15]
 8010b84:	2b0f      	cmp	r3, #15
 8010b86:	d9ec      	bls.n	8010b62 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010b88:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	3714      	adds	r7, #20
 8010b90:	46bd      	mov	sp, r7
 8010b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b96:	4770      	bx	lr

08010b98 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010b98:	b480      	push	{r7}
 8010b9a:	b087      	sub	sp, #28
 8010b9c:	af00      	add	r7, sp, #0
 8010b9e:	60f8      	str	r0, [r7, #12]
 8010ba0:	60b9      	str	r1, [r7, #8]
 8010ba2:	4613      	mov	r3, r2
 8010ba4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010ba6:	2301      	movs	r3, #1
 8010ba8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010baa:	2300      	movs	r3, #0
 8010bac:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010bae:	4b1f      	ldr	r3, [pc, #124]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010bb0:	7a5b      	ldrb	r3, [r3, #9]
 8010bb2:	b2db      	uxtb	r3, r3
 8010bb4:	2b00      	cmp	r3, #0
 8010bb6:	d131      	bne.n	8010c1c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010bb8:	4b1c      	ldr	r3, [pc, #112]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010bba:	7a5b      	ldrb	r3, [r3, #9]
 8010bbc:	b2db      	uxtb	r3, r3
 8010bbe:	461a      	mov	r2, r3
 8010bc0:	4b1a      	ldr	r3, [pc, #104]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010bc2:	2100      	movs	r1, #0
 8010bc4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010bc6:	4b19      	ldr	r3, [pc, #100]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010bc8:	7a5b      	ldrb	r3, [r3, #9]
 8010bca:	b2db      	uxtb	r3, r3
 8010bcc:	4a17      	ldr	r2, [pc, #92]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010bce:	009b      	lsls	r3, r3, #2
 8010bd0:	4413      	add	r3, r2
 8010bd2:	68fa      	ldr	r2, [r7, #12]
 8010bd4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010bd6:	4b15      	ldr	r3, [pc, #84]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010bd8:	7a5b      	ldrb	r3, [r3, #9]
 8010bda:	b2db      	uxtb	r3, r3
 8010bdc:	461a      	mov	r2, r3
 8010bde:	4b13      	ldr	r3, [pc, #76]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010be0:	4413      	add	r3, r2
 8010be2:	79fa      	ldrb	r2, [r7, #7]
 8010be4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010be6:	4b11      	ldr	r3, [pc, #68]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010be8:	7a5b      	ldrb	r3, [r3, #9]
 8010bea:	b2db      	uxtb	r3, r3
 8010bec:	1c5a      	adds	r2, r3, #1
 8010bee:	b2d1      	uxtb	r1, r2
 8010bf0:	4a0e      	ldr	r2, [pc, #56]	; (8010c2c <FATFS_LinkDriverEx+0x94>)
 8010bf2:	7251      	strb	r1, [r2, #9]
 8010bf4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010bf6:	7dbb      	ldrb	r3, [r7, #22]
 8010bf8:	3330      	adds	r3, #48	; 0x30
 8010bfa:	b2da      	uxtb	r2, r3
 8010bfc:	68bb      	ldr	r3, [r7, #8]
 8010bfe:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010c00:	68bb      	ldr	r3, [r7, #8]
 8010c02:	3301      	adds	r3, #1
 8010c04:	223a      	movs	r2, #58	; 0x3a
 8010c06:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010c08:	68bb      	ldr	r3, [r7, #8]
 8010c0a:	3302      	adds	r3, #2
 8010c0c:	222f      	movs	r2, #47	; 0x2f
 8010c0e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010c10:	68bb      	ldr	r3, [r7, #8]
 8010c12:	3303      	adds	r3, #3
 8010c14:	2200      	movs	r2, #0
 8010c16:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010c18:	2300      	movs	r3, #0
 8010c1a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c1e:	4618      	mov	r0, r3
 8010c20:	371c      	adds	r7, #28
 8010c22:	46bd      	mov	sp, r7
 8010c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c28:	4770      	bx	lr
 8010c2a:	bf00      	nop
 8010c2c:	20000688 	.word	0x20000688

08010c30 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010c30:	b580      	push	{r7, lr}
 8010c32:	b082      	sub	sp, #8
 8010c34:	af00      	add	r7, sp, #0
 8010c36:	6078      	str	r0, [r7, #4]
 8010c38:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010c3a:	2200      	movs	r2, #0
 8010c3c:	6839      	ldr	r1, [r7, #0]
 8010c3e:	6878      	ldr	r0, [r7, #4]
 8010c40:	f7ff ffaa 	bl	8010b98 <FATFS_LinkDriverEx>
 8010c44:	4603      	mov	r3, r0
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3708      	adds	r7, #8
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
	...

08010c50 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8010c50:	b580      	push	{r7, lr}
 8010c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8010c54:	2201      	movs	r2, #1
 8010c56:	4912      	ldr	r1, [pc, #72]	; (8010ca0 <MX_USB_DEVICE_Init+0x50>)
 8010c58:	4812      	ldr	r0, [pc, #72]	; (8010ca4 <MX_USB_DEVICE_Init+0x54>)
 8010c5a:	f7fc fc99 	bl	800d590 <USBD_Init>
 8010c5e:	4603      	mov	r3, r0
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d001      	beq.n	8010c68 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8010c64:	f7f0 fcea 	bl	800163c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8010c68:	490f      	ldr	r1, [pc, #60]	; (8010ca8 <MX_USB_DEVICE_Init+0x58>)
 8010c6a:	480e      	ldr	r0, [pc, #56]	; (8010ca4 <MX_USB_DEVICE_Init+0x54>)
 8010c6c:	f7fc fcc0 	bl	800d5f0 <USBD_RegisterClass>
 8010c70:	4603      	mov	r3, r0
 8010c72:	2b00      	cmp	r3, #0
 8010c74:	d001      	beq.n	8010c7a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8010c76:	f7f0 fce1 	bl	800163c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8010c7a:	490c      	ldr	r1, [pc, #48]	; (8010cac <MX_USB_DEVICE_Init+0x5c>)
 8010c7c:	4809      	ldr	r0, [pc, #36]	; (8010ca4 <MX_USB_DEVICE_Init+0x54>)
 8010c7e:	f7fc fbf7 	bl	800d470 <USBD_CDC_RegisterInterface>
 8010c82:	4603      	mov	r3, r0
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d001      	beq.n	8010c8c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8010c88:	f7f0 fcd8 	bl	800163c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8010c8c:	4805      	ldr	r0, [pc, #20]	; (8010ca4 <MX_USB_DEVICE_Init+0x54>)
 8010c8e:	f7fc fce5 	bl	800d65c <USBD_Start>
 8010c92:	4603      	mov	r3, r0
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	d001      	beq.n	8010c9c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8010c98:	f7f0 fcd0 	bl	800163c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8010c9c:	bf00      	nop
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	200000cc 	.word	0x200000cc
 8010ca4:	20000694 	.word	0x20000694
 8010ca8:	20000018 	.word	0x20000018
 8010cac:	200000b8 	.word	0x200000b8

08010cb0 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8010cb0:	b580      	push	{r7, lr}
 8010cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8010cb4:	2200      	movs	r2, #0
 8010cb6:	4905      	ldr	r1, [pc, #20]	; (8010ccc <CDC_Init_HS+0x1c>)
 8010cb8:	4805      	ldr	r0, [pc, #20]	; (8010cd0 <CDC_Init_HS+0x20>)
 8010cba:	f7fc fbf3 	bl	800d4a4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8010cbe:	4905      	ldr	r1, [pc, #20]	; (8010cd4 <CDC_Init_HS+0x24>)
 8010cc0:	4803      	ldr	r0, [pc, #12]	; (8010cd0 <CDC_Init_HS+0x20>)
 8010cc2:	f7fc fc11 	bl	800d4e8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8010cc6:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8010cc8:	4618      	mov	r0, r3
 8010cca:	bd80      	pop	{r7, pc}
 8010ccc:	20001170 	.word	0x20001170
 8010cd0:	20000694 	.word	0x20000694
 8010cd4:	20000970 	.word	0x20000970

08010cd8 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8010cd8:	b480      	push	{r7}
 8010cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8010cdc:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8010cde:	4618      	mov	r0, r3
 8010ce0:	46bd      	mov	sp, r7
 8010ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ce6:	4770      	bx	lr

08010ce8 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8010ce8:	b480      	push	{r7}
 8010cea:	b083      	sub	sp, #12
 8010cec:	af00      	add	r7, sp, #0
 8010cee:	4603      	mov	r3, r0
 8010cf0:	6039      	str	r1, [r7, #0]
 8010cf2:	71fb      	strb	r3, [r7, #7]
 8010cf4:	4613      	mov	r3, r2
 8010cf6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8010cf8:	79fb      	ldrb	r3, [r7, #7]
 8010cfa:	2b23      	cmp	r3, #35	; 0x23
 8010cfc:	d84a      	bhi.n	8010d94 <CDC_Control_HS+0xac>
 8010cfe:	a201      	add	r2, pc, #4	; (adr r2, 8010d04 <CDC_Control_HS+0x1c>)
 8010d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010d04:	08010d95 	.word	0x08010d95
 8010d08:	08010d95 	.word	0x08010d95
 8010d0c:	08010d95 	.word	0x08010d95
 8010d10:	08010d95 	.word	0x08010d95
 8010d14:	08010d95 	.word	0x08010d95
 8010d18:	08010d95 	.word	0x08010d95
 8010d1c:	08010d95 	.word	0x08010d95
 8010d20:	08010d95 	.word	0x08010d95
 8010d24:	08010d95 	.word	0x08010d95
 8010d28:	08010d95 	.word	0x08010d95
 8010d2c:	08010d95 	.word	0x08010d95
 8010d30:	08010d95 	.word	0x08010d95
 8010d34:	08010d95 	.word	0x08010d95
 8010d38:	08010d95 	.word	0x08010d95
 8010d3c:	08010d95 	.word	0x08010d95
 8010d40:	08010d95 	.word	0x08010d95
 8010d44:	08010d95 	.word	0x08010d95
 8010d48:	08010d95 	.word	0x08010d95
 8010d4c:	08010d95 	.word	0x08010d95
 8010d50:	08010d95 	.word	0x08010d95
 8010d54:	08010d95 	.word	0x08010d95
 8010d58:	08010d95 	.word	0x08010d95
 8010d5c:	08010d95 	.word	0x08010d95
 8010d60:	08010d95 	.word	0x08010d95
 8010d64:	08010d95 	.word	0x08010d95
 8010d68:	08010d95 	.word	0x08010d95
 8010d6c:	08010d95 	.word	0x08010d95
 8010d70:	08010d95 	.word	0x08010d95
 8010d74:	08010d95 	.word	0x08010d95
 8010d78:	08010d95 	.word	0x08010d95
 8010d7c:	08010d95 	.word	0x08010d95
 8010d80:	08010d95 	.word	0x08010d95
 8010d84:	08010d95 	.word	0x08010d95
 8010d88:	08010d95 	.word	0x08010d95
 8010d8c:	08010d95 	.word	0x08010d95
 8010d90:	08010d95 	.word	0x08010d95
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8010d94:	bf00      	nop
  }

  return (USBD_OK);
 8010d96:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8010d98:	4618      	mov	r0, r3
 8010d9a:	370c      	adds	r7, #12
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010da2:	4770      	bx	lr

08010da4 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b082      	sub	sp, #8
 8010da8:	af00      	add	r7, sp, #0
 8010daa:	6078      	str	r0, [r7, #4]
 8010dac:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8010dae:	6879      	ldr	r1, [r7, #4]
 8010db0:	4805      	ldr	r0, [pc, #20]	; (8010dc8 <CDC_Receive_HS+0x24>)
 8010db2:	f7fc fb99 	bl	800d4e8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8010db6:	4804      	ldr	r0, [pc, #16]	; (8010dc8 <CDC_Receive_HS+0x24>)
 8010db8:	f7fc fbb4 	bl	800d524 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8010dbc:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8010dbe:	4618      	mov	r0, r3
 8010dc0:	3708      	adds	r7, #8
 8010dc2:	46bd      	mov	sp, r7
 8010dc4:	bd80      	pop	{r7, pc}
 8010dc6:	bf00      	nop
 8010dc8:	20000694 	.word	0x20000694

08010dcc <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8010dcc:	b480      	push	{r7}
 8010dce:	b087      	sub	sp, #28
 8010dd0:	af00      	add	r7, sp, #0
 8010dd2:	60f8      	str	r0, [r7, #12]
 8010dd4:	60b9      	str	r1, [r7, #8]
 8010dd6:	4613      	mov	r3, r2
 8010dd8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8010dda:	2300      	movs	r3, #0
 8010ddc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8010dde:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8010de2:	4618      	mov	r0, r3
 8010de4:	371c      	adds	r7, #28
 8010de6:	46bd      	mov	sp, r7
 8010de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010dec:	4770      	bx	lr
	...

08010df0 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010df0:	b480      	push	{r7}
 8010df2:	b083      	sub	sp, #12
 8010df4:	af00      	add	r7, sp, #0
 8010df6:	4603      	mov	r3, r0
 8010df8:	6039      	str	r1, [r7, #0]
 8010dfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8010dfc:	683b      	ldr	r3, [r7, #0]
 8010dfe:	2212      	movs	r2, #18
 8010e00:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8010e02:	4b03      	ldr	r3, [pc, #12]	; (8010e10 <USBD_HS_DeviceDescriptor+0x20>)
}
 8010e04:	4618      	mov	r0, r3
 8010e06:	370c      	adds	r7, #12
 8010e08:	46bd      	mov	sp, r7
 8010e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e0e:	4770      	bx	lr
 8010e10:	200000ec 	.word	0x200000ec

08010e14 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e14:	b480      	push	{r7}
 8010e16:	b083      	sub	sp, #12
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	4603      	mov	r3, r0
 8010e1c:	6039      	str	r1, [r7, #0]
 8010e1e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8010e20:	683b      	ldr	r3, [r7, #0]
 8010e22:	2204      	movs	r2, #4
 8010e24:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8010e26:	4b03      	ldr	r3, [pc, #12]	; (8010e34 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8010e28:	4618      	mov	r0, r3
 8010e2a:	370c      	adds	r7, #12
 8010e2c:	46bd      	mov	sp, r7
 8010e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e32:	4770      	bx	lr
 8010e34:	2000010c 	.word	0x2000010c

08010e38 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e38:	b580      	push	{r7, lr}
 8010e3a:	b082      	sub	sp, #8
 8010e3c:	af00      	add	r7, sp, #0
 8010e3e:	4603      	mov	r3, r0
 8010e40:	6039      	str	r1, [r7, #0]
 8010e42:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010e44:	79fb      	ldrb	r3, [r7, #7]
 8010e46:	2b00      	cmp	r3, #0
 8010e48:	d105      	bne.n	8010e56 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010e4a:	683a      	ldr	r2, [r7, #0]
 8010e4c:	4907      	ldr	r1, [pc, #28]	; (8010e6c <USBD_HS_ProductStrDescriptor+0x34>)
 8010e4e:	4808      	ldr	r0, [pc, #32]	; (8010e70 <USBD_HS_ProductStrDescriptor+0x38>)
 8010e50:	f7fd fdda 	bl	800ea08 <USBD_GetString>
 8010e54:	e004      	b.n	8010e60 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8010e56:	683a      	ldr	r2, [r7, #0]
 8010e58:	4904      	ldr	r1, [pc, #16]	; (8010e6c <USBD_HS_ProductStrDescriptor+0x34>)
 8010e5a:	4805      	ldr	r0, [pc, #20]	; (8010e70 <USBD_HS_ProductStrDescriptor+0x38>)
 8010e5c:	f7fd fdd4 	bl	800ea08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010e60:	4b02      	ldr	r3, [pc, #8]	; (8010e6c <USBD_HS_ProductStrDescriptor+0x34>)
}
 8010e62:	4618      	mov	r0, r3
 8010e64:	3708      	adds	r7, #8
 8010e66:	46bd      	mov	sp, r7
 8010e68:	bd80      	pop	{r7, pc}
 8010e6a:	bf00      	nop
 8010e6c:	20001970 	.word	0x20001970
 8010e70:	080147f4 	.word	0x080147f4

08010e74 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e74:	b580      	push	{r7, lr}
 8010e76:	b082      	sub	sp, #8
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	4603      	mov	r3, r0
 8010e7c:	6039      	str	r1, [r7, #0]
 8010e7e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8010e80:	683a      	ldr	r2, [r7, #0]
 8010e82:	4904      	ldr	r1, [pc, #16]	; (8010e94 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8010e84:	4804      	ldr	r0, [pc, #16]	; (8010e98 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8010e86:	f7fd fdbf 	bl	800ea08 <USBD_GetString>
  return USBD_StrDesc;
 8010e8a:	4b02      	ldr	r3, [pc, #8]	; (8010e94 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8010e8c:	4618      	mov	r0, r3
 8010e8e:	3708      	adds	r7, #8
 8010e90:	46bd      	mov	sp, r7
 8010e92:	bd80      	pop	{r7, pc}
 8010e94:	20001970 	.word	0x20001970
 8010e98:	0801480c 	.word	0x0801480c

08010e9c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	6039      	str	r1, [r7, #0]
 8010ea6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	221a      	movs	r2, #26
 8010eac:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8010eae:	f000 f855 	bl	8010f5c <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8010eb2:	4b02      	ldr	r3, [pc, #8]	; (8010ebc <USBD_HS_SerialStrDescriptor+0x20>)
}
 8010eb4:	4618      	mov	r0, r3
 8010eb6:	3708      	adds	r7, #8
 8010eb8:	46bd      	mov	sp, r7
 8010eba:	bd80      	pop	{r7, pc}
 8010ebc:	20000110 	.word	0x20000110

08010ec0 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b082      	sub	sp, #8
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	4603      	mov	r3, r0
 8010ec8:	6039      	str	r1, [r7, #0]
 8010eca:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8010ecc:	79fb      	ldrb	r3, [r7, #7]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d105      	bne.n	8010ede <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010ed2:	683a      	ldr	r2, [r7, #0]
 8010ed4:	4907      	ldr	r1, [pc, #28]	; (8010ef4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010ed6:	4808      	ldr	r0, [pc, #32]	; (8010ef8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010ed8:	f7fd fd96 	bl	800ea08 <USBD_GetString>
 8010edc:	e004      	b.n	8010ee8 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8010ede:	683a      	ldr	r2, [r7, #0]
 8010ee0:	4904      	ldr	r1, [pc, #16]	; (8010ef4 <USBD_HS_ConfigStrDescriptor+0x34>)
 8010ee2:	4805      	ldr	r0, [pc, #20]	; (8010ef8 <USBD_HS_ConfigStrDescriptor+0x38>)
 8010ee4:	f7fd fd90 	bl	800ea08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010ee8:	4b02      	ldr	r3, [pc, #8]	; (8010ef4 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8010eea:	4618      	mov	r0, r3
 8010eec:	3708      	adds	r7, #8
 8010eee:	46bd      	mov	sp, r7
 8010ef0:	bd80      	pop	{r7, pc}
 8010ef2:	bf00      	nop
 8010ef4:	20001970 	.word	0x20001970
 8010ef8:	08014820 	.word	0x08014820

08010efc <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010efc:	b580      	push	{r7, lr}
 8010efe:	b082      	sub	sp, #8
 8010f00:	af00      	add	r7, sp, #0
 8010f02:	4603      	mov	r3, r0
 8010f04:	6039      	str	r1, [r7, #0]
 8010f06:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8010f08:	79fb      	ldrb	r3, [r7, #7]
 8010f0a:	2b00      	cmp	r3, #0
 8010f0c:	d105      	bne.n	8010f1a <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010f0e:	683a      	ldr	r2, [r7, #0]
 8010f10:	4907      	ldr	r1, [pc, #28]	; (8010f30 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010f12:	4808      	ldr	r0, [pc, #32]	; (8010f34 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010f14:	f7fd fd78 	bl	800ea08 <USBD_GetString>
 8010f18:	e004      	b.n	8010f24 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8010f1a:	683a      	ldr	r2, [r7, #0]
 8010f1c:	4904      	ldr	r1, [pc, #16]	; (8010f30 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8010f1e:	4805      	ldr	r0, [pc, #20]	; (8010f34 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8010f20:	f7fd fd72 	bl	800ea08 <USBD_GetString>
  }
  return USBD_StrDesc;
 8010f24:	4b02      	ldr	r3, [pc, #8]	; (8010f30 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8010f26:	4618      	mov	r0, r3
 8010f28:	3708      	adds	r7, #8
 8010f2a:	46bd      	mov	sp, r7
 8010f2c:	bd80      	pop	{r7, pc}
 8010f2e:	bf00      	nop
 8010f30:	20001970 	.word	0x20001970
 8010f34:	0801482c 	.word	0x0801482c

08010f38 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8010f38:	b480      	push	{r7}
 8010f3a:	b083      	sub	sp, #12
 8010f3c:	af00      	add	r7, sp, #0
 8010f3e:	4603      	mov	r3, r0
 8010f40:	6039      	str	r1, [r7, #0]
 8010f42:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8010f44:	683b      	ldr	r3, [r7, #0]
 8010f46:	220c      	movs	r2, #12
 8010f48:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8010f4a:	4b03      	ldr	r3, [pc, #12]	; (8010f58 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8010f4c:	4618      	mov	r0, r3
 8010f4e:	370c      	adds	r7, #12
 8010f50:	46bd      	mov	sp, r7
 8010f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f56:	4770      	bx	lr
 8010f58:	20000100 	.word	0x20000100

08010f5c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8010f5c:	b580      	push	{r7, lr}
 8010f5e:	b084      	sub	sp, #16
 8010f60:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8010f62:	4b0f      	ldr	r3, [pc, #60]	; (8010fa0 <Get_SerialNum+0x44>)
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8010f68:	4b0e      	ldr	r3, [pc, #56]	; (8010fa4 <Get_SerialNum+0x48>)
 8010f6a:	681b      	ldr	r3, [r3, #0]
 8010f6c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8010f6e:	4b0e      	ldr	r3, [pc, #56]	; (8010fa8 <Get_SerialNum+0x4c>)
 8010f70:	681b      	ldr	r3, [r3, #0]
 8010f72:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8010f74:	68fa      	ldr	r2, [r7, #12]
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	4413      	add	r3, r2
 8010f7a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8010f7c:	68fb      	ldr	r3, [r7, #12]
 8010f7e:	2b00      	cmp	r3, #0
 8010f80:	d009      	beq.n	8010f96 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8010f82:	2208      	movs	r2, #8
 8010f84:	4909      	ldr	r1, [pc, #36]	; (8010fac <Get_SerialNum+0x50>)
 8010f86:	68f8      	ldr	r0, [r7, #12]
 8010f88:	f000 f814 	bl	8010fb4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8010f8c:	2204      	movs	r2, #4
 8010f8e:	4908      	ldr	r1, [pc, #32]	; (8010fb0 <Get_SerialNum+0x54>)
 8010f90:	68b8      	ldr	r0, [r7, #8]
 8010f92:	f000 f80f 	bl	8010fb4 <IntToUnicode>
  }
}
 8010f96:	bf00      	nop
 8010f98:	3710      	adds	r7, #16
 8010f9a:	46bd      	mov	sp, r7
 8010f9c:	bd80      	pop	{r7, pc}
 8010f9e:	bf00      	nop
 8010fa0:	1ff0f420 	.word	0x1ff0f420
 8010fa4:	1ff0f424 	.word	0x1ff0f424
 8010fa8:	1ff0f428 	.word	0x1ff0f428
 8010fac:	20000112 	.word	0x20000112
 8010fb0:	20000122 	.word	0x20000122

08010fb4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8010fb4:	b480      	push	{r7}
 8010fb6:	b087      	sub	sp, #28
 8010fb8:	af00      	add	r7, sp, #0
 8010fba:	60f8      	str	r0, [r7, #12]
 8010fbc:	60b9      	str	r1, [r7, #8]
 8010fbe:	4613      	mov	r3, r2
 8010fc0:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8010fc2:	2300      	movs	r3, #0
 8010fc4:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	75fb      	strb	r3, [r7, #23]
 8010fca:	e027      	b.n	801101c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	0f1b      	lsrs	r3, r3, #28
 8010fd0:	2b09      	cmp	r3, #9
 8010fd2:	d80b      	bhi.n	8010fec <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8010fd4:	68fb      	ldr	r3, [r7, #12]
 8010fd6:	0f1b      	lsrs	r3, r3, #28
 8010fd8:	b2da      	uxtb	r2, r3
 8010fda:	7dfb      	ldrb	r3, [r7, #23]
 8010fdc:	005b      	lsls	r3, r3, #1
 8010fde:	4619      	mov	r1, r3
 8010fe0:	68bb      	ldr	r3, [r7, #8]
 8010fe2:	440b      	add	r3, r1
 8010fe4:	3230      	adds	r2, #48	; 0x30
 8010fe6:	b2d2      	uxtb	r2, r2
 8010fe8:	701a      	strb	r2, [r3, #0]
 8010fea:	e00a      	b.n	8011002 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8010fec:	68fb      	ldr	r3, [r7, #12]
 8010fee:	0f1b      	lsrs	r3, r3, #28
 8010ff0:	b2da      	uxtb	r2, r3
 8010ff2:	7dfb      	ldrb	r3, [r7, #23]
 8010ff4:	005b      	lsls	r3, r3, #1
 8010ff6:	4619      	mov	r1, r3
 8010ff8:	68bb      	ldr	r3, [r7, #8]
 8010ffa:	440b      	add	r3, r1
 8010ffc:	3237      	adds	r2, #55	; 0x37
 8010ffe:	b2d2      	uxtb	r2, r2
 8011000:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011002:	68fb      	ldr	r3, [r7, #12]
 8011004:	011b      	lsls	r3, r3, #4
 8011006:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011008:	7dfb      	ldrb	r3, [r7, #23]
 801100a:	005b      	lsls	r3, r3, #1
 801100c:	3301      	adds	r3, #1
 801100e:	68ba      	ldr	r2, [r7, #8]
 8011010:	4413      	add	r3, r2
 8011012:	2200      	movs	r2, #0
 8011014:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011016:	7dfb      	ldrb	r3, [r7, #23]
 8011018:	3301      	adds	r3, #1
 801101a:	75fb      	strb	r3, [r7, #23]
 801101c:	7dfa      	ldrb	r2, [r7, #23]
 801101e:	79fb      	ldrb	r3, [r7, #7]
 8011020:	429a      	cmp	r2, r3
 8011022:	d3d3      	bcc.n	8010fcc <IntToUnicode+0x18>
  }
}
 8011024:	bf00      	nop
 8011026:	bf00      	nop
 8011028:	371c      	adds	r7, #28
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr
	...

08011034 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011034:	b580      	push	{r7, lr}
 8011036:	b0aa      	sub	sp, #168	; 0xa8
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801103c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011040:	2200      	movs	r2, #0
 8011042:	601a      	str	r2, [r3, #0]
 8011044:	605a      	str	r2, [r3, #4]
 8011046:	609a      	str	r2, [r3, #8]
 8011048:	60da      	str	r2, [r3, #12]
 801104a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 801104c:	f107 0310 	add.w	r3, r7, #16
 8011050:	2284      	movs	r2, #132	; 0x84
 8011052:	2100      	movs	r1, #0
 8011054:	4618      	mov	r0, r3
 8011056:	f000 fea9 	bl	8011dac <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 801105a:	687b      	ldr	r3, [r7, #4]
 801105c:	681b      	ldr	r3, [r3, #0]
 801105e:	4a26      	ldr	r2, [pc, #152]	; (80110f8 <HAL_PCD_MspInit+0xc4>)
 8011060:	4293      	cmp	r3, r2
 8011062:	d145      	bne.n	80110f0 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011064:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011068:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 801106a:	2300      	movs	r3, #0
 801106c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011070:	f107 0310 	add.w	r3, r7, #16
 8011074:	4618      	mov	r0, r3
 8011076:	f7f5 fd5d 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 801107a:	4603      	mov	r3, r0
 801107c:	2b00      	cmp	r3, #0
 801107e:	d001      	beq.n	8011084 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8011080:	f7f0 fadc 	bl	800163c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011084:	4b1d      	ldr	r3, [pc, #116]	; (80110fc <HAL_PCD_MspInit+0xc8>)
 8011086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011088:	4a1c      	ldr	r2, [pc, #112]	; (80110fc <HAL_PCD_MspInit+0xc8>)
 801108a:	f043 0302 	orr.w	r3, r3, #2
 801108e:	6313      	str	r3, [r2, #48]	; 0x30
 8011090:	4b1a      	ldr	r3, [pc, #104]	; (80110fc <HAL_PCD_MspInit+0xc8>)
 8011092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011094:	f003 0302 	and.w	r3, r3, #2
 8011098:	60fb      	str	r3, [r7, #12]
 801109a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801109c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80110a0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80110a4:	2302      	movs	r3, #2
 80110a6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80110aa:	2300      	movs	r3, #0
 80110ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80110b0:	2303      	movs	r3, #3
 80110b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80110b6:	230c      	movs	r3, #12
 80110b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80110bc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80110c0:	4619      	mov	r1, r3
 80110c2:	480f      	ldr	r0, [pc, #60]	; (8011100 <HAL_PCD_MspInit+0xcc>)
 80110c4:	f7f1 fe24 	bl	8002d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80110c8:	4b0c      	ldr	r3, [pc, #48]	; (80110fc <HAL_PCD_MspInit+0xc8>)
 80110ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110cc:	4a0b      	ldr	r2, [pc, #44]	; (80110fc <HAL_PCD_MspInit+0xc8>)
 80110ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80110d2:	6313      	str	r3, [r2, #48]	; 0x30
 80110d4:	4b09      	ldr	r3, [pc, #36]	; (80110fc <HAL_PCD_MspInit+0xc8>)
 80110d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80110d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80110dc:	60bb      	str	r3, [r7, #8]
 80110de:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80110e0:	2200      	movs	r2, #0
 80110e2:	2100      	movs	r1, #0
 80110e4:	204d      	movs	r0, #77	; 0x4d
 80110e6:	f7f1 faf2 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80110ea:	204d      	movs	r0, #77	; 0x4d
 80110ec:	f7f1 fb0b 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 80110f0:	bf00      	nop
 80110f2:	37a8      	adds	r7, #168	; 0xa8
 80110f4:	46bd      	mov	sp, r7
 80110f6:	bd80      	pop	{r7, pc}
 80110f8:	40040000 	.word	0x40040000
 80110fc:	40023800 	.word	0x40023800
 8011100:	40020400 	.word	0x40020400

08011104 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011104:	b580      	push	{r7, lr}
 8011106:	b082      	sub	sp, #8
 8011108:	af00      	add	r7, sp, #0
 801110a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801110c:	687b      	ldr	r3, [r7, #4]
 801110e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8011112:	687b      	ldr	r3, [r7, #4]
 8011114:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011118:	4619      	mov	r1, r3
 801111a:	4610      	mov	r0, r2
 801111c:	f7fc faeb 	bl	800d6f6 <USBD_LL_SetupStage>
}
 8011120:	bf00      	nop
 8011122:	3708      	adds	r7, #8
 8011124:	46bd      	mov	sp, r7
 8011126:	bd80      	pop	{r7, pc}

08011128 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011128:	b580      	push	{r7, lr}
 801112a:	b082      	sub	sp, #8
 801112c:	af00      	add	r7, sp, #0
 801112e:	6078      	str	r0, [r7, #4]
 8011130:	460b      	mov	r3, r1
 8011132:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011134:	687b      	ldr	r3, [r7, #4]
 8011136:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 801113a:	78fa      	ldrb	r2, [r7, #3]
 801113c:	6879      	ldr	r1, [r7, #4]
 801113e:	4613      	mov	r3, r2
 8011140:	00db      	lsls	r3, r3, #3
 8011142:	4413      	add	r3, r2
 8011144:	009b      	lsls	r3, r3, #2
 8011146:	440b      	add	r3, r1
 8011148:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 801114c:	681a      	ldr	r2, [r3, #0]
 801114e:	78fb      	ldrb	r3, [r7, #3]
 8011150:	4619      	mov	r1, r3
 8011152:	f7fc fb25 	bl	800d7a0 <USBD_LL_DataOutStage>
}
 8011156:	bf00      	nop
 8011158:	3708      	adds	r7, #8
 801115a:	46bd      	mov	sp, r7
 801115c:	bd80      	pop	{r7, pc}

0801115e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801115e:	b580      	push	{r7, lr}
 8011160:	b082      	sub	sp, #8
 8011162:	af00      	add	r7, sp, #0
 8011164:	6078      	str	r0, [r7, #4]
 8011166:	460b      	mov	r3, r1
 8011168:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011170:	78fa      	ldrb	r2, [r7, #3]
 8011172:	6879      	ldr	r1, [r7, #4]
 8011174:	4613      	mov	r3, r2
 8011176:	00db      	lsls	r3, r3, #3
 8011178:	4413      	add	r3, r2
 801117a:	009b      	lsls	r3, r3, #2
 801117c:	440b      	add	r3, r1
 801117e:	334c      	adds	r3, #76	; 0x4c
 8011180:	681a      	ldr	r2, [r3, #0]
 8011182:	78fb      	ldrb	r3, [r7, #3]
 8011184:	4619      	mov	r1, r3
 8011186:	f7fc fbbe 	bl	800d906 <USBD_LL_DataInStage>
}
 801118a:	bf00      	nop
 801118c:	3708      	adds	r7, #8
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}

08011192 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011192:	b580      	push	{r7, lr}
 8011194:	b082      	sub	sp, #8
 8011196:	af00      	add	r7, sp, #0
 8011198:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80111a0:	4618      	mov	r0, r3
 80111a2:	f7fc fcf2 	bl	800db8a <USBD_LL_SOF>
}
 80111a6:	bf00      	nop
 80111a8:	3708      	adds	r7, #8
 80111aa:	46bd      	mov	sp, r7
 80111ac:	bd80      	pop	{r7, pc}

080111ae <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80111ae:	b580      	push	{r7, lr}
 80111b0:	b084      	sub	sp, #16
 80111b2:	af00      	add	r7, sp, #0
 80111b4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80111b6:	2301      	movs	r3, #1
 80111b8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80111ba:	687b      	ldr	r3, [r7, #4]
 80111bc:	68db      	ldr	r3, [r3, #12]
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d102      	bne.n	80111c8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80111c2:	2300      	movs	r3, #0
 80111c4:	73fb      	strb	r3, [r7, #15]
 80111c6:	e008      	b.n	80111da <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80111c8:	687b      	ldr	r3, [r7, #4]
 80111ca:	68db      	ldr	r3, [r3, #12]
 80111cc:	2b02      	cmp	r3, #2
 80111ce:	d102      	bne.n	80111d6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80111d0:	2301      	movs	r3, #1
 80111d2:	73fb      	strb	r3, [r7, #15]
 80111d4:	e001      	b.n	80111da <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80111d6:	f7f0 fa31 	bl	800163c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80111da:	687b      	ldr	r3, [r7, #4]
 80111dc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80111e0:	7bfa      	ldrb	r2, [r7, #15]
 80111e2:	4611      	mov	r1, r2
 80111e4:	4618      	mov	r0, r3
 80111e6:	f7fc fc92 	bl	800db0e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80111f0:	4618      	mov	r0, r3
 80111f2:	f7fc fc3a 	bl	800da6a <USBD_LL_Reset>
}
 80111f6:	bf00      	nop
 80111f8:	3710      	adds	r7, #16
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}
	...

08011200 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011200:	b580      	push	{r7, lr}
 8011202:	b082      	sub	sp, #8
 8011204:	af00      	add	r7, sp, #0
 8011206:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801120e:	4618      	mov	r0, r3
 8011210:	f7fc fc8d 	bl	800db2e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	681b      	ldr	r3, [r3, #0]
 8011218:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801121c:	681b      	ldr	r3, [r3, #0]
 801121e:	687a      	ldr	r2, [r7, #4]
 8011220:	6812      	ldr	r2, [r2, #0]
 8011222:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011226:	f043 0301 	orr.w	r3, r3, #1
 801122a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 801122c:	687b      	ldr	r3, [r7, #4]
 801122e:	6a1b      	ldr	r3, [r3, #32]
 8011230:	2b00      	cmp	r3, #0
 8011232:	d005      	beq.n	8011240 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011234:	4b04      	ldr	r3, [pc, #16]	; (8011248 <HAL_PCD_SuspendCallback+0x48>)
 8011236:	691b      	ldr	r3, [r3, #16]
 8011238:	4a03      	ldr	r2, [pc, #12]	; (8011248 <HAL_PCD_SuspendCallback+0x48>)
 801123a:	f043 0306 	orr.w	r3, r3, #6
 801123e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011240:	bf00      	nop
 8011242:	3708      	adds	r7, #8
 8011244:	46bd      	mov	sp, r7
 8011246:	bd80      	pop	{r7, pc}
 8011248:	e000ed00 	.word	0xe000ed00

0801124c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801124c:	b580      	push	{r7, lr}
 801124e:	b082      	sub	sp, #8
 8011250:	af00      	add	r7, sp, #0
 8011252:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011254:	687b      	ldr	r3, [r7, #4]
 8011256:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801125a:	4618      	mov	r0, r3
 801125c:	f7fc fc7d 	bl	800db5a <USBD_LL_Resume>
}
 8011260:	bf00      	nop
 8011262:	3708      	adds	r7, #8
 8011264:	46bd      	mov	sp, r7
 8011266:	bd80      	pop	{r7, pc}

08011268 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011268:	b580      	push	{r7, lr}
 801126a:	b082      	sub	sp, #8
 801126c:	af00      	add	r7, sp, #0
 801126e:	6078      	str	r0, [r7, #4]
 8011270:	460b      	mov	r3, r1
 8011272:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801127a:	78fa      	ldrb	r2, [r7, #3]
 801127c:	4611      	mov	r1, r2
 801127e:	4618      	mov	r0, r3
 8011280:	f7fc fcd5 	bl	800dc2e <USBD_LL_IsoOUTIncomplete>
}
 8011284:	bf00      	nop
 8011286:	3708      	adds	r7, #8
 8011288:	46bd      	mov	sp, r7
 801128a:	bd80      	pop	{r7, pc}

0801128c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
 8011294:	460b      	mov	r3, r1
 8011296:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801129e:	78fa      	ldrb	r2, [r7, #3]
 80112a0:	4611      	mov	r1, r2
 80112a2:	4618      	mov	r0, r3
 80112a4:	f7fc fc91 	bl	800dbca <USBD_LL_IsoINIncomplete>
}
 80112a8:	bf00      	nop
 80112aa:	3708      	adds	r7, #8
 80112ac:	46bd      	mov	sp, r7
 80112ae:	bd80      	pop	{r7, pc}

080112b0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112b0:	b580      	push	{r7, lr}
 80112b2:	b082      	sub	sp, #8
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80112b8:	687b      	ldr	r3, [r7, #4]
 80112ba:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fc fce7 	bl	800dc92 <USBD_LL_DevConnected>
}
 80112c4:	bf00      	nop
 80112c6:	3708      	adds	r7, #8
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bd80      	pop	{r7, pc}

080112cc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b082      	sub	sp, #8
 80112d0:	af00      	add	r7, sp, #0
 80112d2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80112da:	4618      	mov	r0, r3
 80112dc:	f7fc fce4 	bl	800dca8 <USBD_LL_DevDisconnected>
}
 80112e0:	bf00      	nop
 80112e2:	3708      	adds	r7, #8
 80112e4:	46bd      	mov	sp, r7
 80112e6:	bd80      	pop	{r7, pc}

080112e8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 80112f0:	687b      	ldr	r3, [r7, #4]
 80112f2:	781b      	ldrb	r3, [r3, #0]
 80112f4:	2b01      	cmp	r3, #1
 80112f6:	d140      	bne.n	801137a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 80112f8:	4a22      	ldr	r2, [pc, #136]	; (8011384 <USBD_LL_Init+0x9c>)
 80112fa:	687b      	ldr	r3, [r7, #4]
 80112fc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8011300:	687b      	ldr	r3, [r7, #4]
 8011302:	4a20      	ldr	r2, [pc, #128]	; (8011384 <USBD_LL_Init+0x9c>)
 8011304:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011308:	4b1e      	ldr	r3, [pc, #120]	; (8011384 <USBD_LL_Init+0x9c>)
 801130a:	4a1f      	ldr	r2, [pc, #124]	; (8011388 <USBD_LL_Init+0xa0>)
 801130c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 801130e:	4b1d      	ldr	r3, [pc, #116]	; (8011384 <USBD_LL_Init+0x9c>)
 8011310:	2208      	movs	r2, #8
 8011312:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8011314:	4b1b      	ldr	r3, [pc, #108]	; (8011384 <USBD_LL_Init+0x9c>)
 8011316:	2202      	movs	r2, #2
 8011318:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 801131a:	4b1a      	ldr	r3, [pc, #104]	; (8011384 <USBD_LL_Init+0x9c>)
 801131c:	2200      	movs	r2, #0
 801131e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011320:	4b18      	ldr	r3, [pc, #96]	; (8011384 <USBD_LL_Init+0x9c>)
 8011322:	2202      	movs	r2, #2
 8011324:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011326:	4b17      	ldr	r3, [pc, #92]	; (8011384 <USBD_LL_Init+0x9c>)
 8011328:	2200      	movs	r2, #0
 801132a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 801132c:	4b15      	ldr	r3, [pc, #84]	; (8011384 <USBD_LL_Init+0x9c>)
 801132e:	2200      	movs	r2, #0
 8011330:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8011332:	4b14      	ldr	r3, [pc, #80]	; (8011384 <USBD_LL_Init+0x9c>)
 8011334:	2200      	movs	r2, #0
 8011336:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011338:	4b12      	ldr	r3, [pc, #72]	; (8011384 <USBD_LL_Init+0x9c>)
 801133a:	2200      	movs	r2, #0
 801133c:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 801133e:	4b11      	ldr	r3, [pc, #68]	; (8011384 <USBD_LL_Init+0x9c>)
 8011340:	2200      	movs	r2, #0
 8011342:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011344:	4b0f      	ldr	r3, [pc, #60]	; (8011384 <USBD_LL_Init+0x9c>)
 8011346:	2200      	movs	r2, #0
 8011348:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 801134a:	480e      	ldr	r0, [pc, #56]	; (8011384 <USBD_LL_Init+0x9c>)
 801134c:	f7f3 fc12 	bl	8004b74 <HAL_PCD_Init>
 8011350:	4603      	mov	r3, r0
 8011352:	2b00      	cmp	r3, #0
 8011354:	d001      	beq.n	801135a <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011356:	f7f0 f971 	bl	800163c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 801135a:	f44f 7100 	mov.w	r1, #512	; 0x200
 801135e:	4809      	ldr	r0, [pc, #36]	; (8011384 <USBD_LL_Init+0x9c>)
 8011360:	f7f4 fe8b 	bl	800607a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8011364:	2280      	movs	r2, #128	; 0x80
 8011366:	2100      	movs	r1, #0
 8011368:	4806      	ldr	r0, [pc, #24]	; (8011384 <USBD_LL_Init+0x9c>)
 801136a:	f7f4 fe3f 	bl	8005fec <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801136e:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8011372:	2101      	movs	r1, #1
 8011374:	4803      	ldr	r0, [pc, #12]	; (8011384 <USBD_LL_Init+0x9c>)
 8011376:	f7f4 fe39 	bl	8005fec <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801137a:	2300      	movs	r3, #0
}
 801137c:	4618      	mov	r0, r3
 801137e:	3708      	adds	r7, #8
 8011380:	46bd      	mov	sp, r7
 8011382:	bd80      	pop	{r7, pc}
 8011384:	20001b70 	.word	0x20001b70
 8011388:	40040000 	.word	0x40040000

0801138c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801138c:	b580      	push	{r7, lr}
 801138e:	b084      	sub	sp, #16
 8011390:	af00      	add	r7, sp, #0
 8011392:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011394:	2300      	movs	r3, #0
 8011396:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011398:	2300      	movs	r3, #0
 801139a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801139c:	687b      	ldr	r3, [r7, #4]
 801139e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7f3 fd0a 	bl	8004dbc <HAL_PCD_Start>
 80113a8:	4603      	mov	r3, r0
 80113aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113ac:	7bfb      	ldrb	r3, [r7, #15]
 80113ae:	4618      	mov	r0, r3
 80113b0:	f000 f97e 	bl	80116b0 <USBD_Get_USB_Status>
 80113b4:	4603      	mov	r3, r0
 80113b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80113b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80113ba:	4618      	mov	r0, r3
 80113bc:	3710      	adds	r7, #16
 80113be:	46bd      	mov	sp, r7
 80113c0:	bd80      	pop	{r7, pc}

080113c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80113c2:	b580      	push	{r7, lr}
 80113c4:	b084      	sub	sp, #16
 80113c6:	af00      	add	r7, sp, #0
 80113c8:	6078      	str	r0, [r7, #4]
 80113ca:	4608      	mov	r0, r1
 80113cc:	4611      	mov	r1, r2
 80113ce:	461a      	mov	r2, r3
 80113d0:	4603      	mov	r3, r0
 80113d2:	70fb      	strb	r3, [r7, #3]
 80113d4:	460b      	mov	r3, r1
 80113d6:	70bb      	strb	r3, [r7, #2]
 80113d8:	4613      	mov	r3, r2
 80113da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80113dc:	2300      	movs	r3, #0
 80113de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80113e0:	2300      	movs	r3, #0
 80113e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80113ea:	78bb      	ldrb	r3, [r7, #2]
 80113ec:	883a      	ldrh	r2, [r7, #0]
 80113ee:	78f9      	ldrb	r1, [r7, #3]
 80113f0:	f7f4 f9f7 	bl	80057e2 <HAL_PCD_EP_Open>
 80113f4:	4603      	mov	r3, r0
 80113f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80113f8:	7bfb      	ldrb	r3, [r7, #15]
 80113fa:	4618      	mov	r0, r3
 80113fc:	f000 f958 	bl	80116b0 <USBD_Get_USB_Status>
 8011400:	4603      	mov	r3, r0
 8011402:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011404:	7bbb      	ldrb	r3, [r7, #14]
}
 8011406:	4618      	mov	r0, r3
 8011408:	3710      	adds	r7, #16
 801140a:	46bd      	mov	sp, r7
 801140c:	bd80      	pop	{r7, pc}

0801140e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801140e:	b580      	push	{r7, lr}
 8011410:	b084      	sub	sp, #16
 8011412:	af00      	add	r7, sp, #0
 8011414:	6078      	str	r0, [r7, #4]
 8011416:	460b      	mov	r3, r1
 8011418:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801141a:	2300      	movs	r3, #0
 801141c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801141e:	2300      	movs	r3, #0
 8011420:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011422:	687b      	ldr	r3, [r7, #4]
 8011424:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011428:	78fa      	ldrb	r2, [r7, #3]
 801142a:	4611      	mov	r1, r2
 801142c:	4618      	mov	r0, r3
 801142e:	f7f4 fa40 	bl	80058b2 <HAL_PCD_EP_Close>
 8011432:	4603      	mov	r3, r0
 8011434:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011436:	7bfb      	ldrb	r3, [r7, #15]
 8011438:	4618      	mov	r0, r3
 801143a:	f000 f939 	bl	80116b0 <USBD_Get_USB_Status>
 801143e:	4603      	mov	r3, r0
 8011440:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011442:	7bbb      	ldrb	r3, [r7, #14]
}
 8011444:	4618      	mov	r0, r3
 8011446:	3710      	adds	r7, #16
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}

0801144c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801144c:	b580      	push	{r7, lr}
 801144e:	b084      	sub	sp, #16
 8011450:	af00      	add	r7, sp, #0
 8011452:	6078      	str	r0, [r7, #4]
 8011454:	460b      	mov	r3, r1
 8011456:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011458:	2300      	movs	r3, #0
 801145a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801145c:	2300      	movs	r3, #0
 801145e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011460:	687b      	ldr	r3, [r7, #4]
 8011462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011466:	78fa      	ldrb	r2, [r7, #3]
 8011468:	4611      	mov	r1, r2
 801146a:	4618      	mov	r0, r3
 801146c:	f7f4 fb18 	bl	8005aa0 <HAL_PCD_EP_SetStall>
 8011470:	4603      	mov	r3, r0
 8011472:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011474:	7bfb      	ldrb	r3, [r7, #15]
 8011476:	4618      	mov	r0, r3
 8011478:	f000 f91a 	bl	80116b0 <USBD_Get_USB_Status>
 801147c:	4603      	mov	r3, r0
 801147e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011480:	7bbb      	ldrb	r3, [r7, #14]
}
 8011482:	4618      	mov	r0, r3
 8011484:	3710      	adds	r7, #16
 8011486:	46bd      	mov	sp, r7
 8011488:	bd80      	pop	{r7, pc}

0801148a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801148a:	b580      	push	{r7, lr}
 801148c:	b084      	sub	sp, #16
 801148e:	af00      	add	r7, sp, #0
 8011490:	6078      	str	r0, [r7, #4]
 8011492:	460b      	mov	r3, r1
 8011494:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011496:	2300      	movs	r3, #0
 8011498:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801149a:	2300      	movs	r3, #0
 801149c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801149e:	687b      	ldr	r3, [r7, #4]
 80114a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114a4:	78fa      	ldrb	r2, [r7, #3]
 80114a6:	4611      	mov	r1, r2
 80114a8:	4618      	mov	r0, r3
 80114aa:	f7f4 fb5d 	bl	8005b68 <HAL_PCD_EP_ClrStall>
 80114ae:	4603      	mov	r3, r0
 80114b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80114b2:	7bfb      	ldrb	r3, [r7, #15]
 80114b4:	4618      	mov	r0, r3
 80114b6:	f000 f8fb 	bl	80116b0 <USBD_Get_USB_Status>
 80114ba:	4603      	mov	r3, r0
 80114bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80114be:	7bbb      	ldrb	r3, [r7, #14]
}
 80114c0:	4618      	mov	r0, r3
 80114c2:	3710      	adds	r7, #16
 80114c4:	46bd      	mov	sp, r7
 80114c6:	bd80      	pop	{r7, pc}

080114c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b085      	sub	sp, #20
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	6078      	str	r0, [r7, #4]
 80114d0:	460b      	mov	r3, r1
 80114d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80114da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80114dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80114e0:	2b00      	cmp	r3, #0
 80114e2:	da0b      	bge.n	80114fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80114e4:	78fb      	ldrb	r3, [r7, #3]
 80114e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80114ea:	68f9      	ldr	r1, [r7, #12]
 80114ec:	4613      	mov	r3, r2
 80114ee:	00db      	lsls	r3, r3, #3
 80114f0:	4413      	add	r3, r2
 80114f2:	009b      	lsls	r3, r3, #2
 80114f4:	440b      	add	r3, r1
 80114f6:	333e      	adds	r3, #62	; 0x3e
 80114f8:	781b      	ldrb	r3, [r3, #0]
 80114fa:	e00b      	b.n	8011514 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80114fc:	78fb      	ldrb	r3, [r7, #3]
 80114fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011502:	68f9      	ldr	r1, [r7, #12]
 8011504:	4613      	mov	r3, r2
 8011506:	00db      	lsls	r3, r3, #3
 8011508:	4413      	add	r3, r2
 801150a:	009b      	lsls	r3, r3, #2
 801150c:	440b      	add	r3, r1
 801150e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011512:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011514:	4618      	mov	r0, r3
 8011516:	3714      	adds	r7, #20
 8011518:	46bd      	mov	sp, r7
 801151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801151e:	4770      	bx	lr

08011520 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b084      	sub	sp, #16
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
 8011528:	460b      	mov	r3, r1
 801152a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801152c:	2300      	movs	r3, #0
 801152e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011530:	2300      	movs	r3, #0
 8011532:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801153a:	78fa      	ldrb	r2, [r7, #3]
 801153c:	4611      	mov	r1, r2
 801153e:	4618      	mov	r0, r3
 8011540:	f7f4 f92a 	bl	8005798 <HAL_PCD_SetAddress>
 8011544:	4603      	mov	r3, r0
 8011546:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011548:	7bfb      	ldrb	r3, [r7, #15]
 801154a:	4618      	mov	r0, r3
 801154c:	f000 f8b0 	bl	80116b0 <USBD_Get_USB_Status>
 8011550:	4603      	mov	r3, r0
 8011552:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011554:	7bbb      	ldrb	r3, [r7, #14]
}
 8011556:	4618      	mov	r0, r3
 8011558:	3710      	adds	r7, #16
 801155a:	46bd      	mov	sp, r7
 801155c:	bd80      	pop	{r7, pc}

0801155e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801155e:	b580      	push	{r7, lr}
 8011560:	b086      	sub	sp, #24
 8011562:	af00      	add	r7, sp, #0
 8011564:	60f8      	str	r0, [r7, #12]
 8011566:	607a      	str	r2, [r7, #4]
 8011568:	603b      	str	r3, [r7, #0]
 801156a:	460b      	mov	r3, r1
 801156c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801156e:	2300      	movs	r3, #0
 8011570:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011572:	2300      	movs	r3, #0
 8011574:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011576:	68fb      	ldr	r3, [r7, #12]
 8011578:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801157c:	7af9      	ldrb	r1, [r7, #11]
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	687a      	ldr	r2, [r7, #4]
 8011582:	f7f4 fa43 	bl	8005a0c <HAL_PCD_EP_Transmit>
 8011586:	4603      	mov	r3, r0
 8011588:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801158a:	7dfb      	ldrb	r3, [r7, #23]
 801158c:	4618      	mov	r0, r3
 801158e:	f000 f88f 	bl	80116b0 <USBD_Get_USB_Status>
 8011592:	4603      	mov	r3, r0
 8011594:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011596:	7dbb      	ldrb	r3, [r7, #22]
}
 8011598:	4618      	mov	r0, r3
 801159a:	3718      	adds	r7, #24
 801159c:	46bd      	mov	sp, r7
 801159e:	bd80      	pop	{r7, pc}

080115a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80115a0:	b580      	push	{r7, lr}
 80115a2:	b086      	sub	sp, #24
 80115a4:	af00      	add	r7, sp, #0
 80115a6:	60f8      	str	r0, [r7, #12]
 80115a8:	607a      	str	r2, [r7, #4]
 80115aa:	603b      	str	r3, [r7, #0]
 80115ac:	460b      	mov	r3, r1
 80115ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80115b0:	2300      	movs	r3, #0
 80115b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80115b4:	2300      	movs	r3, #0
 80115b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80115be:	7af9      	ldrb	r1, [r7, #11]
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	687a      	ldr	r2, [r7, #4]
 80115c4:	f7f4 f9bf 	bl	8005946 <HAL_PCD_EP_Receive>
 80115c8:	4603      	mov	r3, r0
 80115ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80115cc:	7dfb      	ldrb	r3, [r7, #23]
 80115ce:	4618      	mov	r0, r3
 80115d0:	f000 f86e 	bl	80116b0 <USBD_Get_USB_Status>
 80115d4:	4603      	mov	r3, r0
 80115d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80115d8:	7dbb      	ldrb	r3, [r7, #22]
}
 80115da:	4618      	mov	r0, r3
 80115dc:	3718      	adds	r7, #24
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80115e2:	b580      	push	{r7, lr}
 80115e4:	b082      	sub	sp, #8
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
 80115ea:	460b      	mov	r3, r1
 80115ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80115f4:	78fa      	ldrb	r2, [r7, #3]
 80115f6:	4611      	mov	r1, r2
 80115f8:	4618      	mov	r0, r3
 80115fa:	f7f4 f9ef 	bl	80059dc <HAL_PCD_EP_GetRxCount>
 80115fe:	4603      	mov	r3, r0
}
 8011600:	4618      	mov	r0, r3
 8011602:	3708      	adds	r7, #8
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}

08011608 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011608:	b580      	push	{r7, lr}
 801160a:	b082      	sub	sp, #8
 801160c:	af00      	add	r7, sp, #0
 801160e:	6078      	str	r0, [r7, #4]
 8011610:	460b      	mov	r3, r1
 8011612:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011614:	78fb      	ldrb	r3, [r7, #3]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d002      	beq.n	8011620 <HAL_PCDEx_LPM_Callback+0x18>
 801161a:	2b01      	cmp	r3, #1
 801161c:	d01f      	beq.n	801165e <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 801161e:	e03b      	b.n	8011698 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	6a1b      	ldr	r3, [r3, #32]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d007      	beq.n	8011638 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011628:	f000 f83c 	bl	80116a4 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801162c:	4b1c      	ldr	r3, [pc, #112]	; (80116a0 <HAL_PCDEx_LPM_Callback+0x98>)
 801162e:	691b      	ldr	r3, [r3, #16]
 8011630:	4a1b      	ldr	r2, [pc, #108]	; (80116a0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011632:	f023 0306 	bic.w	r3, r3, #6
 8011636:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011638:	687b      	ldr	r3, [r7, #4]
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011640:	681b      	ldr	r3, [r3, #0]
 8011642:	687a      	ldr	r2, [r7, #4]
 8011644:	6812      	ldr	r2, [r2, #0]
 8011646:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 801164a:	f023 0301 	bic.w	r3, r3, #1
 801164e:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011656:	4618      	mov	r0, r3
 8011658:	f7fc fa7f 	bl	800db5a <USBD_LL_Resume>
    break;
 801165c:	e01c      	b.n	8011698 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	687a      	ldr	r2, [r7, #4]
 801166a:	6812      	ldr	r2, [r2, #0]
 801166c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011670:	f043 0301 	orr.w	r3, r3, #1
 8011674:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011676:	687b      	ldr	r3, [r7, #4]
 8011678:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801167c:	4618      	mov	r0, r3
 801167e:	f7fc fa56 	bl	800db2e <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011682:	687b      	ldr	r3, [r7, #4]
 8011684:	6a1b      	ldr	r3, [r3, #32]
 8011686:	2b00      	cmp	r3, #0
 8011688:	d005      	beq.n	8011696 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 801168a:	4b05      	ldr	r3, [pc, #20]	; (80116a0 <HAL_PCDEx_LPM_Callback+0x98>)
 801168c:	691b      	ldr	r3, [r3, #16]
 801168e:	4a04      	ldr	r2, [pc, #16]	; (80116a0 <HAL_PCDEx_LPM_Callback+0x98>)
 8011690:	f043 0306 	orr.w	r3, r3, #6
 8011694:	6113      	str	r3, [r2, #16]
    break;
 8011696:	bf00      	nop
}
 8011698:	bf00      	nop
 801169a:	3708      	adds	r7, #8
 801169c:	46bd      	mov	sp, r7
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	e000ed00 	.word	0xe000ed00

080116a4 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 80116a4:	b580      	push	{r7, lr}
 80116a6:	af00      	add	r7, sp, #0
  SystemClock_Config();
 80116a8:	f7ef fc44 	bl	8000f34 <SystemClock_Config>
}
 80116ac:	bf00      	nop
 80116ae:	bd80      	pop	{r7, pc}

080116b0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b085      	sub	sp, #20
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	4603      	mov	r3, r0
 80116b8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80116ba:	2300      	movs	r3, #0
 80116bc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80116be:	79fb      	ldrb	r3, [r7, #7]
 80116c0:	2b03      	cmp	r3, #3
 80116c2:	d817      	bhi.n	80116f4 <USBD_Get_USB_Status+0x44>
 80116c4:	a201      	add	r2, pc, #4	; (adr r2, 80116cc <USBD_Get_USB_Status+0x1c>)
 80116c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80116ca:	bf00      	nop
 80116cc:	080116dd 	.word	0x080116dd
 80116d0:	080116e3 	.word	0x080116e3
 80116d4:	080116e9 	.word	0x080116e9
 80116d8:	080116ef 	.word	0x080116ef
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80116dc:	2300      	movs	r3, #0
 80116de:	73fb      	strb	r3, [r7, #15]
    break;
 80116e0:	e00b      	b.n	80116fa <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80116e2:	2303      	movs	r3, #3
 80116e4:	73fb      	strb	r3, [r7, #15]
    break;
 80116e6:	e008      	b.n	80116fa <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80116e8:	2301      	movs	r3, #1
 80116ea:	73fb      	strb	r3, [r7, #15]
    break;
 80116ec:	e005      	b.n	80116fa <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80116ee:	2303      	movs	r3, #3
 80116f0:	73fb      	strb	r3, [r7, #15]
    break;
 80116f2:	e002      	b.n	80116fa <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80116f4:	2303      	movs	r3, #3
 80116f6:	73fb      	strb	r3, [r7, #15]
    break;
 80116f8:	bf00      	nop
  }
  return usb_status;
 80116fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80116fc:	4618      	mov	r0, r3
 80116fe:	3714      	adds	r7, #20
 8011700:	46bd      	mov	sp, r7
 8011702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011706:	4770      	bx	lr

08011708 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 801170c:	2201      	movs	r2, #1
 801170e:	490e      	ldr	r1, [pc, #56]	; (8011748 <MX_USB_HOST_Init+0x40>)
 8011710:	480e      	ldr	r0, [pc, #56]	; (801174c <MX_USB_HOST_Init+0x44>)
 8011712:	f7fd fdf5 	bl	800f300 <USBH_Init>
 8011716:	4603      	mov	r3, r0
 8011718:	2b00      	cmp	r3, #0
 801171a:	d001      	beq.n	8011720 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 801171c:	f7ef ff8e 	bl	800163c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011720:	490b      	ldr	r1, [pc, #44]	; (8011750 <MX_USB_HOST_Init+0x48>)
 8011722:	480a      	ldr	r0, [pc, #40]	; (801174c <MX_USB_HOST_Init+0x44>)
 8011724:	f7fd fe99 	bl	800f45a <USBH_RegisterClass>
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	d001      	beq.n	8011732 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 801172e:	f7ef ff85 	bl	800163c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011732:	4806      	ldr	r0, [pc, #24]	; (801174c <MX_USB_HOST_Init+0x44>)
 8011734:	f7fd ff1d 	bl	800f572 <USBH_Start>
 8011738:	4603      	mov	r3, r0
 801173a:	2b00      	cmp	r3, #0
 801173c:	d001      	beq.n	8011742 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 801173e:	f7ef ff7d 	bl	800163c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011742:	bf00      	nop
 8011744:	bd80      	pop	{r7, pc}
 8011746:	bf00      	nop
 8011748:	08011769 	.word	0x08011769
 801174c:	20002078 	.word	0x20002078
 8011750:	20000098 	.word	0x20000098

08011754 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011754:	b580      	push	{r7, lr}
 8011756:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011758:	4802      	ldr	r0, [pc, #8]	; (8011764 <MX_USB_HOST_Process+0x10>)
 801175a:	f7fd ff1b 	bl	800f594 <USBH_Process>
}
 801175e:	bf00      	nop
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	20002078 	.word	0x20002078

08011768 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011768:	b480      	push	{r7}
 801176a:	b083      	sub	sp, #12
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
 8011770:	460b      	mov	r3, r1
 8011772:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011774:	78fb      	ldrb	r3, [r7, #3]
 8011776:	3b01      	subs	r3, #1
 8011778:	2b04      	cmp	r3, #4
 801177a:	d819      	bhi.n	80117b0 <USBH_UserProcess+0x48>
 801177c:	a201      	add	r2, pc, #4	; (adr r2, 8011784 <USBH_UserProcess+0x1c>)
 801177e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011782:	bf00      	nop
 8011784:	080117b1 	.word	0x080117b1
 8011788:	080117a1 	.word	0x080117a1
 801178c:	080117b1 	.word	0x080117b1
 8011790:	080117a9 	.word	0x080117a9
 8011794:	08011799 	.word	0x08011799
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011798:	4b09      	ldr	r3, [pc, #36]	; (80117c0 <USBH_UserProcess+0x58>)
 801179a:	2203      	movs	r2, #3
 801179c:	701a      	strb	r2, [r3, #0]
  break;
 801179e:	e008      	b.n	80117b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80117a0:	4b07      	ldr	r3, [pc, #28]	; (80117c0 <USBH_UserProcess+0x58>)
 80117a2:	2202      	movs	r2, #2
 80117a4:	701a      	strb	r2, [r3, #0]
  break;
 80117a6:	e004      	b.n	80117b2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80117a8:	4b05      	ldr	r3, [pc, #20]	; (80117c0 <USBH_UserProcess+0x58>)
 80117aa:	2201      	movs	r2, #1
 80117ac:	701a      	strb	r2, [r3, #0]
  break;
 80117ae:	e000      	b.n	80117b2 <USBH_UserProcess+0x4a>

  default:
  break;
 80117b0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80117b2:	bf00      	nop
 80117b4:	370c      	adds	r7, #12
 80117b6:	46bd      	mov	sp, r7
 80117b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117bc:	4770      	bx	lr
 80117be:	bf00      	nop
 80117c0:	20002450 	.word	0x20002450

080117c4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80117c4:	b580      	push	{r7, lr}
 80117c6:	b0ac      	sub	sp, #176	; 0xb0
 80117c8:	af00      	add	r7, sp, #0
 80117ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80117cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80117d0:	2200      	movs	r2, #0
 80117d2:	601a      	str	r2, [r3, #0]
 80117d4:	605a      	str	r2, [r3, #4]
 80117d6:	609a      	str	r2, [r3, #8]
 80117d8:	60da      	str	r2, [r3, #12]
 80117da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80117dc:	f107 0318 	add.w	r3, r7, #24
 80117e0:	2284      	movs	r2, #132	; 0x84
 80117e2:	2100      	movs	r1, #0
 80117e4:	4618      	mov	r0, r3
 80117e6:	f000 fae1 	bl	8011dac <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80117ea:	687b      	ldr	r3, [r7, #4]
 80117ec:	681b      	ldr	r3, [r3, #0]
 80117ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80117f2:	d151      	bne.n	8011898 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80117f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80117f8:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80117fa:	2300      	movs	r3, #0
 80117fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011800:	f107 0318 	add.w	r3, r7, #24
 8011804:	4618      	mov	r0, r3
 8011806:	f7f5 f995 	bl	8006b34 <HAL_RCCEx_PeriphCLKConfig>
 801180a:	4603      	mov	r3, r0
 801180c:	2b00      	cmp	r3, #0
 801180e:	d001      	beq.n	8011814 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8011810:	f7ef ff14 	bl	800163c <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011814:	4b22      	ldr	r3, [pc, #136]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 8011816:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011818:	4a21      	ldr	r2, [pc, #132]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 801181a:	f043 0301 	orr.w	r3, r3, #1
 801181e:	6313      	str	r3, [r2, #48]	; 0x30
 8011820:	4b1f      	ldr	r3, [pc, #124]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 8011822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011824:	f003 0301 	and.w	r3, r3, #1
 8011828:	617b      	str	r3, [r7, #20]
 801182a:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 801182c:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011830:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011834:	2302      	movs	r3, #2
 8011836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801183a:	2300      	movs	r3, #0
 801183c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011840:	2303      	movs	r3, #3
 8011842:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011846:	230a      	movs	r3, #10
 8011848:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801184c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011850:	4619      	mov	r1, r3
 8011852:	4814      	ldr	r0, [pc, #80]	; (80118a4 <HAL_HCD_MspInit+0xe0>)
 8011854:	f7f1 fa5c 	bl	8002d10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011858:	4b11      	ldr	r3, [pc, #68]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 801185a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801185c:	4a10      	ldr	r2, [pc, #64]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 801185e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011862:	6353      	str	r3, [r2, #52]	; 0x34
 8011864:	4b0e      	ldr	r3, [pc, #56]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 8011866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011868:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801186c:	613b      	str	r3, [r7, #16]
 801186e:	693b      	ldr	r3, [r7, #16]
 8011870:	4b0b      	ldr	r3, [pc, #44]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 8011872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011874:	4a0a      	ldr	r2, [pc, #40]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 8011876:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 801187a:	6453      	str	r3, [r2, #68]	; 0x44
 801187c:	4b08      	ldr	r3, [pc, #32]	; (80118a0 <HAL_HCD_MspInit+0xdc>)
 801187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011880:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011884:	60fb      	str	r3, [r7, #12]
 8011886:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011888:	2200      	movs	r2, #0
 801188a:	2100      	movs	r1, #0
 801188c:	2043      	movs	r0, #67	; 0x43
 801188e:	f7f0 ff1e 	bl	80026ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011892:	2043      	movs	r0, #67	; 0x43
 8011894:	f7f0 ff37 	bl	8002706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011898:	bf00      	nop
 801189a:	37b0      	adds	r7, #176	; 0xb0
 801189c:	46bd      	mov	sp, r7
 801189e:	bd80      	pop	{r7, pc}
 80118a0:	40023800 	.word	0x40023800
 80118a4:	40020000 	.word	0x40020000

080118a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b082      	sub	sp, #8
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fe fa4b 	bl	800fd52 <USBH_LL_IncTimer>
}
 80118bc:	bf00      	nop
 80118be:	3708      	adds	r7, #8
 80118c0:	46bd      	mov	sp, r7
 80118c2:	bd80      	pop	{r7, pc}

080118c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80118c4:	b580      	push	{r7, lr}
 80118c6:	b082      	sub	sp, #8
 80118c8:	af00      	add	r7, sp, #0
 80118ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80118cc:	687b      	ldr	r3, [r7, #4]
 80118ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7fe fa83 	bl	800fdde <USBH_LL_Connect>
}
 80118d8:	bf00      	nop
 80118da:	3708      	adds	r7, #8
 80118dc:	46bd      	mov	sp, r7
 80118de:	bd80      	pop	{r7, pc}

080118e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80118e0:	b580      	push	{r7, lr}
 80118e2:	b082      	sub	sp, #8
 80118e4:	af00      	add	r7, sp, #0
 80118e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80118ee:	4618      	mov	r0, r3
 80118f0:	f7fe fa8c 	bl	800fe0c <USBH_LL_Disconnect>
}
 80118f4:	bf00      	nop
 80118f6:	3708      	adds	r7, #8
 80118f8:	46bd      	mov	sp, r7
 80118fa:	bd80      	pop	{r7, pc}

080118fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80118fc:	b480      	push	{r7}
 80118fe:	b083      	sub	sp, #12
 8011900:	af00      	add	r7, sp, #0
 8011902:	6078      	str	r0, [r7, #4]
 8011904:	460b      	mov	r3, r1
 8011906:	70fb      	strb	r3, [r7, #3]
 8011908:	4613      	mov	r3, r2
 801190a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 801190c:	bf00      	nop
 801190e:	370c      	adds	r7, #12
 8011910:	46bd      	mov	sp, r7
 8011912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011916:	4770      	bx	lr

08011918 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011918:	b580      	push	{r7, lr}
 801191a:	b082      	sub	sp, #8
 801191c:	af00      	add	r7, sp, #0
 801191e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011920:	687b      	ldr	r3, [r7, #4]
 8011922:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011926:	4618      	mov	r0, r3
 8011928:	f7fe fa3d 	bl	800fda6 <USBH_LL_PortEnabled>
}
 801192c:	bf00      	nop
 801192e:	3708      	adds	r7, #8
 8011930:	46bd      	mov	sp, r7
 8011932:	bd80      	pop	{r7, pc}

08011934 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011934:	b580      	push	{r7, lr}
 8011936:	b082      	sub	sp, #8
 8011938:	af00      	add	r7, sp, #0
 801193a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 801193c:	687b      	ldr	r3, [r7, #4]
 801193e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011942:	4618      	mov	r0, r3
 8011944:	f7fe fa3d 	bl	800fdc2 <USBH_LL_PortDisabled>
}
 8011948:	bf00      	nop
 801194a:	3708      	adds	r7, #8
 801194c:	46bd      	mov	sp, r7
 801194e:	bd80      	pop	{r7, pc}

08011950 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011950:	b580      	push	{r7, lr}
 8011952:	b082      	sub	sp, #8
 8011954:	af00      	add	r7, sp, #0
 8011956:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 801195e:	2b01      	cmp	r3, #1
 8011960:	d12a      	bne.n	80119b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011962:	4a18      	ldr	r2, [pc, #96]	; (80119c4 <USBH_LL_Init+0x74>)
 8011964:	687b      	ldr	r3, [r7, #4]
 8011966:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 801196a:	687b      	ldr	r3, [r7, #4]
 801196c:	4a15      	ldr	r2, [pc, #84]	; (80119c4 <USBH_LL_Init+0x74>)
 801196e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011972:	4b14      	ldr	r3, [pc, #80]	; (80119c4 <USBH_LL_Init+0x74>)
 8011974:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011978:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 801197a:	4b12      	ldr	r3, [pc, #72]	; (80119c4 <USBH_LL_Init+0x74>)
 801197c:	2208      	movs	r2, #8
 801197e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011980:	4b10      	ldr	r3, [pc, #64]	; (80119c4 <USBH_LL_Init+0x74>)
 8011982:	2201      	movs	r2, #1
 8011984:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011986:	4b0f      	ldr	r3, [pc, #60]	; (80119c4 <USBH_LL_Init+0x74>)
 8011988:	2200      	movs	r2, #0
 801198a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 801198c:	4b0d      	ldr	r3, [pc, #52]	; (80119c4 <USBH_LL_Init+0x74>)
 801198e:	2202      	movs	r2, #2
 8011990:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011992:	4b0c      	ldr	r3, [pc, #48]	; (80119c4 <USBH_LL_Init+0x74>)
 8011994:	2200      	movs	r2, #0
 8011996:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011998:	480a      	ldr	r0, [pc, #40]	; (80119c4 <USBH_LL_Init+0x74>)
 801199a:	f7f1 fbb0 	bl	80030fe <HAL_HCD_Init>
 801199e:	4603      	mov	r3, r0
 80119a0:	2b00      	cmp	r3, #0
 80119a2:	d001      	beq.n	80119a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80119a4:	f7ef fe4a 	bl	800163c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80119a8:	4806      	ldr	r0, [pc, #24]	; (80119c4 <USBH_LL_Init+0x74>)
 80119aa:	f7f1 ff94 	bl	80038d6 <HAL_HCD_GetCurrentFrame>
 80119ae:	4603      	mov	r3, r0
 80119b0:	4619      	mov	r1, r3
 80119b2:	6878      	ldr	r0, [r7, #4]
 80119b4:	f7fe f9be 	bl	800fd34 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80119b8:	2300      	movs	r3, #0
}
 80119ba:	4618      	mov	r0, r3
 80119bc:	3708      	adds	r7, #8
 80119be:	46bd      	mov	sp, r7
 80119c0:	bd80      	pop	{r7, pc}
 80119c2:	bf00      	nop
 80119c4:	20002454 	.word	0x20002454

080119c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80119c8:	b580      	push	{r7, lr}
 80119ca:	b084      	sub	sp, #16
 80119cc:	af00      	add	r7, sp, #0
 80119ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119d0:	2300      	movs	r3, #0
 80119d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80119d4:	2300      	movs	r3, #0
 80119d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80119d8:	687b      	ldr	r3, [r7, #4]
 80119da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80119de:	4618      	mov	r0, r3
 80119e0:	f7f1 ff03 	bl	80037ea <HAL_HCD_Start>
 80119e4:	4603      	mov	r3, r0
 80119e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80119e8:	7bfb      	ldrb	r3, [r7, #15]
 80119ea:	4618      	mov	r0, r3
 80119ec:	f000 f95c 	bl	8011ca8 <USBH_Get_USB_Status>
 80119f0:	4603      	mov	r3, r0
 80119f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80119f6:	4618      	mov	r0, r3
 80119f8:	3710      	adds	r7, #16
 80119fa:	46bd      	mov	sp, r7
 80119fc:	bd80      	pop	{r7, pc}

080119fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80119fe:	b580      	push	{r7, lr}
 8011a00:	b084      	sub	sp, #16
 8011a02:	af00      	add	r7, sp, #0
 8011a04:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a06:	2300      	movs	r3, #0
 8011a08:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a14:	4618      	mov	r0, r3
 8011a16:	f7f1 ff0b 	bl	8003830 <HAL_HCD_Stop>
 8011a1a:	4603      	mov	r3, r0
 8011a1c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011a1e:	7bfb      	ldrb	r3, [r7, #15]
 8011a20:	4618      	mov	r0, r3
 8011a22:	f000 f941 	bl	8011ca8 <USBH_Get_USB_Status>
 8011a26:	4603      	mov	r3, r0
 8011a28:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a2c:	4618      	mov	r0, r3
 8011a2e:	3710      	adds	r7, #16
 8011a30:	46bd      	mov	sp, r7
 8011a32:	bd80      	pop	{r7, pc}

08011a34 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
 8011a3a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011a3c:	2301      	movs	r3, #1
 8011a3e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011a40:	687b      	ldr	r3, [r7, #4]
 8011a42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a46:	4618      	mov	r0, r3
 8011a48:	f7f1 ff53 	bl	80038f2 <HAL_HCD_GetCurrentSpeed>
 8011a4c:	4603      	mov	r3, r0
 8011a4e:	2b02      	cmp	r3, #2
 8011a50:	d00c      	beq.n	8011a6c <USBH_LL_GetSpeed+0x38>
 8011a52:	2b02      	cmp	r3, #2
 8011a54:	d80d      	bhi.n	8011a72 <USBH_LL_GetSpeed+0x3e>
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d002      	beq.n	8011a60 <USBH_LL_GetSpeed+0x2c>
 8011a5a:	2b01      	cmp	r3, #1
 8011a5c:	d003      	beq.n	8011a66 <USBH_LL_GetSpeed+0x32>
 8011a5e:	e008      	b.n	8011a72 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011a60:	2300      	movs	r3, #0
 8011a62:	73fb      	strb	r3, [r7, #15]
    break;
 8011a64:	e008      	b.n	8011a78 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011a66:	2301      	movs	r3, #1
 8011a68:	73fb      	strb	r3, [r7, #15]
    break;
 8011a6a:	e005      	b.n	8011a78 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011a6c:	2302      	movs	r3, #2
 8011a6e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a70:	e002      	b.n	8011a78 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8011a72:	2301      	movs	r3, #1
 8011a74:	73fb      	strb	r3, [r7, #15]
    break;
 8011a76:	bf00      	nop
  }
  return  speed;
 8011a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a7a:	4618      	mov	r0, r3
 8011a7c:	3710      	adds	r7, #16
 8011a7e:	46bd      	mov	sp, r7
 8011a80:	bd80      	pop	{r7, pc}

08011a82 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8011a82:	b580      	push	{r7, lr}
 8011a84:	b084      	sub	sp, #16
 8011a86:	af00      	add	r7, sp, #0
 8011a88:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011a8e:	2300      	movs	r3, #0
 8011a90:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8011a92:	687b      	ldr	r3, [r7, #4]
 8011a94:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7f1 fee6 	bl	800386a <HAL_HCD_ResetPort>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011aa2:	7bfb      	ldrb	r3, [r7, #15]
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	f000 f8ff 	bl	8011ca8 <USBH_Get_USB_Status>
 8011aaa:	4603      	mov	r3, r0
 8011aac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011aae:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ab0:	4618      	mov	r0, r3
 8011ab2:	3710      	adds	r7, #16
 8011ab4:	46bd      	mov	sp, r7
 8011ab6:	bd80      	pop	{r7, pc}

08011ab8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011ab8:	b580      	push	{r7, lr}
 8011aba:	b082      	sub	sp, #8
 8011abc:	af00      	add	r7, sp, #0
 8011abe:	6078      	str	r0, [r7, #4]
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011aca:	78fa      	ldrb	r2, [r7, #3]
 8011acc:	4611      	mov	r1, r2
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7f1 feed 	bl	80038ae <HAL_HCD_HC_GetXferCount>
 8011ad4:	4603      	mov	r3, r0
}
 8011ad6:	4618      	mov	r0, r3
 8011ad8:	3708      	adds	r7, #8
 8011ada:	46bd      	mov	sp, r7
 8011adc:	bd80      	pop	{r7, pc}

08011ade <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8011ade:	b590      	push	{r4, r7, lr}
 8011ae0:	b089      	sub	sp, #36	; 0x24
 8011ae2:	af04      	add	r7, sp, #16
 8011ae4:	6078      	str	r0, [r7, #4]
 8011ae6:	4608      	mov	r0, r1
 8011ae8:	4611      	mov	r1, r2
 8011aea:	461a      	mov	r2, r3
 8011aec:	4603      	mov	r3, r0
 8011aee:	70fb      	strb	r3, [r7, #3]
 8011af0:	460b      	mov	r3, r1
 8011af2:	70bb      	strb	r3, [r7, #2]
 8011af4:	4613      	mov	r3, r2
 8011af6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011af8:	2300      	movs	r3, #0
 8011afa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011afc:	2300      	movs	r3, #0
 8011afe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011b06:	787c      	ldrb	r4, [r7, #1]
 8011b08:	78ba      	ldrb	r2, [r7, #2]
 8011b0a:	78f9      	ldrb	r1, [r7, #3]
 8011b0c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011b0e:	9302      	str	r3, [sp, #8]
 8011b10:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011b14:	9301      	str	r3, [sp, #4]
 8011b16:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011b1a:	9300      	str	r3, [sp, #0]
 8011b1c:	4623      	mov	r3, r4
 8011b1e:	f7f1 fb50 	bl	80031c2 <HAL_HCD_HC_Init>
 8011b22:	4603      	mov	r3, r0
 8011b24:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b26:	7bfb      	ldrb	r3, [r7, #15]
 8011b28:	4618      	mov	r0, r3
 8011b2a:	f000 f8bd 	bl	8011ca8 <USBH_Get_USB_Status>
 8011b2e:	4603      	mov	r3, r0
 8011b30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b32:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3714      	adds	r7, #20
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd90      	pop	{r4, r7, pc}

08011b3c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b084      	sub	sp, #16
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	460b      	mov	r3, r1
 8011b46:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b48:	2300      	movs	r3, #0
 8011b4a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b4c:	2300      	movs	r3, #0
 8011b4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011b56:	78fa      	ldrb	r2, [r7, #3]
 8011b58:	4611      	mov	r1, r2
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	f7f1 fbc0 	bl	80032e0 <HAL_HCD_HC_Halt>
 8011b60:	4603      	mov	r3, r0
 8011b62:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011b64:	7bfb      	ldrb	r3, [r7, #15]
 8011b66:	4618      	mov	r0, r3
 8011b68:	f000 f89e 	bl	8011ca8 <USBH_Get_USB_Status>
 8011b6c:	4603      	mov	r3, r0
 8011b6e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b70:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b72:	4618      	mov	r0, r3
 8011b74:	3710      	adds	r7, #16
 8011b76:	46bd      	mov	sp, r7
 8011b78:	bd80      	pop	{r7, pc}

08011b7a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8011b7a:	b590      	push	{r4, r7, lr}
 8011b7c:	b089      	sub	sp, #36	; 0x24
 8011b7e:	af04      	add	r7, sp, #16
 8011b80:	6078      	str	r0, [r7, #4]
 8011b82:	4608      	mov	r0, r1
 8011b84:	4611      	mov	r1, r2
 8011b86:	461a      	mov	r2, r3
 8011b88:	4603      	mov	r3, r0
 8011b8a:	70fb      	strb	r3, [r7, #3]
 8011b8c:	460b      	mov	r3, r1
 8011b8e:	70bb      	strb	r3, [r7, #2]
 8011b90:	4613      	mov	r3, r2
 8011b92:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b94:	2300      	movs	r3, #0
 8011b96:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011b98:	2300      	movs	r3, #0
 8011b9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8011ba2:	787c      	ldrb	r4, [r7, #1]
 8011ba4:	78ba      	ldrb	r2, [r7, #2]
 8011ba6:	78f9      	ldrb	r1, [r7, #3]
 8011ba8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8011bac:	9303      	str	r3, [sp, #12]
 8011bae:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011bb0:	9302      	str	r3, [sp, #8]
 8011bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bb4:	9301      	str	r3, [sp, #4]
 8011bb6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8011bba:	9300      	str	r3, [sp, #0]
 8011bbc:	4623      	mov	r3, r4
 8011bbe:	f7f1 fbb3 	bl	8003328 <HAL_HCD_HC_SubmitRequest>
 8011bc2:	4603      	mov	r3, r0
 8011bc4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8011bc6:	7bfb      	ldrb	r3, [r7, #15]
 8011bc8:	4618      	mov	r0, r3
 8011bca:	f000 f86d 	bl	8011ca8 <USBH_Get_USB_Status>
 8011bce:	4603      	mov	r3, r0
 8011bd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011bd2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011bd4:	4618      	mov	r0, r3
 8011bd6:	3714      	adds	r7, #20
 8011bd8:	46bd      	mov	sp, r7
 8011bda:	bd90      	pop	{r4, r7, pc}

08011bdc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
 8011be4:	460b      	mov	r3, r1
 8011be6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8011be8:	687b      	ldr	r3, [r7, #4]
 8011bea:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011bee:	78fa      	ldrb	r2, [r7, #3]
 8011bf0:	4611      	mov	r1, r2
 8011bf2:	4618      	mov	r0, r3
 8011bf4:	f7f1 fe47 	bl	8003886 <HAL_HCD_HC_GetURBState>
 8011bf8:	4603      	mov	r3, r0
}
 8011bfa:	4618      	mov	r0, r3
 8011bfc:	3708      	adds	r7, #8
 8011bfe:	46bd      	mov	sp, r7
 8011c00:	bd80      	pop	{r7, pc}

08011c02 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8011c02:	b580      	push	{r7, lr}
 8011c04:	b082      	sub	sp, #8
 8011c06:	af00      	add	r7, sp, #0
 8011c08:	6078      	str	r0, [r7, #4]
 8011c0a:	460b      	mov	r3, r1
 8011c0c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8011c0e:	687b      	ldr	r3, [r7, #4]
 8011c10:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011c14:	2b01      	cmp	r3, #1
 8011c16:	d103      	bne.n	8011c20 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8011c18:	78fb      	ldrb	r3, [r7, #3]
 8011c1a:	4618      	mov	r0, r3
 8011c1c:	f000 f870 	bl	8011d00 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8011c20:	20c8      	movs	r0, #200	; 0xc8
 8011c22:	f7f0 f9c1 	bl	8001fa8 <HAL_Delay>
  return USBH_OK;
 8011c26:	2300      	movs	r3, #0
}
 8011c28:	4618      	mov	r0, r3
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}

08011c30 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8011c30:	b480      	push	{r7}
 8011c32:	b085      	sub	sp, #20
 8011c34:	af00      	add	r7, sp, #0
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	460b      	mov	r3, r1
 8011c3a:	70fb      	strb	r3, [r7, #3]
 8011c3c:	4613      	mov	r3, r2
 8011c3e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011c46:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8011c48:	78fb      	ldrb	r3, [r7, #3]
 8011c4a:	68fa      	ldr	r2, [r7, #12]
 8011c4c:	212c      	movs	r1, #44	; 0x2c
 8011c4e:	fb01 f303 	mul.w	r3, r1, r3
 8011c52:	4413      	add	r3, r2
 8011c54:	333b      	adds	r3, #59	; 0x3b
 8011c56:	781b      	ldrb	r3, [r3, #0]
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	d009      	beq.n	8011c70 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8011c5c:	78fb      	ldrb	r3, [r7, #3]
 8011c5e:	68fa      	ldr	r2, [r7, #12]
 8011c60:	212c      	movs	r1, #44	; 0x2c
 8011c62:	fb01 f303 	mul.w	r3, r1, r3
 8011c66:	4413      	add	r3, r2
 8011c68:	3354      	adds	r3, #84	; 0x54
 8011c6a:	78ba      	ldrb	r2, [r7, #2]
 8011c6c:	701a      	strb	r2, [r3, #0]
 8011c6e:	e008      	b.n	8011c82 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8011c70:	78fb      	ldrb	r3, [r7, #3]
 8011c72:	68fa      	ldr	r2, [r7, #12]
 8011c74:	212c      	movs	r1, #44	; 0x2c
 8011c76:	fb01 f303 	mul.w	r3, r1, r3
 8011c7a:	4413      	add	r3, r2
 8011c7c:	3355      	adds	r3, #85	; 0x55
 8011c7e:	78ba      	ldrb	r2, [r7, #2]
 8011c80:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8011c82:	2300      	movs	r3, #0
}
 8011c84:	4618      	mov	r0, r3
 8011c86:	3714      	adds	r7, #20
 8011c88:	46bd      	mov	sp, r7
 8011c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c8e:	4770      	bx	lr

08011c90 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8011c90:	b580      	push	{r7, lr}
 8011c92:	b082      	sub	sp, #8
 8011c94:	af00      	add	r7, sp, #0
 8011c96:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8011c98:	6878      	ldr	r0, [r7, #4]
 8011c9a:	f7f0 f985 	bl	8001fa8 <HAL_Delay>
}
 8011c9e:	bf00      	nop
 8011ca0:	3708      	adds	r7, #8
 8011ca2:	46bd      	mov	sp, r7
 8011ca4:	bd80      	pop	{r7, pc}
	...

08011ca8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011ca8:	b480      	push	{r7}
 8011caa:	b085      	sub	sp, #20
 8011cac:	af00      	add	r7, sp, #0
 8011cae:	4603      	mov	r3, r0
 8011cb0:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011cb2:	2300      	movs	r3, #0
 8011cb4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011cb6:	79fb      	ldrb	r3, [r7, #7]
 8011cb8:	2b03      	cmp	r3, #3
 8011cba:	d817      	bhi.n	8011cec <USBH_Get_USB_Status+0x44>
 8011cbc:	a201      	add	r2, pc, #4	; (adr r2, 8011cc4 <USBH_Get_USB_Status+0x1c>)
 8011cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011cc2:	bf00      	nop
 8011cc4:	08011cd5 	.word	0x08011cd5
 8011cc8:	08011cdb 	.word	0x08011cdb
 8011ccc:	08011ce1 	.word	0x08011ce1
 8011cd0:	08011ce7 	.word	0x08011ce7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8011cd4:	2300      	movs	r3, #0
 8011cd6:	73fb      	strb	r3, [r7, #15]
    break;
 8011cd8:	e00b      	b.n	8011cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8011cda:	2302      	movs	r3, #2
 8011cdc:	73fb      	strb	r3, [r7, #15]
    break;
 8011cde:	e008      	b.n	8011cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8011ce0:	2301      	movs	r3, #1
 8011ce2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ce4:	e005      	b.n	8011cf2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8011ce6:	2302      	movs	r3, #2
 8011ce8:	73fb      	strb	r3, [r7, #15]
    break;
 8011cea:	e002      	b.n	8011cf2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8011cec:	2302      	movs	r3, #2
 8011cee:	73fb      	strb	r3, [r7, #15]
    break;
 8011cf0:	bf00      	nop
  }
  return usb_status;
 8011cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cf4:	4618      	mov	r0, r3
 8011cf6:	3714      	adds	r7, #20
 8011cf8:	46bd      	mov	sp, r7
 8011cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cfe:	4770      	bx	lr

08011d00 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8011d00:	b580      	push	{r7, lr}
 8011d02:	b084      	sub	sp, #16
 8011d04:	af00      	add	r7, sp, #0
 8011d06:	4603      	mov	r3, r0
 8011d08:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8011d0a:	79fb      	ldrb	r3, [r7, #7]
 8011d0c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8011d0e:	79fb      	ldrb	r3, [r7, #7]
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d102      	bne.n	8011d1a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8011d14:	2300      	movs	r3, #0
 8011d16:	73fb      	strb	r3, [r7, #15]
 8011d18:	e001      	b.n	8011d1e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 8011d1e:	7bfb      	ldrb	r3, [r7, #15]
 8011d20:	461a      	mov	r2, r3
 8011d22:	2104      	movs	r1, #4
 8011d24:	4803      	ldr	r0, [pc, #12]	; (8011d34 <MX_DriverVbusFS+0x34>)
 8011d26:	f7f1 f9b7 	bl	8003098 <HAL_GPIO_WritePin>
}
 8011d2a:	bf00      	nop
 8011d2c:	3710      	adds	r7, #16
 8011d2e:	46bd      	mov	sp, r7
 8011d30:	bd80      	pop	{r7, pc}
 8011d32:	bf00      	nop
 8011d34:	40022000 	.word	0x40022000

08011d38 <__errno>:
 8011d38:	4b01      	ldr	r3, [pc, #4]	; (8011d40 <__errno+0x8>)
 8011d3a:	6818      	ldr	r0, [r3, #0]
 8011d3c:	4770      	bx	lr
 8011d3e:	bf00      	nop
 8011d40:	2000012c 	.word	0x2000012c

08011d44 <__libc_init_array>:
 8011d44:	b570      	push	{r4, r5, r6, lr}
 8011d46:	4d0d      	ldr	r5, [pc, #52]	; (8011d7c <__libc_init_array+0x38>)
 8011d48:	4c0d      	ldr	r4, [pc, #52]	; (8011d80 <__libc_init_array+0x3c>)
 8011d4a:	1b64      	subs	r4, r4, r5
 8011d4c:	10a4      	asrs	r4, r4, #2
 8011d4e:	2600      	movs	r6, #0
 8011d50:	42a6      	cmp	r6, r4
 8011d52:	d109      	bne.n	8011d68 <__libc_init_array+0x24>
 8011d54:	4d0b      	ldr	r5, [pc, #44]	; (8011d84 <__libc_init_array+0x40>)
 8011d56:	4c0c      	ldr	r4, [pc, #48]	; (8011d88 <__libc_init_array+0x44>)
 8011d58:	f002 fd3c 	bl	80147d4 <_init>
 8011d5c:	1b64      	subs	r4, r4, r5
 8011d5e:	10a4      	asrs	r4, r4, #2
 8011d60:	2600      	movs	r6, #0
 8011d62:	42a6      	cmp	r6, r4
 8011d64:	d105      	bne.n	8011d72 <__libc_init_array+0x2e>
 8011d66:	bd70      	pop	{r4, r5, r6, pc}
 8011d68:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d6c:	4798      	blx	r3
 8011d6e:	3601      	adds	r6, #1
 8011d70:	e7ee      	b.n	8011d50 <__libc_init_array+0xc>
 8011d72:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d76:	4798      	blx	r3
 8011d78:	3601      	adds	r6, #1
 8011d7a:	e7f2      	b.n	8011d62 <__libc_init_array+0x1e>
 8011d7c:	08014c54 	.word	0x08014c54
 8011d80:	08014c54 	.word	0x08014c54
 8011d84:	08014c54 	.word	0x08014c54
 8011d88:	08014c58 	.word	0x08014c58

08011d8c <malloc>:
 8011d8c:	4b02      	ldr	r3, [pc, #8]	; (8011d98 <malloc+0xc>)
 8011d8e:	4601      	mov	r1, r0
 8011d90:	6818      	ldr	r0, [r3, #0]
 8011d92:	f000 b87f 	b.w	8011e94 <_malloc_r>
 8011d96:	bf00      	nop
 8011d98:	2000012c 	.word	0x2000012c

08011d9c <free>:
 8011d9c:	4b02      	ldr	r3, [pc, #8]	; (8011da8 <free+0xc>)
 8011d9e:	4601      	mov	r1, r0
 8011da0:	6818      	ldr	r0, [r3, #0]
 8011da2:	f000 b80b 	b.w	8011dbc <_free_r>
 8011da6:	bf00      	nop
 8011da8:	2000012c 	.word	0x2000012c

08011dac <memset>:
 8011dac:	4402      	add	r2, r0
 8011dae:	4603      	mov	r3, r0
 8011db0:	4293      	cmp	r3, r2
 8011db2:	d100      	bne.n	8011db6 <memset+0xa>
 8011db4:	4770      	bx	lr
 8011db6:	f803 1b01 	strb.w	r1, [r3], #1
 8011dba:	e7f9      	b.n	8011db0 <memset+0x4>

08011dbc <_free_r>:
 8011dbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011dbe:	2900      	cmp	r1, #0
 8011dc0:	d044      	beq.n	8011e4c <_free_r+0x90>
 8011dc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011dc6:	9001      	str	r0, [sp, #4]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	f1a1 0404 	sub.w	r4, r1, #4
 8011dce:	bfb8      	it	lt
 8011dd0:	18e4      	addlt	r4, r4, r3
 8011dd2:	f001 fbd9 	bl	8013588 <__malloc_lock>
 8011dd6:	4a1e      	ldr	r2, [pc, #120]	; (8011e50 <_free_r+0x94>)
 8011dd8:	9801      	ldr	r0, [sp, #4]
 8011dda:	6813      	ldr	r3, [r2, #0]
 8011ddc:	b933      	cbnz	r3, 8011dec <_free_r+0x30>
 8011dde:	6063      	str	r3, [r4, #4]
 8011de0:	6014      	str	r4, [r2, #0]
 8011de2:	b003      	add	sp, #12
 8011de4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011de8:	f001 bbd4 	b.w	8013594 <__malloc_unlock>
 8011dec:	42a3      	cmp	r3, r4
 8011dee:	d908      	bls.n	8011e02 <_free_r+0x46>
 8011df0:	6825      	ldr	r5, [r4, #0]
 8011df2:	1961      	adds	r1, r4, r5
 8011df4:	428b      	cmp	r3, r1
 8011df6:	bf01      	itttt	eq
 8011df8:	6819      	ldreq	r1, [r3, #0]
 8011dfa:	685b      	ldreq	r3, [r3, #4]
 8011dfc:	1949      	addeq	r1, r1, r5
 8011dfe:	6021      	streq	r1, [r4, #0]
 8011e00:	e7ed      	b.n	8011dde <_free_r+0x22>
 8011e02:	461a      	mov	r2, r3
 8011e04:	685b      	ldr	r3, [r3, #4]
 8011e06:	b10b      	cbz	r3, 8011e0c <_free_r+0x50>
 8011e08:	42a3      	cmp	r3, r4
 8011e0a:	d9fa      	bls.n	8011e02 <_free_r+0x46>
 8011e0c:	6811      	ldr	r1, [r2, #0]
 8011e0e:	1855      	adds	r5, r2, r1
 8011e10:	42a5      	cmp	r5, r4
 8011e12:	d10b      	bne.n	8011e2c <_free_r+0x70>
 8011e14:	6824      	ldr	r4, [r4, #0]
 8011e16:	4421      	add	r1, r4
 8011e18:	1854      	adds	r4, r2, r1
 8011e1a:	42a3      	cmp	r3, r4
 8011e1c:	6011      	str	r1, [r2, #0]
 8011e1e:	d1e0      	bne.n	8011de2 <_free_r+0x26>
 8011e20:	681c      	ldr	r4, [r3, #0]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	6053      	str	r3, [r2, #4]
 8011e26:	4421      	add	r1, r4
 8011e28:	6011      	str	r1, [r2, #0]
 8011e2a:	e7da      	b.n	8011de2 <_free_r+0x26>
 8011e2c:	d902      	bls.n	8011e34 <_free_r+0x78>
 8011e2e:	230c      	movs	r3, #12
 8011e30:	6003      	str	r3, [r0, #0]
 8011e32:	e7d6      	b.n	8011de2 <_free_r+0x26>
 8011e34:	6825      	ldr	r5, [r4, #0]
 8011e36:	1961      	adds	r1, r4, r5
 8011e38:	428b      	cmp	r3, r1
 8011e3a:	bf04      	itt	eq
 8011e3c:	6819      	ldreq	r1, [r3, #0]
 8011e3e:	685b      	ldreq	r3, [r3, #4]
 8011e40:	6063      	str	r3, [r4, #4]
 8011e42:	bf04      	itt	eq
 8011e44:	1949      	addeq	r1, r1, r5
 8011e46:	6021      	streq	r1, [r4, #0]
 8011e48:	6054      	str	r4, [r2, #4]
 8011e4a:	e7ca      	b.n	8011de2 <_free_r+0x26>
 8011e4c:	b003      	add	sp, #12
 8011e4e:	bd30      	pop	{r4, r5, pc}
 8011e50:	20002758 	.word	0x20002758

08011e54 <sbrk_aligned>:
 8011e54:	b570      	push	{r4, r5, r6, lr}
 8011e56:	4e0e      	ldr	r6, [pc, #56]	; (8011e90 <sbrk_aligned+0x3c>)
 8011e58:	460c      	mov	r4, r1
 8011e5a:	6831      	ldr	r1, [r6, #0]
 8011e5c:	4605      	mov	r5, r0
 8011e5e:	b911      	cbnz	r1, 8011e66 <sbrk_aligned+0x12>
 8011e60:	f000 fcf6 	bl	8012850 <_sbrk_r>
 8011e64:	6030      	str	r0, [r6, #0]
 8011e66:	4621      	mov	r1, r4
 8011e68:	4628      	mov	r0, r5
 8011e6a:	f000 fcf1 	bl	8012850 <_sbrk_r>
 8011e6e:	1c43      	adds	r3, r0, #1
 8011e70:	d00a      	beq.n	8011e88 <sbrk_aligned+0x34>
 8011e72:	1cc4      	adds	r4, r0, #3
 8011e74:	f024 0403 	bic.w	r4, r4, #3
 8011e78:	42a0      	cmp	r0, r4
 8011e7a:	d007      	beq.n	8011e8c <sbrk_aligned+0x38>
 8011e7c:	1a21      	subs	r1, r4, r0
 8011e7e:	4628      	mov	r0, r5
 8011e80:	f000 fce6 	bl	8012850 <_sbrk_r>
 8011e84:	3001      	adds	r0, #1
 8011e86:	d101      	bne.n	8011e8c <sbrk_aligned+0x38>
 8011e88:	f04f 34ff 	mov.w	r4, #4294967295
 8011e8c:	4620      	mov	r0, r4
 8011e8e:	bd70      	pop	{r4, r5, r6, pc}
 8011e90:	2000275c 	.word	0x2000275c

08011e94 <_malloc_r>:
 8011e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011e98:	1ccd      	adds	r5, r1, #3
 8011e9a:	f025 0503 	bic.w	r5, r5, #3
 8011e9e:	3508      	adds	r5, #8
 8011ea0:	2d0c      	cmp	r5, #12
 8011ea2:	bf38      	it	cc
 8011ea4:	250c      	movcc	r5, #12
 8011ea6:	2d00      	cmp	r5, #0
 8011ea8:	4607      	mov	r7, r0
 8011eaa:	db01      	blt.n	8011eb0 <_malloc_r+0x1c>
 8011eac:	42a9      	cmp	r1, r5
 8011eae:	d905      	bls.n	8011ebc <_malloc_r+0x28>
 8011eb0:	230c      	movs	r3, #12
 8011eb2:	603b      	str	r3, [r7, #0]
 8011eb4:	2600      	movs	r6, #0
 8011eb6:	4630      	mov	r0, r6
 8011eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ebc:	4e2e      	ldr	r6, [pc, #184]	; (8011f78 <_malloc_r+0xe4>)
 8011ebe:	f001 fb63 	bl	8013588 <__malloc_lock>
 8011ec2:	6833      	ldr	r3, [r6, #0]
 8011ec4:	461c      	mov	r4, r3
 8011ec6:	bb34      	cbnz	r4, 8011f16 <_malloc_r+0x82>
 8011ec8:	4629      	mov	r1, r5
 8011eca:	4638      	mov	r0, r7
 8011ecc:	f7ff ffc2 	bl	8011e54 <sbrk_aligned>
 8011ed0:	1c43      	adds	r3, r0, #1
 8011ed2:	4604      	mov	r4, r0
 8011ed4:	d14d      	bne.n	8011f72 <_malloc_r+0xde>
 8011ed6:	6834      	ldr	r4, [r6, #0]
 8011ed8:	4626      	mov	r6, r4
 8011eda:	2e00      	cmp	r6, #0
 8011edc:	d140      	bne.n	8011f60 <_malloc_r+0xcc>
 8011ede:	6823      	ldr	r3, [r4, #0]
 8011ee0:	4631      	mov	r1, r6
 8011ee2:	4638      	mov	r0, r7
 8011ee4:	eb04 0803 	add.w	r8, r4, r3
 8011ee8:	f000 fcb2 	bl	8012850 <_sbrk_r>
 8011eec:	4580      	cmp	r8, r0
 8011eee:	d13a      	bne.n	8011f66 <_malloc_r+0xd2>
 8011ef0:	6821      	ldr	r1, [r4, #0]
 8011ef2:	3503      	adds	r5, #3
 8011ef4:	1a6d      	subs	r5, r5, r1
 8011ef6:	f025 0503 	bic.w	r5, r5, #3
 8011efa:	3508      	adds	r5, #8
 8011efc:	2d0c      	cmp	r5, #12
 8011efe:	bf38      	it	cc
 8011f00:	250c      	movcc	r5, #12
 8011f02:	4629      	mov	r1, r5
 8011f04:	4638      	mov	r0, r7
 8011f06:	f7ff ffa5 	bl	8011e54 <sbrk_aligned>
 8011f0a:	3001      	adds	r0, #1
 8011f0c:	d02b      	beq.n	8011f66 <_malloc_r+0xd2>
 8011f0e:	6823      	ldr	r3, [r4, #0]
 8011f10:	442b      	add	r3, r5
 8011f12:	6023      	str	r3, [r4, #0]
 8011f14:	e00e      	b.n	8011f34 <_malloc_r+0xa0>
 8011f16:	6822      	ldr	r2, [r4, #0]
 8011f18:	1b52      	subs	r2, r2, r5
 8011f1a:	d41e      	bmi.n	8011f5a <_malloc_r+0xc6>
 8011f1c:	2a0b      	cmp	r2, #11
 8011f1e:	d916      	bls.n	8011f4e <_malloc_r+0xba>
 8011f20:	1961      	adds	r1, r4, r5
 8011f22:	42a3      	cmp	r3, r4
 8011f24:	6025      	str	r5, [r4, #0]
 8011f26:	bf18      	it	ne
 8011f28:	6059      	strne	r1, [r3, #4]
 8011f2a:	6863      	ldr	r3, [r4, #4]
 8011f2c:	bf08      	it	eq
 8011f2e:	6031      	streq	r1, [r6, #0]
 8011f30:	5162      	str	r2, [r4, r5]
 8011f32:	604b      	str	r3, [r1, #4]
 8011f34:	4638      	mov	r0, r7
 8011f36:	f104 060b 	add.w	r6, r4, #11
 8011f3a:	f001 fb2b 	bl	8013594 <__malloc_unlock>
 8011f3e:	f026 0607 	bic.w	r6, r6, #7
 8011f42:	1d23      	adds	r3, r4, #4
 8011f44:	1af2      	subs	r2, r6, r3
 8011f46:	d0b6      	beq.n	8011eb6 <_malloc_r+0x22>
 8011f48:	1b9b      	subs	r3, r3, r6
 8011f4a:	50a3      	str	r3, [r4, r2]
 8011f4c:	e7b3      	b.n	8011eb6 <_malloc_r+0x22>
 8011f4e:	6862      	ldr	r2, [r4, #4]
 8011f50:	42a3      	cmp	r3, r4
 8011f52:	bf0c      	ite	eq
 8011f54:	6032      	streq	r2, [r6, #0]
 8011f56:	605a      	strne	r2, [r3, #4]
 8011f58:	e7ec      	b.n	8011f34 <_malloc_r+0xa0>
 8011f5a:	4623      	mov	r3, r4
 8011f5c:	6864      	ldr	r4, [r4, #4]
 8011f5e:	e7b2      	b.n	8011ec6 <_malloc_r+0x32>
 8011f60:	4634      	mov	r4, r6
 8011f62:	6876      	ldr	r6, [r6, #4]
 8011f64:	e7b9      	b.n	8011eda <_malloc_r+0x46>
 8011f66:	230c      	movs	r3, #12
 8011f68:	603b      	str	r3, [r7, #0]
 8011f6a:	4638      	mov	r0, r7
 8011f6c:	f001 fb12 	bl	8013594 <__malloc_unlock>
 8011f70:	e7a1      	b.n	8011eb6 <_malloc_r+0x22>
 8011f72:	6025      	str	r5, [r4, #0]
 8011f74:	e7de      	b.n	8011f34 <_malloc_r+0xa0>
 8011f76:	bf00      	nop
 8011f78:	20002758 	.word	0x20002758

08011f7c <__cvt>:
 8011f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f80:	ec55 4b10 	vmov	r4, r5, d0
 8011f84:	2d00      	cmp	r5, #0
 8011f86:	460e      	mov	r6, r1
 8011f88:	4619      	mov	r1, r3
 8011f8a:	462b      	mov	r3, r5
 8011f8c:	bfbb      	ittet	lt
 8011f8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8011f92:	461d      	movlt	r5, r3
 8011f94:	2300      	movge	r3, #0
 8011f96:	232d      	movlt	r3, #45	; 0x2d
 8011f98:	700b      	strb	r3, [r1, #0]
 8011f9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8011f9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8011fa0:	4691      	mov	r9, r2
 8011fa2:	f023 0820 	bic.w	r8, r3, #32
 8011fa6:	bfbc      	itt	lt
 8011fa8:	4622      	movlt	r2, r4
 8011faa:	4614      	movlt	r4, r2
 8011fac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011fb0:	d005      	beq.n	8011fbe <__cvt+0x42>
 8011fb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8011fb6:	d100      	bne.n	8011fba <__cvt+0x3e>
 8011fb8:	3601      	adds	r6, #1
 8011fba:	2102      	movs	r1, #2
 8011fbc:	e000      	b.n	8011fc0 <__cvt+0x44>
 8011fbe:	2103      	movs	r1, #3
 8011fc0:	ab03      	add	r3, sp, #12
 8011fc2:	9301      	str	r3, [sp, #4]
 8011fc4:	ab02      	add	r3, sp, #8
 8011fc6:	9300      	str	r3, [sp, #0]
 8011fc8:	ec45 4b10 	vmov	d0, r4, r5
 8011fcc:	4653      	mov	r3, sl
 8011fce:	4632      	mov	r2, r6
 8011fd0:	f000 fcda 	bl	8012988 <_dtoa_r>
 8011fd4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8011fd8:	4607      	mov	r7, r0
 8011fda:	d102      	bne.n	8011fe2 <__cvt+0x66>
 8011fdc:	f019 0f01 	tst.w	r9, #1
 8011fe0:	d022      	beq.n	8012028 <__cvt+0xac>
 8011fe2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8011fe6:	eb07 0906 	add.w	r9, r7, r6
 8011fea:	d110      	bne.n	801200e <__cvt+0x92>
 8011fec:	783b      	ldrb	r3, [r7, #0]
 8011fee:	2b30      	cmp	r3, #48	; 0x30
 8011ff0:	d10a      	bne.n	8012008 <__cvt+0x8c>
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	2300      	movs	r3, #0
 8011ff6:	4620      	mov	r0, r4
 8011ff8:	4629      	mov	r1, r5
 8011ffa:	f7ee fd85 	bl	8000b08 <__aeabi_dcmpeq>
 8011ffe:	b918      	cbnz	r0, 8012008 <__cvt+0x8c>
 8012000:	f1c6 0601 	rsb	r6, r6, #1
 8012004:	f8ca 6000 	str.w	r6, [sl]
 8012008:	f8da 3000 	ldr.w	r3, [sl]
 801200c:	4499      	add	r9, r3
 801200e:	2200      	movs	r2, #0
 8012010:	2300      	movs	r3, #0
 8012012:	4620      	mov	r0, r4
 8012014:	4629      	mov	r1, r5
 8012016:	f7ee fd77 	bl	8000b08 <__aeabi_dcmpeq>
 801201a:	b108      	cbz	r0, 8012020 <__cvt+0xa4>
 801201c:	f8cd 900c 	str.w	r9, [sp, #12]
 8012020:	2230      	movs	r2, #48	; 0x30
 8012022:	9b03      	ldr	r3, [sp, #12]
 8012024:	454b      	cmp	r3, r9
 8012026:	d307      	bcc.n	8012038 <__cvt+0xbc>
 8012028:	9b03      	ldr	r3, [sp, #12]
 801202a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801202c:	1bdb      	subs	r3, r3, r7
 801202e:	4638      	mov	r0, r7
 8012030:	6013      	str	r3, [r2, #0]
 8012032:	b004      	add	sp, #16
 8012034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012038:	1c59      	adds	r1, r3, #1
 801203a:	9103      	str	r1, [sp, #12]
 801203c:	701a      	strb	r2, [r3, #0]
 801203e:	e7f0      	b.n	8012022 <__cvt+0xa6>

08012040 <__exponent>:
 8012040:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012042:	4603      	mov	r3, r0
 8012044:	2900      	cmp	r1, #0
 8012046:	bfb8      	it	lt
 8012048:	4249      	neglt	r1, r1
 801204a:	f803 2b02 	strb.w	r2, [r3], #2
 801204e:	bfb4      	ite	lt
 8012050:	222d      	movlt	r2, #45	; 0x2d
 8012052:	222b      	movge	r2, #43	; 0x2b
 8012054:	2909      	cmp	r1, #9
 8012056:	7042      	strb	r2, [r0, #1]
 8012058:	dd2a      	ble.n	80120b0 <__exponent+0x70>
 801205a:	f10d 0407 	add.w	r4, sp, #7
 801205e:	46a4      	mov	ip, r4
 8012060:	270a      	movs	r7, #10
 8012062:	46a6      	mov	lr, r4
 8012064:	460a      	mov	r2, r1
 8012066:	fb91 f6f7 	sdiv	r6, r1, r7
 801206a:	fb07 1516 	mls	r5, r7, r6, r1
 801206e:	3530      	adds	r5, #48	; 0x30
 8012070:	2a63      	cmp	r2, #99	; 0x63
 8012072:	f104 34ff 	add.w	r4, r4, #4294967295
 8012076:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801207a:	4631      	mov	r1, r6
 801207c:	dcf1      	bgt.n	8012062 <__exponent+0x22>
 801207e:	3130      	adds	r1, #48	; 0x30
 8012080:	f1ae 0502 	sub.w	r5, lr, #2
 8012084:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012088:	1c44      	adds	r4, r0, #1
 801208a:	4629      	mov	r1, r5
 801208c:	4561      	cmp	r1, ip
 801208e:	d30a      	bcc.n	80120a6 <__exponent+0x66>
 8012090:	f10d 0209 	add.w	r2, sp, #9
 8012094:	eba2 020e 	sub.w	r2, r2, lr
 8012098:	4565      	cmp	r5, ip
 801209a:	bf88      	it	hi
 801209c:	2200      	movhi	r2, #0
 801209e:	4413      	add	r3, r2
 80120a0:	1a18      	subs	r0, r3, r0
 80120a2:	b003      	add	sp, #12
 80120a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80120a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80120aa:	f804 2f01 	strb.w	r2, [r4, #1]!
 80120ae:	e7ed      	b.n	801208c <__exponent+0x4c>
 80120b0:	2330      	movs	r3, #48	; 0x30
 80120b2:	3130      	adds	r1, #48	; 0x30
 80120b4:	7083      	strb	r3, [r0, #2]
 80120b6:	70c1      	strb	r1, [r0, #3]
 80120b8:	1d03      	adds	r3, r0, #4
 80120ba:	e7f1      	b.n	80120a0 <__exponent+0x60>

080120bc <_printf_float>:
 80120bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80120c0:	ed2d 8b02 	vpush	{d8}
 80120c4:	b08d      	sub	sp, #52	; 0x34
 80120c6:	460c      	mov	r4, r1
 80120c8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80120cc:	4616      	mov	r6, r2
 80120ce:	461f      	mov	r7, r3
 80120d0:	4605      	mov	r5, r0
 80120d2:	f001 fa47 	bl	8013564 <_localeconv_r>
 80120d6:	f8d0 a000 	ldr.w	sl, [r0]
 80120da:	4650      	mov	r0, sl
 80120dc:	f7ee f898 	bl	8000210 <strlen>
 80120e0:	2300      	movs	r3, #0
 80120e2:	930a      	str	r3, [sp, #40]	; 0x28
 80120e4:	6823      	ldr	r3, [r4, #0]
 80120e6:	9305      	str	r3, [sp, #20]
 80120e8:	f8d8 3000 	ldr.w	r3, [r8]
 80120ec:	f894 b018 	ldrb.w	fp, [r4, #24]
 80120f0:	3307      	adds	r3, #7
 80120f2:	f023 0307 	bic.w	r3, r3, #7
 80120f6:	f103 0208 	add.w	r2, r3, #8
 80120fa:	f8c8 2000 	str.w	r2, [r8]
 80120fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012102:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012106:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801210a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801210e:	9307      	str	r3, [sp, #28]
 8012110:	f8cd 8018 	str.w	r8, [sp, #24]
 8012114:	ee08 0a10 	vmov	s16, r0
 8012118:	4b9f      	ldr	r3, [pc, #636]	; (8012398 <_printf_float+0x2dc>)
 801211a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801211e:	f04f 32ff 	mov.w	r2, #4294967295
 8012122:	f7ee fd23 	bl	8000b6c <__aeabi_dcmpun>
 8012126:	bb88      	cbnz	r0, 801218c <_printf_float+0xd0>
 8012128:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 801212c:	4b9a      	ldr	r3, [pc, #616]	; (8012398 <_printf_float+0x2dc>)
 801212e:	f04f 32ff 	mov.w	r2, #4294967295
 8012132:	f7ee fcfd 	bl	8000b30 <__aeabi_dcmple>
 8012136:	bb48      	cbnz	r0, 801218c <_printf_float+0xd0>
 8012138:	2200      	movs	r2, #0
 801213a:	2300      	movs	r3, #0
 801213c:	4640      	mov	r0, r8
 801213e:	4649      	mov	r1, r9
 8012140:	f7ee fcec 	bl	8000b1c <__aeabi_dcmplt>
 8012144:	b110      	cbz	r0, 801214c <_printf_float+0x90>
 8012146:	232d      	movs	r3, #45	; 0x2d
 8012148:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801214c:	4b93      	ldr	r3, [pc, #588]	; (801239c <_printf_float+0x2e0>)
 801214e:	4894      	ldr	r0, [pc, #592]	; (80123a0 <_printf_float+0x2e4>)
 8012150:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012154:	bf94      	ite	ls
 8012156:	4698      	movls	r8, r3
 8012158:	4680      	movhi	r8, r0
 801215a:	2303      	movs	r3, #3
 801215c:	6123      	str	r3, [r4, #16]
 801215e:	9b05      	ldr	r3, [sp, #20]
 8012160:	f023 0204 	bic.w	r2, r3, #4
 8012164:	6022      	str	r2, [r4, #0]
 8012166:	f04f 0900 	mov.w	r9, #0
 801216a:	9700      	str	r7, [sp, #0]
 801216c:	4633      	mov	r3, r6
 801216e:	aa0b      	add	r2, sp, #44	; 0x2c
 8012170:	4621      	mov	r1, r4
 8012172:	4628      	mov	r0, r5
 8012174:	f000 f9d8 	bl	8012528 <_printf_common>
 8012178:	3001      	adds	r0, #1
 801217a:	f040 8090 	bne.w	801229e <_printf_float+0x1e2>
 801217e:	f04f 30ff 	mov.w	r0, #4294967295
 8012182:	b00d      	add	sp, #52	; 0x34
 8012184:	ecbd 8b02 	vpop	{d8}
 8012188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801218c:	4642      	mov	r2, r8
 801218e:	464b      	mov	r3, r9
 8012190:	4640      	mov	r0, r8
 8012192:	4649      	mov	r1, r9
 8012194:	f7ee fcea 	bl	8000b6c <__aeabi_dcmpun>
 8012198:	b140      	cbz	r0, 80121ac <_printf_float+0xf0>
 801219a:	464b      	mov	r3, r9
 801219c:	2b00      	cmp	r3, #0
 801219e:	bfbc      	itt	lt
 80121a0:	232d      	movlt	r3, #45	; 0x2d
 80121a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80121a6:	487f      	ldr	r0, [pc, #508]	; (80123a4 <_printf_float+0x2e8>)
 80121a8:	4b7f      	ldr	r3, [pc, #508]	; (80123a8 <_printf_float+0x2ec>)
 80121aa:	e7d1      	b.n	8012150 <_printf_float+0x94>
 80121ac:	6863      	ldr	r3, [r4, #4]
 80121ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80121b2:	9206      	str	r2, [sp, #24]
 80121b4:	1c5a      	adds	r2, r3, #1
 80121b6:	d13f      	bne.n	8012238 <_printf_float+0x17c>
 80121b8:	2306      	movs	r3, #6
 80121ba:	6063      	str	r3, [r4, #4]
 80121bc:	9b05      	ldr	r3, [sp, #20]
 80121be:	6861      	ldr	r1, [r4, #4]
 80121c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80121c4:	2300      	movs	r3, #0
 80121c6:	9303      	str	r3, [sp, #12]
 80121c8:	ab0a      	add	r3, sp, #40	; 0x28
 80121ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 80121ce:	ab09      	add	r3, sp, #36	; 0x24
 80121d0:	ec49 8b10 	vmov	d0, r8, r9
 80121d4:	9300      	str	r3, [sp, #0]
 80121d6:	6022      	str	r2, [r4, #0]
 80121d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80121dc:	4628      	mov	r0, r5
 80121de:	f7ff fecd 	bl	8011f7c <__cvt>
 80121e2:	9b06      	ldr	r3, [sp, #24]
 80121e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80121e6:	2b47      	cmp	r3, #71	; 0x47
 80121e8:	4680      	mov	r8, r0
 80121ea:	d108      	bne.n	80121fe <_printf_float+0x142>
 80121ec:	1cc8      	adds	r0, r1, #3
 80121ee:	db02      	blt.n	80121f6 <_printf_float+0x13a>
 80121f0:	6863      	ldr	r3, [r4, #4]
 80121f2:	4299      	cmp	r1, r3
 80121f4:	dd41      	ble.n	801227a <_printf_float+0x1be>
 80121f6:	f1ab 0b02 	sub.w	fp, fp, #2
 80121fa:	fa5f fb8b 	uxtb.w	fp, fp
 80121fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012202:	d820      	bhi.n	8012246 <_printf_float+0x18a>
 8012204:	3901      	subs	r1, #1
 8012206:	465a      	mov	r2, fp
 8012208:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801220c:	9109      	str	r1, [sp, #36]	; 0x24
 801220e:	f7ff ff17 	bl	8012040 <__exponent>
 8012212:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012214:	1813      	adds	r3, r2, r0
 8012216:	2a01      	cmp	r2, #1
 8012218:	4681      	mov	r9, r0
 801221a:	6123      	str	r3, [r4, #16]
 801221c:	dc02      	bgt.n	8012224 <_printf_float+0x168>
 801221e:	6822      	ldr	r2, [r4, #0]
 8012220:	07d2      	lsls	r2, r2, #31
 8012222:	d501      	bpl.n	8012228 <_printf_float+0x16c>
 8012224:	3301      	adds	r3, #1
 8012226:	6123      	str	r3, [r4, #16]
 8012228:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 801222c:	2b00      	cmp	r3, #0
 801222e:	d09c      	beq.n	801216a <_printf_float+0xae>
 8012230:	232d      	movs	r3, #45	; 0x2d
 8012232:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012236:	e798      	b.n	801216a <_printf_float+0xae>
 8012238:	9a06      	ldr	r2, [sp, #24]
 801223a:	2a47      	cmp	r2, #71	; 0x47
 801223c:	d1be      	bne.n	80121bc <_printf_float+0x100>
 801223e:	2b00      	cmp	r3, #0
 8012240:	d1bc      	bne.n	80121bc <_printf_float+0x100>
 8012242:	2301      	movs	r3, #1
 8012244:	e7b9      	b.n	80121ba <_printf_float+0xfe>
 8012246:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 801224a:	d118      	bne.n	801227e <_printf_float+0x1c2>
 801224c:	2900      	cmp	r1, #0
 801224e:	6863      	ldr	r3, [r4, #4]
 8012250:	dd0b      	ble.n	801226a <_printf_float+0x1ae>
 8012252:	6121      	str	r1, [r4, #16]
 8012254:	b913      	cbnz	r3, 801225c <_printf_float+0x1a0>
 8012256:	6822      	ldr	r2, [r4, #0]
 8012258:	07d0      	lsls	r0, r2, #31
 801225a:	d502      	bpl.n	8012262 <_printf_float+0x1a6>
 801225c:	3301      	adds	r3, #1
 801225e:	440b      	add	r3, r1
 8012260:	6123      	str	r3, [r4, #16]
 8012262:	65a1      	str	r1, [r4, #88]	; 0x58
 8012264:	f04f 0900 	mov.w	r9, #0
 8012268:	e7de      	b.n	8012228 <_printf_float+0x16c>
 801226a:	b913      	cbnz	r3, 8012272 <_printf_float+0x1b6>
 801226c:	6822      	ldr	r2, [r4, #0]
 801226e:	07d2      	lsls	r2, r2, #31
 8012270:	d501      	bpl.n	8012276 <_printf_float+0x1ba>
 8012272:	3302      	adds	r3, #2
 8012274:	e7f4      	b.n	8012260 <_printf_float+0x1a4>
 8012276:	2301      	movs	r3, #1
 8012278:	e7f2      	b.n	8012260 <_printf_float+0x1a4>
 801227a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801227e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012280:	4299      	cmp	r1, r3
 8012282:	db05      	blt.n	8012290 <_printf_float+0x1d4>
 8012284:	6823      	ldr	r3, [r4, #0]
 8012286:	6121      	str	r1, [r4, #16]
 8012288:	07d8      	lsls	r0, r3, #31
 801228a:	d5ea      	bpl.n	8012262 <_printf_float+0x1a6>
 801228c:	1c4b      	adds	r3, r1, #1
 801228e:	e7e7      	b.n	8012260 <_printf_float+0x1a4>
 8012290:	2900      	cmp	r1, #0
 8012292:	bfd4      	ite	le
 8012294:	f1c1 0202 	rsble	r2, r1, #2
 8012298:	2201      	movgt	r2, #1
 801229a:	4413      	add	r3, r2
 801229c:	e7e0      	b.n	8012260 <_printf_float+0x1a4>
 801229e:	6823      	ldr	r3, [r4, #0]
 80122a0:	055a      	lsls	r2, r3, #21
 80122a2:	d407      	bmi.n	80122b4 <_printf_float+0x1f8>
 80122a4:	6923      	ldr	r3, [r4, #16]
 80122a6:	4642      	mov	r2, r8
 80122a8:	4631      	mov	r1, r6
 80122aa:	4628      	mov	r0, r5
 80122ac:	47b8      	blx	r7
 80122ae:	3001      	adds	r0, #1
 80122b0:	d12c      	bne.n	801230c <_printf_float+0x250>
 80122b2:	e764      	b.n	801217e <_printf_float+0xc2>
 80122b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80122b8:	f240 80e0 	bls.w	801247c <_printf_float+0x3c0>
 80122bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80122c0:	2200      	movs	r2, #0
 80122c2:	2300      	movs	r3, #0
 80122c4:	f7ee fc20 	bl	8000b08 <__aeabi_dcmpeq>
 80122c8:	2800      	cmp	r0, #0
 80122ca:	d034      	beq.n	8012336 <_printf_float+0x27a>
 80122cc:	4a37      	ldr	r2, [pc, #220]	; (80123ac <_printf_float+0x2f0>)
 80122ce:	2301      	movs	r3, #1
 80122d0:	4631      	mov	r1, r6
 80122d2:	4628      	mov	r0, r5
 80122d4:	47b8      	blx	r7
 80122d6:	3001      	adds	r0, #1
 80122d8:	f43f af51 	beq.w	801217e <_printf_float+0xc2>
 80122dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80122e0:	429a      	cmp	r2, r3
 80122e2:	db02      	blt.n	80122ea <_printf_float+0x22e>
 80122e4:	6823      	ldr	r3, [r4, #0]
 80122e6:	07d8      	lsls	r0, r3, #31
 80122e8:	d510      	bpl.n	801230c <_printf_float+0x250>
 80122ea:	ee18 3a10 	vmov	r3, s16
 80122ee:	4652      	mov	r2, sl
 80122f0:	4631      	mov	r1, r6
 80122f2:	4628      	mov	r0, r5
 80122f4:	47b8      	blx	r7
 80122f6:	3001      	adds	r0, #1
 80122f8:	f43f af41 	beq.w	801217e <_printf_float+0xc2>
 80122fc:	f04f 0800 	mov.w	r8, #0
 8012300:	f104 091a 	add.w	r9, r4, #26
 8012304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012306:	3b01      	subs	r3, #1
 8012308:	4543      	cmp	r3, r8
 801230a:	dc09      	bgt.n	8012320 <_printf_float+0x264>
 801230c:	6823      	ldr	r3, [r4, #0]
 801230e:	079b      	lsls	r3, r3, #30
 8012310:	f100 8105 	bmi.w	801251e <_printf_float+0x462>
 8012314:	68e0      	ldr	r0, [r4, #12]
 8012316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012318:	4298      	cmp	r0, r3
 801231a:	bfb8      	it	lt
 801231c:	4618      	movlt	r0, r3
 801231e:	e730      	b.n	8012182 <_printf_float+0xc6>
 8012320:	2301      	movs	r3, #1
 8012322:	464a      	mov	r2, r9
 8012324:	4631      	mov	r1, r6
 8012326:	4628      	mov	r0, r5
 8012328:	47b8      	blx	r7
 801232a:	3001      	adds	r0, #1
 801232c:	f43f af27 	beq.w	801217e <_printf_float+0xc2>
 8012330:	f108 0801 	add.w	r8, r8, #1
 8012334:	e7e6      	b.n	8012304 <_printf_float+0x248>
 8012336:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012338:	2b00      	cmp	r3, #0
 801233a:	dc39      	bgt.n	80123b0 <_printf_float+0x2f4>
 801233c:	4a1b      	ldr	r2, [pc, #108]	; (80123ac <_printf_float+0x2f0>)
 801233e:	2301      	movs	r3, #1
 8012340:	4631      	mov	r1, r6
 8012342:	4628      	mov	r0, r5
 8012344:	47b8      	blx	r7
 8012346:	3001      	adds	r0, #1
 8012348:	f43f af19 	beq.w	801217e <_printf_float+0xc2>
 801234c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012350:	4313      	orrs	r3, r2
 8012352:	d102      	bne.n	801235a <_printf_float+0x29e>
 8012354:	6823      	ldr	r3, [r4, #0]
 8012356:	07d9      	lsls	r1, r3, #31
 8012358:	d5d8      	bpl.n	801230c <_printf_float+0x250>
 801235a:	ee18 3a10 	vmov	r3, s16
 801235e:	4652      	mov	r2, sl
 8012360:	4631      	mov	r1, r6
 8012362:	4628      	mov	r0, r5
 8012364:	47b8      	blx	r7
 8012366:	3001      	adds	r0, #1
 8012368:	f43f af09 	beq.w	801217e <_printf_float+0xc2>
 801236c:	f04f 0900 	mov.w	r9, #0
 8012370:	f104 0a1a 	add.w	sl, r4, #26
 8012374:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012376:	425b      	negs	r3, r3
 8012378:	454b      	cmp	r3, r9
 801237a:	dc01      	bgt.n	8012380 <_printf_float+0x2c4>
 801237c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801237e:	e792      	b.n	80122a6 <_printf_float+0x1ea>
 8012380:	2301      	movs	r3, #1
 8012382:	4652      	mov	r2, sl
 8012384:	4631      	mov	r1, r6
 8012386:	4628      	mov	r0, r5
 8012388:	47b8      	blx	r7
 801238a:	3001      	adds	r0, #1
 801238c:	f43f aef7 	beq.w	801217e <_printf_float+0xc2>
 8012390:	f109 0901 	add.w	r9, r9, #1
 8012394:	e7ee      	b.n	8012374 <_printf_float+0x2b8>
 8012396:	bf00      	nop
 8012398:	7fefffff 	.word	0x7fefffff
 801239c:	08014874 	.word	0x08014874
 80123a0:	08014878 	.word	0x08014878
 80123a4:	08014880 	.word	0x08014880
 80123a8:	0801487c 	.word	0x0801487c
 80123ac:	08014884 	.word	0x08014884
 80123b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80123b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80123b4:	429a      	cmp	r2, r3
 80123b6:	bfa8      	it	ge
 80123b8:	461a      	movge	r2, r3
 80123ba:	2a00      	cmp	r2, #0
 80123bc:	4691      	mov	r9, r2
 80123be:	dc37      	bgt.n	8012430 <_printf_float+0x374>
 80123c0:	f04f 0b00 	mov.w	fp, #0
 80123c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80123c8:	f104 021a 	add.w	r2, r4, #26
 80123cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80123ce:	9305      	str	r3, [sp, #20]
 80123d0:	eba3 0309 	sub.w	r3, r3, r9
 80123d4:	455b      	cmp	r3, fp
 80123d6:	dc33      	bgt.n	8012440 <_printf_float+0x384>
 80123d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80123dc:	429a      	cmp	r2, r3
 80123de:	db3b      	blt.n	8012458 <_printf_float+0x39c>
 80123e0:	6823      	ldr	r3, [r4, #0]
 80123e2:	07da      	lsls	r2, r3, #31
 80123e4:	d438      	bmi.n	8012458 <_printf_float+0x39c>
 80123e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80123e8:	9a05      	ldr	r2, [sp, #20]
 80123ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 80123ec:	1a9a      	subs	r2, r3, r2
 80123ee:	eba3 0901 	sub.w	r9, r3, r1
 80123f2:	4591      	cmp	r9, r2
 80123f4:	bfa8      	it	ge
 80123f6:	4691      	movge	r9, r2
 80123f8:	f1b9 0f00 	cmp.w	r9, #0
 80123fc:	dc35      	bgt.n	801246a <_printf_float+0x3ae>
 80123fe:	f04f 0800 	mov.w	r8, #0
 8012402:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012406:	f104 0a1a 	add.w	sl, r4, #26
 801240a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801240e:	1a9b      	subs	r3, r3, r2
 8012410:	eba3 0309 	sub.w	r3, r3, r9
 8012414:	4543      	cmp	r3, r8
 8012416:	f77f af79 	ble.w	801230c <_printf_float+0x250>
 801241a:	2301      	movs	r3, #1
 801241c:	4652      	mov	r2, sl
 801241e:	4631      	mov	r1, r6
 8012420:	4628      	mov	r0, r5
 8012422:	47b8      	blx	r7
 8012424:	3001      	adds	r0, #1
 8012426:	f43f aeaa 	beq.w	801217e <_printf_float+0xc2>
 801242a:	f108 0801 	add.w	r8, r8, #1
 801242e:	e7ec      	b.n	801240a <_printf_float+0x34e>
 8012430:	4613      	mov	r3, r2
 8012432:	4631      	mov	r1, r6
 8012434:	4642      	mov	r2, r8
 8012436:	4628      	mov	r0, r5
 8012438:	47b8      	blx	r7
 801243a:	3001      	adds	r0, #1
 801243c:	d1c0      	bne.n	80123c0 <_printf_float+0x304>
 801243e:	e69e      	b.n	801217e <_printf_float+0xc2>
 8012440:	2301      	movs	r3, #1
 8012442:	4631      	mov	r1, r6
 8012444:	4628      	mov	r0, r5
 8012446:	9205      	str	r2, [sp, #20]
 8012448:	47b8      	blx	r7
 801244a:	3001      	adds	r0, #1
 801244c:	f43f ae97 	beq.w	801217e <_printf_float+0xc2>
 8012450:	9a05      	ldr	r2, [sp, #20]
 8012452:	f10b 0b01 	add.w	fp, fp, #1
 8012456:	e7b9      	b.n	80123cc <_printf_float+0x310>
 8012458:	ee18 3a10 	vmov	r3, s16
 801245c:	4652      	mov	r2, sl
 801245e:	4631      	mov	r1, r6
 8012460:	4628      	mov	r0, r5
 8012462:	47b8      	blx	r7
 8012464:	3001      	adds	r0, #1
 8012466:	d1be      	bne.n	80123e6 <_printf_float+0x32a>
 8012468:	e689      	b.n	801217e <_printf_float+0xc2>
 801246a:	9a05      	ldr	r2, [sp, #20]
 801246c:	464b      	mov	r3, r9
 801246e:	4442      	add	r2, r8
 8012470:	4631      	mov	r1, r6
 8012472:	4628      	mov	r0, r5
 8012474:	47b8      	blx	r7
 8012476:	3001      	adds	r0, #1
 8012478:	d1c1      	bne.n	80123fe <_printf_float+0x342>
 801247a:	e680      	b.n	801217e <_printf_float+0xc2>
 801247c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801247e:	2a01      	cmp	r2, #1
 8012480:	dc01      	bgt.n	8012486 <_printf_float+0x3ca>
 8012482:	07db      	lsls	r3, r3, #31
 8012484:	d538      	bpl.n	80124f8 <_printf_float+0x43c>
 8012486:	2301      	movs	r3, #1
 8012488:	4642      	mov	r2, r8
 801248a:	4631      	mov	r1, r6
 801248c:	4628      	mov	r0, r5
 801248e:	47b8      	blx	r7
 8012490:	3001      	adds	r0, #1
 8012492:	f43f ae74 	beq.w	801217e <_printf_float+0xc2>
 8012496:	ee18 3a10 	vmov	r3, s16
 801249a:	4652      	mov	r2, sl
 801249c:	4631      	mov	r1, r6
 801249e:	4628      	mov	r0, r5
 80124a0:	47b8      	blx	r7
 80124a2:	3001      	adds	r0, #1
 80124a4:	f43f ae6b 	beq.w	801217e <_printf_float+0xc2>
 80124a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80124ac:	2200      	movs	r2, #0
 80124ae:	2300      	movs	r3, #0
 80124b0:	f7ee fb2a 	bl	8000b08 <__aeabi_dcmpeq>
 80124b4:	b9d8      	cbnz	r0, 80124ee <_printf_float+0x432>
 80124b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124b8:	f108 0201 	add.w	r2, r8, #1
 80124bc:	3b01      	subs	r3, #1
 80124be:	4631      	mov	r1, r6
 80124c0:	4628      	mov	r0, r5
 80124c2:	47b8      	blx	r7
 80124c4:	3001      	adds	r0, #1
 80124c6:	d10e      	bne.n	80124e6 <_printf_float+0x42a>
 80124c8:	e659      	b.n	801217e <_printf_float+0xc2>
 80124ca:	2301      	movs	r3, #1
 80124cc:	4652      	mov	r2, sl
 80124ce:	4631      	mov	r1, r6
 80124d0:	4628      	mov	r0, r5
 80124d2:	47b8      	blx	r7
 80124d4:	3001      	adds	r0, #1
 80124d6:	f43f ae52 	beq.w	801217e <_printf_float+0xc2>
 80124da:	f108 0801 	add.w	r8, r8, #1
 80124de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80124e0:	3b01      	subs	r3, #1
 80124e2:	4543      	cmp	r3, r8
 80124e4:	dcf1      	bgt.n	80124ca <_printf_float+0x40e>
 80124e6:	464b      	mov	r3, r9
 80124e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80124ec:	e6dc      	b.n	80122a8 <_printf_float+0x1ec>
 80124ee:	f04f 0800 	mov.w	r8, #0
 80124f2:	f104 0a1a 	add.w	sl, r4, #26
 80124f6:	e7f2      	b.n	80124de <_printf_float+0x422>
 80124f8:	2301      	movs	r3, #1
 80124fa:	4642      	mov	r2, r8
 80124fc:	e7df      	b.n	80124be <_printf_float+0x402>
 80124fe:	2301      	movs	r3, #1
 8012500:	464a      	mov	r2, r9
 8012502:	4631      	mov	r1, r6
 8012504:	4628      	mov	r0, r5
 8012506:	47b8      	blx	r7
 8012508:	3001      	adds	r0, #1
 801250a:	f43f ae38 	beq.w	801217e <_printf_float+0xc2>
 801250e:	f108 0801 	add.w	r8, r8, #1
 8012512:	68e3      	ldr	r3, [r4, #12]
 8012514:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012516:	1a5b      	subs	r3, r3, r1
 8012518:	4543      	cmp	r3, r8
 801251a:	dcf0      	bgt.n	80124fe <_printf_float+0x442>
 801251c:	e6fa      	b.n	8012314 <_printf_float+0x258>
 801251e:	f04f 0800 	mov.w	r8, #0
 8012522:	f104 0919 	add.w	r9, r4, #25
 8012526:	e7f4      	b.n	8012512 <_printf_float+0x456>

08012528 <_printf_common>:
 8012528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801252c:	4616      	mov	r6, r2
 801252e:	4699      	mov	r9, r3
 8012530:	688a      	ldr	r2, [r1, #8]
 8012532:	690b      	ldr	r3, [r1, #16]
 8012534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012538:	4293      	cmp	r3, r2
 801253a:	bfb8      	it	lt
 801253c:	4613      	movlt	r3, r2
 801253e:	6033      	str	r3, [r6, #0]
 8012540:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012544:	4607      	mov	r7, r0
 8012546:	460c      	mov	r4, r1
 8012548:	b10a      	cbz	r2, 801254e <_printf_common+0x26>
 801254a:	3301      	adds	r3, #1
 801254c:	6033      	str	r3, [r6, #0]
 801254e:	6823      	ldr	r3, [r4, #0]
 8012550:	0699      	lsls	r1, r3, #26
 8012552:	bf42      	ittt	mi
 8012554:	6833      	ldrmi	r3, [r6, #0]
 8012556:	3302      	addmi	r3, #2
 8012558:	6033      	strmi	r3, [r6, #0]
 801255a:	6825      	ldr	r5, [r4, #0]
 801255c:	f015 0506 	ands.w	r5, r5, #6
 8012560:	d106      	bne.n	8012570 <_printf_common+0x48>
 8012562:	f104 0a19 	add.w	sl, r4, #25
 8012566:	68e3      	ldr	r3, [r4, #12]
 8012568:	6832      	ldr	r2, [r6, #0]
 801256a:	1a9b      	subs	r3, r3, r2
 801256c:	42ab      	cmp	r3, r5
 801256e:	dc26      	bgt.n	80125be <_printf_common+0x96>
 8012570:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012574:	1e13      	subs	r3, r2, #0
 8012576:	6822      	ldr	r2, [r4, #0]
 8012578:	bf18      	it	ne
 801257a:	2301      	movne	r3, #1
 801257c:	0692      	lsls	r2, r2, #26
 801257e:	d42b      	bmi.n	80125d8 <_printf_common+0xb0>
 8012580:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012584:	4649      	mov	r1, r9
 8012586:	4638      	mov	r0, r7
 8012588:	47c0      	blx	r8
 801258a:	3001      	adds	r0, #1
 801258c:	d01e      	beq.n	80125cc <_printf_common+0xa4>
 801258e:	6823      	ldr	r3, [r4, #0]
 8012590:	68e5      	ldr	r5, [r4, #12]
 8012592:	6832      	ldr	r2, [r6, #0]
 8012594:	f003 0306 	and.w	r3, r3, #6
 8012598:	2b04      	cmp	r3, #4
 801259a:	bf08      	it	eq
 801259c:	1aad      	subeq	r5, r5, r2
 801259e:	68a3      	ldr	r3, [r4, #8]
 80125a0:	6922      	ldr	r2, [r4, #16]
 80125a2:	bf0c      	ite	eq
 80125a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80125a8:	2500      	movne	r5, #0
 80125aa:	4293      	cmp	r3, r2
 80125ac:	bfc4      	itt	gt
 80125ae:	1a9b      	subgt	r3, r3, r2
 80125b0:	18ed      	addgt	r5, r5, r3
 80125b2:	2600      	movs	r6, #0
 80125b4:	341a      	adds	r4, #26
 80125b6:	42b5      	cmp	r5, r6
 80125b8:	d11a      	bne.n	80125f0 <_printf_common+0xc8>
 80125ba:	2000      	movs	r0, #0
 80125bc:	e008      	b.n	80125d0 <_printf_common+0xa8>
 80125be:	2301      	movs	r3, #1
 80125c0:	4652      	mov	r2, sl
 80125c2:	4649      	mov	r1, r9
 80125c4:	4638      	mov	r0, r7
 80125c6:	47c0      	blx	r8
 80125c8:	3001      	adds	r0, #1
 80125ca:	d103      	bne.n	80125d4 <_printf_common+0xac>
 80125cc:	f04f 30ff 	mov.w	r0, #4294967295
 80125d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125d4:	3501      	adds	r5, #1
 80125d6:	e7c6      	b.n	8012566 <_printf_common+0x3e>
 80125d8:	18e1      	adds	r1, r4, r3
 80125da:	1c5a      	adds	r2, r3, #1
 80125dc:	2030      	movs	r0, #48	; 0x30
 80125de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80125e2:	4422      	add	r2, r4
 80125e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80125e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80125ec:	3302      	adds	r3, #2
 80125ee:	e7c7      	b.n	8012580 <_printf_common+0x58>
 80125f0:	2301      	movs	r3, #1
 80125f2:	4622      	mov	r2, r4
 80125f4:	4649      	mov	r1, r9
 80125f6:	4638      	mov	r0, r7
 80125f8:	47c0      	blx	r8
 80125fa:	3001      	adds	r0, #1
 80125fc:	d0e6      	beq.n	80125cc <_printf_common+0xa4>
 80125fe:	3601      	adds	r6, #1
 8012600:	e7d9      	b.n	80125b6 <_printf_common+0x8e>
	...

08012604 <_printf_i>:
 8012604:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012608:	7e0f      	ldrb	r7, [r1, #24]
 801260a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801260c:	2f78      	cmp	r7, #120	; 0x78
 801260e:	4691      	mov	r9, r2
 8012610:	4680      	mov	r8, r0
 8012612:	460c      	mov	r4, r1
 8012614:	469a      	mov	sl, r3
 8012616:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801261a:	d807      	bhi.n	801262c <_printf_i+0x28>
 801261c:	2f62      	cmp	r7, #98	; 0x62
 801261e:	d80a      	bhi.n	8012636 <_printf_i+0x32>
 8012620:	2f00      	cmp	r7, #0
 8012622:	f000 80d8 	beq.w	80127d6 <_printf_i+0x1d2>
 8012626:	2f58      	cmp	r7, #88	; 0x58
 8012628:	f000 80a3 	beq.w	8012772 <_printf_i+0x16e>
 801262c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012630:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012634:	e03a      	b.n	80126ac <_printf_i+0xa8>
 8012636:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801263a:	2b15      	cmp	r3, #21
 801263c:	d8f6      	bhi.n	801262c <_printf_i+0x28>
 801263e:	a101      	add	r1, pc, #4	; (adr r1, 8012644 <_printf_i+0x40>)
 8012640:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012644:	0801269d 	.word	0x0801269d
 8012648:	080126b1 	.word	0x080126b1
 801264c:	0801262d 	.word	0x0801262d
 8012650:	0801262d 	.word	0x0801262d
 8012654:	0801262d 	.word	0x0801262d
 8012658:	0801262d 	.word	0x0801262d
 801265c:	080126b1 	.word	0x080126b1
 8012660:	0801262d 	.word	0x0801262d
 8012664:	0801262d 	.word	0x0801262d
 8012668:	0801262d 	.word	0x0801262d
 801266c:	0801262d 	.word	0x0801262d
 8012670:	080127bd 	.word	0x080127bd
 8012674:	080126e1 	.word	0x080126e1
 8012678:	0801279f 	.word	0x0801279f
 801267c:	0801262d 	.word	0x0801262d
 8012680:	0801262d 	.word	0x0801262d
 8012684:	080127df 	.word	0x080127df
 8012688:	0801262d 	.word	0x0801262d
 801268c:	080126e1 	.word	0x080126e1
 8012690:	0801262d 	.word	0x0801262d
 8012694:	0801262d 	.word	0x0801262d
 8012698:	080127a7 	.word	0x080127a7
 801269c:	682b      	ldr	r3, [r5, #0]
 801269e:	1d1a      	adds	r2, r3, #4
 80126a0:	681b      	ldr	r3, [r3, #0]
 80126a2:	602a      	str	r2, [r5, #0]
 80126a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80126a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80126ac:	2301      	movs	r3, #1
 80126ae:	e0a3      	b.n	80127f8 <_printf_i+0x1f4>
 80126b0:	6820      	ldr	r0, [r4, #0]
 80126b2:	6829      	ldr	r1, [r5, #0]
 80126b4:	0606      	lsls	r6, r0, #24
 80126b6:	f101 0304 	add.w	r3, r1, #4
 80126ba:	d50a      	bpl.n	80126d2 <_printf_i+0xce>
 80126bc:	680e      	ldr	r6, [r1, #0]
 80126be:	602b      	str	r3, [r5, #0]
 80126c0:	2e00      	cmp	r6, #0
 80126c2:	da03      	bge.n	80126cc <_printf_i+0xc8>
 80126c4:	232d      	movs	r3, #45	; 0x2d
 80126c6:	4276      	negs	r6, r6
 80126c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126cc:	485e      	ldr	r0, [pc, #376]	; (8012848 <_printf_i+0x244>)
 80126ce:	230a      	movs	r3, #10
 80126d0:	e019      	b.n	8012706 <_printf_i+0x102>
 80126d2:	680e      	ldr	r6, [r1, #0]
 80126d4:	602b      	str	r3, [r5, #0]
 80126d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80126da:	bf18      	it	ne
 80126dc:	b236      	sxthne	r6, r6
 80126de:	e7ef      	b.n	80126c0 <_printf_i+0xbc>
 80126e0:	682b      	ldr	r3, [r5, #0]
 80126e2:	6820      	ldr	r0, [r4, #0]
 80126e4:	1d19      	adds	r1, r3, #4
 80126e6:	6029      	str	r1, [r5, #0]
 80126e8:	0601      	lsls	r1, r0, #24
 80126ea:	d501      	bpl.n	80126f0 <_printf_i+0xec>
 80126ec:	681e      	ldr	r6, [r3, #0]
 80126ee:	e002      	b.n	80126f6 <_printf_i+0xf2>
 80126f0:	0646      	lsls	r6, r0, #25
 80126f2:	d5fb      	bpl.n	80126ec <_printf_i+0xe8>
 80126f4:	881e      	ldrh	r6, [r3, #0]
 80126f6:	4854      	ldr	r0, [pc, #336]	; (8012848 <_printf_i+0x244>)
 80126f8:	2f6f      	cmp	r7, #111	; 0x6f
 80126fa:	bf0c      	ite	eq
 80126fc:	2308      	moveq	r3, #8
 80126fe:	230a      	movne	r3, #10
 8012700:	2100      	movs	r1, #0
 8012702:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012706:	6865      	ldr	r5, [r4, #4]
 8012708:	60a5      	str	r5, [r4, #8]
 801270a:	2d00      	cmp	r5, #0
 801270c:	bfa2      	ittt	ge
 801270e:	6821      	ldrge	r1, [r4, #0]
 8012710:	f021 0104 	bicge.w	r1, r1, #4
 8012714:	6021      	strge	r1, [r4, #0]
 8012716:	b90e      	cbnz	r6, 801271c <_printf_i+0x118>
 8012718:	2d00      	cmp	r5, #0
 801271a:	d04d      	beq.n	80127b8 <_printf_i+0x1b4>
 801271c:	4615      	mov	r5, r2
 801271e:	fbb6 f1f3 	udiv	r1, r6, r3
 8012722:	fb03 6711 	mls	r7, r3, r1, r6
 8012726:	5dc7      	ldrb	r7, [r0, r7]
 8012728:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801272c:	4637      	mov	r7, r6
 801272e:	42bb      	cmp	r3, r7
 8012730:	460e      	mov	r6, r1
 8012732:	d9f4      	bls.n	801271e <_printf_i+0x11a>
 8012734:	2b08      	cmp	r3, #8
 8012736:	d10b      	bne.n	8012750 <_printf_i+0x14c>
 8012738:	6823      	ldr	r3, [r4, #0]
 801273a:	07de      	lsls	r6, r3, #31
 801273c:	d508      	bpl.n	8012750 <_printf_i+0x14c>
 801273e:	6923      	ldr	r3, [r4, #16]
 8012740:	6861      	ldr	r1, [r4, #4]
 8012742:	4299      	cmp	r1, r3
 8012744:	bfde      	ittt	le
 8012746:	2330      	movle	r3, #48	; 0x30
 8012748:	f805 3c01 	strble.w	r3, [r5, #-1]
 801274c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012750:	1b52      	subs	r2, r2, r5
 8012752:	6122      	str	r2, [r4, #16]
 8012754:	f8cd a000 	str.w	sl, [sp]
 8012758:	464b      	mov	r3, r9
 801275a:	aa03      	add	r2, sp, #12
 801275c:	4621      	mov	r1, r4
 801275e:	4640      	mov	r0, r8
 8012760:	f7ff fee2 	bl	8012528 <_printf_common>
 8012764:	3001      	adds	r0, #1
 8012766:	d14c      	bne.n	8012802 <_printf_i+0x1fe>
 8012768:	f04f 30ff 	mov.w	r0, #4294967295
 801276c:	b004      	add	sp, #16
 801276e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012772:	4835      	ldr	r0, [pc, #212]	; (8012848 <_printf_i+0x244>)
 8012774:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012778:	6829      	ldr	r1, [r5, #0]
 801277a:	6823      	ldr	r3, [r4, #0]
 801277c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012780:	6029      	str	r1, [r5, #0]
 8012782:	061d      	lsls	r5, r3, #24
 8012784:	d514      	bpl.n	80127b0 <_printf_i+0x1ac>
 8012786:	07df      	lsls	r7, r3, #31
 8012788:	bf44      	itt	mi
 801278a:	f043 0320 	orrmi.w	r3, r3, #32
 801278e:	6023      	strmi	r3, [r4, #0]
 8012790:	b91e      	cbnz	r6, 801279a <_printf_i+0x196>
 8012792:	6823      	ldr	r3, [r4, #0]
 8012794:	f023 0320 	bic.w	r3, r3, #32
 8012798:	6023      	str	r3, [r4, #0]
 801279a:	2310      	movs	r3, #16
 801279c:	e7b0      	b.n	8012700 <_printf_i+0xfc>
 801279e:	6823      	ldr	r3, [r4, #0]
 80127a0:	f043 0320 	orr.w	r3, r3, #32
 80127a4:	6023      	str	r3, [r4, #0]
 80127a6:	2378      	movs	r3, #120	; 0x78
 80127a8:	4828      	ldr	r0, [pc, #160]	; (801284c <_printf_i+0x248>)
 80127aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80127ae:	e7e3      	b.n	8012778 <_printf_i+0x174>
 80127b0:	0659      	lsls	r1, r3, #25
 80127b2:	bf48      	it	mi
 80127b4:	b2b6      	uxthmi	r6, r6
 80127b6:	e7e6      	b.n	8012786 <_printf_i+0x182>
 80127b8:	4615      	mov	r5, r2
 80127ba:	e7bb      	b.n	8012734 <_printf_i+0x130>
 80127bc:	682b      	ldr	r3, [r5, #0]
 80127be:	6826      	ldr	r6, [r4, #0]
 80127c0:	6961      	ldr	r1, [r4, #20]
 80127c2:	1d18      	adds	r0, r3, #4
 80127c4:	6028      	str	r0, [r5, #0]
 80127c6:	0635      	lsls	r5, r6, #24
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	d501      	bpl.n	80127d0 <_printf_i+0x1cc>
 80127cc:	6019      	str	r1, [r3, #0]
 80127ce:	e002      	b.n	80127d6 <_printf_i+0x1d2>
 80127d0:	0670      	lsls	r0, r6, #25
 80127d2:	d5fb      	bpl.n	80127cc <_printf_i+0x1c8>
 80127d4:	8019      	strh	r1, [r3, #0]
 80127d6:	2300      	movs	r3, #0
 80127d8:	6123      	str	r3, [r4, #16]
 80127da:	4615      	mov	r5, r2
 80127dc:	e7ba      	b.n	8012754 <_printf_i+0x150>
 80127de:	682b      	ldr	r3, [r5, #0]
 80127e0:	1d1a      	adds	r2, r3, #4
 80127e2:	602a      	str	r2, [r5, #0]
 80127e4:	681d      	ldr	r5, [r3, #0]
 80127e6:	6862      	ldr	r2, [r4, #4]
 80127e8:	2100      	movs	r1, #0
 80127ea:	4628      	mov	r0, r5
 80127ec:	f7ed fd18 	bl	8000220 <memchr>
 80127f0:	b108      	cbz	r0, 80127f6 <_printf_i+0x1f2>
 80127f2:	1b40      	subs	r0, r0, r5
 80127f4:	6060      	str	r0, [r4, #4]
 80127f6:	6863      	ldr	r3, [r4, #4]
 80127f8:	6123      	str	r3, [r4, #16]
 80127fa:	2300      	movs	r3, #0
 80127fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012800:	e7a8      	b.n	8012754 <_printf_i+0x150>
 8012802:	6923      	ldr	r3, [r4, #16]
 8012804:	462a      	mov	r2, r5
 8012806:	4649      	mov	r1, r9
 8012808:	4640      	mov	r0, r8
 801280a:	47d0      	blx	sl
 801280c:	3001      	adds	r0, #1
 801280e:	d0ab      	beq.n	8012768 <_printf_i+0x164>
 8012810:	6823      	ldr	r3, [r4, #0]
 8012812:	079b      	lsls	r3, r3, #30
 8012814:	d413      	bmi.n	801283e <_printf_i+0x23a>
 8012816:	68e0      	ldr	r0, [r4, #12]
 8012818:	9b03      	ldr	r3, [sp, #12]
 801281a:	4298      	cmp	r0, r3
 801281c:	bfb8      	it	lt
 801281e:	4618      	movlt	r0, r3
 8012820:	e7a4      	b.n	801276c <_printf_i+0x168>
 8012822:	2301      	movs	r3, #1
 8012824:	4632      	mov	r2, r6
 8012826:	4649      	mov	r1, r9
 8012828:	4640      	mov	r0, r8
 801282a:	47d0      	blx	sl
 801282c:	3001      	adds	r0, #1
 801282e:	d09b      	beq.n	8012768 <_printf_i+0x164>
 8012830:	3501      	adds	r5, #1
 8012832:	68e3      	ldr	r3, [r4, #12]
 8012834:	9903      	ldr	r1, [sp, #12]
 8012836:	1a5b      	subs	r3, r3, r1
 8012838:	42ab      	cmp	r3, r5
 801283a:	dcf2      	bgt.n	8012822 <_printf_i+0x21e>
 801283c:	e7eb      	b.n	8012816 <_printf_i+0x212>
 801283e:	2500      	movs	r5, #0
 8012840:	f104 0619 	add.w	r6, r4, #25
 8012844:	e7f5      	b.n	8012832 <_printf_i+0x22e>
 8012846:	bf00      	nop
 8012848:	08014886 	.word	0x08014886
 801284c:	08014897 	.word	0x08014897

08012850 <_sbrk_r>:
 8012850:	b538      	push	{r3, r4, r5, lr}
 8012852:	4d06      	ldr	r5, [pc, #24]	; (801286c <_sbrk_r+0x1c>)
 8012854:	2300      	movs	r3, #0
 8012856:	4604      	mov	r4, r0
 8012858:	4608      	mov	r0, r1
 801285a:	602b      	str	r3, [r5, #0]
 801285c:	f7ef fad6 	bl	8001e0c <_sbrk>
 8012860:	1c43      	adds	r3, r0, #1
 8012862:	d102      	bne.n	801286a <_sbrk_r+0x1a>
 8012864:	682b      	ldr	r3, [r5, #0]
 8012866:	b103      	cbz	r3, 801286a <_sbrk_r+0x1a>
 8012868:	6023      	str	r3, [r4, #0]
 801286a:	bd38      	pop	{r3, r4, r5, pc}
 801286c:	20002760 	.word	0x20002760

08012870 <quorem>:
 8012870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012874:	6903      	ldr	r3, [r0, #16]
 8012876:	690c      	ldr	r4, [r1, #16]
 8012878:	42a3      	cmp	r3, r4
 801287a:	4607      	mov	r7, r0
 801287c:	f2c0 8081 	blt.w	8012982 <quorem+0x112>
 8012880:	3c01      	subs	r4, #1
 8012882:	f101 0814 	add.w	r8, r1, #20
 8012886:	f100 0514 	add.w	r5, r0, #20
 801288a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801288e:	9301      	str	r3, [sp, #4]
 8012890:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012894:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012898:	3301      	adds	r3, #1
 801289a:	429a      	cmp	r2, r3
 801289c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80128a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80128a4:	fbb2 f6f3 	udiv	r6, r2, r3
 80128a8:	d331      	bcc.n	801290e <quorem+0x9e>
 80128aa:	f04f 0e00 	mov.w	lr, #0
 80128ae:	4640      	mov	r0, r8
 80128b0:	46ac      	mov	ip, r5
 80128b2:	46f2      	mov	sl, lr
 80128b4:	f850 2b04 	ldr.w	r2, [r0], #4
 80128b8:	b293      	uxth	r3, r2
 80128ba:	fb06 e303 	mla	r3, r6, r3, lr
 80128be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80128c2:	b29b      	uxth	r3, r3
 80128c4:	ebaa 0303 	sub.w	r3, sl, r3
 80128c8:	f8dc a000 	ldr.w	sl, [ip]
 80128cc:	0c12      	lsrs	r2, r2, #16
 80128ce:	fa13 f38a 	uxtah	r3, r3, sl
 80128d2:	fb06 e202 	mla	r2, r6, r2, lr
 80128d6:	9300      	str	r3, [sp, #0]
 80128d8:	9b00      	ldr	r3, [sp, #0]
 80128da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80128de:	b292      	uxth	r2, r2
 80128e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80128e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80128e8:	f8bd 3000 	ldrh.w	r3, [sp]
 80128ec:	4581      	cmp	r9, r0
 80128ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80128f2:	f84c 3b04 	str.w	r3, [ip], #4
 80128f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80128fa:	d2db      	bcs.n	80128b4 <quorem+0x44>
 80128fc:	f855 300b 	ldr.w	r3, [r5, fp]
 8012900:	b92b      	cbnz	r3, 801290e <quorem+0x9e>
 8012902:	9b01      	ldr	r3, [sp, #4]
 8012904:	3b04      	subs	r3, #4
 8012906:	429d      	cmp	r5, r3
 8012908:	461a      	mov	r2, r3
 801290a:	d32e      	bcc.n	801296a <quorem+0xfa>
 801290c:	613c      	str	r4, [r7, #16]
 801290e:	4638      	mov	r0, r7
 8012910:	f001 f8c8 	bl	8013aa4 <__mcmp>
 8012914:	2800      	cmp	r0, #0
 8012916:	db24      	blt.n	8012962 <quorem+0xf2>
 8012918:	3601      	adds	r6, #1
 801291a:	4628      	mov	r0, r5
 801291c:	f04f 0c00 	mov.w	ip, #0
 8012920:	f858 2b04 	ldr.w	r2, [r8], #4
 8012924:	f8d0 e000 	ldr.w	lr, [r0]
 8012928:	b293      	uxth	r3, r2
 801292a:	ebac 0303 	sub.w	r3, ip, r3
 801292e:	0c12      	lsrs	r2, r2, #16
 8012930:	fa13 f38e 	uxtah	r3, r3, lr
 8012934:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012938:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801293c:	b29b      	uxth	r3, r3
 801293e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012942:	45c1      	cmp	r9, r8
 8012944:	f840 3b04 	str.w	r3, [r0], #4
 8012948:	ea4f 4c22 	mov.w	ip, r2, asr #16
 801294c:	d2e8      	bcs.n	8012920 <quorem+0xb0>
 801294e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012952:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012956:	b922      	cbnz	r2, 8012962 <quorem+0xf2>
 8012958:	3b04      	subs	r3, #4
 801295a:	429d      	cmp	r5, r3
 801295c:	461a      	mov	r2, r3
 801295e:	d30a      	bcc.n	8012976 <quorem+0x106>
 8012960:	613c      	str	r4, [r7, #16]
 8012962:	4630      	mov	r0, r6
 8012964:	b003      	add	sp, #12
 8012966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801296a:	6812      	ldr	r2, [r2, #0]
 801296c:	3b04      	subs	r3, #4
 801296e:	2a00      	cmp	r2, #0
 8012970:	d1cc      	bne.n	801290c <quorem+0x9c>
 8012972:	3c01      	subs	r4, #1
 8012974:	e7c7      	b.n	8012906 <quorem+0x96>
 8012976:	6812      	ldr	r2, [r2, #0]
 8012978:	3b04      	subs	r3, #4
 801297a:	2a00      	cmp	r2, #0
 801297c:	d1f0      	bne.n	8012960 <quorem+0xf0>
 801297e:	3c01      	subs	r4, #1
 8012980:	e7eb      	b.n	801295a <quorem+0xea>
 8012982:	2000      	movs	r0, #0
 8012984:	e7ee      	b.n	8012964 <quorem+0xf4>
	...

08012988 <_dtoa_r>:
 8012988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801298c:	ed2d 8b04 	vpush	{d8-d9}
 8012990:	ec57 6b10 	vmov	r6, r7, d0
 8012994:	b093      	sub	sp, #76	; 0x4c
 8012996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 801299c:	9106      	str	r1, [sp, #24]
 801299e:	ee10 aa10 	vmov	sl, s0
 80129a2:	4604      	mov	r4, r0
 80129a4:	9209      	str	r2, [sp, #36]	; 0x24
 80129a6:	930c      	str	r3, [sp, #48]	; 0x30
 80129a8:	46bb      	mov	fp, r7
 80129aa:	b975      	cbnz	r5, 80129ca <_dtoa_r+0x42>
 80129ac:	2010      	movs	r0, #16
 80129ae:	f7ff f9ed 	bl	8011d8c <malloc>
 80129b2:	4602      	mov	r2, r0
 80129b4:	6260      	str	r0, [r4, #36]	; 0x24
 80129b6:	b920      	cbnz	r0, 80129c2 <_dtoa_r+0x3a>
 80129b8:	4ba7      	ldr	r3, [pc, #668]	; (8012c58 <_dtoa_r+0x2d0>)
 80129ba:	21ea      	movs	r1, #234	; 0xea
 80129bc:	48a7      	ldr	r0, [pc, #668]	; (8012c5c <_dtoa_r+0x2d4>)
 80129be:	f001 f989 	bl	8013cd4 <__assert_func>
 80129c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80129c6:	6005      	str	r5, [r0, #0]
 80129c8:	60c5      	str	r5, [r0, #12]
 80129ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129cc:	6819      	ldr	r1, [r3, #0]
 80129ce:	b151      	cbz	r1, 80129e6 <_dtoa_r+0x5e>
 80129d0:	685a      	ldr	r2, [r3, #4]
 80129d2:	604a      	str	r2, [r1, #4]
 80129d4:	2301      	movs	r3, #1
 80129d6:	4093      	lsls	r3, r2
 80129d8:	608b      	str	r3, [r1, #8]
 80129da:	4620      	mov	r0, r4
 80129dc:	f000 fe20 	bl	8013620 <_Bfree>
 80129e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80129e2:	2200      	movs	r2, #0
 80129e4:	601a      	str	r2, [r3, #0]
 80129e6:	1e3b      	subs	r3, r7, #0
 80129e8:	bfaa      	itet	ge
 80129ea:	2300      	movge	r3, #0
 80129ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80129f0:	f8c8 3000 	strge.w	r3, [r8]
 80129f4:	4b9a      	ldr	r3, [pc, #616]	; (8012c60 <_dtoa_r+0x2d8>)
 80129f6:	bfbc      	itt	lt
 80129f8:	2201      	movlt	r2, #1
 80129fa:	f8c8 2000 	strlt.w	r2, [r8]
 80129fe:	ea33 030b 	bics.w	r3, r3, fp
 8012a02:	d11b      	bne.n	8012a3c <_dtoa_r+0xb4>
 8012a04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a06:	f242 730f 	movw	r3, #9999	; 0x270f
 8012a0a:	6013      	str	r3, [r2, #0]
 8012a0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012a10:	4333      	orrs	r3, r6
 8012a12:	f000 8592 	beq.w	801353a <_dtoa_r+0xbb2>
 8012a16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a18:	b963      	cbnz	r3, 8012a34 <_dtoa_r+0xac>
 8012a1a:	4b92      	ldr	r3, [pc, #584]	; (8012c64 <_dtoa_r+0x2dc>)
 8012a1c:	e022      	b.n	8012a64 <_dtoa_r+0xdc>
 8012a1e:	4b92      	ldr	r3, [pc, #584]	; (8012c68 <_dtoa_r+0x2e0>)
 8012a20:	9301      	str	r3, [sp, #4]
 8012a22:	3308      	adds	r3, #8
 8012a24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012a26:	6013      	str	r3, [r2, #0]
 8012a28:	9801      	ldr	r0, [sp, #4]
 8012a2a:	b013      	add	sp, #76	; 0x4c
 8012a2c:	ecbd 8b04 	vpop	{d8-d9}
 8012a30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a34:	4b8b      	ldr	r3, [pc, #556]	; (8012c64 <_dtoa_r+0x2dc>)
 8012a36:	9301      	str	r3, [sp, #4]
 8012a38:	3303      	adds	r3, #3
 8012a3a:	e7f3      	b.n	8012a24 <_dtoa_r+0x9c>
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	2300      	movs	r3, #0
 8012a40:	4650      	mov	r0, sl
 8012a42:	4659      	mov	r1, fp
 8012a44:	f7ee f860 	bl	8000b08 <__aeabi_dcmpeq>
 8012a48:	ec4b ab19 	vmov	d9, sl, fp
 8012a4c:	4680      	mov	r8, r0
 8012a4e:	b158      	cbz	r0, 8012a68 <_dtoa_r+0xe0>
 8012a50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012a52:	2301      	movs	r3, #1
 8012a54:	6013      	str	r3, [r2, #0]
 8012a56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	f000 856b 	beq.w	8013534 <_dtoa_r+0xbac>
 8012a5e:	4883      	ldr	r0, [pc, #524]	; (8012c6c <_dtoa_r+0x2e4>)
 8012a60:	6018      	str	r0, [r3, #0]
 8012a62:	1e43      	subs	r3, r0, #1
 8012a64:	9301      	str	r3, [sp, #4]
 8012a66:	e7df      	b.n	8012a28 <_dtoa_r+0xa0>
 8012a68:	ec4b ab10 	vmov	d0, sl, fp
 8012a6c:	aa10      	add	r2, sp, #64	; 0x40
 8012a6e:	a911      	add	r1, sp, #68	; 0x44
 8012a70:	4620      	mov	r0, r4
 8012a72:	f001 f8bd 	bl	8013bf0 <__d2b>
 8012a76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8012a7a:	ee08 0a10 	vmov	s16, r0
 8012a7e:	2d00      	cmp	r5, #0
 8012a80:	f000 8084 	beq.w	8012b8c <_dtoa_r+0x204>
 8012a84:	ee19 3a90 	vmov	r3, s19
 8012a88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8012a8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8012a90:	4656      	mov	r6, sl
 8012a92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8012a96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8012a9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8012a9e:	4b74      	ldr	r3, [pc, #464]	; (8012c70 <_dtoa_r+0x2e8>)
 8012aa0:	2200      	movs	r2, #0
 8012aa2:	4630      	mov	r0, r6
 8012aa4:	4639      	mov	r1, r7
 8012aa6:	f7ed fc0f 	bl	80002c8 <__aeabi_dsub>
 8012aaa:	a365      	add	r3, pc, #404	; (adr r3, 8012c40 <_dtoa_r+0x2b8>)
 8012aac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ab0:	f7ed fdc2 	bl	8000638 <__aeabi_dmul>
 8012ab4:	a364      	add	r3, pc, #400	; (adr r3, 8012c48 <_dtoa_r+0x2c0>)
 8012ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aba:	f7ed fc07 	bl	80002cc <__adddf3>
 8012abe:	4606      	mov	r6, r0
 8012ac0:	4628      	mov	r0, r5
 8012ac2:	460f      	mov	r7, r1
 8012ac4:	f7ed fd4e 	bl	8000564 <__aeabi_i2d>
 8012ac8:	a361      	add	r3, pc, #388	; (adr r3, 8012c50 <_dtoa_r+0x2c8>)
 8012aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ace:	f7ed fdb3 	bl	8000638 <__aeabi_dmul>
 8012ad2:	4602      	mov	r2, r0
 8012ad4:	460b      	mov	r3, r1
 8012ad6:	4630      	mov	r0, r6
 8012ad8:	4639      	mov	r1, r7
 8012ada:	f7ed fbf7 	bl	80002cc <__adddf3>
 8012ade:	4606      	mov	r6, r0
 8012ae0:	460f      	mov	r7, r1
 8012ae2:	f7ee f859 	bl	8000b98 <__aeabi_d2iz>
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	9000      	str	r0, [sp, #0]
 8012aea:	2300      	movs	r3, #0
 8012aec:	4630      	mov	r0, r6
 8012aee:	4639      	mov	r1, r7
 8012af0:	f7ee f814 	bl	8000b1c <__aeabi_dcmplt>
 8012af4:	b150      	cbz	r0, 8012b0c <_dtoa_r+0x184>
 8012af6:	9800      	ldr	r0, [sp, #0]
 8012af8:	f7ed fd34 	bl	8000564 <__aeabi_i2d>
 8012afc:	4632      	mov	r2, r6
 8012afe:	463b      	mov	r3, r7
 8012b00:	f7ee f802 	bl	8000b08 <__aeabi_dcmpeq>
 8012b04:	b910      	cbnz	r0, 8012b0c <_dtoa_r+0x184>
 8012b06:	9b00      	ldr	r3, [sp, #0]
 8012b08:	3b01      	subs	r3, #1
 8012b0a:	9300      	str	r3, [sp, #0]
 8012b0c:	9b00      	ldr	r3, [sp, #0]
 8012b0e:	2b16      	cmp	r3, #22
 8012b10:	d85a      	bhi.n	8012bc8 <_dtoa_r+0x240>
 8012b12:	9a00      	ldr	r2, [sp, #0]
 8012b14:	4b57      	ldr	r3, [pc, #348]	; (8012c74 <_dtoa_r+0x2ec>)
 8012b16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012b1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b1e:	ec51 0b19 	vmov	r0, r1, d9
 8012b22:	f7ed fffb 	bl	8000b1c <__aeabi_dcmplt>
 8012b26:	2800      	cmp	r0, #0
 8012b28:	d050      	beq.n	8012bcc <_dtoa_r+0x244>
 8012b2a:	9b00      	ldr	r3, [sp, #0]
 8012b2c:	3b01      	subs	r3, #1
 8012b2e:	9300      	str	r3, [sp, #0]
 8012b30:	2300      	movs	r3, #0
 8012b32:	930b      	str	r3, [sp, #44]	; 0x2c
 8012b34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8012b36:	1b5d      	subs	r5, r3, r5
 8012b38:	1e6b      	subs	r3, r5, #1
 8012b3a:	9305      	str	r3, [sp, #20]
 8012b3c:	bf45      	ittet	mi
 8012b3e:	f1c5 0301 	rsbmi	r3, r5, #1
 8012b42:	9304      	strmi	r3, [sp, #16]
 8012b44:	2300      	movpl	r3, #0
 8012b46:	2300      	movmi	r3, #0
 8012b48:	bf4c      	ite	mi
 8012b4a:	9305      	strmi	r3, [sp, #20]
 8012b4c:	9304      	strpl	r3, [sp, #16]
 8012b4e:	9b00      	ldr	r3, [sp, #0]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	db3d      	blt.n	8012bd0 <_dtoa_r+0x248>
 8012b54:	9b05      	ldr	r3, [sp, #20]
 8012b56:	9a00      	ldr	r2, [sp, #0]
 8012b58:	920a      	str	r2, [sp, #40]	; 0x28
 8012b5a:	4413      	add	r3, r2
 8012b5c:	9305      	str	r3, [sp, #20]
 8012b5e:	2300      	movs	r3, #0
 8012b60:	9307      	str	r3, [sp, #28]
 8012b62:	9b06      	ldr	r3, [sp, #24]
 8012b64:	2b09      	cmp	r3, #9
 8012b66:	f200 8089 	bhi.w	8012c7c <_dtoa_r+0x2f4>
 8012b6a:	2b05      	cmp	r3, #5
 8012b6c:	bfc4      	itt	gt
 8012b6e:	3b04      	subgt	r3, #4
 8012b70:	9306      	strgt	r3, [sp, #24]
 8012b72:	9b06      	ldr	r3, [sp, #24]
 8012b74:	f1a3 0302 	sub.w	r3, r3, #2
 8012b78:	bfcc      	ite	gt
 8012b7a:	2500      	movgt	r5, #0
 8012b7c:	2501      	movle	r5, #1
 8012b7e:	2b03      	cmp	r3, #3
 8012b80:	f200 8087 	bhi.w	8012c92 <_dtoa_r+0x30a>
 8012b84:	e8df f003 	tbb	[pc, r3]
 8012b88:	59383a2d 	.word	0x59383a2d
 8012b8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8012b90:	441d      	add	r5, r3
 8012b92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8012b96:	2b20      	cmp	r3, #32
 8012b98:	bfc1      	itttt	gt
 8012b9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8012b9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8012ba2:	fa0b f303 	lslgt.w	r3, fp, r3
 8012ba6:	fa26 f000 	lsrgt.w	r0, r6, r0
 8012baa:	bfda      	itte	le
 8012bac:	f1c3 0320 	rsble	r3, r3, #32
 8012bb0:	fa06 f003 	lslle.w	r0, r6, r3
 8012bb4:	4318      	orrgt	r0, r3
 8012bb6:	f7ed fcc5 	bl	8000544 <__aeabi_ui2d>
 8012bba:	2301      	movs	r3, #1
 8012bbc:	4606      	mov	r6, r0
 8012bbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8012bc2:	3d01      	subs	r5, #1
 8012bc4:	930e      	str	r3, [sp, #56]	; 0x38
 8012bc6:	e76a      	b.n	8012a9e <_dtoa_r+0x116>
 8012bc8:	2301      	movs	r3, #1
 8012bca:	e7b2      	b.n	8012b32 <_dtoa_r+0x1aa>
 8012bcc:	900b      	str	r0, [sp, #44]	; 0x2c
 8012bce:	e7b1      	b.n	8012b34 <_dtoa_r+0x1ac>
 8012bd0:	9b04      	ldr	r3, [sp, #16]
 8012bd2:	9a00      	ldr	r2, [sp, #0]
 8012bd4:	1a9b      	subs	r3, r3, r2
 8012bd6:	9304      	str	r3, [sp, #16]
 8012bd8:	4253      	negs	r3, r2
 8012bda:	9307      	str	r3, [sp, #28]
 8012bdc:	2300      	movs	r3, #0
 8012bde:	930a      	str	r3, [sp, #40]	; 0x28
 8012be0:	e7bf      	b.n	8012b62 <_dtoa_r+0x1da>
 8012be2:	2300      	movs	r3, #0
 8012be4:	9308      	str	r3, [sp, #32]
 8012be6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012be8:	2b00      	cmp	r3, #0
 8012bea:	dc55      	bgt.n	8012c98 <_dtoa_r+0x310>
 8012bec:	2301      	movs	r3, #1
 8012bee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012bf2:	461a      	mov	r2, r3
 8012bf4:	9209      	str	r2, [sp, #36]	; 0x24
 8012bf6:	e00c      	b.n	8012c12 <_dtoa_r+0x28a>
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	e7f3      	b.n	8012be4 <_dtoa_r+0x25c>
 8012bfc:	2300      	movs	r3, #0
 8012bfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8012c00:	9308      	str	r3, [sp, #32]
 8012c02:	9b00      	ldr	r3, [sp, #0]
 8012c04:	4413      	add	r3, r2
 8012c06:	9302      	str	r3, [sp, #8]
 8012c08:	3301      	adds	r3, #1
 8012c0a:	2b01      	cmp	r3, #1
 8012c0c:	9303      	str	r3, [sp, #12]
 8012c0e:	bfb8      	it	lt
 8012c10:	2301      	movlt	r3, #1
 8012c12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8012c14:	2200      	movs	r2, #0
 8012c16:	6042      	str	r2, [r0, #4]
 8012c18:	2204      	movs	r2, #4
 8012c1a:	f102 0614 	add.w	r6, r2, #20
 8012c1e:	429e      	cmp	r6, r3
 8012c20:	6841      	ldr	r1, [r0, #4]
 8012c22:	d93d      	bls.n	8012ca0 <_dtoa_r+0x318>
 8012c24:	4620      	mov	r0, r4
 8012c26:	f000 fcbb 	bl	80135a0 <_Balloc>
 8012c2a:	9001      	str	r0, [sp, #4]
 8012c2c:	2800      	cmp	r0, #0
 8012c2e:	d13b      	bne.n	8012ca8 <_dtoa_r+0x320>
 8012c30:	4b11      	ldr	r3, [pc, #68]	; (8012c78 <_dtoa_r+0x2f0>)
 8012c32:	4602      	mov	r2, r0
 8012c34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8012c38:	e6c0      	b.n	80129bc <_dtoa_r+0x34>
 8012c3a:	2301      	movs	r3, #1
 8012c3c:	e7df      	b.n	8012bfe <_dtoa_r+0x276>
 8012c3e:	bf00      	nop
 8012c40:	636f4361 	.word	0x636f4361
 8012c44:	3fd287a7 	.word	0x3fd287a7
 8012c48:	8b60c8b3 	.word	0x8b60c8b3
 8012c4c:	3fc68a28 	.word	0x3fc68a28
 8012c50:	509f79fb 	.word	0x509f79fb
 8012c54:	3fd34413 	.word	0x3fd34413
 8012c58:	080148b5 	.word	0x080148b5
 8012c5c:	080148cc 	.word	0x080148cc
 8012c60:	7ff00000 	.word	0x7ff00000
 8012c64:	080148b1 	.word	0x080148b1
 8012c68:	080148a8 	.word	0x080148a8
 8012c6c:	08014885 	.word	0x08014885
 8012c70:	3ff80000 	.word	0x3ff80000
 8012c74:	080149c0 	.word	0x080149c0
 8012c78:	08014927 	.word	0x08014927
 8012c7c:	2501      	movs	r5, #1
 8012c7e:	2300      	movs	r3, #0
 8012c80:	9306      	str	r3, [sp, #24]
 8012c82:	9508      	str	r5, [sp, #32]
 8012c84:	f04f 33ff 	mov.w	r3, #4294967295
 8012c88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012c8c:	2200      	movs	r2, #0
 8012c8e:	2312      	movs	r3, #18
 8012c90:	e7b0      	b.n	8012bf4 <_dtoa_r+0x26c>
 8012c92:	2301      	movs	r3, #1
 8012c94:	9308      	str	r3, [sp, #32]
 8012c96:	e7f5      	b.n	8012c84 <_dtoa_r+0x2fc>
 8012c98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012c9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8012c9e:	e7b8      	b.n	8012c12 <_dtoa_r+0x28a>
 8012ca0:	3101      	adds	r1, #1
 8012ca2:	6041      	str	r1, [r0, #4]
 8012ca4:	0052      	lsls	r2, r2, #1
 8012ca6:	e7b8      	b.n	8012c1a <_dtoa_r+0x292>
 8012ca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012caa:	9a01      	ldr	r2, [sp, #4]
 8012cac:	601a      	str	r2, [r3, #0]
 8012cae:	9b03      	ldr	r3, [sp, #12]
 8012cb0:	2b0e      	cmp	r3, #14
 8012cb2:	f200 809d 	bhi.w	8012df0 <_dtoa_r+0x468>
 8012cb6:	2d00      	cmp	r5, #0
 8012cb8:	f000 809a 	beq.w	8012df0 <_dtoa_r+0x468>
 8012cbc:	9b00      	ldr	r3, [sp, #0]
 8012cbe:	2b00      	cmp	r3, #0
 8012cc0:	dd32      	ble.n	8012d28 <_dtoa_r+0x3a0>
 8012cc2:	4ab7      	ldr	r2, [pc, #732]	; (8012fa0 <_dtoa_r+0x618>)
 8012cc4:	f003 030f 	and.w	r3, r3, #15
 8012cc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8012ccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012cd0:	9b00      	ldr	r3, [sp, #0]
 8012cd2:	05d8      	lsls	r0, r3, #23
 8012cd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 8012cd8:	d516      	bpl.n	8012d08 <_dtoa_r+0x380>
 8012cda:	4bb2      	ldr	r3, [pc, #712]	; (8012fa4 <_dtoa_r+0x61c>)
 8012cdc:	ec51 0b19 	vmov	r0, r1, d9
 8012ce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8012ce4:	f7ed fdd2 	bl	800088c <__aeabi_ddiv>
 8012ce8:	f007 070f 	and.w	r7, r7, #15
 8012cec:	4682      	mov	sl, r0
 8012cee:	468b      	mov	fp, r1
 8012cf0:	2503      	movs	r5, #3
 8012cf2:	4eac      	ldr	r6, [pc, #688]	; (8012fa4 <_dtoa_r+0x61c>)
 8012cf4:	b957      	cbnz	r7, 8012d0c <_dtoa_r+0x384>
 8012cf6:	4642      	mov	r2, r8
 8012cf8:	464b      	mov	r3, r9
 8012cfa:	4650      	mov	r0, sl
 8012cfc:	4659      	mov	r1, fp
 8012cfe:	f7ed fdc5 	bl	800088c <__aeabi_ddiv>
 8012d02:	4682      	mov	sl, r0
 8012d04:	468b      	mov	fp, r1
 8012d06:	e028      	b.n	8012d5a <_dtoa_r+0x3d2>
 8012d08:	2502      	movs	r5, #2
 8012d0a:	e7f2      	b.n	8012cf2 <_dtoa_r+0x36a>
 8012d0c:	07f9      	lsls	r1, r7, #31
 8012d0e:	d508      	bpl.n	8012d22 <_dtoa_r+0x39a>
 8012d10:	4640      	mov	r0, r8
 8012d12:	4649      	mov	r1, r9
 8012d14:	e9d6 2300 	ldrd	r2, r3, [r6]
 8012d18:	f7ed fc8e 	bl	8000638 <__aeabi_dmul>
 8012d1c:	3501      	adds	r5, #1
 8012d1e:	4680      	mov	r8, r0
 8012d20:	4689      	mov	r9, r1
 8012d22:	107f      	asrs	r7, r7, #1
 8012d24:	3608      	adds	r6, #8
 8012d26:	e7e5      	b.n	8012cf4 <_dtoa_r+0x36c>
 8012d28:	f000 809b 	beq.w	8012e62 <_dtoa_r+0x4da>
 8012d2c:	9b00      	ldr	r3, [sp, #0]
 8012d2e:	4f9d      	ldr	r7, [pc, #628]	; (8012fa4 <_dtoa_r+0x61c>)
 8012d30:	425e      	negs	r6, r3
 8012d32:	4b9b      	ldr	r3, [pc, #620]	; (8012fa0 <_dtoa_r+0x618>)
 8012d34:	f006 020f 	and.w	r2, r6, #15
 8012d38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d40:	ec51 0b19 	vmov	r0, r1, d9
 8012d44:	f7ed fc78 	bl	8000638 <__aeabi_dmul>
 8012d48:	1136      	asrs	r6, r6, #4
 8012d4a:	4682      	mov	sl, r0
 8012d4c:	468b      	mov	fp, r1
 8012d4e:	2300      	movs	r3, #0
 8012d50:	2502      	movs	r5, #2
 8012d52:	2e00      	cmp	r6, #0
 8012d54:	d17a      	bne.n	8012e4c <_dtoa_r+0x4c4>
 8012d56:	2b00      	cmp	r3, #0
 8012d58:	d1d3      	bne.n	8012d02 <_dtoa_r+0x37a>
 8012d5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	f000 8082 	beq.w	8012e66 <_dtoa_r+0x4de>
 8012d62:	4b91      	ldr	r3, [pc, #580]	; (8012fa8 <_dtoa_r+0x620>)
 8012d64:	2200      	movs	r2, #0
 8012d66:	4650      	mov	r0, sl
 8012d68:	4659      	mov	r1, fp
 8012d6a:	f7ed fed7 	bl	8000b1c <__aeabi_dcmplt>
 8012d6e:	2800      	cmp	r0, #0
 8012d70:	d079      	beq.n	8012e66 <_dtoa_r+0x4de>
 8012d72:	9b03      	ldr	r3, [sp, #12]
 8012d74:	2b00      	cmp	r3, #0
 8012d76:	d076      	beq.n	8012e66 <_dtoa_r+0x4de>
 8012d78:	9b02      	ldr	r3, [sp, #8]
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	dd36      	ble.n	8012dec <_dtoa_r+0x464>
 8012d7e:	9b00      	ldr	r3, [sp, #0]
 8012d80:	4650      	mov	r0, sl
 8012d82:	4659      	mov	r1, fp
 8012d84:	1e5f      	subs	r7, r3, #1
 8012d86:	2200      	movs	r2, #0
 8012d88:	4b88      	ldr	r3, [pc, #544]	; (8012fac <_dtoa_r+0x624>)
 8012d8a:	f7ed fc55 	bl	8000638 <__aeabi_dmul>
 8012d8e:	9e02      	ldr	r6, [sp, #8]
 8012d90:	4682      	mov	sl, r0
 8012d92:	468b      	mov	fp, r1
 8012d94:	3501      	adds	r5, #1
 8012d96:	4628      	mov	r0, r5
 8012d98:	f7ed fbe4 	bl	8000564 <__aeabi_i2d>
 8012d9c:	4652      	mov	r2, sl
 8012d9e:	465b      	mov	r3, fp
 8012da0:	f7ed fc4a 	bl	8000638 <__aeabi_dmul>
 8012da4:	4b82      	ldr	r3, [pc, #520]	; (8012fb0 <_dtoa_r+0x628>)
 8012da6:	2200      	movs	r2, #0
 8012da8:	f7ed fa90 	bl	80002cc <__adddf3>
 8012dac:	46d0      	mov	r8, sl
 8012dae:	46d9      	mov	r9, fp
 8012db0:	4682      	mov	sl, r0
 8012db2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8012db6:	2e00      	cmp	r6, #0
 8012db8:	d158      	bne.n	8012e6c <_dtoa_r+0x4e4>
 8012dba:	4b7e      	ldr	r3, [pc, #504]	; (8012fb4 <_dtoa_r+0x62c>)
 8012dbc:	2200      	movs	r2, #0
 8012dbe:	4640      	mov	r0, r8
 8012dc0:	4649      	mov	r1, r9
 8012dc2:	f7ed fa81 	bl	80002c8 <__aeabi_dsub>
 8012dc6:	4652      	mov	r2, sl
 8012dc8:	465b      	mov	r3, fp
 8012dca:	4680      	mov	r8, r0
 8012dcc:	4689      	mov	r9, r1
 8012dce:	f7ed fec3 	bl	8000b58 <__aeabi_dcmpgt>
 8012dd2:	2800      	cmp	r0, #0
 8012dd4:	f040 8295 	bne.w	8013302 <_dtoa_r+0x97a>
 8012dd8:	4652      	mov	r2, sl
 8012dda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8012dde:	4640      	mov	r0, r8
 8012de0:	4649      	mov	r1, r9
 8012de2:	f7ed fe9b 	bl	8000b1c <__aeabi_dcmplt>
 8012de6:	2800      	cmp	r0, #0
 8012de8:	f040 8289 	bne.w	80132fe <_dtoa_r+0x976>
 8012dec:	ec5b ab19 	vmov	sl, fp, d9
 8012df0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8012df2:	2b00      	cmp	r3, #0
 8012df4:	f2c0 8148 	blt.w	8013088 <_dtoa_r+0x700>
 8012df8:	9a00      	ldr	r2, [sp, #0]
 8012dfa:	2a0e      	cmp	r2, #14
 8012dfc:	f300 8144 	bgt.w	8013088 <_dtoa_r+0x700>
 8012e00:	4b67      	ldr	r3, [pc, #412]	; (8012fa0 <_dtoa_r+0x618>)
 8012e02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8012e06:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e0c:	2b00      	cmp	r3, #0
 8012e0e:	f280 80d5 	bge.w	8012fbc <_dtoa_r+0x634>
 8012e12:	9b03      	ldr	r3, [sp, #12]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	f300 80d1 	bgt.w	8012fbc <_dtoa_r+0x634>
 8012e1a:	f040 826f 	bne.w	80132fc <_dtoa_r+0x974>
 8012e1e:	4b65      	ldr	r3, [pc, #404]	; (8012fb4 <_dtoa_r+0x62c>)
 8012e20:	2200      	movs	r2, #0
 8012e22:	4640      	mov	r0, r8
 8012e24:	4649      	mov	r1, r9
 8012e26:	f7ed fc07 	bl	8000638 <__aeabi_dmul>
 8012e2a:	4652      	mov	r2, sl
 8012e2c:	465b      	mov	r3, fp
 8012e2e:	f7ed fe89 	bl	8000b44 <__aeabi_dcmpge>
 8012e32:	9e03      	ldr	r6, [sp, #12]
 8012e34:	4637      	mov	r7, r6
 8012e36:	2800      	cmp	r0, #0
 8012e38:	f040 8245 	bne.w	80132c6 <_dtoa_r+0x93e>
 8012e3c:	9d01      	ldr	r5, [sp, #4]
 8012e3e:	2331      	movs	r3, #49	; 0x31
 8012e40:	f805 3b01 	strb.w	r3, [r5], #1
 8012e44:	9b00      	ldr	r3, [sp, #0]
 8012e46:	3301      	adds	r3, #1
 8012e48:	9300      	str	r3, [sp, #0]
 8012e4a:	e240      	b.n	80132ce <_dtoa_r+0x946>
 8012e4c:	07f2      	lsls	r2, r6, #31
 8012e4e:	d505      	bpl.n	8012e5c <_dtoa_r+0x4d4>
 8012e50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012e54:	f7ed fbf0 	bl	8000638 <__aeabi_dmul>
 8012e58:	3501      	adds	r5, #1
 8012e5a:	2301      	movs	r3, #1
 8012e5c:	1076      	asrs	r6, r6, #1
 8012e5e:	3708      	adds	r7, #8
 8012e60:	e777      	b.n	8012d52 <_dtoa_r+0x3ca>
 8012e62:	2502      	movs	r5, #2
 8012e64:	e779      	b.n	8012d5a <_dtoa_r+0x3d2>
 8012e66:	9f00      	ldr	r7, [sp, #0]
 8012e68:	9e03      	ldr	r6, [sp, #12]
 8012e6a:	e794      	b.n	8012d96 <_dtoa_r+0x40e>
 8012e6c:	9901      	ldr	r1, [sp, #4]
 8012e6e:	4b4c      	ldr	r3, [pc, #304]	; (8012fa0 <_dtoa_r+0x618>)
 8012e70:	4431      	add	r1, r6
 8012e72:	910d      	str	r1, [sp, #52]	; 0x34
 8012e74:	9908      	ldr	r1, [sp, #32]
 8012e76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8012e7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8012e7e:	2900      	cmp	r1, #0
 8012e80:	d043      	beq.n	8012f0a <_dtoa_r+0x582>
 8012e82:	494d      	ldr	r1, [pc, #308]	; (8012fb8 <_dtoa_r+0x630>)
 8012e84:	2000      	movs	r0, #0
 8012e86:	f7ed fd01 	bl	800088c <__aeabi_ddiv>
 8012e8a:	4652      	mov	r2, sl
 8012e8c:	465b      	mov	r3, fp
 8012e8e:	f7ed fa1b 	bl	80002c8 <__aeabi_dsub>
 8012e92:	9d01      	ldr	r5, [sp, #4]
 8012e94:	4682      	mov	sl, r0
 8012e96:	468b      	mov	fp, r1
 8012e98:	4649      	mov	r1, r9
 8012e9a:	4640      	mov	r0, r8
 8012e9c:	f7ed fe7c 	bl	8000b98 <__aeabi_d2iz>
 8012ea0:	4606      	mov	r6, r0
 8012ea2:	f7ed fb5f 	bl	8000564 <__aeabi_i2d>
 8012ea6:	4602      	mov	r2, r0
 8012ea8:	460b      	mov	r3, r1
 8012eaa:	4640      	mov	r0, r8
 8012eac:	4649      	mov	r1, r9
 8012eae:	f7ed fa0b 	bl	80002c8 <__aeabi_dsub>
 8012eb2:	3630      	adds	r6, #48	; 0x30
 8012eb4:	f805 6b01 	strb.w	r6, [r5], #1
 8012eb8:	4652      	mov	r2, sl
 8012eba:	465b      	mov	r3, fp
 8012ebc:	4680      	mov	r8, r0
 8012ebe:	4689      	mov	r9, r1
 8012ec0:	f7ed fe2c 	bl	8000b1c <__aeabi_dcmplt>
 8012ec4:	2800      	cmp	r0, #0
 8012ec6:	d163      	bne.n	8012f90 <_dtoa_r+0x608>
 8012ec8:	4642      	mov	r2, r8
 8012eca:	464b      	mov	r3, r9
 8012ecc:	4936      	ldr	r1, [pc, #216]	; (8012fa8 <_dtoa_r+0x620>)
 8012ece:	2000      	movs	r0, #0
 8012ed0:	f7ed f9fa 	bl	80002c8 <__aeabi_dsub>
 8012ed4:	4652      	mov	r2, sl
 8012ed6:	465b      	mov	r3, fp
 8012ed8:	f7ed fe20 	bl	8000b1c <__aeabi_dcmplt>
 8012edc:	2800      	cmp	r0, #0
 8012ede:	f040 80b5 	bne.w	801304c <_dtoa_r+0x6c4>
 8012ee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012ee4:	429d      	cmp	r5, r3
 8012ee6:	d081      	beq.n	8012dec <_dtoa_r+0x464>
 8012ee8:	4b30      	ldr	r3, [pc, #192]	; (8012fac <_dtoa_r+0x624>)
 8012eea:	2200      	movs	r2, #0
 8012eec:	4650      	mov	r0, sl
 8012eee:	4659      	mov	r1, fp
 8012ef0:	f7ed fba2 	bl	8000638 <__aeabi_dmul>
 8012ef4:	4b2d      	ldr	r3, [pc, #180]	; (8012fac <_dtoa_r+0x624>)
 8012ef6:	4682      	mov	sl, r0
 8012ef8:	468b      	mov	fp, r1
 8012efa:	4640      	mov	r0, r8
 8012efc:	4649      	mov	r1, r9
 8012efe:	2200      	movs	r2, #0
 8012f00:	f7ed fb9a 	bl	8000638 <__aeabi_dmul>
 8012f04:	4680      	mov	r8, r0
 8012f06:	4689      	mov	r9, r1
 8012f08:	e7c6      	b.n	8012e98 <_dtoa_r+0x510>
 8012f0a:	4650      	mov	r0, sl
 8012f0c:	4659      	mov	r1, fp
 8012f0e:	f7ed fb93 	bl	8000638 <__aeabi_dmul>
 8012f12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f14:	9d01      	ldr	r5, [sp, #4]
 8012f16:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f18:	4682      	mov	sl, r0
 8012f1a:	468b      	mov	fp, r1
 8012f1c:	4649      	mov	r1, r9
 8012f1e:	4640      	mov	r0, r8
 8012f20:	f7ed fe3a 	bl	8000b98 <__aeabi_d2iz>
 8012f24:	4606      	mov	r6, r0
 8012f26:	f7ed fb1d 	bl	8000564 <__aeabi_i2d>
 8012f2a:	3630      	adds	r6, #48	; 0x30
 8012f2c:	4602      	mov	r2, r0
 8012f2e:	460b      	mov	r3, r1
 8012f30:	4640      	mov	r0, r8
 8012f32:	4649      	mov	r1, r9
 8012f34:	f7ed f9c8 	bl	80002c8 <__aeabi_dsub>
 8012f38:	f805 6b01 	strb.w	r6, [r5], #1
 8012f3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012f3e:	429d      	cmp	r5, r3
 8012f40:	4680      	mov	r8, r0
 8012f42:	4689      	mov	r9, r1
 8012f44:	f04f 0200 	mov.w	r2, #0
 8012f48:	d124      	bne.n	8012f94 <_dtoa_r+0x60c>
 8012f4a:	4b1b      	ldr	r3, [pc, #108]	; (8012fb8 <_dtoa_r+0x630>)
 8012f4c:	4650      	mov	r0, sl
 8012f4e:	4659      	mov	r1, fp
 8012f50:	f7ed f9bc 	bl	80002cc <__adddf3>
 8012f54:	4602      	mov	r2, r0
 8012f56:	460b      	mov	r3, r1
 8012f58:	4640      	mov	r0, r8
 8012f5a:	4649      	mov	r1, r9
 8012f5c:	f7ed fdfc 	bl	8000b58 <__aeabi_dcmpgt>
 8012f60:	2800      	cmp	r0, #0
 8012f62:	d173      	bne.n	801304c <_dtoa_r+0x6c4>
 8012f64:	4652      	mov	r2, sl
 8012f66:	465b      	mov	r3, fp
 8012f68:	4913      	ldr	r1, [pc, #76]	; (8012fb8 <_dtoa_r+0x630>)
 8012f6a:	2000      	movs	r0, #0
 8012f6c:	f7ed f9ac 	bl	80002c8 <__aeabi_dsub>
 8012f70:	4602      	mov	r2, r0
 8012f72:	460b      	mov	r3, r1
 8012f74:	4640      	mov	r0, r8
 8012f76:	4649      	mov	r1, r9
 8012f78:	f7ed fdd0 	bl	8000b1c <__aeabi_dcmplt>
 8012f7c:	2800      	cmp	r0, #0
 8012f7e:	f43f af35 	beq.w	8012dec <_dtoa_r+0x464>
 8012f82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8012f84:	1e6b      	subs	r3, r5, #1
 8012f86:	930f      	str	r3, [sp, #60]	; 0x3c
 8012f88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8012f8c:	2b30      	cmp	r3, #48	; 0x30
 8012f8e:	d0f8      	beq.n	8012f82 <_dtoa_r+0x5fa>
 8012f90:	9700      	str	r7, [sp, #0]
 8012f92:	e049      	b.n	8013028 <_dtoa_r+0x6a0>
 8012f94:	4b05      	ldr	r3, [pc, #20]	; (8012fac <_dtoa_r+0x624>)
 8012f96:	f7ed fb4f 	bl	8000638 <__aeabi_dmul>
 8012f9a:	4680      	mov	r8, r0
 8012f9c:	4689      	mov	r9, r1
 8012f9e:	e7bd      	b.n	8012f1c <_dtoa_r+0x594>
 8012fa0:	080149c0 	.word	0x080149c0
 8012fa4:	08014998 	.word	0x08014998
 8012fa8:	3ff00000 	.word	0x3ff00000
 8012fac:	40240000 	.word	0x40240000
 8012fb0:	401c0000 	.word	0x401c0000
 8012fb4:	40140000 	.word	0x40140000
 8012fb8:	3fe00000 	.word	0x3fe00000
 8012fbc:	9d01      	ldr	r5, [sp, #4]
 8012fbe:	4656      	mov	r6, sl
 8012fc0:	465f      	mov	r7, fp
 8012fc2:	4642      	mov	r2, r8
 8012fc4:	464b      	mov	r3, r9
 8012fc6:	4630      	mov	r0, r6
 8012fc8:	4639      	mov	r1, r7
 8012fca:	f7ed fc5f 	bl	800088c <__aeabi_ddiv>
 8012fce:	f7ed fde3 	bl	8000b98 <__aeabi_d2iz>
 8012fd2:	4682      	mov	sl, r0
 8012fd4:	f7ed fac6 	bl	8000564 <__aeabi_i2d>
 8012fd8:	4642      	mov	r2, r8
 8012fda:	464b      	mov	r3, r9
 8012fdc:	f7ed fb2c 	bl	8000638 <__aeabi_dmul>
 8012fe0:	4602      	mov	r2, r0
 8012fe2:	460b      	mov	r3, r1
 8012fe4:	4630      	mov	r0, r6
 8012fe6:	4639      	mov	r1, r7
 8012fe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8012fec:	f7ed f96c 	bl	80002c8 <__aeabi_dsub>
 8012ff0:	f805 6b01 	strb.w	r6, [r5], #1
 8012ff4:	9e01      	ldr	r6, [sp, #4]
 8012ff6:	9f03      	ldr	r7, [sp, #12]
 8012ff8:	1bae      	subs	r6, r5, r6
 8012ffa:	42b7      	cmp	r7, r6
 8012ffc:	4602      	mov	r2, r0
 8012ffe:	460b      	mov	r3, r1
 8013000:	d135      	bne.n	801306e <_dtoa_r+0x6e6>
 8013002:	f7ed f963 	bl	80002cc <__adddf3>
 8013006:	4642      	mov	r2, r8
 8013008:	464b      	mov	r3, r9
 801300a:	4606      	mov	r6, r0
 801300c:	460f      	mov	r7, r1
 801300e:	f7ed fda3 	bl	8000b58 <__aeabi_dcmpgt>
 8013012:	b9d0      	cbnz	r0, 801304a <_dtoa_r+0x6c2>
 8013014:	4642      	mov	r2, r8
 8013016:	464b      	mov	r3, r9
 8013018:	4630      	mov	r0, r6
 801301a:	4639      	mov	r1, r7
 801301c:	f7ed fd74 	bl	8000b08 <__aeabi_dcmpeq>
 8013020:	b110      	cbz	r0, 8013028 <_dtoa_r+0x6a0>
 8013022:	f01a 0f01 	tst.w	sl, #1
 8013026:	d110      	bne.n	801304a <_dtoa_r+0x6c2>
 8013028:	4620      	mov	r0, r4
 801302a:	ee18 1a10 	vmov	r1, s16
 801302e:	f000 faf7 	bl	8013620 <_Bfree>
 8013032:	2300      	movs	r3, #0
 8013034:	9800      	ldr	r0, [sp, #0]
 8013036:	702b      	strb	r3, [r5, #0]
 8013038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801303a:	3001      	adds	r0, #1
 801303c:	6018      	str	r0, [r3, #0]
 801303e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013040:	2b00      	cmp	r3, #0
 8013042:	f43f acf1 	beq.w	8012a28 <_dtoa_r+0xa0>
 8013046:	601d      	str	r5, [r3, #0]
 8013048:	e4ee      	b.n	8012a28 <_dtoa_r+0xa0>
 801304a:	9f00      	ldr	r7, [sp, #0]
 801304c:	462b      	mov	r3, r5
 801304e:	461d      	mov	r5, r3
 8013050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013054:	2a39      	cmp	r2, #57	; 0x39
 8013056:	d106      	bne.n	8013066 <_dtoa_r+0x6de>
 8013058:	9a01      	ldr	r2, [sp, #4]
 801305a:	429a      	cmp	r2, r3
 801305c:	d1f7      	bne.n	801304e <_dtoa_r+0x6c6>
 801305e:	9901      	ldr	r1, [sp, #4]
 8013060:	2230      	movs	r2, #48	; 0x30
 8013062:	3701      	adds	r7, #1
 8013064:	700a      	strb	r2, [r1, #0]
 8013066:	781a      	ldrb	r2, [r3, #0]
 8013068:	3201      	adds	r2, #1
 801306a:	701a      	strb	r2, [r3, #0]
 801306c:	e790      	b.n	8012f90 <_dtoa_r+0x608>
 801306e:	4ba6      	ldr	r3, [pc, #664]	; (8013308 <_dtoa_r+0x980>)
 8013070:	2200      	movs	r2, #0
 8013072:	f7ed fae1 	bl	8000638 <__aeabi_dmul>
 8013076:	2200      	movs	r2, #0
 8013078:	2300      	movs	r3, #0
 801307a:	4606      	mov	r6, r0
 801307c:	460f      	mov	r7, r1
 801307e:	f7ed fd43 	bl	8000b08 <__aeabi_dcmpeq>
 8013082:	2800      	cmp	r0, #0
 8013084:	d09d      	beq.n	8012fc2 <_dtoa_r+0x63a>
 8013086:	e7cf      	b.n	8013028 <_dtoa_r+0x6a0>
 8013088:	9a08      	ldr	r2, [sp, #32]
 801308a:	2a00      	cmp	r2, #0
 801308c:	f000 80d7 	beq.w	801323e <_dtoa_r+0x8b6>
 8013090:	9a06      	ldr	r2, [sp, #24]
 8013092:	2a01      	cmp	r2, #1
 8013094:	f300 80ba 	bgt.w	801320c <_dtoa_r+0x884>
 8013098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801309a:	2a00      	cmp	r2, #0
 801309c:	f000 80b2 	beq.w	8013204 <_dtoa_r+0x87c>
 80130a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80130a4:	9e07      	ldr	r6, [sp, #28]
 80130a6:	9d04      	ldr	r5, [sp, #16]
 80130a8:	9a04      	ldr	r2, [sp, #16]
 80130aa:	441a      	add	r2, r3
 80130ac:	9204      	str	r2, [sp, #16]
 80130ae:	9a05      	ldr	r2, [sp, #20]
 80130b0:	2101      	movs	r1, #1
 80130b2:	441a      	add	r2, r3
 80130b4:	4620      	mov	r0, r4
 80130b6:	9205      	str	r2, [sp, #20]
 80130b8:	f000 fb6a 	bl	8013790 <__i2b>
 80130bc:	4607      	mov	r7, r0
 80130be:	2d00      	cmp	r5, #0
 80130c0:	dd0c      	ble.n	80130dc <_dtoa_r+0x754>
 80130c2:	9b05      	ldr	r3, [sp, #20]
 80130c4:	2b00      	cmp	r3, #0
 80130c6:	dd09      	ble.n	80130dc <_dtoa_r+0x754>
 80130c8:	42ab      	cmp	r3, r5
 80130ca:	9a04      	ldr	r2, [sp, #16]
 80130cc:	bfa8      	it	ge
 80130ce:	462b      	movge	r3, r5
 80130d0:	1ad2      	subs	r2, r2, r3
 80130d2:	9204      	str	r2, [sp, #16]
 80130d4:	9a05      	ldr	r2, [sp, #20]
 80130d6:	1aed      	subs	r5, r5, r3
 80130d8:	1ad3      	subs	r3, r2, r3
 80130da:	9305      	str	r3, [sp, #20]
 80130dc:	9b07      	ldr	r3, [sp, #28]
 80130de:	b31b      	cbz	r3, 8013128 <_dtoa_r+0x7a0>
 80130e0:	9b08      	ldr	r3, [sp, #32]
 80130e2:	2b00      	cmp	r3, #0
 80130e4:	f000 80af 	beq.w	8013246 <_dtoa_r+0x8be>
 80130e8:	2e00      	cmp	r6, #0
 80130ea:	dd13      	ble.n	8013114 <_dtoa_r+0x78c>
 80130ec:	4639      	mov	r1, r7
 80130ee:	4632      	mov	r2, r6
 80130f0:	4620      	mov	r0, r4
 80130f2:	f000 fc0d 	bl	8013910 <__pow5mult>
 80130f6:	ee18 2a10 	vmov	r2, s16
 80130fa:	4601      	mov	r1, r0
 80130fc:	4607      	mov	r7, r0
 80130fe:	4620      	mov	r0, r4
 8013100:	f000 fb5c 	bl	80137bc <__multiply>
 8013104:	ee18 1a10 	vmov	r1, s16
 8013108:	4680      	mov	r8, r0
 801310a:	4620      	mov	r0, r4
 801310c:	f000 fa88 	bl	8013620 <_Bfree>
 8013110:	ee08 8a10 	vmov	s16, r8
 8013114:	9b07      	ldr	r3, [sp, #28]
 8013116:	1b9a      	subs	r2, r3, r6
 8013118:	d006      	beq.n	8013128 <_dtoa_r+0x7a0>
 801311a:	ee18 1a10 	vmov	r1, s16
 801311e:	4620      	mov	r0, r4
 8013120:	f000 fbf6 	bl	8013910 <__pow5mult>
 8013124:	ee08 0a10 	vmov	s16, r0
 8013128:	2101      	movs	r1, #1
 801312a:	4620      	mov	r0, r4
 801312c:	f000 fb30 	bl	8013790 <__i2b>
 8013130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013132:	2b00      	cmp	r3, #0
 8013134:	4606      	mov	r6, r0
 8013136:	f340 8088 	ble.w	801324a <_dtoa_r+0x8c2>
 801313a:	461a      	mov	r2, r3
 801313c:	4601      	mov	r1, r0
 801313e:	4620      	mov	r0, r4
 8013140:	f000 fbe6 	bl	8013910 <__pow5mult>
 8013144:	9b06      	ldr	r3, [sp, #24]
 8013146:	2b01      	cmp	r3, #1
 8013148:	4606      	mov	r6, r0
 801314a:	f340 8081 	ble.w	8013250 <_dtoa_r+0x8c8>
 801314e:	f04f 0800 	mov.w	r8, #0
 8013152:	6933      	ldr	r3, [r6, #16]
 8013154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013158:	6918      	ldr	r0, [r3, #16]
 801315a:	f000 fac9 	bl	80136f0 <__hi0bits>
 801315e:	f1c0 0020 	rsb	r0, r0, #32
 8013162:	9b05      	ldr	r3, [sp, #20]
 8013164:	4418      	add	r0, r3
 8013166:	f010 001f 	ands.w	r0, r0, #31
 801316a:	f000 8092 	beq.w	8013292 <_dtoa_r+0x90a>
 801316e:	f1c0 0320 	rsb	r3, r0, #32
 8013172:	2b04      	cmp	r3, #4
 8013174:	f340 808a 	ble.w	801328c <_dtoa_r+0x904>
 8013178:	f1c0 001c 	rsb	r0, r0, #28
 801317c:	9b04      	ldr	r3, [sp, #16]
 801317e:	4403      	add	r3, r0
 8013180:	9304      	str	r3, [sp, #16]
 8013182:	9b05      	ldr	r3, [sp, #20]
 8013184:	4403      	add	r3, r0
 8013186:	4405      	add	r5, r0
 8013188:	9305      	str	r3, [sp, #20]
 801318a:	9b04      	ldr	r3, [sp, #16]
 801318c:	2b00      	cmp	r3, #0
 801318e:	dd07      	ble.n	80131a0 <_dtoa_r+0x818>
 8013190:	ee18 1a10 	vmov	r1, s16
 8013194:	461a      	mov	r2, r3
 8013196:	4620      	mov	r0, r4
 8013198:	f000 fc14 	bl	80139c4 <__lshift>
 801319c:	ee08 0a10 	vmov	s16, r0
 80131a0:	9b05      	ldr	r3, [sp, #20]
 80131a2:	2b00      	cmp	r3, #0
 80131a4:	dd05      	ble.n	80131b2 <_dtoa_r+0x82a>
 80131a6:	4631      	mov	r1, r6
 80131a8:	461a      	mov	r2, r3
 80131aa:	4620      	mov	r0, r4
 80131ac:	f000 fc0a 	bl	80139c4 <__lshift>
 80131b0:	4606      	mov	r6, r0
 80131b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80131b4:	2b00      	cmp	r3, #0
 80131b6:	d06e      	beq.n	8013296 <_dtoa_r+0x90e>
 80131b8:	ee18 0a10 	vmov	r0, s16
 80131bc:	4631      	mov	r1, r6
 80131be:	f000 fc71 	bl	8013aa4 <__mcmp>
 80131c2:	2800      	cmp	r0, #0
 80131c4:	da67      	bge.n	8013296 <_dtoa_r+0x90e>
 80131c6:	9b00      	ldr	r3, [sp, #0]
 80131c8:	3b01      	subs	r3, #1
 80131ca:	ee18 1a10 	vmov	r1, s16
 80131ce:	9300      	str	r3, [sp, #0]
 80131d0:	220a      	movs	r2, #10
 80131d2:	2300      	movs	r3, #0
 80131d4:	4620      	mov	r0, r4
 80131d6:	f000 fa45 	bl	8013664 <__multadd>
 80131da:	9b08      	ldr	r3, [sp, #32]
 80131dc:	ee08 0a10 	vmov	s16, r0
 80131e0:	2b00      	cmp	r3, #0
 80131e2:	f000 81b1 	beq.w	8013548 <_dtoa_r+0xbc0>
 80131e6:	2300      	movs	r3, #0
 80131e8:	4639      	mov	r1, r7
 80131ea:	220a      	movs	r2, #10
 80131ec:	4620      	mov	r0, r4
 80131ee:	f000 fa39 	bl	8013664 <__multadd>
 80131f2:	9b02      	ldr	r3, [sp, #8]
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	4607      	mov	r7, r0
 80131f8:	f300 808e 	bgt.w	8013318 <_dtoa_r+0x990>
 80131fc:	9b06      	ldr	r3, [sp, #24]
 80131fe:	2b02      	cmp	r3, #2
 8013200:	dc51      	bgt.n	80132a6 <_dtoa_r+0x91e>
 8013202:	e089      	b.n	8013318 <_dtoa_r+0x990>
 8013204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801320a:	e74b      	b.n	80130a4 <_dtoa_r+0x71c>
 801320c:	9b03      	ldr	r3, [sp, #12]
 801320e:	1e5e      	subs	r6, r3, #1
 8013210:	9b07      	ldr	r3, [sp, #28]
 8013212:	42b3      	cmp	r3, r6
 8013214:	bfbf      	itttt	lt
 8013216:	9b07      	ldrlt	r3, [sp, #28]
 8013218:	9607      	strlt	r6, [sp, #28]
 801321a:	1af2      	sublt	r2, r6, r3
 801321c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801321e:	bfb6      	itet	lt
 8013220:	189b      	addlt	r3, r3, r2
 8013222:	1b9e      	subge	r6, r3, r6
 8013224:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013226:	9b03      	ldr	r3, [sp, #12]
 8013228:	bfb8      	it	lt
 801322a:	2600      	movlt	r6, #0
 801322c:	2b00      	cmp	r3, #0
 801322e:	bfb7      	itett	lt
 8013230:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013234:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013238:	1a9d      	sublt	r5, r3, r2
 801323a:	2300      	movlt	r3, #0
 801323c:	e734      	b.n	80130a8 <_dtoa_r+0x720>
 801323e:	9e07      	ldr	r6, [sp, #28]
 8013240:	9d04      	ldr	r5, [sp, #16]
 8013242:	9f08      	ldr	r7, [sp, #32]
 8013244:	e73b      	b.n	80130be <_dtoa_r+0x736>
 8013246:	9a07      	ldr	r2, [sp, #28]
 8013248:	e767      	b.n	801311a <_dtoa_r+0x792>
 801324a:	9b06      	ldr	r3, [sp, #24]
 801324c:	2b01      	cmp	r3, #1
 801324e:	dc18      	bgt.n	8013282 <_dtoa_r+0x8fa>
 8013250:	f1ba 0f00 	cmp.w	sl, #0
 8013254:	d115      	bne.n	8013282 <_dtoa_r+0x8fa>
 8013256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801325a:	b993      	cbnz	r3, 8013282 <_dtoa_r+0x8fa>
 801325c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013260:	0d1b      	lsrs	r3, r3, #20
 8013262:	051b      	lsls	r3, r3, #20
 8013264:	b183      	cbz	r3, 8013288 <_dtoa_r+0x900>
 8013266:	9b04      	ldr	r3, [sp, #16]
 8013268:	3301      	adds	r3, #1
 801326a:	9304      	str	r3, [sp, #16]
 801326c:	9b05      	ldr	r3, [sp, #20]
 801326e:	3301      	adds	r3, #1
 8013270:	9305      	str	r3, [sp, #20]
 8013272:	f04f 0801 	mov.w	r8, #1
 8013276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013278:	2b00      	cmp	r3, #0
 801327a:	f47f af6a 	bne.w	8013152 <_dtoa_r+0x7ca>
 801327e:	2001      	movs	r0, #1
 8013280:	e76f      	b.n	8013162 <_dtoa_r+0x7da>
 8013282:	f04f 0800 	mov.w	r8, #0
 8013286:	e7f6      	b.n	8013276 <_dtoa_r+0x8ee>
 8013288:	4698      	mov	r8, r3
 801328a:	e7f4      	b.n	8013276 <_dtoa_r+0x8ee>
 801328c:	f43f af7d 	beq.w	801318a <_dtoa_r+0x802>
 8013290:	4618      	mov	r0, r3
 8013292:	301c      	adds	r0, #28
 8013294:	e772      	b.n	801317c <_dtoa_r+0x7f4>
 8013296:	9b03      	ldr	r3, [sp, #12]
 8013298:	2b00      	cmp	r3, #0
 801329a:	dc37      	bgt.n	801330c <_dtoa_r+0x984>
 801329c:	9b06      	ldr	r3, [sp, #24]
 801329e:	2b02      	cmp	r3, #2
 80132a0:	dd34      	ble.n	801330c <_dtoa_r+0x984>
 80132a2:	9b03      	ldr	r3, [sp, #12]
 80132a4:	9302      	str	r3, [sp, #8]
 80132a6:	9b02      	ldr	r3, [sp, #8]
 80132a8:	b96b      	cbnz	r3, 80132c6 <_dtoa_r+0x93e>
 80132aa:	4631      	mov	r1, r6
 80132ac:	2205      	movs	r2, #5
 80132ae:	4620      	mov	r0, r4
 80132b0:	f000 f9d8 	bl	8013664 <__multadd>
 80132b4:	4601      	mov	r1, r0
 80132b6:	4606      	mov	r6, r0
 80132b8:	ee18 0a10 	vmov	r0, s16
 80132bc:	f000 fbf2 	bl	8013aa4 <__mcmp>
 80132c0:	2800      	cmp	r0, #0
 80132c2:	f73f adbb 	bgt.w	8012e3c <_dtoa_r+0x4b4>
 80132c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80132c8:	9d01      	ldr	r5, [sp, #4]
 80132ca:	43db      	mvns	r3, r3
 80132cc:	9300      	str	r3, [sp, #0]
 80132ce:	f04f 0800 	mov.w	r8, #0
 80132d2:	4631      	mov	r1, r6
 80132d4:	4620      	mov	r0, r4
 80132d6:	f000 f9a3 	bl	8013620 <_Bfree>
 80132da:	2f00      	cmp	r7, #0
 80132dc:	f43f aea4 	beq.w	8013028 <_dtoa_r+0x6a0>
 80132e0:	f1b8 0f00 	cmp.w	r8, #0
 80132e4:	d005      	beq.n	80132f2 <_dtoa_r+0x96a>
 80132e6:	45b8      	cmp	r8, r7
 80132e8:	d003      	beq.n	80132f2 <_dtoa_r+0x96a>
 80132ea:	4641      	mov	r1, r8
 80132ec:	4620      	mov	r0, r4
 80132ee:	f000 f997 	bl	8013620 <_Bfree>
 80132f2:	4639      	mov	r1, r7
 80132f4:	4620      	mov	r0, r4
 80132f6:	f000 f993 	bl	8013620 <_Bfree>
 80132fa:	e695      	b.n	8013028 <_dtoa_r+0x6a0>
 80132fc:	2600      	movs	r6, #0
 80132fe:	4637      	mov	r7, r6
 8013300:	e7e1      	b.n	80132c6 <_dtoa_r+0x93e>
 8013302:	9700      	str	r7, [sp, #0]
 8013304:	4637      	mov	r7, r6
 8013306:	e599      	b.n	8012e3c <_dtoa_r+0x4b4>
 8013308:	40240000 	.word	0x40240000
 801330c:	9b08      	ldr	r3, [sp, #32]
 801330e:	2b00      	cmp	r3, #0
 8013310:	f000 80ca 	beq.w	80134a8 <_dtoa_r+0xb20>
 8013314:	9b03      	ldr	r3, [sp, #12]
 8013316:	9302      	str	r3, [sp, #8]
 8013318:	2d00      	cmp	r5, #0
 801331a:	dd05      	ble.n	8013328 <_dtoa_r+0x9a0>
 801331c:	4639      	mov	r1, r7
 801331e:	462a      	mov	r2, r5
 8013320:	4620      	mov	r0, r4
 8013322:	f000 fb4f 	bl	80139c4 <__lshift>
 8013326:	4607      	mov	r7, r0
 8013328:	f1b8 0f00 	cmp.w	r8, #0
 801332c:	d05b      	beq.n	80133e6 <_dtoa_r+0xa5e>
 801332e:	6879      	ldr	r1, [r7, #4]
 8013330:	4620      	mov	r0, r4
 8013332:	f000 f935 	bl	80135a0 <_Balloc>
 8013336:	4605      	mov	r5, r0
 8013338:	b928      	cbnz	r0, 8013346 <_dtoa_r+0x9be>
 801333a:	4b87      	ldr	r3, [pc, #540]	; (8013558 <_dtoa_r+0xbd0>)
 801333c:	4602      	mov	r2, r0
 801333e:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013342:	f7ff bb3b 	b.w	80129bc <_dtoa_r+0x34>
 8013346:	693a      	ldr	r2, [r7, #16]
 8013348:	3202      	adds	r2, #2
 801334a:	0092      	lsls	r2, r2, #2
 801334c:	f107 010c 	add.w	r1, r7, #12
 8013350:	300c      	adds	r0, #12
 8013352:	f000 f90b 	bl	801356c <memcpy>
 8013356:	2201      	movs	r2, #1
 8013358:	4629      	mov	r1, r5
 801335a:	4620      	mov	r0, r4
 801335c:	f000 fb32 	bl	80139c4 <__lshift>
 8013360:	9b01      	ldr	r3, [sp, #4]
 8013362:	f103 0901 	add.w	r9, r3, #1
 8013366:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 801336a:	4413      	add	r3, r2
 801336c:	9305      	str	r3, [sp, #20]
 801336e:	f00a 0301 	and.w	r3, sl, #1
 8013372:	46b8      	mov	r8, r7
 8013374:	9304      	str	r3, [sp, #16]
 8013376:	4607      	mov	r7, r0
 8013378:	4631      	mov	r1, r6
 801337a:	ee18 0a10 	vmov	r0, s16
 801337e:	f7ff fa77 	bl	8012870 <quorem>
 8013382:	4641      	mov	r1, r8
 8013384:	9002      	str	r0, [sp, #8]
 8013386:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801338a:	ee18 0a10 	vmov	r0, s16
 801338e:	f000 fb89 	bl	8013aa4 <__mcmp>
 8013392:	463a      	mov	r2, r7
 8013394:	9003      	str	r0, [sp, #12]
 8013396:	4631      	mov	r1, r6
 8013398:	4620      	mov	r0, r4
 801339a:	f000 fb9f 	bl	8013adc <__mdiff>
 801339e:	68c2      	ldr	r2, [r0, #12]
 80133a0:	f109 3bff 	add.w	fp, r9, #4294967295
 80133a4:	4605      	mov	r5, r0
 80133a6:	bb02      	cbnz	r2, 80133ea <_dtoa_r+0xa62>
 80133a8:	4601      	mov	r1, r0
 80133aa:	ee18 0a10 	vmov	r0, s16
 80133ae:	f000 fb79 	bl	8013aa4 <__mcmp>
 80133b2:	4602      	mov	r2, r0
 80133b4:	4629      	mov	r1, r5
 80133b6:	4620      	mov	r0, r4
 80133b8:	9207      	str	r2, [sp, #28]
 80133ba:	f000 f931 	bl	8013620 <_Bfree>
 80133be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80133c2:	ea43 0102 	orr.w	r1, r3, r2
 80133c6:	9b04      	ldr	r3, [sp, #16]
 80133c8:	430b      	orrs	r3, r1
 80133ca:	464d      	mov	r5, r9
 80133cc:	d10f      	bne.n	80133ee <_dtoa_r+0xa66>
 80133ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80133d2:	d02a      	beq.n	801342a <_dtoa_r+0xaa2>
 80133d4:	9b03      	ldr	r3, [sp, #12]
 80133d6:	2b00      	cmp	r3, #0
 80133d8:	dd02      	ble.n	80133e0 <_dtoa_r+0xa58>
 80133da:	9b02      	ldr	r3, [sp, #8]
 80133dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 80133e0:	f88b a000 	strb.w	sl, [fp]
 80133e4:	e775      	b.n	80132d2 <_dtoa_r+0x94a>
 80133e6:	4638      	mov	r0, r7
 80133e8:	e7ba      	b.n	8013360 <_dtoa_r+0x9d8>
 80133ea:	2201      	movs	r2, #1
 80133ec:	e7e2      	b.n	80133b4 <_dtoa_r+0xa2c>
 80133ee:	9b03      	ldr	r3, [sp, #12]
 80133f0:	2b00      	cmp	r3, #0
 80133f2:	db04      	blt.n	80133fe <_dtoa_r+0xa76>
 80133f4:	9906      	ldr	r1, [sp, #24]
 80133f6:	430b      	orrs	r3, r1
 80133f8:	9904      	ldr	r1, [sp, #16]
 80133fa:	430b      	orrs	r3, r1
 80133fc:	d122      	bne.n	8013444 <_dtoa_r+0xabc>
 80133fe:	2a00      	cmp	r2, #0
 8013400:	ddee      	ble.n	80133e0 <_dtoa_r+0xa58>
 8013402:	ee18 1a10 	vmov	r1, s16
 8013406:	2201      	movs	r2, #1
 8013408:	4620      	mov	r0, r4
 801340a:	f000 fadb 	bl	80139c4 <__lshift>
 801340e:	4631      	mov	r1, r6
 8013410:	ee08 0a10 	vmov	s16, r0
 8013414:	f000 fb46 	bl	8013aa4 <__mcmp>
 8013418:	2800      	cmp	r0, #0
 801341a:	dc03      	bgt.n	8013424 <_dtoa_r+0xa9c>
 801341c:	d1e0      	bne.n	80133e0 <_dtoa_r+0xa58>
 801341e:	f01a 0f01 	tst.w	sl, #1
 8013422:	d0dd      	beq.n	80133e0 <_dtoa_r+0xa58>
 8013424:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013428:	d1d7      	bne.n	80133da <_dtoa_r+0xa52>
 801342a:	2339      	movs	r3, #57	; 0x39
 801342c:	f88b 3000 	strb.w	r3, [fp]
 8013430:	462b      	mov	r3, r5
 8013432:	461d      	mov	r5, r3
 8013434:	3b01      	subs	r3, #1
 8013436:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 801343a:	2a39      	cmp	r2, #57	; 0x39
 801343c:	d071      	beq.n	8013522 <_dtoa_r+0xb9a>
 801343e:	3201      	adds	r2, #1
 8013440:	701a      	strb	r2, [r3, #0]
 8013442:	e746      	b.n	80132d2 <_dtoa_r+0x94a>
 8013444:	2a00      	cmp	r2, #0
 8013446:	dd07      	ble.n	8013458 <_dtoa_r+0xad0>
 8013448:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 801344c:	d0ed      	beq.n	801342a <_dtoa_r+0xaa2>
 801344e:	f10a 0301 	add.w	r3, sl, #1
 8013452:	f88b 3000 	strb.w	r3, [fp]
 8013456:	e73c      	b.n	80132d2 <_dtoa_r+0x94a>
 8013458:	9b05      	ldr	r3, [sp, #20]
 801345a:	f809 ac01 	strb.w	sl, [r9, #-1]
 801345e:	4599      	cmp	r9, r3
 8013460:	d047      	beq.n	80134f2 <_dtoa_r+0xb6a>
 8013462:	ee18 1a10 	vmov	r1, s16
 8013466:	2300      	movs	r3, #0
 8013468:	220a      	movs	r2, #10
 801346a:	4620      	mov	r0, r4
 801346c:	f000 f8fa 	bl	8013664 <__multadd>
 8013470:	45b8      	cmp	r8, r7
 8013472:	ee08 0a10 	vmov	s16, r0
 8013476:	f04f 0300 	mov.w	r3, #0
 801347a:	f04f 020a 	mov.w	r2, #10
 801347e:	4641      	mov	r1, r8
 8013480:	4620      	mov	r0, r4
 8013482:	d106      	bne.n	8013492 <_dtoa_r+0xb0a>
 8013484:	f000 f8ee 	bl	8013664 <__multadd>
 8013488:	4680      	mov	r8, r0
 801348a:	4607      	mov	r7, r0
 801348c:	f109 0901 	add.w	r9, r9, #1
 8013490:	e772      	b.n	8013378 <_dtoa_r+0x9f0>
 8013492:	f000 f8e7 	bl	8013664 <__multadd>
 8013496:	4639      	mov	r1, r7
 8013498:	4680      	mov	r8, r0
 801349a:	2300      	movs	r3, #0
 801349c:	220a      	movs	r2, #10
 801349e:	4620      	mov	r0, r4
 80134a0:	f000 f8e0 	bl	8013664 <__multadd>
 80134a4:	4607      	mov	r7, r0
 80134a6:	e7f1      	b.n	801348c <_dtoa_r+0xb04>
 80134a8:	9b03      	ldr	r3, [sp, #12]
 80134aa:	9302      	str	r3, [sp, #8]
 80134ac:	9d01      	ldr	r5, [sp, #4]
 80134ae:	ee18 0a10 	vmov	r0, s16
 80134b2:	4631      	mov	r1, r6
 80134b4:	f7ff f9dc 	bl	8012870 <quorem>
 80134b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 80134bc:	9b01      	ldr	r3, [sp, #4]
 80134be:	f805 ab01 	strb.w	sl, [r5], #1
 80134c2:	1aea      	subs	r2, r5, r3
 80134c4:	9b02      	ldr	r3, [sp, #8]
 80134c6:	4293      	cmp	r3, r2
 80134c8:	dd09      	ble.n	80134de <_dtoa_r+0xb56>
 80134ca:	ee18 1a10 	vmov	r1, s16
 80134ce:	2300      	movs	r3, #0
 80134d0:	220a      	movs	r2, #10
 80134d2:	4620      	mov	r0, r4
 80134d4:	f000 f8c6 	bl	8013664 <__multadd>
 80134d8:	ee08 0a10 	vmov	s16, r0
 80134dc:	e7e7      	b.n	80134ae <_dtoa_r+0xb26>
 80134de:	9b02      	ldr	r3, [sp, #8]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	bfc8      	it	gt
 80134e4:	461d      	movgt	r5, r3
 80134e6:	9b01      	ldr	r3, [sp, #4]
 80134e8:	bfd8      	it	le
 80134ea:	2501      	movle	r5, #1
 80134ec:	441d      	add	r5, r3
 80134ee:	f04f 0800 	mov.w	r8, #0
 80134f2:	ee18 1a10 	vmov	r1, s16
 80134f6:	2201      	movs	r2, #1
 80134f8:	4620      	mov	r0, r4
 80134fa:	f000 fa63 	bl	80139c4 <__lshift>
 80134fe:	4631      	mov	r1, r6
 8013500:	ee08 0a10 	vmov	s16, r0
 8013504:	f000 face 	bl	8013aa4 <__mcmp>
 8013508:	2800      	cmp	r0, #0
 801350a:	dc91      	bgt.n	8013430 <_dtoa_r+0xaa8>
 801350c:	d102      	bne.n	8013514 <_dtoa_r+0xb8c>
 801350e:	f01a 0f01 	tst.w	sl, #1
 8013512:	d18d      	bne.n	8013430 <_dtoa_r+0xaa8>
 8013514:	462b      	mov	r3, r5
 8013516:	461d      	mov	r5, r3
 8013518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801351c:	2a30      	cmp	r2, #48	; 0x30
 801351e:	d0fa      	beq.n	8013516 <_dtoa_r+0xb8e>
 8013520:	e6d7      	b.n	80132d2 <_dtoa_r+0x94a>
 8013522:	9a01      	ldr	r2, [sp, #4]
 8013524:	429a      	cmp	r2, r3
 8013526:	d184      	bne.n	8013432 <_dtoa_r+0xaaa>
 8013528:	9b00      	ldr	r3, [sp, #0]
 801352a:	3301      	adds	r3, #1
 801352c:	9300      	str	r3, [sp, #0]
 801352e:	2331      	movs	r3, #49	; 0x31
 8013530:	7013      	strb	r3, [r2, #0]
 8013532:	e6ce      	b.n	80132d2 <_dtoa_r+0x94a>
 8013534:	4b09      	ldr	r3, [pc, #36]	; (801355c <_dtoa_r+0xbd4>)
 8013536:	f7ff ba95 	b.w	8012a64 <_dtoa_r+0xdc>
 801353a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 801353c:	2b00      	cmp	r3, #0
 801353e:	f47f aa6e 	bne.w	8012a1e <_dtoa_r+0x96>
 8013542:	4b07      	ldr	r3, [pc, #28]	; (8013560 <_dtoa_r+0xbd8>)
 8013544:	f7ff ba8e 	b.w	8012a64 <_dtoa_r+0xdc>
 8013548:	9b02      	ldr	r3, [sp, #8]
 801354a:	2b00      	cmp	r3, #0
 801354c:	dcae      	bgt.n	80134ac <_dtoa_r+0xb24>
 801354e:	9b06      	ldr	r3, [sp, #24]
 8013550:	2b02      	cmp	r3, #2
 8013552:	f73f aea8 	bgt.w	80132a6 <_dtoa_r+0x91e>
 8013556:	e7a9      	b.n	80134ac <_dtoa_r+0xb24>
 8013558:	08014927 	.word	0x08014927
 801355c:	08014884 	.word	0x08014884
 8013560:	080148a8 	.word	0x080148a8

08013564 <_localeconv_r>:
 8013564:	4800      	ldr	r0, [pc, #0]	; (8013568 <_localeconv_r+0x4>)
 8013566:	4770      	bx	lr
 8013568:	20000280 	.word	0x20000280

0801356c <memcpy>:
 801356c:	440a      	add	r2, r1
 801356e:	4291      	cmp	r1, r2
 8013570:	f100 33ff 	add.w	r3, r0, #4294967295
 8013574:	d100      	bne.n	8013578 <memcpy+0xc>
 8013576:	4770      	bx	lr
 8013578:	b510      	push	{r4, lr}
 801357a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801357e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013582:	4291      	cmp	r1, r2
 8013584:	d1f9      	bne.n	801357a <memcpy+0xe>
 8013586:	bd10      	pop	{r4, pc}

08013588 <__malloc_lock>:
 8013588:	4801      	ldr	r0, [pc, #4]	; (8013590 <__malloc_lock+0x8>)
 801358a:	f000 bbd4 	b.w	8013d36 <__retarget_lock_acquire_recursive>
 801358e:	bf00      	nop
 8013590:	20002764 	.word	0x20002764

08013594 <__malloc_unlock>:
 8013594:	4801      	ldr	r0, [pc, #4]	; (801359c <__malloc_unlock+0x8>)
 8013596:	f000 bbcf 	b.w	8013d38 <__retarget_lock_release_recursive>
 801359a:	bf00      	nop
 801359c:	20002764 	.word	0x20002764

080135a0 <_Balloc>:
 80135a0:	b570      	push	{r4, r5, r6, lr}
 80135a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80135a4:	4604      	mov	r4, r0
 80135a6:	460d      	mov	r5, r1
 80135a8:	b976      	cbnz	r6, 80135c8 <_Balloc+0x28>
 80135aa:	2010      	movs	r0, #16
 80135ac:	f7fe fbee 	bl	8011d8c <malloc>
 80135b0:	4602      	mov	r2, r0
 80135b2:	6260      	str	r0, [r4, #36]	; 0x24
 80135b4:	b920      	cbnz	r0, 80135c0 <_Balloc+0x20>
 80135b6:	4b18      	ldr	r3, [pc, #96]	; (8013618 <_Balloc+0x78>)
 80135b8:	4818      	ldr	r0, [pc, #96]	; (801361c <_Balloc+0x7c>)
 80135ba:	2166      	movs	r1, #102	; 0x66
 80135bc:	f000 fb8a 	bl	8013cd4 <__assert_func>
 80135c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80135c4:	6006      	str	r6, [r0, #0]
 80135c6:	60c6      	str	r6, [r0, #12]
 80135c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80135ca:	68f3      	ldr	r3, [r6, #12]
 80135cc:	b183      	cbz	r3, 80135f0 <_Balloc+0x50>
 80135ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135d0:	68db      	ldr	r3, [r3, #12]
 80135d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80135d6:	b9b8      	cbnz	r0, 8013608 <_Balloc+0x68>
 80135d8:	2101      	movs	r1, #1
 80135da:	fa01 f605 	lsl.w	r6, r1, r5
 80135de:	1d72      	adds	r2, r6, #5
 80135e0:	0092      	lsls	r2, r2, #2
 80135e2:	4620      	mov	r0, r4
 80135e4:	f000 fb60 	bl	8013ca8 <_calloc_r>
 80135e8:	b160      	cbz	r0, 8013604 <_Balloc+0x64>
 80135ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80135ee:	e00e      	b.n	801360e <_Balloc+0x6e>
 80135f0:	2221      	movs	r2, #33	; 0x21
 80135f2:	2104      	movs	r1, #4
 80135f4:	4620      	mov	r0, r4
 80135f6:	f000 fb57 	bl	8013ca8 <_calloc_r>
 80135fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80135fc:	60f0      	str	r0, [r6, #12]
 80135fe:	68db      	ldr	r3, [r3, #12]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d1e4      	bne.n	80135ce <_Balloc+0x2e>
 8013604:	2000      	movs	r0, #0
 8013606:	bd70      	pop	{r4, r5, r6, pc}
 8013608:	6802      	ldr	r2, [r0, #0]
 801360a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801360e:	2300      	movs	r3, #0
 8013610:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013614:	e7f7      	b.n	8013606 <_Balloc+0x66>
 8013616:	bf00      	nop
 8013618:	080148b5 	.word	0x080148b5
 801361c:	08014938 	.word	0x08014938

08013620 <_Bfree>:
 8013620:	b570      	push	{r4, r5, r6, lr}
 8013622:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013624:	4605      	mov	r5, r0
 8013626:	460c      	mov	r4, r1
 8013628:	b976      	cbnz	r6, 8013648 <_Bfree+0x28>
 801362a:	2010      	movs	r0, #16
 801362c:	f7fe fbae 	bl	8011d8c <malloc>
 8013630:	4602      	mov	r2, r0
 8013632:	6268      	str	r0, [r5, #36]	; 0x24
 8013634:	b920      	cbnz	r0, 8013640 <_Bfree+0x20>
 8013636:	4b09      	ldr	r3, [pc, #36]	; (801365c <_Bfree+0x3c>)
 8013638:	4809      	ldr	r0, [pc, #36]	; (8013660 <_Bfree+0x40>)
 801363a:	218a      	movs	r1, #138	; 0x8a
 801363c:	f000 fb4a 	bl	8013cd4 <__assert_func>
 8013640:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013644:	6006      	str	r6, [r0, #0]
 8013646:	60c6      	str	r6, [r0, #12]
 8013648:	b13c      	cbz	r4, 801365a <_Bfree+0x3a>
 801364a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 801364c:	6862      	ldr	r2, [r4, #4]
 801364e:	68db      	ldr	r3, [r3, #12]
 8013650:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013654:	6021      	str	r1, [r4, #0]
 8013656:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801365a:	bd70      	pop	{r4, r5, r6, pc}
 801365c:	080148b5 	.word	0x080148b5
 8013660:	08014938 	.word	0x08014938

08013664 <__multadd>:
 8013664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013668:	690d      	ldr	r5, [r1, #16]
 801366a:	4607      	mov	r7, r0
 801366c:	460c      	mov	r4, r1
 801366e:	461e      	mov	r6, r3
 8013670:	f101 0c14 	add.w	ip, r1, #20
 8013674:	2000      	movs	r0, #0
 8013676:	f8dc 3000 	ldr.w	r3, [ip]
 801367a:	b299      	uxth	r1, r3
 801367c:	fb02 6101 	mla	r1, r2, r1, r6
 8013680:	0c1e      	lsrs	r6, r3, #16
 8013682:	0c0b      	lsrs	r3, r1, #16
 8013684:	fb02 3306 	mla	r3, r2, r6, r3
 8013688:	b289      	uxth	r1, r1
 801368a:	3001      	adds	r0, #1
 801368c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013690:	4285      	cmp	r5, r0
 8013692:	f84c 1b04 	str.w	r1, [ip], #4
 8013696:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801369a:	dcec      	bgt.n	8013676 <__multadd+0x12>
 801369c:	b30e      	cbz	r6, 80136e2 <__multadd+0x7e>
 801369e:	68a3      	ldr	r3, [r4, #8]
 80136a0:	42ab      	cmp	r3, r5
 80136a2:	dc19      	bgt.n	80136d8 <__multadd+0x74>
 80136a4:	6861      	ldr	r1, [r4, #4]
 80136a6:	4638      	mov	r0, r7
 80136a8:	3101      	adds	r1, #1
 80136aa:	f7ff ff79 	bl	80135a0 <_Balloc>
 80136ae:	4680      	mov	r8, r0
 80136b0:	b928      	cbnz	r0, 80136be <__multadd+0x5a>
 80136b2:	4602      	mov	r2, r0
 80136b4:	4b0c      	ldr	r3, [pc, #48]	; (80136e8 <__multadd+0x84>)
 80136b6:	480d      	ldr	r0, [pc, #52]	; (80136ec <__multadd+0x88>)
 80136b8:	21b5      	movs	r1, #181	; 0xb5
 80136ba:	f000 fb0b 	bl	8013cd4 <__assert_func>
 80136be:	6922      	ldr	r2, [r4, #16]
 80136c0:	3202      	adds	r2, #2
 80136c2:	f104 010c 	add.w	r1, r4, #12
 80136c6:	0092      	lsls	r2, r2, #2
 80136c8:	300c      	adds	r0, #12
 80136ca:	f7ff ff4f 	bl	801356c <memcpy>
 80136ce:	4621      	mov	r1, r4
 80136d0:	4638      	mov	r0, r7
 80136d2:	f7ff ffa5 	bl	8013620 <_Bfree>
 80136d6:	4644      	mov	r4, r8
 80136d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80136dc:	3501      	adds	r5, #1
 80136de:	615e      	str	r6, [r3, #20]
 80136e0:	6125      	str	r5, [r4, #16]
 80136e2:	4620      	mov	r0, r4
 80136e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136e8:	08014927 	.word	0x08014927
 80136ec:	08014938 	.word	0x08014938

080136f0 <__hi0bits>:
 80136f0:	0c03      	lsrs	r3, r0, #16
 80136f2:	041b      	lsls	r3, r3, #16
 80136f4:	b9d3      	cbnz	r3, 801372c <__hi0bits+0x3c>
 80136f6:	0400      	lsls	r0, r0, #16
 80136f8:	2310      	movs	r3, #16
 80136fa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80136fe:	bf04      	itt	eq
 8013700:	0200      	lsleq	r0, r0, #8
 8013702:	3308      	addeq	r3, #8
 8013704:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013708:	bf04      	itt	eq
 801370a:	0100      	lsleq	r0, r0, #4
 801370c:	3304      	addeq	r3, #4
 801370e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013712:	bf04      	itt	eq
 8013714:	0080      	lsleq	r0, r0, #2
 8013716:	3302      	addeq	r3, #2
 8013718:	2800      	cmp	r0, #0
 801371a:	db05      	blt.n	8013728 <__hi0bits+0x38>
 801371c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013720:	f103 0301 	add.w	r3, r3, #1
 8013724:	bf08      	it	eq
 8013726:	2320      	moveq	r3, #32
 8013728:	4618      	mov	r0, r3
 801372a:	4770      	bx	lr
 801372c:	2300      	movs	r3, #0
 801372e:	e7e4      	b.n	80136fa <__hi0bits+0xa>

08013730 <__lo0bits>:
 8013730:	6803      	ldr	r3, [r0, #0]
 8013732:	f013 0207 	ands.w	r2, r3, #7
 8013736:	4601      	mov	r1, r0
 8013738:	d00b      	beq.n	8013752 <__lo0bits+0x22>
 801373a:	07da      	lsls	r2, r3, #31
 801373c:	d423      	bmi.n	8013786 <__lo0bits+0x56>
 801373e:	0798      	lsls	r0, r3, #30
 8013740:	bf49      	itett	mi
 8013742:	085b      	lsrmi	r3, r3, #1
 8013744:	089b      	lsrpl	r3, r3, #2
 8013746:	2001      	movmi	r0, #1
 8013748:	600b      	strmi	r3, [r1, #0]
 801374a:	bf5c      	itt	pl
 801374c:	600b      	strpl	r3, [r1, #0]
 801374e:	2002      	movpl	r0, #2
 8013750:	4770      	bx	lr
 8013752:	b298      	uxth	r0, r3
 8013754:	b9a8      	cbnz	r0, 8013782 <__lo0bits+0x52>
 8013756:	0c1b      	lsrs	r3, r3, #16
 8013758:	2010      	movs	r0, #16
 801375a:	b2da      	uxtb	r2, r3
 801375c:	b90a      	cbnz	r2, 8013762 <__lo0bits+0x32>
 801375e:	3008      	adds	r0, #8
 8013760:	0a1b      	lsrs	r3, r3, #8
 8013762:	071a      	lsls	r2, r3, #28
 8013764:	bf04      	itt	eq
 8013766:	091b      	lsreq	r3, r3, #4
 8013768:	3004      	addeq	r0, #4
 801376a:	079a      	lsls	r2, r3, #30
 801376c:	bf04      	itt	eq
 801376e:	089b      	lsreq	r3, r3, #2
 8013770:	3002      	addeq	r0, #2
 8013772:	07da      	lsls	r2, r3, #31
 8013774:	d403      	bmi.n	801377e <__lo0bits+0x4e>
 8013776:	085b      	lsrs	r3, r3, #1
 8013778:	f100 0001 	add.w	r0, r0, #1
 801377c:	d005      	beq.n	801378a <__lo0bits+0x5a>
 801377e:	600b      	str	r3, [r1, #0]
 8013780:	4770      	bx	lr
 8013782:	4610      	mov	r0, r2
 8013784:	e7e9      	b.n	801375a <__lo0bits+0x2a>
 8013786:	2000      	movs	r0, #0
 8013788:	4770      	bx	lr
 801378a:	2020      	movs	r0, #32
 801378c:	4770      	bx	lr
	...

08013790 <__i2b>:
 8013790:	b510      	push	{r4, lr}
 8013792:	460c      	mov	r4, r1
 8013794:	2101      	movs	r1, #1
 8013796:	f7ff ff03 	bl	80135a0 <_Balloc>
 801379a:	4602      	mov	r2, r0
 801379c:	b928      	cbnz	r0, 80137aa <__i2b+0x1a>
 801379e:	4b05      	ldr	r3, [pc, #20]	; (80137b4 <__i2b+0x24>)
 80137a0:	4805      	ldr	r0, [pc, #20]	; (80137b8 <__i2b+0x28>)
 80137a2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80137a6:	f000 fa95 	bl	8013cd4 <__assert_func>
 80137aa:	2301      	movs	r3, #1
 80137ac:	6144      	str	r4, [r0, #20]
 80137ae:	6103      	str	r3, [r0, #16]
 80137b0:	bd10      	pop	{r4, pc}
 80137b2:	bf00      	nop
 80137b4:	08014927 	.word	0x08014927
 80137b8:	08014938 	.word	0x08014938

080137bc <__multiply>:
 80137bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80137c0:	4691      	mov	r9, r2
 80137c2:	690a      	ldr	r2, [r1, #16]
 80137c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80137c8:	429a      	cmp	r2, r3
 80137ca:	bfb8      	it	lt
 80137cc:	460b      	movlt	r3, r1
 80137ce:	460c      	mov	r4, r1
 80137d0:	bfbc      	itt	lt
 80137d2:	464c      	movlt	r4, r9
 80137d4:	4699      	movlt	r9, r3
 80137d6:	6927      	ldr	r7, [r4, #16]
 80137d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80137dc:	68a3      	ldr	r3, [r4, #8]
 80137de:	6861      	ldr	r1, [r4, #4]
 80137e0:	eb07 060a 	add.w	r6, r7, sl
 80137e4:	42b3      	cmp	r3, r6
 80137e6:	b085      	sub	sp, #20
 80137e8:	bfb8      	it	lt
 80137ea:	3101      	addlt	r1, #1
 80137ec:	f7ff fed8 	bl	80135a0 <_Balloc>
 80137f0:	b930      	cbnz	r0, 8013800 <__multiply+0x44>
 80137f2:	4602      	mov	r2, r0
 80137f4:	4b44      	ldr	r3, [pc, #272]	; (8013908 <__multiply+0x14c>)
 80137f6:	4845      	ldr	r0, [pc, #276]	; (801390c <__multiply+0x150>)
 80137f8:	f240 115d 	movw	r1, #349	; 0x15d
 80137fc:	f000 fa6a 	bl	8013cd4 <__assert_func>
 8013800:	f100 0514 	add.w	r5, r0, #20
 8013804:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013808:	462b      	mov	r3, r5
 801380a:	2200      	movs	r2, #0
 801380c:	4543      	cmp	r3, r8
 801380e:	d321      	bcc.n	8013854 <__multiply+0x98>
 8013810:	f104 0314 	add.w	r3, r4, #20
 8013814:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013818:	f109 0314 	add.w	r3, r9, #20
 801381c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013820:	9202      	str	r2, [sp, #8]
 8013822:	1b3a      	subs	r2, r7, r4
 8013824:	3a15      	subs	r2, #21
 8013826:	f022 0203 	bic.w	r2, r2, #3
 801382a:	3204      	adds	r2, #4
 801382c:	f104 0115 	add.w	r1, r4, #21
 8013830:	428f      	cmp	r7, r1
 8013832:	bf38      	it	cc
 8013834:	2204      	movcc	r2, #4
 8013836:	9201      	str	r2, [sp, #4]
 8013838:	9a02      	ldr	r2, [sp, #8]
 801383a:	9303      	str	r3, [sp, #12]
 801383c:	429a      	cmp	r2, r3
 801383e:	d80c      	bhi.n	801385a <__multiply+0x9e>
 8013840:	2e00      	cmp	r6, #0
 8013842:	dd03      	ble.n	801384c <__multiply+0x90>
 8013844:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013848:	2b00      	cmp	r3, #0
 801384a:	d05a      	beq.n	8013902 <__multiply+0x146>
 801384c:	6106      	str	r6, [r0, #16]
 801384e:	b005      	add	sp, #20
 8013850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013854:	f843 2b04 	str.w	r2, [r3], #4
 8013858:	e7d8      	b.n	801380c <__multiply+0x50>
 801385a:	f8b3 a000 	ldrh.w	sl, [r3]
 801385e:	f1ba 0f00 	cmp.w	sl, #0
 8013862:	d024      	beq.n	80138ae <__multiply+0xf2>
 8013864:	f104 0e14 	add.w	lr, r4, #20
 8013868:	46a9      	mov	r9, r5
 801386a:	f04f 0c00 	mov.w	ip, #0
 801386e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013872:	f8d9 1000 	ldr.w	r1, [r9]
 8013876:	fa1f fb82 	uxth.w	fp, r2
 801387a:	b289      	uxth	r1, r1
 801387c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013880:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013884:	f8d9 2000 	ldr.w	r2, [r9]
 8013888:	4461      	add	r1, ip
 801388a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801388e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013892:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013896:	b289      	uxth	r1, r1
 8013898:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801389c:	4577      	cmp	r7, lr
 801389e:	f849 1b04 	str.w	r1, [r9], #4
 80138a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80138a6:	d8e2      	bhi.n	801386e <__multiply+0xb2>
 80138a8:	9a01      	ldr	r2, [sp, #4]
 80138aa:	f845 c002 	str.w	ip, [r5, r2]
 80138ae:	9a03      	ldr	r2, [sp, #12]
 80138b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80138b4:	3304      	adds	r3, #4
 80138b6:	f1b9 0f00 	cmp.w	r9, #0
 80138ba:	d020      	beq.n	80138fe <__multiply+0x142>
 80138bc:	6829      	ldr	r1, [r5, #0]
 80138be:	f104 0c14 	add.w	ip, r4, #20
 80138c2:	46ae      	mov	lr, r5
 80138c4:	f04f 0a00 	mov.w	sl, #0
 80138c8:	f8bc b000 	ldrh.w	fp, [ip]
 80138cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80138d0:	fb09 220b 	mla	r2, r9, fp, r2
 80138d4:	4492      	add	sl, r2
 80138d6:	b289      	uxth	r1, r1
 80138d8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80138dc:	f84e 1b04 	str.w	r1, [lr], #4
 80138e0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80138e4:	f8be 1000 	ldrh.w	r1, [lr]
 80138e8:	0c12      	lsrs	r2, r2, #16
 80138ea:	fb09 1102 	mla	r1, r9, r2, r1
 80138ee:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80138f2:	4567      	cmp	r7, ip
 80138f4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80138f8:	d8e6      	bhi.n	80138c8 <__multiply+0x10c>
 80138fa:	9a01      	ldr	r2, [sp, #4]
 80138fc:	50a9      	str	r1, [r5, r2]
 80138fe:	3504      	adds	r5, #4
 8013900:	e79a      	b.n	8013838 <__multiply+0x7c>
 8013902:	3e01      	subs	r6, #1
 8013904:	e79c      	b.n	8013840 <__multiply+0x84>
 8013906:	bf00      	nop
 8013908:	08014927 	.word	0x08014927
 801390c:	08014938 	.word	0x08014938

08013910 <__pow5mult>:
 8013910:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013914:	4615      	mov	r5, r2
 8013916:	f012 0203 	ands.w	r2, r2, #3
 801391a:	4606      	mov	r6, r0
 801391c:	460f      	mov	r7, r1
 801391e:	d007      	beq.n	8013930 <__pow5mult+0x20>
 8013920:	4c25      	ldr	r4, [pc, #148]	; (80139b8 <__pow5mult+0xa8>)
 8013922:	3a01      	subs	r2, #1
 8013924:	2300      	movs	r3, #0
 8013926:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801392a:	f7ff fe9b 	bl	8013664 <__multadd>
 801392e:	4607      	mov	r7, r0
 8013930:	10ad      	asrs	r5, r5, #2
 8013932:	d03d      	beq.n	80139b0 <__pow5mult+0xa0>
 8013934:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013936:	b97c      	cbnz	r4, 8013958 <__pow5mult+0x48>
 8013938:	2010      	movs	r0, #16
 801393a:	f7fe fa27 	bl	8011d8c <malloc>
 801393e:	4602      	mov	r2, r0
 8013940:	6270      	str	r0, [r6, #36]	; 0x24
 8013942:	b928      	cbnz	r0, 8013950 <__pow5mult+0x40>
 8013944:	4b1d      	ldr	r3, [pc, #116]	; (80139bc <__pow5mult+0xac>)
 8013946:	481e      	ldr	r0, [pc, #120]	; (80139c0 <__pow5mult+0xb0>)
 8013948:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 801394c:	f000 f9c2 	bl	8013cd4 <__assert_func>
 8013950:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013954:	6004      	str	r4, [r0, #0]
 8013956:	60c4      	str	r4, [r0, #12]
 8013958:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 801395c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013960:	b94c      	cbnz	r4, 8013976 <__pow5mult+0x66>
 8013962:	f240 2171 	movw	r1, #625	; 0x271
 8013966:	4630      	mov	r0, r6
 8013968:	f7ff ff12 	bl	8013790 <__i2b>
 801396c:	2300      	movs	r3, #0
 801396e:	f8c8 0008 	str.w	r0, [r8, #8]
 8013972:	4604      	mov	r4, r0
 8013974:	6003      	str	r3, [r0, #0]
 8013976:	f04f 0900 	mov.w	r9, #0
 801397a:	07eb      	lsls	r3, r5, #31
 801397c:	d50a      	bpl.n	8013994 <__pow5mult+0x84>
 801397e:	4639      	mov	r1, r7
 8013980:	4622      	mov	r2, r4
 8013982:	4630      	mov	r0, r6
 8013984:	f7ff ff1a 	bl	80137bc <__multiply>
 8013988:	4639      	mov	r1, r7
 801398a:	4680      	mov	r8, r0
 801398c:	4630      	mov	r0, r6
 801398e:	f7ff fe47 	bl	8013620 <_Bfree>
 8013992:	4647      	mov	r7, r8
 8013994:	106d      	asrs	r5, r5, #1
 8013996:	d00b      	beq.n	80139b0 <__pow5mult+0xa0>
 8013998:	6820      	ldr	r0, [r4, #0]
 801399a:	b938      	cbnz	r0, 80139ac <__pow5mult+0x9c>
 801399c:	4622      	mov	r2, r4
 801399e:	4621      	mov	r1, r4
 80139a0:	4630      	mov	r0, r6
 80139a2:	f7ff ff0b 	bl	80137bc <__multiply>
 80139a6:	6020      	str	r0, [r4, #0]
 80139a8:	f8c0 9000 	str.w	r9, [r0]
 80139ac:	4604      	mov	r4, r0
 80139ae:	e7e4      	b.n	801397a <__pow5mult+0x6a>
 80139b0:	4638      	mov	r0, r7
 80139b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80139b6:	bf00      	nop
 80139b8:	08014a88 	.word	0x08014a88
 80139bc:	080148b5 	.word	0x080148b5
 80139c0:	08014938 	.word	0x08014938

080139c4 <__lshift>:
 80139c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139c8:	460c      	mov	r4, r1
 80139ca:	6849      	ldr	r1, [r1, #4]
 80139cc:	6923      	ldr	r3, [r4, #16]
 80139ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80139d2:	68a3      	ldr	r3, [r4, #8]
 80139d4:	4607      	mov	r7, r0
 80139d6:	4691      	mov	r9, r2
 80139d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80139dc:	f108 0601 	add.w	r6, r8, #1
 80139e0:	42b3      	cmp	r3, r6
 80139e2:	db0b      	blt.n	80139fc <__lshift+0x38>
 80139e4:	4638      	mov	r0, r7
 80139e6:	f7ff fddb 	bl	80135a0 <_Balloc>
 80139ea:	4605      	mov	r5, r0
 80139ec:	b948      	cbnz	r0, 8013a02 <__lshift+0x3e>
 80139ee:	4602      	mov	r2, r0
 80139f0:	4b2a      	ldr	r3, [pc, #168]	; (8013a9c <__lshift+0xd8>)
 80139f2:	482b      	ldr	r0, [pc, #172]	; (8013aa0 <__lshift+0xdc>)
 80139f4:	f240 11d9 	movw	r1, #473	; 0x1d9
 80139f8:	f000 f96c 	bl	8013cd4 <__assert_func>
 80139fc:	3101      	adds	r1, #1
 80139fe:	005b      	lsls	r3, r3, #1
 8013a00:	e7ee      	b.n	80139e0 <__lshift+0x1c>
 8013a02:	2300      	movs	r3, #0
 8013a04:	f100 0114 	add.w	r1, r0, #20
 8013a08:	f100 0210 	add.w	r2, r0, #16
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	4553      	cmp	r3, sl
 8013a10:	db37      	blt.n	8013a82 <__lshift+0xbe>
 8013a12:	6920      	ldr	r0, [r4, #16]
 8013a14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013a18:	f104 0314 	add.w	r3, r4, #20
 8013a1c:	f019 091f 	ands.w	r9, r9, #31
 8013a20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013a24:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013a28:	d02f      	beq.n	8013a8a <__lshift+0xc6>
 8013a2a:	f1c9 0e20 	rsb	lr, r9, #32
 8013a2e:	468a      	mov	sl, r1
 8013a30:	f04f 0c00 	mov.w	ip, #0
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	fa02 f209 	lsl.w	r2, r2, r9
 8013a3a:	ea42 020c 	orr.w	r2, r2, ip
 8013a3e:	f84a 2b04 	str.w	r2, [sl], #4
 8013a42:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a46:	4298      	cmp	r0, r3
 8013a48:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013a4c:	d8f2      	bhi.n	8013a34 <__lshift+0x70>
 8013a4e:	1b03      	subs	r3, r0, r4
 8013a50:	3b15      	subs	r3, #21
 8013a52:	f023 0303 	bic.w	r3, r3, #3
 8013a56:	3304      	adds	r3, #4
 8013a58:	f104 0215 	add.w	r2, r4, #21
 8013a5c:	4290      	cmp	r0, r2
 8013a5e:	bf38      	it	cc
 8013a60:	2304      	movcc	r3, #4
 8013a62:	f841 c003 	str.w	ip, [r1, r3]
 8013a66:	f1bc 0f00 	cmp.w	ip, #0
 8013a6a:	d001      	beq.n	8013a70 <__lshift+0xac>
 8013a6c:	f108 0602 	add.w	r6, r8, #2
 8013a70:	3e01      	subs	r6, #1
 8013a72:	4638      	mov	r0, r7
 8013a74:	612e      	str	r6, [r5, #16]
 8013a76:	4621      	mov	r1, r4
 8013a78:	f7ff fdd2 	bl	8013620 <_Bfree>
 8013a7c:	4628      	mov	r0, r5
 8013a7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013a82:	f842 0f04 	str.w	r0, [r2, #4]!
 8013a86:	3301      	adds	r3, #1
 8013a88:	e7c1      	b.n	8013a0e <__lshift+0x4a>
 8013a8a:	3904      	subs	r1, #4
 8013a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8013a90:	f841 2f04 	str.w	r2, [r1, #4]!
 8013a94:	4298      	cmp	r0, r3
 8013a96:	d8f9      	bhi.n	8013a8c <__lshift+0xc8>
 8013a98:	e7ea      	b.n	8013a70 <__lshift+0xac>
 8013a9a:	bf00      	nop
 8013a9c:	08014927 	.word	0x08014927
 8013aa0:	08014938 	.word	0x08014938

08013aa4 <__mcmp>:
 8013aa4:	b530      	push	{r4, r5, lr}
 8013aa6:	6902      	ldr	r2, [r0, #16]
 8013aa8:	690c      	ldr	r4, [r1, #16]
 8013aaa:	1b12      	subs	r2, r2, r4
 8013aac:	d10e      	bne.n	8013acc <__mcmp+0x28>
 8013aae:	f100 0314 	add.w	r3, r0, #20
 8013ab2:	3114      	adds	r1, #20
 8013ab4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8013ab8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8013abc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8013ac0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8013ac4:	42a5      	cmp	r5, r4
 8013ac6:	d003      	beq.n	8013ad0 <__mcmp+0x2c>
 8013ac8:	d305      	bcc.n	8013ad6 <__mcmp+0x32>
 8013aca:	2201      	movs	r2, #1
 8013acc:	4610      	mov	r0, r2
 8013ace:	bd30      	pop	{r4, r5, pc}
 8013ad0:	4283      	cmp	r3, r0
 8013ad2:	d3f3      	bcc.n	8013abc <__mcmp+0x18>
 8013ad4:	e7fa      	b.n	8013acc <__mcmp+0x28>
 8013ad6:	f04f 32ff 	mov.w	r2, #4294967295
 8013ada:	e7f7      	b.n	8013acc <__mcmp+0x28>

08013adc <__mdiff>:
 8013adc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013ae0:	460c      	mov	r4, r1
 8013ae2:	4606      	mov	r6, r0
 8013ae4:	4611      	mov	r1, r2
 8013ae6:	4620      	mov	r0, r4
 8013ae8:	4690      	mov	r8, r2
 8013aea:	f7ff ffdb 	bl	8013aa4 <__mcmp>
 8013aee:	1e05      	subs	r5, r0, #0
 8013af0:	d110      	bne.n	8013b14 <__mdiff+0x38>
 8013af2:	4629      	mov	r1, r5
 8013af4:	4630      	mov	r0, r6
 8013af6:	f7ff fd53 	bl	80135a0 <_Balloc>
 8013afa:	b930      	cbnz	r0, 8013b0a <__mdiff+0x2e>
 8013afc:	4b3a      	ldr	r3, [pc, #232]	; (8013be8 <__mdiff+0x10c>)
 8013afe:	4602      	mov	r2, r0
 8013b00:	f240 2132 	movw	r1, #562	; 0x232
 8013b04:	4839      	ldr	r0, [pc, #228]	; (8013bec <__mdiff+0x110>)
 8013b06:	f000 f8e5 	bl	8013cd4 <__assert_func>
 8013b0a:	2301      	movs	r3, #1
 8013b0c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8013b10:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013b14:	bfa4      	itt	ge
 8013b16:	4643      	movge	r3, r8
 8013b18:	46a0      	movge	r8, r4
 8013b1a:	4630      	mov	r0, r6
 8013b1c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8013b20:	bfa6      	itte	ge
 8013b22:	461c      	movge	r4, r3
 8013b24:	2500      	movge	r5, #0
 8013b26:	2501      	movlt	r5, #1
 8013b28:	f7ff fd3a 	bl	80135a0 <_Balloc>
 8013b2c:	b920      	cbnz	r0, 8013b38 <__mdiff+0x5c>
 8013b2e:	4b2e      	ldr	r3, [pc, #184]	; (8013be8 <__mdiff+0x10c>)
 8013b30:	4602      	mov	r2, r0
 8013b32:	f44f 7110 	mov.w	r1, #576	; 0x240
 8013b36:	e7e5      	b.n	8013b04 <__mdiff+0x28>
 8013b38:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8013b3c:	6926      	ldr	r6, [r4, #16]
 8013b3e:	60c5      	str	r5, [r0, #12]
 8013b40:	f104 0914 	add.w	r9, r4, #20
 8013b44:	f108 0514 	add.w	r5, r8, #20
 8013b48:	f100 0e14 	add.w	lr, r0, #20
 8013b4c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8013b50:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8013b54:	f108 0210 	add.w	r2, r8, #16
 8013b58:	46f2      	mov	sl, lr
 8013b5a:	2100      	movs	r1, #0
 8013b5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8013b60:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8013b64:	fa1f f883 	uxth.w	r8, r3
 8013b68:	fa11 f18b 	uxtah	r1, r1, fp
 8013b6c:	0c1b      	lsrs	r3, r3, #16
 8013b6e:	eba1 0808 	sub.w	r8, r1, r8
 8013b72:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8013b76:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8013b7a:	fa1f f888 	uxth.w	r8, r8
 8013b7e:	1419      	asrs	r1, r3, #16
 8013b80:	454e      	cmp	r6, r9
 8013b82:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8013b86:	f84a 3b04 	str.w	r3, [sl], #4
 8013b8a:	d8e7      	bhi.n	8013b5c <__mdiff+0x80>
 8013b8c:	1b33      	subs	r3, r6, r4
 8013b8e:	3b15      	subs	r3, #21
 8013b90:	f023 0303 	bic.w	r3, r3, #3
 8013b94:	3304      	adds	r3, #4
 8013b96:	3415      	adds	r4, #21
 8013b98:	42a6      	cmp	r6, r4
 8013b9a:	bf38      	it	cc
 8013b9c:	2304      	movcc	r3, #4
 8013b9e:	441d      	add	r5, r3
 8013ba0:	4473      	add	r3, lr
 8013ba2:	469e      	mov	lr, r3
 8013ba4:	462e      	mov	r6, r5
 8013ba6:	4566      	cmp	r6, ip
 8013ba8:	d30e      	bcc.n	8013bc8 <__mdiff+0xec>
 8013baa:	f10c 0203 	add.w	r2, ip, #3
 8013bae:	1b52      	subs	r2, r2, r5
 8013bb0:	f022 0203 	bic.w	r2, r2, #3
 8013bb4:	3d03      	subs	r5, #3
 8013bb6:	45ac      	cmp	ip, r5
 8013bb8:	bf38      	it	cc
 8013bba:	2200      	movcc	r2, #0
 8013bbc:	441a      	add	r2, r3
 8013bbe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8013bc2:	b17b      	cbz	r3, 8013be4 <__mdiff+0x108>
 8013bc4:	6107      	str	r7, [r0, #16]
 8013bc6:	e7a3      	b.n	8013b10 <__mdiff+0x34>
 8013bc8:	f856 8b04 	ldr.w	r8, [r6], #4
 8013bcc:	fa11 f288 	uxtah	r2, r1, r8
 8013bd0:	1414      	asrs	r4, r2, #16
 8013bd2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8013bd6:	b292      	uxth	r2, r2
 8013bd8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8013bdc:	f84e 2b04 	str.w	r2, [lr], #4
 8013be0:	1421      	asrs	r1, r4, #16
 8013be2:	e7e0      	b.n	8013ba6 <__mdiff+0xca>
 8013be4:	3f01      	subs	r7, #1
 8013be6:	e7ea      	b.n	8013bbe <__mdiff+0xe2>
 8013be8:	08014927 	.word	0x08014927
 8013bec:	08014938 	.word	0x08014938

08013bf0 <__d2b>:
 8013bf0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8013bf4:	4689      	mov	r9, r1
 8013bf6:	2101      	movs	r1, #1
 8013bf8:	ec57 6b10 	vmov	r6, r7, d0
 8013bfc:	4690      	mov	r8, r2
 8013bfe:	f7ff fccf 	bl	80135a0 <_Balloc>
 8013c02:	4604      	mov	r4, r0
 8013c04:	b930      	cbnz	r0, 8013c14 <__d2b+0x24>
 8013c06:	4602      	mov	r2, r0
 8013c08:	4b25      	ldr	r3, [pc, #148]	; (8013ca0 <__d2b+0xb0>)
 8013c0a:	4826      	ldr	r0, [pc, #152]	; (8013ca4 <__d2b+0xb4>)
 8013c0c:	f240 310a 	movw	r1, #778	; 0x30a
 8013c10:	f000 f860 	bl	8013cd4 <__assert_func>
 8013c14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8013c18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8013c1c:	bb35      	cbnz	r5, 8013c6c <__d2b+0x7c>
 8013c1e:	2e00      	cmp	r6, #0
 8013c20:	9301      	str	r3, [sp, #4]
 8013c22:	d028      	beq.n	8013c76 <__d2b+0x86>
 8013c24:	4668      	mov	r0, sp
 8013c26:	9600      	str	r6, [sp, #0]
 8013c28:	f7ff fd82 	bl	8013730 <__lo0bits>
 8013c2c:	9900      	ldr	r1, [sp, #0]
 8013c2e:	b300      	cbz	r0, 8013c72 <__d2b+0x82>
 8013c30:	9a01      	ldr	r2, [sp, #4]
 8013c32:	f1c0 0320 	rsb	r3, r0, #32
 8013c36:	fa02 f303 	lsl.w	r3, r2, r3
 8013c3a:	430b      	orrs	r3, r1
 8013c3c:	40c2      	lsrs	r2, r0
 8013c3e:	6163      	str	r3, [r4, #20]
 8013c40:	9201      	str	r2, [sp, #4]
 8013c42:	9b01      	ldr	r3, [sp, #4]
 8013c44:	61a3      	str	r3, [r4, #24]
 8013c46:	2b00      	cmp	r3, #0
 8013c48:	bf14      	ite	ne
 8013c4a:	2202      	movne	r2, #2
 8013c4c:	2201      	moveq	r2, #1
 8013c4e:	6122      	str	r2, [r4, #16]
 8013c50:	b1d5      	cbz	r5, 8013c88 <__d2b+0x98>
 8013c52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8013c56:	4405      	add	r5, r0
 8013c58:	f8c9 5000 	str.w	r5, [r9]
 8013c5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8013c60:	f8c8 0000 	str.w	r0, [r8]
 8013c64:	4620      	mov	r0, r4
 8013c66:	b003      	add	sp, #12
 8013c68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013c6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8013c70:	e7d5      	b.n	8013c1e <__d2b+0x2e>
 8013c72:	6161      	str	r1, [r4, #20]
 8013c74:	e7e5      	b.n	8013c42 <__d2b+0x52>
 8013c76:	a801      	add	r0, sp, #4
 8013c78:	f7ff fd5a 	bl	8013730 <__lo0bits>
 8013c7c:	9b01      	ldr	r3, [sp, #4]
 8013c7e:	6163      	str	r3, [r4, #20]
 8013c80:	2201      	movs	r2, #1
 8013c82:	6122      	str	r2, [r4, #16]
 8013c84:	3020      	adds	r0, #32
 8013c86:	e7e3      	b.n	8013c50 <__d2b+0x60>
 8013c88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8013c8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8013c90:	f8c9 0000 	str.w	r0, [r9]
 8013c94:	6918      	ldr	r0, [r3, #16]
 8013c96:	f7ff fd2b 	bl	80136f0 <__hi0bits>
 8013c9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8013c9e:	e7df      	b.n	8013c60 <__d2b+0x70>
 8013ca0:	08014927 	.word	0x08014927
 8013ca4:	08014938 	.word	0x08014938

08013ca8 <_calloc_r>:
 8013ca8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013caa:	fba1 2402 	umull	r2, r4, r1, r2
 8013cae:	b94c      	cbnz	r4, 8013cc4 <_calloc_r+0x1c>
 8013cb0:	4611      	mov	r1, r2
 8013cb2:	9201      	str	r2, [sp, #4]
 8013cb4:	f7fe f8ee 	bl	8011e94 <_malloc_r>
 8013cb8:	9a01      	ldr	r2, [sp, #4]
 8013cba:	4605      	mov	r5, r0
 8013cbc:	b930      	cbnz	r0, 8013ccc <_calloc_r+0x24>
 8013cbe:	4628      	mov	r0, r5
 8013cc0:	b003      	add	sp, #12
 8013cc2:	bd30      	pop	{r4, r5, pc}
 8013cc4:	220c      	movs	r2, #12
 8013cc6:	6002      	str	r2, [r0, #0]
 8013cc8:	2500      	movs	r5, #0
 8013cca:	e7f8      	b.n	8013cbe <_calloc_r+0x16>
 8013ccc:	4621      	mov	r1, r4
 8013cce:	f7fe f86d 	bl	8011dac <memset>
 8013cd2:	e7f4      	b.n	8013cbe <_calloc_r+0x16>

08013cd4 <__assert_func>:
 8013cd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013cd6:	4614      	mov	r4, r2
 8013cd8:	461a      	mov	r2, r3
 8013cda:	4b09      	ldr	r3, [pc, #36]	; (8013d00 <__assert_func+0x2c>)
 8013cdc:	681b      	ldr	r3, [r3, #0]
 8013cde:	4605      	mov	r5, r0
 8013ce0:	68d8      	ldr	r0, [r3, #12]
 8013ce2:	b14c      	cbz	r4, 8013cf8 <__assert_func+0x24>
 8013ce4:	4b07      	ldr	r3, [pc, #28]	; (8013d04 <__assert_func+0x30>)
 8013ce6:	9100      	str	r1, [sp, #0]
 8013ce8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013cec:	4906      	ldr	r1, [pc, #24]	; (8013d08 <__assert_func+0x34>)
 8013cee:	462b      	mov	r3, r5
 8013cf0:	f000 f80e 	bl	8013d10 <fiprintf>
 8013cf4:	f000 fa5a 	bl	80141ac <abort>
 8013cf8:	4b04      	ldr	r3, [pc, #16]	; (8013d0c <__assert_func+0x38>)
 8013cfa:	461c      	mov	r4, r3
 8013cfc:	e7f3      	b.n	8013ce6 <__assert_func+0x12>
 8013cfe:	bf00      	nop
 8013d00:	2000012c 	.word	0x2000012c
 8013d04:	08014a94 	.word	0x08014a94
 8013d08:	08014aa1 	.word	0x08014aa1
 8013d0c:	08014acf 	.word	0x08014acf

08013d10 <fiprintf>:
 8013d10:	b40e      	push	{r1, r2, r3}
 8013d12:	b503      	push	{r0, r1, lr}
 8013d14:	4601      	mov	r1, r0
 8013d16:	ab03      	add	r3, sp, #12
 8013d18:	4805      	ldr	r0, [pc, #20]	; (8013d30 <fiprintf+0x20>)
 8013d1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8013d1e:	6800      	ldr	r0, [r0, #0]
 8013d20:	9301      	str	r3, [sp, #4]
 8013d22:	f000 f845 	bl	8013db0 <_vfiprintf_r>
 8013d26:	b002      	add	sp, #8
 8013d28:	f85d eb04 	ldr.w	lr, [sp], #4
 8013d2c:	b003      	add	sp, #12
 8013d2e:	4770      	bx	lr
 8013d30:	2000012c 	.word	0x2000012c

08013d34 <__retarget_lock_init_recursive>:
 8013d34:	4770      	bx	lr

08013d36 <__retarget_lock_acquire_recursive>:
 8013d36:	4770      	bx	lr

08013d38 <__retarget_lock_release_recursive>:
 8013d38:	4770      	bx	lr

08013d3a <__ascii_mbtowc>:
 8013d3a:	b082      	sub	sp, #8
 8013d3c:	b901      	cbnz	r1, 8013d40 <__ascii_mbtowc+0x6>
 8013d3e:	a901      	add	r1, sp, #4
 8013d40:	b142      	cbz	r2, 8013d54 <__ascii_mbtowc+0x1a>
 8013d42:	b14b      	cbz	r3, 8013d58 <__ascii_mbtowc+0x1e>
 8013d44:	7813      	ldrb	r3, [r2, #0]
 8013d46:	600b      	str	r3, [r1, #0]
 8013d48:	7812      	ldrb	r2, [r2, #0]
 8013d4a:	1e10      	subs	r0, r2, #0
 8013d4c:	bf18      	it	ne
 8013d4e:	2001      	movne	r0, #1
 8013d50:	b002      	add	sp, #8
 8013d52:	4770      	bx	lr
 8013d54:	4610      	mov	r0, r2
 8013d56:	e7fb      	b.n	8013d50 <__ascii_mbtowc+0x16>
 8013d58:	f06f 0001 	mvn.w	r0, #1
 8013d5c:	e7f8      	b.n	8013d50 <__ascii_mbtowc+0x16>

08013d5e <__sfputc_r>:
 8013d5e:	6893      	ldr	r3, [r2, #8]
 8013d60:	3b01      	subs	r3, #1
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	b410      	push	{r4}
 8013d66:	6093      	str	r3, [r2, #8]
 8013d68:	da08      	bge.n	8013d7c <__sfputc_r+0x1e>
 8013d6a:	6994      	ldr	r4, [r2, #24]
 8013d6c:	42a3      	cmp	r3, r4
 8013d6e:	db01      	blt.n	8013d74 <__sfputc_r+0x16>
 8013d70:	290a      	cmp	r1, #10
 8013d72:	d103      	bne.n	8013d7c <__sfputc_r+0x1e>
 8013d74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d78:	f000 b94a 	b.w	8014010 <__swbuf_r>
 8013d7c:	6813      	ldr	r3, [r2, #0]
 8013d7e:	1c58      	adds	r0, r3, #1
 8013d80:	6010      	str	r0, [r2, #0]
 8013d82:	7019      	strb	r1, [r3, #0]
 8013d84:	4608      	mov	r0, r1
 8013d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013d8a:	4770      	bx	lr

08013d8c <__sfputs_r>:
 8013d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013d8e:	4606      	mov	r6, r0
 8013d90:	460f      	mov	r7, r1
 8013d92:	4614      	mov	r4, r2
 8013d94:	18d5      	adds	r5, r2, r3
 8013d96:	42ac      	cmp	r4, r5
 8013d98:	d101      	bne.n	8013d9e <__sfputs_r+0x12>
 8013d9a:	2000      	movs	r0, #0
 8013d9c:	e007      	b.n	8013dae <__sfputs_r+0x22>
 8013d9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013da2:	463a      	mov	r2, r7
 8013da4:	4630      	mov	r0, r6
 8013da6:	f7ff ffda 	bl	8013d5e <__sfputc_r>
 8013daa:	1c43      	adds	r3, r0, #1
 8013dac:	d1f3      	bne.n	8013d96 <__sfputs_r+0xa>
 8013dae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08013db0 <_vfiprintf_r>:
 8013db0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013db4:	460d      	mov	r5, r1
 8013db6:	b09d      	sub	sp, #116	; 0x74
 8013db8:	4614      	mov	r4, r2
 8013dba:	4698      	mov	r8, r3
 8013dbc:	4606      	mov	r6, r0
 8013dbe:	b118      	cbz	r0, 8013dc8 <_vfiprintf_r+0x18>
 8013dc0:	6983      	ldr	r3, [r0, #24]
 8013dc2:	b90b      	cbnz	r3, 8013dc8 <_vfiprintf_r+0x18>
 8013dc4:	f000 fb14 	bl	80143f0 <__sinit>
 8013dc8:	4b89      	ldr	r3, [pc, #548]	; (8013ff0 <_vfiprintf_r+0x240>)
 8013dca:	429d      	cmp	r5, r3
 8013dcc:	d11b      	bne.n	8013e06 <_vfiprintf_r+0x56>
 8013dce:	6875      	ldr	r5, [r6, #4]
 8013dd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013dd2:	07d9      	lsls	r1, r3, #31
 8013dd4:	d405      	bmi.n	8013de2 <_vfiprintf_r+0x32>
 8013dd6:	89ab      	ldrh	r3, [r5, #12]
 8013dd8:	059a      	lsls	r2, r3, #22
 8013dda:	d402      	bmi.n	8013de2 <_vfiprintf_r+0x32>
 8013ddc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013dde:	f7ff ffaa 	bl	8013d36 <__retarget_lock_acquire_recursive>
 8013de2:	89ab      	ldrh	r3, [r5, #12]
 8013de4:	071b      	lsls	r3, r3, #28
 8013de6:	d501      	bpl.n	8013dec <_vfiprintf_r+0x3c>
 8013de8:	692b      	ldr	r3, [r5, #16]
 8013dea:	b9eb      	cbnz	r3, 8013e28 <_vfiprintf_r+0x78>
 8013dec:	4629      	mov	r1, r5
 8013dee:	4630      	mov	r0, r6
 8013df0:	f000 f96e 	bl	80140d0 <__swsetup_r>
 8013df4:	b1c0      	cbz	r0, 8013e28 <_vfiprintf_r+0x78>
 8013df6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013df8:	07dc      	lsls	r4, r3, #31
 8013dfa:	d50e      	bpl.n	8013e1a <_vfiprintf_r+0x6a>
 8013dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8013e00:	b01d      	add	sp, #116	; 0x74
 8013e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e06:	4b7b      	ldr	r3, [pc, #492]	; (8013ff4 <_vfiprintf_r+0x244>)
 8013e08:	429d      	cmp	r5, r3
 8013e0a:	d101      	bne.n	8013e10 <_vfiprintf_r+0x60>
 8013e0c:	68b5      	ldr	r5, [r6, #8]
 8013e0e:	e7df      	b.n	8013dd0 <_vfiprintf_r+0x20>
 8013e10:	4b79      	ldr	r3, [pc, #484]	; (8013ff8 <_vfiprintf_r+0x248>)
 8013e12:	429d      	cmp	r5, r3
 8013e14:	bf08      	it	eq
 8013e16:	68f5      	ldreq	r5, [r6, #12]
 8013e18:	e7da      	b.n	8013dd0 <_vfiprintf_r+0x20>
 8013e1a:	89ab      	ldrh	r3, [r5, #12]
 8013e1c:	0598      	lsls	r0, r3, #22
 8013e1e:	d4ed      	bmi.n	8013dfc <_vfiprintf_r+0x4c>
 8013e20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013e22:	f7ff ff89 	bl	8013d38 <__retarget_lock_release_recursive>
 8013e26:	e7e9      	b.n	8013dfc <_vfiprintf_r+0x4c>
 8013e28:	2300      	movs	r3, #0
 8013e2a:	9309      	str	r3, [sp, #36]	; 0x24
 8013e2c:	2320      	movs	r3, #32
 8013e2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013e32:	f8cd 800c 	str.w	r8, [sp, #12]
 8013e36:	2330      	movs	r3, #48	; 0x30
 8013e38:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8013ffc <_vfiprintf_r+0x24c>
 8013e3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013e40:	f04f 0901 	mov.w	r9, #1
 8013e44:	4623      	mov	r3, r4
 8013e46:	469a      	mov	sl, r3
 8013e48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013e4c:	b10a      	cbz	r2, 8013e52 <_vfiprintf_r+0xa2>
 8013e4e:	2a25      	cmp	r2, #37	; 0x25
 8013e50:	d1f9      	bne.n	8013e46 <_vfiprintf_r+0x96>
 8013e52:	ebba 0b04 	subs.w	fp, sl, r4
 8013e56:	d00b      	beq.n	8013e70 <_vfiprintf_r+0xc0>
 8013e58:	465b      	mov	r3, fp
 8013e5a:	4622      	mov	r2, r4
 8013e5c:	4629      	mov	r1, r5
 8013e5e:	4630      	mov	r0, r6
 8013e60:	f7ff ff94 	bl	8013d8c <__sfputs_r>
 8013e64:	3001      	adds	r0, #1
 8013e66:	f000 80aa 	beq.w	8013fbe <_vfiprintf_r+0x20e>
 8013e6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013e6c:	445a      	add	r2, fp
 8013e6e:	9209      	str	r2, [sp, #36]	; 0x24
 8013e70:	f89a 3000 	ldrb.w	r3, [sl]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	f000 80a2 	beq.w	8013fbe <_vfiprintf_r+0x20e>
 8013e7a:	2300      	movs	r3, #0
 8013e7c:	f04f 32ff 	mov.w	r2, #4294967295
 8013e80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013e84:	f10a 0a01 	add.w	sl, sl, #1
 8013e88:	9304      	str	r3, [sp, #16]
 8013e8a:	9307      	str	r3, [sp, #28]
 8013e8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013e90:	931a      	str	r3, [sp, #104]	; 0x68
 8013e92:	4654      	mov	r4, sl
 8013e94:	2205      	movs	r2, #5
 8013e96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013e9a:	4858      	ldr	r0, [pc, #352]	; (8013ffc <_vfiprintf_r+0x24c>)
 8013e9c:	f7ec f9c0 	bl	8000220 <memchr>
 8013ea0:	9a04      	ldr	r2, [sp, #16]
 8013ea2:	b9d8      	cbnz	r0, 8013edc <_vfiprintf_r+0x12c>
 8013ea4:	06d1      	lsls	r1, r2, #27
 8013ea6:	bf44      	itt	mi
 8013ea8:	2320      	movmi	r3, #32
 8013eaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013eae:	0713      	lsls	r3, r2, #28
 8013eb0:	bf44      	itt	mi
 8013eb2:	232b      	movmi	r3, #43	; 0x2b
 8013eb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013eb8:	f89a 3000 	ldrb.w	r3, [sl]
 8013ebc:	2b2a      	cmp	r3, #42	; 0x2a
 8013ebe:	d015      	beq.n	8013eec <_vfiprintf_r+0x13c>
 8013ec0:	9a07      	ldr	r2, [sp, #28]
 8013ec2:	4654      	mov	r4, sl
 8013ec4:	2000      	movs	r0, #0
 8013ec6:	f04f 0c0a 	mov.w	ip, #10
 8013eca:	4621      	mov	r1, r4
 8013ecc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013ed0:	3b30      	subs	r3, #48	; 0x30
 8013ed2:	2b09      	cmp	r3, #9
 8013ed4:	d94e      	bls.n	8013f74 <_vfiprintf_r+0x1c4>
 8013ed6:	b1b0      	cbz	r0, 8013f06 <_vfiprintf_r+0x156>
 8013ed8:	9207      	str	r2, [sp, #28]
 8013eda:	e014      	b.n	8013f06 <_vfiprintf_r+0x156>
 8013edc:	eba0 0308 	sub.w	r3, r0, r8
 8013ee0:	fa09 f303 	lsl.w	r3, r9, r3
 8013ee4:	4313      	orrs	r3, r2
 8013ee6:	9304      	str	r3, [sp, #16]
 8013ee8:	46a2      	mov	sl, r4
 8013eea:	e7d2      	b.n	8013e92 <_vfiprintf_r+0xe2>
 8013eec:	9b03      	ldr	r3, [sp, #12]
 8013eee:	1d19      	adds	r1, r3, #4
 8013ef0:	681b      	ldr	r3, [r3, #0]
 8013ef2:	9103      	str	r1, [sp, #12]
 8013ef4:	2b00      	cmp	r3, #0
 8013ef6:	bfbb      	ittet	lt
 8013ef8:	425b      	neglt	r3, r3
 8013efa:	f042 0202 	orrlt.w	r2, r2, #2
 8013efe:	9307      	strge	r3, [sp, #28]
 8013f00:	9307      	strlt	r3, [sp, #28]
 8013f02:	bfb8      	it	lt
 8013f04:	9204      	strlt	r2, [sp, #16]
 8013f06:	7823      	ldrb	r3, [r4, #0]
 8013f08:	2b2e      	cmp	r3, #46	; 0x2e
 8013f0a:	d10c      	bne.n	8013f26 <_vfiprintf_r+0x176>
 8013f0c:	7863      	ldrb	r3, [r4, #1]
 8013f0e:	2b2a      	cmp	r3, #42	; 0x2a
 8013f10:	d135      	bne.n	8013f7e <_vfiprintf_r+0x1ce>
 8013f12:	9b03      	ldr	r3, [sp, #12]
 8013f14:	1d1a      	adds	r2, r3, #4
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	9203      	str	r2, [sp, #12]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	bfb8      	it	lt
 8013f1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8013f22:	3402      	adds	r4, #2
 8013f24:	9305      	str	r3, [sp, #20]
 8013f26:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801400c <_vfiprintf_r+0x25c>
 8013f2a:	7821      	ldrb	r1, [r4, #0]
 8013f2c:	2203      	movs	r2, #3
 8013f2e:	4650      	mov	r0, sl
 8013f30:	f7ec f976 	bl	8000220 <memchr>
 8013f34:	b140      	cbz	r0, 8013f48 <_vfiprintf_r+0x198>
 8013f36:	2340      	movs	r3, #64	; 0x40
 8013f38:	eba0 000a 	sub.w	r0, r0, sl
 8013f3c:	fa03 f000 	lsl.w	r0, r3, r0
 8013f40:	9b04      	ldr	r3, [sp, #16]
 8013f42:	4303      	orrs	r3, r0
 8013f44:	3401      	adds	r4, #1
 8013f46:	9304      	str	r3, [sp, #16]
 8013f48:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013f4c:	482c      	ldr	r0, [pc, #176]	; (8014000 <_vfiprintf_r+0x250>)
 8013f4e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013f52:	2206      	movs	r2, #6
 8013f54:	f7ec f964 	bl	8000220 <memchr>
 8013f58:	2800      	cmp	r0, #0
 8013f5a:	d03f      	beq.n	8013fdc <_vfiprintf_r+0x22c>
 8013f5c:	4b29      	ldr	r3, [pc, #164]	; (8014004 <_vfiprintf_r+0x254>)
 8013f5e:	bb1b      	cbnz	r3, 8013fa8 <_vfiprintf_r+0x1f8>
 8013f60:	9b03      	ldr	r3, [sp, #12]
 8013f62:	3307      	adds	r3, #7
 8013f64:	f023 0307 	bic.w	r3, r3, #7
 8013f68:	3308      	adds	r3, #8
 8013f6a:	9303      	str	r3, [sp, #12]
 8013f6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013f6e:	443b      	add	r3, r7
 8013f70:	9309      	str	r3, [sp, #36]	; 0x24
 8013f72:	e767      	b.n	8013e44 <_vfiprintf_r+0x94>
 8013f74:	fb0c 3202 	mla	r2, ip, r2, r3
 8013f78:	460c      	mov	r4, r1
 8013f7a:	2001      	movs	r0, #1
 8013f7c:	e7a5      	b.n	8013eca <_vfiprintf_r+0x11a>
 8013f7e:	2300      	movs	r3, #0
 8013f80:	3401      	adds	r4, #1
 8013f82:	9305      	str	r3, [sp, #20]
 8013f84:	4619      	mov	r1, r3
 8013f86:	f04f 0c0a 	mov.w	ip, #10
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013f90:	3a30      	subs	r2, #48	; 0x30
 8013f92:	2a09      	cmp	r2, #9
 8013f94:	d903      	bls.n	8013f9e <_vfiprintf_r+0x1ee>
 8013f96:	2b00      	cmp	r3, #0
 8013f98:	d0c5      	beq.n	8013f26 <_vfiprintf_r+0x176>
 8013f9a:	9105      	str	r1, [sp, #20]
 8013f9c:	e7c3      	b.n	8013f26 <_vfiprintf_r+0x176>
 8013f9e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013fa2:	4604      	mov	r4, r0
 8013fa4:	2301      	movs	r3, #1
 8013fa6:	e7f0      	b.n	8013f8a <_vfiprintf_r+0x1da>
 8013fa8:	ab03      	add	r3, sp, #12
 8013faa:	9300      	str	r3, [sp, #0]
 8013fac:	462a      	mov	r2, r5
 8013fae:	4b16      	ldr	r3, [pc, #88]	; (8014008 <_vfiprintf_r+0x258>)
 8013fb0:	a904      	add	r1, sp, #16
 8013fb2:	4630      	mov	r0, r6
 8013fb4:	f7fe f882 	bl	80120bc <_printf_float>
 8013fb8:	4607      	mov	r7, r0
 8013fba:	1c78      	adds	r0, r7, #1
 8013fbc:	d1d6      	bne.n	8013f6c <_vfiprintf_r+0x1bc>
 8013fbe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013fc0:	07d9      	lsls	r1, r3, #31
 8013fc2:	d405      	bmi.n	8013fd0 <_vfiprintf_r+0x220>
 8013fc4:	89ab      	ldrh	r3, [r5, #12]
 8013fc6:	059a      	lsls	r2, r3, #22
 8013fc8:	d402      	bmi.n	8013fd0 <_vfiprintf_r+0x220>
 8013fca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013fcc:	f7ff feb4 	bl	8013d38 <__retarget_lock_release_recursive>
 8013fd0:	89ab      	ldrh	r3, [r5, #12]
 8013fd2:	065b      	lsls	r3, r3, #25
 8013fd4:	f53f af12 	bmi.w	8013dfc <_vfiprintf_r+0x4c>
 8013fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013fda:	e711      	b.n	8013e00 <_vfiprintf_r+0x50>
 8013fdc:	ab03      	add	r3, sp, #12
 8013fde:	9300      	str	r3, [sp, #0]
 8013fe0:	462a      	mov	r2, r5
 8013fe2:	4b09      	ldr	r3, [pc, #36]	; (8014008 <_vfiprintf_r+0x258>)
 8013fe4:	a904      	add	r1, sp, #16
 8013fe6:	4630      	mov	r0, r6
 8013fe8:	f7fe fb0c 	bl	8012604 <_printf_i>
 8013fec:	e7e4      	b.n	8013fb8 <_vfiprintf_r+0x208>
 8013fee:	bf00      	nop
 8013ff0:	08014c0c 	.word	0x08014c0c
 8013ff4:	08014c2c 	.word	0x08014c2c
 8013ff8:	08014bec 	.word	0x08014bec
 8013ffc:	08014ada 	.word	0x08014ada
 8014000:	08014ae4 	.word	0x08014ae4
 8014004:	080120bd 	.word	0x080120bd
 8014008:	08013d8d 	.word	0x08013d8d
 801400c:	08014ae0 	.word	0x08014ae0

08014010 <__swbuf_r>:
 8014010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014012:	460e      	mov	r6, r1
 8014014:	4614      	mov	r4, r2
 8014016:	4605      	mov	r5, r0
 8014018:	b118      	cbz	r0, 8014022 <__swbuf_r+0x12>
 801401a:	6983      	ldr	r3, [r0, #24]
 801401c:	b90b      	cbnz	r3, 8014022 <__swbuf_r+0x12>
 801401e:	f000 f9e7 	bl	80143f0 <__sinit>
 8014022:	4b21      	ldr	r3, [pc, #132]	; (80140a8 <__swbuf_r+0x98>)
 8014024:	429c      	cmp	r4, r3
 8014026:	d12b      	bne.n	8014080 <__swbuf_r+0x70>
 8014028:	686c      	ldr	r4, [r5, #4]
 801402a:	69a3      	ldr	r3, [r4, #24]
 801402c:	60a3      	str	r3, [r4, #8]
 801402e:	89a3      	ldrh	r3, [r4, #12]
 8014030:	071a      	lsls	r2, r3, #28
 8014032:	d52f      	bpl.n	8014094 <__swbuf_r+0x84>
 8014034:	6923      	ldr	r3, [r4, #16]
 8014036:	b36b      	cbz	r3, 8014094 <__swbuf_r+0x84>
 8014038:	6923      	ldr	r3, [r4, #16]
 801403a:	6820      	ldr	r0, [r4, #0]
 801403c:	1ac0      	subs	r0, r0, r3
 801403e:	6963      	ldr	r3, [r4, #20]
 8014040:	b2f6      	uxtb	r6, r6
 8014042:	4283      	cmp	r3, r0
 8014044:	4637      	mov	r7, r6
 8014046:	dc04      	bgt.n	8014052 <__swbuf_r+0x42>
 8014048:	4621      	mov	r1, r4
 801404a:	4628      	mov	r0, r5
 801404c:	f000 f93c 	bl	80142c8 <_fflush_r>
 8014050:	bb30      	cbnz	r0, 80140a0 <__swbuf_r+0x90>
 8014052:	68a3      	ldr	r3, [r4, #8]
 8014054:	3b01      	subs	r3, #1
 8014056:	60a3      	str	r3, [r4, #8]
 8014058:	6823      	ldr	r3, [r4, #0]
 801405a:	1c5a      	adds	r2, r3, #1
 801405c:	6022      	str	r2, [r4, #0]
 801405e:	701e      	strb	r6, [r3, #0]
 8014060:	6963      	ldr	r3, [r4, #20]
 8014062:	3001      	adds	r0, #1
 8014064:	4283      	cmp	r3, r0
 8014066:	d004      	beq.n	8014072 <__swbuf_r+0x62>
 8014068:	89a3      	ldrh	r3, [r4, #12]
 801406a:	07db      	lsls	r3, r3, #31
 801406c:	d506      	bpl.n	801407c <__swbuf_r+0x6c>
 801406e:	2e0a      	cmp	r6, #10
 8014070:	d104      	bne.n	801407c <__swbuf_r+0x6c>
 8014072:	4621      	mov	r1, r4
 8014074:	4628      	mov	r0, r5
 8014076:	f000 f927 	bl	80142c8 <_fflush_r>
 801407a:	b988      	cbnz	r0, 80140a0 <__swbuf_r+0x90>
 801407c:	4638      	mov	r0, r7
 801407e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014080:	4b0a      	ldr	r3, [pc, #40]	; (80140ac <__swbuf_r+0x9c>)
 8014082:	429c      	cmp	r4, r3
 8014084:	d101      	bne.n	801408a <__swbuf_r+0x7a>
 8014086:	68ac      	ldr	r4, [r5, #8]
 8014088:	e7cf      	b.n	801402a <__swbuf_r+0x1a>
 801408a:	4b09      	ldr	r3, [pc, #36]	; (80140b0 <__swbuf_r+0xa0>)
 801408c:	429c      	cmp	r4, r3
 801408e:	bf08      	it	eq
 8014090:	68ec      	ldreq	r4, [r5, #12]
 8014092:	e7ca      	b.n	801402a <__swbuf_r+0x1a>
 8014094:	4621      	mov	r1, r4
 8014096:	4628      	mov	r0, r5
 8014098:	f000 f81a 	bl	80140d0 <__swsetup_r>
 801409c:	2800      	cmp	r0, #0
 801409e:	d0cb      	beq.n	8014038 <__swbuf_r+0x28>
 80140a0:	f04f 37ff 	mov.w	r7, #4294967295
 80140a4:	e7ea      	b.n	801407c <__swbuf_r+0x6c>
 80140a6:	bf00      	nop
 80140a8:	08014c0c 	.word	0x08014c0c
 80140ac:	08014c2c 	.word	0x08014c2c
 80140b0:	08014bec 	.word	0x08014bec

080140b4 <__ascii_wctomb>:
 80140b4:	b149      	cbz	r1, 80140ca <__ascii_wctomb+0x16>
 80140b6:	2aff      	cmp	r2, #255	; 0xff
 80140b8:	bf85      	ittet	hi
 80140ba:	238a      	movhi	r3, #138	; 0x8a
 80140bc:	6003      	strhi	r3, [r0, #0]
 80140be:	700a      	strbls	r2, [r1, #0]
 80140c0:	f04f 30ff 	movhi.w	r0, #4294967295
 80140c4:	bf98      	it	ls
 80140c6:	2001      	movls	r0, #1
 80140c8:	4770      	bx	lr
 80140ca:	4608      	mov	r0, r1
 80140cc:	4770      	bx	lr
	...

080140d0 <__swsetup_r>:
 80140d0:	4b32      	ldr	r3, [pc, #200]	; (801419c <__swsetup_r+0xcc>)
 80140d2:	b570      	push	{r4, r5, r6, lr}
 80140d4:	681d      	ldr	r5, [r3, #0]
 80140d6:	4606      	mov	r6, r0
 80140d8:	460c      	mov	r4, r1
 80140da:	b125      	cbz	r5, 80140e6 <__swsetup_r+0x16>
 80140dc:	69ab      	ldr	r3, [r5, #24]
 80140de:	b913      	cbnz	r3, 80140e6 <__swsetup_r+0x16>
 80140e0:	4628      	mov	r0, r5
 80140e2:	f000 f985 	bl	80143f0 <__sinit>
 80140e6:	4b2e      	ldr	r3, [pc, #184]	; (80141a0 <__swsetup_r+0xd0>)
 80140e8:	429c      	cmp	r4, r3
 80140ea:	d10f      	bne.n	801410c <__swsetup_r+0x3c>
 80140ec:	686c      	ldr	r4, [r5, #4]
 80140ee:	89a3      	ldrh	r3, [r4, #12]
 80140f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80140f4:	0719      	lsls	r1, r3, #28
 80140f6:	d42c      	bmi.n	8014152 <__swsetup_r+0x82>
 80140f8:	06dd      	lsls	r5, r3, #27
 80140fa:	d411      	bmi.n	8014120 <__swsetup_r+0x50>
 80140fc:	2309      	movs	r3, #9
 80140fe:	6033      	str	r3, [r6, #0]
 8014100:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014104:	81a3      	strh	r3, [r4, #12]
 8014106:	f04f 30ff 	mov.w	r0, #4294967295
 801410a:	e03e      	b.n	801418a <__swsetup_r+0xba>
 801410c:	4b25      	ldr	r3, [pc, #148]	; (80141a4 <__swsetup_r+0xd4>)
 801410e:	429c      	cmp	r4, r3
 8014110:	d101      	bne.n	8014116 <__swsetup_r+0x46>
 8014112:	68ac      	ldr	r4, [r5, #8]
 8014114:	e7eb      	b.n	80140ee <__swsetup_r+0x1e>
 8014116:	4b24      	ldr	r3, [pc, #144]	; (80141a8 <__swsetup_r+0xd8>)
 8014118:	429c      	cmp	r4, r3
 801411a:	bf08      	it	eq
 801411c:	68ec      	ldreq	r4, [r5, #12]
 801411e:	e7e6      	b.n	80140ee <__swsetup_r+0x1e>
 8014120:	0758      	lsls	r0, r3, #29
 8014122:	d512      	bpl.n	801414a <__swsetup_r+0x7a>
 8014124:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014126:	b141      	cbz	r1, 801413a <__swsetup_r+0x6a>
 8014128:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801412c:	4299      	cmp	r1, r3
 801412e:	d002      	beq.n	8014136 <__swsetup_r+0x66>
 8014130:	4630      	mov	r0, r6
 8014132:	f7fd fe43 	bl	8011dbc <_free_r>
 8014136:	2300      	movs	r3, #0
 8014138:	6363      	str	r3, [r4, #52]	; 0x34
 801413a:	89a3      	ldrh	r3, [r4, #12]
 801413c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014140:	81a3      	strh	r3, [r4, #12]
 8014142:	2300      	movs	r3, #0
 8014144:	6063      	str	r3, [r4, #4]
 8014146:	6923      	ldr	r3, [r4, #16]
 8014148:	6023      	str	r3, [r4, #0]
 801414a:	89a3      	ldrh	r3, [r4, #12]
 801414c:	f043 0308 	orr.w	r3, r3, #8
 8014150:	81a3      	strh	r3, [r4, #12]
 8014152:	6923      	ldr	r3, [r4, #16]
 8014154:	b94b      	cbnz	r3, 801416a <__swsetup_r+0x9a>
 8014156:	89a3      	ldrh	r3, [r4, #12]
 8014158:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801415c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014160:	d003      	beq.n	801416a <__swsetup_r+0x9a>
 8014162:	4621      	mov	r1, r4
 8014164:	4630      	mov	r0, r6
 8014166:	f000 fa05 	bl	8014574 <__smakebuf_r>
 801416a:	89a0      	ldrh	r0, [r4, #12]
 801416c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014170:	f010 0301 	ands.w	r3, r0, #1
 8014174:	d00a      	beq.n	801418c <__swsetup_r+0xbc>
 8014176:	2300      	movs	r3, #0
 8014178:	60a3      	str	r3, [r4, #8]
 801417a:	6963      	ldr	r3, [r4, #20]
 801417c:	425b      	negs	r3, r3
 801417e:	61a3      	str	r3, [r4, #24]
 8014180:	6923      	ldr	r3, [r4, #16]
 8014182:	b943      	cbnz	r3, 8014196 <__swsetup_r+0xc6>
 8014184:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014188:	d1ba      	bne.n	8014100 <__swsetup_r+0x30>
 801418a:	bd70      	pop	{r4, r5, r6, pc}
 801418c:	0781      	lsls	r1, r0, #30
 801418e:	bf58      	it	pl
 8014190:	6963      	ldrpl	r3, [r4, #20]
 8014192:	60a3      	str	r3, [r4, #8]
 8014194:	e7f4      	b.n	8014180 <__swsetup_r+0xb0>
 8014196:	2000      	movs	r0, #0
 8014198:	e7f7      	b.n	801418a <__swsetup_r+0xba>
 801419a:	bf00      	nop
 801419c:	2000012c 	.word	0x2000012c
 80141a0:	08014c0c 	.word	0x08014c0c
 80141a4:	08014c2c 	.word	0x08014c2c
 80141a8:	08014bec 	.word	0x08014bec

080141ac <abort>:
 80141ac:	b508      	push	{r3, lr}
 80141ae:	2006      	movs	r0, #6
 80141b0:	f000 fa48 	bl	8014644 <raise>
 80141b4:	2001      	movs	r0, #1
 80141b6:	f7ed fdb1 	bl	8001d1c <_exit>
	...

080141bc <__sflush_r>:
 80141bc:	898a      	ldrh	r2, [r1, #12]
 80141be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141c2:	4605      	mov	r5, r0
 80141c4:	0710      	lsls	r0, r2, #28
 80141c6:	460c      	mov	r4, r1
 80141c8:	d458      	bmi.n	801427c <__sflush_r+0xc0>
 80141ca:	684b      	ldr	r3, [r1, #4]
 80141cc:	2b00      	cmp	r3, #0
 80141ce:	dc05      	bgt.n	80141dc <__sflush_r+0x20>
 80141d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80141d2:	2b00      	cmp	r3, #0
 80141d4:	dc02      	bgt.n	80141dc <__sflush_r+0x20>
 80141d6:	2000      	movs	r0, #0
 80141d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80141de:	2e00      	cmp	r6, #0
 80141e0:	d0f9      	beq.n	80141d6 <__sflush_r+0x1a>
 80141e2:	2300      	movs	r3, #0
 80141e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80141e8:	682f      	ldr	r7, [r5, #0]
 80141ea:	602b      	str	r3, [r5, #0]
 80141ec:	d032      	beq.n	8014254 <__sflush_r+0x98>
 80141ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80141f0:	89a3      	ldrh	r3, [r4, #12]
 80141f2:	075a      	lsls	r2, r3, #29
 80141f4:	d505      	bpl.n	8014202 <__sflush_r+0x46>
 80141f6:	6863      	ldr	r3, [r4, #4]
 80141f8:	1ac0      	subs	r0, r0, r3
 80141fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80141fc:	b10b      	cbz	r3, 8014202 <__sflush_r+0x46>
 80141fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014200:	1ac0      	subs	r0, r0, r3
 8014202:	2300      	movs	r3, #0
 8014204:	4602      	mov	r2, r0
 8014206:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014208:	6a21      	ldr	r1, [r4, #32]
 801420a:	4628      	mov	r0, r5
 801420c:	47b0      	blx	r6
 801420e:	1c43      	adds	r3, r0, #1
 8014210:	89a3      	ldrh	r3, [r4, #12]
 8014212:	d106      	bne.n	8014222 <__sflush_r+0x66>
 8014214:	6829      	ldr	r1, [r5, #0]
 8014216:	291d      	cmp	r1, #29
 8014218:	d82c      	bhi.n	8014274 <__sflush_r+0xb8>
 801421a:	4a2a      	ldr	r2, [pc, #168]	; (80142c4 <__sflush_r+0x108>)
 801421c:	40ca      	lsrs	r2, r1
 801421e:	07d6      	lsls	r6, r2, #31
 8014220:	d528      	bpl.n	8014274 <__sflush_r+0xb8>
 8014222:	2200      	movs	r2, #0
 8014224:	6062      	str	r2, [r4, #4]
 8014226:	04d9      	lsls	r1, r3, #19
 8014228:	6922      	ldr	r2, [r4, #16]
 801422a:	6022      	str	r2, [r4, #0]
 801422c:	d504      	bpl.n	8014238 <__sflush_r+0x7c>
 801422e:	1c42      	adds	r2, r0, #1
 8014230:	d101      	bne.n	8014236 <__sflush_r+0x7a>
 8014232:	682b      	ldr	r3, [r5, #0]
 8014234:	b903      	cbnz	r3, 8014238 <__sflush_r+0x7c>
 8014236:	6560      	str	r0, [r4, #84]	; 0x54
 8014238:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801423a:	602f      	str	r7, [r5, #0]
 801423c:	2900      	cmp	r1, #0
 801423e:	d0ca      	beq.n	80141d6 <__sflush_r+0x1a>
 8014240:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014244:	4299      	cmp	r1, r3
 8014246:	d002      	beq.n	801424e <__sflush_r+0x92>
 8014248:	4628      	mov	r0, r5
 801424a:	f7fd fdb7 	bl	8011dbc <_free_r>
 801424e:	2000      	movs	r0, #0
 8014250:	6360      	str	r0, [r4, #52]	; 0x34
 8014252:	e7c1      	b.n	80141d8 <__sflush_r+0x1c>
 8014254:	6a21      	ldr	r1, [r4, #32]
 8014256:	2301      	movs	r3, #1
 8014258:	4628      	mov	r0, r5
 801425a:	47b0      	blx	r6
 801425c:	1c41      	adds	r1, r0, #1
 801425e:	d1c7      	bne.n	80141f0 <__sflush_r+0x34>
 8014260:	682b      	ldr	r3, [r5, #0]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d0c4      	beq.n	80141f0 <__sflush_r+0x34>
 8014266:	2b1d      	cmp	r3, #29
 8014268:	d001      	beq.n	801426e <__sflush_r+0xb2>
 801426a:	2b16      	cmp	r3, #22
 801426c:	d101      	bne.n	8014272 <__sflush_r+0xb6>
 801426e:	602f      	str	r7, [r5, #0]
 8014270:	e7b1      	b.n	80141d6 <__sflush_r+0x1a>
 8014272:	89a3      	ldrh	r3, [r4, #12]
 8014274:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014278:	81a3      	strh	r3, [r4, #12]
 801427a:	e7ad      	b.n	80141d8 <__sflush_r+0x1c>
 801427c:	690f      	ldr	r7, [r1, #16]
 801427e:	2f00      	cmp	r7, #0
 8014280:	d0a9      	beq.n	80141d6 <__sflush_r+0x1a>
 8014282:	0793      	lsls	r3, r2, #30
 8014284:	680e      	ldr	r6, [r1, #0]
 8014286:	bf08      	it	eq
 8014288:	694b      	ldreq	r3, [r1, #20]
 801428a:	600f      	str	r7, [r1, #0]
 801428c:	bf18      	it	ne
 801428e:	2300      	movne	r3, #0
 8014290:	eba6 0807 	sub.w	r8, r6, r7
 8014294:	608b      	str	r3, [r1, #8]
 8014296:	f1b8 0f00 	cmp.w	r8, #0
 801429a:	dd9c      	ble.n	80141d6 <__sflush_r+0x1a>
 801429c:	6a21      	ldr	r1, [r4, #32]
 801429e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80142a0:	4643      	mov	r3, r8
 80142a2:	463a      	mov	r2, r7
 80142a4:	4628      	mov	r0, r5
 80142a6:	47b0      	blx	r6
 80142a8:	2800      	cmp	r0, #0
 80142aa:	dc06      	bgt.n	80142ba <__sflush_r+0xfe>
 80142ac:	89a3      	ldrh	r3, [r4, #12]
 80142ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80142b2:	81a3      	strh	r3, [r4, #12]
 80142b4:	f04f 30ff 	mov.w	r0, #4294967295
 80142b8:	e78e      	b.n	80141d8 <__sflush_r+0x1c>
 80142ba:	4407      	add	r7, r0
 80142bc:	eba8 0800 	sub.w	r8, r8, r0
 80142c0:	e7e9      	b.n	8014296 <__sflush_r+0xda>
 80142c2:	bf00      	nop
 80142c4:	20400001 	.word	0x20400001

080142c8 <_fflush_r>:
 80142c8:	b538      	push	{r3, r4, r5, lr}
 80142ca:	690b      	ldr	r3, [r1, #16]
 80142cc:	4605      	mov	r5, r0
 80142ce:	460c      	mov	r4, r1
 80142d0:	b913      	cbnz	r3, 80142d8 <_fflush_r+0x10>
 80142d2:	2500      	movs	r5, #0
 80142d4:	4628      	mov	r0, r5
 80142d6:	bd38      	pop	{r3, r4, r5, pc}
 80142d8:	b118      	cbz	r0, 80142e2 <_fflush_r+0x1a>
 80142da:	6983      	ldr	r3, [r0, #24]
 80142dc:	b90b      	cbnz	r3, 80142e2 <_fflush_r+0x1a>
 80142de:	f000 f887 	bl	80143f0 <__sinit>
 80142e2:	4b14      	ldr	r3, [pc, #80]	; (8014334 <_fflush_r+0x6c>)
 80142e4:	429c      	cmp	r4, r3
 80142e6:	d11b      	bne.n	8014320 <_fflush_r+0x58>
 80142e8:	686c      	ldr	r4, [r5, #4]
 80142ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	d0ef      	beq.n	80142d2 <_fflush_r+0xa>
 80142f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80142f4:	07d0      	lsls	r0, r2, #31
 80142f6:	d404      	bmi.n	8014302 <_fflush_r+0x3a>
 80142f8:	0599      	lsls	r1, r3, #22
 80142fa:	d402      	bmi.n	8014302 <_fflush_r+0x3a>
 80142fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80142fe:	f7ff fd1a 	bl	8013d36 <__retarget_lock_acquire_recursive>
 8014302:	4628      	mov	r0, r5
 8014304:	4621      	mov	r1, r4
 8014306:	f7ff ff59 	bl	80141bc <__sflush_r>
 801430a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801430c:	07da      	lsls	r2, r3, #31
 801430e:	4605      	mov	r5, r0
 8014310:	d4e0      	bmi.n	80142d4 <_fflush_r+0xc>
 8014312:	89a3      	ldrh	r3, [r4, #12]
 8014314:	059b      	lsls	r3, r3, #22
 8014316:	d4dd      	bmi.n	80142d4 <_fflush_r+0xc>
 8014318:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801431a:	f7ff fd0d 	bl	8013d38 <__retarget_lock_release_recursive>
 801431e:	e7d9      	b.n	80142d4 <_fflush_r+0xc>
 8014320:	4b05      	ldr	r3, [pc, #20]	; (8014338 <_fflush_r+0x70>)
 8014322:	429c      	cmp	r4, r3
 8014324:	d101      	bne.n	801432a <_fflush_r+0x62>
 8014326:	68ac      	ldr	r4, [r5, #8]
 8014328:	e7df      	b.n	80142ea <_fflush_r+0x22>
 801432a:	4b04      	ldr	r3, [pc, #16]	; (801433c <_fflush_r+0x74>)
 801432c:	429c      	cmp	r4, r3
 801432e:	bf08      	it	eq
 8014330:	68ec      	ldreq	r4, [r5, #12]
 8014332:	e7da      	b.n	80142ea <_fflush_r+0x22>
 8014334:	08014c0c 	.word	0x08014c0c
 8014338:	08014c2c 	.word	0x08014c2c
 801433c:	08014bec 	.word	0x08014bec

08014340 <std>:
 8014340:	2300      	movs	r3, #0
 8014342:	b510      	push	{r4, lr}
 8014344:	4604      	mov	r4, r0
 8014346:	e9c0 3300 	strd	r3, r3, [r0]
 801434a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801434e:	6083      	str	r3, [r0, #8]
 8014350:	8181      	strh	r1, [r0, #12]
 8014352:	6643      	str	r3, [r0, #100]	; 0x64
 8014354:	81c2      	strh	r2, [r0, #14]
 8014356:	6183      	str	r3, [r0, #24]
 8014358:	4619      	mov	r1, r3
 801435a:	2208      	movs	r2, #8
 801435c:	305c      	adds	r0, #92	; 0x5c
 801435e:	f7fd fd25 	bl	8011dac <memset>
 8014362:	4b05      	ldr	r3, [pc, #20]	; (8014378 <std+0x38>)
 8014364:	6263      	str	r3, [r4, #36]	; 0x24
 8014366:	4b05      	ldr	r3, [pc, #20]	; (801437c <std+0x3c>)
 8014368:	62a3      	str	r3, [r4, #40]	; 0x28
 801436a:	4b05      	ldr	r3, [pc, #20]	; (8014380 <std+0x40>)
 801436c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801436e:	4b05      	ldr	r3, [pc, #20]	; (8014384 <std+0x44>)
 8014370:	6224      	str	r4, [r4, #32]
 8014372:	6323      	str	r3, [r4, #48]	; 0x30
 8014374:	bd10      	pop	{r4, pc}
 8014376:	bf00      	nop
 8014378:	0801467d 	.word	0x0801467d
 801437c:	0801469f 	.word	0x0801469f
 8014380:	080146d7 	.word	0x080146d7
 8014384:	080146fb 	.word	0x080146fb

08014388 <_cleanup_r>:
 8014388:	4901      	ldr	r1, [pc, #4]	; (8014390 <_cleanup_r+0x8>)
 801438a:	f000 b8af 	b.w	80144ec <_fwalk_reent>
 801438e:	bf00      	nop
 8014390:	080142c9 	.word	0x080142c9

08014394 <__sfmoreglue>:
 8014394:	b570      	push	{r4, r5, r6, lr}
 8014396:	2268      	movs	r2, #104	; 0x68
 8014398:	1e4d      	subs	r5, r1, #1
 801439a:	4355      	muls	r5, r2
 801439c:	460e      	mov	r6, r1
 801439e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80143a2:	f7fd fd77 	bl	8011e94 <_malloc_r>
 80143a6:	4604      	mov	r4, r0
 80143a8:	b140      	cbz	r0, 80143bc <__sfmoreglue+0x28>
 80143aa:	2100      	movs	r1, #0
 80143ac:	e9c0 1600 	strd	r1, r6, [r0]
 80143b0:	300c      	adds	r0, #12
 80143b2:	60a0      	str	r0, [r4, #8]
 80143b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80143b8:	f7fd fcf8 	bl	8011dac <memset>
 80143bc:	4620      	mov	r0, r4
 80143be:	bd70      	pop	{r4, r5, r6, pc}

080143c0 <__sfp_lock_acquire>:
 80143c0:	4801      	ldr	r0, [pc, #4]	; (80143c8 <__sfp_lock_acquire+0x8>)
 80143c2:	f7ff bcb8 	b.w	8013d36 <__retarget_lock_acquire_recursive>
 80143c6:	bf00      	nop
 80143c8:	20002765 	.word	0x20002765

080143cc <__sfp_lock_release>:
 80143cc:	4801      	ldr	r0, [pc, #4]	; (80143d4 <__sfp_lock_release+0x8>)
 80143ce:	f7ff bcb3 	b.w	8013d38 <__retarget_lock_release_recursive>
 80143d2:	bf00      	nop
 80143d4:	20002765 	.word	0x20002765

080143d8 <__sinit_lock_acquire>:
 80143d8:	4801      	ldr	r0, [pc, #4]	; (80143e0 <__sinit_lock_acquire+0x8>)
 80143da:	f7ff bcac 	b.w	8013d36 <__retarget_lock_acquire_recursive>
 80143de:	bf00      	nop
 80143e0:	20002766 	.word	0x20002766

080143e4 <__sinit_lock_release>:
 80143e4:	4801      	ldr	r0, [pc, #4]	; (80143ec <__sinit_lock_release+0x8>)
 80143e6:	f7ff bca7 	b.w	8013d38 <__retarget_lock_release_recursive>
 80143ea:	bf00      	nop
 80143ec:	20002766 	.word	0x20002766

080143f0 <__sinit>:
 80143f0:	b510      	push	{r4, lr}
 80143f2:	4604      	mov	r4, r0
 80143f4:	f7ff fff0 	bl	80143d8 <__sinit_lock_acquire>
 80143f8:	69a3      	ldr	r3, [r4, #24]
 80143fa:	b11b      	cbz	r3, 8014404 <__sinit+0x14>
 80143fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014400:	f7ff bff0 	b.w	80143e4 <__sinit_lock_release>
 8014404:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014408:	6523      	str	r3, [r4, #80]	; 0x50
 801440a:	4b13      	ldr	r3, [pc, #76]	; (8014458 <__sinit+0x68>)
 801440c:	4a13      	ldr	r2, [pc, #76]	; (801445c <__sinit+0x6c>)
 801440e:	681b      	ldr	r3, [r3, #0]
 8014410:	62a2      	str	r2, [r4, #40]	; 0x28
 8014412:	42a3      	cmp	r3, r4
 8014414:	bf04      	itt	eq
 8014416:	2301      	moveq	r3, #1
 8014418:	61a3      	streq	r3, [r4, #24]
 801441a:	4620      	mov	r0, r4
 801441c:	f000 f820 	bl	8014460 <__sfp>
 8014420:	6060      	str	r0, [r4, #4]
 8014422:	4620      	mov	r0, r4
 8014424:	f000 f81c 	bl	8014460 <__sfp>
 8014428:	60a0      	str	r0, [r4, #8]
 801442a:	4620      	mov	r0, r4
 801442c:	f000 f818 	bl	8014460 <__sfp>
 8014430:	2200      	movs	r2, #0
 8014432:	60e0      	str	r0, [r4, #12]
 8014434:	2104      	movs	r1, #4
 8014436:	6860      	ldr	r0, [r4, #4]
 8014438:	f7ff ff82 	bl	8014340 <std>
 801443c:	68a0      	ldr	r0, [r4, #8]
 801443e:	2201      	movs	r2, #1
 8014440:	2109      	movs	r1, #9
 8014442:	f7ff ff7d 	bl	8014340 <std>
 8014446:	68e0      	ldr	r0, [r4, #12]
 8014448:	2202      	movs	r2, #2
 801444a:	2112      	movs	r1, #18
 801444c:	f7ff ff78 	bl	8014340 <std>
 8014450:	2301      	movs	r3, #1
 8014452:	61a3      	str	r3, [r4, #24]
 8014454:	e7d2      	b.n	80143fc <__sinit+0xc>
 8014456:	bf00      	nop
 8014458:	08014870 	.word	0x08014870
 801445c:	08014389 	.word	0x08014389

08014460 <__sfp>:
 8014460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014462:	4607      	mov	r7, r0
 8014464:	f7ff ffac 	bl	80143c0 <__sfp_lock_acquire>
 8014468:	4b1e      	ldr	r3, [pc, #120]	; (80144e4 <__sfp+0x84>)
 801446a:	681e      	ldr	r6, [r3, #0]
 801446c:	69b3      	ldr	r3, [r6, #24]
 801446e:	b913      	cbnz	r3, 8014476 <__sfp+0x16>
 8014470:	4630      	mov	r0, r6
 8014472:	f7ff ffbd 	bl	80143f0 <__sinit>
 8014476:	3648      	adds	r6, #72	; 0x48
 8014478:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801447c:	3b01      	subs	r3, #1
 801447e:	d503      	bpl.n	8014488 <__sfp+0x28>
 8014480:	6833      	ldr	r3, [r6, #0]
 8014482:	b30b      	cbz	r3, 80144c8 <__sfp+0x68>
 8014484:	6836      	ldr	r6, [r6, #0]
 8014486:	e7f7      	b.n	8014478 <__sfp+0x18>
 8014488:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801448c:	b9d5      	cbnz	r5, 80144c4 <__sfp+0x64>
 801448e:	4b16      	ldr	r3, [pc, #88]	; (80144e8 <__sfp+0x88>)
 8014490:	60e3      	str	r3, [r4, #12]
 8014492:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014496:	6665      	str	r5, [r4, #100]	; 0x64
 8014498:	f7ff fc4c 	bl	8013d34 <__retarget_lock_init_recursive>
 801449c:	f7ff ff96 	bl	80143cc <__sfp_lock_release>
 80144a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80144a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80144a8:	6025      	str	r5, [r4, #0]
 80144aa:	61a5      	str	r5, [r4, #24]
 80144ac:	2208      	movs	r2, #8
 80144ae:	4629      	mov	r1, r5
 80144b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80144b4:	f7fd fc7a 	bl	8011dac <memset>
 80144b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80144bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80144c0:	4620      	mov	r0, r4
 80144c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80144c4:	3468      	adds	r4, #104	; 0x68
 80144c6:	e7d9      	b.n	801447c <__sfp+0x1c>
 80144c8:	2104      	movs	r1, #4
 80144ca:	4638      	mov	r0, r7
 80144cc:	f7ff ff62 	bl	8014394 <__sfmoreglue>
 80144d0:	4604      	mov	r4, r0
 80144d2:	6030      	str	r0, [r6, #0]
 80144d4:	2800      	cmp	r0, #0
 80144d6:	d1d5      	bne.n	8014484 <__sfp+0x24>
 80144d8:	f7ff ff78 	bl	80143cc <__sfp_lock_release>
 80144dc:	230c      	movs	r3, #12
 80144de:	603b      	str	r3, [r7, #0]
 80144e0:	e7ee      	b.n	80144c0 <__sfp+0x60>
 80144e2:	bf00      	nop
 80144e4:	08014870 	.word	0x08014870
 80144e8:	ffff0001 	.word	0xffff0001

080144ec <_fwalk_reent>:
 80144ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144f0:	4606      	mov	r6, r0
 80144f2:	4688      	mov	r8, r1
 80144f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80144f8:	2700      	movs	r7, #0
 80144fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80144fe:	f1b9 0901 	subs.w	r9, r9, #1
 8014502:	d505      	bpl.n	8014510 <_fwalk_reent+0x24>
 8014504:	6824      	ldr	r4, [r4, #0]
 8014506:	2c00      	cmp	r4, #0
 8014508:	d1f7      	bne.n	80144fa <_fwalk_reent+0xe>
 801450a:	4638      	mov	r0, r7
 801450c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014510:	89ab      	ldrh	r3, [r5, #12]
 8014512:	2b01      	cmp	r3, #1
 8014514:	d907      	bls.n	8014526 <_fwalk_reent+0x3a>
 8014516:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801451a:	3301      	adds	r3, #1
 801451c:	d003      	beq.n	8014526 <_fwalk_reent+0x3a>
 801451e:	4629      	mov	r1, r5
 8014520:	4630      	mov	r0, r6
 8014522:	47c0      	blx	r8
 8014524:	4307      	orrs	r7, r0
 8014526:	3568      	adds	r5, #104	; 0x68
 8014528:	e7e9      	b.n	80144fe <_fwalk_reent+0x12>

0801452a <__swhatbuf_r>:
 801452a:	b570      	push	{r4, r5, r6, lr}
 801452c:	460e      	mov	r6, r1
 801452e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014532:	2900      	cmp	r1, #0
 8014534:	b096      	sub	sp, #88	; 0x58
 8014536:	4614      	mov	r4, r2
 8014538:	461d      	mov	r5, r3
 801453a:	da08      	bge.n	801454e <__swhatbuf_r+0x24>
 801453c:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014540:	2200      	movs	r2, #0
 8014542:	602a      	str	r2, [r5, #0]
 8014544:	061a      	lsls	r2, r3, #24
 8014546:	d410      	bmi.n	801456a <__swhatbuf_r+0x40>
 8014548:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801454c:	e00e      	b.n	801456c <__swhatbuf_r+0x42>
 801454e:	466a      	mov	r2, sp
 8014550:	f000 f8fa 	bl	8014748 <_fstat_r>
 8014554:	2800      	cmp	r0, #0
 8014556:	dbf1      	blt.n	801453c <__swhatbuf_r+0x12>
 8014558:	9a01      	ldr	r2, [sp, #4]
 801455a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801455e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014562:	425a      	negs	r2, r3
 8014564:	415a      	adcs	r2, r3
 8014566:	602a      	str	r2, [r5, #0]
 8014568:	e7ee      	b.n	8014548 <__swhatbuf_r+0x1e>
 801456a:	2340      	movs	r3, #64	; 0x40
 801456c:	2000      	movs	r0, #0
 801456e:	6023      	str	r3, [r4, #0]
 8014570:	b016      	add	sp, #88	; 0x58
 8014572:	bd70      	pop	{r4, r5, r6, pc}

08014574 <__smakebuf_r>:
 8014574:	898b      	ldrh	r3, [r1, #12]
 8014576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014578:	079d      	lsls	r5, r3, #30
 801457a:	4606      	mov	r6, r0
 801457c:	460c      	mov	r4, r1
 801457e:	d507      	bpl.n	8014590 <__smakebuf_r+0x1c>
 8014580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014584:	6023      	str	r3, [r4, #0]
 8014586:	6123      	str	r3, [r4, #16]
 8014588:	2301      	movs	r3, #1
 801458a:	6163      	str	r3, [r4, #20]
 801458c:	b002      	add	sp, #8
 801458e:	bd70      	pop	{r4, r5, r6, pc}
 8014590:	ab01      	add	r3, sp, #4
 8014592:	466a      	mov	r2, sp
 8014594:	f7ff ffc9 	bl	801452a <__swhatbuf_r>
 8014598:	9900      	ldr	r1, [sp, #0]
 801459a:	4605      	mov	r5, r0
 801459c:	4630      	mov	r0, r6
 801459e:	f7fd fc79 	bl	8011e94 <_malloc_r>
 80145a2:	b948      	cbnz	r0, 80145b8 <__smakebuf_r+0x44>
 80145a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80145a8:	059a      	lsls	r2, r3, #22
 80145aa:	d4ef      	bmi.n	801458c <__smakebuf_r+0x18>
 80145ac:	f023 0303 	bic.w	r3, r3, #3
 80145b0:	f043 0302 	orr.w	r3, r3, #2
 80145b4:	81a3      	strh	r3, [r4, #12]
 80145b6:	e7e3      	b.n	8014580 <__smakebuf_r+0xc>
 80145b8:	4b0d      	ldr	r3, [pc, #52]	; (80145f0 <__smakebuf_r+0x7c>)
 80145ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80145bc:	89a3      	ldrh	r3, [r4, #12]
 80145be:	6020      	str	r0, [r4, #0]
 80145c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80145c4:	81a3      	strh	r3, [r4, #12]
 80145c6:	9b00      	ldr	r3, [sp, #0]
 80145c8:	6163      	str	r3, [r4, #20]
 80145ca:	9b01      	ldr	r3, [sp, #4]
 80145cc:	6120      	str	r0, [r4, #16]
 80145ce:	b15b      	cbz	r3, 80145e8 <__smakebuf_r+0x74>
 80145d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80145d4:	4630      	mov	r0, r6
 80145d6:	f000 f8c9 	bl	801476c <_isatty_r>
 80145da:	b128      	cbz	r0, 80145e8 <__smakebuf_r+0x74>
 80145dc:	89a3      	ldrh	r3, [r4, #12]
 80145de:	f023 0303 	bic.w	r3, r3, #3
 80145e2:	f043 0301 	orr.w	r3, r3, #1
 80145e6:	81a3      	strh	r3, [r4, #12]
 80145e8:	89a0      	ldrh	r0, [r4, #12]
 80145ea:	4305      	orrs	r5, r0
 80145ec:	81a5      	strh	r5, [r4, #12]
 80145ee:	e7cd      	b.n	801458c <__smakebuf_r+0x18>
 80145f0:	08014389 	.word	0x08014389

080145f4 <_raise_r>:
 80145f4:	291f      	cmp	r1, #31
 80145f6:	b538      	push	{r3, r4, r5, lr}
 80145f8:	4604      	mov	r4, r0
 80145fa:	460d      	mov	r5, r1
 80145fc:	d904      	bls.n	8014608 <_raise_r+0x14>
 80145fe:	2316      	movs	r3, #22
 8014600:	6003      	str	r3, [r0, #0]
 8014602:	f04f 30ff 	mov.w	r0, #4294967295
 8014606:	bd38      	pop	{r3, r4, r5, pc}
 8014608:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801460a:	b112      	cbz	r2, 8014612 <_raise_r+0x1e>
 801460c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014610:	b94b      	cbnz	r3, 8014626 <_raise_r+0x32>
 8014612:	4620      	mov	r0, r4
 8014614:	f000 f830 	bl	8014678 <_getpid_r>
 8014618:	462a      	mov	r2, r5
 801461a:	4601      	mov	r1, r0
 801461c:	4620      	mov	r0, r4
 801461e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014622:	f000 b817 	b.w	8014654 <_kill_r>
 8014626:	2b01      	cmp	r3, #1
 8014628:	d00a      	beq.n	8014640 <_raise_r+0x4c>
 801462a:	1c59      	adds	r1, r3, #1
 801462c:	d103      	bne.n	8014636 <_raise_r+0x42>
 801462e:	2316      	movs	r3, #22
 8014630:	6003      	str	r3, [r0, #0]
 8014632:	2001      	movs	r0, #1
 8014634:	e7e7      	b.n	8014606 <_raise_r+0x12>
 8014636:	2400      	movs	r4, #0
 8014638:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801463c:	4628      	mov	r0, r5
 801463e:	4798      	blx	r3
 8014640:	2000      	movs	r0, #0
 8014642:	e7e0      	b.n	8014606 <_raise_r+0x12>

08014644 <raise>:
 8014644:	4b02      	ldr	r3, [pc, #8]	; (8014650 <raise+0xc>)
 8014646:	4601      	mov	r1, r0
 8014648:	6818      	ldr	r0, [r3, #0]
 801464a:	f7ff bfd3 	b.w	80145f4 <_raise_r>
 801464e:	bf00      	nop
 8014650:	2000012c 	.word	0x2000012c

08014654 <_kill_r>:
 8014654:	b538      	push	{r3, r4, r5, lr}
 8014656:	4d07      	ldr	r5, [pc, #28]	; (8014674 <_kill_r+0x20>)
 8014658:	2300      	movs	r3, #0
 801465a:	4604      	mov	r4, r0
 801465c:	4608      	mov	r0, r1
 801465e:	4611      	mov	r1, r2
 8014660:	602b      	str	r3, [r5, #0]
 8014662:	f7ed fb4b 	bl	8001cfc <_kill>
 8014666:	1c43      	adds	r3, r0, #1
 8014668:	d102      	bne.n	8014670 <_kill_r+0x1c>
 801466a:	682b      	ldr	r3, [r5, #0]
 801466c:	b103      	cbz	r3, 8014670 <_kill_r+0x1c>
 801466e:	6023      	str	r3, [r4, #0]
 8014670:	bd38      	pop	{r3, r4, r5, pc}
 8014672:	bf00      	nop
 8014674:	20002760 	.word	0x20002760

08014678 <_getpid_r>:
 8014678:	f7ed bb38 	b.w	8001cec <_getpid>

0801467c <__sread>:
 801467c:	b510      	push	{r4, lr}
 801467e:	460c      	mov	r4, r1
 8014680:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014684:	f000 f894 	bl	80147b0 <_read_r>
 8014688:	2800      	cmp	r0, #0
 801468a:	bfab      	itete	ge
 801468c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801468e:	89a3      	ldrhlt	r3, [r4, #12]
 8014690:	181b      	addge	r3, r3, r0
 8014692:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014696:	bfac      	ite	ge
 8014698:	6563      	strge	r3, [r4, #84]	; 0x54
 801469a:	81a3      	strhlt	r3, [r4, #12]
 801469c:	bd10      	pop	{r4, pc}

0801469e <__swrite>:
 801469e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80146a2:	461f      	mov	r7, r3
 80146a4:	898b      	ldrh	r3, [r1, #12]
 80146a6:	05db      	lsls	r3, r3, #23
 80146a8:	4605      	mov	r5, r0
 80146aa:	460c      	mov	r4, r1
 80146ac:	4616      	mov	r6, r2
 80146ae:	d505      	bpl.n	80146bc <__swrite+0x1e>
 80146b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146b4:	2302      	movs	r3, #2
 80146b6:	2200      	movs	r2, #0
 80146b8:	f000 f868 	bl	801478c <_lseek_r>
 80146bc:	89a3      	ldrh	r3, [r4, #12]
 80146be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80146c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80146c6:	81a3      	strh	r3, [r4, #12]
 80146c8:	4632      	mov	r2, r6
 80146ca:	463b      	mov	r3, r7
 80146cc:	4628      	mov	r0, r5
 80146ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80146d2:	f000 b817 	b.w	8014704 <_write_r>

080146d6 <__sseek>:
 80146d6:	b510      	push	{r4, lr}
 80146d8:	460c      	mov	r4, r1
 80146da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146de:	f000 f855 	bl	801478c <_lseek_r>
 80146e2:	1c43      	adds	r3, r0, #1
 80146e4:	89a3      	ldrh	r3, [r4, #12]
 80146e6:	bf15      	itete	ne
 80146e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80146ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80146ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80146f2:	81a3      	strheq	r3, [r4, #12]
 80146f4:	bf18      	it	ne
 80146f6:	81a3      	strhne	r3, [r4, #12]
 80146f8:	bd10      	pop	{r4, pc}

080146fa <__sclose>:
 80146fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80146fe:	f000 b813 	b.w	8014728 <_close_r>
	...

08014704 <_write_r>:
 8014704:	b538      	push	{r3, r4, r5, lr}
 8014706:	4d07      	ldr	r5, [pc, #28]	; (8014724 <_write_r+0x20>)
 8014708:	4604      	mov	r4, r0
 801470a:	4608      	mov	r0, r1
 801470c:	4611      	mov	r1, r2
 801470e:	2200      	movs	r2, #0
 8014710:	602a      	str	r2, [r5, #0]
 8014712:	461a      	mov	r2, r3
 8014714:	f7ed fb29 	bl	8001d6a <_write>
 8014718:	1c43      	adds	r3, r0, #1
 801471a:	d102      	bne.n	8014722 <_write_r+0x1e>
 801471c:	682b      	ldr	r3, [r5, #0]
 801471e:	b103      	cbz	r3, 8014722 <_write_r+0x1e>
 8014720:	6023      	str	r3, [r4, #0]
 8014722:	bd38      	pop	{r3, r4, r5, pc}
 8014724:	20002760 	.word	0x20002760

08014728 <_close_r>:
 8014728:	b538      	push	{r3, r4, r5, lr}
 801472a:	4d06      	ldr	r5, [pc, #24]	; (8014744 <_close_r+0x1c>)
 801472c:	2300      	movs	r3, #0
 801472e:	4604      	mov	r4, r0
 8014730:	4608      	mov	r0, r1
 8014732:	602b      	str	r3, [r5, #0]
 8014734:	f7ed fb35 	bl	8001da2 <_close>
 8014738:	1c43      	adds	r3, r0, #1
 801473a:	d102      	bne.n	8014742 <_close_r+0x1a>
 801473c:	682b      	ldr	r3, [r5, #0]
 801473e:	b103      	cbz	r3, 8014742 <_close_r+0x1a>
 8014740:	6023      	str	r3, [r4, #0]
 8014742:	bd38      	pop	{r3, r4, r5, pc}
 8014744:	20002760 	.word	0x20002760

08014748 <_fstat_r>:
 8014748:	b538      	push	{r3, r4, r5, lr}
 801474a:	4d07      	ldr	r5, [pc, #28]	; (8014768 <_fstat_r+0x20>)
 801474c:	2300      	movs	r3, #0
 801474e:	4604      	mov	r4, r0
 8014750:	4608      	mov	r0, r1
 8014752:	4611      	mov	r1, r2
 8014754:	602b      	str	r3, [r5, #0]
 8014756:	f7ed fb30 	bl	8001dba <_fstat>
 801475a:	1c43      	adds	r3, r0, #1
 801475c:	d102      	bne.n	8014764 <_fstat_r+0x1c>
 801475e:	682b      	ldr	r3, [r5, #0]
 8014760:	b103      	cbz	r3, 8014764 <_fstat_r+0x1c>
 8014762:	6023      	str	r3, [r4, #0]
 8014764:	bd38      	pop	{r3, r4, r5, pc}
 8014766:	bf00      	nop
 8014768:	20002760 	.word	0x20002760

0801476c <_isatty_r>:
 801476c:	b538      	push	{r3, r4, r5, lr}
 801476e:	4d06      	ldr	r5, [pc, #24]	; (8014788 <_isatty_r+0x1c>)
 8014770:	2300      	movs	r3, #0
 8014772:	4604      	mov	r4, r0
 8014774:	4608      	mov	r0, r1
 8014776:	602b      	str	r3, [r5, #0]
 8014778:	f7ed fb2f 	bl	8001dda <_isatty>
 801477c:	1c43      	adds	r3, r0, #1
 801477e:	d102      	bne.n	8014786 <_isatty_r+0x1a>
 8014780:	682b      	ldr	r3, [r5, #0]
 8014782:	b103      	cbz	r3, 8014786 <_isatty_r+0x1a>
 8014784:	6023      	str	r3, [r4, #0]
 8014786:	bd38      	pop	{r3, r4, r5, pc}
 8014788:	20002760 	.word	0x20002760

0801478c <_lseek_r>:
 801478c:	b538      	push	{r3, r4, r5, lr}
 801478e:	4d07      	ldr	r5, [pc, #28]	; (80147ac <_lseek_r+0x20>)
 8014790:	4604      	mov	r4, r0
 8014792:	4608      	mov	r0, r1
 8014794:	4611      	mov	r1, r2
 8014796:	2200      	movs	r2, #0
 8014798:	602a      	str	r2, [r5, #0]
 801479a:	461a      	mov	r2, r3
 801479c:	f7ed fb28 	bl	8001df0 <_lseek>
 80147a0:	1c43      	adds	r3, r0, #1
 80147a2:	d102      	bne.n	80147aa <_lseek_r+0x1e>
 80147a4:	682b      	ldr	r3, [r5, #0]
 80147a6:	b103      	cbz	r3, 80147aa <_lseek_r+0x1e>
 80147a8:	6023      	str	r3, [r4, #0]
 80147aa:	bd38      	pop	{r3, r4, r5, pc}
 80147ac:	20002760 	.word	0x20002760

080147b0 <_read_r>:
 80147b0:	b538      	push	{r3, r4, r5, lr}
 80147b2:	4d07      	ldr	r5, [pc, #28]	; (80147d0 <_read_r+0x20>)
 80147b4:	4604      	mov	r4, r0
 80147b6:	4608      	mov	r0, r1
 80147b8:	4611      	mov	r1, r2
 80147ba:	2200      	movs	r2, #0
 80147bc:	602a      	str	r2, [r5, #0]
 80147be:	461a      	mov	r2, r3
 80147c0:	f7ed fab6 	bl	8001d30 <_read>
 80147c4:	1c43      	adds	r3, r0, #1
 80147c6:	d102      	bne.n	80147ce <_read_r+0x1e>
 80147c8:	682b      	ldr	r3, [r5, #0]
 80147ca:	b103      	cbz	r3, 80147ce <_read_r+0x1e>
 80147cc:	6023      	str	r3, [r4, #0]
 80147ce:	bd38      	pop	{r3, r4, r5, pc}
 80147d0:	20002760 	.word	0x20002760

080147d4 <_init>:
 80147d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147d6:	bf00      	nop
 80147d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147da:	bc08      	pop	{r3}
 80147dc:	469e      	mov	lr, r3
 80147de:	4770      	bx	lr

080147e0 <_fini>:
 80147e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80147e2:	bf00      	nop
 80147e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80147e6:	bc08      	pop	{r3}
 80147e8:	469e      	mov	lr, r3
 80147ea:	4770      	bx	lr
