
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000150f4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  080152c8  080152c8  000252c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08015724  08015724  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  08015724  08015724  00025724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801572c  0801572c  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801572c  0801572c  0002572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08015730  08015730  00025730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  08015734  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000036d8  200002fc  08015a30  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200039d4  08015a30  000339d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ff7c  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006ab5  00000000  00000000  000602a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002480  00000000  00000000  00066d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002198  00000000  00000000  000691e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000b85c  00000000  00000000  0006b378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003292d  00000000  00000000  00076bd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010721b  00000000  00000000  000a9501  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001b071c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a830  00000000  00000000  001b076c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080152ac 	.word	0x080152ac

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	080152ac 	.word	0x080152ac

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000ef0:	f001 f893 	bl	800201a <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ef4:	f000 f834 	bl	8000f60 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ef8:	f000 fa84 	bl	8001404 <MX_GPIO_Init>
	MX_DMA_Init();
 8000efc:	f000 f9f2 	bl	80012e4 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8000f00:	f000 f8fc 	bl	80010fc <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000f04:	f00b fdba 	bl	800ca7c <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000f08:	f010 fc0e 	bl	8011728 <MX_USB_DEVICE_Init>
	MX_USB_HOST_Init();
 8000f0c:	f011 f968 	bl	80121e0 <MX_USB_HOST_Init>
	MX_USART1_UART_Init();
 8000f10:	f000 f9b8 	bl	8001284 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000f14:	f000 f914 	bl	8001140 <MX_TIM1_Init>
	MX_TIM11_Init();
 8000f18:	f000 f966 	bl	80011e8 <MX_TIM11_Init>
	MX_ADC1_Init();
 8000f1c:	f000 f88e 	bl	800103c <MX_ADC1_Init>
	MX_FMC_Init();
 8000f20:	f000 fa0e 	bl	8001340 <MX_FMC_Init>
	/* USER CODE BEGIN 2 */

	// hardware state test
	MX_SystemStartup(&system_state);
 8000f24:	480d      	ldr	r0, [pc, #52]	; (8000f5c <main+0x70>)
 8000f26:	f000 fb9f 	bl	8001668 <MX_SystemStartup>

	// required system functions
	// check psram
	if(!system_state.sram_working)
 8000f2a:	4b0c      	ldr	r3, [pc, #48]	; (8000f5c <main+0x70>)
 8000f2c:	785b      	ldrb	r3, [r3, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d104      	bne.n	8000f3c <main+0x50>
	{
		system_state.error = SYS_ERROR_SRAM_FAIL;
 8000f32:	4b0a      	ldr	r3, [pc, #40]	; (8000f5c <main+0x70>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	711a      	strb	r2, [r3, #4]
		Error_Handler();
 8000f38:	f000 fbec 	bl	8001714 <Error_Handler>
	}

	// check sdio
	if(!system_state.sdio_working)
 8000f3c:	4b07      	ldr	r3, [pc, #28]	; (8000f5c <main+0x70>)
 8000f3e:	789b      	ldrb	r3, [r3, #2]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d104      	bne.n	8000f4e <main+0x62>
	{
		system_state.error = SYS_ERROR_SDIO_FAIL;
 8000f44:	4b05      	ldr	r3, [pc, #20]	; (8000f5c <main+0x70>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	711a      	strb	r2, [r3, #4]
		Error_Handler();
 8000f4a:	f000 fbe3 	bl	8001714 <Error_Handler>
	//	{
	//		system_state.error = SYS_ERROR_WIFI_FAIL;
	//		Error_Handler();
	//	}

	HAL_Delay(1000);
 8000f4e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f52:	f001 f8bf 	bl	80020d4 <HAL_Delay>
	/* USER CODE BEGIN WHILE */
	while (1)
	{

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000f56:	f011 f969 	bl	801222c <MX_USB_HOST_Process>
 8000f5a:	e7fc      	b.n	8000f56 <main+0x6a>
 8000f5c:	20000670 	.word	0x20000670

08000f60 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b094      	sub	sp, #80	; 0x50
 8000f64:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f66:	f107 0320 	add.w	r3, r7, #32
 8000f6a:	2230      	movs	r2, #48	; 0x30
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f011 fc88 	bl	8012884 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2200      	movs	r2, #0
 8000f7a:	601a      	str	r2, [r3, #0]
 8000f7c:	605a      	str	r2, [r3, #4]
 8000f7e:	609a      	str	r2, [r3, #8]
 8000f80:	60da      	str	r2, [r3, #12]
 8000f82:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000f84:	f005 f944 	bl	8006210 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000f88:	4b2a      	ldr	r3, [pc, #168]	; (8001034 <SystemClock_Config+0xd4>)
 8000f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8c:	4a29      	ldr	r2, [pc, #164]	; (8001034 <SystemClock_Config+0xd4>)
 8000f8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f92:	6413      	str	r3, [r2, #64]	; 0x40
 8000f94:	4b27      	ldr	r3, [pc, #156]	; (8001034 <SystemClock_Config+0xd4>)
 8000f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	60bb      	str	r3, [r7, #8]
 8000f9e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fa0:	4b25      	ldr	r3, [pc, #148]	; (8001038 <SystemClock_Config+0xd8>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a24      	ldr	r2, [pc, #144]	; (8001038 <SystemClock_Config+0xd8>)
 8000fa6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	4b22      	ldr	r3, [pc, #136]	; (8001038 <SystemClock_Config+0xd8>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fbc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fc0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fca:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000fcc:	2308      	movs	r3, #8
 8000fce:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 8000fd0:	23d8      	movs	r3, #216	; 0xd8
 8000fd2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8000fd8:	2309      	movs	r3, #9
 8000fda:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fdc:	f107 0320 	add.w	r3, r7, #32
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f005 f975 	bl	80062d0 <HAL_RCC_OscConfig>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <SystemClock_Config+0x90>
	{
		Error_Handler();
 8000fec:	f000 fb92 	bl	8001714 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff0:	f005 f91e 	bl	8006230 <HAL_PWREx_EnableOverDrive>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8000ffa:	f000 fb8b 	bl	8001714 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffe:	230f      	movs	r3, #15
 8001000:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	2302      	movs	r3, #2
 8001004:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800100a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800100e:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001010:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001014:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	2107      	movs	r1, #7
 800101c:	4618      	mov	r0, r3
 800101e:	f005 fbfb 	bl	8006818 <HAL_RCC_ClockConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0xcc>
	{
		Error_Handler();
 8001028:	f000 fb74 	bl	8001714 <Error_Handler>
	}
}
 800102c:	bf00      	nop
 800102e:	3750      	adds	r7, #80	; 0x50
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40023800 	.word	0x40023800
 8001038:	40007000 	.word	0x40007000

0800103c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001042:	463b      	mov	r3, r7
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 800104e:	4b28      	ldr	r3, [pc, #160]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001050:	4a28      	ldr	r2, [pc, #160]	; (80010f4 <MX_ADC1_Init+0xb8>)
 8001052:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001054:	4b26      	ldr	r3, [pc, #152]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001056:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800105a:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800105c:	4b24      	ldr	r3, [pc, #144]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800105e:	2200      	movs	r2, #0
 8001060:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001062:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001064:	2201      	movs	r2, #1
 8001066:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8001068:	4b21      	ldr	r3, [pc, #132]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800106a:	2201      	movs	r2, #1
 800106c:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800106e:	4b20      	ldr	r3, [pc, #128]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001070:	2200      	movs	r2, #0
 8001072:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001076:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001078:	2200      	movs	r2, #0
 800107a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800107c:	4b1c      	ldr	r3, [pc, #112]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800107e:	4a1e      	ldr	r2, [pc, #120]	; (80010f8 <MX_ADC1_Init+0xbc>)
 8001080:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001082:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001084:	2200      	movs	r2, #0
 8001086:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 8001088:	4b19      	ldr	r3, [pc, #100]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800108a:	2202      	movs	r2, #2
 800108c:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001090:	2201      	movs	r2, #1
 8001092:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_ADC1_Init+0xb4>)
 8001098:	2201      	movs	r2, #1
 800109a:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800109c:	4814      	ldr	r0, [pc, #80]	; (80010f0 <MX_ADC1_Init+0xb4>)
 800109e:	f001 f83d 	bl	800211c <HAL_ADC_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 80010a8:	f000 fb34 	bl	8001714 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80010b0:	2301      	movs	r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80010b4:	2306      	movs	r3, #6
 80010b6:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b8:	463b      	mov	r3, r7
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_ADC1_Init+0xb4>)
 80010be:	f001 f871 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 80010c8:	f000 fb24 	bl	8001714 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80010cc:	2302      	movs	r3, #2
 80010ce:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80010d0:	2302      	movs	r3, #2
 80010d2:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_ADC1_Init+0xb4>)
 80010da:	f001 f863 	bl	80021a4 <HAL_ADC_ConfigChannel>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 80010e4:	f000 fb16 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000318 	.word	0x20000318
 80010f4:	40012000 	.word	0x40012000
 80010f8:	0f000001 	.word	0x0f000001

080010fc <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 8001100:	4b0d      	ldr	r3, [pc, #52]	; (8001138 <MX_SDMMC1_SD_Init+0x3c>)
 8001102:	4a0e      	ldr	r2, [pc, #56]	; (800113c <MX_SDMMC1_SD_Init+0x40>)
 8001104:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_SDMMC1_SD_Init+0x3c>)
 8001108:	2200      	movs	r2, #0
 800110a:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 800110c:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <MX_SDMMC1_SD_Init+0x3c>)
 800110e:	2200      	movs	r2, #0
 8001110:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8001112:	4b09      	ldr	r3, [pc, #36]	; (8001138 <MX_SDMMC1_SD_Init+0x3c>)
 8001114:	2200      	movs	r2, #0
 8001116:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001118:	4b07      	ldr	r3, [pc, #28]	; (8001138 <MX_SDMMC1_SD_Init+0x3c>)
 800111a:	2200      	movs	r2, #0
 800111c:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800111e:	4b06      	ldr	r3, [pc, #24]	; (8001138 <MX_SDMMC1_SD_Init+0x3c>)
 8001120:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001124:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 4;
 8001126:	4b04      	ldr	r3, [pc, #16]	; (8001138 <MX_SDMMC1_SD_Init+0x3c>)
 8001128:	2204      	movs	r2, #4
 800112a:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 800112c:	4802      	ldr	r0, [pc, #8]	; (8001138 <MX_SDMMC1_SD_Init+0x3c>)
 800112e:	f006 f94f 	bl	80073d0 <HAL_SD_Init>
	/* USER CODE END SDMMC1_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200003c0 	.word	0x200003c0
 800113c:	40012c00 	.word	0x40012c00

08001140 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b088      	sub	sp, #32
 8001144:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001146:	f107 0310 	add.w	r3, r7, #16
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001154:	1d3b      	adds	r3, r7, #4
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	605a      	str	r2, [r3, #4]
 800115c:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800115e:	4b20      	ldr	r3, [pc, #128]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001160:	4a20      	ldr	r2, [pc, #128]	; (80011e4 <MX_TIM1_Init+0xa4>)
 8001162:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001166:	2200      	movs	r2, #0
 8001168:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800116a:	4b1d      	ldr	r3, [pc, #116]	; (80011e0 <MX_TIM1_Init+0xa0>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 8001170:	4b1b      	ldr	r3, [pc, #108]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001172:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001176:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001178:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <MX_TIM1_Init+0xa0>)
 800117a:	2200      	movs	r2, #0
 800117c:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800117e:	4b18      	ldr	r3, [pc, #96]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001180:	2200      	movs	r2, #0
 8001182:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b16      	ldr	r3, [pc, #88]	; (80011e0 <MX_TIM1_Init+0xa0>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800118a:	4815      	ldr	r0, [pc, #84]	; (80011e0 <MX_TIM1_Init+0xa0>)
 800118c:	f007 f8f8 	bl	8008380 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 8001196:	f000 fabd 	bl	8001714 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800119a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800119e:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	4619      	mov	r1, r3
 80011a6:	480e      	ldr	r0, [pc, #56]	; (80011e0 <MX_TIM1_Init+0xa0>)
 80011a8:	f007 fab6 	bl	8008718 <HAL_TIM_ConfigClockSource>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 80011b2:	f000 faaf 	bl	8001714 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b6:	2300      	movs	r3, #0
 80011b8:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011be:	2300      	movs	r3, #0
 80011c0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011c2:	1d3b      	adds	r3, r7, #4
 80011c4:	4619      	mov	r1, r3
 80011c6:	4806      	ldr	r0, [pc, #24]	; (80011e0 <MX_TIM1_Init+0xa0>)
 80011c8:	f007 ff08 	bl	8008fdc <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 80011d2:	f000 fa9f 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	3720      	adds	r7, #32
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	20000504 	.word	0x20000504
 80011e4:	40010000 	.word	0x40010000

080011e8 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b088      	sub	sp, #32
 80011ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 80011ee:	1d3b      	adds	r3, r7, #4
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
 80011fa:	611a      	str	r2, [r3, #16]
 80011fc:	615a      	str	r2, [r3, #20]
 80011fe:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 8001200:	4b1e      	ldr	r3, [pc, #120]	; (800127c <MX_TIM11_Init+0x94>)
 8001202:	4a1f      	ldr	r2, [pc, #124]	; (8001280 <MX_TIM11_Init+0x98>)
 8001204:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 8001206:	4b1d      	ldr	r3, [pc, #116]	; (800127c <MX_TIM11_Init+0x94>)
 8001208:	2200      	movs	r2, #0
 800120a:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120c:	4b1b      	ldr	r3, [pc, #108]	; (800127c <MX_TIM11_Init+0x94>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 8001212:	4b1a      	ldr	r3, [pc, #104]	; (800127c <MX_TIM11_Init+0x94>)
 8001214:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001218:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800121a:	4b18      	ldr	r3, [pc, #96]	; (800127c <MX_TIM11_Init+0x94>)
 800121c:	2200      	movs	r2, #0
 800121e:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001220:	4b16      	ldr	r3, [pc, #88]	; (800127c <MX_TIM11_Init+0x94>)
 8001222:	2200      	movs	r2, #0
 8001224:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001226:	4815      	ldr	r0, [pc, #84]	; (800127c <MX_TIM11_Init+0x94>)
 8001228:	f007 f8aa 	bl	8008380 <HAL_TIM_Base_Init>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d001      	beq.n	8001236 <MX_TIM11_Init+0x4e>
	{
		Error_Handler();
 8001232:	f000 fa6f 	bl	8001714 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001236:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_TIM11_Init+0x94>)
 8001238:	f007 f8f9 	bl	800842e <HAL_TIM_PWM_Init>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM11_Init+0x5e>
	{
		Error_Handler();
 8001242:	f000 fa67 	bl	8001714 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001246:	2360      	movs	r3, #96	; 0x60
 8001248:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800124a:	2300      	movs	r3, #0
 800124c:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800124e:	2300      	movs	r3, #0
 8001250:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	1d3b      	adds	r3, r7, #4
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4807      	ldr	r0, [pc, #28]	; (800127c <MX_TIM11_Init+0x94>)
 800125e:	f007 f947 	bl	80084f0 <HAL_TIM_PWM_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM11_Init+0x84>
	{
		Error_Handler();
 8001268:	f000 fa54 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 800126c:	4803      	ldr	r0, [pc, #12]	; (800127c <MX_TIM11_Init+0x94>)
 800126e:	f000 fc69 	bl	8001b44 <HAL_TIM_MspPostInit>

}
 8001272:	bf00      	nop
 8001274:	3720      	adds	r7, #32
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	20000550 	.word	0x20000550
 8001280:	40014800 	.word	0x40014800

08001284 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <MX_USART1_UART_Init+0x58>)
 800128a:	4a15      	ldr	r2, [pc, #84]	; (80012e0 <MX_USART1_UART_Init+0x5c>)
 800128c:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800128e:	4b13      	ldr	r3, [pc, #76]	; (80012dc <MX_USART1_UART_Init+0x58>)
 8001290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001294:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001296:	4b11      	ldr	r3, [pc, #68]	; (80012dc <MX_USART1_UART_Init+0x58>)
 8001298:	2200      	movs	r2, #0
 800129a:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 800129c:	4b0f      	ldr	r3, [pc, #60]	; (80012dc <MX_USART1_UART_Init+0x58>)
 800129e:	2200      	movs	r2, #0
 80012a0:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80012a2:	4b0e      	ldr	r3, [pc, #56]	; (80012dc <MX_USART1_UART_Init+0x58>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 80012a8:	4b0c      	ldr	r3, [pc, #48]	; (80012dc <MX_USART1_UART_Init+0x58>)
 80012aa:	220c      	movs	r2, #12
 80012ac:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ae:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <MX_USART1_UART_Init+0x58>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012b4:	4b09      	ldr	r3, [pc, #36]	; (80012dc <MX_USART1_UART_Init+0x58>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ba:	4b08      	ldr	r3, [pc, #32]	; (80012dc <MX_USART1_UART_Init+0x58>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012c0:	4b06      	ldr	r3, [pc, #24]	; (80012dc <MX_USART1_UART_Init+0x58>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 80012c6:	4805      	ldr	r0, [pc, #20]	; (80012dc <MX_USART1_UART_Init+0x58>)
 80012c8:	f007 ff16 	bl	80090f8 <HAL_UART_Init>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 80012d2:	f000 fa1f 	bl	8001714 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	2000059c 	.word	0x2000059c
 80012e0:	40011000 	.word	0x40011000

080012e4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b082      	sub	sp, #8
 80012e8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80012ea:	4b14      	ldr	r3, [pc, #80]	; (800133c <MX_DMA_Init+0x58>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	4a13      	ldr	r2, [pc, #76]	; (800133c <MX_DMA_Init+0x58>)
 80012f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012f4:	6313      	str	r3, [r2, #48]	; 0x30
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_DMA_Init+0x58>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001302:	2200      	movs	r2, #0
 8001304:	2100      	movs	r1, #0
 8001306:	2038      	movs	r0, #56	; 0x38
 8001308:	f001 fa77 	bl	80027fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800130c:	2038      	movs	r0, #56	; 0x38
 800130e:	f001 fa90 	bl	8002832 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 8001312:	2200      	movs	r2, #0
 8001314:	2100      	movs	r1, #0
 8001316:	203b      	movs	r0, #59	; 0x3b
 8001318:	f001 fa6f 	bl	80027fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800131c:	203b      	movs	r0, #59	; 0x3b
 800131e:	f001 fa88 	bl	8002832 <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 8001322:	2200      	movs	r2, #0
 8001324:	2100      	movs	r1, #0
 8001326:	2045      	movs	r0, #69	; 0x45
 8001328:	f001 fa67 	bl	80027fa <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 800132c:	2045      	movs	r0, #69	; 0x45
 800132e:	f001 fa80 	bl	8002832 <HAL_NVIC_EnableIRQ>

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	40023800 	.word	0x40023800

08001340 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b088      	sub	sp, #32
 8001344:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
 8001352:	611a      	str	r2, [r3, #16]
 8001354:	615a      	str	r2, [r3, #20]
 8001356:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001358:	4b28      	ldr	r3, [pc, #160]	; (80013fc <MX_FMC_Init+0xbc>)
 800135a:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800135e:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001360:	4b26      	ldr	r3, [pc, #152]	; (80013fc <MX_FMC_Init+0xbc>)
 8001362:	4a27      	ldr	r2, [pc, #156]	; (8001400 <MX_FMC_Init+0xc0>)
 8001364:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001366:	4b25      	ldr	r3, [pc, #148]	; (80013fc <MX_FMC_Init+0xbc>)
 8001368:	2200      	movs	r2, #0
 800136a:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 800136c:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_FMC_Init+0xbc>)
 800136e:	2200      	movs	r2, #0
 8001370:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001372:	4b22      	ldr	r3, [pc, #136]	; (80013fc <MX_FMC_Init+0xbc>)
 8001374:	2204      	movs	r2, #4
 8001376:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001378:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_FMC_Init+0xbc>)
 800137a:	2210      	movs	r2, #16
 800137c:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 800137e:	4b1f      	ldr	r3, [pc, #124]	; (80013fc <MX_FMC_Init+0xbc>)
 8001380:	2200      	movs	r2, #0
 8001382:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001384:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_FMC_Init+0xbc>)
 8001386:	2200      	movs	r2, #0
 8001388:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 800138a:	4b1c      	ldr	r3, [pc, #112]	; (80013fc <MX_FMC_Init+0xbc>)
 800138c:	2200      	movs	r2, #0
 800138e:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8001390:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_FMC_Init+0xbc>)
 8001392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001396:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_FMC_Init+0xbc>)
 800139a:	2200      	movs	r2, #0
 800139c:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 800139e:	4b17      	ldr	r3, [pc, #92]	; (80013fc <MX_FMC_Init+0xbc>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 80013a4:	4b15      	ldr	r3, [pc, #84]	; (80013fc <MX_FMC_Init+0xbc>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 80013aa:	4b14      	ldr	r3, [pc, #80]	; (80013fc <MX_FMC_Init+0xbc>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 80013b0:	4b12      	ldr	r3, [pc, #72]	; (80013fc <MX_FMC_Init+0xbc>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 80013b6:	4b11      	ldr	r3, [pc, #68]	; (80013fc <MX_FMC_Init+0xbc>)
 80013b8:	2200      	movs	r2, #0
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 80013bc:	4b0f      	ldr	r3, [pc, #60]	; (80013fc <MX_FMC_Init+0xbc>)
 80013be:	2200      	movs	r2, #0
 80013c0:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 5;
 80013c2:	2305      	movs	r3, #5
 80013c4:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 80013c6:	230f      	movs	r3, #15
 80013c8:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 8;
 80013ca:	2308      	movs	r3, #8
 80013cc:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 1;
 80013ce:	2301      	movs	r3, #1
 80013d0:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 80013d2:	2310      	movs	r3, #16
 80013d4:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 80013d6:	2311      	movs	r3, #17
 80013d8:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 80013da:	2300      	movs	r3, #0
 80013dc:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80013de:	1d3b      	adds	r3, r7, #4
 80013e0:	2200      	movs	r2, #0
 80013e2:	4619      	mov	r1, r3
 80013e4:	4805      	ldr	r0, [pc, #20]	; (80013fc <MX_FMC_Init+0xbc>)
 80013e6:	f006 ff83 	bl	80082f0 <HAL_SRAM_Init>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_FMC_Init+0xb4>
	{
		Error_Handler( );
 80013f0:	f000 f990 	bl	8001714 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 80013f4:	bf00      	nop
 80013f6:	3720      	adds	r7, #32
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	20000624 	.word	0x20000624
 8001400:	a0000104 	.word	0xa0000104

08001404 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08e      	sub	sp, #56	; 0x38
 8001408:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800140e:	2200      	movs	r2, #0
 8001410:	601a      	str	r2, [r3, #0]
 8001412:	605a      	str	r2, [r3, #4]
 8001414:	609a      	str	r2, [r3, #8]
 8001416:	60da      	str	r2, [r3, #12]
 8001418:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 800141a:	4b8b      	ldr	r3, [pc, #556]	; (8001648 <MX_GPIO_Init+0x244>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a8a      	ldr	r2, [pc, #552]	; (8001648 <MX_GPIO_Init+0x244>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b88      	ldr	r3, [pc, #544]	; (8001648 <MX_GPIO_Init+0x244>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	623b      	str	r3, [r7, #32]
 8001430:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001432:	4b85      	ldr	r3, [pc, #532]	; (8001648 <MX_GPIO_Init+0x244>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a84      	ldr	r2, [pc, #528]	; (8001648 <MX_GPIO_Init+0x244>)
 8001438:	f043 0302 	orr.w	r3, r3, #2
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b82      	ldr	r3, [pc, #520]	; (8001648 <MX_GPIO_Init+0x244>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0302 	and.w	r3, r3, #2
 8001446:	61fb      	str	r3, [r7, #28]
 8001448:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 800144a:	4b7f      	ldr	r3, [pc, #508]	; (8001648 <MX_GPIO_Init+0x244>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	4a7e      	ldr	r2, [pc, #504]	; (8001648 <MX_GPIO_Init+0x244>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001454:	6313      	str	r3, [r2, #48]	; 0x30
 8001456:	4b7c      	ldr	r3, [pc, #496]	; (8001648 <MX_GPIO_Init+0x244>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800145e:	61bb      	str	r3, [r7, #24]
 8001460:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001462:	4b79      	ldr	r3, [pc, #484]	; (8001648 <MX_GPIO_Init+0x244>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	4a78      	ldr	r2, [pc, #480]	; (8001648 <MX_GPIO_Init+0x244>)
 8001468:	f043 0308 	orr.w	r3, r3, #8
 800146c:	6313      	str	r3, [r2, #48]	; 0x30
 800146e:	4b76      	ldr	r3, [pc, #472]	; (8001648 <MX_GPIO_Init+0x244>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001472:	f003 0308 	and.w	r3, r3, #8
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800147a:	4b73      	ldr	r3, [pc, #460]	; (8001648 <MX_GPIO_Init+0x244>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a72      	ldr	r2, [pc, #456]	; (8001648 <MX_GPIO_Init+0x244>)
 8001480:	f043 0304 	orr.w	r3, r3, #4
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b70      	ldr	r3, [pc, #448]	; (8001648 <MX_GPIO_Init+0x244>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	4b6d      	ldr	r3, [pc, #436]	; (8001648 <MX_GPIO_Init+0x244>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	4a6c      	ldr	r2, [pc, #432]	; (8001648 <MX_GPIO_Init+0x244>)
 8001498:	f043 0301 	orr.w	r3, r3, #1
 800149c:	6313      	str	r3, [r2, #48]	; 0x30
 800149e:	4b6a      	ldr	r3, [pc, #424]	; (8001648 <MX_GPIO_Init+0x244>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	60fb      	str	r3, [r7, #12]
 80014a8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 80014aa:	4b67      	ldr	r3, [pc, #412]	; (8001648 <MX_GPIO_Init+0x244>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a66      	ldr	r2, [pc, #408]	; (8001648 <MX_GPIO_Init+0x244>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b64      	ldr	r3, [pc, #400]	; (8001648 <MX_GPIO_Init+0x244>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 80014c2:	4b61      	ldr	r3, [pc, #388]	; (8001648 <MX_GPIO_Init+0x244>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	4a60      	ldr	r2, [pc, #384]	; (8001648 <MX_GPIO_Init+0x244>)
 80014c8:	f043 0320 	orr.w	r3, r3, #32
 80014cc:	6313      	str	r3, [r2, #48]	; 0x30
 80014ce:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <MX_GPIO_Init+0x244>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	f003 0320 	and.w	r3, r3, #32
 80014d6:	607b      	str	r3, [r7, #4]
 80014d8:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80014da:	4b5b      	ldr	r3, [pc, #364]	; (8001648 <MX_GPIO_Init+0x244>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	4a5a      	ldr	r2, [pc, #360]	; (8001648 <MX_GPIO_Init+0x244>)
 80014e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014e4:	6313      	str	r3, [r2, #48]	; 0x30
 80014e6:	4b58      	ldr	r3, [pc, #352]	; (8001648 <MX_GPIO_Init+0x244>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80014f8:	4854      	ldr	r0, [pc, #336]	; (800164c <MX_GPIO_Init+0x248>)
 80014fa:	f001 fe63 	bl	80031c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 80014fe:	2200      	movs	r2, #0
 8001500:	2104      	movs	r1, #4
 8001502:	4853      	ldr	r0, [pc, #332]	; (8001650 <MX_GPIO_Init+0x24c>)
 8001504:	f001 fe5e 	bl	80031c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001508:	2200      	movs	r2, #0
 800150a:	2140      	movs	r1, #64	; 0x40
 800150c:	4851      	ldr	r0, [pc, #324]	; (8001654 <MX_GPIO_Init+0x250>)
 800150e:	f001 fe59 	bl	80031c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 8001512:	2200      	movs	r2, #0
 8001514:	21c0      	movs	r1, #192	; 0xc0
 8001516:	4850      	ldr	r0, [pc, #320]	; (8001658 <MX_GPIO_Init+0x254>)
 8001518:	f001 fe54 	bl	80031c4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : WIFI_ENABLE_Pin */
	GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 800151c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001520:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152a:	2300      	movs	r3, #0
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	4845      	ldr	r0, [pc, #276]	; (800164c <MX_GPIO_Init+0x248>)
 8001536:	f001 fc81 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 800153a:	f643 4333 	movw	r3, #15411	; 0x3c33
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001548:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154c:	4619      	mov	r1, r3
 800154e:	483f      	ldr	r0, [pc, #252]	; (800164c <MX_GPIO_Init+0x248>)
 8001550:	f001 fc74 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 8001554:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800155a:	2300      	movs	r3, #0
 800155c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001566:	4619      	mov	r1, r3
 8001568:	483b      	ldr	r0, [pc, #236]	; (8001658 <MX_GPIO_Init+0x254>)
 800156a:	f001 fc67 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
	GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 800156e:	f248 63e8 	movw	r3, #34536	; 0x86e8
 8001572:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001574:	2300      	movs	r3, #0
 8001576:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800157c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001580:	4619      	mov	r1, r3
 8001582:	4836      	ldr	r0, [pc, #216]	; (800165c <MX_GPIO_Init+0x258>)
 8001584:	f001 fc5a 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001588:	2340      	movs	r3, #64	; 0x40
 800158a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800158c:	2300      	movs	r3, #0
 800158e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001598:	4619      	mov	r1, r3
 800159a:	4831      	ldr	r0, [pc, #196]	; (8001660 <MX_GPIO_Init+0x25c>)
 800159c:	f001 fc4e 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI1 PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 80015a0:	230b      	movs	r3, #11
 80015a2:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015a4:	2300      	movs	r3, #0
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80015ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015b0:	4619      	mov	r1, r3
 80015b2:	4827      	ldr	r0, [pc, #156]	; (8001650 <MX_GPIO_Init+0x24c>)
 80015b4:	f001 fc42 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_HOST_VBUF_Pin */
	GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 80015b8:	2304      	movs	r3, #4
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015bc:	2301      	movs	r3, #1
 80015be:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c0:	2300      	movs	r3, #0
 80015c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c4:	2300      	movs	r3, #0
 80015c6:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	4820      	ldr	r0, [pc, #128]	; (8001650 <MX_GPIO_Init+0x24c>)
 80015d0:	f001 fc34 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 80015d4:	23a0      	movs	r3, #160	; 0xa0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d8:	2300      	movs	r3, #0
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015e4:	4619      	mov	r1, r3
 80015e6:	481b      	ldr	r0, [pc, #108]	; (8001654 <MX_GPIO_Init+0x250>)
 80015e8:	f001 fc28 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 80015ec:	2340      	movs	r3, #64	; 0x40
 80015ee:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f8:	2300      	movs	r3, #0
 80015fa:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 80015fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001600:	4619      	mov	r1, r3
 8001602:	4814      	ldr	r0, [pc, #80]	; (8001654 <MX_GPIO_Init+0x250>)
 8001604:	f001 fc1a 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001608:	23c0      	movs	r3, #192	; 0xc0
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800160c:	2301      	movs	r3, #1
 800160e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001618:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800161c:	4619      	mov	r1, r3
 800161e:	480e      	ldr	r0, [pc, #56]	; (8001658 <MX_GPIO_Init+0x254>)
 8001620:	f001 fc0c 	bl	8002e3c <HAL_GPIO_Init>

	/*Configure GPIO pin : PF11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001624:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001628:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800162a:	2300      	movs	r3, #0
 800162c:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001632:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001636:	4619      	mov	r1, r3
 8001638:	480a      	ldr	r0, [pc, #40]	; (8001664 <MX_GPIO_Init+0x260>)
 800163a:	f001 fbff 	bl	8002e3c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800163e:	bf00      	nop
 8001640:	3738      	adds	r7, #56	; 0x38
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40020400 	.word	0x40020400
 8001650:	40022000 	.word	0x40022000
 8001654:	40020800 	.word	0x40020800
 8001658:	40021800 	.word	0x40021800
 800165c:	40020000 	.word	0x40020000
 8001660:	40020c00 	.word	0x40020c00
 8001664:	40021400 	.word	0x40021400

08001668 <MX_SystemStartup>:

/* USER CODE BEGIN 4 */
static void MX_SystemStartup(System_t *state)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b086      	sub	sp, #24
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
	// init states
	state->sram_working = 1;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2201      	movs	r2, #1
 8001674:	705a      	strb	r2, [r3, #1]
	state->sdio_working = 1;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2201      	movs	r2, #1
 800167a:	709a      	strb	r2, [r3, #2]
	state->wifi_working = 1;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	70da      	strb	r2, [r3, #3]

	// test psram
	uint32_t *ptr = SRAM_ADDRESS + 1000000ul;
 8001682:	4b1f      	ldr	r3, [pc, #124]	; (8001700 <MX_SystemStartup+0x98>)
 8001684:	60fb      	str	r3, [r7, #12]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e00a      	b.n	80016a2 <MX_SystemStartup+0x3a>
		*(ptr + byte) = 0xFFFF & (byte >> 4);
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	0919      	lsrs	r1, r3, #4
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	009b      	lsls	r3, r3, #2
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	4413      	add	r3, r2
 8001698:	b28a      	uxth	r2, r1
 800169a:	601a      	str	r2, [r3, #0]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	3301      	adds	r3, #1
 80016a0:	617b      	str	r3, [r7, #20]
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	4a17      	ldr	r2, [pc, #92]	; (8001704 <MX_SystemStartup+0x9c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d9f0      	bls.n	800168c <MX_SystemStartup+0x24>
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	613b      	str	r3, [r7, #16]
 80016ae:	e00f      	b.n	80016d0 <MX_SystemStartup+0x68>
		if(*(ptr + byte) != (0xFFFF & (byte >> 4)))
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	009b      	lsls	r3, r3, #2
 80016b4:	68fa      	ldr	r2, [r7, #12]
 80016b6:	4413      	add	r3, r2
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	091b      	lsrs	r3, r3, #4
 80016be:	b29b      	uxth	r3, r3
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d002      	beq.n	80016ca <MX_SystemStartup+0x62>
			state->sram_working = 0;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	705a      	strb	r2, [r3, #1]
	for(uint32_t byte=0; byte<1000000ul; byte++)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	3301      	adds	r3, #1
 80016ce:	613b      	str	r3, [r7, #16]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	4a0c      	ldr	r2, [pc, #48]	; (8001704 <MX_SystemStartup+0x9c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d9eb      	bls.n	80016b0 <MX_SystemStartup+0x48>

	// test sdio
	file_result = f_mount(&file_system, (const TCHAR*)SDPath, 1);
 80016d8:	2201      	movs	r2, #1
 80016da:	490b      	ldr	r1, [pc, #44]	; (8001708 <MX_SystemStartup+0xa0>)
 80016dc:	480b      	ldr	r0, [pc, #44]	; (800170c <MX_SystemStartup+0xa4>)
 80016de:	f00f ff81 	bl	80115e4 <f_mount>
 80016e2:	4603      	mov	r3, r0
 80016e4:	461a      	mov	r2, r3
 80016e6:	4b0a      	ldr	r3, [pc, #40]	; (8001710 <MX_SystemStartup+0xa8>)
 80016e8:	701a      	strb	r2, [r3, #0]
	if(file_result != FR_OK)
 80016ea:	4b09      	ldr	r3, [pc, #36]	; (8001710 <MX_SystemStartup+0xa8>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <MX_SystemStartup+0x90>
		state->sdio_working = 0;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2200      	movs	r2, #0
 80016f6:	709a      	strb	r2, [r3, #2]

	// test wifi
	// todo add wifi check

}
 80016f8:	bf00      	nop
 80016fa:	3718      	adds	r7, #24
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	603d0900 	.word	0x603d0900
 8001704:	000f423f 	.word	0x000f423f
 8001708:	200016c4 	.word	0x200016c4
 800170c:	20000678 	.word	0x20000678
 8001710:	200016b0 	.word	0x200016b0

08001714 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800171a:	b672      	cpsid	i
}
 800171c:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();

	// reset pins
	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800171e:	2200      	movs	r2, #0
 8001720:	2140      	movs	r1, #64	; 0x40
 8001722:	481b      	ldr	r0, [pc, #108]	; (8001790 <Error_Handler+0x7c>)
 8001724:	f001 fd4e 	bl	80031c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED2_GPIO_Port, LED2_Pin, GPIO_PIN_RESET);
 8001728:	2200      	movs	r2, #0
 800172a:	2180      	movs	r1, #128	; 0x80
 800172c:	4818      	ldr	r0, [pc, #96]	; (8001790 <Error_Handler+0x7c>)
 800172e:	f001 fd49 	bl	80031c4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001732:	2200      	movs	r2, #0
 8001734:	2140      	movs	r1, #64	; 0x40
 8001736:	4817      	ldr	r0, [pc, #92]	; (8001794 <Error_Handler+0x80>)
 8001738:	f001 fd44 	bl	80031c4 <HAL_GPIO_WritePin>

	// blink error code
	while (1)
	{
		switch(system_state.error)
 800173c:	4b16      	ldr	r3, [pc, #88]	; (8001798 <Error_Handler+0x84>)
 800173e:	791b      	ldrb	r3, [r3, #4]
 8001740:	2b02      	cmp	r3, #2
 8001742:	d010      	beq.n	8001766 <Error_Handler+0x52>
 8001744:	2b02      	cmp	r3, #2
 8001746:	dc17      	bgt.n	8001778 <Error_Handler+0x64>
 8001748:	2b00      	cmp	r3, #0
 800174a:	d002      	beq.n	8001752 <Error_Handler+0x3e>
 800174c:	2b01      	cmp	r3, #1
 800174e:	d005      	beq.n	800175c <Error_Handler+0x48>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
			//	HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
			break;

		default:
			break;
 8001750:	e012      	b.n	8001778 <Error_Handler+0x64>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001752:	2140      	movs	r1, #64	; 0x40
 8001754:	480e      	ldr	r0, [pc, #56]	; (8001790 <Error_Handler+0x7c>)
 8001756:	f001 fd4e 	bl	80031f6 <HAL_GPIO_TogglePin>
			break;
 800175a:	e00e      	b.n	800177a <Error_Handler+0x66>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800175c:	2180      	movs	r1, #128	; 0x80
 800175e:	480c      	ldr	r0, [pc, #48]	; (8001790 <Error_Handler+0x7c>)
 8001760:	f001 fd49 	bl	80031f6 <HAL_GPIO_TogglePin>
			break;
 8001764:	e009      	b.n	800177a <Error_Handler+0x66>
			HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 8001766:	2140      	movs	r1, #64	; 0x40
 8001768:	4809      	ldr	r0, [pc, #36]	; (8001790 <Error_Handler+0x7c>)
 800176a:	f001 fd44 	bl	80031f6 <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 800176e:	2180      	movs	r1, #128	; 0x80
 8001770:	4807      	ldr	r0, [pc, #28]	; (8001790 <Error_Handler+0x7c>)
 8001772:	f001 fd40 	bl	80031f6 <HAL_GPIO_TogglePin>
			break;
 8001776:	e000      	b.n	800177a <Error_Handler+0x66>
			break;
 8001778:	bf00      	nop
		}

		// loop delay
		for(volatile uint32_t t=0; t<2000000; t++);
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	e002      	b.n	8001786 <Error_Handler+0x72>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	3301      	adds	r3, #1
 8001784:	607b      	str	r3, [r7, #4]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <Error_Handler+0x88>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d9f8      	bls.n	8001780 <Error_Handler+0x6c>
		switch(system_state.error)
 800178e:	e7d5      	b.n	800173c <Error_Handler+0x28>
 8001790:	40021800 	.word	0x40021800
 8001794:	40020800 	.word	0x40020800
 8001798:	20000670 	.word	0x20000670
 800179c:	001e847f 	.word	0x001e847f

080017a0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b083      	sub	sp, #12
 80017a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80017a6:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <HAL_MspInit+0x44>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <HAL_MspInit+0x44>)
 80017ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <HAL_MspInit+0x44>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017be:	4b09      	ldr	r3, [pc, #36]	; (80017e4 <HAL_MspInit+0x44>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c2:	4a08      	ldr	r2, [pc, #32]	; (80017e4 <HAL_MspInit+0x44>)
 80017c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c8:	6453      	str	r3, [r2, #68]	; 0x44
 80017ca:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <HAL_MspInit+0x44>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017d2:	603b      	str	r3, [r7, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017d6:	bf00      	nop
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	40023800 	.word	0x40023800

080017e8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a2d      	ldr	r2, [pc, #180]	; (80018bc <HAL_ADC_MspInit+0xd4>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d153      	bne.n	80018b2 <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800180a:	4b2d      	ldr	r3, [pc, #180]	; (80018c0 <HAL_ADC_MspInit+0xd8>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a2c      	ldr	r2, [pc, #176]	; (80018c0 <HAL_ADC_MspInit+0xd8>)
 8001810:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b2a      	ldr	r3, [pc, #168]	; (80018c0 <HAL_ADC_MspInit+0xd8>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800181e:	613b      	str	r3, [r7, #16]
 8001820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001822:	4b27      	ldr	r3, [pc, #156]	; (80018c0 <HAL_ADC_MspInit+0xd8>)
 8001824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001826:	4a26      	ldr	r2, [pc, #152]	; (80018c0 <HAL_ADC_MspInit+0xd8>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6313      	str	r3, [r2, #48]	; 0x30
 800182e:	4b24      	ldr	r3, [pc, #144]	; (80018c0 <HAL_ADC_MspInit+0xd8>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 800183a:	2305      	movs	r3, #5
 800183c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800183e:	2303      	movs	r3, #3
 8001840:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001846:	f107 0314 	add.w	r3, r7, #20
 800184a:	4619      	mov	r1, r3
 800184c:	481d      	ldr	r0, [pc, #116]	; (80018c4 <HAL_ADC_MspInit+0xdc>)
 800184e:	f001 faf5 	bl	8002e3c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001852:	4b1d      	ldr	r3, [pc, #116]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 8001854:	4a1d      	ldr	r2, [pc, #116]	; (80018cc <HAL_ADC_MspInit+0xe4>)
 8001856:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001858:	4b1b      	ldr	r3, [pc, #108]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 800185a:	2200      	movs	r2, #0
 800185c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800185e:	4b1a      	ldr	r3, [pc, #104]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 8001860:	2200      	movs	r2, #0
 8001862:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001864:	4b18      	ldr	r3, [pc, #96]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 8001866:	2200      	movs	r2, #0
 8001868:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800186a:	4b17      	ldr	r3, [pc, #92]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 800186c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001870:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 8001874:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001878:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800187a:	4b13      	ldr	r3, [pc, #76]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 800187c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001880:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001882:	4b11      	ldr	r3, [pc, #68]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 8001884:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001888:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800188a:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 800188c:	2200      	movs	r2, #0
 800188e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001890:	4b0d      	ldr	r3, [pc, #52]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 8001892:	2200      	movs	r2, #0
 8001894:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001896:	480c      	ldr	r0, [pc, #48]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 8001898:	f000 ffe6 	bl	8002868 <HAL_DMA_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80018a2:	f7ff ff37 	bl	8001714 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a07      	ldr	r2, [pc, #28]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 80018aa:	639a      	str	r2, [r3, #56]	; 0x38
 80018ac:	4a06      	ldr	r2, [pc, #24]	; (80018c8 <HAL_ADC_MspInit+0xe0>)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40012000 	.word	0x40012000
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020000 	.word	0x40020000
 80018c8:	20000360 	.word	0x20000360
 80018cc:	40026410 	.word	0x40026410

080018d0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b0ac      	sub	sp, #176	; 0xb0
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
 80018e0:	605a      	str	r2, [r3, #4]
 80018e2:	609a      	str	r2, [r3, #8]
 80018e4:	60da      	str	r2, [r3, #12]
 80018e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018e8:	f107 0318 	add.w	r3, r7, #24
 80018ec:	2284      	movs	r2, #132	; 0x84
 80018ee:	2100      	movs	r1, #0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f010 ffc7 	bl	8012884 <memset>
  if(hsd->Instance==SDMMC1)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a70      	ldr	r2, [pc, #448]	; (8001abc <HAL_SD_MspInit+0x1ec>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	f040 80d8 	bne.w	8001ab2 <HAL_SD_MspInit+0x1e2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 8001902:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001906:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001914:	f107 0318 	add.w	r3, r7, #24
 8001918:	4618      	mov	r0, r3
 800191a:	f005 f9a1 	bl	8006c60 <HAL_RCCEx_PeriphCLKConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001924:	f7ff fef6 	bl	8001714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001928:	4b65      	ldr	r3, [pc, #404]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 800192a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192c:	4a64      	ldr	r2, [pc, #400]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 800192e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001932:	6453      	str	r3, [r2, #68]	; 0x44
 8001934:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 8001936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001938:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800193c:	617b      	str	r3, [r7, #20]
 800193e:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001940:	4b5f      	ldr	r3, [pc, #380]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 8001942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001944:	4a5e      	ldr	r2, [pc, #376]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 8001946:	f043 0304 	orr.w	r3, r3, #4
 800194a:	6313      	str	r3, [r2, #48]	; 0x30
 800194c:	4b5c      	ldr	r3, [pc, #368]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 800194e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001950:	f003 0304 	and.w	r3, r3, #4
 8001954:	613b      	str	r3, [r7, #16]
 8001956:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001958:	4b59      	ldr	r3, [pc, #356]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 800195a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195c:	4a58      	ldr	r2, [pc, #352]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6313      	str	r3, [r2, #48]	; 0x30
 8001964:	4b56      	ldr	r3, [pc, #344]	; (8001ac0 <HAL_SD_MspInit+0x1f0>)
 8001966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001968:	f003 0308 	and.w	r3, r3, #8
 800196c:	60fb      	str	r3, [r7, #12]
 800196e:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 8001970:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001974:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001984:	2303      	movs	r3, #3
 8001986:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800198a:	230c      	movs	r3, #12
 800198c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001994:	4619      	mov	r1, r3
 8001996:	484b      	ldr	r0, [pc, #300]	; (8001ac4 <HAL_SD_MspInit+0x1f4>)
 8001998:	f001 fa50 	bl	8002e3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800199c:	2304      	movs	r3, #4
 800199e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a2:	2302      	movs	r3, #2
 80019a4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ae:	2303      	movs	r3, #3
 80019b0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019b4:	230c      	movs	r3, #12
 80019b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80019be:	4619      	mov	r1, r3
 80019c0:	4841      	ldr	r0, [pc, #260]	; (8001ac8 <HAL_SD_MspInit+0x1f8>)
 80019c2:	f001 fa3b 	bl	8002e3c <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 80019c6:	4b41      	ldr	r3, [pc, #260]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 80019c8:	4a41      	ldr	r2, [pc, #260]	; (8001ad0 <HAL_SD_MspInit+0x200>)
 80019ca:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 80019cc:	4b3f      	ldr	r3, [pc, #252]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 80019ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019d2:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019d4:	4b3d      	ldr	r3, [pc, #244]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 80019dc:	2200      	movs	r2, #0
 80019de:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e0:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 80019e2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019e6:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019e8:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 80019ea:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019ee:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019f0:	4b36      	ldr	r3, [pc, #216]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019f6:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 80019f8:	4b34      	ldr	r3, [pc, #208]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 80019fa:	2220      	movs	r2, #32
 80019fc:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019fe:	4b33      	ldr	r3, [pc, #204]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a04:	4b31      	ldr	r3, [pc, #196]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 8001a06:	2204      	movs	r2, #4
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a0a:	4b30      	ldr	r3, [pc, #192]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 8001a0c:	2203      	movs	r2, #3
 8001a0e:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 8001a12:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a16:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 8001a1a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a1e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 8001a20:	482a      	ldr	r0, [pc, #168]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 8001a22:	f000 ff21 	bl	8002868 <HAL_DMA_Init>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d001      	beq.n	8001a30 <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001a2c:	f7ff fe72 	bl	8001714 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	4a26      	ldr	r2, [pc, #152]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 8001a34:	641a      	str	r2, [r3, #64]	; 0x40
 8001a36:	4a25      	ldr	r2, [pc, #148]	; (8001acc <HAL_SD_MspInit+0x1fc>)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001a3c:	4b25      	ldr	r3, [pc, #148]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a3e:	4a26      	ldr	r2, [pc, #152]	; (8001ad8 <HAL_SD_MspInit+0x208>)
 8001a40:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 8001a42:	4b24      	ldr	r3, [pc, #144]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a44:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a48:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a4a:	4b22      	ldr	r3, [pc, #136]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a4c:	2240      	movs	r2, #64	; 0x40
 8001a4e:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a50:	4b20      	ldr	r3, [pc, #128]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a56:	4b1f      	ldr	r3, [pc, #124]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a58:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a5c:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001a5e:	4b1d      	ldr	r3, [pc, #116]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a60:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a64:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001a66:	4b1b      	ldr	r3, [pc, #108]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a68:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a6c:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 8001a6e:	4b19      	ldr	r3, [pc, #100]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a70:	2220      	movs	r2, #32
 8001a72:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a74:	4b17      	ldr	r3, [pc, #92]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a7c:	2204      	movs	r2, #4
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001a80:	4b14      	ldr	r3, [pc, #80]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a82:	2203      	movs	r2, #3
 8001a84:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a88:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a8c:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001a94:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 8001a96:	480f      	ldr	r0, [pc, #60]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001a98:	f000 fee6 	bl	8002868 <HAL_DMA_Init>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 8001aa2:	f7ff fe37 	bl	8001714 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4a0a      	ldr	r2, [pc, #40]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001aaa:	63da      	str	r2, [r3, #60]	; 0x3c
 8001aac:	4a09      	ldr	r2, [pc, #36]	; (8001ad4 <HAL_SD_MspInit+0x204>)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001ab2:	bf00      	nop
 8001ab4:	37b0      	adds	r7, #176	; 0xb0
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	40012c00 	.word	0x40012c00
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020800 	.word	0x40020800
 8001ac8:	40020c00 	.word	0x40020c00
 8001acc:	20000444 	.word	0x20000444
 8001ad0:	40026458 	.word	0x40026458
 8001ad4:	200004a4 	.word	0x200004a4
 8001ad8:	400264a0 	.word	0x400264a0

08001adc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a13      	ldr	r2, [pc, #76]	; (8001b38 <HAL_TIM_Base_MspInit+0x5c>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d10c      	bne.n	8001b08 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001aee:	4b13      	ldr	r3, [pc, #76]	; (8001b3c <HAL_TIM_Base_MspInit+0x60>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a12      	ldr	r2, [pc, #72]	; (8001b3c <HAL_TIM_Base_MspInit+0x60>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b10      	ldr	r3, [pc, #64]	; (8001b3c <HAL_TIM_Base_MspInit+0x60>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001b06:	e010      	b.n	8001b2a <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a0c      	ldr	r2, [pc, #48]	; (8001b40 <HAL_TIM_Base_MspInit+0x64>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d10b      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001b12:	4b0a      	ldr	r3, [pc, #40]	; (8001b3c <HAL_TIM_Base_MspInit+0x60>)
 8001b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_TIM_Base_MspInit+0x60>)
 8001b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b1e:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <HAL_TIM_Base_MspInit+0x60>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b26:	60bb      	str	r3, [r7, #8]
 8001b28:	68bb      	ldr	r3, [r7, #8]
}
 8001b2a:	bf00      	nop
 8001b2c:	3714      	adds	r7, #20
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	40010000 	.word	0x40010000
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	40014800 	.word	0x40014800

08001b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4c:	f107 030c 	add.w	r3, r7, #12
 8001b50:	2200      	movs	r2, #0
 8001b52:	601a      	str	r2, [r3, #0]
 8001b54:	605a      	str	r2, [r3, #4]
 8001b56:	609a      	str	r2, [r3, #8]
 8001b58:	60da      	str	r2, [r3, #12]
 8001b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a11      	ldr	r2, [pc, #68]	; (8001ba8 <HAL_TIM_MspPostInit+0x64>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d11b      	bne.n	8001b9e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b66:	4b11      	ldr	r3, [pc, #68]	; (8001bac <HAL_TIM_MspPostInit+0x68>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_TIM_MspPostInit+0x68>)
 8001b6c:	f043 0320 	orr.w	r3, r3, #32
 8001b70:	6313      	str	r3, [r2, #48]	; 0x30
 8001b72:	4b0e      	ldr	r3, [pc, #56]	; (8001bac <HAL_TIM_MspPostInit+0x68>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	f003 0320 	and.w	r3, r3, #32
 8001b7a:	60bb      	str	r3, [r7, #8]
 8001b7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001b7e:	2380      	movs	r3, #128	; 0x80
 8001b80:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b82:	2302      	movs	r3, #2
 8001b84:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001b92:	f107 030c 	add.w	r3, r7, #12
 8001b96:	4619      	mov	r1, r3
 8001b98:	4805      	ldr	r0, [pc, #20]	; (8001bb0 <HAL_TIM_MspPostInit+0x6c>)
 8001b9a:	f001 f94f 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001b9e:	bf00      	nop
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40014800 	.word	0x40014800
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	40021400 	.word	0x40021400

08001bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b0aa      	sub	sp, #168	; 0xa8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bbc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
 8001bc6:	609a      	str	r2, [r3, #8]
 8001bc8:	60da      	str	r2, [r3, #12]
 8001bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bcc:	f107 0310 	add.w	r3, r7, #16
 8001bd0:	2284      	movs	r2, #132	; 0x84
 8001bd2:	2100      	movs	r1, #0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f010 fe55 	bl	8012884 <memset>
  if(huart->Instance==USART1)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a21      	ldr	r2, [pc, #132]	; (8001c64 <HAL_UART_MspInit+0xb0>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d13a      	bne.n	8001c5a <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001be4:	2340      	movs	r3, #64	; 0x40
 8001be6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001be8:	2300      	movs	r3, #0
 8001bea:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bec:	f107 0310 	add.w	r3, r7, #16
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f005 f835 	bl	8006c60 <HAL_RCCEx_PeriphCLKConfig>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001bfc:	f7ff fd8a 	bl	8001714 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c00:	4b19      	ldr	r3, [pc, #100]	; (8001c68 <HAL_UART_MspInit+0xb4>)
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	4a18      	ldr	r2, [pc, #96]	; (8001c68 <HAL_UART_MspInit+0xb4>)
 8001c06:	f043 0310 	orr.w	r3, r3, #16
 8001c0a:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0c:	4b16      	ldr	r3, [pc, #88]	; (8001c68 <HAL_UART_MspInit+0xb4>)
 8001c0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c18:	4b13      	ldr	r3, [pc, #76]	; (8001c68 <HAL_UART_MspInit+0xb4>)
 8001c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1c:	4a12      	ldr	r2, [pc, #72]	; (8001c68 <HAL_UART_MspInit+0xb4>)
 8001c1e:	f043 0302 	orr.w	r3, r3, #2
 8001c22:	6313      	str	r3, [r2, #48]	; 0x30
 8001c24:	4b10      	ldr	r3, [pc, #64]	; (8001c68 <HAL_UART_MspInit+0xb4>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 8001c30:	23c0      	movs	r3, #192	; 0xc0
 8001c32:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c36:	2302      	movs	r3, #2
 8001c38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c4e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	; (8001c6c <HAL_UART_MspInit+0xb8>)
 8001c56:	f001 f8f1 	bl	8002e3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001c5a:	bf00      	nop
 8001c5c:	37a8      	adds	r7, #168	; 0xa8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40011000 	.word	0x40011000
 8001c68:	40023800 	.word	0x40023800
 8001c6c:	40020400 	.word	0x40020400

08001c70 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001c76:	1d3b      	adds	r3, r7, #4
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	605a      	str	r2, [r3, #4]
 8001c7e:	609a      	str	r2, [r3, #8]
 8001c80:	60da      	str	r2, [r3, #12]
 8001c82:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_FMC_MspInit+0xc4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d14e      	bne.n	8001d2a <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8001c8c:	4b29      	ldr	r3, [pc, #164]	; (8001d34 <HAL_FMC_MspInit+0xc4>)
 8001c8e:	2201      	movs	r2, #1
 8001c90:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001c92:	4b29      	ldr	r3, [pc, #164]	; (8001d38 <HAL_FMC_MspInit+0xc8>)
 8001c94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c96:	4a28      	ldr	r2, [pc, #160]	; (8001d38 <HAL_FMC_MspInit+0xc8>)
 8001c98:	f043 0301 	orr.w	r3, r3, #1
 8001c9c:	6393      	str	r3, [r2, #56]	; 0x38
 8001c9e:	4b26      	ldr	r3, [pc, #152]	; (8001d38 <HAL_FMC_MspInit+0xc8>)
 8001ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ca2:	f003 0301 	and.w	r3, r3, #1
 8001ca6:	603b      	str	r3, [r7, #0]
 8001ca8:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8001caa:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8001cae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cbc:	230c      	movs	r3, #12
 8001cbe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	481d      	ldr	r0, [pc, #116]	; (8001d3c <HAL_FMC_MspInit+0xcc>)
 8001cc6:	f001 f8b9 	bl	8002e3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 8001cca:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001cce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cd0:	2302      	movs	r3, #2
 8001cd2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cdc:	230c      	movs	r3, #12
 8001cde:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ce0:	1d3b      	adds	r3, r7, #4
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4816      	ldr	r0, [pc, #88]	; (8001d40 <HAL_FMC_MspInit+0xd0>)
 8001ce6:	f001 f8a9 	bl	8002e3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8001cea:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001cee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001cfc:	230c      	movs	r3, #12
 8001cfe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001d00:	1d3b      	adds	r3, r7, #4
 8001d02:	4619      	mov	r1, r3
 8001d04:	480f      	ldr	r0, [pc, #60]	; (8001d44 <HAL_FMC_MspInit+0xd4>)
 8001d06:	f001 f899 	bl	8002e3c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001d0a:	233f      	movs	r3, #63	; 0x3f
 8001d0c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d0e:	2302      	movs	r3, #2
 8001d10:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d16:	2303      	movs	r3, #3
 8001d18:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001d1a:	230c      	movs	r3, #12
 8001d1c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4809      	ldr	r0, [pc, #36]	; (8001d48 <HAL_FMC_MspInit+0xd8>)
 8001d24:	f001 f88a 	bl	8002e3c <HAL_GPIO_Init>
 8001d28:	e000      	b.n	8001d2c <HAL_FMC_MspInit+0xbc>
    return;
 8001d2a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	200016b4 	.word	0x200016b4
 8001d38:	40023800 	.word	0x40023800
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40020c00 	.word	0x40020c00
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40021800 	.word	0x40021800

08001d4c <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001d54:	f7ff ff8c 	bl	8001c70 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001d58:	bf00      	nop
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <NMI_Handler+0x4>

08001d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d66:	b480      	push	{r7}
 8001d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6a:	e7fe      	b.n	8001d6a <HardFault_Handler+0x4>

08001d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d70:	e7fe      	b.n	8001d70 <MemManage_Handler+0x4>

08001d72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d72:	b480      	push	{r7}
 8001d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d76:	e7fe      	b.n	8001d76 <BusFault_Handler+0x4>

08001d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d7c:	e7fe      	b.n	8001d7c <UsageFault_Handler+0x4>

08001d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d82:	bf00      	nop
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr

08001d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d9e:	bf00      	nop
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr

08001da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001dac:	f000 f972 	bl	8002094 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001db0:	bf00      	nop
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001db8:	4802      	ldr	r0, [pc, #8]	; (8001dc4 <DMA2_Stream0_IRQHandler+0x10>)
 8001dba:	f000 fe03 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001dbe:	bf00      	nop
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	20000360 	.word	0x20000360

08001dc8 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001dcc:	4802      	ldr	r0, [pc, #8]	; (8001dd8 <DMA2_Stream3_IRQHandler+0x10>)
 8001dce:	f000 fdf9 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001dd2:	bf00      	nop
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	20000444 	.word	0x20000444

08001ddc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001de0:	4802      	ldr	r0, [pc, #8]	; (8001dec <OTG_FS_IRQHandler+0x10>)
 8001de2:	f001 fc8d 	bl	8003700 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001de6:	bf00      	nop
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	200036c0 	.word	0x200036c0

08001df0 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001df4:	4802      	ldr	r0, [pc, #8]	; (8001e00 <DMA2_Stream6_IRQHandler+0x10>)
 8001df6:	f000 fde5 	bl	80029c4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001dfa:	bf00      	nop
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200004a4 	.word	0x200004a4

08001e04 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001e08:	4802      	ldr	r0, [pc, #8]	; (8001e14 <OTG_HS_IRQHandler+0x10>)
 8001e0a:	f003 f88f 	bl	8004f2c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20002ddc 	.word	0x20002ddc

08001e18 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  return 1;
 8001e1c:	2301      	movs	r3, #1
}
 8001e1e:	4618      	mov	r0, r3
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <_kill>:

int _kill(int pid, int sig)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b082      	sub	sp, #8
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001e32:	f010 fced 	bl	8012810 <__errno>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2216      	movs	r2, #22
 8001e3a:	601a      	str	r2, [r3, #0]
  return -1;
 8001e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3708      	adds	r7, #8
 8001e44:	46bd      	mov	sp, r7
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <_exit>:

void _exit (int status)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e50:	f04f 31ff 	mov.w	r1, #4294967295
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ffe7 	bl	8001e28 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e5a:	e7fe      	b.n	8001e5a <_exit+0x12>

08001e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]
 8001e6c:	e00a      	b.n	8001e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e6e:	f3af 8000 	nop.w
 8001e72:	4601      	mov	r1, r0
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	60ba      	str	r2, [r7, #8]
 8001e7a:	b2ca      	uxtb	r2, r1
 8001e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e7e:	697b      	ldr	r3, [r7, #20]
 8001e80:	3301      	adds	r3, #1
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	dbf0      	blt.n	8001e6e <_read+0x12>
  }

  return len;
 8001e8c:	687b      	ldr	r3, [r7, #4]
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b086      	sub	sp, #24
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	60f8      	str	r0, [r7, #12]
 8001e9e:	60b9      	str	r1, [r7, #8]
 8001ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	617b      	str	r3, [r7, #20]
 8001ea6:	e009      	b.n	8001ebc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	1c5a      	adds	r2, r3, #1
 8001eac:	60ba      	str	r2, [r7, #8]
 8001eae:	781b      	ldrb	r3, [r3, #0]
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	3301      	adds	r3, #1
 8001eba:	617b      	str	r3, [r7, #20]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	dbf1      	blt.n	8001ea8 <_write+0x12>
  }
  return len;
 8001ec4:	687b      	ldr	r3, [r7, #4]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}

08001ece <_close>:

int _close(int file)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b083      	sub	sp, #12
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
 8001eee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ef6:	605a      	str	r2, [r3, #4]
  return 0;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	370c      	adds	r7, #12
 8001efe:	46bd      	mov	sp, r7
 8001f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f04:	4770      	bx	lr

08001f06 <_isatty>:

int _isatty(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f0e:	2301      	movs	r3, #1
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3714      	adds	r7, #20
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f40:	4a14      	ldr	r2, [pc, #80]	; (8001f94 <_sbrk+0x5c>)
 8001f42:	4b15      	ldr	r3, [pc, #84]	; (8001f98 <_sbrk+0x60>)
 8001f44:	1ad3      	subs	r3, r2, r3
 8001f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f4c:	4b13      	ldr	r3, [pc, #76]	; (8001f9c <_sbrk+0x64>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d102      	bne.n	8001f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <_sbrk+0x64>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <_sbrk+0x68>)
 8001f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <_sbrk+0x64>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4413      	add	r3, r2
 8001f62:	693a      	ldr	r2, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d207      	bcs.n	8001f78 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f68:	f010 fc52 	bl	8012810 <__errno>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	220c      	movs	r2, #12
 8001f70:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f72:	f04f 33ff 	mov.w	r3, #4294967295
 8001f76:	e009      	b.n	8001f8c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f78:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <_sbrk+0x64>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f7e:	4b07      	ldr	r3, [pc, #28]	; (8001f9c <_sbrk+0x64>)
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4413      	add	r3, r2
 8001f86:	4a05      	ldr	r2, [pc, #20]	; (8001f9c <_sbrk+0x64>)
 8001f88:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3718      	adds	r7, #24
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	20050000 	.word	0x20050000
 8001f98:	00000400 	.word	0x00000400
 8001f9c:	200016b8 	.word	0x200016b8
 8001fa0:	200039d8 	.word	0x200039d8

08001fa4 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fa8:	4b06      	ldr	r3, [pc, #24]	; (8001fc4 <SystemInit+0x20>)
 8001faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fae:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <SystemInit+0x20>)
 8001fb0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001fb4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001fb8:	bf00      	nop
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	e000ed00 	.word	0xe000ed00

08001fc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002000 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001fcc:	480d      	ldr	r0, [pc, #52]	; (8002004 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001fce:	490e      	ldr	r1, [pc, #56]	; (8002008 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001fd0:	4a0e      	ldr	r2, [pc, #56]	; (800200c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001fd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fd4:	e002      	b.n	8001fdc <LoopCopyDataInit>

08001fd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fda:	3304      	adds	r3, #4

08001fdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fe0:	d3f9      	bcc.n	8001fd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	; (8002010 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001fe4:	4c0b      	ldr	r4, [pc, #44]	; (8002014 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001fe6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fe8:	e001      	b.n	8001fee <LoopFillZerobss>

08001fea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fec:	3204      	adds	r2, #4

08001fee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ff0:	d3fb      	bcc.n	8001fea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ff2:	f7ff ffd7 	bl	8001fa4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ff6:	f010 fc11 	bl	801281c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ffa:	f7fe ff77 	bl	8000eec <main>
  bx  lr    
 8001ffe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002000:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002004:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002008:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 800200c:	08015734 	.word	0x08015734
  ldr r2, =_sbss
 8002010:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8002014:	200039d4 	.word	0x200039d4

08002018 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002018:	e7fe      	b.n	8002018 <ADC_IRQHandler>

0800201a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800201a:	b580      	push	{r7, lr}
 800201c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800201e:	2003      	movs	r0, #3
 8002020:	f000 fbe0 	bl	80027e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002024:	200f      	movs	r0, #15
 8002026:	f000 f805 	bl	8002034 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800202a:	f7ff fbb9 	bl	80017a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800202e:	2300      	movs	r3, #0
}
 8002030:	4618      	mov	r0, r3
 8002032:	bd80      	pop	{r7, pc}

08002034 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800203c:	4b12      	ldr	r3, [pc, #72]	; (8002088 <HAL_InitTick+0x54>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4b12      	ldr	r3, [pc, #72]	; (800208c <HAL_InitTick+0x58>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	4619      	mov	r1, r3
 8002046:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800204a:	fbb3 f3f1 	udiv	r3, r3, r1
 800204e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002052:	4618      	mov	r0, r3
 8002054:	f000 fbfb 	bl	800284e <HAL_SYSTICK_Config>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800205e:	2301      	movs	r3, #1
 8002060:	e00e      	b.n	8002080 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d80a      	bhi.n	800207e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002068:	2200      	movs	r2, #0
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	f04f 30ff 	mov.w	r0, #4294967295
 8002070:	f000 fbc3 	bl	80027fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002074:	4a06      	ldr	r2, [pc, #24]	; (8002090 <HAL_InitTick+0x5c>)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800207a:	2300      	movs	r3, #0
 800207c:	e000      	b.n	8002080 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
}
 8002080:	4618      	mov	r0, r3
 8002082:	3708      	adds	r7, #8
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	20000000 	.word	0x20000000
 800208c:	20000008 	.word	0x20000008
 8002090:	20000004 	.word	0x20000004

08002094 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002094:	b480      	push	{r7}
 8002096:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002098:	4b06      	ldr	r3, [pc, #24]	; (80020b4 <HAL_IncTick+0x20>)
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	461a      	mov	r2, r3
 800209e:	4b06      	ldr	r3, [pc, #24]	; (80020b8 <HAL_IncTick+0x24>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4413      	add	r3, r2
 80020a4:	4a04      	ldr	r2, [pc, #16]	; (80020b8 <HAL_IncTick+0x24>)
 80020a6:	6013      	str	r3, [r2, #0]
}
 80020a8:	bf00      	nop
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	20000008 	.word	0x20000008
 80020b8:	200016bc 	.word	0x200016bc

080020bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	af00      	add	r7, sp, #0
  return uwTick;
 80020c0:	4b03      	ldr	r3, [pc, #12]	; (80020d0 <HAL_GetTick+0x14>)
 80020c2:	681b      	ldr	r3, [r3, #0]
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	200016bc 	.word	0x200016bc

080020d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff ffee 	bl	80020bc <HAL_GetTick>
 80020e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020ec:	d005      	beq.n	80020fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020ee:	4b0a      	ldr	r3, [pc, #40]	; (8002118 <HAL_Delay+0x44>)
 80020f0:	781b      	ldrb	r3, [r3, #0]
 80020f2:	461a      	mov	r2, r3
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	4413      	add	r3, r2
 80020f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80020fa:	bf00      	nop
 80020fc:	f7ff ffde 	bl	80020bc <HAL_GetTick>
 8002100:	4602      	mov	r2, r0
 8002102:	68bb      	ldr	r3, [r7, #8]
 8002104:	1ad3      	subs	r3, r2, r3
 8002106:	68fa      	ldr	r2, [r7, #12]
 8002108:	429a      	cmp	r2, r3
 800210a:	d8f7      	bhi.n	80020fc <HAL_Delay+0x28>
  {
  }
}
 800210c:	bf00      	nop
 800210e:	bf00      	nop
 8002110:	3710      	adds	r7, #16
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	20000008 	.word	0x20000008

0800211c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b084      	sub	sp, #16
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002124:	2300      	movs	r3, #0
 8002126:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800212e:	2301      	movs	r3, #1
 8002130:	e031      	b.n	8002196 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002136:	2b00      	cmp	r3, #0
 8002138:	d109      	bne.n	800214e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fb54 	bl	80017e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2200      	movs	r2, #0
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002152:	f003 0310 	and.w	r3, r3, #16
 8002156:	2b00      	cmp	r3, #0
 8002158:	d116      	bne.n	8002188 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800215e:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <HAL_ADC_Init+0x84>)
 8002160:	4013      	ands	r3, r2
 8002162:	f043 0202 	orr.w	r2, r3, #2
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f000 f970 	bl	8002450 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2200      	movs	r2, #0
 8002174:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800217a:	f023 0303 	bic.w	r3, r3, #3
 800217e:	f043 0201 	orr.w	r2, r3, #1
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
 8002186:	e001      	b.n	800218c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002194:	7bfb      	ldrb	r3, [r7, #15]
}
 8002196:	4618      	mov	r0, r3
 8002198:	3710      	adds	r7, #16
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	ffffeefd 	.word	0xffffeefd

080021a4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
 80021ac:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80021ae:	2300      	movs	r3, #0
 80021b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d101      	bne.n	80021c0 <HAL_ADC_ConfigChannel+0x1c>
 80021bc:	2302      	movs	r3, #2
 80021be:	e136      	b.n	800242e <HAL_ADC_ConfigChannel+0x28a>
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2b09      	cmp	r3, #9
 80021ce:	d93a      	bls.n	8002246 <HAL_ADC_ConfigChannel+0xa2>
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021d8:	d035      	beq.n	8002246 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	68d9      	ldr	r1, [r3, #12]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	461a      	mov	r2, r3
 80021e8:	4613      	mov	r3, r2
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	4413      	add	r3, r2
 80021ee:	3b1e      	subs	r3, #30
 80021f0:	2207      	movs	r2, #7
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43da      	mvns	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	400a      	ands	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a8d      	ldr	r2, [pc, #564]	; (800243c <HAL_ADC_ConfigChannel+0x298>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10a      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	68d9      	ldr	r1, [r3, #12]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	061a      	lsls	r2, r3, #24
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800221e:	e035      	b.n	800228c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68d9      	ldr	r1, [r3, #12]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	4618      	mov	r0, r3
 8002232:	4603      	mov	r3, r0
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4403      	add	r3, r0
 8002238:	3b1e      	subs	r3, #30
 800223a:	409a      	lsls	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002244:	e022      	b.n	800228c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6919      	ldr	r1, [r3, #16]
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	b29b      	uxth	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	4613      	mov	r3, r2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	4413      	add	r3, r2
 800225a:	2207      	movs	r2, #7
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43da      	mvns	r2, r3
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	400a      	ands	r2, r1
 8002268:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	6919      	ldr	r1, [r3, #16]
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	b29b      	uxth	r3, r3
 800227a:	4618      	mov	r0, r3
 800227c:	4603      	mov	r3, r0
 800227e:	005b      	lsls	r3, r3, #1
 8002280:	4403      	add	r3, r0
 8002282:	409a      	lsls	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	430a      	orrs	r2, r1
 800228a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	2b06      	cmp	r3, #6
 8002292:	d824      	bhi.n	80022de <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685a      	ldr	r2, [r3, #4]
 800229e:	4613      	mov	r3, r2
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	4413      	add	r3, r2
 80022a4:	3b05      	subs	r3, #5
 80022a6:	221f      	movs	r2, #31
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43da      	mvns	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	400a      	ands	r2, r1
 80022b4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	b29b      	uxth	r3, r3
 80022c2:	4618      	mov	r0, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b05      	subs	r3, #5
 80022d0:	fa00 f203 	lsl.w	r2, r0, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	635a      	str	r2, [r3, #52]	; 0x34
 80022dc:	e04c      	b.n	8002378 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	685b      	ldr	r3, [r3, #4]
 80022e2:	2b0c      	cmp	r3, #12
 80022e4:	d824      	bhi.n	8002330 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	685a      	ldr	r2, [r3, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	009b      	lsls	r3, r3, #2
 80022f4:	4413      	add	r3, r2
 80022f6:	3b23      	subs	r3, #35	; 0x23
 80022f8:	221f      	movs	r2, #31
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	43da      	mvns	r2, r3
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	400a      	ands	r2, r1
 8002306:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	b29b      	uxth	r3, r3
 8002314:	4618      	mov	r0, r3
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	3b23      	subs	r3, #35	; 0x23
 8002322:	fa00 f203 	lsl.w	r2, r0, r3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	430a      	orrs	r2, r1
 800232c:	631a      	str	r2, [r3, #48]	; 0x30
 800232e:	e023      	b.n	8002378 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	3b41      	subs	r3, #65	; 0x41
 8002342:	221f      	movs	r2, #31
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	43da      	mvns	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	400a      	ands	r2, r1
 8002350:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	4618      	mov	r0, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b41      	subs	r3, #65	; 0x41
 800236c:	fa00 f203 	lsl.w	r2, r0, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	430a      	orrs	r2, r1
 8002376:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a30      	ldr	r2, [pc, #192]	; (8002440 <HAL_ADC_ConfigChannel+0x29c>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10a      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1f4>
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800238a:	d105      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800238c:	4b2d      	ldr	r3, [pc, #180]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	4a2c      	ldr	r2, [pc, #176]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 8002392:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002396:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a28      	ldr	r2, [pc, #160]	; (8002440 <HAL_ADC_ConfigChannel+0x29c>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d10f      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x21e>
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b12      	cmp	r3, #18
 80023a8:	d10b      	bne.n	80023c2 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80023aa:	4b26      	ldr	r3, [pc, #152]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	4a25      	ldr	r2, [pc, #148]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023b4:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80023b6:	4b23      	ldr	r3, [pc, #140]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a22      	ldr	r2, [pc, #136]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 80023bc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80023c0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <HAL_ADC_ConfigChannel+0x29c>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d12b      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x280>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_ADC_ConfigChannel+0x298>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d003      	beq.n	80023de <HAL_ADC_ConfigChannel+0x23a>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b11      	cmp	r3, #17
 80023dc:	d122      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80023de:	4b19      	ldr	r3, [pc, #100]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	4a18      	ldr	r2, [pc, #96]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 80023e4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80023e8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80023ea:	4b16      	ldr	r3, [pc, #88]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	4a15      	ldr	r2, [pc, #84]	; (8002444 <HAL_ADC_ConfigChannel+0x2a0>)
 80023f0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80023f4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a10      	ldr	r2, [pc, #64]	; (800243c <HAL_ADC_ConfigChannel+0x298>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d111      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002400:	4b11      	ldr	r3, [pc, #68]	; (8002448 <HAL_ADC_ConfigChannel+0x2a4>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a11      	ldr	r2, [pc, #68]	; (800244c <HAL_ADC_ConfigChannel+0x2a8>)
 8002406:	fba2 2303 	umull	r2, r3, r2, r3
 800240a:	0c9a      	lsrs	r2, r3, #18
 800240c:	4613      	mov	r3, r2
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	005b      	lsls	r3, r3, #1
 8002414:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002416:	e002      	b.n	800241e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3b01      	subs	r3, #1
 800241c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f9      	bne.n	8002418 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3714      	adds	r7, #20
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	10000012 	.word	0x10000012
 8002440:	40012000 	.word	0x40012000
 8002444:	40012300 	.word	0x40012300
 8002448:	20000000 	.word	0x20000000
 800244c:	431bde83 	.word	0x431bde83

08002450 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002458:	4b78      	ldr	r3, [pc, #480]	; (800263c <ADC_Init+0x1ec>)
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	4a77      	ldr	r2, [pc, #476]	; (800263c <ADC_Init+0x1ec>)
 800245e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002462:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002464:	4b75      	ldr	r3, [pc, #468]	; (800263c <ADC_Init+0x1ec>)
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	4973      	ldr	r1, [pc, #460]	; (800263c <ADC_Init+0x1ec>)
 800246e:	4313      	orrs	r3, r2
 8002470:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	685a      	ldr	r2, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002480:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6859      	ldr	r1, [r3, #4]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691b      	ldr	r3, [r3, #16]
 800248c:	021a      	lsls	r2, r3, #8
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	685a      	ldr	r2, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80024a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6859      	ldr	r1, [r3, #4]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689a      	ldr	r2, [r3, #8]
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	430a      	orrs	r2, r1
 80024b6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	689a      	ldr	r2, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024c6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	6899      	ldr	r1, [r3, #8]
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024de:	4a58      	ldr	r2, [pc, #352]	; (8002640 <ADC_Init+0x1f0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d022      	beq.n	800252a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	689a      	ldr	r2, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024f2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6899      	ldr	r1, [r3, #8]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	430a      	orrs	r2, r1
 8002504:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002514:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	6899      	ldr	r1, [r3, #8]
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	430a      	orrs	r2, r1
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	e00f      	b.n	800254a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002538:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002548:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	689a      	ldr	r2, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0202 	bic.w	r2, r2, #2
 8002558:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	6899      	ldr	r1, [r3, #8]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	699b      	ldr	r3, [r3, #24]
 8002564:	005a      	lsls	r2, r3, #1
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	430a      	orrs	r2, r1
 800256c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002586:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002596:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6859      	ldr	r1, [r3, #4]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a2:	3b01      	subs	r3, #1
 80025a4:	035a      	lsls	r2, r3, #13
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	430a      	orrs	r2, r1
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	e007      	b.n	80025c0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	685a      	ldr	r2, [r3, #4]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025be:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69db      	ldr	r3, [r3, #28]
 80025da:	3b01      	subs	r3, #1
 80025dc:	051a      	lsls	r2, r3, #20
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	430a      	orrs	r2, r1
 80025e4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	6899      	ldr	r1, [r3, #8]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002602:	025a      	lsls	r2, r3, #9
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	430a      	orrs	r2, r1
 800260a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	689a      	ldr	r2, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800261a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	6899      	ldr	r1, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	695b      	ldr	r3, [r3, #20]
 8002626:	029a      	lsls	r2, r3, #10
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	609a      	str	r2, [r3, #8]
}
 8002630:	bf00      	nop
 8002632:	370c      	adds	r7, #12
 8002634:	46bd      	mov	sp, r7
 8002636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263a:	4770      	bx	lr
 800263c:	40012300 	.word	0x40012300
 8002640:	0f000001 	.word	0x0f000001

08002644 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002644:	b480      	push	{r7}
 8002646:	b085      	sub	sp, #20
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f003 0307 	and.w	r3, r3, #7
 8002652:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002654:	4b0b      	ldr	r3, [pc, #44]	; (8002684 <__NVIC_SetPriorityGrouping+0x40>)
 8002656:	68db      	ldr	r3, [r3, #12]
 8002658:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800265a:	68ba      	ldr	r2, [r7, #8]
 800265c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002660:	4013      	ands	r3, r2
 8002662:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800266c:	4b06      	ldr	r3, [pc, #24]	; (8002688 <__NVIC_SetPriorityGrouping+0x44>)
 800266e:	4313      	orrs	r3, r2
 8002670:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002672:	4a04      	ldr	r2, [pc, #16]	; (8002684 <__NVIC_SetPriorityGrouping+0x40>)
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	60d3      	str	r3, [r2, #12]
}
 8002678:	bf00      	nop
 800267a:	3714      	adds	r7, #20
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr
 8002684:	e000ed00 	.word	0xe000ed00
 8002688:	05fa0000 	.word	0x05fa0000

0800268c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002690:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	0a1b      	lsrs	r3, r3, #8
 8002696:	f003 0307 	and.w	r3, r3, #7
}
 800269a:	4618      	mov	r0, r3
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	e000ed00 	.word	0xe000ed00

080026a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	db0b      	blt.n	80026d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026ba:	79fb      	ldrb	r3, [r7, #7]
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4907      	ldr	r1, [pc, #28]	; (80026e0 <__NVIC_EnableIRQ+0x38>)
 80026c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	2001      	movs	r0, #1
 80026ca:	fa00 f202 	lsl.w	r2, r0, r2
 80026ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	e000e100 	.word	0xe000e100

080026e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	6039      	str	r1, [r7, #0]
 80026ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	db0a      	blt.n	800270e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	b2da      	uxtb	r2, r3
 80026fc:	490c      	ldr	r1, [pc, #48]	; (8002730 <__NVIC_SetPriority+0x4c>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	0112      	lsls	r2, r2, #4
 8002704:	b2d2      	uxtb	r2, r2
 8002706:	440b      	add	r3, r1
 8002708:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800270c:	e00a      	b.n	8002724 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	b2da      	uxtb	r2, r3
 8002712:	4908      	ldr	r1, [pc, #32]	; (8002734 <__NVIC_SetPriority+0x50>)
 8002714:	79fb      	ldrb	r3, [r7, #7]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	3b04      	subs	r3, #4
 800271c:	0112      	lsls	r2, r2, #4
 800271e:	b2d2      	uxtb	r2, r2
 8002720:	440b      	add	r3, r1
 8002722:	761a      	strb	r2, [r3, #24]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	e000e100 	.word	0xe000e100
 8002734:	e000ed00 	.word	0xe000ed00

08002738 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002738:	b480      	push	{r7}
 800273a:	b089      	sub	sp, #36	; 0x24
 800273c:	af00      	add	r7, sp, #0
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	60b9      	str	r1, [r7, #8]
 8002742:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	f003 0307 	and.w	r3, r3, #7
 800274a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800274c:	69fb      	ldr	r3, [r7, #28]
 800274e:	f1c3 0307 	rsb	r3, r3, #7
 8002752:	2b04      	cmp	r3, #4
 8002754:	bf28      	it	cs
 8002756:	2304      	movcs	r3, #4
 8002758:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800275a:	69fb      	ldr	r3, [r7, #28]
 800275c:	3304      	adds	r3, #4
 800275e:	2b06      	cmp	r3, #6
 8002760:	d902      	bls.n	8002768 <NVIC_EncodePriority+0x30>
 8002762:	69fb      	ldr	r3, [r7, #28]
 8002764:	3b03      	subs	r3, #3
 8002766:	e000      	b.n	800276a <NVIC_EncodePriority+0x32>
 8002768:	2300      	movs	r3, #0
 800276a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800276c:	f04f 32ff 	mov.w	r2, #4294967295
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	fa02 f303 	lsl.w	r3, r2, r3
 8002776:	43da      	mvns	r2, r3
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	401a      	ands	r2, r3
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002780:	f04f 31ff 	mov.w	r1, #4294967295
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	fa01 f303 	lsl.w	r3, r1, r3
 800278a:	43d9      	mvns	r1, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002790:	4313      	orrs	r3, r2
         );
}
 8002792:	4618      	mov	r0, r3
 8002794:	3724      	adds	r7, #36	; 0x24
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b082      	sub	sp, #8
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3b01      	subs	r3, #1
 80027ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80027b0:	d301      	bcc.n	80027b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80027b2:	2301      	movs	r3, #1
 80027b4:	e00f      	b.n	80027d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80027b6:	4a0a      	ldr	r2, [pc, #40]	; (80027e0 <SysTick_Config+0x40>)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	3b01      	subs	r3, #1
 80027bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80027be:	210f      	movs	r1, #15
 80027c0:	f04f 30ff 	mov.w	r0, #4294967295
 80027c4:	f7ff ff8e 	bl	80026e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80027c8:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <SysTick_Config+0x40>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027ce:	4b04      	ldr	r3, [pc, #16]	; (80027e0 <SysTick_Config+0x40>)
 80027d0:	2207      	movs	r2, #7
 80027d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3708      	adds	r7, #8
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd80      	pop	{r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000e010 	.word	0xe000e010

080027e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027ec:	6878      	ldr	r0, [r7, #4]
 80027ee:	f7ff ff29 	bl	8002644 <__NVIC_SetPriorityGrouping>
}
 80027f2:	bf00      	nop
 80027f4:	3708      	adds	r7, #8
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b086      	sub	sp, #24
 80027fe:	af00      	add	r7, sp, #0
 8002800:	4603      	mov	r3, r0
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002808:	2300      	movs	r3, #0
 800280a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800280c:	f7ff ff3e 	bl	800268c <__NVIC_GetPriorityGrouping>
 8002810:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002812:	687a      	ldr	r2, [r7, #4]
 8002814:	68b9      	ldr	r1, [r7, #8]
 8002816:	6978      	ldr	r0, [r7, #20]
 8002818:	f7ff ff8e 	bl	8002738 <NVIC_EncodePriority>
 800281c:	4602      	mov	r2, r0
 800281e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002822:	4611      	mov	r1, r2
 8002824:	4618      	mov	r0, r3
 8002826:	f7ff ff5d 	bl	80026e4 <__NVIC_SetPriority>
}
 800282a:	bf00      	nop
 800282c:	3718      	adds	r7, #24
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
 8002838:	4603      	mov	r3, r0
 800283a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800283c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff31 	bl	80026a8 <__NVIC_EnableIRQ>
}
 8002846:	bf00      	nop
 8002848:	3708      	adds	r7, #8
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}

0800284e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800284e:	b580      	push	{r7, lr}
 8002850:	b082      	sub	sp, #8
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f7ff ffa2 	bl	80027a0 <SysTick_Config>
 800285c:	4603      	mov	r3, r0
}
 800285e:	4618      	mov	r0, r3
 8002860:	3708      	adds	r7, #8
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
	...

08002868 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b086      	sub	sp, #24
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002874:	f7ff fc22 	bl	80020bc <HAL_GetTick>
 8002878:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d101      	bne.n	8002884 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e099      	b.n	80029b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2202      	movs	r2, #2
 8002888:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f022 0201 	bic.w	r2, r2, #1
 80028a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028a4:	e00f      	b.n	80028c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028a6:	f7ff fc09 	bl	80020bc <HAL_GetTick>
 80028aa:	4602      	mov	r2, r0
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	1ad3      	subs	r3, r2, r3
 80028b0:	2b05      	cmp	r3, #5
 80028b2:	d908      	bls.n	80028c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2220      	movs	r2, #32
 80028b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2203      	movs	r2, #3
 80028be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e078      	b.n	80029b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0301 	and.w	r3, r3, #1
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1e8      	bne.n	80028a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4b38      	ldr	r3, [pc, #224]	; (80029c0 <HAL_DMA_Init+0x158>)
 80028e0:	4013      	ands	r3, r2
 80028e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80028fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	699b      	ldr	r3, [r3, #24]
 8002904:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6a1b      	ldr	r3, [r3, #32]
 8002910:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002912:	697a      	ldr	r2, [r7, #20]
 8002914:	4313      	orrs	r3, r2
 8002916:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800291c:	2b04      	cmp	r3, #4
 800291e:	d107      	bne.n	8002930 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002928:	4313      	orrs	r3, r2
 800292a:	697a      	ldr	r2, [r7, #20]
 800292c:	4313      	orrs	r3, r2
 800292e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	697a      	ldr	r2, [r7, #20]
 8002936:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	695b      	ldr	r3, [r3, #20]
 800293e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002940:	697b      	ldr	r3, [r7, #20]
 8002942:	f023 0307 	bic.w	r3, r3, #7
 8002946:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800294c:	697a      	ldr	r2, [r7, #20]
 800294e:	4313      	orrs	r3, r2
 8002950:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002956:	2b04      	cmp	r3, #4
 8002958:	d117      	bne.n	800298a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295e:	697a      	ldr	r2, [r7, #20]
 8002960:	4313      	orrs	r3, r2
 8002962:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002968:	2b00      	cmp	r3, #0
 800296a:	d00e      	beq.n	800298a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f000 f9e9 	bl	8002d44 <DMA_CheckFifoParam>
 8002972:	4603      	mov	r3, r0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d008      	beq.n	800298a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2240      	movs	r2, #64	; 0x40
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2201      	movs	r2, #1
 8002982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002986:	2301      	movs	r3, #1
 8002988:	e016      	b.n	80029b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	697a      	ldr	r2, [r7, #20]
 8002990:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f9a0 	bl	8002cd8 <DMA_CalcBaseAndBitshift>
 8002998:	4603      	mov	r3, r0
 800299a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a0:	223f      	movs	r2, #63	; 0x3f
 80029a2:	409a      	lsls	r2, r3
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2201      	movs	r2, #1
 80029b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80029b6:	2300      	movs	r3, #0
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	3718      	adds	r7, #24
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	f010803f 	.word	0xf010803f

080029c4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80029cc:	2300      	movs	r3, #0
 80029ce:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80029d0:	4b8e      	ldr	r3, [pc, #568]	; (8002c0c <HAL_DMA_IRQHandler+0x248>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a8e      	ldr	r2, [pc, #568]	; (8002c10 <HAL_DMA_IRQHandler+0x24c>)
 80029d6:	fba2 2303 	umull	r2, r3, r2, r3
 80029da:	0a9b      	lsrs	r3, r3, #10
 80029dc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80029e4:	693b      	ldr	r3, [r7, #16]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ee:	2208      	movs	r2, #8
 80029f0:	409a      	lsls	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01a      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d013      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f022 0204 	bic.w	r2, r2, #4
 8002a16:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a1c:	2208      	movs	r2, #8
 8002a1e:	409a      	lsls	r2, r3
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	f043 0201 	orr.w	r2, r3, #1
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a34:	2201      	movs	r2, #1
 8002a36:	409a      	lsls	r2, r3
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d012      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	695b      	ldr	r3, [r3, #20]
 8002a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d00b      	beq.n	8002a66 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a52:	2201      	movs	r2, #1
 8002a54:	409a      	lsls	r2, r3
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a5e:	f043 0202 	orr.w	r2, r3, #2
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a6a:	2204      	movs	r2, #4
 8002a6c:	409a      	lsls	r2, r3
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	4013      	ands	r3, r2
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d012      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0302 	and.w	r3, r3, #2
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a88:	2204      	movs	r2, #4
 8002a8a:	409a      	lsls	r2, r3
 8002a8c:	693b      	ldr	r3, [r7, #16]
 8002a8e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a94:	f043 0204 	orr.w	r2, r3, #4
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002aa0:	2210      	movs	r2, #16
 8002aa2:	409a      	lsls	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	4013      	ands	r3, r2
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d043      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0308 	and.w	r3, r3, #8
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d03c      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	2210      	movs	r2, #16
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d018      	beq.n	8002b06 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d108      	bne.n	8002af4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d024      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	4798      	blx	r3
 8002af2:	e01f      	b.n	8002b34 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d01b      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	4798      	blx	r3
 8002b04:	e016      	b.n	8002b34 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d107      	bne.n	8002b24 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f022 0208 	bic.w	r2, r2, #8
 8002b22:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d003      	beq.n	8002b34 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b38:	2220      	movs	r2, #32
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 808f 	beq.w	8002c64 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0310 	and.w	r3, r3, #16
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8087 	beq.w	8002c64 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	409a      	lsls	r2, r3
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b05      	cmp	r3, #5
 8002b6c:	d136      	bne.n	8002bdc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 0216 	bic.w	r2, r2, #22
 8002b7c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	695a      	ldr	r2, [r3, #20]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002b8c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <HAL_DMA_IRQHandler+0x1da>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d007      	beq.n	8002bae <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681a      	ldr	r2, [r3, #0]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f022 0208 	bic.w	r2, r2, #8
 8002bac:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb2:	223f      	movs	r2, #63	; 0x3f
 8002bb4:	409a      	lsls	r2, r3
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d07e      	beq.n	8002cd0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	4798      	blx	r3
        }
        return;
 8002bda:	e079      	b.n	8002cd0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d01d      	beq.n	8002c26 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d10d      	bne.n	8002c14 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d031      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	4798      	blx	r3
 8002c08:	e02c      	b.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
 8002c0a:	bf00      	nop
 8002c0c:	20000000 	.word	0x20000000
 8002c10:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d023      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	4798      	blx	r3
 8002c24:	e01e      	b.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d10f      	bne.n	8002c54 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f022 0210 	bic.w	r2, r2, #16
 8002c42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2200      	movs	r2, #0
 8002c50:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d003      	beq.n	8002c64 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d032      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c70:	f003 0301 	and.w	r3, r3, #1
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d022      	beq.n	8002cbe <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2205      	movs	r2, #5
 8002c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	3301      	adds	r3, #1
 8002c94:	60bb      	str	r3, [r7, #8]
 8002c96:	697a      	ldr	r2, [r7, #20]
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d307      	bcc.n	8002cac <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d1f2      	bne.n	8002c90 <HAL_DMA_IRQHandler+0x2cc>
 8002caa:	e000      	b.n	8002cae <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002cac:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d005      	beq.n	8002cd2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	4798      	blx	r3
 8002cce:	e000      	b.n	8002cd2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002cd0:	bf00      	nop
    }
  }
}
 8002cd2:	3718      	adds	r7, #24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b085      	sub	sp, #20
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	3b10      	subs	r3, #16
 8002ce8:	4a13      	ldr	r2, [pc, #76]	; (8002d38 <DMA_CalcBaseAndBitshift+0x60>)
 8002cea:	fba2 2303 	umull	r2, r3, r2, r3
 8002cee:	091b      	lsrs	r3, r3, #4
 8002cf0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002cf2:	4a12      	ldr	r2, [pc, #72]	; (8002d3c <DMA_CalcBaseAndBitshift+0x64>)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	2b03      	cmp	r3, #3
 8002d04:	d908      	bls.n	8002d18 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <DMA_CalcBaseAndBitshift+0x68>)
 8002d0e:	4013      	ands	r3, r2
 8002d10:	1d1a      	adds	r2, r3, #4
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	659a      	str	r2, [r3, #88]	; 0x58
 8002d16:	e006      	b.n	8002d26 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <DMA_CalcBaseAndBitshift+0x68>)
 8002d20:	4013      	ands	r3, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3714      	adds	r7, #20
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	aaaaaaab 	.word	0xaaaaaaab
 8002d3c:	0801532c 	.word	0x0801532c
 8002d40:	fffffc00 	.word	0xfffffc00

08002d44 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d54:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	699b      	ldr	r3, [r3, #24]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d11f      	bne.n	8002d9e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d856      	bhi.n	8002e12 <DMA_CheckFifoParam+0xce>
 8002d64:	a201      	add	r2, pc, #4	; (adr r2, 8002d6c <DMA_CheckFifoParam+0x28>)
 8002d66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d6a:	bf00      	nop
 8002d6c:	08002d7d 	.word	0x08002d7d
 8002d70:	08002d8f 	.word	0x08002d8f
 8002d74:	08002d7d 	.word	0x08002d7d
 8002d78:	08002e13 	.word	0x08002e13
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d80:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d046      	beq.n	8002e16 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d8c:	e043      	b.n	8002e16 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d96:	d140      	bne.n	8002e1a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002d98:	2301      	movs	r3, #1
 8002d9a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d9c:	e03d      	b.n	8002e1a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	699b      	ldr	r3, [r3, #24]
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da6:	d121      	bne.n	8002dec <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b03      	cmp	r3, #3
 8002dac:	d837      	bhi.n	8002e1e <DMA_CheckFifoParam+0xda>
 8002dae:	a201      	add	r2, pc, #4	; (adr r2, 8002db4 <DMA_CheckFifoParam+0x70>)
 8002db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002dcb 	.word	0x08002dcb
 8002dbc:	08002dc5 	.word	0x08002dc5
 8002dc0:	08002ddd 	.word	0x08002ddd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002dc4:	2301      	movs	r3, #1
 8002dc6:	73fb      	strb	r3, [r7, #15]
      break;
 8002dc8:	e030      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d025      	beq.n	8002e22 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dda:	e022      	b.n	8002e22 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002de0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002de4:	d11f      	bne.n	8002e26 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002dea:	e01c      	b.n	8002e26 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d903      	bls.n	8002dfa <DMA_CheckFifoParam+0xb6>
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d003      	beq.n	8002e00 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002df8:	e018      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	73fb      	strb	r3, [r7, #15]
      break;
 8002dfe:	e015      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00e      	beq.n	8002e2a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002e10:	e00b      	b.n	8002e2a <DMA_CheckFifoParam+0xe6>
      break;
 8002e12:	bf00      	nop
 8002e14:	e00a      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e16:	bf00      	nop
 8002e18:	e008      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e1a:	bf00      	nop
 8002e1c:	e006      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e1e:	bf00      	nop
 8002e20:	e004      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e22:	bf00      	nop
 8002e24:	e002      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;   
 8002e26:	bf00      	nop
 8002e28:	e000      	b.n	8002e2c <DMA_CheckFifoParam+0xe8>
      break;
 8002e2a:	bf00      	nop
    }
  } 
  
  return status; 
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3714      	adds	r7, #20
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop

08002e3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e46:	2300      	movs	r3, #0
 8002e48:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e56:	2300      	movs	r3, #0
 8002e58:	61fb      	str	r3, [r7, #28]
 8002e5a:	e175      	b.n	8003148 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	fa02 f303 	lsl.w	r3, r2, r3
 8002e64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	4013      	ands	r3, r2
 8002e6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e70:	693a      	ldr	r2, [r7, #16]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	f040 8164 	bne.w	8003142 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f003 0303 	and.w	r3, r3, #3
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d005      	beq.n	8002e92 <HAL_GPIO_Init+0x56>
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	f003 0303 	and.w	r3, r3, #3
 8002e8e:	2b02      	cmp	r3, #2
 8002e90:	d130      	bne.n	8002ef4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	005b      	lsls	r3, r3, #1
 8002e9c:	2203      	movs	r2, #3
 8002e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea2:	43db      	mvns	r3, r3
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	4013      	ands	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	68da      	ldr	r2, [r3, #12]
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	69ba      	ldr	r2, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ec8:	2201      	movs	r2, #1
 8002eca:	69fb      	ldr	r3, [r7, #28]
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43db      	mvns	r3, r3
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	685b      	ldr	r3, [r3, #4]
 8002edc:	091b      	lsrs	r3, r3, #4
 8002ede:	f003 0201 	and.w	r2, r3, #1
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	69ba      	ldr	r2, [r7, #24]
 8002ef2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f003 0303 	and.w	r3, r3, #3
 8002efc:	2b03      	cmp	r3, #3
 8002efe:	d017      	beq.n	8002f30 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	005b      	lsls	r3, r3, #1
 8002f0a:	2203      	movs	r2, #3
 8002f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	689a      	ldr	r2, [r3, #8]
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	005b      	lsls	r3, r3, #1
 8002f20:	fa02 f303 	lsl.w	r3, r2, r3
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	69ba      	ldr	r2, [r7, #24]
 8002f2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	f003 0303 	and.w	r3, r3, #3
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d123      	bne.n	8002f84 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	08da      	lsrs	r2, r3, #3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	3208      	adds	r2, #8
 8002f44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	220f      	movs	r2, #15
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43db      	mvns	r3, r3
 8002f5a:	69ba      	ldr	r2, [r7, #24]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	691a      	ldr	r2, [r3, #16]
 8002f64:	69fb      	ldr	r3, [r7, #28]
 8002f66:	f003 0307 	and.w	r3, r3, #7
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	69ba      	ldr	r2, [r7, #24]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	08da      	lsrs	r2, r3, #3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	3208      	adds	r2, #8
 8002f7e:	69b9      	ldr	r1, [r7, #24]
 8002f80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	2203      	movs	r2, #3
 8002f90:	fa02 f303 	lsl.w	r3, r2, r3
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f003 0203 	and.w	r2, r3, #3
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	69ba      	ldr	r2, [r7, #24]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	69ba      	ldr	r2, [r7, #24]
 8002fb6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 80be 	beq.w	8003142 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fc6:	4b66      	ldr	r3, [pc, #408]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	4a65      	ldr	r2, [pc, #404]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fd2:	4b63      	ldr	r3, [pc, #396]	; (8003160 <HAL_GPIO_Init+0x324>)
 8002fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fda:	60fb      	str	r3, [r7, #12]
 8002fdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fde:	4a61      	ldr	r2, [pc, #388]	; (8003164 <HAL_GPIO_Init+0x328>)
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	089b      	lsrs	r3, r3, #2
 8002fe4:	3302      	adds	r3, #2
 8002fe6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	f003 0303 	and.w	r3, r3, #3
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	220f      	movs	r2, #15
 8002ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffa:	43db      	mvns	r3, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4013      	ands	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a58      	ldr	r2, [pc, #352]	; (8003168 <HAL_GPIO_Init+0x32c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d037      	beq.n	800307a <HAL_GPIO_Init+0x23e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a57      	ldr	r2, [pc, #348]	; (800316c <HAL_GPIO_Init+0x330>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d031      	beq.n	8003076 <HAL_GPIO_Init+0x23a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a56      	ldr	r2, [pc, #344]	; (8003170 <HAL_GPIO_Init+0x334>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d02b      	beq.n	8003072 <HAL_GPIO_Init+0x236>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a55      	ldr	r2, [pc, #340]	; (8003174 <HAL_GPIO_Init+0x338>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d025      	beq.n	800306e <HAL_GPIO_Init+0x232>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a54      	ldr	r2, [pc, #336]	; (8003178 <HAL_GPIO_Init+0x33c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d01f      	beq.n	800306a <HAL_GPIO_Init+0x22e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a53      	ldr	r2, [pc, #332]	; (800317c <HAL_GPIO_Init+0x340>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d019      	beq.n	8003066 <HAL_GPIO_Init+0x22a>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	4a52      	ldr	r2, [pc, #328]	; (8003180 <HAL_GPIO_Init+0x344>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0x226>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	4a51      	ldr	r2, [pc, #324]	; (8003184 <HAL_GPIO_Init+0x348>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d00d      	beq.n	800305e <HAL_GPIO_Init+0x222>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	4a50      	ldr	r2, [pc, #320]	; (8003188 <HAL_GPIO_Init+0x34c>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d007      	beq.n	800305a <HAL_GPIO_Init+0x21e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	4a4f      	ldr	r2, [pc, #316]	; (800318c <HAL_GPIO_Init+0x350>)
 800304e:	4293      	cmp	r3, r2
 8003050:	d101      	bne.n	8003056 <HAL_GPIO_Init+0x21a>
 8003052:	2309      	movs	r3, #9
 8003054:	e012      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003056:	230a      	movs	r3, #10
 8003058:	e010      	b.n	800307c <HAL_GPIO_Init+0x240>
 800305a:	2308      	movs	r3, #8
 800305c:	e00e      	b.n	800307c <HAL_GPIO_Init+0x240>
 800305e:	2307      	movs	r3, #7
 8003060:	e00c      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003062:	2306      	movs	r3, #6
 8003064:	e00a      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003066:	2305      	movs	r3, #5
 8003068:	e008      	b.n	800307c <HAL_GPIO_Init+0x240>
 800306a:	2304      	movs	r3, #4
 800306c:	e006      	b.n	800307c <HAL_GPIO_Init+0x240>
 800306e:	2303      	movs	r3, #3
 8003070:	e004      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003072:	2302      	movs	r3, #2
 8003074:	e002      	b.n	800307c <HAL_GPIO_Init+0x240>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <HAL_GPIO_Init+0x240>
 800307a:	2300      	movs	r3, #0
 800307c:	69fa      	ldr	r2, [r7, #28]
 800307e:	f002 0203 	and.w	r2, r2, #3
 8003082:	0092      	lsls	r2, r2, #2
 8003084:	4093      	lsls	r3, r2
 8003086:	69ba      	ldr	r2, [r7, #24]
 8003088:	4313      	orrs	r3, r2
 800308a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800308c:	4935      	ldr	r1, [pc, #212]	; (8003164 <HAL_GPIO_Init+0x328>)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	089b      	lsrs	r3, r3, #2
 8003092:	3302      	adds	r3, #2
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800309a:	4b3d      	ldr	r3, [pc, #244]	; (8003190 <HAL_GPIO_Init+0x354>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	43db      	mvns	r3, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4013      	ands	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80030b6:	69ba      	ldr	r2, [r7, #24]
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80030be:	4a34      	ldr	r2, [pc, #208]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030c0:	69bb      	ldr	r3, [r7, #24]
 80030c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030c4:	4b32      	ldr	r3, [pc, #200]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	43db      	mvns	r3, r3
 80030ce:	69ba      	ldr	r2, [r7, #24]
 80030d0:	4013      	ands	r3, r2
 80030d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d003      	beq.n	80030e8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030e8:	4a29      	ldr	r2, [pc, #164]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ee:	4b28      	ldr	r3, [pc, #160]	; (8003190 <HAL_GPIO_Init+0x354>)
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d003      	beq.n	8003112 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800310a:	69ba      	ldr	r2, [r7, #24]
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003112:	4a1f      	ldr	r2, [pc, #124]	; (8003190 <HAL_GPIO_Init+0x354>)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003118:	4b1d      	ldr	r3, [pc, #116]	; (8003190 <HAL_GPIO_Init+0x354>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	43db      	mvns	r3, r3
 8003122:	69ba      	ldr	r2, [r7, #24]
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003128:	683b      	ldr	r3, [r7, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d003      	beq.n	800313c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003134:	69ba      	ldr	r2, [r7, #24]
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	4313      	orrs	r3, r2
 800313a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800313c:	4a14      	ldr	r2, [pc, #80]	; (8003190 <HAL_GPIO_Init+0x354>)
 800313e:	69bb      	ldr	r3, [r7, #24]
 8003140:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	3301      	adds	r3, #1
 8003146:	61fb      	str	r3, [r7, #28]
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	2b0f      	cmp	r3, #15
 800314c:	f67f ae86 	bls.w	8002e5c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003150:	bf00      	nop
 8003152:	bf00      	nop
 8003154:	3724      	adds	r7, #36	; 0x24
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40023800 	.word	0x40023800
 8003164:	40013800 	.word	0x40013800
 8003168:	40020000 	.word	0x40020000
 800316c:	40020400 	.word	0x40020400
 8003170:	40020800 	.word	0x40020800
 8003174:	40020c00 	.word	0x40020c00
 8003178:	40021000 	.word	0x40021000
 800317c:	40021400 	.word	0x40021400
 8003180:	40021800 	.word	0x40021800
 8003184:	40021c00 	.word	0x40021c00
 8003188:	40022000 	.word	0x40022000
 800318c:	40022400 	.word	0x40022400
 8003190:	40013c00 	.word	0x40013c00

08003194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	460b      	mov	r3, r1
 800319e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	691a      	ldr	r2, [r3, #16]
 80031a4:	887b      	ldrh	r3, [r7, #2]
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d002      	beq.n	80031b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80031ac:	2301      	movs	r3, #1
 80031ae:	73fb      	strb	r3, [r7, #15]
 80031b0:	e001      	b.n	80031b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80031b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3714      	adds	r7, #20
 80031bc:	46bd      	mov	sp, r7
 80031be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c2:	4770      	bx	lr

080031c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	807b      	strh	r3, [r7, #2]
 80031d0:	4613      	mov	r3, r2
 80031d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80031d4:	787b      	ldrb	r3, [r7, #1]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d003      	beq.n	80031e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80031da:	887a      	ldrh	r2, [r7, #2]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80031e0:	e003      	b.n	80031ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80031e2:	887b      	ldrh	r3, [r7, #2]
 80031e4:	041a      	lsls	r2, r3, #16
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	619a      	str	r2, [r3, #24]
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr

080031f6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b085      	sub	sp, #20
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
 80031fe:	460b      	mov	r3, r1
 8003200:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003208:	887a      	ldrh	r2, [r7, #2]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	4013      	ands	r3, r2
 800320e:	041a      	lsls	r2, r3, #16
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	43d9      	mvns	r1, r3
 8003214:	887b      	ldrh	r3, [r7, #2]
 8003216:	400b      	ands	r3, r1
 8003218:	431a      	orrs	r2, r3
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	619a      	str	r2, [r3, #24]
}
 800321e:	bf00      	nop
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr

0800322a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800322a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800322c:	b08f      	sub	sp, #60	; 0x3c
 800322e:	af0a      	add	r7, sp, #40	; 0x28
 8003230:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d101      	bne.n	800323c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e054      	b.n	80032e6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d106      	bne.n	800325c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f00f f820 	bl	801229c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2203      	movs	r2, #3
 8003260:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003268:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800326c:	2b00      	cmp	r3, #0
 800326e:	d102      	bne.n	8003276 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f007 fae3 	bl	800a846 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	687e      	ldr	r6, [r7, #4]
 8003288:	466d      	mov	r5, sp
 800328a:	f106 0410 	add.w	r4, r6, #16
 800328e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003290:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003292:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003294:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003296:	e894 0003 	ldmia.w	r4, {r0, r1}
 800329a:	e885 0003 	stmia.w	r5, {r0, r1}
 800329e:	1d33      	adds	r3, r6, #4
 80032a0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032a2:	6838      	ldr	r0, [r7, #0]
 80032a4:	f007 f9c4 	bl	800a630 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	2101      	movs	r1, #1
 80032ae:	4618      	mov	r0, r3
 80032b0:	f007 fada 	bl	800a868 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	687e      	ldr	r6, [r7, #4]
 80032bc:	466d      	mov	r5, sp
 80032be:	f106 0410 	add.w	r4, r6, #16
 80032c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80032c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80032ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80032ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80032d2:	1d33      	adds	r3, r6, #4
 80032d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032d6:	6838      	ldr	r0, [r7, #0]
 80032d8:	f008 fe16 	bl	800bf08 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3714      	adds	r7, #20
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032ee <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80032ee:	b590      	push	{r4, r7, lr}
 80032f0:	b089      	sub	sp, #36	; 0x24
 80032f2:	af04      	add	r7, sp, #16
 80032f4:	6078      	str	r0, [r7, #4]
 80032f6:	4608      	mov	r0, r1
 80032f8:	4611      	mov	r1, r2
 80032fa:	461a      	mov	r2, r3
 80032fc:	4603      	mov	r3, r0
 80032fe:	70fb      	strb	r3, [r7, #3]
 8003300:	460b      	mov	r3, r1
 8003302:	70bb      	strb	r3, [r7, #2]
 8003304:	4613      	mov	r3, r2
 8003306:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800330e:	2b01      	cmp	r3, #1
 8003310:	d101      	bne.n	8003316 <HAL_HCD_HC_Init+0x28>
 8003312:	2302      	movs	r3, #2
 8003314:	e076      	b.n	8003404 <HAL_HCD_HC_Init+0x116>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800331e:	78fb      	ldrb	r3, [r7, #3]
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	212c      	movs	r1, #44	; 0x2c
 8003324:	fb01 f303 	mul.w	r3, r1, r3
 8003328:	4413      	add	r3, r2
 800332a:	333d      	adds	r3, #61	; 0x3d
 800332c:	2200      	movs	r2, #0
 800332e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003330:	78fb      	ldrb	r3, [r7, #3]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	212c      	movs	r1, #44	; 0x2c
 8003336:	fb01 f303 	mul.w	r3, r1, r3
 800333a:	4413      	add	r3, r2
 800333c:	3338      	adds	r3, #56	; 0x38
 800333e:	787a      	ldrb	r2, [r7, #1]
 8003340:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003342:	78fb      	ldrb	r3, [r7, #3]
 8003344:	687a      	ldr	r2, [r7, #4]
 8003346:	212c      	movs	r1, #44	; 0x2c
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	3340      	adds	r3, #64	; 0x40
 8003350:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003352:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003354:	78fb      	ldrb	r3, [r7, #3]
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	212c      	movs	r1, #44	; 0x2c
 800335a:	fb01 f303 	mul.w	r3, r1, r3
 800335e:	4413      	add	r3, r2
 8003360:	3339      	adds	r3, #57	; 0x39
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003366:	78fb      	ldrb	r3, [r7, #3]
 8003368:	687a      	ldr	r2, [r7, #4]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	333f      	adds	r3, #63	; 0x3f
 8003374:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003378:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800337a:	78fb      	ldrb	r3, [r7, #3]
 800337c:	78ba      	ldrb	r2, [r7, #2]
 800337e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003382:	b2d0      	uxtb	r0, r2
 8003384:	687a      	ldr	r2, [r7, #4]
 8003386:	212c      	movs	r1, #44	; 0x2c
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	333a      	adds	r3, #58	; 0x3a
 8003390:	4602      	mov	r2, r0
 8003392:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003394:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003398:	2b00      	cmp	r3, #0
 800339a:	da09      	bge.n	80033b0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800339c:	78fb      	ldrb	r3, [r7, #3]
 800339e:	687a      	ldr	r2, [r7, #4]
 80033a0:	212c      	movs	r1, #44	; 0x2c
 80033a2:	fb01 f303 	mul.w	r3, r1, r3
 80033a6:	4413      	add	r3, r2
 80033a8:	333b      	adds	r3, #59	; 0x3b
 80033aa:	2201      	movs	r2, #1
 80033ac:	701a      	strb	r2, [r3, #0]
 80033ae:	e008      	b.n	80033c2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80033b0:	78fb      	ldrb	r3, [r7, #3]
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	212c      	movs	r1, #44	; 0x2c
 80033b6:	fb01 f303 	mul.w	r3, r1, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	333b      	adds	r3, #59	; 0x3b
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	212c      	movs	r1, #44	; 0x2c
 80033c8:	fb01 f303 	mul.w	r3, r1, r3
 80033cc:	4413      	add	r3, r2
 80033ce:	333c      	adds	r3, #60	; 0x3c
 80033d0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80033d4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6818      	ldr	r0, [r3, #0]
 80033da:	787c      	ldrb	r4, [r7, #1]
 80033dc:	78ba      	ldrb	r2, [r7, #2]
 80033de:	78f9      	ldrb	r1, [r7, #3]
 80033e0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80033e2:	9302      	str	r3, [sp, #8]
 80033e4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80033e8:	9301      	str	r3, [sp, #4]
 80033ea:	f897 3020 	ldrb.w	r3, [r7, #32]
 80033ee:	9300      	str	r3, [sp, #0]
 80033f0:	4623      	mov	r3, r4
 80033f2:	f008 ff03 	bl	800c1fc <USB_HC_Init>
 80033f6:	4603      	mov	r3, r0
 80033f8:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003402:	7bfb      	ldrb	r3, [r7, #15]
}
 8003404:	4618      	mov	r0, r3
 8003406:	3714      	adds	r7, #20
 8003408:	46bd      	mov	sp, r7
 800340a:	bd90      	pop	{r4, r7, pc}

0800340c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	460b      	mov	r3, r1
 8003416:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003422:	2b01      	cmp	r3, #1
 8003424:	d101      	bne.n	800342a <HAL_HCD_HC_Halt+0x1e>
 8003426:	2302      	movs	r3, #2
 8003428:	e00f      	b.n	800344a <HAL_HCD_HC_Halt+0x3e>
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2201      	movs	r2, #1
 800342e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	78fa      	ldrb	r2, [r7, #3]
 8003438:	4611      	mov	r1, r2
 800343a:	4618      	mov	r0, r3
 800343c:	f009 f953 	bl	800c6e6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003448:	7bfb      	ldrb	r3, [r7, #15]
}
 800344a:	4618      	mov	r0, r3
 800344c:	3710      	adds	r7, #16
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
	...

08003454 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
 800345c:	4608      	mov	r0, r1
 800345e:	4611      	mov	r1, r2
 8003460:	461a      	mov	r2, r3
 8003462:	4603      	mov	r3, r0
 8003464:	70fb      	strb	r3, [r7, #3]
 8003466:	460b      	mov	r3, r1
 8003468:	70bb      	strb	r3, [r7, #2]
 800346a:	4613      	mov	r3, r2
 800346c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800346e:	78fb      	ldrb	r3, [r7, #3]
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	212c      	movs	r1, #44	; 0x2c
 8003474:	fb01 f303 	mul.w	r3, r1, r3
 8003478:	4413      	add	r3, r2
 800347a:	333b      	adds	r3, #59	; 0x3b
 800347c:	78ba      	ldrb	r2, [r7, #2]
 800347e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	212c      	movs	r1, #44	; 0x2c
 8003486:	fb01 f303 	mul.w	r3, r1, r3
 800348a:	4413      	add	r3, r2
 800348c:	333f      	adds	r3, #63	; 0x3f
 800348e:	787a      	ldrb	r2, [r7, #1]
 8003490:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003492:	7c3b      	ldrb	r3, [r7, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d112      	bne.n	80034be <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3342      	adds	r3, #66	; 0x42
 80034a6:	2203      	movs	r2, #3
 80034a8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	333d      	adds	r3, #61	; 0x3d
 80034b8:	7f3a      	ldrb	r2, [r7, #28]
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e008      	b.n	80034d0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	212c      	movs	r1, #44	; 0x2c
 80034c4:	fb01 f303 	mul.w	r3, r1, r3
 80034c8:	4413      	add	r3, r2
 80034ca:	3342      	adds	r3, #66	; 0x42
 80034cc:	2202      	movs	r2, #2
 80034ce:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	f200 80c6 	bhi.w	8003664 <HAL_HCD_HC_SubmitRequest+0x210>
 80034d8:	a201      	add	r2, pc, #4	; (adr r2, 80034e0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80034da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034de:	bf00      	nop
 80034e0:	080034f1 	.word	0x080034f1
 80034e4:	08003651 	.word	0x08003651
 80034e8:	08003555 	.word	0x08003555
 80034ec:	080035d3 	.word	0x080035d3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80034f0:	7c3b      	ldrb	r3, [r7, #16]
 80034f2:	2b01      	cmp	r3, #1
 80034f4:	f040 80b8 	bne.w	8003668 <HAL_HCD_HC_SubmitRequest+0x214>
 80034f8:	78bb      	ldrb	r3, [r7, #2]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f040 80b4 	bne.w	8003668 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003500:	8b3b      	ldrh	r3, [r7, #24]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d108      	bne.n	8003518 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8003506:	78fb      	ldrb	r3, [r7, #3]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	212c      	movs	r1, #44	; 0x2c
 800350c:	fb01 f303 	mul.w	r3, r1, r3
 8003510:	4413      	add	r3, r2
 8003512:	3355      	adds	r3, #85	; 0x55
 8003514:	2201      	movs	r2, #1
 8003516:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003518:	78fb      	ldrb	r3, [r7, #3]
 800351a:	687a      	ldr	r2, [r7, #4]
 800351c:	212c      	movs	r1, #44	; 0x2c
 800351e:	fb01 f303 	mul.w	r3, r1, r3
 8003522:	4413      	add	r3, r2
 8003524:	3355      	adds	r3, #85	; 0x55
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d109      	bne.n	8003540 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800352c:	78fb      	ldrb	r3, [r7, #3]
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	212c      	movs	r1, #44	; 0x2c
 8003532:	fb01 f303 	mul.w	r3, r1, r3
 8003536:	4413      	add	r3, r2
 8003538:	3342      	adds	r3, #66	; 0x42
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800353e:	e093      	b.n	8003668 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003540:	78fb      	ldrb	r3, [r7, #3]
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	212c      	movs	r1, #44	; 0x2c
 8003546:	fb01 f303 	mul.w	r3, r1, r3
 800354a:	4413      	add	r3, r2
 800354c:	3342      	adds	r3, #66	; 0x42
 800354e:	2202      	movs	r2, #2
 8003550:	701a      	strb	r2, [r3, #0]
      break;
 8003552:	e089      	b.n	8003668 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003554:	78bb      	ldrb	r3, [r7, #2]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d11d      	bne.n	8003596 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800355a:	78fb      	ldrb	r3, [r7, #3]
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	212c      	movs	r1, #44	; 0x2c
 8003560:	fb01 f303 	mul.w	r3, r1, r3
 8003564:	4413      	add	r3, r2
 8003566:	3355      	adds	r3, #85	; 0x55
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d109      	bne.n	8003582 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3342      	adds	r3, #66	; 0x42
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003580:	e073      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	212c      	movs	r1, #44	; 0x2c
 8003588:	fb01 f303 	mul.w	r3, r1, r3
 800358c:	4413      	add	r3, r2
 800358e:	3342      	adds	r3, #66	; 0x42
 8003590:	2202      	movs	r2, #2
 8003592:	701a      	strb	r2, [r3, #0]
      break;
 8003594:	e069      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003596:	78fb      	ldrb	r3, [r7, #3]
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	212c      	movs	r1, #44	; 0x2c
 800359c:	fb01 f303 	mul.w	r3, r1, r3
 80035a0:	4413      	add	r3, r2
 80035a2:	3354      	adds	r3, #84	; 0x54
 80035a4:	781b      	ldrb	r3, [r3, #0]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035aa:	78fb      	ldrb	r3, [r7, #3]
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	212c      	movs	r1, #44	; 0x2c
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	4413      	add	r3, r2
 80035b6:	3342      	adds	r3, #66	; 0x42
 80035b8:	2200      	movs	r2, #0
 80035ba:	701a      	strb	r2, [r3, #0]
      break;
 80035bc:	e055      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80035be:	78fb      	ldrb	r3, [r7, #3]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	212c      	movs	r1, #44	; 0x2c
 80035c4:	fb01 f303 	mul.w	r3, r1, r3
 80035c8:	4413      	add	r3, r2
 80035ca:	3342      	adds	r3, #66	; 0x42
 80035cc:	2202      	movs	r2, #2
 80035ce:	701a      	strb	r2, [r3, #0]
      break;
 80035d0:	e04b      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80035d2:	78bb      	ldrb	r3, [r7, #2]
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d11d      	bne.n	8003614 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80035d8:	78fb      	ldrb	r3, [r7, #3]
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	212c      	movs	r1, #44	; 0x2c
 80035de:	fb01 f303 	mul.w	r3, r1, r3
 80035e2:	4413      	add	r3, r2
 80035e4:	3355      	adds	r3, #85	; 0x55
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d109      	bne.n	8003600 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80035ec:	78fb      	ldrb	r3, [r7, #3]
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	212c      	movs	r1, #44	; 0x2c
 80035f2:	fb01 f303 	mul.w	r3, r1, r3
 80035f6:	4413      	add	r3, r2
 80035f8:	3342      	adds	r3, #66	; 0x42
 80035fa:	2200      	movs	r2, #0
 80035fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80035fe:	e034      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003600:	78fb      	ldrb	r3, [r7, #3]
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	212c      	movs	r1, #44	; 0x2c
 8003606:	fb01 f303 	mul.w	r3, r1, r3
 800360a:	4413      	add	r3, r2
 800360c:	3342      	adds	r3, #66	; 0x42
 800360e:	2202      	movs	r2, #2
 8003610:	701a      	strb	r2, [r3, #0]
      break;
 8003612:	e02a      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003614:	78fb      	ldrb	r3, [r7, #3]
 8003616:	687a      	ldr	r2, [r7, #4]
 8003618:	212c      	movs	r1, #44	; 0x2c
 800361a:	fb01 f303 	mul.w	r3, r1, r3
 800361e:	4413      	add	r3, r2
 8003620:	3354      	adds	r3, #84	; 0x54
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	212c      	movs	r1, #44	; 0x2c
 800362e:	fb01 f303 	mul.w	r3, r1, r3
 8003632:	4413      	add	r3, r2
 8003634:	3342      	adds	r3, #66	; 0x42
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
      break;
 800363a:	e016      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800363c:	78fb      	ldrb	r3, [r7, #3]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	212c      	movs	r1, #44	; 0x2c
 8003642:	fb01 f303 	mul.w	r3, r1, r3
 8003646:	4413      	add	r3, r2
 8003648:	3342      	adds	r3, #66	; 0x42
 800364a:	2202      	movs	r2, #2
 800364c:	701a      	strb	r2, [r3, #0]
      break;
 800364e:	e00c      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003650:	78fb      	ldrb	r3, [r7, #3]
 8003652:	687a      	ldr	r2, [r7, #4]
 8003654:	212c      	movs	r1, #44	; 0x2c
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	4413      	add	r3, r2
 800365c:	3342      	adds	r3, #66	; 0x42
 800365e:	2200      	movs	r2, #0
 8003660:	701a      	strb	r2, [r3, #0]
      break;
 8003662:	e002      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003664:	bf00      	nop
 8003666:	e000      	b.n	800366a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003668:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800366a:	78fb      	ldrb	r3, [r7, #3]
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	212c      	movs	r1, #44	; 0x2c
 8003670:	fb01 f303 	mul.w	r3, r1, r3
 8003674:	4413      	add	r3, r2
 8003676:	3344      	adds	r3, #68	; 0x44
 8003678:	697a      	ldr	r2, [r7, #20]
 800367a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800367c:	78fb      	ldrb	r3, [r7, #3]
 800367e:	8b3a      	ldrh	r2, [r7, #24]
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	202c      	movs	r0, #44	; 0x2c
 8003684:	fb00 f303 	mul.w	r3, r0, r3
 8003688:	440b      	add	r3, r1
 800368a:	334c      	adds	r3, #76	; 0x4c
 800368c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	687a      	ldr	r2, [r7, #4]
 8003692:	212c      	movs	r1, #44	; 0x2c
 8003694:	fb01 f303 	mul.w	r3, r1, r3
 8003698:	4413      	add	r3, r2
 800369a:	3360      	adds	r3, #96	; 0x60
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80036a0:	78fb      	ldrb	r3, [r7, #3]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	212c      	movs	r1, #44	; 0x2c
 80036a6:	fb01 f303 	mul.w	r3, r1, r3
 80036aa:	4413      	add	r3, r2
 80036ac:	3350      	adds	r3, #80	; 0x50
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036b2:	78fb      	ldrb	r3, [r7, #3]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	212c      	movs	r1, #44	; 0x2c
 80036b8:	fb01 f303 	mul.w	r3, r1, r3
 80036bc:	4413      	add	r3, r2
 80036be:	3339      	adds	r3, #57	; 0x39
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	212c      	movs	r1, #44	; 0x2c
 80036ca:	fb01 f303 	mul.w	r3, r1, r3
 80036ce:	4413      	add	r3, r2
 80036d0:	3361      	adds	r3, #97	; 0x61
 80036d2:	2200      	movs	r2, #0
 80036d4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	222c      	movs	r2, #44	; 0x2c
 80036de:	fb02 f303 	mul.w	r3, r2, r3
 80036e2:	3338      	adds	r3, #56	; 0x38
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	18d1      	adds	r1, r2, r3
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	461a      	mov	r2, r3
 80036f0:	f008 fea6 	bl	800c440 <USB_HC_StartXfer>
 80036f4:	4603      	mov	r3, r0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop

08003700 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b086      	sub	sp, #24
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f008 fb32 	bl	800bd80 <USB_GetMode>
 800371c:	4603      	mov	r3, r0
 800371e:	2b01      	cmp	r3, #1
 8003720:	f040 80f6 	bne.w	8003910 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	4618      	mov	r0, r3
 800372a:	f008 fa75 	bl	800bc18 <USB_ReadInterrupts>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	f000 80ec 	beq.w	800390e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4618      	mov	r0, r3
 800373c:	f008 fa6c 	bl	800bc18 <USB_ReadInterrupts>
 8003740:	4603      	mov	r3, r0
 8003742:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003746:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800374a:	d104      	bne.n	8003756 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003754:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4618      	mov	r0, r3
 800375c:	f008 fa5c 	bl	800bc18 <USB_ReadInterrupts>
 8003760:	4603      	mov	r3, r0
 8003762:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800376a:	d104      	bne.n	8003776 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003774:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f008 fa4c 	bl	800bc18 <USB_ReadInterrupts>
 8003780:	4603      	mov	r3, r0
 8003782:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003786:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800378a:	d104      	bne.n	8003796 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003794:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	4618      	mov	r0, r3
 800379c:	f008 fa3c 	bl	800bc18 <USB_ReadInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b02      	cmp	r3, #2
 80037a8:	d103      	bne.n	80037b2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2202      	movs	r2, #2
 80037b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4618      	mov	r0, r3
 80037b8:	f008 fa2e 	bl	800bc18 <USB_ReadInterrupts>
 80037bc:	4603      	mov	r3, r0
 80037be:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80037c6:	d11c      	bne.n	8003802 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80037d0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10f      	bne.n	8003802 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80037e2:	2110      	movs	r1, #16
 80037e4:	6938      	ldr	r0, [r7, #16]
 80037e6:	f007 f9e9 	bl	800abbc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80037ea:	6938      	ldr	r0, [r7, #16]
 80037ec:	f007 fa1a 	bl	800ac24 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2101      	movs	r1, #1
 80037f6:	4618      	mov	r0, r3
 80037f8:	f008 fc3a 	bl	800c070 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f00e fddb 	bl	80123b8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f008 fa06 	bl	800bc18 <USB_ReadInterrupts>
 800380c:	4603      	mov	r3, r0
 800380e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003812:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003816:	d102      	bne.n	800381e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003818:	6878      	ldr	r0, [r7, #4]
 800381a:	f001 f9ce 	bl	8004bba <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4618      	mov	r0, r3
 8003824:	f008 f9f8 	bl	800bc18 <USB_ReadInterrupts>
 8003828:	4603      	mov	r3, r0
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b08      	cmp	r3, #8
 8003830:	d106      	bne.n	8003840 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f00e fda4 	bl	8012380 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	2208      	movs	r2, #8
 800383e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4618      	mov	r0, r3
 8003846:	f008 f9e7 	bl	800bc18 <USB_ReadInterrupts>
 800384a:	4603      	mov	r3, r0
 800384c:	f003 0310 	and.w	r3, r3, #16
 8003850:	2b10      	cmp	r3, #16
 8003852:	d101      	bne.n	8003858 <HAL_HCD_IRQHandler+0x158>
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_HCD_IRQHandler+0x15a>
 8003858:	2300      	movs	r3, #0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d012      	beq.n	8003884 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0210 	bic.w	r2, r2, #16
 800386c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f001 f8d1 	bl	8004a16 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	699a      	ldr	r2, [r3, #24]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f042 0210 	orr.w	r2, r2, #16
 8003882:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f008 f9c5 	bl	800bc18 <USB_ReadInterrupts>
 800388e:	4603      	mov	r3, r0
 8003890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003894:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003898:	d13a      	bne.n	8003910 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f008 ff10 	bl	800c6c4 <USB_HC_ReadInterrupt>
 80038a4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
 80038aa:	e025      	b.n	80038f8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	68ba      	ldr	r2, [r7, #8]
 80038b4:	fa22 f303 	lsr.w	r3, r2, r3
 80038b8:	f003 0301 	and.w	r3, r3, #1
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d018      	beq.n	80038f2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80038d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038d6:	d106      	bne.n	80038e6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	b2db      	uxtb	r3, r3
 80038dc:	4619      	mov	r1, r3
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8ab 	bl	8003a3a <HCD_HC_IN_IRQHandler>
 80038e4:	e005      	b.n	80038f2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	4619      	mov	r1, r3
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 fcc6 	bl	800427e <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	3301      	adds	r3, #1
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	697a      	ldr	r2, [r7, #20]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d3d4      	bcc.n	80038ac <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800390a:	615a      	str	r2, [r3, #20]
 800390c:	e000      	b.n	8003910 <HAL_HCD_IRQHandler+0x210>
      return;
 800390e:	bf00      	nop
    }
  }
}
 8003910:	3718      	adds	r7, #24
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b082      	sub	sp, #8
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_HCD_Start+0x16>
 8003928:	2302      	movs	r3, #2
 800392a:	e013      	b.n	8003954 <HAL_HCD_Start+0x3e>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	2101      	movs	r1, #1
 800393a:	4618      	mov	r0, r3
 800393c:	f008 fbfc 	bl	800c138 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4618      	mov	r0, r3
 8003946:	f006 ff6d 	bl	800a824 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003952:	2300      	movs	r3, #0
}
 8003954:	4618      	mov	r0, r3
 8003956:	3708      	adds	r7, #8
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}

0800395c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b082      	sub	sp, #8
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800396a:	2b01      	cmp	r3, #1
 800396c:	d101      	bne.n	8003972 <HAL_HCD_Stop+0x16>
 800396e:	2302      	movs	r3, #2
 8003970:	e00d      	b.n	800398e <HAL_HCD_Stop+0x32>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4618      	mov	r0, r3
 8003980:	f008 ffea 	bl	800c958 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3708      	adds	r7, #8
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}

08003996 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003996:	b580      	push	{r7, lr}
 8003998:	b082      	sub	sp, #8
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f008 fb9e 	bl	800c0e4 <USB_ResetPort>
 80039a8:	4603      	mov	r3, r0
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3708      	adds	r7, #8
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	212c      	movs	r1, #44	; 0x2c
 80039c4:	fb01 f303 	mul.w	r3, r1, r3
 80039c8:	4413      	add	r3, r2
 80039ca:	3360      	adds	r3, #96	; 0x60
 80039cc:	781b      	ldrb	r3, [r3, #0]
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	370c      	adds	r7, #12
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr

080039da <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
 80039e2:	460b      	mov	r3, r1
 80039e4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80039e6:	78fb      	ldrb	r3, [r7, #3]
 80039e8:	687a      	ldr	r2, [r7, #4]
 80039ea:	212c      	movs	r1, #44	; 0x2c
 80039ec:	fb01 f303 	mul.w	r3, r1, r3
 80039f0:	4413      	add	r3, r2
 80039f2:	3350      	adds	r3, #80	; 0x50
 80039f4:	681b      	ldr	r3, [r3, #0]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f008 fbe2 	bl	800c1d8 <USB_GetCurrentFrame>
 8003a14:	4603      	mov	r3, r0
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4618      	mov	r0, r3
 8003a2c:	f008 fbbd 	bl	800c1aa <USB_GetHostSpeed>
 8003a30:	4603      	mov	r3, r0
}
 8003a32:	4618      	mov	r0, r3
 8003a34:	3708      	adds	r7, #8
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b086      	sub	sp, #24
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	460b      	mov	r3, r1
 8003a44:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a4c:	697b      	ldr	r3, [r7, #20]
 8003a4e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003a50:	78fb      	ldrb	r3, [r7, #3]
 8003a52:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	b2d2      	uxtb	r2, r2
 8003a5c:	4611      	mov	r1, r2
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f008 f8ed 	bl	800bc3e <USB_ReadChInterrupts>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f003 0304 	and.w	r3, r3, #4
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d11a      	bne.n	8003aa4 <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2304      	movs	r3, #4
 8003a7e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	2207      	movs	r2, #7
 8003a90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68fa      	ldr	r2, [r7, #12]
 8003a98:	b2d2      	uxtb	r2, r2
 8003a9a:	4611      	mov	r1, r2
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f008 fe22 	bl	800c6e6 <USB_HC_Halt>
 8003aa2:	e0a2      	b.n	8003bea <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	68fa      	ldr	r2, [r7, #12]
 8003aaa:	b2d2      	uxtb	r2, r2
 8003aac:	4611      	mov	r1, r2
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f008 f8c5 	bl	800bc3e <USB_ReadChInterrupts>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003abe:	d11b      	bne.n	8003af8 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	461a      	mov	r2, r3
 8003ace:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ad2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003ad4:	687a      	ldr	r2, [r7, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	212c      	movs	r1, #44	; 0x2c
 8003ada:	fb01 f303 	mul.w	r3, r1, r3
 8003ade:	4413      	add	r3, r2
 8003ae0:	3361      	adds	r3, #97	; 0x61
 8003ae2:	2208      	movs	r2, #8
 8003ae4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	b2d2      	uxtb	r2, r2
 8003aee:	4611      	mov	r1, r2
 8003af0:	4618      	mov	r0, r3
 8003af2:	f008 fdf8 	bl	800c6e6 <USB_HC_Halt>
 8003af6:	e078      	b.n	8003bea <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	b2d2      	uxtb	r2, r2
 8003b00:	4611      	mov	r1, r2
 8003b02:	4618      	mov	r0, r3
 8003b04:	f008 f89b 	bl	800bc3e <USB_ReadChInterrupts>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	f003 0308 	and.w	r3, r3, #8
 8003b0e:	2b08      	cmp	r3, #8
 8003b10:	d11a      	bne.n	8003b48 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	015a      	lsls	r2, r3, #5
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	4413      	add	r3, r2
 8003b1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b1e:	461a      	mov	r2, r3
 8003b20:	2308      	movs	r3, #8
 8003b22:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003b24:	687a      	ldr	r2, [r7, #4]
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	212c      	movs	r1, #44	; 0x2c
 8003b2a:	fb01 f303 	mul.w	r3, r1, r3
 8003b2e:	4413      	add	r3, r2
 8003b30:	3361      	adds	r3, #97	; 0x61
 8003b32:	2206      	movs	r2, #6
 8003b34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	b2d2      	uxtb	r2, r2
 8003b3e:	4611      	mov	r1, r2
 8003b40:	4618      	mov	r0, r3
 8003b42:	f008 fdd0 	bl	800c6e6 <USB_HC_Halt>
 8003b46:	e050      	b.n	8003bea <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f008 f873 	bl	800bc3e <USB_ReadChInterrupts>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b62:	d11b      	bne.n	8003b9c <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	015a      	lsls	r2, r3, #5
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	4413      	add	r3, r2
 8003b6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b70:	461a      	mov	r2, r3
 8003b72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b76:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003b78:	687a      	ldr	r2, [r7, #4]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	212c      	movs	r1, #44	; 0x2c
 8003b7e:	fb01 f303 	mul.w	r3, r1, r3
 8003b82:	4413      	add	r3, r2
 8003b84:	3361      	adds	r3, #97	; 0x61
 8003b86:	2209      	movs	r2, #9
 8003b88:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68fa      	ldr	r2, [r7, #12]
 8003b90:	b2d2      	uxtb	r2, r2
 8003b92:	4611      	mov	r1, r2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f008 fda6 	bl	800c6e6 <USB_HC_Halt>
 8003b9a:	e026      	b.n	8003bea <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	b2d2      	uxtb	r2, r2
 8003ba4:	4611      	mov	r1, r2
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f008 f849 	bl	800bc3e <USB_ReadChInterrupts>
 8003bac:	4603      	mov	r3, r0
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b80      	cmp	r3, #128	; 0x80
 8003bb4:	d119      	bne.n	8003bea <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	015a      	lsls	r2, r3, #5
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	4413      	add	r3, r2
 8003bbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc2:	461a      	mov	r2, r3
 8003bc4:	2380      	movs	r3, #128	; 0x80
 8003bc6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	212c      	movs	r1, #44	; 0x2c
 8003bce:	fb01 f303 	mul.w	r3, r1, r3
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3361      	adds	r3, #97	; 0x61
 8003bd6:	2207      	movs	r2, #7
 8003bd8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	68fa      	ldr	r2, [r7, #12]
 8003be0:	b2d2      	uxtb	r2, r2
 8003be2:	4611      	mov	r1, r2
 8003be4:	4618      	mov	r0, r3
 8003be6:	f008 fd7e 	bl	800c6e6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68fa      	ldr	r2, [r7, #12]
 8003bf0:	b2d2      	uxtb	r2, r2
 8003bf2:	4611      	mov	r1, r2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f008 f822 	bl	800bc3e <USB_ReadChInterrupts>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c04:	d112      	bne.n	8003c2c <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68fa      	ldr	r2, [r7, #12]
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	4611      	mov	r1, r2
 8003c10:	4618      	mov	r0, r3
 8003c12:	f008 fd68 	bl	800c6e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c22:	461a      	mov	r2, r3
 8003c24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c28:	6093      	str	r3, [r2, #8]
 8003c2a:	e325      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	b2d2      	uxtb	r2, r2
 8003c34:	4611      	mov	r1, r2
 8003c36:	4618      	mov	r0, r3
 8003c38:	f008 f801 	bl	800bc3e <USB_ReadChInterrupts>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	f003 0301 	and.w	r3, r3, #1
 8003c42:	2b01      	cmp	r3, #1
 8003c44:	f040 80e8 	bne.w	8003e18 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	015a      	lsls	r2, r3, #5
 8003c4c:	693b      	ldr	r3, [r7, #16]
 8003c4e:	4413      	add	r3, r2
 8003c50:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c54:	461a      	mov	r2, r3
 8003c56:	2320      	movs	r3, #32
 8003c58:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d019      	beq.n	8003c96 <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c62:	687a      	ldr	r2, [r7, #4]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	212c      	movs	r1, #44	; 0x2c
 8003c68:	fb01 f303 	mul.w	r3, r1, r3
 8003c6c:	4413      	add	r3, r2
 8003c6e:	3348      	adds	r3, #72	; 0x48
 8003c70:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	0159      	lsls	r1, r3, #5
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	440b      	add	r3, r1
 8003c7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c7e:	691b      	ldr	r3, [r3, #16]
 8003c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003c84:	1ad2      	subs	r2, r2, r3
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	202c      	movs	r0, #44	; 0x2c
 8003c8c:	fb00 f303 	mul.w	r3, r0, r3
 8003c90:	440b      	add	r3, r1
 8003c92:	3350      	adds	r3, #80	; 0x50
 8003c94:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 8003c96:	687a      	ldr	r2, [r7, #4]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	212c      	movs	r1, #44	; 0x2c
 8003c9c:	fb01 f303 	mul.w	r3, r1, r3
 8003ca0:	4413      	add	r3, r2
 8003ca2:	3361      	adds	r3, #97	; 0x61
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	335c      	adds	r3, #92	; 0x5c
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	015a      	lsls	r2, r3, #5
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	4413      	add	r3, r2
 8003cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc6:	461a      	mov	r2, r3
 8003cc8:	2301      	movs	r3, #1
 8003cca:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	212c      	movs	r1, #44	; 0x2c
 8003cd2:	fb01 f303 	mul.w	r3, r1, r3
 8003cd6:	4413      	add	r3, r2
 8003cd8:	333f      	adds	r3, #63	; 0x3f
 8003cda:	781b      	ldrb	r3, [r3, #0]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d009      	beq.n	8003cf4 <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	212c      	movs	r1, #44	; 0x2c
 8003ce6:	fb01 f303 	mul.w	r3, r1, r3
 8003cea:	4413      	add	r3, r2
 8003cec:	333f      	adds	r3, #63	; 0x3f
 8003cee:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003cf0:	2b02      	cmp	r3, #2
 8003cf2:	d111      	bne.n	8003d18 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	68fa      	ldr	r2, [r7, #12]
 8003cfa:	b2d2      	uxtb	r2, r2
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f008 fcf1 	bl	800c6e6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d10:	461a      	mov	r2, r3
 8003d12:	2310      	movs	r3, #16
 8003d14:	6093      	str	r3, [r2, #8]
 8003d16:	e03a      	b.n	8003d8e <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	212c      	movs	r1, #44	; 0x2c
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	333f      	adds	r3, #63	; 0x3f
 8003d26:	781b      	ldrb	r3, [r3, #0]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d009      	beq.n	8003d40 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003d2c:	687a      	ldr	r2, [r7, #4]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	212c      	movs	r1, #44	; 0x2c
 8003d32:	fb01 f303 	mul.w	r3, r1, r3
 8003d36:	4413      	add	r3, r2
 8003d38:	333f      	adds	r3, #63	; 0x3f
 8003d3a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d126      	bne.n	8003d8e <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	015a      	lsls	r2, r3, #5
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	4413      	add	r3, r2
 8003d48:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	0151      	lsls	r1, r2, #5
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	440a      	add	r2, r1
 8003d56:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003d5a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003d5e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	212c      	movs	r1, #44	; 0x2c
 8003d66:	fb01 f303 	mul.w	r3, r1, r3
 8003d6a:	4413      	add	r3, r2
 8003d6c:	3360      	adds	r3, #96	; 0x60
 8003d6e:	2201      	movs	r2, #1
 8003d70:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	b2d9      	uxtb	r1, r3
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	202c      	movs	r0, #44	; 0x2c
 8003d7c:	fb00 f303 	mul.w	r3, r0, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	3360      	adds	r3, #96	; 0x60
 8003d84:	781b      	ldrb	r3, [r3, #0]
 8003d86:	461a      	mov	r2, r3
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f00e fb23 	bl	80123d4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d12b      	bne.n	8003dee <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	212c      	movs	r1, #44	; 0x2c
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	4413      	add	r3, r2
 8003da2:	3348      	adds	r3, #72	; 0x48
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6879      	ldr	r1, [r7, #4]
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	202c      	movs	r0, #44	; 0x2c
 8003dac:	fb00 f202 	mul.w	r2, r0, r2
 8003db0:	440a      	add	r2, r1
 8003db2:	3240      	adds	r2, #64	; 0x40
 8003db4:	8812      	ldrh	r2, [r2, #0]
 8003db6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dba:	f003 0301 	and.w	r3, r3, #1
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	f000 825a 	beq.w	8004278 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dc4:	687a      	ldr	r2, [r7, #4]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	212c      	movs	r1, #44	; 0x2c
 8003dca:	fb01 f303 	mul.w	r3, r1, r3
 8003dce:	4413      	add	r3, r2
 8003dd0:	3354      	adds	r3, #84	; 0x54
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	f083 0301 	eor.w	r3, r3, #1
 8003dd8:	b2d8      	uxtb	r0, r3
 8003dda:	687a      	ldr	r2, [r7, #4]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	212c      	movs	r1, #44	; 0x2c
 8003de0:	fb01 f303 	mul.w	r3, r1, r3
 8003de4:	4413      	add	r3, r2
 8003de6:	3354      	adds	r3, #84	; 0x54
 8003de8:	4602      	mov	r2, r0
 8003dea:	701a      	strb	r2, [r3, #0]
 8003dec:	e244      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3354      	adds	r3, #84	; 0x54
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	f083 0301 	eor.w	r3, r3, #1
 8003e02:	b2d8      	uxtb	r0, r3
 8003e04:	687a      	ldr	r2, [r7, #4]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	212c      	movs	r1, #44	; 0x2c
 8003e0a:	fb01 f303 	mul.w	r3, r1, r3
 8003e0e:	4413      	add	r3, r2
 8003e10:	3354      	adds	r3, #84	; 0x54
 8003e12:	4602      	mov	r2, r0
 8003e14:	701a      	strb	r2, [r3, #0]
 8003e16:	e22f      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68fa      	ldr	r2, [r7, #12]
 8003e1e:	b2d2      	uxtb	r2, r2
 8003e20:	4611      	mov	r1, r2
 8003e22:	4618      	mov	r0, r3
 8003e24:	f007 ff0b 	bl	800bc3e <USB_ReadChInterrupts>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	f003 0320 	and.w	r3, r3, #32
 8003e2e:	2b20      	cmp	r3, #32
 8003e30:	d109      	bne.n	8003e46 <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e3e:	461a      	mov	r2, r3
 8003e40:	2320      	movs	r3, #32
 8003e42:	6093      	str	r3, [r2, #8]
 8003e44:	e218      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	b2d2      	uxtb	r2, r2
 8003e4e:	4611      	mov	r1, r2
 8003e50:	4618      	mov	r0, r3
 8003e52:	f007 fef4 	bl	800bc3e <USB_ReadChInterrupts>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f040 816b 	bne.w	8004138 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	015a      	lsls	r2, r3, #5
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	4413      	add	r3, r2
 8003e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e6e:	461a      	mov	r2, r3
 8003e70:	2302      	movs	r3, #2
 8003e72:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003e74:	687a      	ldr	r2, [r7, #4]
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	212c      	movs	r1, #44	; 0x2c
 8003e7a:	fb01 f303 	mul.w	r3, r1, r3
 8003e7e:	4413      	add	r3, r2
 8003e80:	3361      	adds	r3, #97	; 0x61
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d112      	bne.n	8003eae <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003e88:	687a      	ldr	r2, [r7, #4]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	212c      	movs	r1, #44	; 0x2c
 8003e8e:	fb01 f303 	mul.w	r3, r1, r3
 8003e92:	4413      	add	r3, r2
 8003e94:	3361      	adds	r3, #97	; 0x61
 8003e96:	2202      	movs	r2, #2
 8003e98:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003e9a:	687a      	ldr	r2, [r7, #4]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	212c      	movs	r1, #44	; 0x2c
 8003ea0:	fb01 f303 	mul.w	r3, r1, r3
 8003ea4:	4413      	add	r3, r2
 8003ea6:	3360      	adds	r3, #96	; 0x60
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	701a      	strb	r2, [r3, #0]
 8003eac:	e135      	b.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3361      	adds	r3, #97	; 0x61
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d112      	bne.n	8003ee8 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	212c      	movs	r1, #44	; 0x2c
 8003ec8:	fb01 f303 	mul.w	r3, r1, r3
 8003ecc:	4413      	add	r3, r2
 8003ece:	3361      	adds	r3, #97	; 0x61
 8003ed0:	2202      	movs	r2, #2
 8003ed2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	212c      	movs	r1, #44	; 0x2c
 8003eda:	fb01 f303 	mul.w	r3, r1, r3
 8003ede:	4413      	add	r3, r2
 8003ee0:	3360      	adds	r3, #96	; 0x60
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e118      	b.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003ee8:	687a      	ldr	r2, [r7, #4]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	212c      	movs	r1, #44	; 0x2c
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	4413      	add	r3, r2
 8003ef4:	3361      	adds	r3, #97	; 0x61
 8003ef6:	781b      	ldrb	r3, [r3, #0]
 8003ef8:	2b07      	cmp	r3, #7
 8003efa:	d009      	beq.n	8003f10 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	212c      	movs	r1, #44	; 0x2c
 8003f02:	fb01 f303 	mul.w	r3, r1, r3
 8003f06:	4413      	add	r3, r2
 8003f08:	3361      	adds	r3, #97	; 0x61
 8003f0a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003f0c:	2b09      	cmp	r3, #9
 8003f0e:	d159      	bne.n	8003fc4 <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3361      	adds	r3, #97	; 0x61
 8003f1e:	2202      	movs	r2, #2
 8003f20:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	335c      	adds	r3, #92	; 0x5c
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	1c5a      	adds	r2, r3, #1
 8003f34:	6879      	ldr	r1, [r7, #4]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	202c      	movs	r0, #44	; 0x2c
 8003f3a:	fb00 f303 	mul.w	r3, r0, r3
 8003f3e:	440b      	add	r3, r1
 8003f40:	335c      	adds	r3, #92	; 0x5c
 8003f42:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	212c      	movs	r1, #44	; 0x2c
 8003f4a:	fb01 f303 	mul.w	r3, r1, r3
 8003f4e:	4413      	add	r3, r2
 8003f50:	335c      	adds	r3, #92	; 0x5c
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d912      	bls.n	8003f7e <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f58:	687a      	ldr	r2, [r7, #4]
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	212c      	movs	r1, #44	; 0x2c
 8003f5e:	fb01 f303 	mul.w	r3, r1, r3
 8003f62:	4413      	add	r3, r2
 8003f64:	335c      	adds	r3, #92	; 0x5c
 8003f66:	2200      	movs	r2, #0
 8003f68:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f6a:	687a      	ldr	r2, [r7, #4]
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	212c      	movs	r1, #44	; 0x2c
 8003f70:	fb01 f303 	mul.w	r3, r1, r3
 8003f74:	4413      	add	r3, r2
 8003f76:	3360      	adds	r3, #96	; 0x60
 8003f78:	2204      	movs	r2, #4
 8003f7a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003f7c:	e0cd      	b.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f7e:	687a      	ldr	r2, [r7, #4]
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	212c      	movs	r1, #44	; 0x2c
 8003f84:	fb01 f303 	mul.w	r3, r1, r3
 8003f88:	4413      	add	r3, r2
 8003f8a:	3360      	adds	r3, #96	; 0x60
 8003f8c:	2202      	movs	r2, #2
 8003f8e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003fa6:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003fae:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	461a      	mov	r2, r3
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003fc2:	e0aa      	b.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	212c      	movs	r1, #44	; 0x2c
 8003fca:	fb01 f303 	mul.w	r3, r1, r3
 8003fce:	4413      	add	r3, r2
 8003fd0:	3361      	adds	r3, #97	; 0x61
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	2b05      	cmp	r3, #5
 8003fd6:	d109      	bne.n	8003fec <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3361      	adds	r3, #97	; 0x61
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	701a      	strb	r2, [r3, #0]
 8003fea:	e096      	b.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3361      	adds	r3, #97	; 0x61
 8003ffa:	781b      	ldrb	r3, [r3, #0]
 8003ffc:	2b03      	cmp	r3, #3
 8003ffe:	d109      	bne.n	8004014 <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004000:	687a      	ldr	r2, [r7, #4]
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	212c      	movs	r1, #44	; 0x2c
 8004006:	fb01 f303 	mul.w	r3, r1, r3
 800400a:	4413      	add	r3, r2
 800400c:	3361      	adds	r3, #97	; 0x61
 800400e:	2202      	movs	r2, #2
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e082      	b.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	212c      	movs	r1, #44	; 0x2c
 800401a:	fb01 f303 	mul.w	r3, r1, r3
 800401e:	4413      	add	r3, r2
 8004020:	3361      	adds	r3, #97	; 0x61
 8004022:	781b      	ldrb	r3, [r3, #0]
 8004024:	2b04      	cmp	r3, #4
 8004026:	d13f      	bne.n	80040a8 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004028:	687a      	ldr	r2, [r7, #4]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	212c      	movs	r1, #44	; 0x2c
 800402e:	fb01 f303 	mul.w	r3, r1, r3
 8004032:	4413      	add	r3, r2
 8004034:	3361      	adds	r3, #97	; 0x61
 8004036:	2202      	movs	r2, #2
 8004038:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800403a:	687a      	ldr	r2, [r7, #4]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	212c      	movs	r1, #44	; 0x2c
 8004040:	fb01 f303 	mul.w	r3, r1, r3
 8004044:	4413      	add	r3, r2
 8004046:	3360      	adds	r3, #96	; 0x60
 8004048:	2202      	movs	r2, #2
 800404a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800404c:	687a      	ldr	r2, [r7, #4]
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	212c      	movs	r1, #44	; 0x2c
 8004052:	fb01 f303 	mul.w	r3, r1, r3
 8004056:	4413      	add	r3, r2
 8004058:	333f      	adds	r3, #63	; 0x3f
 800405a:	781b      	ldrb	r3, [r3, #0]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	212c      	movs	r1, #44	; 0x2c
 8004066:	fb01 f303 	mul.w	r3, r1, r3
 800406a:	4413      	add	r3, r2
 800406c:	333f      	adds	r3, #63	; 0x3f
 800406e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004070:	2b02      	cmp	r3, #2
 8004072:	d152      	bne.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	015a      	lsls	r2, r3, #5
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	4413      	add	r3, r2
 800407c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800408a:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004092:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	015a      	lsls	r2, r3, #5
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	4413      	add	r3, r2
 800409c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a0:	461a      	mov	r2, r3
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	6013      	str	r3, [r2, #0]
 80040a6:	e038      	b.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80040a8:	687a      	ldr	r2, [r7, #4]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	212c      	movs	r1, #44	; 0x2c
 80040ae:	fb01 f303 	mul.w	r3, r1, r3
 80040b2:	4413      	add	r3, r2
 80040b4:	3361      	adds	r3, #97	; 0x61
 80040b6:	781b      	ldrb	r3, [r3, #0]
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d123      	bne.n	8004104 <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	212c      	movs	r1, #44	; 0x2c
 80040c2:	fb01 f303 	mul.w	r3, r1, r3
 80040c6:	4413      	add	r3, r2
 80040c8:	3361      	adds	r3, #97	; 0x61
 80040ca:	2202      	movs	r2, #2
 80040cc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	212c      	movs	r1, #44	; 0x2c
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	4413      	add	r3, r2
 80040da:	335c      	adds	r3, #92	; 0x5c
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	1c5a      	adds	r2, r3, #1
 80040e0:	6879      	ldr	r1, [r7, #4]
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	202c      	movs	r0, #44	; 0x2c
 80040e6:	fb00 f303 	mul.w	r3, r0, r3
 80040ea:	440b      	add	r3, r1
 80040ec:	335c      	adds	r3, #92	; 0x5c
 80040ee:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	212c      	movs	r1, #44	; 0x2c
 80040f6:	fb01 f303 	mul.w	r3, r1, r3
 80040fa:	4413      	add	r3, r2
 80040fc:	3360      	adds	r3, #96	; 0x60
 80040fe:	2204      	movs	r2, #4
 8004100:	701a      	strb	r2, [r3, #0]
 8004102:	e00a      	b.n	800411a <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	212c      	movs	r1, #44	; 0x2c
 800410a:	fb01 f303 	mul.w	r3, r1, r3
 800410e:	4413      	add	r3, r2
 8004110:	3361      	adds	r3, #97	; 0x61
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	2b02      	cmp	r3, #2
 8004116:	f000 80ae 	beq.w	8004276 <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	b2d9      	uxtb	r1, r3
 800411e:	687a      	ldr	r2, [r7, #4]
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	202c      	movs	r0, #44	; 0x2c
 8004124:	fb00 f303 	mul.w	r3, r0, r3
 8004128:	4413      	add	r3, r2
 800412a:	3360      	adds	r3, #96	; 0x60
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	461a      	mov	r2, r3
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f00e f94f 	bl	80123d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004136:	e09f      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68fa      	ldr	r2, [r7, #12]
 800413e:	b2d2      	uxtb	r2, r2
 8004140:	4611      	mov	r1, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f007 fd7b 	bl	800bc3e <USB_ReadChInterrupts>
 8004148:	4603      	mov	r3, r0
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d123      	bne.n	800419a <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	015a      	lsls	r2, r3, #5
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	4413      	add	r3, r2
 800415a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800415e:	461a      	mov	r2, r3
 8004160:	2340      	movs	r3, #64	; 0x40
 8004162:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	212c      	movs	r1, #44	; 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	3361      	adds	r3, #97	; 0x61
 8004172:	2205      	movs	r2, #5
 8004174:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	335c      	adds	r3, #92	; 0x5c
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f008 faa7 	bl	800c6e6 <USB_HC_Halt>
 8004198:	e06e      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68fa      	ldr	r2, [r7, #12]
 80041a0:	b2d2      	uxtb	r2, r2
 80041a2:	4611      	mov	r1, r2
 80041a4:	4618      	mov	r0, r3
 80041a6:	f007 fd4a 	bl	800bc3e <USB_ReadChInterrupts>
 80041aa:	4603      	mov	r3, r0
 80041ac:	f003 0310 	and.w	r3, r3, #16
 80041b0:	2b10      	cmp	r3, #16
 80041b2:	d161      	bne.n	8004278 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80041b4:	687a      	ldr	r2, [r7, #4]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	212c      	movs	r1, #44	; 0x2c
 80041ba:	fb01 f303 	mul.w	r3, r1, r3
 80041be:	4413      	add	r3, r2
 80041c0:	333f      	adds	r3, #63	; 0x3f
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b03      	cmp	r3, #3
 80041c6:	d11a      	bne.n	80041fe <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	212c      	movs	r1, #44	; 0x2c
 80041ce:	fb01 f303 	mul.w	r3, r1, r3
 80041d2:	4413      	add	r3, r2
 80041d4:	335c      	adds	r3, #92	; 0x5c
 80041d6:	2200      	movs	r2, #0
 80041d8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 80041da:	687a      	ldr	r2, [r7, #4]
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	212c      	movs	r1, #44	; 0x2c
 80041e0:	fb01 f303 	mul.w	r3, r1, r3
 80041e4:	4413      	add	r3, r2
 80041e6:	3361      	adds	r3, #97	; 0x61
 80041e8:	2204      	movs	r2, #4
 80041ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	b2d2      	uxtb	r2, r2
 80041f4:	4611      	mov	r1, r2
 80041f6:	4618      	mov	r0, r3
 80041f8:	f008 fa75 	bl	800c6e6 <USB_HC_Halt>
 80041fc:	e031      	b.n	8004262 <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	212c      	movs	r1, #44	; 0x2c
 8004204:	fb01 f303 	mul.w	r3, r1, r3
 8004208:	4413      	add	r3, r2
 800420a:	333f      	adds	r3, #63	; 0x3f
 800420c:	781b      	ldrb	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d009      	beq.n	8004226 <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	212c      	movs	r1, #44	; 0x2c
 8004218:	fb01 f303 	mul.w	r3, r1, r3
 800421c:	4413      	add	r3, r2
 800421e:	333f      	adds	r3, #63	; 0x3f
 8004220:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004222:	2b02      	cmp	r3, #2
 8004224:	d11d      	bne.n	8004262 <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004226:	687a      	ldr	r2, [r7, #4]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	212c      	movs	r1, #44	; 0x2c
 800422c:	fb01 f303 	mul.w	r3, r1, r3
 8004230:	4413      	add	r3, r2
 8004232:	335c      	adds	r3, #92	; 0x5c
 8004234:	2200      	movs	r2, #0
 8004236:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	2b00      	cmp	r3, #0
 800423e:	d110      	bne.n	8004262 <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 8004240:	687a      	ldr	r2, [r7, #4]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	212c      	movs	r1, #44	; 0x2c
 8004246:	fb01 f303 	mul.w	r3, r1, r3
 800424a:	4413      	add	r3, r2
 800424c:	3361      	adds	r3, #97	; 0x61
 800424e:	2204      	movs	r2, #4
 8004250:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	b2d2      	uxtb	r2, r2
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f008 fa42 	bl	800c6e6 <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	015a      	lsls	r2, r3, #5
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	4413      	add	r3, r2
 800426a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800426e:	461a      	mov	r2, r3
 8004270:	2310      	movs	r3, #16
 8004272:	6093      	str	r3, [r2, #8]
 8004274:	e000      	b.n	8004278 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 8004276:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b088      	sub	sp, #32
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
 8004286:	460b      	mov	r3, r1
 8004288:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004290:	69fb      	ldr	r3, [r7, #28]
 8004292:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8004294:	78fb      	ldrb	r3, [r7, #3]
 8004296:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	697a      	ldr	r2, [r7, #20]
 800429e:	b2d2      	uxtb	r2, r2
 80042a0:	4611      	mov	r1, r2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f007 fccb 	bl	800bc3e <USB_ReadChInterrupts>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f003 0304 	and.w	r3, r3, #4
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d11a      	bne.n	80042e8 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80042be:	461a      	mov	r2, r3
 80042c0:	2304      	movs	r3, #4
 80042c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	212c      	movs	r1, #44	; 0x2c
 80042ca:	fb01 f303 	mul.w	r3, r1, r3
 80042ce:	4413      	add	r3, r2
 80042d0:	3361      	adds	r3, #97	; 0x61
 80042d2:	2207      	movs	r2, #7
 80042d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	b2d2      	uxtb	r2, r2
 80042de:	4611      	mov	r1, r2
 80042e0:	4618      	mov	r0, r3
 80042e2:	f008 fa00 	bl	800c6e6 <USB_HC_Halt>
 80042e6:	e393      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	4611      	mov	r1, r2
 80042f2:	4618      	mov	r0, r3
 80042f4:	f007 fca3 	bl	800bc3e <USB_ReadChInterrupts>
 80042f8:	4603      	mov	r3, r0
 80042fa:	f003 0320 	and.w	r3, r3, #32
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d137      	bne.n	8004372 <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	015a      	lsls	r2, r3, #5
 8004306:	69bb      	ldr	r3, [r7, #24]
 8004308:	4413      	add	r3, r2
 800430a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800430e:	461a      	mov	r2, r3
 8004310:	2320      	movs	r3, #32
 8004312:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 8004314:	687a      	ldr	r2, [r7, #4]
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	212c      	movs	r1, #44	; 0x2c
 800431a:	fb01 f303 	mul.w	r3, r1, r3
 800431e:	4413      	add	r3, r2
 8004320:	333d      	adds	r3, #61	; 0x3d
 8004322:	781b      	ldrb	r3, [r3, #0]
 8004324:	2b01      	cmp	r3, #1
 8004326:	f040 8373 	bne.w	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	212c      	movs	r1, #44	; 0x2c
 8004330:	fb01 f303 	mul.w	r3, r1, r3
 8004334:	4413      	add	r3, r2
 8004336:	333d      	adds	r3, #61	; 0x3d
 8004338:	2200      	movs	r2, #0
 800433a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800433c:	687a      	ldr	r2, [r7, #4]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	212c      	movs	r1, #44	; 0x2c
 8004342:	fb01 f303 	mul.w	r3, r1, r3
 8004346:	4413      	add	r3, r2
 8004348:	3360      	adds	r3, #96	; 0x60
 800434a:	2202      	movs	r2, #2
 800434c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	212c      	movs	r1, #44	; 0x2c
 8004354:	fb01 f303 	mul.w	r3, r1, r3
 8004358:	4413      	add	r3, r2
 800435a:	3361      	adds	r3, #97	; 0x61
 800435c:	2203      	movs	r2, #3
 800435e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	4611      	mov	r1, r2
 800436a:	4618      	mov	r0, r3
 800436c:	f008 f9bb 	bl	800c6e6 <USB_HC_Halt>
 8004370:	e34e      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	b2d2      	uxtb	r2, r2
 800437a:	4611      	mov	r1, r2
 800437c:	4618      	mov	r0, r3
 800437e:	f007 fc5e 	bl	800bc3e <USB_ReadChInterrupts>
 8004382:	4603      	mov	r3, r0
 8004384:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004388:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800438c:	d112      	bne.n	80043b4 <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800438e:	697b      	ldr	r3, [r7, #20]
 8004390:	015a      	lsls	r2, r3, #5
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	4413      	add	r3, r2
 8004396:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800439a:	461a      	mov	r2, r3
 800439c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	b2d2      	uxtb	r2, r2
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f008 f99a 	bl	800c6e6 <USB_HC_Halt>
 80043b2:	e32d      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	697a      	ldr	r2, [r7, #20]
 80043ba:	b2d2      	uxtb	r2, r2
 80043bc:	4611      	mov	r1, r2
 80043be:	4618      	mov	r0, r3
 80043c0:	f007 fc3d 	bl	800bc3e <USB_ReadChInterrupts>
 80043c4:	4603      	mov	r3, r0
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d142      	bne.n	8004454 <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80043ce:	687a      	ldr	r2, [r7, #4]
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	212c      	movs	r1, #44	; 0x2c
 80043d4:	fb01 f303 	mul.w	r3, r1, r3
 80043d8:	4413      	add	r3, r2
 80043da:	335c      	adds	r3, #92	; 0x5c
 80043dc:	2200      	movs	r2, #0
 80043de:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	b2d2      	uxtb	r2, r2
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f007 fc27 	bl	800bc3e <USB_ReadChInterrupts>
 80043f0:	4603      	mov	r3, r0
 80043f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043f6:	2b40      	cmp	r3, #64	; 0x40
 80043f8:	d111      	bne.n	800441e <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	212c      	movs	r1, #44	; 0x2c
 8004400:	fb01 f303 	mul.w	r3, r1, r3
 8004404:	4413      	add	r3, r2
 8004406:	333d      	adds	r3, #61	; 0x3d
 8004408:	2201      	movs	r2, #1
 800440a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800440c:	697b      	ldr	r3, [r7, #20]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	461a      	mov	r2, r3
 800441a:	2340      	movs	r3, #64	; 0x40
 800441c:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	015a      	lsls	r2, r3, #5
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	4413      	add	r3, r2
 8004426:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800442a:	461a      	mov	r2, r3
 800442c:	2301      	movs	r3, #1
 800442e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3361      	adds	r3, #97	; 0x61
 800443e:	2201      	movs	r2, #1
 8004440:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	697a      	ldr	r2, [r7, #20]
 8004448:	b2d2      	uxtb	r2, r2
 800444a:	4611      	mov	r1, r2
 800444c:	4618      	mov	r0, r3
 800444e:	f008 f94a 	bl	800c6e6 <USB_HC_Halt>
 8004452:	e2dd      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	b2d2      	uxtb	r2, r2
 800445c:	4611      	mov	r1, r2
 800445e:	4618      	mov	r0, r3
 8004460:	f007 fbed 	bl	800bc3e <USB_ReadChInterrupts>
 8004464:	4603      	mov	r3, r0
 8004466:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446a:	2b40      	cmp	r3, #64	; 0x40
 800446c:	d12c      	bne.n	80044c8 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	212c      	movs	r1, #44	; 0x2c
 8004474:	fb01 f303 	mul.w	r3, r1, r3
 8004478:	4413      	add	r3, r2
 800447a:	3361      	adds	r3, #97	; 0x61
 800447c:	2205      	movs	r2, #5
 800447e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	212c      	movs	r1, #44	; 0x2c
 8004486:	fb01 f303 	mul.w	r3, r1, r3
 800448a:	4413      	add	r3, r2
 800448c:	333d      	adds	r3, #61	; 0x3d
 800448e:	2201      	movs	r2, #1
 8004490:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	212c      	movs	r1, #44	; 0x2c
 8004498:	fb01 f303 	mul.w	r3, r1, r3
 800449c:	4413      	add	r3, r2
 800449e:	335c      	adds	r3, #92	; 0x5c
 80044a0:	2200      	movs	r2, #0
 80044a2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	697a      	ldr	r2, [r7, #20]
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	4611      	mov	r1, r2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f008 f919 	bl	800c6e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	015a      	lsls	r2, r3, #5
 80044b8:	69bb      	ldr	r3, [r7, #24]
 80044ba:	4413      	add	r3, r2
 80044bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044c0:	461a      	mov	r2, r3
 80044c2:	2340      	movs	r3, #64	; 0x40
 80044c4:	6093      	str	r3, [r2, #8]
 80044c6:	e2a3      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	697a      	ldr	r2, [r7, #20]
 80044ce:	b2d2      	uxtb	r2, r2
 80044d0:	4611      	mov	r1, r2
 80044d2:	4618      	mov	r0, r3
 80044d4:	f007 fbb3 	bl	800bc3e <USB_ReadChInterrupts>
 80044d8:	4603      	mov	r3, r0
 80044da:	f003 0308 	and.w	r3, r3, #8
 80044de:	2b08      	cmp	r3, #8
 80044e0:	d11a      	bne.n	8004518 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69bb      	ldr	r3, [r7, #24]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044ee:	461a      	mov	r2, r3
 80044f0:	2308      	movs	r3, #8
 80044f2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	212c      	movs	r1, #44	; 0x2c
 80044fa:	fb01 f303 	mul.w	r3, r1, r3
 80044fe:	4413      	add	r3, r2
 8004500:	3361      	adds	r3, #97	; 0x61
 8004502:	2206      	movs	r2, #6
 8004504:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	b2d2      	uxtb	r2, r2
 800450e:	4611      	mov	r1, r2
 8004510:	4618      	mov	r0, r3
 8004512:	f008 f8e8 	bl	800c6e6 <USB_HC_Halt>
 8004516:	e27b      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	697a      	ldr	r2, [r7, #20]
 800451e:	b2d2      	uxtb	r2, r2
 8004520:	4611      	mov	r1, r2
 8004522:	4618      	mov	r0, r3
 8004524:	f007 fb8b 	bl	800bc3e <USB_ReadChInterrupts>
 8004528:	4603      	mov	r3, r0
 800452a:	f003 0310 	and.w	r3, r3, #16
 800452e:	2b10      	cmp	r3, #16
 8004530:	d140      	bne.n	80045b4 <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004532:	687a      	ldr	r2, [r7, #4]
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	212c      	movs	r1, #44	; 0x2c
 8004538:	fb01 f303 	mul.w	r3, r1, r3
 800453c:	4413      	add	r3, r2
 800453e:	335c      	adds	r3, #92	; 0x5c
 8004540:	2200      	movs	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	212c      	movs	r1, #44	; 0x2c
 800454a:	fb01 f303 	mul.w	r3, r1, r3
 800454e:	4413      	add	r3, r2
 8004550:	3361      	adds	r3, #97	; 0x61
 8004552:	2204      	movs	r2, #4
 8004554:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 8004556:	687a      	ldr	r2, [r7, #4]
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	212c      	movs	r1, #44	; 0x2c
 800455c:	fb01 f303 	mul.w	r3, r1, r3
 8004560:	4413      	add	r3, r2
 8004562:	333d      	adds	r3, #61	; 0x3d
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d112      	bne.n	8004590 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	212c      	movs	r1, #44	; 0x2c
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	4413      	add	r3, r2
 8004576:	333c      	adds	r3, #60	; 0x3c
 8004578:	781b      	ldrb	r3, [r3, #0]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d108      	bne.n	8004590 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 800457e:	687a      	ldr	r2, [r7, #4]
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	212c      	movs	r1, #44	; 0x2c
 8004584:	fb01 f303 	mul.w	r3, r1, r3
 8004588:	4413      	add	r3, r2
 800458a:	333d      	adds	r3, #61	; 0x3d
 800458c:	2201      	movs	r2, #1
 800458e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	4611      	mov	r1, r2
 800459a:	4618      	mov	r0, r3
 800459c:	f008 f8a3 	bl	800c6e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045a0:	697b      	ldr	r3, [r7, #20]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69bb      	ldr	r3, [r7, #24]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80045ac:	461a      	mov	r2, r3
 80045ae:	2310      	movs	r3, #16
 80045b0:	6093      	str	r3, [r2, #8]
 80045b2:	e22d      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	4611      	mov	r1, r2
 80045be:	4618      	mov	r0, r3
 80045c0:	f007 fb3d 	bl	800bc3e <USB_ReadChInterrupts>
 80045c4:	4603      	mov	r3, r0
 80045c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ca:	2b80      	cmp	r3, #128	; 0x80
 80045cc:	d164      	bne.n	8004698 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d111      	bne.n	80045fa <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	212c      	movs	r1, #44	; 0x2c
 80045dc:	fb01 f303 	mul.w	r3, r1, r3
 80045e0:	4413      	add	r3, r2
 80045e2:	3361      	adds	r3, #97	; 0x61
 80045e4:	2207      	movs	r2, #7
 80045e6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	697a      	ldr	r2, [r7, #20]
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	4611      	mov	r1, r2
 80045f2:	4618      	mov	r0, r3
 80045f4:	f008 f877 	bl	800c6e6 <USB_HC_Halt>
 80045f8:	e044      	b.n	8004684 <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 80045fa:	687a      	ldr	r2, [r7, #4]
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	212c      	movs	r1, #44	; 0x2c
 8004600:	fb01 f303 	mul.w	r3, r1, r3
 8004604:	4413      	add	r3, r2
 8004606:	335c      	adds	r3, #92	; 0x5c
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	1c5a      	adds	r2, r3, #1
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	202c      	movs	r0, #44	; 0x2c
 8004612:	fb00 f303 	mul.w	r3, r0, r3
 8004616:	440b      	add	r3, r1
 8004618:	335c      	adds	r3, #92	; 0x5c
 800461a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	212c      	movs	r1, #44	; 0x2c
 8004622:	fb01 f303 	mul.w	r3, r1, r3
 8004626:	4413      	add	r3, r2
 8004628:	335c      	adds	r3, #92	; 0x5c
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	2b02      	cmp	r3, #2
 800462e:	d920      	bls.n	8004672 <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	212c      	movs	r1, #44	; 0x2c
 8004636:	fb01 f303 	mul.w	r3, r1, r3
 800463a:	4413      	add	r3, r2
 800463c:	335c      	adds	r3, #92	; 0x5c
 800463e:	2200      	movs	r2, #0
 8004640:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	212c      	movs	r1, #44	; 0x2c
 8004648:	fb01 f303 	mul.w	r3, r1, r3
 800464c:	4413      	add	r3, r2
 800464e:	3360      	adds	r3, #96	; 0x60
 8004650:	2204      	movs	r2, #4
 8004652:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	b2d9      	uxtb	r1, r3
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	697b      	ldr	r3, [r7, #20]
 800465c:	202c      	movs	r0, #44	; 0x2c
 800465e:	fb00 f303 	mul.w	r3, r0, r3
 8004662:	4413      	add	r3, r2
 8004664:	3360      	adds	r3, #96	; 0x60
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	461a      	mov	r2, r3
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f00d feb2 	bl	80123d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004670:	e008      	b.n	8004684 <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004672:	687a      	ldr	r2, [r7, #4]
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	212c      	movs	r1, #44	; 0x2c
 8004678:	fb01 f303 	mul.w	r3, r1, r3
 800467c:	4413      	add	r3, r2
 800467e:	3360      	adds	r3, #96	; 0x60
 8004680:	2202      	movs	r2, #2
 8004682:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	015a      	lsls	r2, r3, #5
 8004688:	69bb      	ldr	r3, [r7, #24]
 800468a:	4413      	add	r3, r2
 800468c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004690:	461a      	mov	r2, r3
 8004692:	2380      	movs	r3, #128	; 0x80
 8004694:	6093      	str	r3, [r2, #8]
 8004696:	e1bb      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	697a      	ldr	r2, [r7, #20]
 800469e:	b2d2      	uxtb	r2, r2
 80046a0:	4611      	mov	r1, r2
 80046a2:	4618      	mov	r0, r3
 80046a4:	f007 facb 	bl	800bc3e <USB_ReadChInterrupts>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046ae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80046b2:	d11b      	bne.n	80046ec <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	212c      	movs	r1, #44	; 0x2c
 80046ba:	fb01 f303 	mul.w	r3, r1, r3
 80046be:	4413      	add	r3, r2
 80046c0:	3361      	adds	r3, #97	; 0x61
 80046c2:	2209      	movs	r2, #9
 80046c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	b2d2      	uxtb	r2, r2
 80046ce:	4611      	mov	r1, r2
 80046d0:	4618      	mov	r0, r3
 80046d2:	f008 f808 	bl	800c6e6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69bb      	ldr	r3, [r7, #24]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046e2:	461a      	mov	r2, r3
 80046e4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80046e8:	6093      	str	r3, [r2, #8]
 80046ea:	e191      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	b2d2      	uxtb	r2, r2
 80046f4:	4611      	mov	r1, r2
 80046f6:	4618      	mov	r0, r3
 80046f8:	f007 faa1 	bl	800bc3e <USB_ReadChInterrupts>
 80046fc:	4603      	mov	r3, r0
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b02      	cmp	r3, #2
 8004704:	f040 8184 	bne.w	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	4413      	add	r3, r2
 8004710:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004714:	461a      	mov	r2, r3
 8004716:	2302      	movs	r3, #2
 8004718:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800471a:	687a      	ldr	r2, [r7, #4]
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	212c      	movs	r1, #44	; 0x2c
 8004720:	fb01 f303 	mul.w	r3, r1, r3
 8004724:	4413      	add	r3, r2
 8004726:	3361      	adds	r3, #97	; 0x61
 8004728:	781b      	ldrb	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	f040 8087 	bne.w	800483e <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004730:	687a      	ldr	r2, [r7, #4]
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	212c      	movs	r1, #44	; 0x2c
 8004736:	fb01 f303 	mul.w	r3, r1, r3
 800473a:	4413      	add	r3, r2
 800473c:	3361      	adds	r3, #97	; 0x61
 800473e:	2202      	movs	r2, #2
 8004740:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004742:	687a      	ldr	r2, [r7, #4]
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	212c      	movs	r1, #44	; 0x2c
 8004748:	fb01 f303 	mul.w	r3, r1, r3
 800474c:	4413      	add	r3, r2
 800474e:	3360      	adds	r3, #96	; 0x60
 8004750:	2201      	movs	r2, #1
 8004752:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	212c      	movs	r1, #44	; 0x2c
 800475a:	fb01 f303 	mul.w	r3, r1, r3
 800475e:	4413      	add	r3, r2
 8004760:	333f      	adds	r3, #63	; 0x3f
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b02      	cmp	r3, #2
 8004766:	d00a      	beq.n	800477e <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	212c      	movs	r1, #44	; 0x2c
 800476e:	fb01 f303 	mul.w	r3, r1, r3
 8004772:	4413      	add	r3, r2
 8004774:	333f      	adds	r3, #63	; 0x3f
 8004776:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004778:	2b03      	cmp	r3, #3
 800477a:	f040 8139 	bne.w	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	691b      	ldr	r3, [r3, #16]
 8004782:	2b00      	cmp	r3, #0
 8004784:	d113      	bne.n	80047ae <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004786:	687a      	ldr	r2, [r7, #4]
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	212c      	movs	r1, #44	; 0x2c
 800478c:	fb01 f303 	mul.w	r3, r1, r3
 8004790:	4413      	add	r3, r2
 8004792:	3355      	adds	r3, #85	; 0x55
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	f083 0301 	eor.w	r3, r3, #1
 800479a:	b2d8      	uxtb	r0, r3
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	697b      	ldr	r3, [r7, #20]
 80047a0:	212c      	movs	r1, #44	; 0x2c
 80047a2:	fb01 f303 	mul.w	r3, r1, r3
 80047a6:	4413      	add	r3, r2
 80047a8:	3355      	adds	r3, #85	; 0x55
 80047aa:	4602      	mov	r2, r0
 80047ac:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	f040 811c 	bne.w	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
 80047b8:	687a      	ldr	r2, [r7, #4]
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	212c      	movs	r1, #44	; 0x2c
 80047be:	fb01 f303 	mul.w	r3, r1, r3
 80047c2:	4413      	add	r3, r2
 80047c4:	334c      	adds	r3, #76	; 0x4c
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 8111 	beq.w	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	212c      	movs	r1, #44	; 0x2c
 80047d4:	fb01 f303 	mul.w	r3, r1, r3
 80047d8:	4413      	add	r3, r2
 80047da:	334c      	adds	r3, #76	; 0x4c
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	697a      	ldr	r2, [r7, #20]
 80047e2:	202c      	movs	r0, #44	; 0x2c
 80047e4:	fb00 f202 	mul.w	r2, r0, r2
 80047e8:	440a      	add	r2, r1
 80047ea:	3240      	adds	r2, #64	; 0x40
 80047ec:	8812      	ldrh	r2, [r2, #0]
 80047ee:	4413      	add	r3, r2
 80047f0:	3b01      	subs	r3, #1
 80047f2:	6879      	ldr	r1, [r7, #4]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	202c      	movs	r0, #44	; 0x2c
 80047f8:	fb00 f202 	mul.w	r2, r0, r2
 80047fc:	440a      	add	r2, r1
 80047fe:	3240      	adds	r2, #64	; 0x40
 8004800:	8812      	ldrh	r2, [r2, #0]
 8004802:	fbb3 f3f2 	udiv	r3, r3, r2
 8004806:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	f000 80ee 	beq.w	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	212c      	movs	r1, #44	; 0x2c
 800481a:	fb01 f303 	mul.w	r3, r1, r3
 800481e:	4413      	add	r3, r2
 8004820:	3355      	adds	r3, #85	; 0x55
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	f083 0301 	eor.w	r3, r3, #1
 8004828:	b2d8      	uxtb	r0, r3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	212c      	movs	r1, #44	; 0x2c
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	3355      	adds	r3, #85	; 0x55
 8004838:	4602      	mov	r2, r0
 800483a:	701a      	strb	r2, [r3, #0]
 800483c:	e0d8      	b.n	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	212c      	movs	r1, #44	; 0x2c
 8004844:	fb01 f303 	mul.w	r3, r1, r3
 8004848:	4413      	add	r3, r2
 800484a:	3361      	adds	r3, #97	; 0x61
 800484c:	781b      	ldrb	r3, [r3, #0]
 800484e:	2b03      	cmp	r3, #3
 8004850:	d109      	bne.n	8004866 <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004852:	687a      	ldr	r2, [r7, #4]
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	212c      	movs	r1, #44	; 0x2c
 8004858:	fb01 f303 	mul.w	r3, r1, r3
 800485c:	4413      	add	r3, r2
 800485e:	3361      	adds	r3, #97	; 0x61
 8004860:	2202      	movs	r2, #2
 8004862:	701a      	strb	r2, [r3, #0]
 8004864:	e0c4      	b.n	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	212c      	movs	r1, #44	; 0x2c
 800486c:	fb01 f303 	mul.w	r3, r1, r3
 8004870:	4413      	add	r3, r2
 8004872:	3361      	adds	r3, #97	; 0x61
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b04      	cmp	r3, #4
 8004878:	d112      	bne.n	80048a0 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	212c      	movs	r1, #44	; 0x2c
 8004880:	fb01 f303 	mul.w	r3, r1, r3
 8004884:	4413      	add	r3, r2
 8004886:	3361      	adds	r3, #97	; 0x61
 8004888:	2202      	movs	r2, #2
 800488a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	212c      	movs	r1, #44	; 0x2c
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	3360      	adds	r3, #96	; 0x60
 800489a:	2202      	movs	r2, #2
 800489c:	701a      	strb	r2, [r3, #0]
 800489e:	e0a7      	b.n	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 80048a0:	687a      	ldr	r2, [r7, #4]
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	212c      	movs	r1, #44	; 0x2c
 80048a6:	fb01 f303 	mul.w	r3, r1, r3
 80048aa:	4413      	add	r3, r2
 80048ac:	3361      	adds	r3, #97	; 0x61
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b05      	cmp	r3, #5
 80048b2:	d112      	bne.n	80048da <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	212c      	movs	r1, #44	; 0x2c
 80048ba:	fb01 f303 	mul.w	r3, r1, r3
 80048be:	4413      	add	r3, r2
 80048c0:	3361      	adds	r3, #97	; 0x61
 80048c2:	2202      	movs	r2, #2
 80048c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80048c6:	687a      	ldr	r2, [r7, #4]
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	212c      	movs	r1, #44	; 0x2c
 80048cc:	fb01 f303 	mul.w	r3, r1, r3
 80048d0:	4413      	add	r3, r2
 80048d2:	3360      	adds	r3, #96	; 0x60
 80048d4:	2202      	movs	r2, #2
 80048d6:	701a      	strb	r2, [r3, #0]
 80048d8:	e08a      	b.n	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	212c      	movs	r1, #44	; 0x2c
 80048e0:	fb01 f303 	mul.w	r3, r1, r3
 80048e4:	4413      	add	r3, r2
 80048e6:	3361      	adds	r3, #97	; 0x61
 80048e8:	781b      	ldrb	r3, [r3, #0]
 80048ea:	2b06      	cmp	r3, #6
 80048ec:	d112      	bne.n	8004914 <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	212c      	movs	r1, #44	; 0x2c
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	3361      	adds	r3, #97	; 0x61
 80048fc:	2202      	movs	r2, #2
 80048fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	212c      	movs	r1, #44	; 0x2c
 8004906:	fb01 f303 	mul.w	r3, r1, r3
 800490a:	4413      	add	r3, r2
 800490c:	3360      	adds	r3, #96	; 0x60
 800490e:	2205      	movs	r2, #5
 8004910:	701a      	strb	r2, [r3, #0]
 8004912:	e06d      	b.n	80049f0 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004914:	687a      	ldr	r2, [r7, #4]
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	212c      	movs	r1, #44	; 0x2c
 800491a:	fb01 f303 	mul.w	r3, r1, r3
 800491e:	4413      	add	r3, r2
 8004920:	3361      	adds	r3, #97	; 0x61
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b07      	cmp	r3, #7
 8004926:	d009      	beq.n	800493c <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004928:	687a      	ldr	r2, [r7, #4]
 800492a:	697b      	ldr	r3, [r7, #20]
 800492c:	212c      	movs	r1, #44	; 0x2c
 800492e:	fb01 f303 	mul.w	r3, r1, r3
 8004932:	4413      	add	r3, r2
 8004934:	3361      	adds	r3, #97	; 0x61
 8004936:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004938:	2b09      	cmp	r3, #9
 800493a:	d168      	bne.n	8004a0e <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800493c:	687a      	ldr	r2, [r7, #4]
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	212c      	movs	r1, #44	; 0x2c
 8004942:	fb01 f303 	mul.w	r3, r1, r3
 8004946:	4413      	add	r3, r2
 8004948:	3361      	adds	r3, #97	; 0x61
 800494a:	2202      	movs	r2, #2
 800494c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 800494e:	687a      	ldr	r2, [r7, #4]
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	212c      	movs	r1, #44	; 0x2c
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	4413      	add	r3, r2
 800495a:	335c      	adds	r3, #92	; 0x5c
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	1c5a      	adds	r2, r3, #1
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	202c      	movs	r0, #44	; 0x2c
 8004966:	fb00 f303 	mul.w	r3, r0, r3
 800496a:	440b      	add	r3, r1
 800496c:	335c      	adds	r3, #92	; 0x5c
 800496e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004970:	687a      	ldr	r2, [r7, #4]
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	212c      	movs	r1, #44	; 0x2c
 8004976:	fb01 f303 	mul.w	r3, r1, r3
 800497a:	4413      	add	r3, r2
 800497c:	335c      	adds	r3, #92	; 0x5c
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d912      	bls.n	80049aa <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	212c      	movs	r1, #44	; 0x2c
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	4413      	add	r3, r2
 8004990:	335c      	adds	r3, #92	; 0x5c
 8004992:	2200      	movs	r2, #0
 8004994:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	212c      	movs	r1, #44	; 0x2c
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	4413      	add	r3, r2
 80049a2:	3360      	adds	r3, #96	; 0x60
 80049a4:	2204      	movs	r2, #4
 80049a6:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049a8:	e021      	b.n	80049ee <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	212c      	movs	r1, #44	; 0x2c
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	4413      	add	r3, r2
 80049b6:	3360      	adds	r3, #96	; 0x60
 80049b8:	2202      	movs	r2, #2
 80049ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80049bc:	697b      	ldr	r3, [r7, #20]
 80049be:	015a      	lsls	r2, r3, #5
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	4413      	add	r3, r2
 80049c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049cc:	693b      	ldr	r3, [r7, #16]
 80049ce:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80049d2:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80049da:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	015a      	lsls	r2, r3, #5
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	4413      	add	r3, r2
 80049e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80049e8:	461a      	mov	r2, r3
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	b2d9      	uxtb	r1, r3
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	202c      	movs	r0, #44	; 0x2c
 80049fa:	fb00 f303 	mul.w	r3, r0, r3
 80049fe:	4413      	add	r3, r2
 8004a00:	3360      	adds	r3, #96	; 0x60
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	461a      	mov	r2, r3
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f00d fce4 	bl	80123d4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a0c:	e000      	b.n	8004a10 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8004a0e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004a10:	3720      	adds	r7, #32
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bd80      	pop	{r7, pc}

08004a16 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004a16:	b580      	push	{r7, lr}
 8004a18:	b08a      	sub	sp, #40	; 0x28
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a26:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	6a1b      	ldr	r3, [r3, #32]
 8004a2e:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f003 030f 	and.w	r3, r3, #15
 8004a36:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	0c5b      	lsrs	r3, r3, #17
 8004a3c:	f003 030f 	and.w	r3, r3, #15
 8004a40:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004a42:	69fb      	ldr	r3, [r7, #28]
 8004a44:	091b      	lsrs	r3, r3, #4
 8004a46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a4a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	2b02      	cmp	r3, #2
 8004a50:	d004      	beq.n	8004a5c <HCD_RXQLVL_IRQHandler+0x46>
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2b05      	cmp	r3, #5
 8004a56:	f000 80a9 	beq.w	8004bac <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004a5a:	e0aa      	b.n	8004bb2 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	f000 80a6 	beq.w	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	69bb      	ldr	r3, [r7, #24]
 8004a68:	212c      	movs	r1, #44	; 0x2c
 8004a6a:	fb01 f303 	mul.w	r3, r1, r3
 8004a6e:	4413      	add	r3, r2
 8004a70:	3344      	adds	r3, #68	; 0x44
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	f000 809b 	beq.w	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	212c      	movs	r1, #44	; 0x2c
 8004a80:	fb01 f303 	mul.w	r3, r1, r3
 8004a84:	4413      	add	r3, r2
 8004a86:	3350      	adds	r3, #80	; 0x50
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	441a      	add	r2, r3
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	69bb      	ldr	r3, [r7, #24]
 8004a92:	202c      	movs	r0, #44	; 0x2c
 8004a94:	fb00 f303 	mul.w	r3, r0, r3
 8004a98:	440b      	add	r3, r1
 8004a9a:	334c      	adds	r3, #76	; 0x4c
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d87a      	bhi.n	8004b98 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6818      	ldr	r0, [r3, #0]
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	212c      	movs	r1, #44	; 0x2c
 8004aac:	fb01 f303 	mul.w	r3, r1, r3
 8004ab0:	4413      	add	r3, r2
 8004ab2:	3344      	adds	r3, #68	; 0x44
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	693a      	ldr	r2, [r7, #16]
 8004ab8:	b292      	uxth	r2, r2
 8004aba:	4619      	mov	r1, r3
 8004abc:	f006 ff18 	bl	800b8f0 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	212c      	movs	r1, #44	; 0x2c
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	4413      	add	r3, r2
 8004acc:	3344      	adds	r3, #68	; 0x44
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	441a      	add	r2, r3
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	69bb      	ldr	r3, [r7, #24]
 8004ad8:	202c      	movs	r0, #44	; 0x2c
 8004ada:	fb00 f303 	mul.w	r3, r0, r3
 8004ade:	440b      	add	r3, r1
 8004ae0:	3344      	adds	r3, #68	; 0x44
 8004ae2:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004ae4:	687a      	ldr	r2, [r7, #4]
 8004ae6:	69bb      	ldr	r3, [r7, #24]
 8004ae8:	212c      	movs	r1, #44	; 0x2c
 8004aea:	fb01 f303 	mul.w	r3, r1, r3
 8004aee:	4413      	add	r3, r2
 8004af0:	3350      	adds	r3, #80	; 0x50
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	441a      	add	r2, r3
 8004af8:	6879      	ldr	r1, [r7, #4]
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	202c      	movs	r0, #44	; 0x2c
 8004afe:	fb00 f303 	mul.w	r3, r0, r3
 8004b02:	440b      	add	r3, r1
 8004b04:	3350      	adds	r3, #80	; 0x50
 8004b06:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	015a      	lsls	r2, r3, #5
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
 8004b0e:	4413      	add	r3, r2
 8004b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	0cdb      	lsrs	r3, r3, #19
 8004b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004b1c:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	3340      	adds	r3, #64	; 0x40
 8004b2c:	881b      	ldrh	r3, [r3, #0]
 8004b2e:	461a      	mov	r2, r3
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d13c      	bne.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d039      	beq.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	015a      	lsls	r2, r3, #5
 8004b40:	6a3b      	ldr	r3, [r7, #32]
 8004b42:	4413      	add	r3, r2
 8004b44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b52:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004b5a:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004b5c:	69bb      	ldr	r3, [r7, #24]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	6a3b      	ldr	r3, [r7, #32]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004b68:	461a      	mov	r2, r3
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	212c      	movs	r1, #44	; 0x2c
 8004b74:	fb01 f303 	mul.w	r3, r1, r3
 8004b78:	4413      	add	r3, r2
 8004b7a:	3354      	adds	r3, #84	; 0x54
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	f083 0301 	eor.w	r3, r3, #1
 8004b82:	b2d8      	uxtb	r0, r3
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	212c      	movs	r1, #44	; 0x2c
 8004b8a:	fb01 f303 	mul.w	r3, r1, r3
 8004b8e:	4413      	add	r3, r2
 8004b90:	3354      	adds	r3, #84	; 0x54
 8004b92:	4602      	mov	r2, r0
 8004b94:	701a      	strb	r2, [r3, #0]
      break;
 8004b96:	e00b      	b.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	69bb      	ldr	r3, [r7, #24]
 8004b9c:	212c      	movs	r1, #44	; 0x2c
 8004b9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ba2:	4413      	add	r3, r2
 8004ba4:	3360      	adds	r3, #96	; 0x60
 8004ba6:	2204      	movs	r2, #4
 8004ba8:	701a      	strb	r2, [r3, #0]
      break;
 8004baa:	e001      	b.n	8004bb0 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004bac:	bf00      	nop
 8004bae:	e000      	b.n	8004bb2 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004bb0:	bf00      	nop
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3728      	adds	r7, #40	; 0x28
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bc8:	697b      	ldr	r3, [r7, #20]
 8004bca:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004be6:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d10b      	bne.n	8004c0a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f003 0301 	and.w	r3, r3, #1
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d102      	bne.n	8004c02 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f00d fbcd 	bl	801239c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004c02:	68bb      	ldr	r3, [r7, #8]
 8004c04:	f043 0302 	orr.w	r3, r3, #2
 8004c08:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	f003 0308 	and.w	r3, r3, #8
 8004c10:	2b08      	cmp	r3, #8
 8004c12:	d132      	bne.n	8004c7a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	f043 0308 	orr.w	r3, r3, #8
 8004c1a:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 0304 	and.w	r3, r3, #4
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d126      	bne.n	8004c74 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b02      	cmp	r3, #2
 8004c2c:	d113      	bne.n	8004c56 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004c34:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004c38:	d106      	bne.n	8004c48 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	2102      	movs	r1, #2
 8004c40:	4618      	mov	r0, r3
 8004c42:	f007 fa15 	bl	800c070 <USB_InitFSLSPClkSel>
 8004c46:	e011      	b.n	8004c6c <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	4618      	mov	r0, r3
 8004c50:	f007 fa0e 	bl	800c070 <USB_InitFSLSPClkSel>
 8004c54:	e00a      	b.n	8004c6c <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d106      	bne.n	8004c6c <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004c64:	461a      	mov	r2, r3
 8004c66:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004c6a:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f00d fbbf 	bl	80123f0 <HAL_HCD_PortEnabled_Callback>
 8004c72:	e002      	b.n	8004c7a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004c74:	6878      	ldr	r0, [r7, #4]
 8004c76:	f00d fbc9 	bl	801240c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	f003 0320 	and.w	r3, r3, #32
 8004c80:	2b20      	cmp	r3, #32
 8004c82:	d103      	bne.n	8004c8c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	f043 0320 	orr.w	r3, r3, #32
 8004c8a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004c92:	461a      	mov	r2, r3
 8004c94:	68bb      	ldr	r3, [r7, #8]
 8004c96:	6013      	str	r3, [r2, #0]
}
 8004c98:	bf00      	nop
 8004c9a:	3718      	adds	r7, #24
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ca2:	b08f      	sub	sp, #60	; 0x3c
 8004ca4:	af0a      	add	r7, sp, #40	; 0x28
 8004ca6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d101      	bne.n	8004cb2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004cae:	2301      	movs	r3, #1
 8004cb0:	e116      	b.n	8004ee0 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004cbe:	b2db      	uxtb	r3, r3
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d106      	bne.n	8004cd2 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004ccc:	6878      	ldr	r0, [r7, #4]
 8004cce:	f00c ff1d 	bl	8011b0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2203      	movs	r2, #3
 8004cd6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d102      	bne.n	8004cec <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4618      	mov	r0, r3
 8004cf2:	f005 fda8 	bl	800a846 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	603b      	str	r3, [r7, #0]
 8004cfc:	687e      	ldr	r6, [r7, #4]
 8004cfe:	466d      	mov	r5, sp
 8004d00:	f106 0410 	add.w	r4, r6, #16
 8004d04:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d06:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d08:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004d0a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004d0c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004d10:	e885 0003 	stmia.w	r5, {r0, r1}
 8004d14:	1d33      	adds	r3, r6, #4
 8004d16:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004d18:	6838      	ldr	r0, [r7, #0]
 8004d1a:	f005 fc89 	bl	800a630 <USB_CoreInit>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d005      	beq.n	8004d30 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2202      	movs	r2, #2
 8004d28:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e0d7      	b.n	8004ee0 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2100      	movs	r1, #0
 8004d36:	4618      	mov	r0, r3
 8004d38:	f005 fd96 	bl	800a868 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	73fb      	strb	r3, [r7, #15]
 8004d40:	e04a      	b.n	8004dd8 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004d42:	7bfa      	ldrb	r2, [r7, #15]
 8004d44:	6879      	ldr	r1, [r7, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	00db      	lsls	r3, r3, #3
 8004d4a:	4413      	add	r3, r2
 8004d4c:	009b      	lsls	r3, r3, #2
 8004d4e:	440b      	add	r3, r1
 8004d50:	333d      	adds	r3, #61	; 0x3d
 8004d52:	2201      	movs	r2, #1
 8004d54:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004d56:	7bfa      	ldrb	r2, [r7, #15]
 8004d58:	6879      	ldr	r1, [r7, #4]
 8004d5a:	4613      	mov	r3, r2
 8004d5c:	00db      	lsls	r3, r3, #3
 8004d5e:	4413      	add	r3, r2
 8004d60:	009b      	lsls	r3, r3, #2
 8004d62:	440b      	add	r3, r1
 8004d64:	333c      	adds	r3, #60	; 0x3c
 8004d66:	7bfa      	ldrb	r2, [r7, #15]
 8004d68:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004d6a:	7bfa      	ldrb	r2, [r7, #15]
 8004d6c:	7bfb      	ldrb	r3, [r7, #15]
 8004d6e:	b298      	uxth	r0, r3
 8004d70:	6879      	ldr	r1, [r7, #4]
 8004d72:	4613      	mov	r3, r2
 8004d74:	00db      	lsls	r3, r3, #3
 8004d76:	4413      	add	r3, r2
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	440b      	add	r3, r1
 8004d7c:	3344      	adds	r3, #68	; 0x44
 8004d7e:	4602      	mov	r2, r0
 8004d80:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004d82:	7bfa      	ldrb	r2, [r7, #15]
 8004d84:	6879      	ldr	r1, [r7, #4]
 8004d86:	4613      	mov	r3, r2
 8004d88:	00db      	lsls	r3, r3, #3
 8004d8a:	4413      	add	r3, r2
 8004d8c:	009b      	lsls	r3, r3, #2
 8004d8e:	440b      	add	r3, r1
 8004d90:	3340      	adds	r3, #64	; 0x40
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004d96:	7bfa      	ldrb	r2, [r7, #15]
 8004d98:	6879      	ldr	r1, [r7, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	00db      	lsls	r3, r3, #3
 8004d9e:	4413      	add	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	440b      	add	r3, r1
 8004da4:	3348      	adds	r3, #72	; 0x48
 8004da6:	2200      	movs	r2, #0
 8004da8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004daa:	7bfa      	ldrb	r2, [r7, #15]
 8004dac:	6879      	ldr	r1, [r7, #4]
 8004dae:	4613      	mov	r3, r2
 8004db0:	00db      	lsls	r3, r3, #3
 8004db2:	4413      	add	r3, r2
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	440b      	add	r3, r1
 8004db8:	334c      	adds	r3, #76	; 0x4c
 8004dba:	2200      	movs	r2, #0
 8004dbc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004dbe:	7bfa      	ldrb	r2, [r7, #15]
 8004dc0:	6879      	ldr	r1, [r7, #4]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	00db      	lsls	r3, r3, #3
 8004dc6:	4413      	add	r3, r2
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	440b      	add	r3, r1
 8004dcc:	3354      	adds	r3, #84	; 0x54
 8004dce:	2200      	movs	r2, #0
 8004dd0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004dd2:	7bfb      	ldrb	r3, [r7, #15]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
 8004dd8:	7bfa      	ldrb	r2, [r7, #15]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	429a      	cmp	r2, r3
 8004de0:	d3af      	bcc.n	8004d42 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
 8004de6:	e044      	b.n	8004e72 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004de8:	7bfa      	ldrb	r2, [r7, #15]
 8004dea:	6879      	ldr	r1, [r7, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	440b      	add	r3, r1
 8004df6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004dfe:	7bfa      	ldrb	r2, [r7, #15]
 8004e00:	6879      	ldr	r1, [r7, #4]
 8004e02:	4613      	mov	r3, r2
 8004e04:	00db      	lsls	r3, r3, #3
 8004e06:	4413      	add	r3, r2
 8004e08:	009b      	lsls	r3, r3, #2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004e10:	7bfa      	ldrb	r2, [r7, #15]
 8004e12:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004e14:	7bfa      	ldrb	r2, [r7, #15]
 8004e16:	6879      	ldr	r1, [r7, #4]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	00db      	lsls	r3, r3, #3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	440b      	add	r3, r1
 8004e22:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004e26:	2200      	movs	r2, #0
 8004e28:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004e2a:	7bfa      	ldrb	r2, [r7, #15]
 8004e2c:	6879      	ldr	r1, [r7, #4]
 8004e2e:	4613      	mov	r3, r2
 8004e30:	00db      	lsls	r3, r3, #3
 8004e32:	4413      	add	r3, r2
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004e40:	7bfa      	ldrb	r2, [r7, #15]
 8004e42:	6879      	ldr	r1, [r7, #4]
 8004e44:	4613      	mov	r3, r2
 8004e46:	00db      	lsls	r3, r3, #3
 8004e48:	4413      	add	r3, r2
 8004e4a:	009b      	lsls	r3, r3, #2
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004e52:	2200      	movs	r2, #0
 8004e54:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004e56:	7bfa      	ldrb	r2, [r7, #15]
 8004e58:	6879      	ldr	r1, [r7, #4]
 8004e5a:	4613      	mov	r3, r2
 8004e5c:	00db      	lsls	r3, r3, #3
 8004e5e:	4413      	add	r3, r2
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	440b      	add	r3, r1
 8004e64:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004e6c:	7bfb      	ldrb	r3, [r7, #15]
 8004e6e:	3301      	adds	r3, #1
 8004e70:	73fb      	strb	r3, [r7, #15]
 8004e72:	7bfa      	ldrb	r2, [r7, #15]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	429a      	cmp	r2, r3
 8004e7a:	d3b5      	bcc.n	8004de8 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	603b      	str	r3, [r7, #0]
 8004e82:	687e      	ldr	r6, [r7, #4]
 8004e84:	466d      	mov	r5, sp
 8004e86:	f106 0410 	add.w	r4, r6, #16
 8004e8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004e90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004e92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004e96:	e885 0003 	stmia.w	r5, {r0, r1}
 8004e9a:	1d33      	adds	r3, r6, #4
 8004e9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004e9e:	6838      	ldr	r0, [r7, #0]
 8004ea0:	f005 fd2e 	bl	800a900 <USB_DevInit>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d005      	beq.n	8004eb6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2202      	movs	r2, #2
 8004eae:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e014      	b.n	8004ee0 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2201      	movs	r2, #1
 8004ec2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eca:	2b01      	cmp	r3, #1
 8004ecc:	d102      	bne.n	8004ed4 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f001 f97a 	bl	80061c8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4618      	mov	r0, r3
 8004eda:	f006 fe7c 	bl	800bbd6 <USB_DevDisconnect>

  return HAL_OK;
 8004ede:	2300      	movs	r3, #0
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3714      	adds	r7, #20
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ee8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004ef6:	2b01      	cmp	r3, #1
 8004ef8:	d101      	bne.n	8004efe <HAL_PCD_Start+0x16>
 8004efa:	2302      	movs	r3, #2
 8004efc:	e012      	b.n	8004f24 <HAL_PCD_Start+0x3c>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2201      	movs	r2, #1
 8004f02:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	f005 fc8a 	bl	800a824 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f006 fe3d 	bl	800bb94 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f22:	2300      	movs	r3, #0
}
 8004f24:	4618      	mov	r0, r3
 8004f26:	3708      	adds	r7, #8
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}

08004f2c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004f2c:	b590      	push	{r4, r7, lr}
 8004f2e:	b08d      	sub	sp, #52	; 0x34
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f3a:	6a3b      	ldr	r3, [r7, #32]
 8004f3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4618      	mov	r0, r3
 8004f44:	f006 ff1c 	bl	800bd80 <USB_GetMode>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	f040 84b7 	bne.w	80058be <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4618      	mov	r0, r3
 8004f56:	f006 fe5f 	bl	800bc18 <USB_ReadInterrupts>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 84ad 	beq.w	80058bc <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f68:	689b      	ldr	r3, [r3, #8]
 8004f6a:	0a1b      	lsrs	r3, r3, #8
 8004f6c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f006 fe4c 	bl	800bc18 <USB_ReadInterrupts>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d107      	bne.n	8004f9a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	695a      	ldr	r2, [r3, #20]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	f002 0202 	and.w	r2, r2, #2
 8004f98:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4618      	mov	r0, r3
 8004fa0:	f006 fe3a 	bl	800bc18 <USB_ReadInterrupts>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	f003 0310 	and.w	r3, r3, #16
 8004faa:	2b10      	cmp	r3, #16
 8004fac:	d161      	bne.n	8005072 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699a      	ldr	r2, [r3, #24]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f022 0210 	bic.w	r2, r2, #16
 8004fbc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004fbe:	6a3b      	ldr	r3, [r7, #32]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	f003 020f 	and.w	r2, r3, #15
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004fd6:	687a      	ldr	r2, [r7, #4]
 8004fd8:	4413      	add	r3, r2
 8004fda:	3304      	adds	r3, #4
 8004fdc:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	0c5b      	lsrs	r3, r3, #17
 8004fe2:	f003 030f 	and.w	r3, r3, #15
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d124      	bne.n	8005034 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004fea:	69ba      	ldr	r2, [r7, #24]
 8004fec:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d035      	beq.n	8005062 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	091b      	lsrs	r3, r3, #4
 8004ffe:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005000:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005004:	b29b      	uxth	r3, r3
 8005006:	461a      	mov	r2, r3
 8005008:	6a38      	ldr	r0, [r7, #32]
 800500a:	f006 fc71 	bl	800b8f0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	091b      	lsrs	r3, r3, #4
 8005016:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800501a:	441a      	add	r2, r3
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	6a1a      	ldr	r2, [r3, #32]
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	091b      	lsrs	r3, r3, #4
 8005028:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800502c:	441a      	add	r2, r3
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	621a      	str	r2, [r3, #32]
 8005032:	e016      	b.n	8005062 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	0c5b      	lsrs	r3, r3, #17
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	2b06      	cmp	r3, #6
 800503e:	d110      	bne.n	8005062 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005046:	2208      	movs	r2, #8
 8005048:	4619      	mov	r1, r3
 800504a:	6a38      	ldr	r0, [r7, #32]
 800504c:	f006 fc50 	bl	800b8f0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	6a1a      	ldr	r2, [r3, #32]
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800505c:	441a      	add	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	699a      	ldr	r2, [r3, #24]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0210 	orr.w	r2, r2, #16
 8005070:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4618      	mov	r0, r3
 8005078:	f006 fdce 	bl	800bc18 <USB_ReadInterrupts>
 800507c:	4603      	mov	r3, r0
 800507e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005082:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005086:	f040 80a7 	bne.w	80051d8 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800508a:	2300      	movs	r3, #0
 800508c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4618      	mov	r0, r3
 8005094:	f006 fdf4 	bl	800bc80 <USB_ReadDevAllOutEpInterrupt>
 8005098:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800509a:	e099      	b.n	80051d0 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800509c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800509e:	f003 0301 	and.w	r3, r3, #1
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	f000 808e 	beq.w	80051c4 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ae:	b2d2      	uxtb	r2, r2
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f006 fe18 	bl	800bce8 <USB_ReadDevOutEPInterrupt>
 80050b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f003 0301 	and.w	r3, r3, #1
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d00c      	beq.n	80050de <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80050c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c6:	015a      	lsls	r2, r3, #5
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	4413      	add	r3, r2
 80050cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d0:	461a      	mov	r2, r3
 80050d2:	2301      	movs	r3, #1
 80050d4:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80050d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 feef 	bl	8005ebc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d00c      	beq.n	8005102 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f4:	461a      	mov	r2, r3
 80050f6:	2308      	movs	r3, #8
 80050f8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80050fa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 ffc5 	bl	800608c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0310 	and.w	r3, r3, #16
 8005108:	2b00      	cmp	r3, #0
 800510a:	d008      	beq.n	800511e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	69fb      	ldr	r3, [r7, #28]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005118:	461a      	mov	r2, r3
 800511a:	2310      	movs	r3, #16
 800511c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b00      	cmp	r3, #0
 8005126:	d030      	beq.n	800518a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005128:	6a3b      	ldr	r3, [r7, #32]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005130:	2b80      	cmp	r3, #128	; 0x80
 8005132:	d109      	bne.n	8005148 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005146:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005148:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800514a:	4613      	mov	r3, r2
 800514c:	00db      	lsls	r3, r3, #3
 800514e:	4413      	add	r3, r2
 8005150:	009b      	lsls	r3, r3, #2
 8005152:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005156:	687a      	ldr	r2, [r7, #4]
 8005158:	4413      	add	r3, r2
 800515a:	3304      	adds	r3, #4
 800515c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	78db      	ldrb	r3, [r3, #3]
 8005162:	2b01      	cmp	r3, #1
 8005164:	d108      	bne.n	8005178 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	2200      	movs	r2, #0
 800516a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	b2db      	uxtb	r3, r3
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f00c fde4 	bl	8011d40 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	015a      	lsls	r2, r3, #5
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	4413      	add	r3, r2
 8005180:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005184:	461a      	mov	r2, r3
 8005186:	2302      	movs	r3, #2
 8005188:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	69fb      	ldr	r3, [r7, #28]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051a0:	461a      	mov	r2, r3
 80051a2:	2320      	movs	r3, #32
 80051a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80051a6:	693b      	ldr	r3, [r7, #16]
 80051a8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d009      	beq.n	80051c4 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80051b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051bc:	461a      	mov	r2, r3
 80051be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051c2:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80051c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c6:	3301      	adds	r3, #1
 80051c8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80051ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051cc:	085b      	lsrs	r3, r3, #1
 80051ce:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80051d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	f47f af62 	bne.w	800509c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f006 fd1b 	bl	800bc18 <USB_ReadInterrupts>
 80051e2:	4603      	mov	r3, r0
 80051e4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80051e8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80051ec:	f040 80db 	bne.w	80053a6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4618      	mov	r0, r3
 80051f6:	f006 fd5d 	bl	800bcb4 <USB_ReadDevAllInEpInterrupt>
 80051fa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80051fc:	2300      	movs	r3, #0
 80051fe:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005200:	e0cd      	b.n	800539e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005202:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005204:	f003 0301 	and.w	r3, r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 80c2 	beq.w	8005392 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	4611      	mov	r1, r2
 8005218:	4618      	mov	r0, r3
 800521a:	f006 fd83 	bl	800bd24 <USB_ReadDevInEPInterrupt>
 800521e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f003 0301 	and.w	r3, r3, #1
 8005226:	2b00      	cmp	r3, #0
 8005228:	d057      	beq.n	80052da <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	f003 030f 	and.w	r3, r3, #15
 8005230:	2201      	movs	r2, #1
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	43db      	mvns	r3, r3
 8005244:	69f9      	ldr	r1, [r7, #28]
 8005246:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800524a:	4013      	ands	r3, r2
 800524c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800524e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	69fb      	ldr	r3, [r7, #28]
 8005254:	4413      	add	r3, r2
 8005256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800525a:	461a      	mov	r2, r3
 800525c:	2301      	movs	r3, #1
 800525e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b01      	cmp	r3, #1
 8005266:	d132      	bne.n	80052ce <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800526c:	4613      	mov	r3, r2
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4413      	add	r3, r2
 8005272:	009b      	lsls	r3, r3, #2
 8005274:	440b      	add	r3, r1
 8005276:	334c      	adds	r3, #76	; 0x4c
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	4403      	add	r3, r0
 8005288:	3348      	adds	r3, #72	; 0x48
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	4419      	add	r1, r3
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005292:	4613      	mov	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	4413      	add	r3, r2
 8005298:	009b      	lsls	r3, r3, #2
 800529a:	4403      	add	r3, r0
 800529c:	334c      	adds	r3, #76	; 0x4c
 800529e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80052a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d113      	bne.n	80052ce <HAL_PCD_IRQHandler+0x3a2>
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052aa:	4613      	mov	r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	3354      	adds	r3, #84	; 0x54
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d108      	bne.n	80052ce <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6818      	ldr	r0, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80052c6:	461a      	mov	r2, r3
 80052c8:	2101      	movs	r1, #1
 80052ca:	f006 fd8b 	bl	800bde4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	b2db      	uxtb	r3, r3
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f00c fcae 	bl	8011c36 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80052da:	693b      	ldr	r3, [r7, #16]
 80052dc:	f003 0308 	and.w	r3, r3, #8
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d008      	beq.n	80052f6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80052e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e6:	015a      	lsls	r2, r3, #5
 80052e8:	69fb      	ldr	r3, [r7, #28]
 80052ea:	4413      	add	r3, r2
 80052ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052f0:	461a      	mov	r2, r3
 80052f2:	2308      	movs	r3, #8
 80052f4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80052f6:	693b      	ldr	r3, [r7, #16]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d008      	beq.n	8005312 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	4413      	add	r3, r2
 8005308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800530c:	461a      	mov	r2, r3
 800530e:	2310      	movs	r3, #16
 8005310:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005318:	2b00      	cmp	r3, #0
 800531a:	d008      	beq.n	800532e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005328:	461a      	mov	r2, r3
 800532a:	2340      	movs	r3, #64	; 0x40
 800532c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b00      	cmp	r3, #0
 8005336:	d023      	beq.n	8005380 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005338:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800533a:	6a38      	ldr	r0, [r7, #32]
 800533c:	f005 fc3e 	bl	800abbc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005340:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005342:	4613      	mov	r3, r2
 8005344:	00db      	lsls	r3, r3, #3
 8005346:	4413      	add	r3, r2
 8005348:	009b      	lsls	r3, r3, #2
 800534a:	3338      	adds	r3, #56	; 0x38
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	3304      	adds	r3, #4
 8005352:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	78db      	ldrb	r3, [r3, #3]
 8005358:	2b01      	cmp	r3, #1
 800535a:	d108      	bne.n	800536e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	2200      	movs	r2, #0
 8005360:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005364:	b2db      	uxtb	r3, r3
 8005366:	4619      	mov	r1, r3
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f00c fcfb 	bl	8011d64 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800537a:	461a      	mov	r2, r3
 800537c:	2302      	movs	r3, #2
 800537e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800538a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f000 fd08 	bl	8005da2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	3301      	adds	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	085b      	lsrs	r3, r3, #1
 800539c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800539e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f47f af2e 	bne.w	8005202 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f006 fc34 	bl	800bc18 <USB_ReadInterrupts>
 80053b0:	4603      	mov	r3, r0
 80053b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053ba:	d122      	bne.n	8005402 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80053bc:	69fb      	ldr	r3, [r7, #28]
 80053be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	69fa      	ldr	r2, [r7, #28]
 80053c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053ca:	f023 0301 	bic.w	r3, r3, #1
 80053ce:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80053d6:	2b01      	cmp	r3, #1
 80053d8:	d108      	bne.n	80053ec <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80053e2:	2100      	movs	r1, #0
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f00c fe7b 	bl	80120e0 <HAL_PCDEx_LPM_Callback>
 80053ea:	e002      	b.n	80053f2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f00c fc99 	bl	8011d24 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005400:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f006 fc06 	bl	800bc18 <USB_ReadInterrupts>
 800540c:	4603      	mov	r3, r0
 800540e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005416:	d112      	bne.n	800543e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0301 	and.w	r3, r3, #1
 8005424:	2b01      	cmp	r3, #1
 8005426:	d102      	bne.n	800542e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f00c fc55 	bl	8011cd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	695a      	ldr	r2, [r3, #20]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800543c:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4618      	mov	r0, r3
 8005444:	f006 fbe8 	bl	800bc18 <USB_ReadInterrupts>
 8005448:	4603      	mov	r3, r0
 800544a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800544e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005452:	d121      	bne.n	8005498 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	695a      	ldr	r2, [r3, #20]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8005462:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800546a:	2b00      	cmp	r3, #0
 800546c:	d111      	bne.n	8005492 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2201      	movs	r2, #1
 8005472:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	089b      	lsrs	r3, r3, #2
 800547e:	f003 020f 	and.w	r2, r3, #15
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005488:	2101      	movs	r1, #1
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f00c fe28 	bl	80120e0 <HAL_PCDEx_LPM_Callback>
 8005490:	e002      	b.n	8005498 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f00c fc20 	bl	8011cd8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	4618      	mov	r0, r3
 800549e:	f006 fbbb 	bl	800bc18 <USB_ReadInterrupts>
 80054a2:	4603      	mov	r3, r0
 80054a4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80054a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ac:	f040 80b7 	bne.w	800561e <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054be:	f023 0301 	bic.w	r3, r3, #1
 80054c2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2110      	movs	r1, #16
 80054ca:	4618      	mov	r0, r3
 80054cc:	f005 fb76 	bl	800abbc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054d0:	2300      	movs	r3, #0
 80054d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054d4:	e046      	b.n	8005564 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80054d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054e2:	461a      	mov	r2, r3
 80054e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80054e8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	015a      	lsls	r2, r3, #5
 80054ee:	69fb      	ldr	r3, [r7, #28]
 80054f0:	4413      	add	r3, r2
 80054f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fa:	0151      	lsls	r1, r2, #5
 80054fc:	69fa      	ldr	r2, [r7, #28]
 80054fe:	440a      	add	r2, r1
 8005500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005504:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005508:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	015a      	lsls	r2, r3, #5
 800550e:	69fb      	ldr	r3, [r7, #28]
 8005510:	4413      	add	r3, r2
 8005512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005516:	461a      	mov	r2, r3
 8005518:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800551c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	015a      	lsls	r2, r3, #5
 8005522:	69fb      	ldr	r3, [r7, #28]
 8005524:	4413      	add	r3, r2
 8005526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800552e:	0151      	lsls	r1, r2, #5
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	440a      	add	r2, r1
 8005534:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005538:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800553c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	015a      	lsls	r2, r3, #5
 8005542:	69fb      	ldr	r3, [r7, #28]
 8005544:	4413      	add	r3, r2
 8005546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554e:	0151      	lsls	r1, r2, #5
 8005550:	69fa      	ldr	r2, [r7, #28]
 8005552:	440a      	add	r2, r1
 8005554:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005558:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800555c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800555e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005560:	3301      	adds	r3, #1
 8005562:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556a:	429a      	cmp	r2, r3
 800556c:	d3b3      	bcc.n	80054d6 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005574:	69db      	ldr	r3, [r3, #28]
 8005576:	69fa      	ldr	r2, [r7, #28]
 8005578:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800557c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005580:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005586:	2b00      	cmp	r3, #0
 8005588:	d016      	beq.n	80055b8 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800559a:	f043 030b 	orr.w	r3, r3, #11
 800559e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80055a2:	69fb      	ldr	r3, [r7, #28]
 80055a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055aa:	69fa      	ldr	r2, [r7, #28]
 80055ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055b0:	f043 030b 	orr.w	r3, r3, #11
 80055b4:	6453      	str	r3, [r2, #68]	; 0x44
 80055b6:	e015      	b.n	80055e4 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80055b8:	69fb      	ldr	r3, [r7, #28]
 80055ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055be:	695a      	ldr	r2, [r3, #20]
 80055c0:	69fb      	ldr	r3, [r7, #28]
 80055c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055c6:	4619      	mov	r1, r3
 80055c8:	f242 032b 	movw	r3, #8235	; 0x202b
 80055cc:	4313      	orrs	r3, r2
 80055ce:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	69fa      	ldr	r2, [r7, #28]
 80055da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055de:	f043 030b 	orr.w	r3, r3, #11
 80055e2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	69fa      	ldr	r2, [r7, #28]
 80055ee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80055f2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80055f6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6818      	ldr	r0, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	691b      	ldr	r3, [r3, #16]
 8005600:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005608:	461a      	mov	r2, r3
 800560a:	f006 fbeb 	bl	800bde4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	695a      	ldr	r2, [r3, #20]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800561c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4618      	mov	r0, r3
 8005624:	f006 faf8 	bl	800bc18 <USB_ReadInterrupts>
 8005628:	4603      	mov	r3, r0
 800562a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800562e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005632:	d124      	bne.n	800567e <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4618      	mov	r0, r3
 800563a:	f006 fbaf 	bl	800bd9c <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4618      	mov	r0, r3
 8005644:	f005 fb37 	bl	800acb6 <USB_GetDevSpeed>
 8005648:	4603      	mov	r3, r0
 800564a:	461a      	mov	r2, r3
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681c      	ldr	r4, [r3, #0]
 8005654:	f001 fad0 	bl	8006bf8 <HAL_RCC_GetHCLKFreq>
 8005658:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800565e:	b2db      	uxtb	r3, r3
 8005660:	461a      	mov	r2, r3
 8005662:	4620      	mov	r0, r4
 8005664:	f005 f83c 	bl	800a6e0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005668:	6878      	ldr	r0, [r7, #4]
 800566a:	f00c fb0c 	bl	8011c86 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695a      	ldr	r2, [r3, #20]
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800567c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4618      	mov	r0, r3
 8005684:	f006 fac8 	bl	800bc18 <USB_ReadInterrupts>
 8005688:	4603      	mov	r3, r0
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b08      	cmp	r3, #8
 8005690:	d10a      	bne.n	80056a8 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005692:	6878      	ldr	r0, [r7, #4]
 8005694:	f00c fae9 	bl	8011c6a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695a      	ldr	r2, [r3, #20]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f002 0208 	and.w	r2, r2, #8
 80056a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4618      	mov	r0, r3
 80056ae:	f006 fab3 	bl	800bc18 <USB_ReadInterrupts>
 80056b2:	4603      	mov	r3, r0
 80056b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056b8:	2b80      	cmp	r3, #128	; 0x80
 80056ba:	d122      	bne.n	8005702 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056c4:	6a3b      	ldr	r3, [r7, #32]
 80056c6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056c8:	2301      	movs	r3, #1
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
 80056cc:	e014      	b.n	80056f8 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056d2:	4613      	mov	r3, r2
 80056d4:	00db      	lsls	r3, r3, #3
 80056d6:	4413      	add	r3, r2
 80056d8:	009b      	lsls	r3, r3, #2
 80056da:	440b      	add	r3, r1
 80056dc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80056e0:	781b      	ldrb	r3, [r3, #0]
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d105      	bne.n	80056f2 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80056e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e8:	b2db      	uxtb	r3, r3
 80056ea:	4619      	mov	r1, r3
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	f000 fb27 	bl	8005d40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80056f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f4:	3301      	adds	r3, #1
 80056f6:	627b      	str	r3, [r7, #36]	; 0x24
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056fe:	429a      	cmp	r2, r3
 8005700:	d3e5      	bcc.n	80056ce <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4618      	mov	r0, r3
 8005708:	f006 fa86 	bl	800bc18 <USB_ReadInterrupts>
 800570c:	4603      	mov	r3, r0
 800570e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005712:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005716:	d13b      	bne.n	8005790 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005718:	2301      	movs	r3, #1
 800571a:	627b      	str	r3, [r7, #36]	; 0x24
 800571c:	e02b      	b.n	8005776 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	015a      	lsls	r2, r3, #5
 8005722:	69fb      	ldr	r3, [r7, #28]
 8005724:	4413      	add	r3, r2
 8005726:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800572e:	6879      	ldr	r1, [r7, #4]
 8005730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005732:	4613      	mov	r3, r2
 8005734:	00db      	lsls	r3, r3, #3
 8005736:	4413      	add	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	3340      	adds	r3, #64	; 0x40
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d115      	bne.n	8005770 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005744:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005746:	2b00      	cmp	r3, #0
 8005748:	da12      	bge.n	8005770 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800574a:	6879      	ldr	r1, [r7, #4]
 800574c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800574e:	4613      	mov	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	333f      	adds	r3, #63	; 0x3f
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800575e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005760:	b2db      	uxtb	r3, r3
 8005762:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005766:	b2db      	uxtb	r3, r3
 8005768:	4619      	mov	r1, r3
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fae8 	bl	8005d40 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	3301      	adds	r3, #1
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800577c:	429a      	cmp	r2, r3
 800577e:	d3ce      	bcc.n	800571e <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	695a      	ldr	r2, [r3, #20]
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800578e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	4618      	mov	r0, r3
 8005796:	f006 fa3f 	bl	800bc18 <USB_ReadInterrupts>
 800579a:	4603      	mov	r3, r0
 800579c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80057a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80057a4:	d155      	bne.n	8005852 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80057a6:	2301      	movs	r3, #1
 80057a8:	627b      	str	r3, [r7, #36]	; 0x24
 80057aa:	e045      	b.n	8005838 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80057ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057bc:	6879      	ldr	r1, [r7, #4]
 80057be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057c0:	4613      	mov	r3, r2
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	4413      	add	r3, r2
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	440b      	add	r3, r1
 80057ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80057ce:	781b      	ldrb	r3, [r3, #0]
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d12e      	bne.n	8005832 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	da2b      	bge.n	8005832 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80057da:	69bb      	ldr	r3, [r7, #24]
 80057dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80057e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d121      	bne.n	8005832 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057f2:	4613      	mov	r3, r2
 80057f4:	00db      	lsls	r3, r3, #3
 80057f6:	4413      	add	r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005800:	2201      	movs	r2, #1
 8005802:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	699b      	ldr	r3, [r3, #24]
 8005808:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005810:	6a3b      	ldr	r3, [r7, #32]
 8005812:	695b      	ldr	r3, [r3, #20]
 8005814:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10a      	bne.n	8005832 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005822:	685b      	ldr	r3, [r3, #4]
 8005824:	69fa      	ldr	r2, [r7, #28]
 8005826:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800582a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800582e:	6053      	str	r3, [r2, #4]
            break;
 8005830:	e007      	b.n	8005842 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005834:	3301      	adds	r3, #1
 8005836:	627b      	str	r3, [r7, #36]	; 0x24
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800583e:	429a      	cmp	r2, r3
 8005840:	d3b4      	bcc.n	80057ac <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	695a      	ldr	r2, [r3, #20]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005850:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	4618      	mov	r0, r3
 8005858:	f006 f9de 	bl	800bc18 <USB_ReadInterrupts>
 800585c:	4603      	mov	r3, r0
 800585e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005866:	d10a      	bne.n	800587e <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f00c fa8d 	bl	8011d88 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	695a      	ldr	r2, [r3, #20]
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800587c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4618      	mov	r0, r3
 8005884:	f006 f9c8 	bl	800bc18 <USB_ReadInterrupts>
 8005888:	4603      	mov	r3, r0
 800588a:	f003 0304 	and.w	r3, r3, #4
 800588e:	2b04      	cmp	r3, #4
 8005890:	d115      	bne.n	80058be <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	f003 0304 	and.w	r3, r3, #4
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d002      	beq.n	80058aa <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f00c fa7d 	bl	8011da4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6859      	ldr	r1, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	69ba      	ldr	r2, [r7, #24]
 80058b6:	430a      	orrs	r2, r1
 80058b8:	605a      	str	r2, [r3, #4]
 80058ba:	e000      	b.n	80058be <HAL_PCD_IRQHandler+0x992>
      return;
 80058bc:	bf00      	nop
    }
  }
}
 80058be:	3734      	adds	r7, #52	; 0x34
 80058c0:	46bd      	mov	sp, r7
 80058c2:	bd90      	pop	{r4, r7, pc}

080058c4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b082      	sub	sp, #8
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
 80058cc:	460b      	mov	r3, r1
 80058ce:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d101      	bne.n	80058de <HAL_PCD_SetAddress+0x1a>
 80058da:	2302      	movs	r3, #2
 80058dc:	e013      	b.n	8005906 <HAL_PCD_SetAddress+0x42>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2201      	movs	r2, #1
 80058e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	78fa      	ldrb	r2, [r7, #3]
 80058ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	78fa      	ldrb	r2, [r7, #3]
 80058f4:	4611      	mov	r1, r2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f006 f926 	bl	800bb48 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005904:	2300      	movs	r3, #0
}
 8005906:	4618      	mov	r0, r3
 8005908:	3708      	adds	r7, #8
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}

0800590e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800590e:	b580      	push	{r7, lr}
 8005910:	b084      	sub	sp, #16
 8005912:	af00      	add	r7, sp, #0
 8005914:	6078      	str	r0, [r7, #4]
 8005916:	4608      	mov	r0, r1
 8005918:	4611      	mov	r1, r2
 800591a:	461a      	mov	r2, r3
 800591c:	4603      	mov	r3, r0
 800591e:	70fb      	strb	r3, [r7, #3]
 8005920:	460b      	mov	r3, r1
 8005922:	803b      	strh	r3, [r7, #0]
 8005924:	4613      	mov	r3, r2
 8005926:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005928:	2300      	movs	r3, #0
 800592a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800592c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005930:	2b00      	cmp	r3, #0
 8005932:	da0f      	bge.n	8005954 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	f003 020f 	and.w	r2, r3, #15
 800593a:	4613      	mov	r3, r2
 800593c:	00db      	lsls	r3, r3, #3
 800593e:	4413      	add	r3, r2
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	3338      	adds	r3, #56	; 0x38
 8005944:	687a      	ldr	r2, [r7, #4]
 8005946:	4413      	add	r3, r2
 8005948:	3304      	adds	r3, #4
 800594a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2201      	movs	r2, #1
 8005950:	705a      	strb	r2, [r3, #1]
 8005952:	e00f      	b.n	8005974 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005954:	78fb      	ldrb	r3, [r7, #3]
 8005956:	f003 020f 	and.w	r2, r3, #15
 800595a:	4613      	mov	r3, r2
 800595c:	00db      	lsls	r3, r3, #3
 800595e:	4413      	add	r3, r2
 8005960:	009b      	lsls	r3, r3, #2
 8005962:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005966:	687a      	ldr	r2, [r7, #4]
 8005968:	4413      	add	r3, r2
 800596a:	3304      	adds	r3, #4
 800596c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2200      	movs	r2, #0
 8005972:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005974:	78fb      	ldrb	r3, [r7, #3]
 8005976:	f003 030f 	and.w	r3, r3, #15
 800597a:	b2da      	uxtb	r2, r3
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005980:	883a      	ldrh	r2, [r7, #0]
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	78ba      	ldrb	r2, [r7, #2]
 800598a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d004      	beq.n	800599e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	781b      	ldrb	r3, [r3, #0]
 8005998:	b29a      	uxth	r2, r3
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800599e:	78bb      	ldrb	r3, [r7, #2]
 80059a0:	2b02      	cmp	r3, #2
 80059a2:	d102      	bne.n	80059aa <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d101      	bne.n	80059b8 <HAL_PCD_EP_Open+0xaa>
 80059b4:	2302      	movs	r3, #2
 80059b6:	e00e      	b.n	80059d6 <HAL_PCD_EP_Open+0xc8>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68f9      	ldr	r1, [r7, #12]
 80059c6:	4618      	mov	r0, r3
 80059c8:	f005 f99a 	bl	800ad00 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80059d4:	7afb      	ldrb	r3, [r7, #11]
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
 80059e6:	460b      	mov	r3, r1
 80059e8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80059ea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	da0f      	bge.n	8005a12 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80059f2:	78fb      	ldrb	r3, [r7, #3]
 80059f4:	f003 020f 	and.w	r2, r3, #15
 80059f8:	4613      	mov	r3, r2
 80059fa:	00db      	lsls	r3, r3, #3
 80059fc:	4413      	add	r3, r2
 80059fe:	009b      	lsls	r3, r3, #2
 8005a00:	3338      	adds	r3, #56	; 0x38
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	4413      	add	r3, r2
 8005a06:	3304      	adds	r3, #4
 8005a08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	705a      	strb	r2, [r3, #1]
 8005a10:	e00f      	b.n	8005a32 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	f003 020f 	and.w	r2, r3, #15
 8005a18:	4613      	mov	r3, r2
 8005a1a:	00db      	lsls	r3, r3, #3
 8005a1c:	4413      	add	r3, r2
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	4413      	add	r3, r2
 8005a28:	3304      	adds	r3, #4
 8005a2a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005a32:	78fb      	ldrb	r3, [r7, #3]
 8005a34:	f003 030f 	and.w	r3, r3, #15
 8005a38:	b2da      	uxtb	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005a44:	2b01      	cmp	r3, #1
 8005a46:	d101      	bne.n	8005a4c <HAL_PCD_EP_Close+0x6e>
 8005a48:	2302      	movs	r3, #2
 8005a4a:	e00e      	b.n	8005a6a <HAL_PCD_EP_Close+0x8c>
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68f9      	ldr	r1, [r7, #12]
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f005 f9d8 	bl	800ae10 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3710      	adds	r7, #16
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}

08005a72 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005a72:	b580      	push	{r7, lr}
 8005a74:	b086      	sub	sp, #24
 8005a76:	af00      	add	r7, sp, #0
 8005a78:	60f8      	str	r0, [r7, #12]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a82:	7afb      	ldrb	r3, [r7, #11]
 8005a84:	f003 020f 	and.w	r2, r3, #15
 8005a88:	4613      	mov	r3, r2
 8005a8a:	00db      	lsls	r3, r3, #3
 8005a8c:	4413      	add	r3, r2
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4413      	add	r3, r2
 8005a98:	3304      	adds	r3, #4
 8005a9a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	683a      	ldr	r2, [r7, #0]
 8005aa6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ab4:	7afb      	ldrb	r3, [r7, #11]
 8005ab6:	f003 030f 	and.w	r3, r3, #15
 8005aba:	b2da      	uxtb	r2, r3
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	691b      	ldr	r3, [r3, #16]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d102      	bne.n	8005ace <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	f003 030f 	and.w	r3, r3, #15
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d109      	bne.n	8005aec <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	691b      	ldr	r3, [r3, #16]
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	6979      	ldr	r1, [r7, #20]
 8005ae6:	f005 fcbf 	bl	800b468 <USB_EP0StartXfer>
 8005aea:	e008      	b.n	8005afe <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6818      	ldr	r0, [r3, #0]
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	461a      	mov	r2, r3
 8005af8:	6979      	ldr	r1, [r7, #20]
 8005afa:	f005 fa65 	bl	800afc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3718      	adds	r7, #24
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b083      	sub	sp, #12
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
 8005b10:	460b      	mov	r3, r1
 8005b12:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005b14:	78fb      	ldrb	r3, [r7, #3]
 8005b16:	f003 020f 	and.w	r2, r3, #15
 8005b1a:	6879      	ldr	r1, [r7, #4]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	4413      	add	r3, r2
 8005b22:	009b      	lsls	r3, r3, #2
 8005b24:	440b      	add	r3, r1
 8005b26:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005b2a:	681b      	ldr	r3, [r3, #0]
}
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	370c      	adds	r7, #12
 8005b30:	46bd      	mov	sp, r7
 8005b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b36:	4770      	bx	lr

08005b38 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b086      	sub	sp, #24
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	607a      	str	r2, [r7, #4]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	460b      	mov	r3, r1
 8005b46:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b48:	7afb      	ldrb	r3, [r7, #11]
 8005b4a:	f003 020f 	and.w	r2, r3, #15
 8005b4e:	4613      	mov	r3, r2
 8005b50:	00db      	lsls	r3, r3, #3
 8005b52:	4413      	add	r3, r2
 8005b54:	009b      	lsls	r3, r3, #2
 8005b56:	3338      	adds	r3, #56	; 0x38
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4413      	add	r3, r2
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	683a      	ldr	r2, [r7, #0]
 8005b6a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2201      	movs	r2, #1
 8005b76:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b78:	7afb      	ldrb	r3, [r7, #11]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	b2da      	uxtb	r2, r3
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	691b      	ldr	r3, [r3, #16]
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d102      	bne.n	8005b92 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	f003 030f 	and.w	r3, r3, #15
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d109      	bne.n	8005bb0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6818      	ldr	r0, [r3, #0]
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	691b      	ldr	r3, [r3, #16]
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	461a      	mov	r2, r3
 8005ba8:	6979      	ldr	r1, [r7, #20]
 8005baa:	f005 fc5d 	bl	800b468 <USB_EP0StartXfer>
 8005bae:	e008      	b.n	8005bc2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	6818      	ldr	r0, [r3, #0]
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	691b      	ldr	r3, [r3, #16]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6979      	ldr	r1, [r7, #20]
 8005bbe:	f005 fa03 	bl	800afc8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005bc2:	2300      	movs	r3, #0
}
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	3718      	adds	r7, #24
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	460b      	mov	r3, r1
 8005bd6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	f003 020f 	and.w	r2, r3, #15
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	429a      	cmp	r2, r3
 8005be4:	d901      	bls.n	8005bea <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005be6:	2301      	movs	r3, #1
 8005be8:	e050      	b.n	8005c8c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005bea:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	da0f      	bge.n	8005c12 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005bf2:	78fb      	ldrb	r3, [r7, #3]
 8005bf4:	f003 020f 	and.w	r2, r3, #15
 8005bf8:	4613      	mov	r3, r2
 8005bfa:	00db      	lsls	r3, r3, #3
 8005bfc:	4413      	add	r3, r2
 8005bfe:	009b      	lsls	r3, r3, #2
 8005c00:	3338      	adds	r3, #56	; 0x38
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	4413      	add	r3, r2
 8005c06:	3304      	adds	r3, #4
 8005c08:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	705a      	strb	r2, [r3, #1]
 8005c10:	e00d      	b.n	8005c2e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005c12:	78fa      	ldrb	r2, [r7, #3]
 8005c14:	4613      	mov	r3, r2
 8005c16:	00db      	lsls	r3, r3, #3
 8005c18:	4413      	add	r3, r2
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005c20:	687a      	ldr	r2, [r7, #4]
 8005c22:	4413      	add	r3, r2
 8005c24:	3304      	adds	r3, #4
 8005c26:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	2201      	movs	r2, #1
 8005c32:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005c34:	78fb      	ldrb	r3, [r7, #3]
 8005c36:	f003 030f 	and.w	r3, r3, #15
 8005c3a:	b2da      	uxtb	r2, r3
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d101      	bne.n	8005c4e <HAL_PCD_EP_SetStall+0x82>
 8005c4a:	2302      	movs	r3, #2
 8005c4c:	e01e      	b.n	8005c8c <HAL_PCD_EP_SetStall+0xc0>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2201      	movs	r2, #1
 8005c52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	68f9      	ldr	r1, [r7, #12]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f005 fe9f 	bl	800b9a0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005c62:	78fb      	ldrb	r3, [r7, #3]
 8005c64:	f003 030f 	and.w	r3, r3, #15
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10a      	bne.n	8005c82 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6818      	ldr	r0, [r3, #0]
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	691b      	ldr	r3, [r3, #16]
 8005c74:	b2d9      	uxtb	r1, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005c7c:	461a      	mov	r2, r3
 8005c7e:	f006 f8b1 	bl	800bde4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3710      	adds	r7, #16
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005ca0:	78fb      	ldrb	r3, [r7, #3]
 8005ca2:	f003 020f 	and.w	r2, r3, #15
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	429a      	cmp	r2, r3
 8005cac:	d901      	bls.n	8005cb2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005cae:	2301      	movs	r3, #1
 8005cb0:	e042      	b.n	8005d38 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cb2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	da0f      	bge.n	8005cda <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cba:	78fb      	ldrb	r3, [r7, #3]
 8005cbc:	f003 020f 	and.w	r2, r3, #15
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	4413      	add	r3, r2
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	3338      	adds	r3, #56	; 0x38
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	4413      	add	r3, r2
 8005cce:	3304      	adds	r3, #4
 8005cd0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	705a      	strb	r2, [r3, #1]
 8005cd8:	e00f      	b.n	8005cfa <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cda:	78fb      	ldrb	r3, [r7, #3]
 8005cdc:	f003 020f 	and.w	r2, r3, #15
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cec:	687a      	ldr	r2, [r7, #4]
 8005cee:	4413      	add	r3, r2
 8005cf0:	3304      	adds	r3, #4
 8005cf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d00:	78fb      	ldrb	r3, [r7, #3]
 8005d02:	f003 030f 	and.w	r3, r3, #15
 8005d06:	b2da      	uxtb	r2, r3
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d101      	bne.n	8005d1a <HAL_PCD_EP_ClrStall+0x86>
 8005d16:	2302      	movs	r3, #2
 8005d18:	e00e      	b.n	8005d38 <HAL_PCD_EP_ClrStall+0xa4>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	68f9      	ldr	r1, [r7, #12]
 8005d28:	4618      	mov	r0, r3
 8005d2a:	f005 fea7 	bl	800ba7c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
 8005d48:	460b      	mov	r3, r1
 8005d4a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005d4c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	da0c      	bge.n	8005d6e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d54:	78fb      	ldrb	r3, [r7, #3]
 8005d56:	f003 020f 	and.w	r2, r3, #15
 8005d5a:	4613      	mov	r3, r2
 8005d5c:	00db      	lsls	r3, r3, #3
 8005d5e:	4413      	add	r3, r2
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	3338      	adds	r3, #56	; 0x38
 8005d64:	687a      	ldr	r2, [r7, #4]
 8005d66:	4413      	add	r3, r2
 8005d68:	3304      	adds	r3, #4
 8005d6a:	60fb      	str	r3, [r7, #12]
 8005d6c:	e00c      	b.n	8005d88 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d6e:	78fb      	ldrb	r3, [r7, #3]
 8005d70:	f003 020f 	and.w	r2, r3, #15
 8005d74:	4613      	mov	r3, r2
 8005d76:	00db      	lsls	r3, r3, #3
 8005d78:	4413      	add	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005d80:	687a      	ldr	r2, [r7, #4]
 8005d82:	4413      	add	r3, r2
 8005d84:	3304      	adds	r3, #4
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	68f9      	ldr	r1, [r7, #12]
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f005 fcc6 	bl	800b720 <USB_EPStopXfer>
 8005d94:	4603      	mov	r3, r0
 8005d96:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005d98:	7afb      	ldrb	r3, [r7, #11]
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3710      	adds	r7, #16
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b08a      	sub	sp, #40	; 0x28
 8005da6:	af02      	add	r7, sp, #8
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	4613      	mov	r3, r2
 8005dba:	00db      	lsls	r3, r3, #3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	3338      	adds	r3, #56	; 0x38
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	4413      	add	r3, r2
 8005dc6:	3304      	adds	r3, #4
 8005dc8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	6a1a      	ldr	r2, [r3, #32]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	699b      	ldr	r3, [r3, #24]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d901      	bls.n	8005dda <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005dd6:	2301      	movs	r3, #1
 8005dd8:	e06c      	b.n	8005eb4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	699a      	ldr	r2, [r3, #24]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	1ad3      	subs	r3, r2, r3
 8005de4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	69fa      	ldr	r2, [r7, #28]
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d902      	bls.n	8005df6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	3303      	adds	r3, #3
 8005dfa:	089b      	lsrs	r3, r3, #2
 8005dfc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005dfe:	e02b      	b.n	8005e58 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	699a      	ldr	r2, [r3, #24]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6a1b      	ldr	r3, [r3, #32]
 8005e08:	1ad3      	subs	r3, r2, r3
 8005e0a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	68db      	ldr	r3, [r3, #12]
 8005e10:	69fa      	ldr	r2, [r7, #28]
 8005e12:	429a      	cmp	r2, r3
 8005e14:	d902      	bls.n	8005e1c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	3303      	adds	r3, #3
 8005e20:	089b      	lsrs	r3, r3, #2
 8005e22:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	6919      	ldr	r1, [r3, #16]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	b2da      	uxtb	r2, r3
 8005e2c:	69fb      	ldr	r3, [r7, #28]
 8005e2e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005e34:	b2db      	uxtb	r3, r3
 8005e36:	9300      	str	r3, [sp, #0]
 8005e38:	4603      	mov	r3, r0
 8005e3a:	6978      	ldr	r0, [r7, #20]
 8005e3c:	f005 fd1a 	bl	800b874 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	691a      	ldr	r2, [r3, #16]
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	441a      	add	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6a1a      	ldr	r2, [r3, #32]
 8005e50:	69fb      	ldr	r3, [r7, #28]
 8005e52:	441a      	add	r2, r3
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	015a      	lsls	r2, r3, #5
 8005e5c:	693b      	ldr	r3, [r7, #16]
 8005e5e:	4413      	add	r3, r2
 8005e60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005e64:	699b      	ldr	r3, [r3, #24]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	69ba      	ldr	r2, [r7, #24]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d809      	bhi.n	8005e82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6a1a      	ldr	r2, [r3, #32]
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005e76:	429a      	cmp	r2, r3
 8005e78:	d203      	bcs.n	8005e82 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1be      	bne.n	8005e00 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	699a      	ldr	r2, [r3, #24]
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	429a      	cmp	r2, r3
 8005e8c:	d811      	bhi.n	8005eb2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	2201      	movs	r2, #1
 8005e96:	fa02 f303 	lsl.w	r3, r2, r3
 8005e9a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005e9c:	693b      	ldr	r3, [r7, #16]
 8005e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	43db      	mvns	r3, r3
 8005ea8:	6939      	ldr	r1, [r7, #16]
 8005eaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005eae:	4013      	ands	r3, r2
 8005eb0:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005eb2:	2300      	movs	r3, #0
}
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	3720      	adds	r7, #32
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b088      	sub	sp, #32
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
 8005ec4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ecc:	69fb      	ldr	r3, [r7, #28]
 8005ece:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005ed0:	69fb      	ldr	r3, [r7, #28]
 8005ed2:	333c      	adds	r3, #60	; 0x3c
 8005ed4:	3304      	adds	r3, #4
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	015a      	lsls	r2, r3, #5
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	4413      	add	r3, r2
 8005ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ee6:	689b      	ldr	r3, [r3, #8]
 8005ee8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d17b      	bne.n	8005fea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	f003 0308 	and.w	r3, r3, #8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d015      	beq.n	8005f28 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	4a61      	ldr	r2, [pc, #388]	; (8006084 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	f240 80b9 	bls.w	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f000 80b3 	beq.w	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	015a      	lsls	r2, r3, #5
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	4413      	add	r3, r2
 8005f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f1e:	461a      	mov	r2, r3
 8005f20:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f24:	6093      	str	r3, [r2, #8]
 8005f26:	e0a7      	b.n	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f003 0320 	and.w	r3, r3, #32
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	461a      	mov	r2, r3
 8005f40:	2320      	movs	r3, #32
 8005f42:	6093      	str	r3, [r2, #8]
 8005f44:	e098      	b.n	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	f040 8093 	bne.w	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	4a4b      	ldr	r2, [pc, #300]	; (8006084 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d90f      	bls.n	8005f7a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	015a      	lsls	r2, r3, #5
 8005f68:	69bb      	ldr	r3, [r7, #24]
 8005f6a:	4413      	add	r3, r2
 8005f6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f70:	461a      	mov	r2, r3
 8005f72:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005f76:	6093      	str	r3, [r2, #8]
 8005f78:	e07e      	b.n	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005f7a:	683a      	ldr	r2, [r7, #0]
 8005f7c:	4613      	mov	r3, r2
 8005f7e:	00db      	lsls	r3, r3, #3
 8005f80:	4413      	add	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f88:	687a      	ldr	r2, [r7, #4]
 8005f8a:	4413      	add	r3, r2
 8005f8c:	3304      	adds	r3, #4
 8005f8e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	69da      	ldr	r2, [r3, #28]
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	0159      	lsls	r1, r3, #5
 8005f98:	69bb      	ldr	r3, [r7, #24]
 8005f9a:	440b      	add	r3, r1
 8005f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005fa0:	691b      	ldr	r3, [r3, #16]
 8005fa2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa6:	1ad2      	subs	r2, r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d114      	bne.n	8005fdc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	699b      	ldr	r3, [r3, #24]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d109      	bne.n	8005fce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005fc4:	461a      	mov	r2, r3
 8005fc6:	2101      	movs	r1, #1
 8005fc8:	f005 ff0c 	bl	800bde4 <USB_EP0_OutStart>
 8005fcc:	e006      	b.n	8005fdc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	691a      	ldr	r2, [r3, #16]
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	6a1b      	ldr	r3, [r3, #32]
 8005fd6:	441a      	add	r2, r3
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	4619      	mov	r1, r3
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f00b fe0c 	bl	8011c00 <HAL_PCD_DataOutStageCallback>
 8005fe8:	e046      	b.n	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005fea:	697b      	ldr	r3, [r7, #20]
 8005fec:	4a26      	ldr	r2, [pc, #152]	; (8006088 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005fee:	4293      	cmp	r3, r2
 8005ff0:	d124      	bne.n	800603c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00a      	beq.n	8006012 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800600e:	6093      	str	r3, [r2, #8]
 8006010:	e032      	b.n	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f003 0320 	and.w	r3, r3, #32
 8006018:	2b00      	cmp	r3, #0
 800601a:	d008      	beq.n	800602e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800601c:	683b      	ldr	r3, [r7, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	69bb      	ldr	r3, [r7, #24]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	461a      	mov	r2, r3
 800602a:	2320      	movs	r3, #32
 800602c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	b2db      	uxtb	r3, r3
 8006032:	4619      	mov	r1, r3
 8006034:	6878      	ldr	r0, [r7, #4]
 8006036:	f00b fde3 	bl	8011c00 <HAL_PCD_DataOutStageCallback>
 800603a:	e01d      	b.n	8006078 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800603c:	683b      	ldr	r3, [r7, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d114      	bne.n	800606c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006042:	6879      	ldr	r1, [r7, #4]
 8006044:	683a      	ldr	r2, [r7, #0]
 8006046:	4613      	mov	r3, r2
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	4413      	add	r3, r2
 800604c:	009b      	lsls	r3, r3, #2
 800604e:	440b      	add	r3, r1
 8006050:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6818      	ldr	r0, [r3, #0]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006064:	461a      	mov	r2, r3
 8006066:	2100      	movs	r1, #0
 8006068:	f005 febc 	bl	800bde4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	b2db      	uxtb	r3, r3
 8006070:	4619      	mov	r1, r3
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	f00b fdc4 	bl	8011c00 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	4f54300a 	.word	0x4f54300a
 8006088:	4f54310a 	.word	0x4f54310a

0800608c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b086      	sub	sp, #24
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
 8006094:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800609c:	697b      	ldr	r3, [r7, #20]
 800609e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	333c      	adds	r3, #60	; 0x3c
 80060a4:	3304      	adds	r3, #4
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80060aa:	683b      	ldr	r3, [r7, #0]
 80060ac:	015a      	lsls	r2, r3, #5
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	4413      	add	r3, r2
 80060b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	4a15      	ldr	r2, [pc, #84]	; (8006114 <PCD_EP_OutSetupPacket_int+0x88>)
 80060be:	4293      	cmp	r3, r2
 80060c0:	d90e      	bls.n	80060e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d009      	beq.n	80060e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	015a      	lsls	r2, r3, #5
 80060d0:	693b      	ldr	r3, [r7, #16]
 80060d2:	4413      	add	r3, r2
 80060d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060d8:	461a      	mov	r2, r3
 80060da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80060de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f00b fd7b 	bl	8011bdc <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4a0a      	ldr	r2, [pc, #40]	; (8006114 <PCD_EP_OutSetupPacket_int+0x88>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d90c      	bls.n	8006108 <PCD_EP_OutSetupPacket_int+0x7c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d108      	bne.n	8006108 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6818      	ldr	r0, [r3, #0]
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006100:	461a      	mov	r2, r3
 8006102:	2101      	movs	r1, #1
 8006104:	f005 fe6e 	bl	800bde4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3718      	adds	r7, #24
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}
 8006112:	bf00      	nop
 8006114:	4f54300a 	.word	0x4f54300a

08006118 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006118:	b480      	push	{r7}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
 8006120:	460b      	mov	r3, r1
 8006122:	70fb      	strb	r3, [r7, #3]
 8006124:	4613      	mov	r3, r2
 8006126:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800612e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006130:	78fb      	ldrb	r3, [r7, #3]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d107      	bne.n	8006146 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006136:	883b      	ldrh	r3, [r7, #0]
 8006138:	0419      	lsls	r1, r3, #16
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68ba      	ldr	r2, [r7, #8]
 8006140:	430a      	orrs	r2, r1
 8006142:	629a      	str	r2, [r3, #40]	; 0x28
 8006144:	e028      	b.n	8006198 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800614c:	0c1b      	lsrs	r3, r3, #16
 800614e:	68ba      	ldr	r2, [r7, #8]
 8006150:	4413      	add	r3, r2
 8006152:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006154:	2300      	movs	r3, #0
 8006156:	73fb      	strb	r3, [r7, #15]
 8006158:	e00d      	b.n	8006176 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681a      	ldr	r2, [r3, #0]
 800615e:	7bfb      	ldrb	r3, [r7, #15]
 8006160:	3340      	adds	r3, #64	; 0x40
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	685b      	ldr	r3, [r3, #4]
 8006168:	0c1b      	lsrs	r3, r3, #16
 800616a:	68ba      	ldr	r2, [r7, #8]
 800616c:	4413      	add	r3, r2
 800616e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006170:	7bfb      	ldrb	r3, [r7, #15]
 8006172:	3301      	adds	r3, #1
 8006174:	73fb      	strb	r3, [r7, #15]
 8006176:	7bfa      	ldrb	r2, [r7, #15]
 8006178:	78fb      	ldrb	r3, [r7, #3]
 800617a:	3b01      	subs	r3, #1
 800617c:	429a      	cmp	r2, r3
 800617e:	d3ec      	bcc.n	800615a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006180:	883b      	ldrh	r3, [r7, #0]
 8006182:	0418      	lsls	r0, r3, #16
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6819      	ldr	r1, [r3, #0]
 8006188:	78fb      	ldrb	r3, [r7, #3]
 800618a:	3b01      	subs	r3, #1
 800618c:	68ba      	ldr	r2, [r7, #8]
 800618e:	4302      	orrs	r2, r0
 8006190:	3340      	adds	r3, #64	; 0x40
 8006192:	009b      	lsls	r3, r3, #2
 8006194:	440b      	add	r3, r1
 8006196:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3714      	adds	r7, #20
 800619e:	46bd      	mov	sp, r7
 80061a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a4:	4770      	bx	lr

080061a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80061a6:	b480      	push	{r7}
 80061a8:	b083      	sub	sp, #12
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	887a      	ldrh	r2, [r7, #2]
 80061b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80061ba:	2300      	movs	r3, #0
}
 80061bc:	4618      	mov	r0, r3
 80061be:	370c      	adds	r7, #12
 80061c0:	46bd      	mov	sp, r7
 80061c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c6:	4770      	bx	lr

080061c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80061c8:	b480      	push	{r7}
 80061ca:	b085      	sub	sp, #20
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80061f6:	4b05      	ldr	r3, [pc, #20]	; (800620c <HAL_PCDEx_ActivateLPM+0x44>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	68fa      	ldr	r2, [r7, #12]
 80061fc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3714      	adds	r7, #20
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr
 800620c:	10000003 	.word	0x10000003

08006210 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006210:	b480      	push	{r7}
 8006212:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006214:	4b05      	ldr	r3, [pc, #20]	; (800622c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	4a04      	ldr	r2, [pc, #16]	; (800622c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800621a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800621e:	6013      	str	r3, [r2, #0]
}
 8006220:	bf00      	nop
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr
 800622a:	bf00      	nop
 800622c:	40007000 	.word	0x40007000

08006230 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b082      	sub	sp, #8
 8006234:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8006236:	2300      	movs	r3, #0
 8006238:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800623a:	4b23      	ldr	r3, [pc, #140]	; (80062c8 <HAL_PWREx_EnableOverDrive+0x98>)
 800623c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623e:	4a22      	ldr	r2, [pc, #136]	; (80062c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006240:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006244:	6413      	str	r3, [r2, #64]	; 0x40
 8006246:	4b20      	ldr	r3, [pc, #128]	; (80062c8 <HAL_PWREx_EnableOverDrive+0x98>)
 8006248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800624a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8006252:	4b1e      	ldr	r3, [pc, #120]	; (80062cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <HAL_PWREx_EnableOverDrive+0x9c>)
 8006258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800625c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800625e:	f7fb ff2d 	bl	80020bc <HAL_GetTick>
 8006262:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006264:	e009      	b.n	800627a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006266:	f7fb ff29 	bl	80020bc <HAL_GetTick>
 800626a:	4602      	mov	r2, r0
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	1ad3      	subs	r3, r2, r3
 8006270:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006274:	d901      	bls.n	800627a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8006276:	2303      	movs	r3, #3
 8006278:	e022      	b.n	80062c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800627a:	4b14      	ldr	r3, [pc, #80]	; (80062cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006286:	d1ee      	bne.n	8006266 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006288:	4b10      	ldr	r3, [pc, #64]	; (80062cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	4a0f      	ldr	r2, [pc, #60]	; (80062cc <HAL_PWREx_EnableOverDrive+0x9c>)
 800628e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006292:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006294:	f7fb ff12 	bl	80020bc <HAL_GetTick>
 8006298:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800629a:	e009      	b.n	80062b0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800629c:	f7fb ff0e 	bl	80020bc <HAL_GetTick>
 80062a0:	4602      	mov	r2, r0
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80062aa:	d901      	bls.n	80062b0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80062ac:	2303      	movs	r3, #3
 80062ae:	e007      	b.n	80062c0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <HAL_PWREx_EnableOverDrive+0x9c>)
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80062bc:	d1ee      	bne.n	800629c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3708      	adds	r7, #8
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40023800 	.word	0x40023800
 80062cc:	40007000 	.word	0x40007000

080062d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80062d8:	2300      	movs	r3, #0
 80062da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d101      	bne.n	80062e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e291      	b.n	800680a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f003 0301 	and.w	r3, r3, #1
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 8087 	beq.w	8006402 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80062f4:	4b96      	ldr	r3, [pc, #600]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f003 030c 	and.w	r3, r3, #12
 80062fc:	2b04      	cmp	r3, #4
 80062fe:	d00c      	beq.n	800631a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006300:	4b93      	ldr	r3, [pc, #588]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006302:	689b      	ldr	r3, [r3, #8]
 8006304:	f003 030c 	and.w	r3, r3, #12
 8006308:	2b08      	cmp	r3, #8
 800630a:	d112      	bne.n	8006332 <HAL_RCC_OscConfig+0x62>
 800630c:	4b90      	ldr	r3, [pc, #576]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006314:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006318:	d10b      	bne.n	8006332 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800631a:	4b8d      	ldr	r3, [pc, #564]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006322:	2b00      	cmp	r3, #0
 8006324:	d06c      	beq.n	8006400 <HAL_RCC_OscConfig+0x130>
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d168      	bne.n	8006400 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800632e:	2301      	movs	r3, #1
 8006330:	e26b      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	685b      	ldr	r3, [r3, #4]
 8006336:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800633a:	d106      	bne.n	800634a <HAL_RCC_OscConfig+0x7a>
 800633c:	4b84      	ldr	r3, [pc, #528]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a83      	ldr	r2, [pc, #524]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006342:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e02e      	b.n	80063a8 <HAL_RCC_OscConfig+0xd8>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d10c      	bne.n	800636c <HAL_RCC_OscConfig+0x9c>
 8006352:	4b7f      	ldr	r3, [pc, #508]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a7e      	ldr	r2, [pc, #504]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006358:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800635c:	6013      	str	r3, [r2, #0]
 800635e:	4b7c      	ldr	r3, [pc, #496]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	4a7b      	ldr	r2, [pc, #492]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006364:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006368:	6013      	str	r3, [r2, #0]
 800636a:	e01d      	b.n	80063a8 <HAL_RCC_OscConfig+0xd8>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006374:	d10c      	bne.n	8006390 <HAL_RCC_OscConfig+0xc0>
 8006376:	4b76      	ldr	r3, [pc, #472]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	4a75      	ldr	r2, [pc, #468]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800637c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006380:	6013      	str	r3, [r2, #0]
 8006382:	4b73      	ldr	r3, [pc, #460]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	4a72      	ldr	r2, [pc, #456]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006388:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800638c:	6013      	str	r3, [r2, #0]
 800638e:	e00b      	b.n	80063a8 <HAL_RCC_OscConfig+0xd8>
 8006390:	4b6f      	ldr	r3, [pc, #444]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a6e      	ldr	r2, [pc, #440]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006396:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800639a:	6013      	str	r3, [r2, #0]
 800639c:	4b6c      	ldr	r3, [pc, #432]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	4a6b      	ldr	r2, [pc, #428]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80063a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80063a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d013      	beq.n	80063d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063b0:	f7fb fe84 	bl	80020bc <HAL_GetTick>
 80063b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063b6:	e008      	b.n	80063ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063b8:	f7fb fe80 	bl	80020bc <HAL_GetTick>
 80063bc:	4602      	mov	r2, r0
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	2b64      	cmp	r3, #100	; 0x64
 80063c4:	d901      	bls.n	80063ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063c6:	2303      	movs	r3, #3
 80063c8:	e21f      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ca:	4b61      	ldr	r3, [pc, #388]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d0f0      	beq.n	80063b8 <HAL_RCC_OscConfig+0xe8>
 80063d6:	e014      	b.n	8006402 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80063d8:	f7fb fe70 	bl	80020bc <HAL_GetTick>
 80063dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063de:	e008      	b.n	80063f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063e0:	f7fb fe6c 	bl	80020bc <HAL_GetTick>
 80063e4:	4602      	mov	r2, r0
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	1ad3      	subs	r3, r2, r3
 80063ea:	2b64      	cmp	r3, #100	; 0x64
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e20b      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063f2:	4b57      	ldr	r3, [pc, #348]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d1f0      	bne.n	80063e0 <HAL_RCC_OscConfig+0x110>
 80063fe:	e000      	b.n	8006402 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006400:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f003 0302 	and.w	r3, r3, #2
 800640a:	2b00      	cmp	r3, #0
 800640c:	d069      	beq.n	80064e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800640e:	4b50      	ldr	r3, [pc, #320]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006410:	689b      	ldr	r3, [r3, #8]
 8006412:	f003 030c 	and.w	r3, r3, #12
 8006416:	2b00      	cmp	r3, #0
 8006418:	d00b      	beq.n	8006432 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800641a:	4b4d      	ldr	r3, [pc, #308]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800641c:	689b      	ldr	r3, [r3, #8]
 800641e:	f003 030c 	and.w	r3, r3, #12
 8006422:	2b08      	cmp	r3, #8
 8006424:	d11c      	bne.n	8006460 <HAL_RCC_OscConfig+0x190>
 8006426:	4b4a      	ldr	r3, [pc, #296]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800642e:	2b00      	cmp	r3, #0
 8006430:	d116      	bne.n	8006460 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006432:	4b47      	ldr	r3, [pc, #284]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	f003 0302 	and.w	r3, r3, #2
 800643a:	2b00      	cmp	r3, #0
 800643c:	d005      	beq.n	800644a <HAL_RCC_OscConfig+0x17a>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	2b01      	cmp	r3, #1
 8006444:	d001      	beq.n	800644a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e1df      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800644a:	4b41      	ldr	r3, [pc, #260]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	00db      	lsls	r3, r3, #3
 8006458:	493d      	ldr	r1, [pc, #244]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800645a:	4313      	orrs	r3, r2
 800645c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800645e:	e040      	b.n	80064e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d023      	beq.n	80064b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006468:	4b39      	ldr	r3, [pc, #228]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a38      	ldr	r2, [pc, #224]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006474:	f7fb fe22 	bl	80020bc <HAL_GetTick>
 8006478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800647a:	e008      	b.n	800648e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800647c:	f7fb fe1e 	bl	80020bc <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	2b02      	cmp	r3, #2
 8006488:	d901      	bls.n	800648e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800648a:	2303      	movs	r3, #3
 800648c:	e1bd      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800648e:	4b30      	ldr	r3, [pc, #192]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f003 0302 	and.w	r3, r3, #2
 8006496:	2b00      	cmp	r3, #0
 8006498:	d0f0      	beq.n	800647c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800649a:	4b2d      	ldr	r3, [pc, #180]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	691b      	ldr	r3, [r3, #16]
 80064a6:	00db      	lsls	r3, r3, #3
 80064a8:	4929      	ldr	r1, [pc, #164]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80064aa:	4313      	orrs	r3, r2
 80064ac:	600b      	str	r3, [r1, #0]
 80064ae:	e018      	b.n	80064e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064b0:	4b27      	ldr	r3, [pc, #156]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	4a26      	ldr	r2, [pc, #152]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80064b6:	f023 0301 	bic.w	r3, r3, #1
 80064ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064bc:	f7fb fdfe 	bl	80020bc <HAL_GetTick>
 80064c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064c2:	e008      	b.n	80064d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064c4:	f7fb fdfa 	bl	80020bc <HAL_GetTick>
 80064c8:	4602      	mov	r2, r0
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	2b02      	cmp	r3, #2
 80064d0:	d901      	bls.n	80064d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e199      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064d6:	4b1e      	ldr	r3, [pc, #120]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f003 0302 	and.w	r3, r3, #2
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d1f0      	bne.n	80064c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f003 0308 	and.w	r3, r3, #8
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d038      	beq.n	8006560 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	695b      	ldr	r3, [r3, #20]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d019      	beq.n	800652a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064f6:	4b16      	ldr	r3, [pc, #88]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80064f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80064fa:	4a15      	ldr	r2, [pc, #84]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 80064fc:	f043 0301 	orr.w	r3, r3, #1
 8006500:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006502:	f7fb fddb 	bl	80020bc <HAL_GetTick>
 8006506:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006508:	e008      	b.n	800651c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800650a:	f7fb fdd7 	bl	80020bc <HAL_GetTick>
 800650e:	4602      	mov	r2, r0
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	1ad3      	subs	r3, r2, r3
 8006514:	2b02      	cmp	r3, #2
 8006516:	d901      	bls.n	800651c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006518:	2303      	movs	r3, #3
 800651a:	e176      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800651c:	4b0c      	ldr	r3, [pc, #48]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800651e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006520:	f003 0302 	and.w	r3, r3, #2
 8006524:	2b00      	cmp	r3, #0
 8006526:	d0f0      	beq.n	800650a <HAL_RCC_OscConfig+0x23a>
 8006528:	e01a      	b.n	8006560 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800652a:	4b09      	ldr	r3, [pc, #36]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 800652c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800652e:	4a08      	ldr	r2, [pc, #32]	; (8006550 <HAL_RCC_OscConfig+0x280>)
 8006530:	f023 0301 	bic.w	r3, r3, #1
 8006534:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006536:	f7fb fdc1 	bl	80020bc <HAL_GetTick>
 800653a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800653c:	e00a      	b.n	8006554 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800653e:	f7fb fdbd 	bl	80020bc <HAL_GetTick>
 8006542:	4602      	mov	r2, r0
 8006544:	693b      	ldr	r3, [r7, #16]
 8006546:	1ad3      	subs	r3, r2, r3
 8006548:	2b02      	cmp	r3, #2
 800654a:	d903      	bls.n	8006554 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800654c:	2303      	movs	r3, #3
 800654e:	e15c      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
 8006550:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006554:	4b91      	ldr	r3, [pc, #580]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1ee      	bne.n	800653e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f003 0304 	and.w	r3, r3, #4
 8006568:	2b00      	cmp	r3, #0
 800656a:	f000 80a4 	beq.w	80066b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800656e:	4b8b      	ldr	r3, [pc, #556]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006572:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d10d      	bne.n	8006596 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800657a:	4b88      	ldr	r3, [pc, #544]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	4a87      	ldr	r2, [pc, #540]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006580:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006584:	6413      	str	r3, [r2, #64]	; 0x40
 8006586:	4b85      	ldr	r3, [pc, #532]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800658a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800658e:	60bb      	str	r3, [r7, #8]
 8006590:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006592:	2301      	movs	r3, #1
 8006594:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006596:	4b82      	ldr	r3, [pc, #520]	; (80067a0 <HAL_RCC_OscConfig+0x4d0>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d118      	bne.n	80065d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80065a2:	4b7f      	ldr	r3, [pc, #508]	; (80067a0 <HAL_RCC_OscConfig+0x4d0>)
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	4a7e      	ldr	r2, [pc, #504]	; (80067a0 <HAL_RCC_OscConfig+0x4d0>)
 80065a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065ae:	f7fb fd85 	bl	80020bc <HAL_GetTick>
 80065b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065b4:	e008      	b.n	80065c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065b6:	f7fb fd81 	bl	80020bc <HAL_GetTick>
 80065ba:	4602      	mov	r2, r0
 80065bc:	693b      	ldr	r3, [r7, #16]
 80065be:	1ad3      	subs	r3, r2, r3
 80065c0:	2b64      	cmp	r3, #100	; 0x64
 80065c2:	d901      	bls.n	80065c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80065c4:	2303      	movs	r3, #3
 80065c6:	e120      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80065c8:	4b75      	ldr	r3, [pc, #468]	; (80067a0 <HAL_RCC_OscConfig+0x4d0>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d0f0      	beq.n	80065b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d106      	bne.n	80065ea <HAL_RCC_OscConfig+0x31a>
 80065dc:	4b6f      	ldr	r3, [pc, #444]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80065de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065e0:	4a6e      	ldr	r2, [pc, #440]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80065e2:	f043 0301 	orr.w	r3, r3, #1
 80065e6:	6713      	str	r3, [r2, #112]	; 0x70
 80065e8:	e02d      	b.n	8006646 <HAL_RCC_OscConfig+0x376>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	689b      	ldr	r3, [r3, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d10c      	bne.n	800660c <HAL_RCC_OscConfig+0x33c>
 80065f2:	4b6a      	ldr	r3, [pc, #424]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80065f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80065f6:	4a69      	ldr	r2, [pc, #420]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80065f8:	f023 0301 	bic.w	r3, r3, #1
 80065fc:	6713      	str	r3, [r2, #112]	; 0x70
 80065fe:	4b67      	ldr	r3, [pc, #412]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006600:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006602:	4a66      	ldr	r2, [pc, #408]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006604:	f023 0304 	bic.w	r3, r3, #4
 8006608:	6713      	str	r3, [r2, #112]	; 0x70
 800660a:	e01c      	b.n	8006646 <HAL_RCC_OscConfig+0x376>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b05      	cmp	r3, #5
 8006612:	d10c      	bne.n	800662e <HAL_RCC_OscConfig+0x35e>
 8006614:	4b61      	ldr	r3, [pc, #388]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006618:	4a60      	ldr	r2, [pc, #384]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800661a:	f043 0304 	orr.w	r3, r3, #4
 800661e:	6713      	str	r3, [r2, #112]	; 0x70
 8006620:	4b5e      	ldr	r3, [pc, #376]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006624:	4a5d      	ldr	r2, [pc, #372]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006626:	f043 0301 	orr.w	r3, r3, #1
 800662a:	6713      	str	r3, [r2, #112]	; 0x70
 800662c:	e00b      	b.n	8006646 <HAL_RCC_OscConfig+0x376>
 800662e:	4b5b      	ldr	r3, [pc, #364]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006632:	4a5a      	ldr	r2, [pc, #360]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	6713      	str	r3, [r2, #112]	; 0x70
 800663a:	4b58      	ldr	r3, [pc, #352]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800663c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800663e:	4a57      	ldr	r2, [pc, #348]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006640:	f023 0304 	bic.w	r3, r3, #4
 8006644:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d015      	beq.n	800667a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800664e:	f7fb fd35 	bl	80020bc <HAL_GetTick>
 8006652:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006654:	e00a      	b.n	800666c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006656:	f7fb fd31 	bl	80020bc <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	f241 3288 	movw	r2, #5000	; 0x1388
 8006664:	4293      	cmp	r3, r2
 8006666:	d901      	bls.n	800666c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006668:	2303      	movs	r3, #3
 800666a:	e0ce      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800666c:	4b4b      	ldr	r3, [pc, #300]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800666e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006670:	f003 0302 	and.w	r3, r3, #2
 8006674:	2b00      	cmp	r3, #0
 8006676:	d0ee      	beq.n	8006656 <HAL_RCC_OscConfig+0x386>
 8006678:	e014      	b.n	80066a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800667a:	f7fb fd1f 	bl	80020bc <HAL_GetTick>
 800667e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006680:	e00a      	b.n	8006698 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006682:	f7fb fd1b 	bl	80020bc <HAL_GetTick>
 8006686:	4602      	mov	r2, r0
 8006688:	693b      	ldr	r3, [r7, #16]
 800668a:	1ad3      	subs	r3, r2, r3
 800668c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006690:	4293      	cmp	r3, r2
 8006692:	d901      	bls.n	8006698 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006694:	2303      	movs	r3, #3
 8006696:	e0b8      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006698:	4b40      	ldr	r3, [pc, #256]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800669a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800669c:	f003 0302 	and.w	r3, r3, #2
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1ee      	bne.n	8006682 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066a4:	7dfb      	ldrb	r3, [r7, #23]
 80066a6:	2b01      	cmp	r3, #1
 80066a8:	d105      	bne.n	80066b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066aa:	4b3c      	ldr	r3, [pc, #240]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80066ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066ae:	4a3b      	ldr	r2, [pc, #236]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80066b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	699b      	ldr	r3, [r3, #24]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f000 80a4 	beq.w	8006808 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80066c0:	4b36      	ldr	r3, [pc, #216]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80066c2:	689b      	ldr	r3, [r3, #8]
 80066c4:	f003 030c 	and.w	r3, r3, #12
 80066c8:	2b08      	cmp	r3, #8
 80066ca:	d06b      	beq.n	80067a4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	699b      	ldr	r3, [r3, #24]
 80066d0:	2b02      	cmp	r3, #2
 80066d2:	d149      	bne.n	8006768 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066d4:	4b31      	ldr	r3, [pc, #196]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a30      	ldr	r2, [pc, #192]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80066da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80066de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80066e0:	f7fb fcec 	bl	80020bc <HAL_GetTick>
 80066e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066e6:	e008      	b.n	80066fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066e8:	f7fb fce8 	bl	80020bc <HAL_GetTick>
 80066ec:	4602      	mov	r2, r0
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	2b02      	cmp	r3, #2
 80066f4:	d901      	bls.n	80066fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e087      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066fa:	4b28      	ldr	r3, [pc, #160]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006702:	2b00      	cmp	r3, #0
 8006704:	d1f0      	bne.n	80066e8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	69da      	ldr	r2, [r3, #28]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	431a      	orrs	r2, r3
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006714:	019b      	lsls	r3, r3, #6
 8006716:	431a      	orrs	r2, r3
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800671c:	085b      	lsrs	r3, r3, #1
 800671e:	3b01      	subs	r3, #1
 8006720:	041b      	lsls	r3, r3, #16
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006728:	061b      	lsls	r3, r3, #24
 800672a:	4313      	orrs	r3, r2
 800672c:	4a1b      	ldr	r2, [pc, #108]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800672e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006732:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006734:	4b19      	ldr	r3, [pc, #100]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a18      	ldr	r2, [pc, #96]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800673a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800673e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006740:	f7fb fcbc 	bl	80020bc <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006748:	f7fb fcb8 	bl	80020bc <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b02      	cmp	r3, #2
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e057      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675a:	4b10      	ldr	r3, [pc, #64]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0x478>
 8006766:	e04f      	b.n	8006808 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006768:	4b0c      	ldr	r3, [pc, #48]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a0b      	ldr	r2, [pc, #44]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 800676e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006774:	f7fb fca2 	bl	80020bc <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800677c:	f7fb fc9e 	bl	80020bc <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b02      	cmp	r3, #2
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e03d      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678e:	4b03      	ldr	r3, [pc, #12]	; (800679c <HAL_RCC_OscConfig+0x4cc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d1f0      	bne.n	800677c <HAL_RCC_OscConfig+0x4ac>
 800679a:	e035      	b.n	8006808 <HAL_RCC_OscConfig+0x538>
 800679c:	40023800 	.word	0x40023800
 80067a0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80067a4:	4b1b      	ldr	r3, [pc, #108]	; (8006814 <HAL_RCC_OscConfig+0x544>)
 80067a6:	685b      	ldr	r3, [r3, #4]
 80067a8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d028      	beq.n	8006804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067bc:	429a      	cmp	r2, r3
 80067be:	d121      	bne.n	8006804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d11a      	bne.n	8006804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80067d4:	4013      	ands	r3, r2
 80067d6:	687a      	ldr	r2, [r7, #4]
 80067d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80067da:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80067dc:	4293      	cmp	r3, r2
 80067de:	d111      	bne.n	8006804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ea:	085b      	lsrs	r3, r3, #1
 80067ec:	3b01      	subs	r3, #1
 80067ee:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d107      	bne.n	8006804 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067fe:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006800:	429a      	cmp	r2, r3
 8006802:	d001      	beq.n	8006808 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006804:	2301      	movs	r3, #1
 8006806:	e000      	b.n	800680a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006808:	2300      	movs	r3, #0
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	40023800 	.word	0x40023800

08006818 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d101      	bne.n	8006830 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800682c:	2301      	movs	r3, #1
 800682e:	e0d0      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006830:	4b6a      	ldr	r3, [pc, #424]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 030f 	and.w	r3, r3, #15
 8006838:	683a      	ldr	r2, [r7, #0]
 800683a:	429a      	cmp	r2, r3
 800683c:	d910      	bls.n	8006860 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800683e:	4b67      	ldr	r3, [pc, #412]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f023 020f 	bic.w	r2, r3, #15
 8006846:	4965      	ldr	r1, [pc, #404]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	4313      	orrs	r3, r2
 800684c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800684e:	4b63      	ldr	r3, [pc, #396]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 030f 	and.w	r3, r3, #15
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d001      	beq.n	8006860 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0b8      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d020      	beq.n	80068ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006878:	4b59      	ldr	r3, [pc, #356]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	4a58      	ldr	r2, [pc, #352]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 800687e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006890:	4b53      	ldr	r3, [pc, #332]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4a52      	ldr	r2, [pc, #328]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006896:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800689a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800689c:	4b50      	ldr	r3, [pc, #320]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	494d      	ldr	r1, [pc, #308]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d040      	beq.n	800693c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d107      	bne.n	80068d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c2:	4b47      	ldr	r3, [pc, #284]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d115      	bne.n	80068fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e07f      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d107      	bne.n	80068ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068da:	4b41      	ldr	r3, [pc, #260]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d109      	bne.n	80068fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	e073      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068ea:	4b3d      	ldr	r3, [pc, #244]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	f003 0302 	and.w	r3, r3, #2
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d101      	bne.n	80068fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e06b      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068fa:	4b39      	ldr	r3, [pc, #228]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f023 0203 	bic.w	r2, r3, #3
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	685b      	ldr	r3, [r3, #4]
 8006906:	4936      	ldr	r1, [pc, #216]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006908:	4313      	orrs	r3, r2
 800690a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800690c:	f7fb fbd6 	bl	80020bc <HAL_GetTick>
 8006910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006912:	e00a      	b.n	800692a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006914:	f7fb fbd2 	bl	80020bc <HAL_GetTick>
 8006918:	4602      	mov	r2, r0
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	1ad3      	subs	r3, r2, r3
 800691e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006922:	4293      	cmp	r3, r2
 8006924:	d901      	bls.n	800692a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006926:	2303      	movs	r3, #3
 8006928:	e053      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800692a:	4b2d      	ldr	r3, [pc, #180]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 800692c:	689b      	ldr	r3, [r3, #8]
 800692e:	f003 020c 	and.w	r2, r3, #12
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	429a      	cmp	r2, r3
 800693a:	d1eb      	bne.n	8006914 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800693c:	4b27      	ldr	r3, [pc, #156]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 030f 	and.w	r3, r3, #15
 8006944:	683a      	ldr	r2, [r7, #0]
 8006946:	429a      	cmp	r2, r3
 8006948:	d210      	bcs.n	800696c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800694a:	4b24      	ldr	r3, [pc, #144]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f023 020f 	bic.w	r2, r3, #15
 8006952:	4922      	ldr	r1, [pc, #136]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	4313      	orrs	r3, r2
 8006958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800695a:	4b20      	ldr	r3, [pc, #128]	; (80069dc <HAL_RCC_ClockConfig+0x1c4>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 030f 	and.w	r3, r3, #15
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e032      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006978:	4b19      	ldr	r3, [pc, #100]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4916      	ldr	r1, [pc, #88]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006986:	4313      	orrs	r3, r2
 8006988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006996:	4b12      	ldr	r3, [pc, #72]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	490e      	ldr	r1, [pc, #56]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069aa:	f000 f821 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 80069ae:	4602      	mov	r2, r0
 80069b0:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <HAL_RCC_ClockConfig+0x1c8>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	091b      	lsrs	r3, r3, #4
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	490a      	ldr	r1, [pc, #40]	; (80069e4 <HAL_RCC_ClockConfig+0x1cc>)
 80069bc:	5ccb      	ldrb	r3, [r1, r3]
 80069be:	fa22 f303 	lsr.w	r3, r2, r3
 80069c2:	4a09      	ldr	r2, [pc, #36]	; (80069e8 <HAL_RCC_ClockConfig+0x1d0>)
 80069c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_RCC_ClockConfig+0x1d4>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fb fb32 	bl	8002034 <HAL_InitTick>

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40023c00 	.word	0x40023c00
 80069e0:	40023800 	.word	0x40023800
 80069e4:	08015314 	.word	0x08015314
 80069e8:	20000000 	.word	0x20000000
 80069ec:	20000004 	.word	0x20000004

080069f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f4:	b094      	sub	sp, #80	; 0x50
 80069f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80069f8:	2300      	movs	r3, #0
 80069fa:	647b      	str	r3, [r7, #68]	; 0x44
 80069fc:	2300      	movs	r3, #0
 80069fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a00:	2300      	movs	r3, #0
 8006a02:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006a04:	2300      	movs	r3, #0
 8006a06:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a08:	4b79      	ldr	r3, [pc, #484]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 030c 	and.w	r3, r3, #12
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d00d      	beq.n	8006a30 <HAL_RCC_GetSysClockFreq+0x40>
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	f200 80e1 	bhi.w	8006bdc <HAL_RCC_GetSysClockFreq+0x1ec>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_RCC_GetSysClockFreq+0x34>
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d003      	beq.n	8006a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a22:	e0db      	b.n	8006bdc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a24:	4b73      	ldr	r3, [pc, #460]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a26:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a28:	e0db      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a2a:	4b72      	ldr	r3, [pc, #456]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006a2c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006a2e:	e0d8      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a30:	4b6f      	ldr	r3, [pc, #444]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a38:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006a3a:	4b6d      	ldr	r3, [pc, #436]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d063      	beq.n	8006b0e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a46:	4b6a      	ldr	r3, [pc, #424]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	099b      	lsrs	r3, r3, #6
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8006a50:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006a52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a58:	633b      	str	r3, [r7, #48]	; 0x30
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	637b      	str	r3, [r7, #52]	; 0x34
 8006a5e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006a62:	4622      	mov	r2, r4
 8006a64:	462b      	mov	r3, r5
 8006a66:	f04f 0000 	mov.w	r0, #0
 8006a6a:	f04f 0100 	mov.w	r1, #0
 8006a6e:	0159      	lsls	r1, r3, #5
 8006a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a74:	0150      	lsls	r0, r2, #5
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	4621      	mov	r1, r4
 8006a7c:	1a51      	subs	r1, r2, r1
 8006a7e:	6139      	str	r1, [r7, #16]
 8006a80:	4629      	mov	r1, r5
 8006a82:	eb63 0301 	sbc.w	r3, r3, r1
 8006a86:	617b      	str	r3, [r7, #20]
 8006a88:	f04f 0200 	mov.w	r2, #0
 8006a8c:	f04f 0300 	mov.w	r3, #0
 8006a90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a94:	4659      	mov	r1, fp
 8006a96:	018b      	lsls	r3, r1, #6
 8006a98:	4651      	mov	r1, sl
 8006a9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006a9e:	4651      	mov	r1, sl
 8006aa0:	018a      	lsls	r2, r1, #6
 8006aa2:	4651      	mov	r1, sl
 8006aa4:	ebb2 0801 	subs.w	r8, r2, r1
 8006aa8:	4659      	mov	r1, fp
 8006aaa:	eb63 0901 	sbc.w	r9, r3, r1
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006aba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006abe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006ac2:	4690      	mov	r8, r2
 8006ac4:	4699      	mov	r9, r3
 8006ac6:	4623      	mov	r3, r4
 8006ac8:	eb18 0303 	adds.w	r3, r8, r3
 8006acc:	60bb      	str	r3, [r7, #8]
 8006ace:	462b      	mov	r3, r5
 8006ad0:	eb49 0303 	adc.w	r3, r9, r3
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	f04f 0200 	mov.w	r2, #0
 8006ada:	f04f 0300 	mov.w	r3, #0
 8006ade:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006ae2:	4629      	mov	r1, r5
 8006ae4:	028b      	lsls	r3, r1, #10
 8006ae6:	4621      	mov	r1, r4
 8006ae8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006aec:	4621      	mov	r1, r4
 8006aee:	028a      	lsls	r2, r1, #10
 8006af0:	4610      	mov	r0, r2
 8006af2:	4619      	mov	r1, r3
 8006af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006af6:	2200      	movs	r2, #0
 8006af8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006afa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006afc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b00:	f7fa f872 	bl	8000be8 <__aeabi_uldivmod>
 8006b04:	4602      	mov	r2, r0
 8006b06:	460b      	mov	r3, r1
 8006b08:	4613      	mov	r3, r2
 8006b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b0c:	e058      	b.n	8006bc0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006b0e:	4b38      	ldr	r3, [pc, #224]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006b10:	685b      	ldr	r3, [r3, #4]
 8006b12:	099b      	lsrs	r3, r3, #6
 8006b14:	2200      	movs	r2, #0
 8006b16:	4618      	mov	r0, r3
 8006b18:	4611      	mov	r1, r2
 8006b1a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006b1e:	623b      	str	r3, [r7, #32]
 8006b20:	2300      	movs	r3, #0
 8006b22:	627b      	str	r3, [r7, #36]	; 0x24
 8006b24:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006b28:	4642      	mov	r2, r8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	f04f 0000 	mov.w	r0, #0
 8006b30:	f04f 0100 	mov.w	r1, #0
 8006b34:	0159      	lsls	r1, r3, #5
 8006b36:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006b3a:	0150      	lsls	r0, r2, #5
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	460b      	mov	r3, r1
 8006b40:	4641      	mov	r1, r8
 8006b42:	ebb2 0a01 	subs.w	sl, r2, r1
 8006b46:	4649      	mov	r1, r9
 8006b48:	eb63 0b01 	sbc.w	fp, r3, r1
 8006b4c:	f04f 0200 	mov.w	r2, #0
 8006b50:	f04f 0300 	mov.w	r3, #0
 8006b54:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006b58:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006b5c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006b60:	ebb2 040a 	subs.w	r4, r2, sl
 8006b64:	eb63 050b 	sbc.w	r5, r3, fp
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	00eb      	lsls	r3, r5, #3
 8006b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b76:	00e2      	lsls	r2, r4, #3
 8006b78:	4614      	mov	r4, r2
 8006b7a:	461d      	mov	r5, r3
 8006b7c:	4643      	mov	r3, r8
 8006b7e:	18e3      	adds	r3, r4, r3
 8006b80:	603b      	str	r3, [r7, #0]
 8006b82:	464b      	mov	r3, r9
 8006b84:	eb45 0303 	adc.w	r3, r5, r3
 8006b88:	607b      	str	r3, [r7, #4]
 8006b8a:	f04f 0200 	mov.w	r2, #0
 8006b8e:	f04f 0300 	mov.w	r3, #0
 8006b92:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b96:	4629      	mov	r1, r5
 8006b98:	028b      	lsls	r3, r1, #10
 8006b9a:	4621      	mov	r1, r4
 8006b9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ba0:	4621      	mov	r1, r4
 8006ba2:	028a      	lsls	r2, r1, #10
 8006ba4:	4610      	mov	r0, r2
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006baa:	2200      	movs	r2, #0
 8006bac:	61bb      	str	r3, [r7, #24]
 8006bae:	61fa      	str	r2, [r7, #28]
 8006bb0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006bb4:	f7fa f818 	bl	8000be8 <__aeabi_uldivmod>
 8006bb8:	4602      	mov	r2, r0
 8006bba:	460b      	mov	r3, r1
 8006bbc:	4613      	mov	r3, r2
 8006bbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006bc0:	4b0b      	ldr	r3, [pc, #44]	; (8006bf0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006bc2:	685b      	ldr	r3, [r3, #4]
 8006bc4:	0c1b      	lsrs	r3, r3, #16
 8006bc6:	f003 0303 	and.w	r3, r3, #3
 8006bca:	3301      	adds	r3, #1
 8006bcc:	005b      	lsls	r3, r3, #1
 8006bce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006bd0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bd2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006bda:	e002      	b.n	8006be2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006bdc:	4b05      	ldr	r3, [pc, #20]	; (8006bf4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006bde:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006be0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006be2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006be4:	4618      	mov	r0, r3
 8006be6:	3750      	adds	r7, #80	; 0x50
 8006be8:	46bd      	mov	sp, r7
 8006bea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bee:	bf00      	nop
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	00f42400 	.word	0x00f42400

08006bf8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006bf8:	b480      	push	{r7}
 8006bfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006bfc:	4b03      	ldr	r3, [pc, #12]	; (8006c0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
}
 8006c00:	4618      	mov	r0, r3
 8006c02:	46bd      	mov	sp, r7
 8006c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c08:	4770      	bx	lr
 8006c0a:	bf00      	nop
 8006c0c:	20000000 	.word	0x20000000

08006c10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006c14:	f7ff fff0 	bl	8006bf8 <HAL_RCC_GetHCLKFreq>
 8006c18:	4602      	mov	r2, r0
 8006c1a:	4b05      	ldr	r3, [pc, #20]	; (8006c30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006c1c:	689b      	ldr	r3, [r3, #8]
 8006c1e:	0a9b      	lsrs	r3, r3, #10
 8006c20:	f003 0307 	and.w	r3, r3, #7
 8006c24:	4903      	ldr	r1, [pc, #12]	; (8006c34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006c26:	5ccb      	ldrb	r3, [r1, r3]
 8006c28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	40023800 	.word	0x40023800
 8006c34:	08015324 	.word	0x08015324

08006c38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006c3c:	f7ff ffdc 	bl	8006bf8 <HAL_RCC_GetHCLKFreq>
 8006c40:	4602      	mov	r2, r0
 8006c42:	4b05      	ldr	r3, [pc, #20]	; (8006c58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	0b5b      	lsrs	r3, r3, #13
 8006c48:	f003 0307 	and.w	r3, r3, #7
 8006c4c:	4903      	ldr	r1, [pc, #12]	; (8006c5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8006c4e:	5ccb      	ldrb	r3, [r1, r3]
 8006c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006c54:	4618      	mov	r0, r3
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	40023800 	.word	0x40023800
 8006c5c:	08015324 	.word	0x08015324

08006c60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8006c68:	2300      	movs	r3, #0
 8006c6a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8006c70:	2300      	movs	r3, #0
 8006c72:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8006c74:	2300      	movs	r3, #0
 8006c76:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0301 	and.w	r3, r3, #1
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d012      	beq.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006c88:	4b69      	ldr	r3, [pc, #420]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	4a68      	ldr	r2, [pc, #416]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c8e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8006c92:	6093      	str	r3, [r2, #8]
 8006c94:	4b66      	ldr	r3, [pc, #408]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c96:	689a      	ldr	r2, [r3, #8]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006c9c:	4964      	ldr	r1, [pc, #400]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d101      	bne.n	8006cae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8006caa:	2301      	movs	r3, #1
 8006cac:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d017      	beq.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006cba:	4b5d      	ldr	r3, [pc, #372]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cc8:	4959      	ldr	r1, [pc, #356]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006cd8:	d101      	bne.n	8006cde <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d101      	bne.n	8006cea <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8006ce6:	2301      	movs	r3, #1
 8006ce8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d017      	beq.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006cf6:	4b4e      	ldr	r3, [pc, #312]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006cf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006cfc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d04:	494a      	ldr	r1, [pc, #296]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d06:	4313      	orrs	r3, r2
 8006d08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006d14:	d101      	bne.n	8006d1a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8006d16:	2301      	movs	r3, #1
 8006d18:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d101      	bne.n	8006d26 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8006d22:	2301      	movs	r3, #1
 8006d24:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8006d32:	2301      	movs	r3, #1
 8006d34:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	f003 0320 	and.w	r3, r3, #32
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	f000 808b 	beq.w	8006e5a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006d44:	4b3a      	ldr	r3, [pc, #232]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d48:	4a39      	ldr	r2, [pc, #228]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006d4e:	6413      	str	r3, [r2, #64]	; 0x40
 8006d50:	4b37      	ldr	r3, [pc, #220]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006d58:	60bb      	str	r3, [r7, #8]
 8006d5a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8006d5c:	4b35      	ldr	r3, [pc, #212]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4a34      	ldr	r2, [pc, #208]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006d66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006d68:	f7fb f9a8 	bl	80020bc <HAL_GetTick>
 8006d6c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d6e:	e008      	b.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d70:	f7fb f9a4 	bl	80020bc <HAL_GetTick>
 8006d74:	4602      	mov	r2, r0
 8006d76:	697b      	ldr	r3, [r7, #20]
 8006d78:	1ad3      	subs	r3, r2, r3
 8006d7a:	2b64      	cmp	r3, #100	; 0x64
 8006d7c:	d901      	bls.n	8006d82 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e31f      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8006d82:	4b2c      	ldr	r3, [pc, #176]	; (8006e34 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d0f0      	beq.n	8006d70 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006d8e:	4b28      	ldr	r3, [pc, #160]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d96:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d035      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	429a      	cmp	r2, r3
 8006daa:	d02e      	beq.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006dac:	4b20      	ldr	r3, [pc, #128]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006db4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006db6:	4b1e      	ldr	r3, [pc, #120]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006db8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dba:	4a1d      	ldr	r2, [pc, #116]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006dc0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006dc2:	4b1b      	ldr	r3, [pc, #108]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc6:	4a1a      	ldr	r2, [pc, #104]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dcc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8006dce:	4a18      	ldr	r2, [pc, #96]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006dd4:	4b16      	ldr	r3, [pc, #88]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d114      	bne.n	8006e0a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006de0:	f7fb f96c 	bl	80020bc <HAL_GetTick>
 8006de4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006de6:	e00a      	b.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006de8:	f7fb f968 	bl	80020bc <HAL_GetTick>
 8006dec:	4602      	mov	r2, r0
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	1ad3      	subs	r3, r2, r3
 8006df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d901      	bls.n	8006dfe <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8006dfa:	2303      	movs	r3, #3
 8006dfc:	e2e1      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dfe:	4b0c      	ldr	r3, [pc, #48]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006e02:	f003 0302 	and.w	r3, r3, #2
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d0ee      	beq.n	8006de8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e16:	d111      	bne.n	8006e3c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8006e18:	4b05      	ldr	r3, [pc, #20]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006e24:	4b04      	ldr	r3, [pc, #16]	; (8006e38 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8006e26:	400b      	ands	r3, r1
 8006e28:	4901      	ldr	r1, [pc, #4]	; (8006e30 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
 8006e2e:	e00b      	b.n	8006e48 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8006e30:	40023800 	.word	0x40023800
 8006e34:	40007000 	.word	0x40007000
 8006e38:	0ffffcff 	.word	0x0ffffcff
 8006e3c:	4ba8      	ldr	r3, [pc, #672]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	4aa7      	ldr	r2, [pc, #668]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e42:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006e46:	6093      	str	r3, [r2, #8]
 8006e48:	4ba5      	ldr	r3, [pc, #660]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e4a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006e54:	49a2      	ldr	r1, [pc, #648]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e56:	4313      	orrs	r3, r2
 8006e58:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f003 0310 	and.w	r3, r3, #16
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d010      	beq.n	8006e88 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006e66:	4b9e      	ldr	r3, [pc, #632]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006e6c:	4a9c      	ldr	r2, [pc, #624]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e6e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e72:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8006e76:	4b9a      	ldr	r3, [pc, #616]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e78:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e80:	4997      	ldr	r1, [pc, #604]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00a      	beq.n	8006eaa <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006e94:	4b92      	ldr	r3, [pc, #584]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006ea2:	498f      	ldr	r1, [pc, #572]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006ea4:	4313      	orrs	r3, r2
 8006ea6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d00a      	beq.n	8006ecc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006eb6:	4b8a      	ldr	r3, [pc, #552]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ebc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006ec4:	4986      	ldr	r1, [pc, #536]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00a      	beq.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006ed8:	4b81      	ldr	r3, [pc, #516]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ede:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ee6:	497e      	ldr	r1, [pc, #504]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00a      	beq.n	8006f10 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8006efa:	4b79      	ldr	r3, [pc, #484]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006efc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f00:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006f08:	4975      	ldr	r1, [pc, #468]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f0a:	4313      	orrs	r3, r2
 8006f0c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d00a      	beq.n	8006f32 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006f1c:	4b70      	ldr	r3, [pc, #448]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f22:	f023 0203 	bic.w	r2, r3, #3
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f2a:	496d      	ldr	r1, [pc, #436]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f2c:	4313      	orrs	r3, r2
 8006f2e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00a      	beq.n	8006f54 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006f3e:	4b68      	ldr	r3, [pc, #416]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f44:	f023 020c 	bic.w	r2, r3, #12
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4c:	4964      	ldr	r1, [pc, #400]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d00a      	beq.n	8006f76 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006f60:	4b5f      	ldr	r3, [pc, #380]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f66:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006f6e:	495c      	ldr	r1, [pc, #368]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f70:	4313      	orrs	r3, r2
 8006f72:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d00a      	beq.n	8006f98 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006f82:	4b57      	ldr	r3, [pc, #348]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f88:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f90:	4953      	ldr	r1, [pc, #332]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006f92:	4313      	orrs	r3, r2
 8006f94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00a      	beq.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8006fa4:	4b4e      	ldr	r3, [pc, #312]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006faa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fb2:	494b      	ldr	r1, [pc, #300]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fb4:	4313      	orrs	r3, r2
 8006fb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00a      	beq.n	8006fdc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8006fc6:	4b46      	ldr	r3, [pc, #280]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fcc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd4:	4942      	ldr	r1, [pc, #264]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d00a      	beq.n	8006ffe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8006fe8:	4b3d      	ldr	r3, [pc, #244]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006fee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ff6:	493a      	ldr	r1, [pc, #232]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8006ff8:	4313      	orrs	r3, r2
 8006ffa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800700a:	4b35      	ldr	r3, [pc, #212]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007010:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007018:	4931      	ldr	r1, [pc, #196]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800701a:	4313      	orrs	r3, r2
 800701c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007028:	2b00      	cmp	r3, #0
 800702a:	d00a      	beq.n	8007042 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800702c:	4b2c      	ldr	r3, [pc, #176]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800702e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007032:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800703a:	4929      	ldr	r1, [pc, #164]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800703c:	4313      	orrs	r3, r2
 800703e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800704a:	2b00      	cmp	r3, #0
 800704c:	d011      	beq.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800704e:	4b24      	ldr	r3, [pc, #144]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007050:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007054:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800705c:	4920      	ldr	r1, [pc, #128]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800705e:	4313      	orrs	r3, r2
 8007060:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007068:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800706c:	d101      	bne.n	8007072 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800706e:	2301      	movs	r3, #1
 8007070:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00a      	beq.n	8007094 <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800707e:	4b18      	ldr	r3, [pc, #96]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007080:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007084:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800708c:	4914      	ldr	r1, [pc, #80]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800708e:	4313      	orrs	r3, r2
 8007090:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800709c:	2b00      	cmp	r3, #0
 800709e:	d00b      	beq.n	80070b8 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80070a0:	4b0f      	ldr	r3, [pc, #60]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070a6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80070b0:	490b      	ldr	r1, [pc, #44]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070b2:	4313      	orrs	r3, r2
 80070b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80070b8:	69fb      	ldr	r3, [r7, #28]
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d006      	beq.n	80070cc <HAL_RCCEx_PeriphCLKConfig+0x46c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 80d8 	beq.w	800727c <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80070cc:	4b04      	ldr	r3, [pc, #16]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a03      	ldr	r2, [pc, #12]	; (80070e0 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80070d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80070d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80070d8:	f7fa fff0 	bl	80020bc <HAL_GetTick>
 80070dc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070de:	e00a      	b.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x496>
 80070e0:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80070e4:	f7fa ffea 	bl	80020bc <HAL_GetTick>
 80070e8:	4602      	mov	r2, r0
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	1ad3      	subs	r3, r2, r3
 80070ee:	2b64      	cmp	r3, #100	; 0x64
 80070f0:	d901      	bls.n	80070f6 <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070f2:	2303      	movs	r3, #3
 80070f4:	e165      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80070f6:	4ba9      	ldr	r3, [pc, #676]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d1f0      	bne.n	80070e4 <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	2b00      	cmp	r3, #0
 800710c:	d021      	beq.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007112:	2b00      	cmp	r3, #0
 8007114:	d11d      	bne.n	8007152 <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007116:	4ba1      	ldr	r3, [pc, #644]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800711c:	0c1b      	lsrs	r3, r3, #16
 800711e:	f003 0303 	and.w	r3, r3, #3
 8007122:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007124:	4b9d      	ldr	r3, [pc, #628]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007126:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800712a:	0e1b      	lsrs	r3, r3, #24
 800712c:	f003 030f 	and.w	r3, r3, #15
 8007130:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	019a      	lsls	r2, r3, #6
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	431a      	orrs	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	061b      	lsls	r3, r3, #24
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	071b      	lsls	r3, r3, #28
 800714a:	4994      	ldr	r1, [pc, #592]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800714c:	4313      	orrs	r3, r2
 800714e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800715a:	2b00      	cmp	r3, #0
 800715c:	d004      	beq.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x508>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007162:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007166:	d00a      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007170:	2b00      	cmp	r3, #0
 8007172:	d02e      	beq.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007178:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800717c:	d129      	bne.n	80071d2 <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800717e:	4b87      	ldr	r3, [pc, #540]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007180:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007184:	0c1b      	lsrs	r3, r3, #16
 8007186:	f003 0303 	and.w	r3, r3, #3
 800718a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800718c:	4b83      	ldr	r3, [pc, #524]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800718e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007192:	0f1b      	lsrs	r3, r3, #28
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	685b      	ldr	r3, [r3, #4]
 800719e:	019a      	lsls	r2, r3, #6
 80071a0:	693b      	ldr	r3, [r7, #16]
 80071a2:	041b      	lsls	r3, r3, #16
 80071a4:	431a      	orrs	r2, r3
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	061b      	lsls	r3, r3, #24
 80071ac:	431a      	orrs	r2, r3
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	071b      	lsls	r3, r3, #28
 80071b2:	497a      	ldr	r1, [pc, #488]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071b4:	4313      	orrs	r3, r2
 80071b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80071ba:	4b78      	ldr	r3, [pc, #480]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071c0:	f023 021f 	bic.w	r2, r3, #31
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c8:	3b01      	subs	r3, #1
 80071ca:	4974      	ldr	r1, [pc, #464]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071cc:	4313      	orrs	r3, r2
 80071ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d01d      	beq.n	800721a <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80071de:	4b6f      	ldr	r3, [pc, #444]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071e4:	0e1b      	lsrs	r3, r3, #24
 80071e6:	f003 030f 	and.w	r3, r3, #15
 80071ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80071ec:	4b6b      	ldr	r3, [pc, #428]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80071ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80071f2:	0f1b      	lsrs	r3, r3, #28
 80071f4:	f003 0307 	and.w	r3, r3, #7
 80071f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	685b      	ldr	r3, [r3, #4]
 80071fe:	019a      	lsls	r2, r3, #6
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	691b      	ldr	r3, [r3, #16]
 8007204:	041b      	lsls	r3, r3, #16
 8007206:	431a      	orrs	r2, r3
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	061b      	lsls	r3, r3, #24
 800720c:	431a      	orrs	r2, r3
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	071b      	lsls	r3, r3, #28
 8007212:	4962      	ldr	r1, [pc, #392]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007214:	4313      	orrs	r3, r2
 8007216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007222:	2b00      	cmp	r3, #0
 8007224:	d011      	beq.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	685b      	ldr	r3, [r3, #4]
 800722a:	019a      	lsls	r2, r3, #6
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	041b      	lsls	r3, r3, #16
 8007232:	431a      	orrs	r2, r3
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	68db      	ldr	r3, [r3, #12]
 8007238:	061b      	lsls	r3, r3, #24
 800723a:	431a      	orrs	r2, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	071b      	lsls	r3, r3, #28
 8007242:	4956      	ldr	r1, [pc, #344]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007244:	4313      	orrs	r3, r2
 8007246:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800724a:	4b54      	ldr	r3, [pc, #336]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a53      	ldr	r2, [pc, #332]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007250:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007254:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007256:	f7fa ff31 	bl	80020bc <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800725c:	e008      	b.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800725e:	f7fa ff2d 	bl	80020bc <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	2b64      	cmp	r3, #100	; 0x64
 800726a:	d901      	bls.n	8007270 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e0a8      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007270:	4b4a      	ldr	r3, [pc, #296]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007278:	2b00      	cmp	r3, #0
 800727a:	d0f0      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800727c:	69bb      	ldr	r3, [r7, #24]
 800727e:	2b01      	cmp	r3, #1
 8007280:	f040 809e 	bne.w	80073c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8007284:	4b45      	ldr	r3, [pc, #276]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a44      	ldr	r2, [pc, #272]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800728a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800728e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007290:	f7fa ff14 	bl	80020bc <HAL_GetTick>
 8007294:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007296:	e008      	b.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007298:	f7fa ff10 	bl	80020bc <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b64      	cmp	r3, #100	; 0x64
 80072a4:	d901      	bls.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e08b      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80072aa:	4b3c      	ldr	r3, [pc, #240]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80072b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80072b6:	d0ef      	beq.n	8007298 <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d003      	beq.n	80072cc <HAL_RCCEx_PeriphCLKConfig+0x66c>
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d009      	beq.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d02e      	beq.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d12a      	bne.n	8007336 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80072e0:	4b2e      	ldr	r3, [pc, #184]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80072e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072e6:	0c1b      	lsrs	r3, r3, #16
 80072e8:	f003 0303 	and.w	r3, r3, #3
 80072ec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80072ee:	4b2b      	ldr	r3, [pc, #172]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80072f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80072f4:	0f1b      	lsrs	r3, r3, #28
 80072f6:	f003 0307 	and.w	r3, r3, #7
 80072fa:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	695b      	ldr	r3, [r3, #20]
 8007300:	019a      	lsls	r2, r3, #6
 8007302:	693b      	ldr	r3, [r7, #16]
 8007304:	041b      	lsls	r3, r3, #16
 8007306:	431a      	orrs	r2, r3
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	699b      	ldr	r3, [r3, #24]
 800730c:	061b      	lsls	r3, r3, #24
 800730e:	431a      	orrs	r2, r3
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	071b      	lsls	r3, r3, #28
 8007314:	4921      	ldr	r1, [pc, #132]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007316:	4313      	orrs	r3, r2
 8007318:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800731c:	4b1f      	ldr	r3, [pc, #124]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800731e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007322:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	3b01      	subs	r3, #1
 800732c:	021b      	lsls	r3, r3, #8
 800732e:	491b      	ldr	r1, [pc, #108]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007330:	4313      	orrs	r3, r2
 8007332:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800733e:	2b00      	cmp	r3, #0
 8007340:	d022      	beq.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x728>
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007346:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800734a:	d11d      	bne.n	8007388 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800734c:	4b13      	ldr	r3, [pc, #76]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800734e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007352:	0e1b      	lsrs	r3, r3, #24
 8007354:	f003 030f 	and.w	r3, r3, #15
 8007358:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800735a:	4b10      	ldr	r3, [pc, #64]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800735c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007360:	0f1b      	lsrs	r3, r3, #28
 8007362:	f003 0307 	and.w	r3, r3, #7
 8007366:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	695b      	ldr	r3, [r3, #20]
 800736c:	019a      	lsls	r2, r3, #6
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	6a1b      	ldr	r3, [r3, #32]
 8007372:	041b      	lsls	r3, r3, #16
 8007374:	431a      	orrs	r2, r3
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	061b      	lsls	r3, r3, #24
 800737a:	431a      	orrs	r2, r3
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	071b      	lsls	r3, r3, #28
 8007380:	4906      	ldr	r1, [pc, #24]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007382:	4313      	orrs	r3, r2
 8007384:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007388:	4b04      	ldr	r3, [pc, #16]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	4a03      	ldr	r2, [pc, #12]	; (800739c <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800738e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007392:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007394:	f7fa fe92 	bl	80020bc <HAL_GetTick>
 8007398:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800739a:	e00a      	b.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x752>
 800739c:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80073a0:	f7fa fe8c 	bl	80020bc <HAL_GetTick>
 80073a4:	4602      	mov	r2, r0
 80073a6:	697b      	ldr	r3, [r7, #20]
 80073a8:	1ad3      	subs	r3, r2, r3
 80073aa:	2b64      	cmp	r3, #100	; 0x64
 80073ac:	d901      	bls.n	80073b2 <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80073ae:	2303      	movs	r3, #3
 80073b0:	e007      	b.n	80073c2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80073b2:	4b06      	ldr	r3, [pc, #24]	; (80073cc <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073be:	d1ef      	bne.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3720      	adds	r7, #32
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	40023800 	.word	0x40023800

080073d0 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d101      	bne.n	80073e2 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80073de:	2301      	movs	r3, #1
 80073e0:	e022      	b.n	8007428 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d105      	bne.n	80073fa <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2200      	movs	r2, #0
 80073f2:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fa fa6b 	bl	80018d0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2203      	movs	r2, #3
 80073fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f814 	bl	8007430 <HAL_SD_InitCard>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d001      	beq.n	8007412 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e00a      	b.n	8007428 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2200      	movs	r2, #0
 8007416:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	2200      	movs	r2, #0
 800741c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2201      	movs	r2, #1
 8007422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8007426:	2300      	movs	r3, #0
}
 8007428:	4618      	mov	r0, r3
 800742a:	3708      	adds	r7, #8
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007430:	b5b0      	push	{r4, r5, r7, lr}
 8007432:	b08e      	sub	sp, #56	; 0x38
 8007434:	af04      	add	r7, sp, #16
 8007436:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8007438:	2300      	movs	r3, #0
 800743a:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8007440:	2300      	movs	r3, #0
 8007442:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8007444:	2300      	movs	r3, #0
 8007446:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8007448:	2300      	movs	r3, #0
 800744a:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 800744c:	2376      	movs	r3, #118	; 0x76
 800744e:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681d      	ldr	r5, [r3, #0]
 8007454:	466c      	mov	r4, sp
 8007456:	f107 0314 	add.w	r3, r7, #20
 800745a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800745e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8007462:	f107 0308 	add.w	r3, r7, #8
 8007466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007468:	4628      	mov	r0, r5
 800746a:	f002 fbaf 	bl	8009bcc <SDMMC_Init>
 800746e:	4603      	mov	r3, r0
 8007470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8007474:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007478:	2b00      	cmp	r3, #0
 800747a:	d001      	beq.n	8007480 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 800747c:	2301      	movs	r3, #1
 800747e:	e059      	b.n	8007534 <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685a      	ldr	r2, [r3, #4]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800748e:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	4618      	mov	r0, r3
 8007496:	f002 fbe3 	bl	8009c60 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	685a      	ldr	r2, [r3, #4]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074a8:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 80074aa:	2002      	movs	r0, #2
 80074ac:	f7fa fe12 	bl	80020d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f000 fe67 	bl	8008184 <SD_PowerON>
 80074b6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074b8:	6a3b      	ldr	r3, [r7, #32]
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00b      	beq.n	80074d6 <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2201      	movs	r2, #1
 80074c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	e02e      	b.n	8007534 <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 fd86 	bl	8007fe8 <SD_InitCard>
 80074dc:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80074de:	6a3b      	ldr	r3, [r7, #32]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d00b      	beq.n	80074fc <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2201      	movs	r2, #1
 80074e8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074f0:	6a3b      	ldr	r3, [r7, #32]
 80074f2:	431a      	orrs	r2, r3
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	e01b      	b.n	8007534 <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007504:	4618      	mov	r0, r3
 8007506:	f002 fc3d 	bl	8009d84 <SDMMC_CmdBlockLength>
 800750a:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 800750c:	6a3b      	ldr	r3, [r7, #32]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00f      	beq.n	8007532 <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a09      	ldr	r2, [pc, #36]	; (800753c <HAL_SD_InitCard+0x10c>)
 8007518:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	431a      	orrs	r2, r3
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	2201      	movs	r2, #1
 800752a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e000      	b.n	8007534 <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8007532:	2300      	movs	r3, #0
}
 8007534:	4618      	mov	r0, r3
 8007536:	3728      	adds	r7, #40	; 0x28
 8007538:	46bd      	mov	sp, r7
 800753a:	bdb0      	pop	{r4, r5, r7, pc}
 800753c:	004005ff 	.word	0x004005ff

08007540 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b092      	sub	sp, #72	; 0x48
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800754e:	f7fa fdb5 	bl	80020bc <HAL_GetTick>
 8007552:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800755c:	68bb      	ldr	r3, [r7, #8]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d107      	bne.n	8007572 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007566:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800756e:	2301      	movs	r3, #1
 8007570:	e1bd      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007578:	b2db      	uxtb	r3, r3
 800757a:	2b01      	cmp	r3, #1
 800757c:	f040 81b0 	bne.w	80078e0 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	2200      	movs	r2, #0
 8007584:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007586:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	441a      	add	r2, r3
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007590:	429a      	cmp	r2, r3
 8007592:	d907      	bls.n	80075a4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007598:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80075a0:	2301      	movs	r3, #1
 80075a2:	e1a4      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2203      	movs	r2, #3
 80075a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2200      	movs	r2, #0
 80075b2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d002      	beq.n	80075c2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80075bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075be:	025b      	lsls	r3, r3, #9
 80075c0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80075c2:	f04f 33ff 	mov.w	r3, #4294967295
 80075c6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	025b      	lsls	r3, r3, #9
 80075cc:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80075ce:	2390      	movs	r3, #144	; 0x90
 80075d0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 80075d2:	2302      	movs	r3, #2
 80075d4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80075d6:	2300      	movs	r3, #0
 80075d8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 80075da:	2301      	movs	r3, #1
 80075dc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f107 0214 	add.w	r2, r7, #20
 80075e6:	4611      	mov	r1, r2
 80075e8:	4618      	mov	r0, r3
 80075ea:	f002 fb9f 	bl	8009d2c <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	2b01      	cmp	r3, #1
 80075f2:	d90a      	bls.n	800760a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	2202      	movs	r2, #2
 80075f8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007600:	4618      	mov	r0, r3
 8007602:	f002 fc03 	bl	8009e0c <SDMMC_CmdReadMultiBlock>
 8007606:	6478      	str	r0, [r7, #68]	; 0x44
 8007608:	e009      	b.n	800761e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007616:	4618      	mov	r0, r3
 8007618:	f002 fbd6 	bl	8009dc8 <SDMMC_CmdReadSingleBlock>
 800761c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800761e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007620:	2b00      	cmp	r3, #0
 8007622:	d012      	beq.n	800764a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	4a7a      	ldr	r2, [pc, #488]	; (8007814 <HAL_SD_ReadBlocks+0x2d4>)
 800762a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007630:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007632:	431a      	orrs	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e151      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 800764a:	69bb      	ldr	r3, [r7, #24]
 800764c:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 800764e:	e061      	b.n	8007714 <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007656:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800765a:	2b00      	cmp	r3, #0
 800765c:	d03c      	beq.n	80076d8 <HAL_SD_ReadBlocks+0x198>
 800765e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d039      	beq.n	80076d8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8007664:	2300      	movs	r3, #0
 8007666:	643b      	str	r3, [r7, #64]	; 0x40
 8007668:	e033      	b.n	80076d2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	4618      	mov	r0, r3
 8007670:	f002 fad8 	bl	8009c24 <SDMMC_ReadFIFO>
 8007674:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007678:	b2da      	uxtb	r2, r3
 800767a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800767c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800767e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007680:	3301      	adds	r3, #1
 8007682:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007686:	3b01      	subs	r3, #1
 8007688:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 800768a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800768c:	0a1b      	lsrs	r3, r3, #8
 800768e:	b2da      	uxtb	r2, r3
 8007690:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007692:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007696:	3301      	adds	r3, #1
 8007698:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800769a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800769c:	3b01      	subs	r3, #1
 800769e:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80076a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a2:	0c1b      	lsrs	r3, r3, #16
 80076a4:	b2da      	uxtb	r2, r3
 80076a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80076aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076ac:	3301      	adds	r3, #1
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076b2:	3b01      	subs	r3, #1
 80076b4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80076b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076b8:	0e1b      	lsrs	r3, r3, #24
 80076ba:	b2da      	uxtb	r2, r3
 80076bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076be:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80076c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076c2:	3301      	adds	r3, #1
 80076c4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80076c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c8:	3b01      	subs	r3, #1
 80076ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80076cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076ce:	3301      	adds	r3, #1
 80076d0:	643b      	str	r3, [r7, #64]	; 0x40
 80076d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076d4:	2b07      	cmp	r3, #7
 80076d6:	d9c8      	bls.n	800766a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80076d8:	f7fa fcf0 	bl	80020bc <HAL_GetTick>
 80076dc:	4602      	mov	r2, r0
 80076de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e0:	1ad3      	subs	r3, r2, r3
 80076e2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80076e4:	429a      	cmp	r2, r3
 80076e6:	d902      	bls.n	80076ee <HAL_SD_ReadBlocks+0x1ae>
 80076e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d112      	bne.n	8007714 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	4a48      	ldr	r2, [pc, #288]	; (8007814 <HAL_SD_ReadBlocks+0x2d4>)
 80076f4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076fa:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2201      	movs	r2, #1
 8007706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	2200      	movs	r2, #0
 800770e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007710:	2303      	movs	r3, #3
 8007712:	e0ec      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800771a:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 800771e:	2b00      	cmp	r3, #0
 8007720:	d096      	beq.n	8007650 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007728:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800772c:	2b00      	cmp	r3, #0
 800772e:	d022      	beq.n	8007776 <HAL_SD_ReadBlocks+0x236>
 8007730:	683b      	ldr	r3, [r7, #0]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d91f      	bls.n	8007776 <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800773a:	2b03      	cmp	r3, #3
 800773c:	d01b      	beq.n	8007776 <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4618      	mov	r0, r3
 8007744:	f002 fbc8 	bl	8009ed8 <SDMMC_CmdStopTransfer>
 8007748:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 800774a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800774c:	2b00      	cmp	r3, #0
 800774e:	d012      	beq.n	8007776 <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a2f      	ldr	r2, [pc, #188]	; (8007814 <HAL_SD_ReadBlocks+0x2d4>)
 8007756:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800775c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800775e:	431a      	orrs	r2, r3
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2201      	movs	r2, #1
 8007768:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2200      	movs	r2, #0
 8007770:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007772:	2301      	movs	r3, #1
 8007774:	e0bb      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800777c:	f003 0308 	and.w	r3, r3, #8
 8007780:	2b00      	cmp	r3, #0
 8007782:	d012      	beq.n	80077aa <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	4a22      	ldr	r2, [pc, #136]	; (8007814 <HAL_SD_ReadBlocks+0x2d4>)
 800778a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007790:	f043 0208 	orr.w	r2, r3, #8
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	2201      	movs	r2, #1
 800779c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e0a1      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077b0:	f003 0302 	and.w	r3, r3, #2
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d012      	beq.n	80077de <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	4a15      	ldr	r2, [pc, #84]	; (8007814 <HAL_SD_ReadBlocks+0x2d4>)
 80077be:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077c4:	f043 0202 	orr.w	r2, r3, #2
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	2200      	movs	r2, #0
 80077d8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e087      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077e4:	f003 0320 	and.w	r3, r3, #32
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d064      	beq.n	80078b6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a08      	ldr	r2, [pc, #32]	; (8007814 <HAL_SD_ReadBlocks+0x2d4>)
 80077f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077f8:	f043 0220 	orr.w	r2, r3, #32
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	2201      	movs	r2, #1
 8007804:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	2200      	movs	r2, #0
 800780c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800780e:	2301      	movs	r3, #1
 8007810:	e06d      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
 8007812:	bf00      	nop
 8007814:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	4618      	mov	r0, r3
 800781e:	f002 fa01 	bl	8009c24 <SDMMC_ReadFIFO>
 8007822:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007826:	b2da      	uxtb	r2, r3
 8007828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800782c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800782e:	3301      	adds	r3, #1
 8007830:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007832:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007834:	3b01      	subs	r3, #1
 8007836:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783a:	0a1b      	lsrs	r3, r3, #8
 800783c:	b2da      	uxtb	r2, r3
 800783e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007840:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007844:	3301      	adds	r3, #1
 8007846:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007848:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800784a:	3b01      	subs	r3, #1
 800784c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800784e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007850:	0c1b      	lsrs	r3, r3, #16
 8007852:	b2da      	uxtb	r2, r3
 8007854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007856:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800785a:	3301      	adds	r3, #1
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 800785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007860:	3b01      	subs	r3, #1
 8007862:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007866:	0e1b      	lsrs	r3, r3, #24
 8007868:	b2da      	uxtb	r2, r3
 800786a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800786c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 800786e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007870:	3301      	adds	r3, #1
 8007872:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007874:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007876:	3b01      	subs	r3, #1
 8007878:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 800787a:	f7fa fc1f 	bl	80020bc <HAL_GetTick>
 800787e:	4602      	mov	r2, r0
 8007880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007882:	1ad3      	subs	r3, r2, r3
 8007884:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007886:	429a      	cmp	r2, r3
 8007888:	d902      	bls.n	8007890 <HAL_SD_ReadBlocks+0x350>
 800788a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800788c:	2b00      	cmp	r3, #0
 800788e:	d112      	bne.n	80078b6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a18      	ldr	r2, [pc, #96]	; (80078f8 <HAL_SD_ReadBlocks+0x3b8>)
 8007896:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800789c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2201      	movs	r2, #1
 80078a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 80078b2:	2301      	movs	r3, #1
 80078b4:	e01b      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d002      	beq.n	80078ca <HAL_SD_ReadBlocks+0x38a>
 80078c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d1a6      	bne.n	8007818 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f240 523a 	movw	r2, #1338	; 0x53a
 80078d2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 80078dc:	2300      	movs	r3, #0
 80078de:	e006      	b.n	80078ee <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078e4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
  }
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3748      	adds	r7, #72	; 0x48
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
 80078f6:	bf00      	nop
 80078f8:	004005ff 	.word	0x004005ff

080078fc <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b092      	sub	sp, #72	; 0x48
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800790a:	f7fa fbd7 	bl	80020bc <HAL_GetTick>
 800790e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007914:	68bb      	ldr	r3, [r7, #8]
 8007916:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d107      	bne.n	800792e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007922:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e165      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b01      	cmp	r3, #1
 8007938:	f040 8158 	bne.w	8007bec <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2200      	movs	r2, #0
 8007940:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007942:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	441a      	add	r2, r3
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800794c:	429a      	cmp	r2, r3
 800794e:	d907      	bls.n	8007960 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007954:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 800795c:	2301      	movs	r3, #1
 800795e:	e14c      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2203      	movs	r2, #3
 8007964:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2200      	movs	r2, #0
 800796e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007974:	2b01      	cmp	r3, #1
 8007976:	d002      	beq.n	800797e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800797a:	025b      	lsls	r3, r3, #9
 800797c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800797e:	f04f 33ff 	mov.w	r3, #4294967295
 8007982:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007984:	683b      	ldr	r3, [r7, #0]
 8007986:	025b      	lsls	r3, r3, #9
 8007988:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 800798a:	2390      	movs	r3, #144	; 0x90
 800798c:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 800798e:	2300      	movs	r3, #0
 8007990:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007992:	2300      	movs	r3, #0
 8007994:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007996:	2301      	movs	r3, #1
 8007998:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f107 0218 	add.w	r2, r7, #24
 80079a2:	4611      	mov	r1, r2
 80079a4:	4618      	mov	r0, r3
 80079a6:	f002 f9c1 	bl	8009d2c <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 80079aa:	683b      	ldr	r3, [r7, #0]
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d90a      	bls.n	80079c6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2220      	movs	r2, #32
 80079b4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079bc:	4618      	mov	r0, r3
 80079be:	f002 fa69 	bl	8009e94 <SDMMC_CmdWriteMultiBlock>
 80079c2:	6478      	str	r0, [r7, #68]	; 0x44
 80079c4:	e009      	b.n	80079da <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2210      	movs	r2, #16
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079d2:	4618      	mov	r0, r3
 80079d4:	f002 fa3c 	bl	8009e50 <SDMMC_CmdWriteSingleBlock>
 80079d8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d012      	beq.n	8007a06 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	4a87      	ldr	r2, [pc, #540]	; (8007c04 <HAL_SD_WriteBlocks+0x308>)
 80079e6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ee:	431a      	orrs	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2200      	movs	r2, #0
 8007a00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007a02:	2301      	movs	r3, #1
 8007a04:	e0f9      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007a06:	69fb      	ldr	r3, [r7, #28]
 8007a08:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007a0a:	e065      	b.n	8007ad8 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d040      	beq.n	8007a9c <HAL_SD_WriteBlocks+0x1a0>
 8007a1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d03d      	beq.n	8007a9c <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007a20:	2300      	movs	r3, #0
 8007a22:	643b      	str	r3, [r7, #64]	; 0x40
 8007a24:	e037      	b.n	8007a96 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a28:	781b      	ldrb	r3, [r3, #0]
 8007a2a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	3301      	adds	r3, #1
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a34:	3b01      	subs	r3, #1
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a3a:	781b      	ldrb	r3, [r3, #0]
 8007a3c:	021a      	lsls	r2, r3, #8
 8007a3e:	697b      	ldr	r3, [r7, #20]
 8007a40:	4313      	orrs	r3, r2
 8007a42:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a46:	3301      	adds	r3, #1
 8007a48:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4c:	3b01      	subs	r3, #1
 8007a4e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a52:	781b      	ldrb	r3, [r3, #0]
 8007a54:	041a      	lsls	r2, r3, #16
 8007a56:	697b      	ldr	r3, [r7, #20]
 8007a58:	4313      	orrs	r3, r2
 8007a5a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5e:	3301      	adds	r3, #1
 8007a60:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a62:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a64:	3b01      	subs	r3, #1
 8007a66:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007a68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a6a:	781b      	ldrb	r3, [r3, #0]
 8007a6c:	061a      	lsls	r2, r3, #24
 8007a6e:	697b      	ldr	r3, [r7, #20]
 8007a70:	4313      	orrs	r3, r2
 8007a72:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a76:	3301      	adds	r3, #1
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f107 0214 	add.w	r2, r7, #20
 8007a88:	4611      	mov	r1, r2
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f002 f8d7 	bl	8009c3e <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007a90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a92:	3301      	adds	r3, #1
 8007a94:	643b      	str	r3, [r7, #64]	; 0x40
 8007a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a98:	2b07      	cmp	r3, #7
 8007a9a:	d9c4      	bls.n	8007a26 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007a9c:	f7fa fb0e 	bl	80020bc <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007aa8:	429a      	cmp	r2, r3
 8007aaa:	d902      	bls.n	8007ab2 <HAL_SD_WriteBlocks+0x1b6>
 8007aac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d112      	bne.n	8007ad8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a53      	ldr	r2, [pc, #332]	; (8007c04 <HAL_SD_WriteBlocks+0x308>)
 8007ab8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007abe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ac0:	431a      	orrs	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	2201      	movs	r2, #1
 8007aca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007ad4:	2303      	movs	r3, #3
 8007ad6:	e090      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ade:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d092      	beq.n	8007a0c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d022      	beq.n	8007b3a <HAL_SD_WriteBlocks+0x23e>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b01      	cmp	r3, #1
 8007af8:	d91f      	bls.n	8007b3a <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007afe:	2b03      	cmp	r3, #3
 8007b00:	d01b      	beq.n	8007b3a <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f002 f9e6 	bl	8009ed8 <SDMMC_CmdStopTransfer>
 8007b0c:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007b0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d012      	beq.n	8007b3a <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a3a      	ldr	r2, [pc, #232]	; (8007c04 <HAL_SD_WriteBlocks+0x308>)
 8007b1a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007b20:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b22:	431a      	orrs	r2, r3
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	2201      	movs	r2, #1
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007b36:	2301      	movs	r3, #1
 8007b38:	e05f      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b40:	f003 0308 	and.w	r3, r3, #8
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d012      	beq.n	8007b6e <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	4a2d      	ldr	r2, [pc, #180]	; (8007c04 <HAL_SD_WriteBlocks+0x308>)
 8007b4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b54:	f043 0208 	orr.w	r2, r3, #8
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2200      	movs	r2, #0
 8007b68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e045      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b74:	f003 0302 	and.w	r3, r3, #2
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d012      	beq.n	8007ba2 <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a20      	ldr	r2, [pc, #128]	; (8007c04 <HAL_SD_WriteBlocks+0x308>)
 8007b82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b88:	f043 0202 	orr.w	r2, r3, #2
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	e02b      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ba8:	f003 0310 	and.w	r3, r3, #16
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d012      	beq.n	8007bd6 <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4a13      	ldr	r2, [pc, #76]	; (8007c04 <HAL_SD_WriteBlocks+0x308>)
 8007bb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bbc:	f043 0210 	orr.w	r2, r3, #16
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2201      	movs	r2, #1
 8007bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e011      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	f240 523a 	movw	r2, #1338	; 0x53a
 8007bde:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007be8:	2300      	movs	r3, #0
 8007bea:	e006      	b.n	8007bfa <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bf0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007bf8:	2301      	movs	r3, #1
  }
}
 8007bfa:	4618      	mov	r0, r3
 8007bfc:	3748      	adds	r7, #72	; 0x48
 8007bfe:	46bd      	mov	sp, r7
 8007c00:	bd80      	pop	{r7, pc}
 8007c02:	bf00      	nop
 8007c04:	004005ff 	.word	0x004005ff

08007c08 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c16:	0f9b      	lsrs	r3, r3, #30
 8007c18:	b2da      	uxtb	r2, r3
 8007c1a:	683b      	ldr	r3, [r7, #0]
 8007c1c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c22:	0e9b      	lsrs	r3, r3, #26
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	f003 030f 	and.w	r3, r3, #15
 8007c2a:	b2da      	uxtb	r2, r3
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c34:	0e1b      	lsrs	r3, r3, #24
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	f003 0303 	and.w	r3, r3, #3
 8007c3c:	b2da      	uxtb	r2, r3
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c46:	0c1b      	lsrs	r3, r3, #16
 8007c48:	b2da      	uxtb	r2, r3
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c52:	0a1b      	lsrs	r3, r3, #8
 8007c54:	b2da      	uxtb	r2, r3
 8007c56:	683b      	ldr	r3, [r7, #0]
 8007c58:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c5e:	b2da      	uxtb	r2, r3
 8007c60:	683b      	ldr	r3, [r7, #0]
 8007c62:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c68:	0d1b      	lsrs	r3, r3, #20
 8007c6a:	b29a      	uxth	r2, r3
 8007c6c:	683b      	ldr	r3, [r7, #0]
 8007c6e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c74:	0c1b      	lsrs	r3, r3, #16
 8007c76:	b2db      	uxtb	r3, r3
 8007c78:	f003 030f 	and.w	r3, r3, #15
 8007c7c:	b2da      	uxtb	r2, r3
 8007c7e:	683b      	ldr	r3, [r7, #0]
 8007c80:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c86:	0bdb      	lsrs	r3, r3, #15
 8007c88:	b2db      	uxtb	r3, r3
 8007c8a:	f003 0301 	and.w	r3, r3, #1
 8007c8e:	b2da      	uxtb	r2, r3
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007c98:	0b9b      	lsrs	r3, r3, #14
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0301 	and.w	r3, r3, #1
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	683b      	ldr	r3, [r7, #0]
 8007ca4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007caa:	0b5b      	lsrs	r3, r3, #13
 8007cac:	b2db      	uxtb	r3, r3
 8007cae:	f003 0301 	and.w	r3, r3, #1
 8007cb2:	b2da      	uxtb	r2, r3
 8007cb4:	683b      	ldr	r3, [r7, #0]
 8007cb6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cbc:	0b1b      	lsrs	r3, r3, #12
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	f003 0301 	and.w	r3, r3, #1
 8007cc4:	b2da      	uxtb	r2, r3
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8007cca:	683b      	ldr	r3, [r7, #0]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d163      	bne.n	8007da0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007cdc:	009a      	lsls	r2, r3, #2
 8007cde:	f640 73fc 	movw	r3, #4092	; 0xffc
 8007ce2:	4013      	ands	r3, r2
 8007ce4:	687a      	ldr	r2, [r7, #4]
 8007ce6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8007ce8:	0f92      	lsrs	r2, r2, #30
 8007cea:	431a      	orrs	r2, r3
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007cf4:	0edb      	lsrs	r3, r3, #27
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	f003 0307 	and.w	r3, r3, #7
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d06:	0e1b      	lsrs	r3, r3, #24
 8007d08:	b2db      	uxtb	r3, r3
 8007d0a:	f003 0307 	and.w	r3, r3, #7
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	683b      	ldr	r3, [r7, #0]
 8007d12:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d18:	0d5b      	lsrs	r3, r3, #21
 8007d1a:	b2db      	uxtb	r3, r3
 8007d1c:	f003 0307 	and.w	r3, r3, #7
 8007d20:	b2da      	uxtb	r2, r3
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d2a:	0c9b      	lsrs	r3, r3, #18
 8007d2c:	b2db      	uxtb	r3, r3
 8007d2e:	f003 0307 	and.w	r3, r3, #7
 8007d32:	b2da      	uxtb	r2, r3
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d3c:	0bdb      	lsrs	r3, r3, #15
 8007d3e:	b2db      	uxtb	r3, r3
 8007d40:	f003 0307 	and.w	r3, r3, #7
 8007d44:	b2da      	uxtb	r2, r3
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	691b      	ldr	r3, [r3, #16]
 8007d4e:	1c5a      	adds	r2, r3, #1
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8007d54:	683b      	ldr	r3, [r7, #0]
 8007d56:	7e1b      	ldrb	r3, [r3, #24]
 8007d58:	b2db      	uxtb	r3, r3
 8007d5a:	f003 0307 	and.w	r3, r3, #7
 8007d5e:	3302      	adds	r3, #2
 8007d60:	2201      	movs	r2, #1
 8007d62:	fa02 f303 	lsl.w	r3, r2, r3
 8007d66:	687a      	ldr	r2, [r7, #4]
 8007d68:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007d6a:	fb03 f202 	mul.w	r2, r3, r2
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	7a1b      	ldrb	r3, [r3, #8]
 8007d76:	b2db      	uxtb	r3, r3
 8007d78:	f003 030f 	and.w	r3, r3, #15
 8007d7c:	2201      	movs	r2, #1
 8007d7e:	409a      	lsls	r2, r3
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8007d8c:	0a52      	lsrs	r2, r2, #9
 8007d8e:	fb03 f202 	mul.w	r2, r3, r2
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007d9c:	661a      	str	r2, [r3, #96]	; 0x60
 8007d9e:	e031      	b.n	8007e04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007da4:	2b01      	cmp	r3, #1
 8007da6:	d11d      	bne.n	8007de4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007dac:	041b      	lsls	r3, r3, #16
 8007dae:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db6:	0c1b      	lsrs	r3, r3, #16
 8007db8:	431a      	orrs	r2, r3
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8007dbe:	683b      	ldr	r3, [r7, #0]
 8007dc0:	691b      	ldr	r3, [r3, #16]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	029a      	lsls	r2, r3, #10
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007dd8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	661a      	str	r2, [r3, #96]	; 0x60
 8007de2:	e00f      	b.n	8007e04 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a58      	ldr	r2, [pc, #352]	; (8007f4c <HAL_SD_GetCardCSD+0x344>)
 8007dea:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	2201      	movs	r2, #1
 8007dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8007e00:	2301      	movs	r3, #1
 8007e02:	e09d      	b.n	8007f40 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e08:	0b9b      	lsrs	r3, r3, #14
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	f003 0301 	and.w	r3, r3, #1
 8007e10:	b2da      	uxtb	r2, r3
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e1a:	09db      	lsrs	r3, r3, #7
 8007e1c:	b2db      	uxtb	r3, r3
 8007e1e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007e2c:	b2db      	uxtb	r3, r3
 8007e2e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007e32:	b2da      	uxtb	r2, r3
 8007e34:	683b      	ldr	r3, [r7, #0]
 8007e36:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e3c:	0fdb      	lsrs	r3, r3, #31
 8007e3e:	b2da      	uxtb	r2, r3
 8007e40:	683b      	ldr	r3, [r7, #0]
 8007e42:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e48:	0f5b      	lsrs	r3, r3, #29
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0303 	and.w	r3, r3, #3
 8007e50:	b2da      	uxtb	r2, r3
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e5a:	0e9b      	lsrs	r3, r3, #26
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f003 0307 	and.w	r3, r3, #7
 8007e62:	b2da      	uxtb	r2, r3
 8007e64:	683b      	ldr	r3, [r7, #0]
 8007e66:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e6c:	0d9b      	lsrs	r3, r3, #22
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	f003 030f 	and.w	r3, r3, #15
 8007e74:	b2da      	uxtb	r2, r3
 8007e76:	683b      	ldr	r3, [r7, #0]
 8007e78:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e7e:	0d5b      	lsrs	r3, r3, #21
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	f003 0301 	and.w	r3, r3, #1
 8007e86:	b2da      	uxtb	r2, r3
 8007e88:	683b      	ldr	r3, [r7, #0]
 8007e8a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007e9a:	0c1b      	lsrs	r3, r3, #16
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	b2da      	uxtb	r2, r3
 8007ea4:	683b      	ldr	r3, [r7, #0]
 8007ea6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eae:	0bdb      	lsrs	r3, r3, #15
 8007eb0:	b2db      	uxtb	r3, r3
 8007eb2:	f003 0301 	and.w	r3, r3, #1
 8007eb6:	b2da      	uxtb	r2, r3
 8007eb8:	683b      	ldr	r3, [r7, #0]
 8007eba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ec2:	0b9b      	lsrs	r3, r3, #14
 8007ec4:	b2db      	uxtb	r3, r3
 8007ec6:	f003 0301 	and.w	r3, r3, #1
 8007eca:	b2da      	uxtb	r2, r3
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed6:	0b5b      	lsrs	r3, r3, #13
 8007ed8:	b2db      	uxtb	r3, r3
 8007eda:	f003 0301 	and.w	r3, r3, #1
 8007ede:	b2da      	uxtb	r2, r3
 8007ee0:	683b      	ldr	r3, [r7, #0]
 8007ee2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007eea:	0b1b      	lsrs	r3, r3, #12
 8007eec:	b2db      	uxtb	r3, r3
 8007eee:	f003 0301 	and.w	r3, r3, #1
 8007ef2:	b2da      	uxtb	r2, r3
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007efe:	0a9b      	lsrs	r3, r3, #10
 8007f00:	b2db      	uxtb	r3, r3
 8007f02:	f003 0303 	and.w	r3, r3, #3
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f12:	0a1b      	lsrs	r3, r3, #8
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	f003 0303 	and.w	r3, r3, #3
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f26:	085b      	lsrs	r3, r3, #1
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8007f36:	683b      	ldr	r3, [r7, #0]
 8007f38:	2201      	movs	r2, #1
 8007f3a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	004005ff 	.word	0x004005ff

08007f50 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
 8007f58:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f5e:	683b      	ldr	r3, [r7, #0]
 8007f60:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f66:	683b      	ldr	r3, [r7, #0]
 8007f68:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007f7e:	683b      	ldr	r3, [r7, #0]
 8007f80:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007f96:	683b      	ldr	r3, [r7, #0]
 8007f98:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8007f9a:	2300      	movs	r3, #0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	370c      	adds	r7, #12
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa6:	4770      	bx	lr

08007fa8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b086      	sub	sp, #24
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8007fb4:	f107 030c 	add.w	r3, r7, #12
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f970 	bl	80082a0 <SD_SendStatus>
 8007fc0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	d005      	beq.n	8007fd4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	0a5b      	lsrs	r3, r3, #9
 8007fd8:	f003 030f 	and.w	r3, r3, #15
 8007fdc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8007fde:	693b      	ldr	r3, [r7, #16]
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3718      	adds	r7, #24
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8007fe8:	b5b0      	push	{r4, r5, r7, lr}
 8007fea:	b094      	sub	sp, #80	; 0x50
 8007fec:	af04      	add	r7, sp, #16
 8007fee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8007ff0:	2301      	movs	r3, #1
 8007ff2:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4618      	mov	r0, r3
 8007ffa:	f001 fe3f 	bl	8009c7c <SDMMC_GetPowerState>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d102      	bne.n	800800a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8008004:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8008008:	e0b8      	b.n	800817c <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800800e:	2b03      	cmp	r3, #3
 8008010:	d02f      	beq.n	8008072 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4618      	mov	r0, r3
 8008018:	f002 f826 	bl	800a068 <SDMMC_CmdSendCID>
 800801c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800801e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008020:	2b00      	cmp	r3, #0
 8008022:	d001      	beq.n	8008028 <SD_InitCard+0x40>
    {
      return errorstate;
 8008024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008026:	e0a9      	b.n	800817c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	2100      	movs	r1, #0
 800802e:	4618      	mov	r0, r3
 8008030:	f001 fe69 	bl	8009d06 <SDMMC_GetResponse>
 8008034:	4602      	mov	r2, r0
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2104      	movs	r1, #4
 8008040:	4618      	mov	r0, r3
 8008042:	f001 fe60 	bl	8009d06 <SDMMC_GetResponse>
 8008046:	4602      	mov	r2, r0
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	2108      	movs	r1, #8
 8008052:	4618      	mov	r0, r3
 8008054:	f001 fe57 	bl	8009d06 <SDMMC_GetResponse>
 8008058:	4602      	mov	r2, r0
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	210c      	movs	r1, #12
 8008064:	4618      	mov	r0, r3
 8008066:	f001 fe4e 	bl	8009d06 <SDMMC_GetResponse>
 800806a:	4602      	mov	r2, r0
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008076:	2b03      	cmp	r3, #3
 8008078:	d00d      	beq.n	8008096 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f107 020e 	add.w	r2, r7, #14
 8008082:	4611      	mov	r1, r2
 8008084:	4618      	mov	r0, r3
 8008086:	f002 f82c 	bl	800a0e2 <SDMMC_CmdSetRelAdd>
 800808a:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800808c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800808e:	2b00      	cmp	r3, #0
 8008090:	d001      	beq.n	8008096 <SD_InitCard+0xae>
    {
      return errorstate;
 8008092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008094:	e072      	b.n	800817c <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809a:	2b03      	cmp	r3, #3
 800809c:	d036      	beq.n	800810c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 800809e:	89fb      	ldrh	r3, [r7, #14]
 80080a0:	461a      	mov	r2, r3
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681a      	ldr	r2, [r3, #0]
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	4619      	mov	r1, r3
 80080b2:	4610      	mov	r0, r2
 80080b4:	f001 fff6 	bl	800a0a4 <SDMMC_CmdSendCSD>
 80080b8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80080ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d001      	beq.n	80080c4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80080c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80080c2:	e05b      	b.n	800817c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2100      	movs	r1, #0
 80080ca:	4618      	mov	r0, r3
 80080cc:	f001 fe1b 	bl	8009d06 <SDMMC_GetResponse>
 80080d0:	4602      	mov	r2, r0
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2104      	movs	r1, #4
 80080dc:	4618      	mov	r0, r3
 80080de:	f001 fe12 	bl	8009d06 <SDMMC_GetResponse>
 80080e2:	4602      	mov	r2, r0
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	2108      	movs	r1, #8
 80080ee:	4618      	mov	r0, r3
 80080f0:	f001 fe09 	bl	8009d06 <SDMMC_GetResponse>
 80080f4:	4602      	mov	r2, r0
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	210c      	movs	r1, #12
 8008100:	4618      	mov	r0, r3
 8008102:	f001 fe00 	bl	8009d06 <SDMMC_GetResponse>
 8008106:	4602      	mov	r2, r0
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	2104      	movs	r1, #4
 8008112:	4618      	mov	r0, r3
 8008114:	f001 fdf7 	bl	8009d06 <SDMMC_GetResponse>
 8008118:	4603      	mov	r3, r0
 800811a:	0d1a      	lsrs	r2, r3, #20
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8008120:	f107 0310 	add.w	r3, r7, #16
 8008124:	4619      	mov	r1, r3
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f7ff fd6e 	bl	8007c08 <HAL_SD_GetCardCSD>
 800812c:	4603      	mov	r3, r0
 800812e:	2b00      	cmp	r3, #0
 8008130:	d002      	beq.n	8008138 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008136:	e021      	b.n	800817c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6819      	ldr	r1, [r3, #0]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008140:	041b      	lsls	r3, r3, #16
 8008142:	2200      	movs	r2, #0
 8008144:	461c      	mov	r4, r3
 8008146:	4615      	mov	r5, r2
 8008148:	4622      	mov	r2, r4
 800814a:	462b      	mov	r3, r5
 800814c:	4608      	mov	r0, r1
 800814e:	f001 fee5 	bl	8009f1c <SDMMC_CmdSelDesel>
 8008152:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8008154:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008156:	2b00      	cmp	r3, #0
 8008158:	d001      	beq.n	800815e <SD_InitCard+0x176>
  {
    return errorstate;
 800815a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815c:	e00e      	b.n	800817c <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681d      	ldr	r5, [r3, #0]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	466c      	mov	r4, sp
 8008166:	f103 0210 	add.w	r2, r3, #16
 800816a:	ca07      	ldmia	r2, {r0, r1, r2}
 800816c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008170:	3304      	adds	r3, #4
 8008172:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008174:	4628      	mov	r0, r5
 8008176:	f001 fd29 	bl	8009bcc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 800817a:	2300      	movs	r3, #0
}
 800817c:	4618      	mov	r0, r3
 800817e:	3740      	adds	r7, #64	; 0x40
 8008180:	46bd      	mov	sp, r7
 8008182:	bdb0      	pop	{r4, r5, r7, pc}

08008184 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b086      	sub	sp, #24
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800818c:	2300      	movs	r3, #0
 800818e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4618      	mov	r0, r3
 800819e:	f001 fee0 	bl	8009f62 <SDMMC_CmdGoIdleState>
 80081a2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d001      	beq.n	80081ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	e072      	b.n	8008294 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 fef3 	bl	8009f9e <SDMMC_CmdOperCond>
 80081b8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d00d      	beq.n	80081dc <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2200      	movs	r2, #0
 80081c4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f001 fec9 	bl	8009f62 <SDMMC_CmdGoIdleState>
 80081d0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d004      	beq.n	80081e2 <SD_PowerON+0x5e>
    {
      return errorstate;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	e05b      	b.n	8008294 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d137      	bne.n	800825a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	2100      	movs	r1, #0
 80081f0:	4618      	mov	r0, r3
 80081f2:	f001 fef3 	bl	8009fdc <SDMMC_CmdAppCommand>
 80081f6:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2b00      	cmp	r3, #0
 80081fc:	d02d      	beq.n	800825a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80081fe:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008202:	e047      	b.n	8008294 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2100      	movs	r1, #0
 800820a:	4618      	mov	r0, r3
 800820c:	f001 fee6 	bl	8009fdc <SDMMC_CmdAppCommand>
 8008210:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d001      	beq.n	800821c <SD_PowerON+0x98>
    {
      return errorstate;
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	e03b      	b.n	8008294 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	491e      	ldr	r1, [pc, #120]	; (800829c <SD_PowerON+0x118>)
 8008222:	4618      	mov	r0, r3
 8008224:	f001 fefc 	bl	800a020 <SDMMC_CmdAppOperCommand>
 8008228:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d002      	beq.n	8008236 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008230:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8008234:	e02e      	b.n	8008294 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2100      	movs	r1, #0
 800823c:	4618      	mov	r0, r3
 800823e:	f001 fd62 	bl	8009d06 <SDMMC_GetResponse>
 8008242:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	0fdb      	lsrs	r3, r3, #31
 8008248:	2b01      	cmp	r3, #1
 800824a:	d101      	bne.n	8008250 <SD_PowerON+0xcc>
 800824c:	2301      	movs	r3, #1
 800824e:	e000      	b.n	8008252 <SD_PowerON+0xce>
 8008250:	2300      	movs	r3, #0
 8008252:	613b      	str	r3, [r7, #16]

    count++;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	3301      	adds	r3, #1
 8008258:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 800825a:	68bb      	ldr	r3, [r7, #8]
 800825c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008260:	4293      	cmp	r3, r2
 8008262:	d802      	bhi.n	800826a <SD_PowerON+0xe6>
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d0cc      	beq.n	8008204 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008270:	4293      	cmp	r3, r2
 8008272:	d902      	bls.n	800827a <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8008274:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008278:	e00c      	b.n	8008294 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008280:	2b00      	cmp	r3, #0
 8008282:	d003      	beq.n	800828c <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	645a      	str	r2, [r3, #68]	; 0x44
 800828a:	e002      	b.n	8008292 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	2200      	movs	r2, #0
 8008290:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8008292:	2300      	movs	r3, #0
}
 8008294:	4618      	mov	r0, r3
 8008296:	3718      	adds	r7, #24
 8008298:	46bd      	mov	sp, r7
 800829a:	bd80      	pop	{r7, pc}
 800829c:	c1100000 	.word	0xc1100000

080082a0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80082a0:	b580      	push	{r7, lr}
 80082a2:	b084      	sub	sp, #16
 80082a4:	af00      	add	r7, sp, #0
 80082a6:	6078      	str	r0, [r7, #4]
 80082a8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80082aa:	683b      	ldr	r3, [r7, #0]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d102      	bne.n	80082b6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80082b0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80082b4:	e018      	b.n	80082e8 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082be:	041b      	lsls	r3, r3, #16
 80082c0:	4619      	mov	r1, r3
 80082c2:	4610      	mov	r0, r2
 80082c4:	f001 ff2e 	bl	800a124 <SDMMC_CmdSendStatus>
 80082c8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d001      	beq.n	80082d4 <SD_SendStatus+0x34>
  {
    return errorstate;
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	e009      	b.n	80082e8 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	2100      	movs	r1, #0
 80082da:	4618      	mov	r0, r3
 80082dc:	f001 fd13 	bl	8009d06 <SDMMC_GetResponse>
 80082e0:	4602      	mov	r2, r0
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bd80      	pop	{r7, pc}

080082f0 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	60f8      	str	r0, [r7, #12]
 80082f8:	60b9      	str	r1, [r7, #8]
 80082fa:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d101      	bne.n	8008306 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8008302:	2301      	movs	r3, #1
 8008304:	e038      	b.n	8008378 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800830c:	b2db      	uxtb	r3, r3
 800830e:	2b00      	cmp	r3, #0
 8008310:	d106      	bne.n	8008320 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800831a:	68f8      	ldr	r0, [r7, #12]
 800831c:	f7f9 fd16 	bl	8001d4c <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681a      	ldr	r2, [r3, #0]
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3308      	adds	r3, #8
 8008328:	4619      	mov	r1, r3
 800832a:	4610      	mov	r0, r2
 800832c:	f001 fb36 	bl	800999c <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	6818      	ldr	r0, [r3, #0]
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	461a      	mov	r2, r3
 800833a:	68b9      	ldr	r1, [r7, #8]
 800833c:	f001 fbbe 	bl	8009abc <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	6858      	ldr	r0, [r3, #4]
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	689a      	ldr	r2, [r3, #8]
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800834c:	6879      	ldr	r1, [r7, #4]
 800834e:	f001 fc05 	bl	8009b5c <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68fa      	ldr	r2, [r7, #12]
 8008358:	6892      	ldr	r2, [r2, #8]
 800835a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	68fa      	ldr	r2, [r7, #12]
 8008364:	6892      	ldr	r2, [r2, #8]
 8008366:	f041 0101 	orr.w	r1, r1, #1
 800836a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	2201      	movs	r2, #1
 8008372:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 8008376:	2300      	movs	r3, #0
}
 8008378:	4618      	mov	r0, r3
 800837a:	3710      	adds	r7, #16
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800838e:	2301      	movs	r3, #1
 8008390:	e049      	b.n	8008426 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b00      	cmp	r3, #0
 800839c:	d106      	bne.n	80083ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	2200      	movs	r2, #0
 80083a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f7f9 fb98 	bl	8001adc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681a      	ldr	r2, [r3, #0]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3304      	adds	r3, #4
 80083bc:	4619      	mov	r1, r3
 80083be:	4610      	mov	r0, r2
 80083c0:	f000 fa74 	bl	80088ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	2201      	movs	r2, #1
 80083c8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	2201      	movs	r2, #1
 80083d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	2201      	movs	r2, #1
 80083d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2201      	movs	r2, #1
 8008400:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	2201      	movs	r2, #1
 8008408:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	2201      	movs	r2, #1
 8008410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	2201      	movs	r2, #1
 8008418:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008424:	2300      	movs	r3, #0
}
 8008426:	4618      	mov	r0, r3
 8008428:	3708      	adds	r7, #8
 800842a:	46bd      	mov	sp, r7
 800842c:	bd80      	pop	{r7, pc}

0800842e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800842e:	b580      	push	{r7, lr}
 8008430:	b082      	sub	sp, #8
 8008432:	af00      	add	r7, sp, #0
 8008434:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	2b00      	cmp	r3, #0
 800843a:	d101      	bne.n	8008440 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800843c:	2301      	movs	r3, #1
 800843e:	e049      	b.n	80084d4 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008446:	b2db      	uxtb	r3, r3
 8008448:	2b00      	cmp	r3, #0
 800844a:	d106      	bne.n	800845a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 f841 	bl	80084dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2202      	movs	r2, #2
 800845e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681a      	ldr	r2, [r3, #0]
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	3304      	adds	r3, #4
 800846a:	4619      	mov	r1, r3
 800846c:	4610      	mov	r0, r2
 800846e:	f000 fa1d 	bl	80088ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2201      	movs	r2, #1
 8008476:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	2201      	movs	r2, #1
 800847e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	2201      	movs	r2, #1
 8008486:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2201      	movs	r2, #1
 800848e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2201      	movs	r2, #1
 8008496:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2201      	movs	r2, #1
 80084a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2201      	movs	r2, #1
 80084be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2201      	movs	r2, #1
 80084c6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3708      	adds	r7, #8
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80084dc:	b480      	push	{r7}
 80084de:	b083      	sub	sp, #12
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80084e4:	bf00      	nop
 80084e6:	370c      	adds	r7, #12
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	60f8      	str	r0, [r7, #12]
 80084f8:	60b9      	str	r1, [r7, #8]
 80084fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008506:	2b01      	cmp	r3, #1
 8008508:	d101      	bne.n	800850e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800850a:	2302      	movs	r3, #2
 800850c:	e0ff      	b.n	800870e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2201      	movs	r2, #1
 8008512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	2b14      	cmp	r3, #20
 800851a:	f200 80f0 	bhi.w	80086fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800851e:	a201      	add	r2, pc, #4	; (adr r2, 8008524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008524:	08008579 	.word	0x08008579
 8008528:	080086ff 	.word	0x080086ff
 800852c:	080086ff 	.word	0x080086ff
 8008530:	080086ff 	.word	0x080086ff
 8008534:	080085b9 	.word	0x080085b9
 8008538:	080086ff 	.word	0x080086ff
 800853c:	080086ff 	.word	0x080086ff
 8008540:	080086ff 	.word	0x080086ff
 8008544:	080085fb 	.word	0x080085fb
 8008548:	080086ff 	.word	0x080086ff
 800854c:	080086ff 	.word	0x080086ff
 8008550:	080086ff 	.word	0x080086ff
 8008554:	0800863b 	.word	0x0800863b
 8008558:	080086ff 	.word	0x080086ff
 800855c:	080086ff 	.word	0x080086ff
 8008560:	080086ff 	.word	0x080086ff
 8008564:	0800867d 	.word	0x0800867d
 8008568:	080086ff 	.word	0x080086ff
 800856c:	080086ff 	.word	0x080086ff
 8008570:	080086ff 	.word	0x080086ff
 8008574:	080086bd 	.word	0x080086bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	68b9      	ldr	r1, [r7, #8]
 800857e:	4618      	mov	r0, r3
 8008580:	f000 fa34 	bl	80089ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	699a      	ldr	r2, [r3, #24]
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	f042 0208 	orr.w	r2, r2, #8
 8008592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	699a      	ldr	r2, [r3, #24]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f022 0204 	bic.w	r2, r2, #4
 80085a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	6999      	ldr	r1, [r3, #24]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	691a      	ldr	r2, [r3, #16]
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	430a      	orrs	r2, r1
 80085b4:	619a      	str	r2, [r3, #24]
      break;
 80085b6:	e0a5      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	68b9      	ldr	r1, [r7, #8]
 80085be:	4618      	mov	r0, r3
 80085c0:	f000 fa86 	bl	8008ad0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	699a      	ldr	r2, [r3, #24]
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80085d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	699a      	ldr	r2, [r3, #24]
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80085e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	6999      	ldr	r1, [r3, #24]
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	691b      	ldr	r3, [r3, #16]
 80085ee:	021a      	lsls	r2, r3, #8
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	430a      	orrs	r2, r1
 80085f6:	619a      	str	r2, [r3, #24]
      break;
 80085f8:	e084      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	68b9      	ldr	r1, [r7, #8]
 8008600:	4618      	mov	r0, r3
 8008602:	f000 fadd 	bl	8008bc0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69da      	ldr	r2, [r3, #28]
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	f042 0208 	orr.w	r2, r2, #8
 8008614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	69da      	ldr	r2, [r3, #28]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f022 0204 	bic.w	r2, r2, #4
 8008624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	69d9      	ldr	r1, [r3, #28]
 800862c:	68bb      	ldr	r3, [r7, #8]
 800862e:	691a      	ldr	r2, [r3, #16]
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	430a      	orrs	r2, r1
 8008636:	61da      	str	r2, [r3, #28]
      break;
 8008638:	e064      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68b9      	ldr	r1, [r7, #8]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 fb33 	bl	8008cac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	69da      	ldr	r2, [r3, #28]
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	69da      	ldr	r2, [r3, #28]
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	69d9      	ldr	r1, [r3, #28]
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	691b      	ldr	r3, [r3, #16]
 8008670:	021a      	lsls	r2, r3, #8
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	430a      	orrs	r2, r1
 8008678:	61da      	str	r2, [r3, #28]
      break;
 800867a:	e043      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68b9      	ldr	r1, [r7, #8]
 8008682:	4618      	mov	r0, r3
 8008684:	f000 fb6a 	bl	8008d5c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f042 0208 	orr.w	r2, r2, #8
 8008696:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f022 0204 	bic.w	r2, r2, #4
 80086a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	691a      	ldr	r2, [r3, #16]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	430a      	orrs	r2, r1
 80086b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086ba:	e023      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	68b9      	ldr	r1, [r7, #8]
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fb9c 	bl	8008e00 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80086d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80086ee:	68bb      	ldr	r3, [r7, #8]
 80086f0:	691b      	ldr	r3, [r3, #16]
 80086f2:	021a      	lsls	r2, r3, #8
 80086f4:	68fb      	ldr	r3, [r7, #12]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	430a      	orrs	r2, r1
 80086fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80086fc:	e002      	b.n	8008704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	75fb      	strb	r3, [r7, #23]
      break;
 8008702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	2200      	movs	r2, #0
 8008708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800870c:	7dfb      	ldrb	r3, [r7, #23]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3718      	adds	r7, #24
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}
 8008716:	bf00      	nop

08008718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b084      	sub	sp, #16
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
 8008720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008722:	2300      	movs	r3, #0
 8008724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_TIM_ConfigClockSource+0x1c>
 8008730:	2302      	movs	r3, #2
 8008732:	e0b4      	b.n	800889e <HAL_TIM_ConfigClockSource+0x186>
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2201      	movs	r2, #1
 8008738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	689b      	ldr	r3, [r3, #8]
 800874a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800874c:	68ba      	ldr	r2, [r7, #8]
 800874e:	4b56      	ldr	r3, [pc, #344]	; (80088a8 <HAL_TIM_ConfigClockSource+0x190>)
 8008750:	4013      	ands	r3, r2
 8008752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800875a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	68ba      	ldr	r2, [r7, #8]
 8008762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008764:	683b      	ldr	r3, [r7, #0]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800876c:	d03e      	beq.n	80087ec <HAL_TIM_ConfigClockSource+0xd4>
 800876e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008772:	f200 8087 	bhi.w	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800877a:	f000 8086 	beq.w	800888a <HAL_TIM_ConfigClockSource+0x172>
 800877e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008782:	d87f      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008784:	2b70      	cmp	r3, #112	; 0x70
 8008786:	d01a      	beq.n	80087be <HAL_TIM_ConfigClockSource+0xa6>
 8008788:	2b70      	cmp	r3, #112	; 0x70
 800878a:	d87b      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 800878c:	2b60      	cmp	r3, #96	; 0x60
 800878e:	d050      	beq.n	8008832 <HAL_TIM_ConfigClockSource+0x11a>
 8008790:	2b60      	cmp	r3, #96	; 0x60
 8008792:	d877      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 8008794:	2b50      	cmp	r3, #80	; 0x50
 8008796:	d03c      	beq.n	8008812 <HAL_TIM_ConfigClockSource+0xfa>
 8008798:	2b50      	cmp	r3, #80	; 0x50
 800879a:	d873      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 800879c:	2b40      	cmp	r3, #64	; 0x40
 800879e:	d058      	beq.n	8008852 <HAL_TIM_ConfigClockSource+0x13a>
 80087a0:	2b40      	cmp	r3, #64	; 0x40
 80087a2:	d86f      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087a4:	2b30      	cmp	r3, #48	; 0x30
 80087a6:	d064      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087a8:	2b30      	cmp	r3, #48	; 0x30
 80087aa:	d86b      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d060      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087b0:	2b20      	cmp	r3, #32
 80087b2:	d867      	bhi.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d05c      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087b8:	2b10      	cmp	r3, #16
 80087ba:	d05a      	beq.n	8008872 <HAL_TIM_ConfigClockSource+0x15a>
 80087bc:	e062      	b.n	8008884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6818      	ldr	r0, [r3, #0]
 80087c2:	683b      	ldr	r3, [r7, #0]
 80087c4:	6899      	ldr	r1, [r3, #8]
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	685a      	ldr	r2, [r3, #4]
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	f000 fbe5 	bl	8008f9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	689b      	ldr	r3, [r3, #8]
 80087d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80087e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	68ba      	ldr	r2, [r7, #8]
 80087e8:	609a      	str	r2, [r3, #8]
      break;
 80087ea:	e04f      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6818      	ldr	r0, [r3, #0]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	6899      	ldr	r1, [r3, #8]
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	685a      	ldr	r2, [r3, #4]
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	68db      	ldr	r3, [r3, #12]
 80087fc:	f000 fbce 	bl	8008f9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	689a      	ldr	r2, [r3, #8]
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800880e:	609a      	str	r2, [r3, #8]
      break;
 8008810:	e03c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6818      	ldr	r0, [r3, #0]
 8008816:	683b      	ldr	r3, [r7, #0]
 8008818:	6859      	ldr	r1, [r3, #4]
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	68db      	ldr	r3, [r3, #12]
 800881e:	461a      	mov	r2, r3
 8008820:	f000 fb42 	bl	8008ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	2150      	movs	r1, #80	; 0x50
 800882a:	4618      	mov	r0, r3
 800882c:	f000 fb9b 	bl	8008f66 <TIM_ITRx_SetConfig>
      break;
 8008830:	e02c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6818      	ldr	r0, [r3, #0]
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	6859      	ldr	r1, [r3, #4]
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	68db      	ldr	r3, [r3, #12]
 800883e:	461a      	mov	r2, r3
 8008840:	f000 fb61 	bl	8008f06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2160      	movs	r1, #96	; 0x60
 800884a:	4618      	mov	r0, r3
 800884c:	f000 fb8b 	bl	8008f66 <TIM_ITRx_SetConfig>
      break;
 8008850:	e01c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6818      	ldr	r0, [r3, #0]
 8008856:	683b      	ldr	r3, [r7, #0]
 8008858:	6859      	ldr	r1, [r3, #4]
 800885a:	683b      	ldr	r3, [r7, #0]
 800885c:	68db      	ldr	r3, [r3, #12]
 800885e:	461a      	mov	r2, r3
 8008860:	f000 fb22 	bl	8008ea8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2140      	movs	r1, #64	; 0x40
 800886a:	4618      	mov	r0, r3
 800886c:	f000 fb7b 	bl	8008f66 <TIM_ITRx_SetConfig>
      break;
 8008870:	e00c      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681a      	ldr	r2, [r3, #0]
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4619      	mov	r1, r3
 800887c:	4610      	mov	r0, r2
 800887e:	f000 fb72 	bl	8008f66 <TIM_ITRx_SetConfig>
      break;
 8008882:	e003      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008884:	2301      	movs	r3, #1
 8008886:	73fb      	strb	r3, [r7, #15]
      break;
 8008888:	e000      	b.n	800888c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800888a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2201      	movs	r2, #1
 8008890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2200      	movs	r2, #0
 8008898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800889c:	7bfb      	ldrb	r3, [r7, #15]
}
 800889e:	4618      	mov	r0, r3
 80088a0:	3710      	adds	r7, #16
 80088a2:	46bd      	mov	sp, r7
 80088a4:	bd80      	pop	{r7, pc}
 80088a6:	bf00      	nop
 80088a8:	fffeff88 	.word	0xfffeff88

080088ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80088ac:	b480      	push	{r7}
 80088ae:	b085      	sub	sp, #20
 80088b0:	af00      	add	r7, sp, #0
 80088b2:	6078      	str	r0, [r7, #4]
 80088b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	4a40      	ldr	r2, [pc, #256]	; (80089c0 <TIM_Base_SetConfig+0x114>)
 80088c0:	4293      	cmp	r3, r2
 80088c2:	d013      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80088ca:	d00f      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	4a3d      	ldr	r2, [pc, #244]	; (80089c4 <TIM_Base_SetConfig+0x118>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d00b      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	4a3c      	ldr	r2, [pc, #240]	; (80089c8 <TIM_Base_SetConfig+0x11c>)
 80088d8:	4293      	cmp	r3, r2
 80088da:	d007      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	4a3b      	ldr	r2, [pc, #236]	; (80089cc <TIM_Base_SetConfig+0x120>)
 80088e0:	4293      	cmp	r3, r2
 80088e2:	d003      	beq.n	80088ec <TIM_Base_SetConfig+0x40>
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	4a3a      	ldr	r2, [pc, #232]	; (80089d0 <TIM_Base_SetConfig+0x124>)
 80088e8:	4293      	cmp	r3, r2
 80088ea:	d108      	bne.n	80088fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80088f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	685b      	ldr	r3, [r3, #4]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4313      	orrs	r3, r2
 80088fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	4a2f      	ldr	r2, [pc, #188]	; (80089c0 <TIM_Base_SetConfig+0x114>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d02b      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800890c:	d027      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	4a2c      	ldr	r2, [pc, #176]	; (80089c4 <TIM_Base_SetConfig+0x118>)
 8008912:	4293      	cmp	r3, r2
 8008914:	d023      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	4a2b      	ldr	r2, [pc, #172]	; (80089c8 <TIM_Base_SetConfig+0x11c>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d01f      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	4a2a      	ldr	r2, [pc, #168]	; (80089cc <TIM_Base_SetConfig+0x120>)
 8008922:	4293      	cmp	r3, r2
 8008924:	d01b      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	4a29      	ldr	r2, [pc, #164]	; (80089d0 <TIM_Base_SetConfig+0x124>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d017      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	4a28      	ldr	r2, [pc, #160]	; (80089d4 <TIM_Base_SetConfig+0x128>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d013      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	4a27      	ldr	r2, [pc, #156]	; (80089d8 <TIM_Base_SetConfig+0x12c>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00f      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	4a26      	ldr	r2, [pc, #152]	; (80089dc <TIM_Base_SetConfig+0x130>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d00b      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4a25      	ldr	r2, [pc, #148]	; (80089e0 <TIM_Base_SetConfig+0x134>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d007      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4a24      	ldr	r2, [pc, #144]	; (80089e4 <TIM_Base_SetConfig+0x138>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d003      	beq.n	800895e <TIM_Base_SetConfig+0xb2>
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	4a23      	ldr	r2, [pc, #140]	; (80089e8 <TIM_Base_SetConfig+0x13c>)
 800895a:	4293      	cmp	r3, r2
 800895c:	d108      	bne.n	8008970 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008964:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	68db      	ldr	r3, [r3, #12]
 800896a:	68fa      	ldr	r2, [r7, #12]
 800896c:	4313      	orrs	r3, r2
 800896e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008976:	683b      	ldr	r3, [r7, #0]
 8008978:	695b      	ldr	r3, [r3, #20]
 800897a:	4313      	orrs	r3, r2
 800897c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68fa      	ldr	r2, [r7, #12]
 8008982:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	689a      	ldr	r2, [r3, #8]
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	681a      	ldr	r2, [r3, #0]
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	4a0a      	ldr	r2, [pc, #40]	; (80089c0 <TIM_Base_SetConfig+0x114>)
 8008998:	4293      	cmp	r3, r2
 800899a:	d003      	beq.n	80089a4 <TIM_Base_SetConfig+0xf8>
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	4a0c      	ldr	r2, [pc, #48]	; (80089d0 <TIM_Base_SetConfig+0x124>)
 80089a0:	4293      	cmp	r3, r2
 80089a2:	d103      	bne.n	80089ac <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	691a      	ldr	r2, [r3, #16]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2201      	movs	r2, #1
 80089b0:	615a      	str	r2, [r3, #20]
}
 80089b2:	bf00      	nop
 80089b4:	3714      	adds	r7, #20
 80089b6:	46bd      	mov	sp, r7
 80089b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089bc:	4770      	bx	lr
 80089be:	bf00      	nop
 80089c0:	40010000 	.word	0x40010000
 80089c4:	40000400 	.word	0x40000400
 80089c8:	40000800 	.word	0x40000800
 80089cc:	40000c00 	.word	0x40000c00
 80089d0:	40010400 	.word	0x40010400
 80089d4:	40014000 	.word	0x40014000
 80089d8:	40014400 	.word	0x40014400
 80089dc:	40014800 	.word	0x40014800
 80089e0:	40001800 	.word	0x40001800
 80089e4:	40001c00 	.word	0x40001c00
 80089e8:	40002000 	.word	0x40002000

080089ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089ec:	b480      	push	{r7}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
 80089f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6a1b      	ldr	r3, [r3, #32]
 80089fa:	f023 0201 	bic.w	r2, r3, #1
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
 8008a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	699b      	ldr	r3, [r3, #24]
 8008a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008a14:	68fa      	ldr	r2, [r7, #12]
 8008a16:	4b2b      	ldr	r3, [pc, #172]	; (8008ac4 <TIM_OC1_SetConfig+0xd8>)
 8008a18:	4013      	ands	r3, r2
 8008a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f023 0303 	bic.w	r3, r3, #3
 8008a22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a24:	683b      	ldr	r3, [r7, #0]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	68fa      	ldr	r2, [r7, #12]
 8008a2a:	4313      	orrs	r3, r2
 8008a2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	f023 0302 	bic.w	r3, r3, #2
 8008a34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	697a      	ldr	r2, [r7, #20]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	4a21      	ldr	r2, [pc, #132]	; (8008ac8 <TIM_OC1_SetConfig+0xdc>)
 8008a44:	4293      	cmp	r3, r2
 8008a46:	d003      	beq.n	8008a50 <TIM_OC1_SetConfig+0x64>
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	4a20      	ldr	r2, [pc, #128]	; (8008acc <TIM_OC1_SetConfig+0xe0>)
 8008a4c:	4293      	cmp	r3, r2
 8008a4e:	d10c      	bne.n	8008a6a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008a50:	697b      	ldr	r3, [r7, #20]
 8008a52:	f023 0308 	bic.w	r3, r3, #8
 8008a56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008a58:	683b      	ldr	r3, [r7, #0]
 8008a5a:	68db      	ldr	r3, [r3, #12]
 8008a5c:	697a      	ldr	r2, [r7, #20]
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008a62:	697b      	ldr	r3, [r7, #20]
 8008a64:	f023 0304 	bic.w	r3, r3, #4
 8008a68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	4a16      	ldr	r2, [pc, #88]	; (8008ac8 <TIM_OC1_SetConfig+0xdc>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d003      	beq.n	8008a7a <TIM_OC1_SetConfig+0x8e>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4a15      	ldr	r2, [pc, #84]	; (8008acc <TIM_OC1_SetConfig+0xe0>)
 8008a76:	4293      	cmp	r3, r2
 8008a78:	d111      	bne.n	8008a9e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008a80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008a88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008a8a:	683b      	ldr	r3, [r7, #0]
 8008a8c:	695b      	ldr	r3, [r3, #20]
 8008a8e:	693a      	ldr	r2, [r7, #16]
 8008a90:	4313      	orrs	r3, r2
 8008a92:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4313      	orrs	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	68fa      	ldr	r2, [r7, #12]
 8008aa8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685a      	ldr	r2, [r3, #4]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	697a      	ldr	r2, [r7, #20]
 8008ab6:	621a      	str	r2, [r3, #32]
}
 8008ab8:	bf00      	nop
 8008aba:	371c      	adds	r7, #28
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr
 8008ac4:	fffeff8f 	.word	0xfffeff8f
 8008ac8:	40010000 	.word	0x40010000
 8008acc:	40010400 	.word	0x40010400

08008ad0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad0:	b480      	push	{r7}
 8008ad2:	b087      	sub	sp, #28
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
 8008ad8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	6a1b      	ldr	r3, [r3, #32]
 8008ade:	f023 0210 	bic.w	r2, r3, #16
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	6a1b      	ldr	r3, [r3, #32]
 8008aea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	685b      	ldr	r3, [r3, #4]
 8008af0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	699b      	ldr	r3, [r3, #24]
 8008af6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008af8:	68fa      	ldr	r2, [r7, #12]
 8008afa:	4b2e      	ldr	r3, [pc, #184]	; (8008bb4 <TIM_OC2_SetConfig+0xe4>)
 8008afc:	4013      	ands	r3, r2
 8008afe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008b06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b08:	683b      	ldr	r3, [r7, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	021b      	lsls	r3, r3, #8
 8008b0e:	68fa      	ldr	r2, [r7, #12]
 8008b10:	4313      	orrs	r3, r2
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008b14:	697b      	ldr	r3, [r7, #20]
 8008b16:	f023 0320 	bic.w	r3, r3, #32
 8008b1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008b1c:	683b      	ldr	r3, [r7, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	011b      	lsls	r3, r3, #4
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	4313      	orrs	r3, r2
 8008b26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	4a23      	ldr	r2, [pc, #140]	; (8008bb8 <TIM_OC2_SetConfig+0xe8>)
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	d003      	beq.n	8008b38 <TIM_OC2_SetConfig+0x68>
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	4a22      	ldr	r2, [pc, #136]	; (8008bbc <TIM_OC2_SetConfig+0xec>)
 8008b34:	4293      	cmp	r3, r2
 8008b36:	d10d      	bne.n	8008b54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008b38:	697b      	ldr	r3, [r7, #20]
 8008b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008b40:	683b      	ldr	r3, [r7, #0]
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	697a      	ldr	r2, [r7, #20]
 8008b48:	4313      	orrs	r3, r2
 8008b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	4a18      	ldr	r2, [pc, #96]	; (8008bb8 <TIM_OC2_SetConfig+0xe8>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d003      	beq.n	8008b64 <TIM_OC2_SetConfig+0x94>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	4a17      	ldr	r2, [pc, #92]	; (8008bbc <TIM_OC2_SetConfig+0xec>)
 8008b60:	4293      	cmp	r3, r2
 8008b62:	d113      	bne.n	8008b8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008b6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008b72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008b74:	683b      	ldr	r3, [r7, #0]
 8008b76:	695b      	ldr	r3, [r3, #20]
 8008b78:	009b      	lsls	r3, r3, #2
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008b80:	683b      	ldr	r3, [r7, #0]
 8008b82:	699b      	ldr	r3, [r3, #24]
 8008b84:	009b      	lsls	r3, r3, #2
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	4313      	orrs	r3, r2
 8008b8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	68fa      	ldr	r2, [r7, #12]
 8008b96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685a      	ldr	r2, [r3, #4]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	697a      	ldr	r2, [r7, #20]
 8008ba4:	621a      	str	r2, [r3, #32]
}
 8008ba6:	bf00      	nop
 8008ba8:	371c      	adds	r7, #28
 8008baa:	46bd      	mov	sp, r7
 8008bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb0:	4770      	bx	lr
 8008bb2:	bf00      	nop
 8008bb4:	feff8fff 	.word	0xfeff8fff
 8008bb8:	40010000 	.word	0x40010000
 8008bbc:	40010400 	.word	0x40010400

08008bc0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bc0:	b480      	push	{r7}
 8008bc2:	b087      	sub	sp, #28
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
 8008bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6a1b      	ldr	r3, [r3, #32]
 8008bce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6a1b      	ldr	r3, [r3, #32]
 8008bda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	69db      	ldr	r3, [r3, #28]
 8008be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008be8:	68fa      	ldr	r2, [r7, #12]
 8008bea:	4b2d      	ldr	r3, [pc, #180]	; (8008ca0 <TIM_OC3_SetConfig+0xe0>)
 8008bec:	4013      	ands	r3, r2
 8008bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f023 0303 	bic.w	r3, r3, #3
 8008bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008bf8:	683b      	ldr	r3, [r7, #0]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	68fa      	ldr	r2, [r7, #12]
 8008bfe:	4313      	orrs	r3, r2
 8008c00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008c02:	697b      	ldr	r3, [r7, #20]
 8008c04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008c08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008c0a:	683b      	ldr	r3, [r7, #0]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	021b      	lsls	r3, r3, #8
 8008c10:	697a      	ldr	r2, [r7, #20]
 8008c12:	4313      	orrs	r3, r2
 8008c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	4a22      	ldr	r2, [pc, #136]	; (8008ca4 <TIM_OC3_SetConfig+0xe4>)
 8008c1a:	4293      	cmp	r3, r2
 8008c1c:	d003      	beq.n	8008c26 <TIM_OC3_SetConfig+0x66>
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	4a21      	ldr	r2, [pc, #132]	; (8008ca8 <TIM_OC3_SetConfig+0xe8>)
 8008c22:	4293      	cmp	r3, r2
 8008c24:	d10d      	bne.n	8008c42 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008c26:	697b      	ldr	r3, [r7, #20]
 8008c28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c2c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008c2e:	683b      	ldr	r3, [r7, #0]
 8008c30:	68db      	ldr	r3, [r3, #12]
 8008c32:	021b      	lsls	r3, r3, #8
 8008c34:	697a      	ldr	r2, [r7, #20]
 8008c36:	4313      	orrs	r3, r2
 8008c38:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c40:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	4a17      	ldr	r2, [pc, #92]	; (8008ca4 <TIM_OC3_SetConfig+0xe4>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d003      	beq.n	8008c52 <TIM_OC3_SetConfig+0x92>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	4a16      	ldr	r2, [pc, #88]	; (8008ca8 <TIM_OC3_SetConfig+0xe8>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d113      	bne.n	8008c7a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008c52:	693b      	ldr	r3, [r7, #16]
 8008c54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008c58:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008c5a:	693b      	ldr	r3, [r7, #16]
 8008c5c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008c60:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008c62:	683b      	ldr	r3, [r7, #0]
 8008c64:	695b      	ldr	r3, [r3, #20]
 8008c66:	011b      	lsls	r3, r3, #4
 8008c68:	693a      	ldr	r2, [r7, #16]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008c6e:	683b      	ldr	r3, [r7, #0]
 8008c70:	699b      	ldr	r3, [r3, #24]
 8008c72:	011b      	lsls	r3, r3, #4
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	4313      	orrs	r3, r2
 8008c78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008c86:	683b      	ldr	r3, [r7, #0]
 8008c88:	685a      	ldr	r2, [r3, #4]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	697a      	ldr	r2, [r7, #20]
 8008c92:	621a      	str	r2, [r3, #32]
}
 8008c94:	bf00      	nop
 8008c96:	371c      	adds	r7, #28
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	fffeff8f 	.word	0xfffeff8f
 8008ca4:	40010000 	.word	0x40010000
 8008ca8:	40010400 	.word	0x40010400

08008cac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008cac:	b480      	push	{r7}
 8008cae:	b087      	sub	sp, #28
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	6a1b      	ldr	r3, [r3, #32]
 8008cba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	6a1b      	ldr	r3, [r3, #32]
 8008cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	69db      	ldr	r3, [r3, #28]
 8008cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	4b1e      	ldr	r3, [pc, #120]	; (8008d50 <TIM_OC4_SetConfig+0xa4>)
 8008cd8:	4013      	ands	r3, r2
 8008cda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008ce2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	021b      	lsls	r3, r3, #8
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	4313      	orrs	r3, r2
 8008cee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008cf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008cf8:	683b      	ldr	r3, [r7, #0]
 8008cfa:	689b      	ldr	r3, [r3, #8]
 8008cfc:	031b      	lsls	r3, r3, #12
 8008cfe:	693a      	ldr	r2, [r7, #16]
 8008d00:	4313      	orrs	r3, r2
 8008d02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	4a13      	ldr	r2, [pc, #76]	; (8008d54 <TIM_OC4_SetConfig+0xa8>)
 8008d08:	4293      	cmp	r3, r2
 8008d0a:	d003      	beq.n	8008d14 <TIM_OC4_SetConfig+0x68>
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	4a12      	ldr	r2, [pc, #72]	; (8008d58 <TIM_OC4_SetConfig+0xac>)
 8008d10:	4293      	cmp	r3, r2
 8008d12:	d109      	bne.n	8008d28 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008d14:	697b      	ldr	r3, [r7, #20]
 8008d16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008d1a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	019b      	lsls	r3, r3, #6
 8008d22:	697a      	ldr	r2, [r7, #20]
 8008d24:	4313      	orrs	r3, r2
 8008d26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	697a      	ldr	r2, [r7, #20]
 8008d2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	68fa      	ldr	r2, [r7, #12]
 8008d32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685a      	ldr	r2, [r3, #4]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	693a      	ldr	r2, [r7, #16]
 8008d40:	621a      	str	r2, [r3, #32]
}
 8008d42:	bf00      	nop
 8008d44:	371c      	adds	r7, #28
 8008d46:	46bd      	mov	sp, r7
 8008d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4c:	4770      	bx	lr
 8008d4e:	bf00      	nop
 8008d50:	feff8fff 	.word	0xfeff8fff
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40010400 	.word	0x40010400

08008d5c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008d5c:	b480      	push	{r7}
 8008d5e:	b087      	sub	sp, #28
 8008d60:	af00      	add	r7, sp, #0
 8008d62:	6078      	str	r0, [r7, #4]
 8008d64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008d84:	68fa      	ldr	r2, [r7, #12]
 8008d86:	4b1b      	ldr	r3, [pc, #108]	; (8008df4 <TIM_OC5_SetConfig+0x98>)
 8008d88:	4013      	ands	r3, r2
 8008d8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008d96:	693b      	ldr	r3, [r7, #16]
 8008d98:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008d9c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	689b      	ldr	r3, [r3, #8]
 8008da2:	041b      	lsls	r3, r3, #16
 8008da4:	693a      	ldr	r2, [r7, #16]
 8008da6:	4313      	orrs	r3, r2
 8008da8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	4a12      	ldr	r2, [pc, #72]	; (8008df8 <TIM_OC5_SetConfig+0x9c>)
 8008dae:	4293      	cmp	r3, r2
 8008db0:	d003      	beq.n	8008dba <TIM_OC5_SetConfig+0x5e>
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	4a11      	ldr	r2, [pc, #68]	; (8008dfc <TIM_OC5_SetConfig+0xa0>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d109      	bne.n	8008dce <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008dc0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	695b      	ldr	r3, [r3, #20]
 8008dc6:	021b      	lsls	r3, r3, #8
 8008dc8:	697a      	ldr	r2, [r7, #20]
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	697a      	ldr	r2, [r7, #20]
 8008dd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	68fa      	ldr	r2, [r7, #12]
 8008dd8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	685a      	ldr	r2, [r3, #4]
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	693a      	ldr	r2, [r7, #16]
 8008de6:	621a      	str	r2, [r3, #32]
}
 8008de8:	bf00      	nop
 8008dea:	371c      	adds	r7, #28
 8008dec:	46bd      	mov	sp, r7
 8008dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008df2:	4770      	bx	lr
 8008df4:	fffeff8f 	.word	0xfffeff8f
 8008df8:	40010000 	.word	0x40010000
 8008dfc:	40010400 	.word	0x40010400

08008e00 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8008e00:	b480      	push	{r7}
 8008e02:	b087      	sub	sp, #28
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	6a1b      	ldr	r3, [r3, #32]
 8008e0e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	6a1b      	ldr	r3, [r3, #32]
 8008e1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	685b      	ldr	r3, [r3, #4]
 8008e20:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4b1c      	ldr	r3, [pc, #112]	; (8008e9c <TIM_OC6_SetConfig+0x9c>)
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e30:	683b      	ldr	r3, [r7, #0]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	021b      	lsls	r3, r3, #8
 8008e36:	68fa      	ldr	r2, [r7, #12]
 8008e38:	4313      	orrs	r3, r2
 8008e3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008e3c:	693b      	ldr	r3, [r7, #16]
 8008e3e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008e42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	689b      	ldr	r3, [r3, #8]
 8008e48:	051b      	lsls	r3, r3, #20
 8008e4a:	693a      	ldr	r2, [r7, #16]
 8008e4c:	4313      	orrs	r3, r2
 8008e4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	4a13      	ldr	r2, [pc, #76]	; (8008ea0 <TIM_OC6_SetConfig+0xa0>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d003      	beq.n	8008e60 <TIM_OC6_SetConfig+0x60>
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	4a12      	ldr	r2, [pc, #72]	; (8008ea4 <TIM_OC6_SetConfig+0xa4>)
 8008e5c:	4293      	cmp	r3, r2
 8008e5e:	d109      	bne.n	8008e74 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008e60:	697b      	ldr	r3, [r7, #20]
 8008e62:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e66:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008e68:	683b      	ldr	r3, [r7, #0]
 8008e6a:	695b      	ldr	r3, [r3, #20]
 8008e6c:	029b      	lsls	r3, r3, #10
 8008e6e:	697a      	ldr	r2, [r7, #20]
 8008e70:	4313      	orrs	r3, r2
 8008e72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	697a      	ldr	r2, [r7, #20]
 8008e78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	68fa      	ldr	r2, [r7, #12]
 8008e7e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008e80:	683b      	ldr	r3, [r7, #0]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	693a      	ldr	r2, [r7, #16]
 8008e8c:	621a      	str	r2, [r3, #32]
}
 8008e8e:	bf00      	nop
 8008e90:	371c      	adds	r7, #28
 8008e92:	46bd      	mov	sp, r7
 8008e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e98:	4770      	bx	lr
 8008e9a:	bf00      	nop
 8008e9c:	feff8fff 	.word	0xfeff8fff
 8008ea0:	40010000 	.word	0x40010000
 8008ea4:	40010400 	.word	0x40010400

08008ea8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ea8:	b480      	push	{r7}
 8008eaa:	b087      	sub	sp, #28
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	6a1b      	ldr	r3, [r3, #32]
 8008eb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	6a1b      	ldr	r3, [r3, #32]
 8008ebe:	f023 0201 	bic.w	r2, r3, #1
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	699b      	ldr	r3, [r3, #24]
 8008eca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ed2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	011b      	lsls	r3, r3, #4
 8008ed8:	693a      	ldr	r2, [r7, #16]
 8008eda:	4313      	orrs	r3, r2
 8008edc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ede:	697b      	ldr	r3, [r7, #20]
 8008ee0:	f023 030a 	bic.w	r3, r3, #10
 8008ee4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ee6:	697a      	ldr	r2, [r7, #20]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	4313      	orrs	r3, r2
 8008eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	693a      	ldr	r2, [r7, #16]
 8008ef2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	697a      	ldr	r2, [r7, #20]
 8008ef8:	621a      	str	r2, [r3, #32]
}
 8008efa:	bf00      	nop
 8008efc:	371c      	adds	r7, #28
 8008efe:	46bd      	mov	sp, r7
 8008f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f04:	4770      	bx	lr

08008f06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008f06:	b480      	push	{r7}
 8008f08:	b087      	sub	sp, #28
 8008f0a:	af00      	add	r7, sp, #0
 8008f0c:	60f8      	str	r0, [r7, #12]
 8008f0e:	60b9      	str	r1, [r7, #8]
 8008f10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	6a1b      	ldr	r3, [r3, #32]
 8008f16:	f023 0210 	bic.w	r2, r3, #16
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	6a1b      	ldr	r3, [r3, #32]
 8008f28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008f30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	031b      	lsls	r3, r3, #12
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	4313      	orrs	r3, r2
 8008f3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008f42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	011b      	lsls	r3, r3, #4
 8008f48:	693a      	ldr	r2, [r7, #16]
 8008f4a:	4313      	orrs	r3, r2
 8008f4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	697a      	ldr	r2, [r7, #20]
 8008f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	693a      	ldr	r2, [r7, #16]
 8008f58:	621a      	str	r2, [r3, #32]
}
 8008f5a:	bf00      	nop
 8008f5c:	371c      	adds	r7, #28
 8008f5e:	46bd      	mov	sp, r7
 8008f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f64:	4770      	bx	lr

08008f66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008f66:	b480      	push	{r7}
 8008f68:	b085      	sub	sp, #20
 8008f6a:	af00      	add	r7, sp, #0
 8008f6c:	6078      	str	r0, [r7, #4]
 8008f6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	689b      	ldr	r3, [r3, #8]
 8008f74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008f7e:	683a      	ldr	r2, [r7, #0]
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	f043 0307 	orr.w	r3, r3, #7
 8008f88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	68fa      	ldr	r2, [r7, #12]
 8008f8e:	609a      	str	r2, [r3, #8]
}
 8008f90:	bf00      	nop
 8008f92:	3714      	adds	r7, #20
 8008f94:	46bd      	mov	sp, r7
 8008f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9a:	4770      	bx	lr

08008f9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008f9c:	b480      	push	{r7}
 8008f9e:	b087      	sub	sp, #28
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
 8008fa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008faa:	68fb      	ldr	r3, [r7, #12]
 8008fac:	689b      	ldr	r3, [r3, #8]
 8008fae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	021a      	lsls	r2, r3, #8
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	431a      	orrs	r2, r3
 8008fc0:	68bb      	ldr	r3, [r7, #8]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	697a      	ldr	r2, [r7, #20]
 8008fc6:	4313      	orrs	r3, r2
 8008fc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008fca:	68fb      	ldr	r3, [r7, #12]
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	609a      	str	r2, [r3, #8]
}
 8008fd0:	bf00      	nop
 8008fd2:	371c      	adds	r7, #28
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fda:	4770      	bx	lr

08008fdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b085      	sub	sp, #20
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
 8008fe4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fec:	2b01      	cmp	r3, #1
 8008fee:	d101      	bne.n	8008ff4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ff0:	2302      	movs	r3, #2
 8008ff2:	e06d      	b.n	80090d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	2202      	movs	r2, #2
 8009000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	689b      	ldr	r3, [r3, #8]
 8009012:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	4a30      	ldr	r2, [pc, #192]	; (80090dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800901a:	4293      	cmp	r3, r2
 800901c:	d004      	beq.n	8009028 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	4a2f      	ldr	r2, [pc, #188]	; (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d108      	bne.n	800903a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800902e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	68fa      	ldr	r2, [r7, #12]
 8009036:	4313      	orrs	r3, r2
 8009038:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009040:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	4313      	orrs	r3, r2
 800904a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	68fa      	ldr	r2, [r7, #12]
 8009052:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a20      	ldr	r2, [pc, #128]	; (80090dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d022      	beq.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009066:	d01d      	beq.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	4a1d      	ldr	r2, [pc, #116]	; (80090e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800906e:	4293      	cmp	r3, r2
 8009070:	d018      	beq.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	4a1c      	ldr	r2, [pc, #112]	; (80090e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d013      	beq.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a1a      	ldr	r2, [pc, #104]	; (80090ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8009082:	4293      	cmp	r3, r2
 8009084:	d00e      	beq.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	4a15      	ldr	r2, [pc, #84]	; (80090e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800908c:	4293      	cmp	r3, r2
 800908e:	d009      	beq.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	4a16      	ldr	r2, [pc, #88]	; (80090f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8009096:	4293      	cmp	r3, r2
 8009098:	d004      	beq.n	80090a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4a15      	ldr	r2, [pc, #84]	; (80090f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d10c      	bne.n	80090be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80090aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80090ac:	683b      	ldr	r3, [r7, #0]
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	68ba      	ldr	r2, [r7, #8]
 80090b2:	4313      	orrs	r3, r2
 80090b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	68ba      	ldr	r2, [r7, #8]
 80090bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2201      	movs	r2, #1
 80090c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	2200      	movs	r2, #0
 80090ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr
 80090dc:	40010000 	.word	0x40010000
 80090e0:	40010400 	.word	0x40010400
 80090e4:	40000400 	.word	0x40000400
 80090e8:	40000800 	.word	0x40000800
 80090ec:	40000c00 	.word	0x40000c00
 80090f0:	40014000 	.word	0x40014000
 80090f4:	40001800 	.word	0x40001800

080090f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80090f8:	b580      	push	{r7, lr}
 80090fa:	b082      	sub	sp, #8
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e040      	b.n	800918c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800910e:	2b00      	cmp	r3, #0
 8009110:	d106      	bne.n	8009120 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	2200      	movs	r2, #0
 8009116:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800911a:	6878      	ldr	r0, [r7, #4]
 800911c:	f7f8 fd4a 	bl	8001bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2224      	movs	r2, #36	; 0x24
 8009124:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0201 	bic.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009136:	6878      	ldr	r0, [r7, #4]
 8009138:	f000 f82c 	bl	8009194 <UART_SetConfig>
 800913c:	4603      	mov	r3, r0
 800913e:	2b01      	cmp	r3, #1
 8009140:	d101      	bne.n	8009146 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e022      	b.n	800918c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800914a:	2b00      	cmp	r3, #0
 800914c:	d002      	beq.n	8009154 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800914e:	6878      	ldr	r0, [r7, #4]
 8009150:	f000 fa84 	bl	800965c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	685a      	ldr	r2, [r3, #4]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009162:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	689a      	ldr	r2, [r3, #8]
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009172:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	681a      	ldr	r2, [r3, #0]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f042 0201 	orr.w	r2, r2, #1
 8009182:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f000 fb0b 	bl	80097a0 <UART_CheckIdleState>
 800918a:	4603      	mov	r3, r0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009194:	b580      	push	{r7, lr}
 8009196:	b088      	sub	sp, #32
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800919c:	2300      	movs	r3, #0
 800919e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	691b      	ldr	r3, [r3, #16]
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	695b      	ldr	r3, [r3, #20]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	69db      	ldr	r3, [r3, #28]
 80091b4:	4313      	orrs	r3, r2
 80091b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	4ba6      	ldr	r3, [pc, #664]	; (8009458 <UART_SetConfig+0x2c4>)
 80091c0:	4013      	ands	r3, r2
 80091c2:	687a      	ldr	r2, [r7, #4]
 80091c4:	6812      	ldr	r2, [r2, #0]
 80091c6:	6979      	ldr	r1, [r7, #20]
 80091c8:	430b      	orrs	r3, r1
 80091ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	685b      	ldr	r3, [r3, #4]
 80091d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	430a      	orrs	r2, r1
 80091e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	699b      	ldr	r3, [r3, #24]
 80091e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6a1b      	ldr	r3, [r3, #32]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	689b      	ldr	r3, [r3, #8]
 80091f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	697a      	ldr	r2, [r7, #20]
 8009202:	430a      	orrs	r2, r1
 8009204:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	681b      	ldr	r3, [r3, #0]
 800920a:	4a94      	ldr	r2, [pc, #592]	; (800945c <UART_SetConfig+0x2c8>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d120      	bne.n	8009252 <UART_SetConfig+0xbe>
 8009210:	4b93      	ldr	r3, [pc, #588]	; (8009460 <UART_SetConfig+0x2cc>)
 8009212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009216:	f003 0303 	and.w	r3, r3, #3
 800921a:	2b03      	cmp	r3, #3
 800921c:	d816      	bhi.n	800924c <UART_SetConfig+0xb8>
 800921e:	a201      	add	r2, pc, #4	; (adr r2, 8009224 <UART_SetConfig+0x90>)
 8009220:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009224:	08009235 	.word	0x08009235
 8009228:	08009241 	.word	0x08009241
 800922c:	0800923b 	.word	0x0800923b
 8009230:	08009247 	.word	0x08009247
 8009234:	2301      	movs	r3, #1
 8009236:	77fb      	strb	r3, [r7, #31]
 8009238:	e150      	b.n	80094dc <UART_SetConfig+0x348>
 800923a:	2302      	movs	r3, #2
 800923c:	77fb      	strb	r3, [r7, #31]
 800923e:	e14d      	b.n	80094dc <UART_SetConfig+0x348>
 8009240:	2304      	movs	r3, #4
 8009242:	77fb      	strb	r3, [r7, #31]
 8009244:	e14a      	b.n	80094dc <UART_SetConfig+0x348>
 8009246:	2308      	movs	r3, #8
 8009248:	77fb      	strb	r3, [r7, #31]
 800924a:	e147      	b.n	80094dc <UART_SetConfig+0x348>
 800924c:	2310      	movs	r3, #16
 800924e:	77fb      	strb	r3, [r7, #31]
 8009250:	e144      	b.n	80094dc <UART_SetConfig+0x348>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4a83      	ldr	r2, [pc, #524]	; (8009464 <UART_SetConfig+0x2d0>)
 8009258:	4293      	cmp	r3, r2
 800925a:	d132      	bne.n	80092c2 <UART_SetConfig+0x12e>
 800925c:	4b80      	ldr	r3, [pc, #512]	; (8009460 <UART_SetConfig+0x2cc>)
 800925e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009262:	f003 030c 	and.w	r3, r3, #12
 8009266:	2b0c      	cmp	r3, #12
 8009268:	d828      	bhi.n	80092bc <UART_SetConfig+0x128>
 800926a:	a201      	add	r2, pc, #4	; (adr r2, 8009270 <UART_SetConfig+0xdc>)
 800926c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009270:	080092a5 	.word	0x080092a5
 8009274:	080092bd 	.word	0x080092bd
 8009278:	080092bd 	.word	0x080092bd
 800927c:	080092bd 	.word	0x080092bd
 8009280:	080092b1 	.word	0x080092b1
 8009284:	080092bd 	.word	0x080092bd
 8009288:	080092bd 	.word	0x080092bd
 800928c:	080092bd 	.word	0x080092bd
 8009290:	080092ab 	.word	0x080092ab
 8009294:	080092bd 	.word	0x080092bd
 8009298:	080092bd 	.word	0x080092bd
 800929c:	080092bd 	.word	0x080092bd
 80092a0:	080092b7 	.word	0x080092b7
 80092a4:	2300      	movs	r3, #0
 80092a6:	77fb      	strb	r3, [r7, #31]
 80092a8:	e118      	b.n	80094dc <UART_SetConfig+0x348>
 80092aa:	2302      	movs	r3, #2
 80092ac:	77fb      	strb	r3, [r7, #31]
 80092ae:	e115      	b.n	80094dc <UART_SetConfig+0x348>
 80092b0:	2304      	movs	r3, #4
 80092b2:	77fb      	strb	r3, [r7, #31]
 80092b4:	e112      	b.n	80094dc <UART_SetConfig+0x348>
 80092b6:	2308      	movs	r3, #8
 80092b8:	77fb      	strb	r3, [r7, #31]
 80092ba:	e10f      	b.n	80094dc <UART_SetConfig+0x348>
 80092bc:	2310      	movs	r3, #16
 80092be:	77fb      	strb	r3, [r7, #31]
 80092c0:	e10c      	b.n	80094dc <UART_SetConfig+0x348>
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	4a68      	ldr	r2, [pc, #416]	; (8009468 <UART_SetConfig+0x2d4>)
 80092c8:	4293      	cmp	r3, r2
 80092ca:	d120      	bne.n	800930e <UART_SetConfig+0x17a>
 80092cc:	4b64      	ldr	r3, [pc, #400]	; (8009460 <UART_SetConfig+0x2cc>)
 80092ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80092d6:	2b30      	cmp	r3, #48	; 0x30
 80092d8:	d013      	beq.n	8009302 <UART_SetConfig+0x16e>
 80092da:	2b30      	cmp	r3, #48	; 0x30
 80092dc:	d814      	bhi.n	8009308 <UART_SetConfig+0x174>
 80092de:	2b20      	cmp	r3, #32
 80092e0:	d009      	beq.n	80092f6 <UART_SetConfig+0x162>
 80092e2:	2b20      	cmp	r3, #32
 80092e4:	d810      	bhi.n	8009308 <UART_SetConfig+0x174>
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d002      	beq.n	80092f0 <UART_SetConfig+0x15c>
 80092ea:	2b10      	cmp	r3, #16
 80092ec:	d006      	beq.n	80092fc <UART_SetConfig+0x168>
 80092ee:	e00b      	b.n	8009308 <UART_SetConfig+0x174>
 80092f0:	2300      	movs	r3, #0
 80092f2:	77fb      	strb	r3, [r7, #31]
 80092f4:	e0f2      	b.n	80094dc <UART_SetConfig+0x348>
 80092f6:	2302      	movs	r3, #2
 80092f8:	77fb      	strb	r3, [r7, #31]
 80092fa:	e0ef      	b.n	80094dc <UART_SetConfig+0x348>
 80092fc:	2304      	movs	r3, #4
 80092fe:	77fb      	strb	r3, [r7, #31]
 8009300:	e0ec      	b.n	80094dc <UART_SetConfig+0x348>
 8009302:	2308      	movs	r3, #8
 8009304:	77fb      	strb	r3, [r7, #31]
 8009306:	e0e9      	b.n	80094dc <UART_SetConfig+0x348>
 8009308:	2310      	movs	r3, #16
 800930a:	77fb      	strb	r3, [r7, #31]
 800930c:	e0e6      	b.n	80094dc <UART_SetConfig+0x348>
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	4a56      	ldr	r2, [pc, #344]	; (800946c <UART_SetConfig+0x2d8>)
 8009314:	4293      	cmp	r3, r2
 8009316:	d120      	bne.n	800935a <UART_SetConfig+0x1c6>
 8009318:	4b51      	ldr	r3, [pc, #324]	; (8009460 <UART_SetConfig+0x2cc>)
 800931a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800931e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009322:	2bc0      	cmp	r3, #192	; 0xc0
 8009324:	d013      	beq.n	800934e <UART_SetConfig+0x1ba>
 8009326:	2bc0      	cmp	r3, #192	; 0xc0
 8009328:	d814      	bhi.n	8009354 <UART_SetConfig+0x1c0>
 800932a:	2b80      	cmp	r3, #128	; 0x80
 800932c:	d009      	beq.n	8009342 <UART_SetConfig+0x1ae>
 800932e:	2b80      	cmp	r3, #128	; 0x80
 8009330:	d810      	bhi.n	8009354 <UART_SetConfig+0x1c0>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <UART_SetConfig+0x1a8>
 8009336:	2b40      	cmp	r3, #64	; 0x40
 8009338:	d006      	beq.n	8009348 <UART_SetConfig+0x1b4>
 800933a:	e00b      	b.n	8009354 <UART_SetConfig+0x1c0>
 800933c:	2300      	movs	r3, #0
 800933e:	77fb      	strb	r3, [r7, #31]
 8009340:	e0cc      	b.n	80094dc <UART_SetConfig+0x348>
 8009342:	2302      	movs	r3, #2
 8009344:	77fb      	strb	r3, [r7, #31]
 8009346:	e0c9      	b.n	80094dc <UART_SetConfig+0x348>
 8009348:	2304      	movs	r3, #4
 800934a:	77fb      	strb	r3, [r7, #31]
 800934c:	e0c6      	b.n	80094dc <UART_SetConfig+0x348>
 800934e:	2308      	movs	r3, #8
 8009350:	77fb      	strb	r3, [r7, #31]
 8009352:	e0c3      	b.n	80094dc <UART_SetConfig+0x348>
 8009354:	2310      	movs	r3, #16
 8009356:	77fb      	strb	r3, [r7, #31]
 8009358:	e0c0      	b.n	80094dc <UART_SetConfig+0x348>
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	4a44      	ldr	r2, [pc, #272]	; (8009470 <UART_SetConfig+0x2dc>)
 8009360:	4293      	cmp	r3, r2
 8009362:	d125      	bne.n	80093b0 <UART_SetConfig+0x21c>
 8009364:	4b3e      	ldr	r3, [pc, #248]	; (8009460 <UART_SetConfig+0x2cc>)
 8009366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800936a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800936e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009372:	d017      	beq.n	80093a4 <UART_SetConfig+0x210>
 8009374:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009378:	d817      	bhi.n	80093aa <UART_SetConfig+0x216>
 800937a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800937e:	d00b      	beq.n	8009398 <UART_SetConfig+0x204>
 8009380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009384:	d811      	bhi.n	80093aa <UART_SetConfig+0x216>
 8009386:	2b00      	cmp	r3, #0
 8009388:	d003      	beq.n	8009392 <UART_SetConfig+0x1fe>
 800938a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800938e:	d006      	beq.n	800939e <UART_SetConfig+0x20a>
 8009390:	e00b      	b.n	80093aa <UART_SetConfig+0x216>
 8009392:	2300      	movs	r3, #0
 8009394:	77fb      	strb	r3, [r7, #31]
 8009396:	e0a1      	b.n	80094dc <UART_SetConfig+0x348>
 8009398:	2302      	movs	r3, #2
 800939a:	77fb      	strb	r3, [r7, #31]
 800939c:	e09e      	b.n	80094dc <UART_SetConfig+0x348>
 800939e:	2304      	movs	r3, #4
 80093a0:	77fb      	strb	r3, [r7, #31]
 80093a2:	e09b      	b.n	80094dc <UART_SetConfig+0x348>
 80093a4:	2308      	movs	r3, #8
 80093a6:	77fb      	strb	r3, [r7, #31]
 80093a8:	e098      	b.n	80094dc <UART_SetConfig+0x348>
 80093aa:	2310      	movs	r3, #16
 80093ac:	77fb      	strb	r3, [r7, #31]
 80093ae:	e095      	b.n	80094dc <UART_SetConfig+0x348>
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a2f      	ldr	r2, [pc, #188]	; (8009474 <UART_SetConfig+0x2e0>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d125      	bne.n	8009406 <UART_SetConfig+0x272>
 80093ba:	4b29      	ldr	r3, [pc, #164]	; (8009460 <UART_SetConfig+0x2cc>)
 80093bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80093c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093c8:	d017      	beq.n	80093fa <UART_SetConfig+0x266>
 80093ca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80093ce:	d817      	bhi.n	8009400 <UART_SetConfig+0x26c>
 80093d0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093d4:	d00b      	beq.n	80093ee <UART_SetConfig+0x25a>
 80093d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80093da:	d811      	bhi.n	8009400 <UART_SetConfig+0x26c>
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d003      	beq.n	80093e8 <UART_SetConfig+0x254>
 80093e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80093e4:	d006      	beq.n	80093f4 <UART_SetConfig+0x260>
 80093e6:	e00b      	b.n	8009400 <UART_SetConfig+0x26c>
 80093e8:	2301      	movs	r3, #1
 80093ea:	77fb      	strb	r3, [r7, #31]
 80093ec:	e076      	b.n	80094dc <UART_SetConfig+0x348>
 80093ee:	2302      	movs	r3, #2
 80093f0:	77fb      	strb	r3, [r7, #31]
 80093f2:	e073      	b.n	80094dc <UART_SetConfig+0x348>
 80093f4:	2304      	movs	r3, #4
 80093f6:	77fb      	strb	r3, [r7, #31]
 80093f8:	e070      	b.n	80094dc <UART_SetConfig+0x348>
 80093fa:	2308      	movs	r3, #8
 80093fc:	77fb      	strb	r3, [r7, #31]
 80093fe:	e06d      	b.n	80094dc <UART_SetConfig+0x348>
 8009400:	2310      	movs	r3, #16
 8009402:	77fb      	strb	r3, [r7, #31]
 8009404:	e06a      	b.n	80094dc <UART_SetConfig+0x348>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a1b      	ldr	r2, [pc, #108]	; (8009478 <UART_SetConfig+0x2e4>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d138      	bne.n	8009482 <UART_SetConfig+0x2ee>
 8009410:	4b13      	ldr	r3, [pc, #76]	; (8009460 <UART_SetConfig+0x2cc>)
 8009412:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009416:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800941a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800941e:	d017      	beq.n	8009450 <UART_SetConfig+0x2bc>
 8009420:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009424:	d82a      	bhi.n	800947c <UART_SetConfig+0x2e8>
 8009426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800942a:	d00b      	beq.n	8009444 <UART_SetConfig+0x2b0>
 800942c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009430:	d824      	bhi.n	800947c <UART_SetConfig+0x2e8>
 8009432:	2b00      	cmp	r3, #0
 8009434:	d003      	beq.n	800943e <UART_SetConfig+0x2aa>
 8009436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800943a:	d006      	beq.n	800944a <UART_SetConfig+0x2b6>
 800943c:	e01e      	b.n	800947c <UART_SetConfig+0x2e8>
 800943e:	2300      	movs	r3, #0
 8009440:	77fb      	strb	r3, [r7, #31]
 8009442:	e04b      	b.n	80094dc <UART_SetConfig+0x348>
 8009444:	2302      	movs	r3, #2
 8009446:	77fb      	strb	r3, [r7, #31]
 8009448:	e048      	b.n	80094dc <UART_SetConfig+0x348>
 800944a:	2304      	movs	r3, #4
 800944c:	77fb      	strb	r3, [r7, #31]
 800944e:	e045      	b.n	80094dc <UART_SetConfig+0x348>
 8009450:	2308      	movs	r3, #8
 8009452:	77fb      	strb	r3, [r7, #31]
 8009454:	e042      	b.n	80094dc <UART_SetConfig+0x348>
 8009456:	bf00      	nop
 8009458:	efff69f3 	.word	0xefff69f3
 800945c:	40011000 	.word	0x40011000
 8009460:	40023800 	.word	0x40023800
 8009464:	40004400 	.word	0x40004400
 8009468:	40004800 	.word	0x40004800
 800946c:	40004c00 	.word	0x40004c00
 8009470:	40005000 	.word	0x40005000
 8009474:	40011400 	.word	0x40011400
 8009478:	40007800 	.word	0x40007800
 800947c:	2310      	movs	r3, #16
 800947e:	77fb      	strb	r3, [r7, #31]
 8009480:	e02c      	b.n	80094dc <UART_SetConfig+0x348>
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	4a72      	ldr	r2, [pc, #456]	; (8009650 <UART_SetConfig+0x4bc>)
 8009488:	4293      	cmp	r3, r2
 800948a:	d125      	bne.n	80094d8 <UART_SetConfig+0x344>
 800948c:	4b71      	ldr	r3, [pc, #452]	; (8009654 <UART_SetConfig+0x4c0>)
 800948e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009492:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009496:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800949a:	d017      	beq.n	80094cc <UART_SetConfig+0x338>
 800949c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80094a0:	d817      	bhi.n	80094d2 <UART_SetConfig+0x33e>
 80094a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094a6:	d00b      	beq.n	80094c0 <UART_SetConfig+0x32c>
 80094a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094ac:	d811      	bhi.n	80094d2 <UART_SetConfig+0x33e>
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d003      	beq.n	80094ba <UART_SetConfig+0x326>
 80094b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80094b6:	d006      	beq.n	80094c6 <UART_SetConfig+0x332>
 80094b8:	e00b      	b.n	80094d2 <UART_SetConfig+0x33e>
 80094ba:	2300      	movs	r3, #0
 80094bc:	77fb      	strb	r3, [r7, #31]
 80094be:	e00d      	b.n	80094dc <UART_SetConfig+0x348>
 80094c0:	2302      	movs	r3, #2
 80094c2:	77fb      	strb	r3, [r7, #31]
 80094c4:	e00a      	b.n	80094dc <UART_SetConfig+0x348>
 80094c6:	2304      	movs	r3, #4
 80094c8:	77fb      	strb	r3, [r7, #31]
 80094ca:	e007      	b.n	80094dc <UART_SetConfig+0x348>
 80094cc:	2308      	movs	r3, #8
 80094ce:	77fb      	strb	r3, [r7, #31]
 80094d0:	e004      	b.n	80094dc <UART_SetConfig+0x348>
 80094d2:	2310      	movs	r3, #16
 80094d4:	77fb      	strb	r3, [r7, #31]
 80094d6:	e001      	b.n	80094dc <UART_SetConfig+0x348>
 80094d8:	2310      	movs	r3, #16
 80094da:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	69db      	ldr	r3, [r3, #28]
 80094e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80094e4:	d15b      	bne.n	800959e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80094e6:	7ffb      	ldrb	r3, [r7, #31]
 80094e8:	2b08      	cmp	r3, #8
 80094ea:	d828      	bhi.n	800953e <UART_SetConfig+0x3aa>
 80094ec:	a201      	add	r2, pc, #4	; (adr r2, 80094f4 <UART_SetConfig+0x360>)
 80094ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094f2:	bf00      	nop
 80094f4:	08009519 	.word	0x08009519
 80094f8:	08009521 	.word	0x08009521
 80094fc:	08009529 	.word	0x08009529
 8009500:	0800953f 	.word	0x0800953f
 8009504:	0800952f 	.word	0x0800952f
 8009508:	0800953f 	.word	0x0800953f
 800950c:	0800953f 	.word	0x0800953f
 8009510:	0800953f 	.word	0x0800953f
 8009514:	08009537 	.word	0x08009537
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009518:	f7fd fb7a 	bl	8006c10 <HAL_RCC_GetPCLK1Freq>
 800951c:	61b8      	str	r0, [r7, #24]
        break;
 800951e:	e013      	b.n	8009548 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009520:	f7fd fb8a 	bl	8006c38 <HAL_RCC_GetPCLK2Freq>
 8009524:	61b8      	str	r0, [r7, #24]
        break;
 8009526:	e00f      	b.n	8009548 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009528:	4b4b      	ldr	r3, [pc, #300]	; (8009658 <UART_SetConfig+0x4c4>)
 800952a:	61bb      	str	r3, [r7, #24]
        break;
 800952c:	e00c      	b.n	8009548 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800952e:	f7fd fa5f 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 8009532:	61b8      	str	r0, [r7, #24]
        break;
 8009534:	e008      	b.n	8009548 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800953a:	61bb      	str	r3, [r7, #24]
        break;
 800953c:	e004      	b.n	8009548 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800953e:	2300      	movs	r3, #0
 8009540:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009542:	2301      	movs	r3, #1
 8009544:	77bb      	strb	r3, [r7, #30]
        break;
 8009546:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d074      	beq.n	8009638 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800954e:	69bb      	ldr	r3, [r7, #24]
 8009550:	005a      	lsls	r2, r3, #1
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	685b      	ldr	r3, [r3, #4]
 8009556:	085b      	lsrs	r3, r3, #1
 8009558:	441a      	add	r2, r3
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	685b      	ldr	r3, [r3, #4]
 800955e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009562:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009564:	693b      	ldr	r3, [r7, #16]
 8009566:	2b0f      	cmp	r3, #15
 8009568:	d916      	bls.n	8009598 <UART_SetConfig+0x404>
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009570:	d212      	bcs.n	8009598 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	b29b      	uxth	r3, r3
 8009576:	f023 030f 	bic.w	r3, r3, #15
 800957a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	085b      	lsrs	r3, r3, #1
 8009580:	b29b      	uxth	r3, r3
 8009582:	f003 0307 	and.w	r3, r3, #7
 8009586:	b29a      	uxth	r2, r3
 8009588:	89fb      	ldrh	r3, [r7, #14]
 800958a:	4313      	orrs	r3, r2
 800958c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	89fa      	ldrh	r2, [r7, #14]
 8009594:	60da      	str	r2, [r3, #12]
 8009596:	e04f      	b.n	8009638 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009598:	2301      	movs	r3, #1
 800959a:	77bb      	strb	r3, [r7, #30]
 800959c:	e04c      	b.n	8009638 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800959e:	7ffb      	ldrb	r3, [r7, #31]
 80095a0:	2b08      	cmp	r3, #8
 80095a2:	d828      	bhi.n	80095f6 <UART_SetConfig+0x462>
 80095a4:	a201      	add	r2, pc, #4	; (adr r2, 80095ac <UART_SetConfig+0x418>)
 80095a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095aa:	bf00      	nop
 80095ac:	080095d1 	.word	0x080095d1
 80095b0:	080095d9 	.word	0x080095d9
 80095b4:	080095e1 	.word	0x080095e1
 80095b8:	080095f7 	.word	0x080095f7
 80095bc:	080095e7 	.word	0x080095e7
 80095c0:	080095f7 	.word	0x080095f7
 80095c4:	080095f7 	.word	0x080095f7
 80095c8:	080095f7 	.word	0x080095f7
 80095cc:	080095ef 	.word	0x080095ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80095d0:	f7fd fb1e 	bl	8006c10 <HAL_RCC_GetPCLK1Freq>
 80095d4:	61b8      	str	r0, [r7, #24]
        break;
 80095d6:	e013      	b.n	8009600 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80095d8:	f7fd fb2e 	bl	8006c38 <HAL_RCC_GetPCLK2Freq>
 80095dc:	61b8      	str	r0, [r7, #24]
        break;
 80095de:	e00f      	b.n	8009600 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80095e0:	4b1d      	ldr	r3, [pc, #116]	; (8009658 <UART_SetConfig+0x4c4>)
 80095e2:	61bb      	str	r3, [r7, #24]
        break;
 80095e4:	e00c      	b.n	8009600 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80095e6:	f7fd fa03 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 80095ea:	61b8      	str	r0, [r7, #24]
        break;
 80095ec:	e008      	b.n	8009600 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80095ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095f2:	61bb      	str	r3, [r7, #24]
        break;
 80095f4:	e004      	b.n	8009600 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80095f6:	2300      	movs	r3, #0
 80095f8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80095fa:	2301      	movs	r3, #1
 80095fc:	77bb      	strb	r3, [r7, #30]
        break;
 80095fe:	bf00      	nop
    }

    if (pclk != 0U)
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d018      	beq.n	8009638 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	085a      	lsrs	r2, r3, #1
 800960c:	69bb      	ldr	r3, [r7, #24]
 800960e:	441a      	add	r2, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685b      	ldr	r3, [r3, #4]
 8009614:	fbb2 f3f3 	udiv	r3, r2, r3
 8009618:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800961a:	693b      	ldr	r3, [r7, #16]
 800961c:	2b0f      	cmp	r3, #15
 800961e:	d909      	bls.n	8009634 <UART_SetConfig+0x4a0>
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009626:	d205      	bcs.n	8009634 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	b29a      	uxth	r2, r3
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	60da      	str	r2, [r3, #12]
 8009632:	e001      	b.n	8009638 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009634:	2301      	movs	r3, #1
 8009636:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2200      	movs	r2, #0
 800963c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2200      	movs	r2, #0
 8009642:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8009644:	7fbb      	ldrb	r3, [r7, #30]
}
 8009646:	4618      	mov	r0, r3
 8009648:	3720      	adds	r7, #32
 800964a:	46bd      	mov	sp, r7
 800964c:	bd80      	pop	{r7, pc}
 800964e:	bf00      	nop
 8009650:	40007c00 	.word	0x40007c00
 8009654:	40023800 	.word	0x40023800
 8009658:	00f42400 	.word	0x00f42400

0800965c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800965c:	b480      	push	{r7}
 800965e:	b083      	sub	sp, #12
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d00a      	beq.n	8009686 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	685b      	ldr	r3, [r3, #4]
 8009676:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	430a      	orrs	r2, r1
 8009684:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800968a:	f003 0302 	and.w	r3, r3, #2
 800968e:	2b00      	cmp	r3, #0
 8009690:	d00a      	beq.n	80096a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	685b      	ldr	r3, [r3, #4]
 8009698:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	430a      	orrs	r2, r1
 80096a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ac:	f003 0304 	and.w	r3, r3, #4
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d00a      	beq.n	80096ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	430a      	orrs	r2, r1
 80096c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096ce:	f003 0308 	and.w	r3, r3, #8
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d00a      	beq.n	80096ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	685b      	ldr	r3, [r3, #4]
 80096dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	430a      	orrs	r2, r1
 80096ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f0:	f003 0310 	and.w	r3, r3, #16
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d00a      	beq.n	800970e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	689b      	ldr	r3, [r3, #8]
 80096fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	430a      	orrs	r2, r1
 800970c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009712:	f003 0320 	and.w	r3, r3, #32
 8009716:	2b00      	cmp	r3, #0
 8009718:	d00a      	beq.n	8009730 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	689b      	ldr	r3, [r3, #8]
 8009720:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	430a      	orrs	r2, r1
 800972e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009738:	2b00      	cmp	r3, #0
 800973a:	d01a      	beq.n	8009772 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	685b      	ldr	r3, [r3, #4]
 8009742:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	430a      	orrs	r2, r1
 8009750:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009756:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800975a:	d10a      	bne.n	8009772 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	685b      	ldr	r3, [r3, #4]
 8009762:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	430a      	orrs	r2, r1
 8009770:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009776:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00a      	beq.n	8009794 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	681b      	ldr	r3, [r3, #0]
 8009790:	430a      	orrs	r2, r1
 8009792:	605a      	str	r2, [r3, #4]
  }
}
 8009794:	bf00      	nop
 8009796:	370c      	adds	r7, #12
 8009798:	46bd      	mov	sp, r7
 800979a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800979e:	4770      	bx	lr

080097a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b086      	sub	sp, #24
 80097a4:	af02      	add	r7, sp, #8
 80097a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2200      	movs	r2, #0
 80097ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80097b0:	f7f8 fc84 	bl	80020bc <HAL_GetTick>
 80097b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	f003 0308 	and.w	r3, r3, #8
 80097c0:	2b08      	cmp	r3, #8
 80097c2:	d10e      	bne.n	80097e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80097c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80097c8:	9300      	str	r3, [sp, #0]
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2200      	movs	r2, #0
 80097ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f81b 	bl	800980e <UART_WaitOnFlagUntilTimeout>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d001      	beq.n	80097e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80097de:	2303      	movs	r3, #3
 80097e0:	e011      	b.n	8009806 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2220      	movs	r2, #32
 80097e6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2220      	movs	r2, #32
 80097ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	2200      	movs	r2, #0
 80097f4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2200      	movs	r2, #0
 8009800:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009804:	2300      	movs	r3, #0
}
 8009806:	4618      	mov	r0, r3
 8009808:	3710      	adds	r7, #16
 800980a:	46bd      	mov	sp, r7
 800980c:	bd80      	pop	{r7, pc}

0800980e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800980e:	b580      	push	{r7, lr}
 8009810:	b09c      	sub	sp, #112	; 0x70
 8009812:	af00      	add	r7, sp, #0
 8009814:	60f8      	str	r0, [r7, #12]
 8009816:	60b9      	str	r1, [r7, #8]
 8009818:	603b      	str	r3, [r7, #0]
 800981a:	4613      	mov	r3, r2
 800981c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800981e:	e0a7      	b.n	8009970 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009820:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009826:	f000 80a3 	beq.w	8009970 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800982a:	f7f8 fc47 	bl	80020bc <HAL_GetTick>
 800982e:	4602      	mov	r2, r0
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	1ad3      	subs	r3, r2, r3
 8009834:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009836:	429a      	cmp	r2, r3
 8009838:	d302      	bcc.n	8009840 <UART_WaitOnFlagUntilTimeout+0x32>
 800983a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800983c:	2b00      	cmp	r3, #0
 800983e:	d13f      	bne.n	80098c0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009848:	e853 3f00 	ldrex	r3, [r3]
 800984c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800984e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009850:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009854:	667b      	str	r3, [r7, #100]	; 0x64
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	461a      	mov	r2, r3
 800985c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800985e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009860:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009862:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009864:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009866:	e841 2300 	strex	r3, r2, [r1]
 800986a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800986c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800986e:	2b00      	cmp	r3, #0
 8009870:	d1e6      	bne.n	8009840 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	3308      	adds	r3, #8
 8009878:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800987a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800987c:	e853 3f00 	ldrex	r3, [r3]
 8009880:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009882:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009884:	f023 0301 	bic.w	r3, r3, #1
 8009888:	663b      	str	r3, [r7, #96]	; 0x60
 800988a:	68fb      	ldr	r3, [r7, #12]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	3308      	adds	r3, #8
 8009890:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009892:	64ba      	str	r2, [r7, #72]	; 0x48
 8009894:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009896:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009898:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800989a:	e841 2300 	strex	r3, r2, [r1]
 800989e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80098a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d1e5      	bne.n	8009872 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	2220      	movs	r2, #32
 80098aa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	2220      	movs	r2, #32
 80098b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	2200      	movs	r2, #0
 80098b8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80098bc:	2303      	movs	r3, #3
 80098be:	e068      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f003 0304 	and.w	r3, r3, #4
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d050      	beq.n	8009970 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	69db      	ldr	r3, [r3, #28]
 80098d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80098d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80098dc:	d148      	bne.n	8009970 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80098e6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80098ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098f0:	e853 3f00 	ldrex	r3, [r3]
 80098f4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80098f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80098fc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	461a      	mov	r2, r3
 8009904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009906:	637b      	str	r3, [r7, #52]	; 0x34
 8009908:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800990a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800990c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800990e:	e841 2300 	strex	r3, r2, [r1]
 8009912:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d1e6      	bne.n	80098e8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	3308      	adds	r3, #8
 8009920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	613b      	str	r3, [r7, #16]
   return(result);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f023 0301 	bic.w	r3, r3, #1
 8009930:	66bb      	str	r3, [r7, #104]	; 0x68
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	3308      	adds	r3, #8
 8009938:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800993a:	623a      	str	r2, [r7, #32]
 800993c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	69f9      	ldr	r1, [r7, #28]
 8009940:	6a3a      	ldr	r2, [r7, #32]
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	61bb      	str	r3, [r7, #24]
   return(result);
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e5      	bne.n	800991a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2220      	movs	r2, #32
 8009952:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	2220      	movs	r2, #32
 8009958:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	2220      	movs	r2, #32
 8009960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	2200      	movs	r2, #0
 8009968:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800996c:	2303      	movs	r3, #3
 800996e:	e010      	b.n	8009992 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	69da      	ldr	r2, [r3, #28]
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	4013      	ands	r3, r2
 800997a:	68ba      	ldr	r2, [r7, #8]
 800997c:	429a      	cmp	r2, r3
 800997e:	bf0c      	ite	eq
 8009980:	2301      	moveq	r3, #1
 8009982:	2300      	movne	r3, #0
 8009984:	b2db      	uxtb	r3, r3
 8009986:	461a      	mov	r2, r3
 8009988:	79fb      	ldrb	r3, [r7, #7]
 800998a:	429a      	cmp	r2, r3
 800998c:	f43f af48 	beq.w	8009820 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009990:	2300      	movs	r3, #0
}
 8009992:	4618      	mov	r0, r3
 8009994:	3770      	adds	r7, #112	; 0x70
 8009996:	46bd      	mov	sp, r7
 8009998:	bd80      	pop	{r7, pc}
	...

0800999c <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 800999c:	b480      	push	{r7}
 800999e:	b087      	sub	sp, #28
 80099a0:	af00      	add	r7, sp, #0
 80099a2:	6078      	str	r0, [r7, #4]
 80099a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 80099a6:	683b      	ldr	r3, [r7, #0]
 80099a8:	681a      	ldr	r2, [r3, #0]
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099b0:	683a      	ldr	r2, [r7, #0]
 80099b2:	6812      	ldr	r2, [r2, #0]
 80099b4:	f023 0101 	bic.w	r1, r3, #1
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	689b      	ldr	r3, [r3, #8]
 80099c2:	2b08      	cmp	r3, #8
 80099c4:	d102      	bne.n	80099cc <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80099c6:	2340      	movs	r3, #64	; 0x40
 80099c8:	617b      	str	r3, [r7, #20]
 80099ca:	e001      	b.n	80099d0 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80099cc:	2300      	movs	r3, #0
 80099ce:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80099d0:	683b      	ldr	r3, [r7, #0]
 80099d2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80099d4:	697b      	ldr	r3, [r7, #20]
 80099d6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80099dc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80099de:	683b      	ldr	r3, [r7, #0]
 80099e0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80099e2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80099e4:	683b      	ldr	r3, [r7, #0]
 80099e6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80099e8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80099ee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 80099f4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 80099fa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009a00:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009a06:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009a08:	683b      	ldr	r3, [r7, #0]
 8009a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009a0c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009a12:	4313      	orrs	r3, r2
 8009a14:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a1a:	693a      	ldr	r2, [r7, #16]
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a24:	693a      	ldr	r2, [r7, #16]
 8009a26:	4313      	orrs	r3, r2
 8009a28:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8009a34:	4b20      	ldr	r3, [pc, #128]	; (8009ab8 <FMC_NORSRAM_Init+0x11c>)
 8009a36:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a3e:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009a46:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009a4e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	43db      	mvns	r3, r3
 8009a5e:	ea02 0103 	and.w	r1, r2, r3
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	681a      	ldr	r2, [r3, #0]
 8009a66:	693b      	ldr	r3, [r7, #16]
 8009a68:	4319      	orrs	r1, r3
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a78:	d10c      	bne.n	8009a94 <FMC_NORSRAM_Init+0xf8>
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d008      	beq.n	8009a94 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a8e:	431a      	orrs	r2, r3
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b00      	cmp	r3, #0
 8009a9a:	d006      	beq.n	8009aaa <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009aa4:	431a      	orrs	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009aaa:	2300      	movs	r3, #0
}
 8009aac:	4618      	mov	r0, r3
 8009aae:	371c      	adds	r7, #28
 8009ab0:	46bd      	mov	sp, r7
 8009ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab6:	4770      	bx	lr
 8009ab8:	0008fb7f 	.word	0x0008fb7f

08009abc <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b087      	sub	sp, #28
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	60f8      	str	r0, [r7, #12]
 8009ac4:	60b9      	str	r1, [r7, #8]
 8009ac6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	1c5a      	adds	r2, r3, #1
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ad2:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	681a      	ldr	r2, [r3, #0]
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	011b      	lsls	r3, r3, #4
 8009ae0:	431a      	orrs	r2, r3
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	689b      	ldr	r3, [r3, #8]
 8009ae6:	021b      	lsls	r3, r3, #8
 8009ae8:	431a      	orrs	r2, r3
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	041b      	lsls	r3, r3, #16
 8009af0:	431a      	orrs	r2, r3
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	691b      	ldr	r3, [r3, #16]
 8009af6:	3b01      	subs	r3, #1
 8009af8:	051b      	lsls	r3, r3, #20
 8009afa:	431a      	orrs	r2, r3
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	695b      	ldr	r3, [r3, #20]
 8009b00:	3b02      	subs	r3, #2
 8009b02:	061b      	lsls	r3, r3, #24
 8009b04:	431a      	orrs	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	699b      	ldr	r3, [r3, #24]
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	687a      	ldr	r2, [r7, #4]
 8009b0e:	3201      	adds	r2, #1
 8009b10:	4319      	orrs	r1, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009b20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b24:	d113      	bne.n	8009b4e <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	685b      	ldr	r3, [r3, #4]
 8009b2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009b2e:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8009b30:	68bb      	ldr	r3, [r7, #8]
 8009b32:	691b      	ldr	r3, [r3, #16]
 8009b34:	3b01      	subs	r3, #1
 8009b36:	051b      	lsls	r3, r3, #20
 8009b38:	697a      	ldr	r2, [r7, #20]
 8009b3a:	4313      	orrs	r3, r2
 8009b3c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	685b      	ldr	r3, [r3, #4]
 8009b42:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	431a      	orrs	r2, r3
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009b4e:	2300      	movs	r3, #0
}
 8009b50:	4618      	mov	r0, r3
 8009b52:	371c      	adds	r7, #28
 8009b54:	46bd      	mov	sp, r7
 8009b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5a:	4770      	bx	lr

08009b5c <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009b5c:	b480      	push	{r7}
 8009b5e:	b085      	sub	sp, #20
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	60f8      	str	r0, [r7, #12]
 8009b64:	60b9      	str	r1, [r7, #8]
 8009b66:	607a      	str	r2, [r7, #4]
 8009b68:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009b6a:	683b      	ldr	r3, [r7, #0]
 8009b6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009b70:	d11d      	bne.n	8009bae <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	687a      	ldr	r2, [r7, #4]
 8009b76:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009b7a:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	68ba      	ldr	r2, [r7, #8]
 8009b80:	6811      	ldr	r1, [r2, #0]
 8009b82:	68ba      	ldr	r2, [r7, #8]
 8009b84:	6852      	ldr	r2, [r2, #4]
 8009b86:	0112      	lsls	r2, r2, #4
 8009b88:	4311      	orrs	r1, r2
 8009b8a:	68ba      	ldr	r2, [r7, #8]
 8009b8c:	6892      	ldr	r2, [r2, #8]
 8009b8e:	0212      	lsls	r2, r2, #8
 8009b90:	4311      	orrs	r1, r2
 8009b92:	68ba      	ldr	r2, [r7, #8]
 8009b94:	6992      	ldr	r2, [r2, #24]
 8009b96:	4311      	orrs	r1, r2
 8009b98:	68ba      	ldr	r2, [r7, #8]
 8009b9a:	68d2      	ldr	r2, [r2, #12]
 8009b9c:	0412      	lsls	r2, r2, #16
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	ea43 0102 	orr.w	r1, r3, r2
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009bac:	e005      	b.n	8009bba <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009bb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009bba:	2300      	movs	r3, #0
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	3714      	adds	r7, #20
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	cff00000 	.word	0xcff00000

08009bcc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009bcc:	b084      	sub	sp, #16
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	f107 001c 	add.w	r0, r7, #28
 8009bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009bde:	2300      	movs	r3, #0
 8009be0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009be2:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009be4:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009be6:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009bea:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009bec:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009bee:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009bf2:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009bf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009bf6:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009bf8:	68fa      	ldr	r2, [r7, #12]
 8009bfa:	4313      	orrs	r3, r2
 8009bfc:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	685a      	ldr	r2, [r3, #4]
 8009c02:	4b07      	ldr	r3, [pc, #28]	; (8009c20 <SDMMC_Init+0x54>)
 8009c04:	4013      	ands	r3, r2
 8009c06:	68fa      	ldr	r2, [r7, #12]
 8009c08:	431a      	orrs	r2, r3
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009c0e:	2300      	movs	r3, #0
}
 8009c10:	4618      	mov	r0, r3
 8009c12:	3714      	adds	r7, #20
 8009c14:	46bd      	mov	sp, r7
 8009c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c1a:	b004      	add	sp, #16
 8009c1c:	4770      	bx	lr
 8009c1e:	bf00      	nop
 8009c20:	ffff8100 	.word	0xffff8100

08009c24 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009c24:	b480      	push	{r7}
 8009c26:	b083      	sub	sp, #12
 8009c28:	af00      	add	r7, sp, #0
 8009c2a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009c32:	4618      	mov	r0, r3
 8009c34:	370c      	adds	r7, #12
 8009c36:	46bd      	mov	sp, r7
 8009c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3c:	4770      	bx	lr

08009c3e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009c3e:	b480      	push	{r7}
 8009c40:	b083      	sub	sp, #12
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	6078      	str	r0, [r7, #4]
 8009c46:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c52:	2300      	movs	r3, #0
}
 8009c54:	4618      	mov	r0, r3
 8009c56:	370c      	adds	r7, #12
 8009c58:	46bd      	mov	sp, r7
 8009c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5e:	4770      	bx	lr

08009c60 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	2203      	movs	r2, #3
 8009c6c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8009c6e:	2300      	movs	r3, #0
}
 8009c70:	4618      	mov	r0, r3
 8009c72:	370c      	adds	r7, #12
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr

08009c7c <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 8009c7c:	b480      	push	{r7}
 8009c7e:	b083      	sub	sp, #12
 8009c80:	af00      	add	r7, sp, #0
 8009c82:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	f003 0303 	and.w	r3, r3, #3
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	370c      	adds	r7, #12
 8009c90:	46bd      	mov	sp, r7
 8009c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c96:	4770      	bx	lr

08009c98 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 8009c98:	b480      	push	{r7}
 8009c9a:	b085      	sub	sp, #20
 8009c9c:	af00      	add	r7, sp, #0
 8009c9e:	6078      	str	r0, [r7, #4]
 8009ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cae:	683b      	ldr	r3, [r7, #0]
 8009cb0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8009cb2:	683b      	ldr	r3, [r7, #0]
 8009cb4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cb6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8009cb8:	683b      	ldr	r3, [r7, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8009cbc:	431a      	orrs	r2, r3
                       Command->CPSM);
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8009cc2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	4313      	orrs	r3, r2
 8009cc8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	68da      	ldr	r2, [r3, #12]
 8009cce:	4b06      	ldr	r3, [pc, #24]	; (8009ce8 <SDMMC_SendCommand+0x50>)
 8009cd0:	4013      	ands	r3, r2
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	431a      	orrs	r2, r3
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8009cda:	2300      	movs	r3, #0
}
 8009cdc:	4618      	mov	r0, r3
 8009cde:	3714      	adds	r7, #20
 8009ce0:	46bd      	mov	sp, r7
 8009ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ce6:	4770      	bx	lr
 8009ce8:	fffff000 	.word	0xfffff000

08009cec <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 8009cec:	b480      	push	{r7}
 8009cee:	b083      	sub	sp, #12
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	691b      	ldr	r3, [r3, #16]
 8009cf8:	b2db      	uxtb	r3, r3
}
 8009cfa:	4618      	mov	r0, r3
 8009cfc:	370c      	adds	r7, #12
 8009cfe:	46bd      	mov	sp, r7
 8009d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d04:	4770      	bx	lr

08009d06 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8009d06:	b480      	push	{r7}
 8009d08:	b085      	sub	sp, #20
 8009d0a:	af00      	add	r7, sp, #0
 8009d0c:	6078      	str	r0, [r7, #4]
 8009d0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	3314      	adds	r3, #20
 8009d14:	461a      	mov	r2, r3
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	4413      	add	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681b      	ldr	r3, [r3, #0]
}  
 8009d20:	4618      	mov	r0, r3
 8009d22:	3714      	adds	r7, #20
 8009d24:	46bd      	mov	sp, r7
 8009d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2a:	4770      	bx	lr

08009d2c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 8009d2c:	b480      	push	{r7}
 8009d2e:	b085      	sub	sp, #20
 8009d30:	af00      	add	r7, sp, #0
 8009d32:	6078      	str	r0, [r7, #4]
 8009d34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8009d36:	2300      	movs	r3, #0
 8009d38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	681a      	ldr	r2, [r3, #0]
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8009d42:	683b      	ldr	r3, [r7, #0]
 8009d44:	685a      	ldr	r2, [r3, #4]
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8009d4e:	683b      	ldr	r3, [r7, #0]
 8009d50:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d52:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8009d54:	683b      	ldr	r3, [r7, #0]
 8009d56:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8009d58:	431a      	orrs	r2, r3
                       Data->DPSM);
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8009d5e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4313      	orrs	r3, r2
 8009d64:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d6a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	431a      	orrs	r2, r3
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0

}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr

08009d84 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8009d84:	b580      	push	{r7, lr}
 8009d86:	b088      	sub	sp, #32
 8009d88:	af00      	add	r7, sp, #0
 8009d8a:	6078      	str	r0, [r7, #4]
 8009d8c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8009d92:	2310      	movs	r3, #16
 8009d94:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009d96:	2340      	movs	r3, #64	; 0x40
 8009d98:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009d9a:	2300      	movs	r3, #0
 8009d9c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009d9e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009da2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009da4:	f107 0308 	add.w	r3, r7, #8
 8009da8:	4619      	mov	r1, r3
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f7ff ff74 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8009db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009db4:	2110      	movs	r1, #16
 8009db6:	6878      	ldr	r0, [r7, #4]
 8009db8:	f000 f9d6 	bl	800a168 <SDMMC_GetCmdResp1>
 8009dbc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009dbe:	69fb      	ldr	r3, [r7, #28]
}
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3720      	adds	r7, #32
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b088      	sub	sp, #32
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
 8009dd0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8009dd6:	2311      	movs	r3, #17
 8009dd8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009dda:	2340      	movs	r3, #64	; 0x40
 8009ddc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009dde:	2300      	movs	r3, #0
 8009de0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009de6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009de8:	f107 0308 	add.w	r3, r7, #8
 8009dec:	4619      	mov	r1, r3
 8009dee:	6878      	ldr	r0, [r7, #4]
 8009df0:	f7ff ff52 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8009df8:	2111      	movs	r1, #17
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	f000 f9b4 	bl	800a168 <SDMMC_GetCmdResp1>
 8009e00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e02:	69fb      	ldr	r3, [r7, #28]
}
 8009e04:	4618      	mov	r0, r3
 8009e06:	3720      	adds	r7, #32
 8009e08:	46bd      	mov	sp, r7
 8009e0a:	bd80      	pop	{r7, pc}

08009e0c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8009e0c:	b580      	push	{r7, lr}
 8009e0e:	b088      	sub	sp, #32
 8009e10:	af00      	add	r7, sp, #0
 8009e12:	6078      	str	r0, [r7, #4]
 8009e14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8009e1a:	2312      	movs	r3, #18
 8009e1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e1e:	2340      	movs	r3, #64	; 0x40
 8009e20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e22:	2300      	movs	r3, #0
 8009e24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e2c:	f107 0308 	add.w	r3, r7, #8
 8009e30:	4619      	mov	r1, r3
 8009e32:	6878      	ldr	r0, [r7, #4]
 8009e34:	f7ff ff30 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009e38:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e3c:	2112      	movs	r1, #18
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f000 f992 	bl	800a168 <SDMMC_GetCmdResp1>
 8009e44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e46:	69fb      	ldr	r3, [r7, #28]
}
 8009e48:	4618      	mov	r0, r3
 8009e4a:	3720      	adds	r7, #32
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	bd80      	pop	{r7, pc}

08009e50 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009e50:	b580      	push	{r7, lr}
 8009e52:	b088      	sub	sp, #32
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
 8009e58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8009e5e:	2318      	movs	r3, #24
 8009e60:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009e62:	2340      	movs	r3, #64	; 0x40
 8009e64:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009e66:	2300      	movs	r3, #0
 8009e68:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009e6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009e6e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009e70:	f107 0308 	add.w	r3, r7, #8
 8009e74:	4619      	mov	r1, r3
 8009e76:	6878      	ldr	r0, [r7, #4]
 8009e78:	f7ff ff0e 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8009e7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009e80:	2118      	movs	r1, #24
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f000 f970 	bl	800a168 <SDMMC_GetCmdResp1>
 8009e88:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009e8a:	69fb      	ldr	r3, [r7, #28]
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3720      	adds	r7, #32
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}

08009e94 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8009e94:	b580      	push	{r7, lr}
 8009e96:	b088      	sub	sp, #32
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8009ea2:	2319      	movs	r3, #25
 8009ea4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ea6:	2340      	movs	r3, #64	; 0x40
 8009ea8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eaa:	2300      	movs	r3, #0
 8009eac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009eae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009eb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009eb4:	f107 0308 	add.w	r3, r7, #8
 8009eb8:	4619      	mov	r1, r3
 8009eba:	6878      	ldr	r0, [r7, #4]
 8009ebc:	f7ff feec 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8009ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8009ec4:	2119      	movs	r1, #25
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f000 f94e 	bl	800a168 <SDMMC_GetCmdResp1>
 8009ecc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009ece:	69fb      	ldr	r3, [r7, #28]
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3720      	adds	r7, #32
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8009ed8:	b580      	push	{r7, lr}
 8009eda:	b088      	sub	sp, #32
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8009ee4:	230c      	movs	r3, #12
 8009ee6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009ee8:	2340      	movs	r3, #64	; 0x40
 8009eea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009eec:	2300      	movs	r3, #0
 8009eee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ef4:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ef6:	f107 0308 	add.w	r3, r7, #8
 8009efa:	4619      	mov	r1, r3
 8009efc:	6878      	ldr	r0, [r7, #4]
 8009efe:	f7ff fecb 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8009f02:	4a05      	ldr	r2, [pc, #20]	; (8009f18 <SDMMC_CmdStopTransfer+0x40>)
 8009f04:	210c      	movs	r1, #12
 8009f06:	6878      	ldr	r0, [r7, #4]
 8009f08:	f000 f92e 	bl	800a168 <SDMMC_GetCmdResp1>
 8009f0c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f0e:	69fb      	ldr	r3, [r7, #28]
}
 8009f10:	4618      	mov	r0, r3
 8009f12:	3720      	adds	r7, #32
 8009f14:	46bd      	mov	sp, r7
 8009f16:	bd80      	pop	{r7, pc}
 8009f18:	05f5e100 	.word	0x05f5e100

08009f1c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08a      	sub	sp, #40	; 0x28
 8009f20:	af00      	add	r7, sp, #0
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8009f2c:	2307      	movs	r3, #7
 8009f2e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009f30:	2340      	movs	r3, #64	; 0x40
 8009f32:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f34:	2300      	movs	r3, #0
 8009f36:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f38:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f3c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f3e:	f107 0310 	add.w	r3, r7, #16
 8009f42:	4619      	mov	r1, r3
 8009f44:	68f8      	ldr	r0, [r7, #12]
 8009f46:	f7ff fea7 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8009f4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f4e:	2107      	movs	r1, #7
 8009f50:	68f8      	ldr	r0, [r7, #12]
 8009f52:	f000 f909 	bl	800a168 <SDMMC_GetCmdResp1>
 8009f56:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8009f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009f5a:	4618      	mov	r0, r3
 8009f5c:	3728      	adds	r7, #40	; 0x28
 8009f5e:	46bd      	mov	sp, r7
 8009f60:	bd80      	pop	{r7, pc}

08009f62 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8009f62:	b580      	push	{r7, lr}
 8009f64:	b088      	sub	sp, #32
 8009f66:	af00      	add	r7, sp, #0
 8009f68:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8009f6e:	2300      	movs	r3, #0
 8009f70:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8009f72:	2300      	movs	r3, #0
 8009f74:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009f76:	2300      	movs	r3, #0
 8009f78:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009f7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009f7e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009f80:	f107 0308 	add.w	r3, r7, #8
 8009f84:	4619      	mov	r1, r3
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f7ff fe86 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f000 fb23 	bl	800a5d8 <SDMMC_GetCmdError>
 8009f92:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009f94:	69fb      	ldr	r3, [r7, #28]
}
 8009f96:	4618      	mov	r0, r3
 8009f98:	3720      	adds	r7, #32
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}

08009f9e <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8009f9e:	b580      	push	{r7, lr}
 8009fa0:	b088      	sub	sp, #32
 8009fa2:	af00      	add	r7, sp, #0
 8009fa4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8009fa6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8009faa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8009fac:	2308      	movs	r3, #8
 8009fae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fb0:	2340      	movs	r3, #64	; 0x40
 8009fb2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009fbc:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009fbe:	f107 0308 	add.w	r3, r7, #8
 8009fc2:	4619      	mov	r1, r3
 8009fc4:	6878      	ldr	r0, [r7, #4]
 8009fc6:	f7ff fe67 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 fab6 	bl	800a53c <SDMMC_GetCmdResp7>
 8009fd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8009fd2:	69fb      	ldr	r3, [r7, #28]
}
 8009fd4:	4618      	mov	r0, r3
 8009fd6:	3720      	adds	r7, #32
 8009fd8:	46bd      	mov	sp, r7
 8009fda:	bd80      	pop	{r7, pc}

08009fdc <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b088      	sub	sp, #32
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
 8009fe4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8009fea:	2337      	movs	r3, #55	; 0x37
 8009fec:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8009fee:	2340      	movs	r3, #64	; 0x40
 8009ff0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8009ff6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009ffa:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8009ffc:	f107 0308 	add.w	r3, r7, #8
 800a000:	4619      	mov	r1, r3
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	f7ff fe48 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a008:	f241 3288 	movw	r2, #5000	; 0x1388
 800a00c:	2137      	movs	r1, #55	; 0x37
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 f8aa 	bl	800a168 <SDMMC_GetCmdResp1>
 800a014:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a016:	69fb      	ldr	r3, [r7, #28]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3720      	adds	r7, #32
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}

0800a020 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a020:	b580      	push	{r7, lr}
 800a022:	b088      	sub	sp, #32
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	4b0d      	ldr	r3, [pc, #52]	; (800a064 <SDMMC_CmdAppOperCommand+0x44>)
 800a02e:	4313      	orrs	r3, r2
 800a030:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a032:	2329      	movs	r3, #41	; 0x29
 800a034:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a036:	2340      	movs	r3, #64	; 0x40
 800a038:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a03a:	2300      	movs	r3, #0
 800a03c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a03e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a042:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a044:	f107 0308 	add.w	r3, r7, #8
 800a048:	4619      	mov	r1, r3
 800a04a:	6878      	ldr	r0, [r7, #4]
 800a04c:	f7ff fe24 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a050:	6878      	ldr	r0, [r7, #4]
 800a052:	f000 f9bf 	bl	800a3d4 <SDMMC_GetCmdResp3>
 800a056:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a058:	69fb      	ldr	r3, [r7, #28]
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3720      	adds	r7, #32
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}
 800a062:	bf00      	nop
 800a064:	80100000 	.word	0x80100000

0800a068 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b088      	sub	sp, #32
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a070:	2300      	movs	r3, #0
 800a072:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a074:	2302      	movs	r3, #2
 800a076:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a078:	23c0      	movs	r3, #192	; 0xc0
 800a07a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a07c:	2300      	movs	r3, #0
 800a07e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a080:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a084:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a086:	f107 0308 	add.w	r3, r7, #8
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f7ff fe03 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a092:	6878      	ldr	r0, [r7, #4]
 800a094:	f000 f956 	bl	800a344 <SDMMC_GetCmdResp2>
 800a098:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a09a:	69fb      	ldr	r3, [r7, #28]
}
 800a09c:	4618      	mov	r0, r3
 800a09e:	3720      	adds	r7, #32
 800a0a0:	46bd      	mov	sp, r7
 800a0a2:	bd80      	pop	{r7, pc}

0800a0a4 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a0a4:	b580      	push	{r7, lr}
 800a0a6:	b088      	sub	sp, #32
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
 800a0ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a0b2:	2309      	movs	r3, #9
 800a0b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a0b6:	23c0      	movs	r3, #192	; 0xc0
 800a0b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0ba:	2300      	movs	r3, #0
 800a0bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a0c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a0c4:	f107 0308 	add.w	r3, r7, #8
 800a0c8:	4619      	mov	r1, r3
 800a0ca:	6878      	ldr	r0, [r7, #4]
 800a0cc:	f7ff fde4 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a0d0:	6878      	ldr	r0, [r7, #4]
 800a0d2:	f000 f937 	bl	800a344 <SDMMC_GetCmdResp2>
 800a0d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a0d8:	69fb      	ldr	r3, [r7, #28]
}
 800a0da:	4618      	mov	r0, r3
 800a0dc:	3720      	adds	r7, #32
 800a0de:	46bd      	mov	sp, r7
 800a0e0:	bd80      	pop	{r7, pc}

0800a0e2 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a0e2:	b580      	push	{r7, lr}
 800a0e4:	b088      	sub	sp, #32
 800a0e6:	af00      	add	r7, sp, #0
 800a0e8:	6078      	str	r0, [r7, #4]
 800a0ea:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a0f4:	2340      	movs	r3, #64	; 0x40
 800a0f6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a0f8:	2300      	movs	r3, #0
 800a0fa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a100:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a102:	f107 0308 	add.w	r3, r7, #8
 800a106:	4619      	mov	r1, r3
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f7ff fdc5 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a10e:	683a      	ldr	r2, [r7, #0]
 800a110:	2103      	movs	r1, #3
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f99c 	bl	800a450 <SDMMC_GetCmdResp6>
 800a118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a11a:	69fb      	ldr	r3, [r7, #28]
}
 800a11c:	4618      	mov	r0, r3
 800a11e:	3720      	adds	r7, #32
 800a120:	46bd      	mov	sp, r7
 800a122:	bd80      	pop	{r7, pc}

0800a124 <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a124:	b580      	push	{r7, lr}
 800a126:	b088      	sub	sp, #32
 800a128:	af00      	add	r7, sp, #0
 800a12a:	6078      	str	r0, [r7, #4]
 800a12c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a12e:	683b      	ldr	r3, [r7, #0]
 800a130:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a132:	230d      	movs	r3, #13
 800a134:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a13a:	2300      	movs	r3, #0
 800a13c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a13e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a142:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a144:	f107 0308 	add.w	r3, r7, #8
 800a148:	4619      	mov	r1, r3
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7ff fda4 	bl	8009c98 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a150:	f241 3288 	movw	r2, #5000	; 0x1388
 800a154:	210d      	movs	r1, #13
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 f806 	bl	800a168 <SDMMC_GetCmdResp1>
 800a15c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a15e:	69fb      	ldr	r3, [r7, #28]
}
 800a160:	4618      	mov	r0, r3
 800a162:	3720      	adds	r7, #32
 800a164:	46bd      	mov	sp, r7
 800a166:	bd80      	pop	{r7, pc}

0800a168 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b088      	sub	sp, #32
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	460b      	mov	r3, r1
 800a172:	607a      	str	r2, [r7, #4]
 800a174:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a176:	4b70      	ldr	r3, [pc, #448]	; (800a338 <SDMMC_GetCmdResp1+0x1d0>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	4a70      	ldr	r2, [pc, #448]	; (800a33c <SDMMC_GetCmdResp1+0x1d4>)
 800a17c:	fba2 2303 	umull	r2, r3, r2, r3
 800a180:	0a5a      	lsrs	r2, r3, #9
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	fb02 f303 	mul.w	r3, r2, r3
 800a188:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	1e5a      	subs	r2, r3, #1
 800a18e:	61fa      	str	r2, [r7, #28]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d102      	bne.n	800a19a <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a194:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a198:	e0c9      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a19e:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d0ef      	beq.n	800a18a <SDMMC_GetCmdResp1+0x22>
 800a1aa:	69bb      	ldr	r3, [r7, #24]
 800a1ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d1ea      	bne.n	800a18a <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1b8:	f003 0304 	and.w	r3, r3, #4
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d004      	beq.n	800a1ca <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	2204      	movs	r2, #4
 800a1c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a1c6:	2304      	movs	r3, #4
 800a1c8:	e0b1      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d004      	beq.n	800a1e0 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	2201      	movs	r2, #1
 800a1da:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1dc:	2301      	movs	r3, #1
 800a1de:	e0a6      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	22c5      	movs	r2, #197	; 0xc5
 800a1e4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a1e6:	68f8      	ldr	r0, [r7, #12]
 800a1e8:	f7ff fd80 	bl	8009cec <SDMMC_GetCommandResponse>
 800a1ec:	4603      	mov	r3, r0
 800a1ee:	461a      	mov	r2, r3
 800a1f0:	7afb      	ldrb	r3, [r7, #11]
 800a1f2:	4293      	cmp	r3, r2
 800a1f4:	d001      	beq.n	800a1fa <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a1f6:	2301      	movs	r3, #1
 800a1f8:	e099      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a1fa:	2100      	movs	r1, #0
 800a1fc:	68f8      	ldr	r0, [r7, #12]
 800a1fe:	f7ff fd82 	bl	8009d06 <SDMMC_GetResponse>
 800a202:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a204:	697a      	ldr	r2, [r7, #20]
 800a206:	4b4e      	ldr	r3, [pc, #312]	; (800a340 <SDMMC_GetCmdResp1+0x1d8>)
 800a208:	4013      	ands	r3, r2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a20e:	2300      	movs	r3, #0
 800a210:	e08d      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a212:	697b      	ldr	r3, [r7, #20]
 800a214:	2b00      	cmp	r3, #0
 800a216:	da02      	bge.n	800a21e <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a218:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a21c:	e087      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a21e:	697b      	ldr	r3, [r7, #20]
 800a220:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a228:	2340      	movs	r3, #64	; 0x40
 800a22a:	e080      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a22c:	697b      	ldr	r3, [r7, #20]
 800a22e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a232:	2b00      	cmp	r3, #0
 800a234:	d001      	beq.n	800a23a <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a236:	2380      	movs	r3, #128	; 0x80
 800a238:	e079      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a23a:	697b      	ldr	r3, [r7, #20]
 800a23c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a240:	2b00      	cmp	r3, #0
 800a242:	d002      	beq.n	800a24a <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a244:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a248:	e071      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a24a:	697b      	ldr	r3, [r7, #20]
 800a24c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a250:	2b00      	cmp	r3, #0
 800a252:	d002      	beq.n	800a25a <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a254:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a258:	e069      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a25a:	697b      	ldr	r3, [r7, #20]
 800a25c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a260:	2b00      	cmp	r3, #0
 800a262:	d002      	beq.n	800a26a <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a264:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a268:	e061      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a26a:	697b      	ldr	r3, [r7, #20]
 800a26c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a270:	2b00      	cmp	r3, #0
 800a272:	d002      	beq.n	800a27a <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a274:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a278:	e059      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a280:	2b00      	cmp	r3, #0
 800a282:	d002      	beq.n	800a28a <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a284:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a288:	e051      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a28a:	697b      	ldr	r3, [r7, #20]
 800a28c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a290:	2b00      	cmp	r3, #0
 800a292:	d002      	beq.n	800a29a <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a294:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a298:	e049      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a29a:	697b      	ldr	r3, [r7, #20]
 800a29c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d002      	beq.n	800a2aa <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a2a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a2a8:	e041      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d002      	beq.n	800a2ba <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a2b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2b8:	e039      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d002      	beq.n	800a2ca <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a2c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a2c8:	e031      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	d002      	beq.n	800a2da <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a2d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a2d8:	e029      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d002      	beq.n	800a2ea <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a2e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a2e8:	e021      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a2ea:	697b      	ldr	r3, [r7, #20]
 800a2ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2f0:	2b00      	cmp	r3, #0
 800a2f2:	d002      	beq.n	800a2fa <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a2f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a2f8:	e019      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a2fa:	697b      	ldr	r3, [r7, #20]
 800a2fc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a300:	2b00      	cmp	r3, #0
 800a302:	d002      	beq.n	800a30a <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a304:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a308:	e011      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a310:	2b00      	cmp	r3, #0
 800a312:	d002      	beq.n	800a31a <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a314:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a318:	e009      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	f003 0308 	and.w	r3, r3, #8
 800a320:	2b00      	cmp	r3, #0
 800a322:	d002      	beq.n	800a32a <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a324:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a328:	e001      	b.n	800a32e <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a32a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}
 800a336:	bf00      	nop
 800a338:	20000000 	.word	0x20000000
 800a33c:	10624dd3 	.word	0x10624dd3
 800a340:	fdffe008 	.word	0xfdffe008

0800a344 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a344:	b480      	push	{r7}
 800a346:	b085      	sub	sp, #20
 800a348:	af00      	add	r7, sp, #0
 800a34a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a34c:	4b1f      	ldr	r3, [pc, #124]	; (800a3cc <SDMMC_GetCmdResp2+0x88>)
 800a34e:	681b      	ldr	r3, [r3, #0]
 800a350:	4a1f      	ldr	r2, [pc, #124]	; (800a3d0 <SDMMC_GetCmdResp2+0x8c>)
 800a352:	fba2 2303 	umull	r2, r3, r2, r3
 800a356:	0a5b      	lsrs	r3, r3, #9
 800a358:	f241 3288 	movw	r2, #5000	; 0x1388
 800a35c:	fb02 f303 	mul.w	r3, r2, r3
 800a360:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	1e5a      	subs	r2, r3, #1
 800a366:	60fa      	str	r2, [r7, #12]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d102      	bne.n	800a372 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a36c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a370:	e026      	b.n	800a3c0 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a376:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a378:	68bb      	ldr	r3, [r7, #8]
 800a37a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d0ef      	beq.n	800a362 <SDMMC_GetCmdResp2+0x1e>
 800a382:	68bb      	ldr	r3, [r7, #8]
 800a384:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d1ea      	bne.n	800a362 <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a390:	f003 0304 	and.w	r3, r3, #4
 800a394:	2b00      	cmp	r3, #0
 800a396:	d004      	beq.n	800a3a2 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2204      	movs	r2, #4
 800a39c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a39e:	2304      	movs	r3, #4
 800a3a0:	e00e      	b.n	800a3c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3a6:	f003 0301 	and.w	r3, r3, #1
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d004      	beq.n	800a3b8 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2201      	movs	r2, #1
 800a3b2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a3b4:	2301      	movs	r3, #1
 800a3b6:	e003      	b.n	800a3c0 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	22c5      	movs	r2, #197	; 0xc5
 800a3bc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3714      	adds	r7, #20
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ca:	4770      	bx	lr
 800a3cc:	20000000 	.word	0x20000000
 800a3d0:	10624dd3 	.word	0x10624dd3

0800a3d4 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a3d4:	b480      	push	{r7}
 800a3d6:	b085      	sub	sp, #20
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a3dc:	4b1a      	ldr	r3, [pc, #104]	; (800a448 <SDMMC_GetCmdResp3+0x74>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	4a1a      	ldr	r2, [pc, #104]	; (800a44c <SDMMC_GetCmdResp3+0x78>)
 800a3e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3e6:	0a5b      	lsrs	r3, r3, #9
 800a3e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3ec:	fb02 f303 	mul.w	r3, r2, r3
 800a3f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	1e5a      	subs	r2, r3, #1
 800a3f6:	60fa      	str	r2, [r7, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d102      	bne.n	800a402 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a3fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a400:	e01b      	b.n	800a43a <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a406:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d0ef      	beq.n	800a3f2 <SDMMC_GetCmdResp3+0x1e>
 800a412:	68bb      	ldr	r3, [r7, #8]
 800a414:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d1ea      	bne.n	800a3f2 <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	2b00      	cmp	r3, #0
 800a426:	d004      	beq.n	800a432 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2204      	movs	r2, #4
 800a42c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a42e:	2304      	movs	r3, #4
 800a430:	e003      	b.n	800a43a <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	22c5      	movs	r2, #197	; 0xc5
 800a436:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a438:	2300      	movs	r3, #0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3714      	adds	r7, #20
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr
 800a446:	bf00      	nop
 800a448:	20000000 	.word	0x20000000
 800a44c:	10624dd3 	.word	0x10624dd3

0800a450 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b088      	sub	sp, #32
 800a454:	af00      	add	r7, sp, #0
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	460b      	mov	r3, r1
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a45e:	4b35      	ldr	r3, [pc, #212]	; (800a534 <SDMMC_GetCmdResp6+0xe4>)
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	4a35      	ldr	r2, [pc, #212]	; (800a538 <SDMMC_GetCmdResp6+0xe8>)
 800a464:	fba2 2303 	umull	r2, r3, r2, r3
 800a468:	0a5b      	lsrs	r3, r3, #9
 800a46a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a46e:	fb02 f303 	mul.w	r3, r2, r3
 800a472:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a474:	69fb      	ldr	r3, [r7, #28]
 800a476:	1e5a      	subs	r2, r3, #1
 800a478:	61fa      	str	r2, [r7, #28]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a47e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a482:	e052      	b.n	800a52a <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a488:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a48a:	69bb      	ldr	r3, [r7, #24]
 800a48c:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a490:	2b00      	cmp	r3, #0
 800a492:	d0ef      	beq.n	800a474 <SDMMC_GetCmdResp6+0x24>
 800a494:	69bb      	ldr	r3, [r7, #24]
 800a496:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1ea      	bne.n	800a474 <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4a2:	f003 0304 	and.w	r3, r3, #4
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d004      	beq.n	800a4b4 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	2204      	movs	r2, #4
 800a4ae:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a4b0:	2304      	movs	r3, #4
 800a4b2:	e03a      	b.n	800a52a <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b8:	f003 0301 	and.w	r3, r3, #1
 800a4bc:	2b00      	cmp	r3, #0
 800a4be:	d004      	beq.n	800a4ca <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2201      	movs	r2, #1
 800a4c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	e02f      	b.n	800a52a <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a4ca:	68f8      	ldr	r0, [r7, #12]
 800a4cc:	f7ff fc0e 	bl	8009cec <SDMMC_GetCommandResponse>
 800a4d0:	4603      	mov	r3, r0
 800a4d2:	461a      	mov	r2, r3
 800a4d4:	7afb      	ldrb	r3, [r7, #11]
 800a4d6:	4293      	cmp	r3, r2
 800a4d8:	d001      	beq.n	800a4de <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a4da:	2301      	movs	r3, #1
 800a4dc:	e025      	b.n	800a52a <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a4de:	68fb      	ldr	r3, [r7, #12]
 800a4e0:	22c5      	movs	r2, #197	; 0xc5
 800a4e2:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a4e4:	2100      	movs	r1, #0
 800a4e6:	68f8      	ldr	r0, [r7, #12]
 800a4e8:	f7ff fc0d 	bl	8009d06 <SDMMC_GetResponse>
 800a4ec:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a4ee:	697b      	ldr	r3, [r7, #20]
 800a4f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	d106      	bne.n	800a506 <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	0c1b      	lsrs	r3, r3, #16
 800a4fc:	b29a      	uxth	r2, r3
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a502:	2300      	movs	r3, #0
 800a504:	e011      	b.n	800a52a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a506:	697b      	ldr	r3, [r7, #20]
 800a508:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d002      	beq.n	800a516 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a510:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a514:	e009      	b.n	800a52a <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d002      	beq.n	800a526 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a520:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a524:	e001      	b.n	800a52a <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a526:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a52a:	4618      	mov	r0, r3
 800a52c:	3720      	adds	r7, #32
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	20000000 	.word	0x20000000
 800a538:	10624dd3 	.word	0x10624dd3

0800a53c <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a53c:	b480      	push	{r7}
 800a53e:	b085      	sub	sp, #20
 800a540:	af00      	add	r7, sp, #0
 800a542:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a544:	4b22      	ldr	r3, [pc, #136]	; (800a5d0 <SDMMC_GetCmdResp7+0x94>)
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	4a22      	ldr	r2, [pc, #136]	; (800a5d4 <SDMMC_GetCmdResp7+0x98>)
 800a54a:	fba2 2303 	umull	r2, r3, r2, r3
 800a54e:	0a5b      	lsrs	r3, r3, #9
 800a550:	f241 3288 	movw	r2, #5000	; 0x1388
 800a554:	fb02 f303 	mul.w	r3, r2, r3
 800a558:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	1e5a      	subs	r2, r3, #1
 800a55e:	60fa      	str	r2, [r7, #12]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d102      	bne.n	800a56a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a564:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a568:	e02c      	b.n	800a5c4 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a56e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a576:	2b00      	cmp	r3, #0
 800a578:	d0ef      	beq.n	800a55a <SDMMC_GetCmdResp7+0x1e>
 800a57a:	68bb      	ldr	r3, [r7, #8]
 800a57c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a580:	2b00      	cmp	r3, #0
 800a582:	d1ea      	bne.n	800a55a <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a588:	f003 0304 	and.w	r3, r3, #4
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d004      	beq.n	800a59a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2204      	movs	r2, #4
 800a594:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a596:	2304      	movs	r3, #4
 800a598:	e014      	b.n	800a5c4 <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a59e:	f003 0301 	and.w	r3, r3, #1
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d004      	beq.n	800a5b0 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2201      	movs	r2, #1
 800a5aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a5ac:	2301      	movs	r3, #1
 800a5ae:	e009      	b.n	800a5c4 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d002      	beq.n	800a5c2 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	2240      	movs	r2, #64	; 0x40
 800a5c0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a5c2:	2300      	movs	r3, #0
  
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr
 800a5d0:	20000000 	.word	0x20000000
 800a5d4:	10624dd3 	.word	0x10624dd3

0800a5d8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a5e0:	4b11      	ldr	r3, [pc, #68]	; (800a628 <SDMMC_GetCmdError+0x50>)
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	4a11      	ldr	r2, [pc, #68]	; (800a62c <SDMMC_GetCmdError+0x54>)
 800a5e6:	fba2 2303 	umull	r2, r3, r2, r3
 800a5ea:	0a5b      	lsrs	r3, r3, #9
 800a5ec:	f241 3288 	movw	r2, #5000	; 0x1388
 800a5f0:	fb02 f303 	mul.w	r3, r2, r3
 800a5f4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	1e5a      	subs	r2, r3, #1
 800a5fa:	60fa      	str	r2, [r7, #12]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d102      	bne.n	800a606 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a600:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a604:	e009      	b.n	800a61a <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a606:	687b      	ldr	r3, [r7, #4]
 800a608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a60a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d0f1      	beq.n	800a5f6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	22c5      	movs	r2, #197	; 0xc5
 800a616:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3714      	adds	r7, #20
 800a61e:	46bd      	mov	sp, r7
 800a620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a624:	4770      	bx	lr
 800a626:	bf00      	nop
 800a628:	20000000 	.word	0x20000000
 800a62c:	10624dd3 	.word	0x10624dd3

0800a630 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a630:	b084      	sub	sp, #16
 800a632:	b580      	push	{r7, lr}
 800a634:	b084      	sub	sp, #16
 800a636:	af00      	add	r7, sp, #0
 800a638:	6078      	str	r0, [r7, #4]
 800a63a:	f107 001c 	add.w	r0, r7, #28
 800a63e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a644:	2b01      	cmp	r3, #1
 800a646:	d120      	bne.n	800a68a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a64c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	68da      	ldr	r2, [r3, #12]
 800a658:	4b20      	ldr	r3, [pc, #128]	; (800a6dc <USB_CoreInit+0xac>)
 800a65a:	4013      	ands	r3, r2
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	68db      	ldr	r3, [r3, #12]
 800a664:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800a66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a66e:	2b01      	cmp	r3, #1
 800a670:	d105      	bne.n	800a67e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f001 fc0e 	bl	800bea0 <USB_CoreReset>
 800a684:	4603      	mov	r3, r0
 800a686:	73fb      	strb	r3, [r7, #15]
 800a688:	e010      	b.n	800a6ac <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	68db      	ldr	r3, [r3, #12]
 800a68e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800a696:	6878      	ldr	r0, [r7, #4]
 800a698:	f001 fc02 	bl	800bea0 <USB_CoreReset>
 800a69c:	4603      	mov	r3, r0
 800a69e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6a4:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800a6ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d10b      	bne.n	800a6ca <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	f043 0206 	orr.w	r2, r3, #6
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	689b      	ldr	r3, [r3, #8]
 800a6c2:	f043 0220 	orr.w	r2, r3, #32
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800a6ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6cc:	4618      	mov	r0, r3
 800a6ce:	3710      	adds	r7, #16
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800a6d6:	b004      	add	sp, #16
 800a6d8:	4770      	bx	lr
 800a6da:	bf00      	nop
 800a6dc:	ffbdffbf 	.word	0xffbdffbf

0800a6e0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b087      	sub	sp, #28
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	60f8      	str	r0, [r7, #12]
 800a6e8:	60b9      	str	r1, [r7, #8]
 800a6ea:	4613      	mov	r3, r2
 800a6ec:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800a6ee:	79fb      	ldrb	r3, [r7, #7]
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d165      	bne.n	800a7c0 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	4a41      	ldr	r2, [pc, #260]	; (800a7fc <USB_SetTurnaroundTime+0x11c>)
 800a6f8:	4293      	cmp	r3, r2
 800a6fa:	d906      	bls.n	800a70a <USB_SetTurnaroundTime+0x2a>
 800a6fc:	68bb      	ldr	r3, [r7, #8]
 800a6fe:	4a40      	ldr	r2, [pc, #256]	; (800a800 <USB_SetTurnaroundTime+0x120>)
 800a700:	4293      	cmp	r3, r2
 800a702:	d202      	bcs.n	800a70a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800a704:	230f      	movs	r3, #15
 800a706:	617b      	str	r3, [r7, #20]
 800a708:	e062      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	4a3c      	ldr	r2, [pc, #240]	; (800a800 <USB_SetTurnaroundTime+0x120>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d306      	bcc.n	800a720 <USB_SetTurnaroundTime+0x40>
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	4a3b      	ldr	r2, [pc, #236]	; (800a804 <USB_SetTurnaroundTime+0x124>)
 800a716:	4293      	cmp	r3, r2
 800a718:	d202      	bcs.n	800a720 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800a71a:	230e      	movs	r3, #14
 800a71c:	617b      	str	r3, [r7, #20]
 800a71e:	e057      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800a720:	68bb      	ldr	r3, [r7, #8]
 800a722:	4a38      	ldr	r2, [pc, #224]	; (800a804 <USB_SetTurnaroundTime+0x124>)
 800a724:	4293      	cmp	r3, r2
 800a726:	d306      	bcc.n	800a736 <USB_SetTurnaroundTime+0x56>
 800a728:	68bb      	ldr	r3, [r7, #8]
 800a72a:	4a37      	ldr	r2, [pc, #220]	; (800a808 <USB_SetTurnaroundTime+0x128>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d202      	bcs.n	800a736 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800a730:	230d      	movs	r3, #13
 800a732:	617b      	str	r3, [r7, #20]
 800a734:	e04c      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	4a33      	ldr	r2, [pc, #204]	; (800a808 <USB_SetTurnaroundTime+0x128>)
 800a73a:	4293      	cmp	r3, r2
 800a73c:	d306      	bcc.n	800a74c <USB_SetTurnaroundTime+0x6c>
 800a73e:	68bb      	ldr	r3, [r7, #8]
 800a740:	4a32      	ldr	r2, [pc, #200]	; (800a80c <USB_SetTurnaroundTime+0x12c>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d802      	bhi.n	800a74c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800a746:	230c      	movs	r3, #12
 800a748:	617b      	str	r3, [r7, #20]
 800a74a:	e041      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	4a2f      	ldr	r2, [pc, #188]	; (800a80c <USB_SetTurnaroundTime+0x12c>)
 800a750:	4293      	cmp	r3, r2
 800a752:	d906      	bls.n	800a762 <USB_SetTurnaroundTime+0x82>
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	4a2e      	ldr	r2, [pc, #184]	; (800a810 <USB_SetTurnaroundTime+0x130>)
 800a758:	4293      	cmp	r3, r2
 800a75a:	d802      	bhi.n	800a762 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800a75c:	230b      	movs	r3, #11
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	e036      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800a762:	68bb      	ldr	r3, [r7, #8]
 800a764:	4a2a      	ldr	r2, [pc, #168]	; (800a810 <USB_SetTurnaroundTime+0x130>)
 800a766:	4293      	cmp	r3, r2
 800a768:	d906      	bls.n	800a778 <USB_SetTurnaroundTime+0x98>
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	4a29      	ldr	r2, [pc, #164]	; (800a814 <USB_SetTurnaroundTime+0x134>)
 800a76e:	4293      	cmp	r3, r2
 800a770:	d802      	bhi.n	800a778 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800a772:	230a      	movs	r3, #10
 800a774:	617b      	str	r3, [r7, #20]
 800a776:	e02b      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	4a26      	ldr	r2, [pc, #152]	; (800a814 <USB_SetTurnaroundTime+0x134>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d906      	bls.n	800a78e <USB_SetTurnaroundTime+0xae>
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	4a25      	ldr	r2, [pc, #148]	; (800a818 <USB_SetTurnaroundTime+0x138>)
 800a784:	4293      	cmp	r3, r2
 800a786:	d202      	bcs.n	800a78e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800a788:	2309      	movs	r3, #9
 800a78a:	617b      	str	r3, [r7, #20]
 800a78c:	e020      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800a78e:	68bb      	ldr	r3, [r7, #8]
 800a790:	4a21      	ldr	r2, [pc, #132]	; (800a818 <USB_SetTurnaroundTime+0x138>)
 800a792:	4293      	cmp	r3, r2
 800a794:	d306      	bcc.n	800a7a4 <USB_SetTurnaroundTime+0xc4>
 800a796:	68bb      	ldr	r3, [r7, #8]
 800a798:	4a20      	ldr	r2, [pc, #128]	; (800a81c <USB_SetTurnaroundTime+0x13c>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d802      	bhi.n	800a7a4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800a79e:	2308      	movs	r3, #8
 800a7a0:	617b      	str	r3, [r7, #20]
 800a7a2:	e015      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800a7a4:	68bb      	ldr	r3, [r7, #8]
 800a7a6:	4a1d      	ldr	r2, [pc, #116]	; (800a81c <USB_SetTurnaroundTime+0x13c>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d906      	bls.n	800a7ba <USB_SetTurnaroundTime+0xda>
 800a7ac:	68bb      	ldr	r3, [r7, #8]
 800a7ae:	4a1c      	ldr	r2, [pc, #112]	; (800a820 <USB_SetTurnaroundTime+0x140>)
 800a7b0:	4293      	cmp	r3, r2
 800a7b2:	d202      	bcs.n	800a7ba <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800a7b4:	2307      	movs	r3, #7
 800a7b6:	617b      	str	r3, [r7, #20]
 800a7b8:	e00a      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800a7ba:	2306      	movs	r3, #6
 800a7bc:	617b      	str	r3, [r7, #20]
 800a7be:	e007      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800a7c0:	79fb      	ldrb	r3, [r7, #7]
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d102      	bne.n	800a7cc <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800a7c6:	2309      	movs	r3, #9
 800a7c8:	617b      	str	r3, [r7, #20]
 800a7ca:	e001      	b.n	800a7d0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800a7cc:	2309      	movs	r3, #9
 800a7ce:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	68db      	ldr	r3, [r3, #12]
 800a7d4:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	68da      	ldr	r2, [r3, #12]
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	029b      	lsls	r3, r3, #10
 800a7e4:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800a7e8:	431a      	orrs	r2, r3
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a7ee:	2300      	movs	r3, #0
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	371c      	adds	r7, #28
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fa:	4770      	bx	lr
 800a7fc:	00d8acbf 	.word	0x00d8acbf
 800a800:	00e4e1c0 	.word	0x00e4e1c0
 800a804:	00f42400 	.word	0x00f42400
 800a808:	01067380 	.word	0x01067380
 800a80c:	011a499f 	.word	0x011a499f
 800a810:	01312cff 	.word	0x01312cff
 800a814:	014ca43f 	.word	0x014ca43f
 800a818:	016e3600 	.word	0x016e3600
 800a81c:	01a6ab1f 	.word	0x01a6ab1f
 800a820:	01e84800 	.word	0x01e84800

0800a824 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a824:	b480      	push	{r7}
 800a826:	b083      	sub	sp, #12
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	689b      	ldr	r3, [r3, #8]
 800a830:	f043 0201 	orr.w	r2, r3, #1
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a838:	2300      	movs	r3, #0
}
 800a83a:	4618      	mov	r0, r3
 800a83c:	370c      	adds	r7, #12
 800a83e:	46bd      	mov	sp, r7
 800a840:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a844:	4770      	bx	lr

0800a846 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800a846:	b480      	push	{r7}
 800a848:	b083      	sub	sp, #12
 800a84a:	af00      	add	r7, sp, #0
 800a84c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	689b      	ldr	r3, [r3, #8]
 800a852:	f023 0201 	bic.w	r2, r3, #1
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800a85a:	2300      	movs	r3, #0
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	370c      	adds	r7, #12
 800a860:	46bd      	mov	sp, r7
 800a862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a866:	4770      	bx	lr

0800a868 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	460b      	mov	r3, r1
 800a872:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800a874:	2300      	movs	r3, #0
 800a876:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	68db      	ldr	r3, [r3, #12]
 800a87c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800a884:	78fb      	ldrb	r3, [r7, #3]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d115      	bne.n	800a8b6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	68db      	ldr	r3, [r3, #12]
 800a88e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a896:	2001      	movs	r0, #1
 800a898:	f7f7 fc1c 	bl	80020d4 <HAL_Delay>
      ms++;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	3301      	adds	r3, #1
 800a8a0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f001 fa6c 	bl	800bd80 <USB_GetMode>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	2b01      	cmp	r3, #1
 800a8ac:	d01e      	beq.n	800a8ec <USB_SetCurrentMode+0x84>
 800a8ae:	68fb      	ldr	r3, [r7, #12]
 800a8b0:	2b31      	cmp	r3, #49	; 0x31
 800a8b2:	d9f0      	bls.n	800a896 <USB_SetCurrentMode+0x2e>
 800a8b4:	e01a      	b.n	800a8ec <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800a8b6:	78fb      	ldrb	r3, [r7, #3]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d115      	bne.n	800a8e8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800a8bc:	687b      	ldr	r3, [r7, #4]
 800a8be:	68db      	ldr	r3, [r3, #12]
 800a8c0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800a8c8:	2001      	movs	r0, #1
 800a8ca:	f7f7 fc03 	bl	80020d4 <HAL_Delay>
      ms++;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	3301      	adds	r3, #1
 800a8d2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800a8d4:	6878      	ldr	r0, [r7, #4]
 800a8d6:	f001 fa53 	bl	800bd80 <USB_GetMode>
 800a8da:	4603      	mov	r3, r0
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d005      	beq.n	800a8ec <USB_SetCurrentMode+0x84>
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2b31      	cmp	r3, #49	; 0x31
 800a8e4:	d9f0      	bls.n	800a8c8 <USB_SetCurrentMode+0x60>
 800a8e6:	e001      	b.n	800a8ec <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800a8e8:	2301      	movs	r3, #1
 800a8ea:	e005      	b.n	800a8f8 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	2b32      	cmp	r3, #50	; 0x32
 800a8f0:	d101      	bne.n	800a8f6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800a8f2:	2301      	movs	r3, #1
 800a8f4:	e000      	b.n	800a8f8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800a8f6:	2300      	movs	r3, #0
}
 800a8f8:	4618      	mov	r0, r3
 800a8fa:	3710      	adds	r7, #16
 800a8fc:	46bd      	mov	sp, r7
 800a8fe:	bd80      	pop	{r7, pc}

0800a900 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a900:	b084      	sub	sp, #16
 800a902:	b580      	push	{r7, lr}
 800a904:	b086      	sub	sp, #24
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
 800a90a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800a90e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800a91a:	2300      	movs	r3, #0
 800a91c:	613b      	str	r3, [r7, #16]
 800a91e:	e009      	b.n	800a934 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800a920:	687a      	ldr	r2, [r7, #4]
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	3340      	adds	r3, #64	; 0x40
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	4413      	add	r3, r2
 800a92a:	2200      	movs	r2, #0
 800a92c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	3301      	adds	r3, #1
 800a932:	613b      	str	r3, [r7, #16]
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	2b0e      	cmp	r3, #14
 800a938:	d9f2      	bls.n	800a920 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800a93a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d11c      	bne.n	800a97a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a940:	68fb      	ldr	r3, [r7, #12]
 800a942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a946:	685b      	ldr	r3, [r3, #4]
 800a948:	68fa      	ldr	r2, [r7, #12]
 800a94a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a94e:	f043 0302 	orr.w	r3, r3, #2
 800a952:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a958:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	601a      	str	r2, [r3, #0]
 800a978:	e005      	b.n	800a986 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a97e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a98c:	461a      	mov	r2, r3
 800a98e:	2300      	movs	r3, #0
 800a990:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a998:	4619      	mov	r1, r3
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9a0:	461a      	mov	r2, r3
 800a9a2:	680b      	ldr	r3, [r1, #0]
 800a9a4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9a8:	2b01      	cmp	r3, #1
 800a9aa:	d10c      	bne.n	800a9c6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800a9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d104      	bne.n	800a9bc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800a9b2:	2100      	movs	r1, #0
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 f965 	bl	800ac84 <USB_SetDevSpeed>
 800a9ba:	e008      	b.n	800a9ce <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800a9bc:	2101      	movs	r1, #1
 800a9be:	6878      	ldr	r0, [r7, #4]
 800a9c0:	f000 f960 	bl	800ac84 <USB_SetDevSpeed>
 800a9c4:	e003      	b.n	800a9ce <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800a9c6:	2103      	movs	r1, #3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 f95b 	bl	800ac84 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a9ce:	2110      	movs	r1, #16
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f8f3 	bl	800abbc <USB_FlushTxFifo>
 800a9d6:	4603      	mov	r3, r0
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d001      	beq.n	800a9e0 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a9e0:	6878      	ldr	r0, [r7, #4]
 800a9e2:	f000 f91f 	bl	800ac24 <USB_FlushRxFifo>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d001      	beq.n	800a9f0 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa02:	461a      	mov	r2, r3
 800aa04:	2300      	movs	r3, #0
 800aa06:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aa0e:	461a      	mov	r2, r3
 800aa10:	2300      	movs	r3, #0
 800aa12:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa14:	2300      	movs	r3, #0
 800aa16:	613b      	str	r3, [r7, #16]
 800aa18:	e043      	b.n	800aaa2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800aa1a:	693b      	ldr	r3, [r7, #16]
 800aa1c:	015a      	lsls	r2, r3, #5
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	4413      	add	r3, r2
 800aa22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa26:	681b      	ldr	r3, [r3, #0]
 800aa28:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aa2c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aa30:	d118      	bne.n	800aa64 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800aa32:	693b      	ldr	r3, [r7, #16]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d10a      	bne.n	800aa4e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	015a      	lsls	r2, r3, #5
 800aa3c:	68fb      	ldr	r3, [r7, #12]
 800aa3e:	4413      	add	r3, r2
 800aa40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa44:	461a      	mov	r2, r3
 800aa46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aa4a:	6013      	str	r3, [r2, #0]
 800aa4c:	e013      	b.n	800aa76 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800aa4e:	693b      	ldr	r3, [r7, #16]
 800aa50:	015a      	lsls	r2, r3, #5
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	4413      	add	r3, r2
 800aa56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aa60:	6013      	str	r3, [r2, #0]
 800aa62:	e008      	b.n	800aa76 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800aa64:	693b      	ldr	r3, [r7, #16]
 800aa66:	015a      	lsls	r2, r3, #5
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa70:	461a      	mov	r2, r3
 800aa72:	2300      	movs	r3, #0
 800aa74:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800aa76:	693b      	ldr	r3, [r7, #16]
 800aa78:	015a      	lsls	r2, r3, #5
 800aa7a:	68fb      	ldr	r3, [r7, #12]
 800aa7c:	4413      	add	r3, r2
 800aa7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa82:	461a      	mov	r2, r3
 800aa84:	2300      	movs	r3, #0
 800aa86:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	015a      	lsls	r2, r3, #5
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	4413      	add	r3, r2
 800aa90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aa94:	461a      	mov	r2, r3
 800aa96:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aa9a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aa9c:	693b      	ldr	r3, [r7, #16]
 800aa9e:	3301      	adds	r3, #1
 800aaa0:	613b      	str	r3, [r7, #16]
 800aaa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaa4:	693a      	ldr	r2, [r7, #16]
 800aaa6:	429a      	cmp	r2, r3
 800aaa8:	d3b7      	bcc.n	800aa1a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aaaa:	2300      	movs	r3, #0
 800aaac:	613b      	str	r3, [r7, #16]
 800aaae:	e043      	b.n	800ab38 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aab0:	693b      	ldr	r3, [r7, #16]
 800aab2:	015a      	lsls	r2, r3, #5
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	4413      	add	r3, r2
 800aab8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800aac2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800aac6:	d118      	bne.n	800aafa <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800aac8:	693b      	ldr	r3, [r7, #16]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d10a      	bne.n	800aae4 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800aace:	693b      	ldr	r3, [r7, #16]
 800aad0:	015a      	lsls	r2, r3, #5
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	4413      	add	r3, r2
 800aad6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aada:	461a      	mov	r2, r3
 800aadc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800aae0:	6013      	str	r3, [r2, #0]
 800aae2:	e013      	b.n	800ab0c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	015a      	lsls	r2, r3, #5
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	4413      	add	r3, r2
 800aaec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800aaf6:	6013      	str	r3, [r2, #0]
 800aaf8:	e008      	b.n	800ab0c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800aafa:	693b      	ldr	r3, [r7, #16]
 800aafc:	015a      	lsls	r2, r3, #5
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	4413      	add	r3, r2
 800ab02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab06:	461a      	mov	r2, r3
 800ab08:	2300      	movs	r3, #0
 800ab0a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800ab0c:	693b      	ldr	r3, [r7, #16]
 800ab0e:	015a      	lsls	r2, r3, #5
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	4413      	add	r3, r2
 800ab14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab18:	461a      	mov	r2, r3
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800ab1e:	693b      	ldr	r3, [r7, #16]
 800ab20:	015a      	lsls	r2, r3, #5
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	4413      	add	r3, r2
 800ab26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ab30:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	3301      	adds	r3, #1
 800ab36:	613b      	str	r3, [r7, #16]
 800ab38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3a:	693a      	ldr	r2, [r7, #16]
 800ab3c:	429a      	cmp	r2, r3
 800ab3e:	d3b7      	bcc.n	800aab0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ab46:	691b      	ldr	r3, [r3, #16]
 800ab48:	68fa      	ldr	r2, [r7, #12]
 800ab4a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ab4e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ab52:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2200      	movs	r2, #0
 800ab58:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800ab60:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800ab62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab64:	2b00      	cmp	r3, #0
 800ab66:	d105      	bne.n	800ab74 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	699b      	ldr	r3, [r3, #24]
 800ab6c:	f043 0210 	orr.w	r2, r3, #16
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	699a      	ldr	r2, [r3, #24]
 800ab78:	4b0e      	ldr	r3, [pc, #56]	; (800abb4 <USB_DevInit+0x2b4>)
 800ab7a:	4313      	orrs	r3, r2
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800ab80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d005      	beq.n	800ab92 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	699b      	ldr	r3, [r3, #24]
 800ab8a:	f043 0208 	orr.w	r2, r3, #8
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800ab92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	d105      	bne.n	800aba4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	699a      	ldr	r2, [r3, #24]
 800ab9c:	4b06      	ldr	r3, [pc, #24]	; (800abb8 <USB_DevInit+0x2b8>)
 800ab9e:	4313      	orrs	r3, r2
 800aba0:	687a      	ldr	r2, [r7, #4]
 800aba2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800aba4:	7dfb      	ldrb	r3, [r7, #23]
}
 800aba6:	4618      	mov	r0, r3
 800aba8:	3718      	adds	r7, #24
 800abaa:	46bd      	mov	sp, r7
 800abac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800abb0:	b004      	add	sp, #16
 800abb2:	4770      	bx	lr
 800abb4:	803c3800 	.word	0x803c3800
 800abb8:	40000004 	.word	0x40000004

0800abbc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b085      	sub	sp, #20
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
 800abc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800abc6:	2300      	movs	r3, #0
 800abc8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	3301      	adds	r3, #1
 800abce:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4a13      	ldr	r2, [pc, #76]	; (800ac20 <USB_FlushTxFifo+0x64>)
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d901      	bls.n	800abdc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800abd8:	2303      	movs	r3, #3
 800abda:	e01b      	b.n	800ac14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	691b      	ldr	r3, [r3, #16]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	daf2      	bge.n	800abca <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800abe4:	2300      	movs	r3, #0
 800abe6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800abe8:	683b      	ldr	r3, [r7, #0]
 800abea:	019b      	lsls	r3, r3, #6
 800abec:	f043 0220 	orr.w	r2, r3, #32
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	3301      	adds	r3, #1
 800abf8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	4a08      	ldr	r2, [pc, #32]	; (800ac20 <USB_FlushTxFifo+0x64>)
 800abfe:	4293      	cmp	r3, r2
 800ac00:	d901      	bls.n	800ac06 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800ac02:	2303      	movs	r3, #3
 800ac04:	e006      	b.n	800ac14 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	691b      	ldr	r3, [r3, #16]
 800ac0a:	f003 0320 	and.w	r3, r3, #32
 800ac0e:	2b20      	cmp	r3, #32
 800ac10:	d0f0      	beq.n	800abf4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800ac12:	2300      	movs	r3, #0
}
 800ac14:	4618      	mov	r0, r3
 800ac16:	3714      	adds	r7, #20
 800ac18:	46bd      	mov	sp, r7
 800ac1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1e:	4770      	bx	lr
 800ac20:	00030d40 	.word	0x00030d40

0800ac24 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800ac24:	b480      	push	{r7}
 800ac26:	b085      	sub	sp, #20
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	3301      	adds	r3, #1
 800ac34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	4a11      	ldr	r2, [pc, #68]	; (800ac80 <USB_FlushRxFifo+0x5c>)
 800ac3a:	4293      	cmp	r3, r2
 800ac3c:	d901      	bls.n	800ac42 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800ac3e:	2303      	movs	r3, #3
 800ac40:	e018      	b.n	800ac74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	691b      	ldr	r3, [r3, #16]
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	daf2      	bge.n	800ac30 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2210      	movs	r2, #16
 800ac52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	3301      	adds	r3, #1
 800ac58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	4a08      	ldr	r2, [pc, #32]	; (800ac80 <USB_FlushRxFifo+0x5c>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d901      	bls.n	800ac66 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800ac62:	2303      	movs	r3, #3
 800ac64:	e006      	b.n	800ac74 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	691b      	ldr	r3, [r3, #16]
 800ac6a:	f003 0310 	and.w	r3, r3, #16
 800ac6e:	2b10      	cmp	r3, #16
 800ac70:	d0f0      	beq.n	800ac54 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800ac72:	2300      	movs	r3, #0
}
 800ac74:	4618      	mov	r0, r3
 800ac76:	3714      	adds	r7, #20
 800ac78:	46bd      	mov	sp, r7
 800ac7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7e:	4770      	bx	lr
 800ac80:	00030d40 	.word	0x00030d40

0800ac84 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b085      	sub	sp, #20
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
 800ac8c:	460b      	mov	r3, r1
 800ac8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	78fb      	ldrb	r3, [r7, #3]
 800ac9e:	68f9      	ldr	r1, [r7, #12]
 800aca0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aca4:	4313      	orrs	r3, r2
 800aca6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800aca8:	2300      	movs	r3, #0
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acb4:	4770      	bx	lr

0800acb6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800acb6:	b480      	push	{r7}
 800acb8:	b087      	sub	sp, #28
 800acba:	af00      	add	r7, sp, #0
 800acbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800acc2:	693b      	ldr	r3, [r7, #16]
 800acc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acc8:	689b      	ldr	r3, [r3, #8]
 800acca:	f003 0306 	and.w	r3, r3, #6
 800acce:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	d102      	bne.n	800acdc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800acd6:	2300      	movs	r3, #0
 800acd8:	75fb      	strb	r3, [r7, #23]
 800acda:	e00a      	b.n	800acf2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2b02      	cmp	r3, #2
 800ace0:	d002      	beq.n	800ace8 <USB_GetDevSpeed+0x32>
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	2b06      	cmp	r3, #6
 800ace6:	d102      	bne.n	800acee <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800ace8:	2302      	movs	r3, #2
 800acea:	75fb      	strb	r3, [r7, #23]
 800acec:	e001      	b.n	800acf2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800acee:	230f      	movs	r3, #15
 800acf0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800acf2:	7dfb      	ldrb	r3, [r7, #23]
}
 800acf4:	4618      	mov	r0, r3
 800acf6:	371c      	adds	r7, #28
 800acf8:	46bd      	mov	sp, r7
 800acfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfe:	4770      	bx	lr

0800ad00 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	6078      	str	r0, [r7, #4]
 800ad08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	781b      	ldrb	r3, [r3, #0]
 800ad12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ad14:	683b      	ldr	r3, [r7, #0]
 800ad16:	785b      	ldrb	r3, [r3, #1]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d139      	bne.n	800ad90 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad22:	69da      	ldr	r2, [r3, #28]
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	781b      	ldrb	r3, [r3, #0]
 800ad28:	f003 030f 	and.w	r3, r3, #15
 800ad2c:	2101      	movs	r1, #1
 800ad2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	68f9      	ldr	r1, [r7, #12]
 800ad36:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800ad3a:	4313      	orrs	r3, r2
 800ad3c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800ad3e:	68bb      	ldr	r3, [r7, #8]
 800ad40:	015a      	lsls	r2, r3, #5
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	4413      	add	r3, r2
 800ad46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d153      	bne.n	800adfc <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad54:	68bb      	ldr	r3, [r7, #8]
 800ad56:	015a      	lsls	r2, r3, #5
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	4413      	add	r3, r2
 800ad5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad60:	681a      	ldr	r2, [r3, #0]
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	68db      	ldr	r3, [r3, #12]
 800ad66:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad6a:	683b      	ldr	r3, [r7, #0]
 800ad6c:	791b      	ldrb	r3, [r3, #4]
 800ad6e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad70:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800ad72:	68bb      	ldr	r3, [r7, #8]
 800ad74:	059b      	lsls	r3, r3, #22
 800ad76:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800ad78:	431a      	orrs	r2, r3
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	0159      	lsls	r1, r3, #5
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	440b      	add	r3, r1
 800ad82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ad86:	4619      	mov	r1, r3
 800ad88:	4b20      	ldr	r3, [pc, #128]	; (800ae0c <USB_ActivateEndpoint+0x10c>)
 800ad8a:	4313      	orrs	r3, r2
 800ad8c:	600b      	str	r3, [r1, #0]
 800ad8e:	e035      	b.n	800adfc <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad96:	69da      	ldr	r2, [r3, #28]
 800ad98:	683b      	ldr	r3, [r7, #0]
 800ad9a:	781b      	ldrb	r3, [r3, #0]
 800ad9c:	f003 030f 	and.w	r3, r3, #15
 800ada0:	2101      	movs	r1, #1
 800ada2:	fa01 f303 	lsl.w	r3, r1, r3
 800ada6:	041b      	lsls	r3, r3, #16
 800ada8:	68f9      	ldr	r1, [r7, #12]
 800adaa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800adae:	4313      	orrs	r3, r2
 800adb0:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800adb2:	68bb      	ldr	r3, [r7, #8]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d119      	bne.n	800adfc <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800adc8:	68bb      	ldr	r3, [r7, #8]
 800adca:	015a      	lsls	r2, r3, #5
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	4413      	add	r3, r2
 800add0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800add4:	681a      	ldr	r2, [r3, #0]
 800add6:	683b      	ldr	r3, [r7, #0]
 800add8:	68db      	ldr	r3, [r3, #12]
 800adda:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800adde:	683b      	ldr	r3, [r7, #0]
 800ade0:	791b      	ldrb	r3, [r3, #4]
 800ade2:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800ade4:	430b      	orrs	r3, r1
 800ade6:	431a      	orrs	r2, r3
 800ade8:	68bb      	ldr	r3, [r7, #8]
 800adea:	0159      	lsls	r1, r3, #5
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	440b      	add	r3, r1
 800adf0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800adf4:	4619      	mov	r1, r3
 800adf6:	4b05      	ldr	r3, [pc, #20]	; (800ae0c <USB_ActivateEndpoint+0x10c>)
 800adf8:	4313      	orrs	r3, r2
 800adfa:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
 800ae0a:	bf00      	nop
 800ae0c:	10008000 	.word	0x10008000

0800ae10 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b085      	sub	sp, #20
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
 800ae18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	781b      	ldrb	r3, [r3, #0]
 800ae22:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	785b      	ldrb	r3, [r3, #1]
 800ae28:	2b01      	cmp	r3, #1
 800ae2a:	d161      	bne.n	800aef0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	015a      	lsls	r2, r3, #5
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	4413      	add	r3, r2
 800ae34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae42:	d11f      	bne.n	800ae84 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800ae44:	68bb      	ldr	r3, [r7, #8]
 800ae46:	015a      	lsls	r2, r3, #5
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	4413      	add	r3, r2
 800ae4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	68ba      	ldr	r2, [r7, #8]
 800ae54:	0151      	lsls	r1, r2, #5
 800ae56:	68fa      	ldr	r2, [r7, #12]
 800ae58:	440a      	add	r2, r1
 800ae5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae5e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ae62:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800ae64:	68bb      	ldr	r3, [r7, #8]
 800ae66:	015a      	lsls	r2, r3, #5
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	4413      	add	r3, r2
 800ae6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	0151      	lsls	r1, r2, #5
 800ae76:	68fa      	ldr	r2, [r7, #12]
 800ae78:	440a      	add	r2, r1
 800ae7a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ae7e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ae82:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	781b      	ldrb	r3, [r3, #0]
 800ae90:	f003 030f 	and.w	r3, r3, #15
 800ae94:	2101      	movs	r1, #1
 800ae96:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9a:	b29b      	uxth	r3, r3
 800ae9c:	43db      	mvns	r3, r3
 800ae9e:	68f9      	ldr	r1, [r7, #12]
 800aea0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aea4:	4013      	ands	r3, r2
 800aea6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aeae:	69da      	ldr	r2, [r3, #28]
 800aeb0:	683b      	ldr	r3, [r7, #0]
 800aeb2:	781b      	ldrb	r3, [r3, #0]
 800aeb4:	f003 030f 	and.w	r3, r3, #15
 800aeb8:	2101      	movs	r1, #1
 800aeba:	fa01 f303 	lsl.w	r3, r1, r3
 800aebe:	b29b      	uxth	r3, r3
 800aec0:	43db      	mvns	r3, r3
 800aec2:	68f9      	ldr	r1, [r7, #12]
 800aec4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800aec8:	4013      	ands	r3, r2
 800aeca:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	015a      	lsls	r2, r3, #5
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	4413      	add	r3, r2
 800aed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	68bb      	ldr	r3, [r7, #8]
 800aedc:	0159      	lsls	r1, r3, #5
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	440b      	add	r3, r1
 800aee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800aee6:	4619      	mov	r1, r3
 800aee8:	4b35      	ldr	r3, [pc, #212]	; (800afc0 <USB_DeactivateEndpoint+0x1b0>)
 800aeea:	4013      	ands	r3, r2
 800aeec:	600b      	str	r3, [r1, #0]
 800aeee:	e060      	b.n	800afb2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	015a      	lsls	r2, r3, #5
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	4413      	add	r3, r2
 800aef8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800af02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800af06:	d11f      	bne.n	800af48 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	015a      	lsls	r2, r3, #5
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	4413      	add	r3, r2
 800af10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	68ba      	ldr	r2, [r7, #8]
 800af18:	0151      	lsls	r1, r2, #5
 800af1a:	68fa      	ldr	r2, [r7, #12]
 800af1c:	440a      	add	r2, r1
 800af1e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af22:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800af26:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	015a      	lsls	r2, r3, #5
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	4413      	add	r3, r2
 800af30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	68ba      	ldr	r2, [r7, #8]
 800af38:	0151      	lsls	r1, r2, #5
 800af3a:	68fa      	ldr	r2, [r7, #12]
 800af3c:	440a      	add	r2, r1
 800af3e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800af42:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800af46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	781b      	ldrb	r3, [r3, #0]
 800af54:	f003 030f 	and.w	r3, r3, #15
 800af58:	2101      	movs	r1, #1
 800af5a:	fa01 f303 	lsl.w	r3, r1, r3
 800af5e:	041b      	lsls	r3, r3, #16
 800af60:	43db      	mvns	r3, r3
 800af62:	68f9      	ldr	r1, [r7, #12]
 800af64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af68:	4013      	ands	r3, r2
 800af6a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800af72:	69da      	ldr	r2, [r3, #28]
 800af74:	683b      	ldr	r3, [r7, #0]
 800af76:	781b      	ldrb	r3, [r3, #0]
 800af78:	f003 030f 	and.w	r3, r3, #15
 800af7c:	2101      	movs	r1, #1
 800af7e:	fa01 f303 	lsl.w	r3, r1, r3
 800af82:	041b      	lsls	r3, r3, #16
 800af84:	43db      	mvns	r3, r3
 800af86:	68f9      	ldr	r1, [r7, #12]
 800af88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800af8c:	4013      	ands	r3, r2
 800af8e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800af90:	68bb      	ldr	r3, [r7, #8]
 800af92:	015a      	lsls	r2, r3, #5
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	4413      	add	r3, r2
 800af98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800af9c:	681a      	ldr	r2, [r3, #0]
 800af9e:	68bb      	ldr	r3, [r7, #8]
 800afa0:	0159      	lsls	r1, r3, #5
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	440b      	add	r3, r1
 800afa6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afaa:	4619      	mov	r1, r3
 800afac:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <USB_DeactivateEndpoint+0x1b4>)
 800afae:	4013      	ands	r3, r2
 800afb0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800afb2:	2300      	movs	r3, #0
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	3714      	adds	r7, #20
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr
 800afc0:	ec337800 	.word	0xec337800
 800afc4:	eff37800 	.word	0xeff37800

0800afc8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b08a      	sub	sp, #40	; 0x28
 800afcc:	af02      	add	r7, sp, #8
 800afce:	60f8      	str	r0, [r7, #12]
 800afd0:	60b9      	str	r1, [r7, #8]
 800afd2:	4613      	mov	r3, r2
 800afd4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800afda:	68bb      	ldr	r3, [r7, #8]
 800afdc:	781b      	ldrb	r3, [r3, #0]
 800afde:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800afe0:	68bb      	ldr	r3, [r7, #8]
 800afe2:	785b      	ldrb	r3, [r3, #1]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	f040 8163 	bne.w	800b2b0 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800afea:	68bb      	ldr	r3, [r7, #8]
 800afec:	699b      	ldr	r3, [r3, #24]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d132      	bne.n	800b058 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	015a      	lsls	r2, r3, #5
 800aff6:	69fb      	ldr	r3, [r7, #28]
 800aff8:	4413      	add	r3, r2
 800affa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800affe:	691a      	ldr	r2, [r3, #16]
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	0159      	lsls	r1, r3, #5
 800b004:	69fb      	ldr	r3, [r7, #28]
 800b006:	440b      	add	r3, r1
 800b008:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b00c:	4619      	mov	r1, r3
 800b00e:	4ba5      	ldr	r3, [pc, #660]	; (800b2a4 <USB_EPStartXfer+0x2dc>)
 800b010:	4013      	ands	r3, r2
 800b012:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	015a      	lsls	r2, r3, #5
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	4413      	add	r3, r2
 800b01c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b020:	691b      	ldr	r3, [r3, #16]
 800b022:	69ba      	ldr	r2, [r7, #24]
 800b024:	0151      	lsls	r1, r2, #5
 800b026:	69fa      	ldr	r2, [r7, #28]
 800b028:	440a      	add	r2, r1
 800b02a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b02e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b032:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b034:	69bb      	ldr	r3, [r7, #24]
 800b036:	015a      	lsls	r2, r3, #5
 800b038:	69fb      	ldr	r3, [r7, #28]
 800b03a:	4413      	add	r3, r2
 800b03c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	0159      	lsls	r1, r3, #5
 800b046:	69fb      	ldr	r3, [r7, #28]
 800b048:	440b      	add	r3, r1
 800b04a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b04e:	4619      	mov	r1, r3
 800b050:	4b95      	ldr	r3, [pc, #596]	; (800b2a8 <USB_EPStartXfer+0x2e0>)
 800b052:	4013      	ands	r3, r2
 800b054:	610b      	str	r3, [r1, #16]
 800b056:	e074      	b.n	800b142 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b058:	69bb      	ldr	r3, [r7, #24]
 800b05a:	015a      	lsls	r2, r3, #5
 800b05c:	69fb      	ldr	r3, [r7, #28]
 800b05e:	4413      	add	r3, r2
 800b060:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b064:	691a      	ldr	r2, [r3, #16]
 800b066:	69bb      	ldr	r3, [r7, #24]
 800b068:	0159      	lsls	r1, r3, #5
 800b06a:	69fb      	ldr	r3, [r7, #28]
 800b06c:	440b      	add	r3, r1
 800b06e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b072:	4619      	mov	r1, r3
 800b074:	4b8c      	ldr	r3, [pc, #560]	; (800b2a8 <USB_EPStartXfer+0x2e0>)
 800b076:	4013      	ands	r3, r2
 800b078:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b07a:	69bb      	ldr	r3, [r7, #24]
 800b07c:	015a      	lsls	r2, r3, #5
 800b07e:	69fb      	ldr	r3, [r7, #28]
 800b080:	4413      	add	r3, r2
 800b082:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b086:	691a      	ldr	r2, [r3, #16]
 800b088:	69bb      	ldr	r3, [r7, #24]
 800b08a:	0159      	lsls	r1, r3, #5
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	440b      	add	r3, r1
 800b090:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b094:	4619      	mov	r1, r3
 800b096:	4b83      	ldr	r3, [pc, #524]	; (800b2a4 <USB_EPStartXfer+0x2dc>)
 800b098:	4013      	ands	r3, r2
 800b09a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b09c:	69bb      	ldr	r3, [r7, #24]
 800b09e:	015a      	lsls	r2, r3, #5
 800b0a0:	69fb      	ldr	r3, [r7, #28]
 800b0a2:	4413      	add	r3, r2
 800b0a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0a8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b0aa:	68bb      	ldr	r3, [r7, #8]
 800b0ac:	6999      	ldr	r1, [r3, #24]
 800b0ae:	68bb      	ldr	r3, [r7, #8]
 800b0b0:	68db      	ldr	r3, [r3, #12]
 800b0b2:	440b      	add	r3, r1
 800b0b4:	1e59      	subs	r1, r3, #1
 800b0b6:	68bb      	ldr	r3, [r7, #8]
 800b0b8:	68db      	ldr	r3, [r3, #12]
 800b0ba:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0be:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b0c0:	4b7a      	ldr	r3, [pc, #488]	; (800b2ac <USB_EPStartXfer+0x2e4>)
 800b0c2:	400b      	ands	r3, r1
 800b0c4:	69b9      	ldr	r1, [r7, #24]
 800b0c6:	0148      	lsls	r0, r1, #5
 800b0c8:	69f9      	ldr	r1, [r7, #28]
 800b0ca:	4401      	add	r1, r0
 800b0cc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	015a      	lsls	r2, r3, #5
 800b0d8:	69fb      	ldr	r3, [r7, #28]
 800b0da:	4413      	add	r3, r2
 800b0dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e0:	691a      	ldr	r2, [r3, #16]
 800b0e2:	68bb      	ldr	r3, [r7, #8]
 800b0e4:	699b      	ldr	r3, [r3, #24]
 800b0e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b0ea:	69b9      	ldr	r1, [r7, #24]
 800b0ec:	0148      	lsls	r0, r1, #5
 800b0ee:	69f9      	ldr	r1, [r7, #28]
 800b0f0:	4401      	add	r1, r0
 800b0f2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b0f6:	4313      	orrs	r3, r2
 800b0f8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b0fa:	68bb      	ldr	r3, [r7, #8]
 800b0fc:	791b      	ldrb	r3, [r3, #4]
 800b0fe:	2b01      	cmp	r3, #1
 800b100:	d11f      	bne.n	800b142 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b102:	69bb      	ldr	r3, [r7, #24]
 800b104:	015a      	lsls	r2, r3, #5
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	4413      	add	r3, r2
 800b10a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b10e:	691b      	ldr	r3, [r3, #16]
 800b110:	69ba      	ldr	r2, [r7, #24]
 800b112:	0151      	lsls	r1, r2, #5
 800b114:	69fa      	ldr	r2, [r7, #28]
 800b116:	440a      	add	r2, r1
 800b118:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b11c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b120:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b122:	69bb      	ldr	r3, [r7, #24]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	69fb      	ldr	r3, [r7, #28]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12e:	691b      	ldr	r3, [r3, #16]
 800b130:	69ba      	ldr	r2, [r7, #24]
 800b132:	0151      	lsls	r1, r2, #5
 800b134:	69fa      	ldr	r2, [r7, #28]
 800b136:	440a      	add	r2, r1
 800b138:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b13c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b140:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b142:	79fb      	ldrb	r3, [r7, #7]
 800b144:	2b01      	cmp	r3, #1
 800b146:	d14b      	bne.n	800b1e0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	695b      	ldr	r3, [r3, #20]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d009      	beq.n	800b164 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b150:	69bb      	ldr	r3, [r7, #24]
 800b152:	015a      	lsls	r2, r3, #5
 800b154:	69fb      	ldr	r3, [r7, #28]
 800b156:	4413      	add	r3, r2
 800b158:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b15c:	461a      	mov	r2, r3
 800b15e:	68bb      	ldr	r3, [r7, #8]
 800b160:	695b      	ldr	r3, [r3, #20]
 800b162:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b164:	68bb      	ldr	r3, [r7, #8]
 800b166:	791b      	ldrb	r3, [r3, #4]
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d128      	bne.n	800b1be <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b16c:	69fb      	ldr	r3, [r7, #28]
 800b16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b172:	689b      	ldr	r3, [r3, #8]
 800b174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d110      	bne.n	800b19e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	015a      	lsls	r2, r3, #5
 800b180:	69fb      	ldr	r3, [r7, #28]
 800b182:	4413      	add	r3, r2
 800b184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	69ba      	ldr	r2, [r7, #24]
 800b18c:	0151      	lsls	r1, r2, #5
 800b18e:	69fa      	ldr	r2, [r7, #28]
 800b190:	440a      	add	r2, r1
 800b192:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b196:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b19a:	6013      	str	r3, [r2, #0]
 800b19c:	e00f      	b.n	800b1be <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	015a      	lsls	r2, r3, #5
 800b1a2:	69fb      	ldr	r3, [r7, #28]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	69ba      	ldr	r2, [r7, #24]
 800b1ae:	0151      	lsls	r1, r2, #5
 800b1b0:	69fa      	ldr	r2, [r7, #28]
 800b1b2:	440a      	add	r2, r1
 800b1b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b1bc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1be:	69bb      	ldr	r3, [r7, #24]
 800b1c0:	015a      	lsls	r2, r3, #5
 800b1c2:	69fb      	ldr	r3, [r7, #28]
 800b1c4:	4413      	add	r3, r2
 800b1c6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	69ba      	ldr	r2, [r7, #24]
 800b1ce:	0151      	lsls	r1, r2, #5
 800b1d0:	69fa      	ldr	r2, [r7, #28]
 800b1d2:	440a      	add	r2, r1
 800b1d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1d8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1dc:	6013      	str	r3, [r2, #0]
 800b1de:	e137      	b.n	800b450 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	015a      	lsls	r2, r3, #5
 800b1e4:	69fb      	ldr	r3, [r7, #28]
 800b1e6:	4413      	add	r3, r2
 800b1e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	69ba      	ldr	r2, [r7, #24]
 800b1f0:	0151      	lsls	r1, r2, #5
 800b1f2:	69fa      	ldr	r2, [r7, #28]
 800b1f4:	440a      	add	r2, r1
 800b1f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b1fe:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	791b      	ldrb	r3, [r3, #4]
 800b204:	2b01      	cmp	r3, #1
 800b206:	d015      	beq.n	800b234 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 811f 	beq.w	800b450 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b212:	69fb      	ldr	r3, [r7, #28]
 800b214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b218:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	f003 030f 	and.w	r3, r3, #15
 800b222:	2101      	movs	r1, #1
 800b224:	fa01 f303 	lsl.w	r3, r1, r3
 800b228:	69f9      	ldr	r1, [r7, #28]
 800b22a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b22e:	4313      	orrs	r3, r2
 800b230:	634b      	str	r3, [r1, #52]	; 0x34
 800b232:	e10d      	b.n	800b450 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b234:	69fb      	ldr	r3, [r7, #28]
 800b236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b23a:	689b      	ldr	r3, [r3, #8]
 800b23c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b240:	2b00      	cmp	r3, #0
 800b242:	d110      	bne.n	800b266 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b244:	69bb      	ldr	r3, [r7, #24]
 800b246:	015a      	lsls	r2, r3, #5
 800b248:	69fb      	ldr	r3, [r7, #28]
 800b24a:	4413      	add	r3, r2
 800b24c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	69ba      	ldr	r2, [r7, #24]
 800b254:	0151      	lsls	r1, r2, #5
 800b256:	69fa      	ldr	r2, [r7, #28]
 800b258:	440a      	add	r2, r1
 800b25a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b25e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b262:	6013      	str	r3, [r2, #0]
 800b264:	e00f      	b.n	800b286 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	015a      	lsls	r2, r3, #5
 800b26a:	69fb      	ldr	r3, [r7, #28]
 800b26c:	4413      	add	r3, r2
 800b26e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	69ba      	ldr	r2, [r7, #24]
 800b276:	0151      	lsls	r1, r2, #5
 800b278:	69fa      	ldr	r2, [r7, #28]
 800b27a:	440a      	add	r2, r1
 800b27c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b280:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b284:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b286:	68bb      	ldr	r3, [r7, #8]
 800b288:	6919      	ldr	r1, [r3, #16]
 800b28a:	68bb      	ldr	r3, [r7, #8]
 800b28c:	781a      	ldrb	r2, [r3, #0]
 800b28e:	68bb      	ldr	r3, [r7, #8]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	b298      	uxth	r0, r3
 800b294:	79fb      	ldrb	r3, [r7, #7]
 800b296:	9300      	str	r3, [sp, #0]
 800b298:	4603      	mov	r3, r0
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 faea 	bl	800b874 <USB_WritePacket>
 800b2a0:	e0d6      	b.n	800b450 <USB_EPStartXfer+0x488>
 800b2a2:	bf00      	nop
 800b2a4:	e007ffff 	.word	0xe007ffff
 800b2a8:	fff80000 	.word	0xfff80000
 800b2ac:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b2b0:	69bb      	ldr	r3, [r7, #24]
 800b2b2:	015a      	lsls	r2, r3, #5
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2bc:	691a      	ldr	r2, [r3, #16]
 800b2be:	69bb      	ldr	r3, [r7, #24]
 800b2c0:	0159      	lsls	r1, r3, #5
 800b2c2:	69fb      	ldr	r3, [r7, #28]
 800b2c4:	440b      	add	r3, r1
 800b2c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ca:	4619      	mov	r1, r3
 800b2cc:	4b63      	ldr	r3, [pc, #396]	; (800b45c <USB_EPStartXfer+0x494>)
 800b2ce:	4013      	ands	r3, r2
 800b2d0:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b2d2:	69bb      	ldr	r3, [r7, #24]
 800b2d4:	015a      	lsls	r2, r3, #5
 800b2d6:	69fb      	ldr	r3, [r7, #28]
 800b2d8:	4413      	add	r3, r2
 800b2da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2de:	691a      	ldr	r2, [r3, #16]
 800b2e0:	69bb      	ldr	r3, [r7, #24]
 800b2e2:	0159      	lsls	r1, r3, #5
 800b2e4:	69fb      	ldr	r3, [r7, #28]
 800b2e6:	440b      	add	r3, r1
 800b2e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ec:	4619      	mov	r1, r3
 800b2ee:	4b5c      	ldr	r3, [pc, #368]	; (800b460 <USB_EPStartXfer+0x498>)
 800b2f0:	4013      	ands	r3, r2
 800b2f2:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	699b      	ldr	r3, [r3, #24]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d123      	bne.n	800b344 <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b2fc:	69bb      	ldr	r3, [r7, #24]
 800b2fe:	015a      	lsls	r2, r3, #5
 800b300:	69fb      	ldr	r3, [r7, #28]
 800b302:	4413      	add	r3, r2
 800b304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b308:	691a      	ldr	r2, [r3, #16]
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	68db      	ldr	r3, [r3, #12]
 800b30e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b312:	69b9      	ldr	r1, [r7, #24]
 800b314:	0148      	lsls	r0, r1, #5
 800b316:	69f9      	ldr	r1, [r7, #28]
 800b318:	4401      	add	r1, r0
 800b31a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b31e:	4313      	orrs	r3, r2
 800b320:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	015a      	lsls	r2, r3, #5
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	4413      	add	r3, r2
 800b32a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b32e:	691b      	ldr	r3, [r3, #16]
 800b330:	69ba      	ldr	r2, [r7, #24]
 800b332:	0151      	lsls	r1, r2, #5
 800b334:	69fa      	ldr	r2, [r7, #28]
 800b336:	440a      	add	r2, r1
 800b338:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b33c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b340:	6113      	str	r3, [r2, #16]
 800b342:	e037      	b.n	800b3b4 <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	699a      	ldr	r2, [r3, #24]
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	4413      	add	r3, r2
 800b34e:	1e5a      	subs	r2, r3, #1
 800b350:	68bb      	ldr	r3, [r7, #8]
 800b352:	68db      	ldr	r3, [r3, #12]
 800b354:	fbb2 f3f3 	udiv	r3, r2, r3
 800b358:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	68db      	ldr	r3, [r3, #12]
 800b35e:	8afa      	ldrh	r2, [r7, #22]
 800b360:	fb03 f202 	mul.w	r2, r3, r2
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b368:	69bb      	ldr	r3, [r7, #24]
 800b36a:	015a      	lsls	r2, r3, #5
 800b36c:	69fb      	ldr	r3, [r7, #28]
 800b36e:	4413      	add	r3, r2
 800b370:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b374:	691a      	ldr	r2, [r3, #16]
 800b376:	8afb      	ldrh	r3, [r7, #22]
 800b378:	04d9      	lsls	r1, r3, #19
 800b37a:	4b3a      	ldr	r3, [pc, #232]	; (800b464 <USB_EPStartXfer+0x49c>)
 800b37c:	400b      	ands	r3, r1
 800b37e:	69b9      	ldr	r1, [r7, #24]
 800b380:	0148      	lsls	r0, r1, #5
 800b382:	69f9      	ldr	r1, [r7, #28]
 800b384:	4401      	add	r1, r0
 800b386:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b38a:	4313      	orrs	r3, r2
 800b38c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	015a      	lsls	r2, r3, #5
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	4413      	add	r3, r2
 800b396:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b39a:	691a      	ldr	r2, [r3, #16]
 800b39c:	68bb      	ldr	r3, [r7, #8]
 800b39e:	69db      	ldr	r3, [r3, #28]
 800b3a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b3a4:	69b9      	ldr	r1, [r7, #24]
 800b3a6:	0148      	lsls	r0, r1, #5
 800b3a8:	69f9      	ldr	r1, [r7, #28]
 800b3aa:	4401      	add	r1, r0
 800b3ac:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b3b0:	4313      	orrs	r3, r2
 800b3b2:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b3b4:	79fb      	ldrb	r3, [r7, #7]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d10d      	bne.n	800b3d6 <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b3ba:	68bb      	ldr	r3, [r7, #8]
 800b3bc:	691b      	ldr	r3, [r3, #16]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d009      	beq.n	800b3d6 <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b3c2:	68bb      	ldr	r3, [r7, #8]
 800b3c4:	6919      	ldr	r1, [r3, #16]
 800b3c6:	69bb      	ldr	r3, [r7, #24]
 800b3c8:	015a      	lsls	r2, r3, #5
 800b3ca:	69fb      	ldr	r3, [r7, #28]
 800b3cc:	4413      	add	r3, r2
 800b3ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3d2:	460a      	mov	r2, r1
 800b3d4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b3d6:	68bb      	ldr	r3, [r7, #8]
 800b3d8:	791b      	ldrb	r3, [r3, #4]
 800b3da:	2b01      	cmp	r3, #1
 800b3dc:	d128      	bne.n	800b430 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3e4:	689b      	ldr	r3, [r3, #8]
 800b3e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d110      	bne.n	800b410 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b3ee:	69bb      	ldr	r3, [r7, #24]
 800b3f0:	015a      	lsls	r2, r3, #5
 800b3f2:	69fb      	ldr	r3, [r7, #28]
 800b3f4:	4413      	add	r3, r2
 800b3f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	69ba      	ldr	r2, [r7, #24]
 800b3fe:	0151      	lsls	r1, r2, #5
 800b400:	69fa      	ldr	r2, [r7, #28]
 800b402:	440a      	add	r2, r1
 800b404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b40c:	6013      	str	r3, [r2, #0]
 800b40e:	e00f      	b.n	800b430 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b410:	69bb      	ldr	r3, [r7, #24]
 800b412:	015a      	lsls	r2, r3, #5
 800b414:	69fb      	ldr	r3, [r7, #28]
 800b416:	4413      	add	r3, r2
 800b418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	69ba      	ldr	r2, [r7, #24]
 800b420:	0151      	lsls	r1, r2, #5
 800b422:	69fa      	ldr	r2, [r7, #28]
 800b424:	440a      	add	r2, r1
 800b426:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b42a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b42e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b430:	69bb      	ldr	r3, [r7, #24]
 800b432:	015a      	lsls	r2, r3, #5
 800b434:	69fb      	ldr	r3, [r7, #28]
 800b436:	4413      	add	r3, r2
 800b438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	69ba      	ldr	r2, [r7, #24]
 800b440:	0151      	lsls	r1, r2, #5
 800b442:	69fa      	ldr	r2, [r7, #28]
 800b444:	440a      	add	r2, r1
 800b446:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b44a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b44e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b450:	2300      	movs	r3, #0
}
 800b452:	4618      	mov	r0, r3
 800b454:	3720      	adds	r7, #32
 800b456:	46bd      	mov	sp, r7
 800b458:	bd80      	pop	{r7, pc}
 800b45a:	bf00      	nop
 800b45c:	fff80000 	.word	0xfff80000
 800b460:	e007ffff 	.word	0xe007ffff
 800b464:	1ff80000 	.word	0x1ff80000

0800b468 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b468:	b480      	push	{r7}
 800b46a:	b087      	sub	sp, #28
 800b46c:	af00      	add	r7, sp, #0
 800b46e:	60f8      	str	r0, [r7, #12]
 800b470:	60b9      	str	r1, [r7, #8]
 800b472:	4613      	mov	r3, r2
 800b474:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b480:	68bb      	ldr	r3, [r7, #8]
 800b482:	785b      	ldrb	r3, [r3, #1]
 800b484:	2b01      	cmp	r3, #1
 800b486:	f040 80ce 	bne.w	800b626 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b48a:	68bb      	ldr	r3, [r7, #8]
 800b48c:	699b      	ldr	r3, [r3, #24]
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d132      	bne.n	800b4f8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	015a      	lsls	r2, r3, #5
 800b496:	697b      	ldr	r3, [r7, #20]
 800b498:	4413      	add	r3, r2
 800b49a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b49e:	691a      	ldr	r2, [r3, #16]
 800b4a0:	693b      	ldr	r3, [r7, #16]
 800b4a2:	0159      	lsls	r1, r3, #5
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	440b      	add	r3, r1
 800b4a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ac:	4619      	mov	r1, r3
 800b4ae:	4b9a      	ldr	r3, [pc, #616]	; (800b718 <USB_EP0StartXfer+0x2b0>)
 800b4b0:	4013      	ands	r3, r2
 800b4b2:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b4b4:	693b      	ldr	r3, [r7, #16]
 800b4b6:	015a      	lsls	r2, r3, #5
 800b4b8:	697b      	ldr	r3, [r7, #20]
 800b4ba:	4413      	add	r3, r2
 800b4bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c0:	691b      	ldr	r3, [r3, #16]
 800b4c2:	693a      	ldr	r2, [r7, #16]
 800b4c4:	0151      	lsls	r1, r2, #5
 800b4c6:	697a      	ldr	r2, [r7, #20]
 800b4c8:	440a      	add	r2, r1
 800b4ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4ce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b4d2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4d4:	693b      	ldr	r3, [r7, #16]
 800b4d6:	015a      	lsls	r2, r3, #5
 800b4d8:	697b      	ldr	r3, [r7, #20]
 800b4da:	4413      	add	r3, r2
 800b4dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e0:	691a      	ldr	r2, [r3, #16]
 800b4e2:	693b      	ldr	r3, [r7, #16]
 800b4e4:	0159      	lsls	r1, r3, #5
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	440b      	add	r3, r1
 800b4ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	4b8a      	ldr	r3, [pc, #552]	; (800b71c <USB_EP0StartXfer+0x2b4>)
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	610b      	str	r3, [r1, #16]
 800b4f6:	e04e      	b.n	800b596 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b4f8:	693b      	ldr	r3, [r7, #16]
 800b4fa:	015a      	lsls	r2, r3, #5
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	4413      	add	r3, r2
 800b500:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b504:	691a      	ldr	r2, [r3, #16]
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	0159      	lsls	r1, r3, #5
 800b50a:	697b      	ldr	r3, [r7, #20]
 800b50c:	440b      	add	r3, r1
 800b50e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b512:	4619      	mov	r1, r3
 800b514:	4b81      	ldr	r3, [pc, #516]	; (800b71c <USB_EP0StartXfer+0x2b4>)
 800b516:	4013      	ands	r3, r2
 800b518:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b51a:	693b      	ldr	r3, [r7, #16]
 800b51c:	015a      	lsls	r2, r3, #5
 800b51e:	697b      	ldr	r3, [r7, #20]
 800b520:	4413      	add	r3, r2
 800b522:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b526:	691a      	ldr	r2, [r3, #16]
 800b528:	693b      	ldr	r3, [r7, #16]
 800b52a:	0159      	lsls	r1, r3, #5
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	440b      	add	r3, r1
 800b530:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b534:	4619      	mov	r1, r3
 800b536:	4b78      	ldr	r3, [pc, #480]	; (800b718 <USB_EP0StartXfer+0x2b0>)
 800b538:	4013      	ands	r3, r2
 800b53a:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	699a      	ldr	r2, [r3, #24]
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	68db      	ldr	r3, [r3, #12]
 800b544:	429a      	cmp	r2, r3
 800b546:	d903      	bls.n	800b550 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b548:	68bb      	ldr	r3, [r7, #8]
 800b54a:	68da      	ldr	r2, [r3, #12]
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b550:	693b      	ldr	r3, [r7, #16]
 800b552:	015a      	lsls	r2, r3, #5
 800b554:	697b      	ldr	r3, [r7, #20]
 800b556:	4413      	add	r3, r2
 800b558:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b55c:	691b      	ldr	r3, [r3, #16]
 800b55e:	693a      	ldr	r2, [r7, #16]
 800b560:	0151      	lsls	r1, r2, #5
 800b562:	697a      	ldr	r2, [r7, #20]
 800b564:	440a      	add	r2, r1
 800b566:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b56a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b56e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b570:	693b      	ldr	r3, [r7, #16]
 800b572:	015a      	lsls	r2, r3, #5
 800b574:	697b      	ldr	r3, [r7, #20]
 800b576:	4413      	add	r3, r2
 800b578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b57c:	691a      	ldr	r2, [r3, #16]
 800b57e:	68bb      	ldr	r3, [r7, #8]
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b586:	6939      	ldr	r1, [r7, #16]
 800b588:	0148      	lsls	r0, r1, #5
 800b58a:	6979      	ldr	r1, [r7, #20]
 800b58c:	4401      	add	r1, r0
 800b58e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b592:	4313      	orrs	r3, r2
 800b594:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b596:	79fb      	ldrb	r3, [r7, #7]
 800b598:	2b01      	cmp	r3, #1
 800b59a:	d11e      	bne.n	800b5da <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	695b      	ldr	r3, [r3, #20]
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	d009      	beq.n	800b5b8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	015a      	lsls	r2, r3, #5
 800b5a8:	697b      	ldr	r3, [r7, #20]
 800b5aa:	4413      	add	r3, r2
 800b5ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5b0:	461a      	mov	r2, r3
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	695b      	ldr	r3, [r3, #20]
 800b5b6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5b8:	693b      	ldr	r3, [r7, #16]
 800b5ba:	015a      	lsls	r2, r3, #5
 800b5bc:	697b      	ldr	r3, [r7, #20]
 800b5be:	4413      	add	r3, r2
 800b5c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	693a      	ldr	r2, [r7, #16]
 800b5c8:	0151      	lsls	r1, r2, #5
 800b5ca:	697a      	ldr	r2, [r7, #20]
 800b5cc:	440a      	add	r2, r1
 800b5ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5d6:	6013      	str	r3, [r2, #0]
 800b5d8:	e097      	b.n	800b70a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	015a      	lsls	r2, r3, #5
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	693a      	ldr	r2, [r7, #16]
 800b5ea:	0151      	lsls	r1, r2, #5
 800b5ec:	697a      	ldr	r2, [r7, #20]
 800b5ee:	440a      	add	r2, r1
 800b5f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b5f8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	699b      	ldr	r3, [r3, #24]
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	f000 8083 	beq.w	800b70a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b604:	697b      	ldr	r3, [r7, #20]
 800b606:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b60a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b60c:	68bb      	ldr	r3, [r7, #8]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	f003 030f 	and.w	r3, r3, #15
 800b614:	2101      	movs	r1, #1
 800b616:	fa01 f303 	lsl.w	r3, r1, r3
 800b61a:	6979      	ldr	r1, [r7, #20]
 800b61c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b620:	4313      	orrs	r3, r2
 800b622:	634b      	str	r3, [r1, #52]	; 0x34
 800b624:	e071      	b.n	800b70a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b626:	693b      	ldr	r3, [r7, #16]
 800b628:	015a      	lsls	r2, r3, #5
 800b62a:	697b      	ldr	r3, [r7, #20]
 800b62c:	4413      	add	r3, r2
 800b62e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b632:	691a      	ldr	r2, [r3, #16]
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	0159      	lsls	r1, r3, #5
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	440b      	add	r3, r1
 800b63c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b640:	4619      	mov	r1, r3
 800b642:	4b36      	ldr	r3, [pc, #216]	; (800b71c <USB_EP0StartXfer+0x2b4>)
 800b644:	4013      	ands	r3, r2
 800b646:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b648:	693b      	ldr	r3, [r7, #16]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	697b      	ldr	r3, [r7, #20]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b654:	691a      	ldr	r2, [r3, #16]
 800b656:	693b      	ldr	r3, [r7, #16]
 800b658:	0159      	lsls	r1, r3, #5
 800b65a:	697b      	ldr	r3, [r7, #20]
 800b65c:	440b      	add	r3, r1
 800b65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b662:	4619      	mov	r1, r3
 800b664:	4b2c      	ldr	r3, [pc, #176]	; (800b718 <USB_EP0StartXfer+0x2b0>)
 800b666:	4013      	ands	r3, r2
 800b668:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	699b      	ldr	r3, [r3, #24]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d003      	beq.n	800b67a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800b672:	68bb      	ldr	r3, [r7, #8]
 800b674:	68da      	ldr	r2, [r3, #12]
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800b67a:	68bb      	ldr	r3, [r7, #8]
 800b67c:	68da      	ldr	r2, [r3, #12]
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	015a      	lsls	r2, r3, #5
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	4413      	add	r3, r2
 800b68a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b68e:	691b      	ldr	r3, [r3, #16]
 800b690:	693a      	ldr	r2, [r7, #16]
 800b692:	0151      	lsls	r1, r2, #5
 800b694:	697a      	ldr	r2, [r7, #20]
 800b696:	440a      	add	r2, r1
 800b698:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b69c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b6a2:	693b      	ldr	r3, [r7, #16]
 800b6a4:	015a      	lsls	r2, r3, #5
 800b6a6:	697b      	ldr	r3, [r7, #20]
 800b6a8:	4413      	add	r3, r2
 800b6aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6ae:	691a      	ldr	r2, [r3, #16]
 800b6b0:	68bb      	ldr	r3, [r7, #8]
 800b6b2:	69db      	ldr	r3, [r3, #28]
 800b6b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6b8:	6939      	ldr	r1, [r7, #16]
 800b6ba:	0148      	lsls	r0, r1, #5
 800b6bc:	6979      	ldr	r1, [r7, #20]
 800b6be:	4401      	add	r1, r0
 800b6c0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800b6c8:	79fb      	ldrb	r3, [r7, #7]
 800b6ca:	2b01      	cmp	r3, #1
 800b6cc:	d10d      	bne.n	800b6ea <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b6ce:	68bb      	ldr	r3, [r7, #8]
 800b6d0:	691b      	ldr	r3, [r3, #16]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d009      	beq.n	800b6ea <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b6d6:	68bb      	ldr	r3, [r7, #8]
 800b6d8:	6919      	ldr	r1, [r3, #16]
 800b6da:	693b      	ldr	r3, [r7, #16]
 800b6dc:	015a      	lsls	r2, r3, #5
 800b6de:	697b      	ldr	r3, [r7, #20]
 800b6e0:	4413      	add	r3, r2
 800b6e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6e6:	460a      	mov	r2, r1
 800b6e8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b6ea:	693b      	ldr	r3, [r7, #16]
 800b6ec:	015a      	lsls	r2, r3, #5
 800b6ee:	697b      	ldr	r3, [r7, #20]
 800b6f0:	4413      	add	r3, r2
 800b6f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6f6:	681b      	ldr	r3, [r3, #0]
 800b6f8:	693a      	ldr	r2, [r7, #16]
 800b6fa:	0151      	lsls	r1, r2, #5
 800b6fc:	697a      	ldr	r2, [r7, #20]
 800b6fe:	440a      	add	r2, r1
 800b700:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b704:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b708:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b70a:	2300      	movs	r3, #0
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	371c      	adds	r7, #28
 800b710:	46bd      	mov	sp, r7
 800b712:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b716:	4770      	bx	lr
 800b718:	e007ffff 	.word	0xe007ffff
 800b71c:	fff80000 	.word	0xfff80000

0800b720 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b720:	b480      	push	{r7}
 800b722:	b087      	sub	sp, #28
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
 800b728:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b72a:	2300      	movs	r3, #0
 800b72c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800b72e:	2300      	movs	r3, #0
 800b730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b736:	683b      	ldr	r3, [r7, #0]
 800b738:	785b      	ldrb	r3, [r3, #1]
 800b73a:	2b01      	cmp	r3, #1
 800b73c:	d14a      	bne.n	800b7d4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b73e:	683b      	ldr	r3, [r7, #0]
 800b740:	781b      	ldrb	r3, [r3, #0]
 800b742:	015a      	lsls	r2, r3, #5
 800b744:	693b      	ldr	r3, [r7, #16]
 800b746:	4413      	add	r3, r2
 800b748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b752:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b756:	f040 8086 	bne.w	800b866 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	781b      	ldrb	r3, [r3, #0]
 800b75e:	015a      	lsls	r2, r3, #5
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	4413      	add	r3, r2
 800b764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	683a      	ldr	r2, [r7, #0]
 800b76c:	7812      	ldrb	r2, [r2, #0]
 800b76e:	0151      	lsls	r1, r2, #5
 800b770:	693a      	ldr	r2, [r7, #16]
 800b772:	440a      	add	r2, r1
 800b774:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b778:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b77c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800b77e:	683b      	ldr	r3, [r7, #0]
 800b780:	781b      	ldrb	r3, [r3, #0]
 800b782:	015a      	lsls	r2, r3, #5
 800b784:	693b      	ldr	r3, [r7, #16]
 800b786:	4413      	add	r3, r2
 800b788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	683a      	ldr	r2, [r7, #0]
 800b790:	7812      	ldrb	r2, [r2, #0]
 800b792:	0151      	lsls	r1, r2, #5
 800b794:	693a      	ldr	r2, [r7, #16]
 800b796:	440a      	add	r2, r1
 800b798:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b79c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b7a0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	f242 7210 	movw	r2, #10000	; 0x2710
 800b7ae:	4293      	cmp	r3, r2
 800b7b0:	d902      	bls.n	800b7b8 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	75fb      	strb	r3, [r7, #23]
          break;
 800b7b6:	e056      	b.n	800b866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800b7b8:	683b      	ldr	r3, [r7, #0]
 800b7ba:	781b      	ldrb	r3, [r3, #0]
 800b7bc:	015a      	lsls	r2, r3, #5
 800b7be:	693b      	ldr	r3, [r7, #16]
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7d0:	d0e7      	beq.n	800b7a2 <USB_EPStopXfer+0x82>
 800b7d2:	e048      	b.n	800b866 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	781b      	ldrb	r3, [r3, #0]
 800b7d8:	015a      	lsls	r2, r3, #5
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	4413      	add	r3, r2
 800b7de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b7e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b7ec:	d13b      	bne.n	800b866 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800b7ee:	683b      	ldr	r3, [r7, #0]
 800b7f0:	781b      	ldrb	r3, [r3, #0]
 800b7f2:	015a      	lsls	r2, r3, #5
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	4413      	add	r3, r2
 800b7f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	683a      	ldr	r2, [r7, #0]
 800b800:	7812      	ldrb	r2, [r2, #0]
 800b802:	0151      	lsls	r1, r2, #5
 800b804:	693a      	ldr	r2, [r7, #16]
 800b806:	440a      	add	r2, r1
 800b808:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b80c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b810:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800b812:	683b      	ldr	r3, [r7, #0]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	015a      	lsls	r2, r3, #5
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	4413      	add	r3, r2
 800b81c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	683a      	ldr	r2, [r7, #0]
 800b824:	7812      	ldrb	r2, [r2, #0]
 800b826:	0151      	lsls	r1, r2, #5
 800b828:	693a      	ldr	r2, [r7, #16]
 800b82a:	440a      	add	r2, r1
 800b82c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b830:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b834:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800b836:	68fb      	ldr	r3, [r7, #12]
 800b838:	3301      	adds	r3, #1
 800b83a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800b83c:	68fb      	ldr	r3, [r7, #12]
 800b83e:	f242 7210 	movw	r2, #10000	; 0x2710
 800b842:	4293      	cmp	r3, r2
 800b844:	d902      	bls.n	800b84c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800b846:	2301      	movs	r3, #1
 800b848:	75fb      	strb	r3, [r7, #23]
          break;
 800b84a:	e00c      	b.n	800b866 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	781b      	ldrb	r3, [r3, #0]
 800b850:	015a      	lsls	r2, r3, #5
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	4413      	add	r3, r2
 800b856:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b860:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b864:	d0e7      	beq.n	800b836 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800b866:	7dfb      	ldrb	r3, [r7, #23]
}
 800b868:	4618      	mov	r0, r3
 800b86a:	371c      	adds	r7, #28
 800b86c:	46bd      	mov	sp, r7
 800b86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b872:	4770      	bx	lr

0800b874 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800b874:	b480      	push	{r7}
 800b876:	b089      	sub	sp, #36	; 0x24
 800b878:	af00      	add	r7, sp, #0
 800b87a:	60f8      	str	r0, [r7, #12]
 800b87c:	60b9      	str	r1, [r7, #8]
 800b87e:	4611      	mov	r1, r2
 800b880:	461a      	mov	r2, r3
 800b882:	460b      	mov	r3, r1
 800b884:	71fb      	strb	r3, [r7, #7]
 800b886:	4613      	mov	r3, r2
 800b888:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800b88e:	68bb      	ldr	r3, [r7, #8]
 800b890:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800b892:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b896:	2b00      	cmp	r3, #0
 800b898:	d123      	bne.n	800b8e2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800b89a:	88bb      	ldrh	r3, [r7, #4]
 800b89c:	3303      	adds	r3, #3
 800b89e:	089b      	lsrs	r3, r3, #2
 800b8a0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800b8a2:	2300      	movs	r3, #0
 800b8a4:	61bb      	str	r3, [r7, #24]
 800b8a6:	e018      	b.n	800b8da <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800b8a8:	79fb      	ldrb	r3, [r7, #7]
 800b8aa:	031a      	lsls	r2, r3, #12
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	4413      	add	r3, r2
 800b8b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b8b4:	461a      	mov	r2, r3
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	6013      	str	r3, [r2, #0]
      pSrc++;
 800b8bc:	69fb      	ldr	r3, [r7, #28]
 800b8be:	3301      	adds	r3, #1
 800b8c0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8c2:	69fb      	ldr	r3, [r7, #28]
 800b8c4:	3301      	adds	r3, #1
 800b8c6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	3301      	adds	r3, #1
 800b8cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	3301      	adds	r3, #1
 800b8d2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800b8d4:	69bb      	ldr	r3, [r7, #24]
 800b8d6:	3301      	adds	r3, #1
 800b8d8:	61bb      	str	r3, [r7, #24]
 800b8da:	69ba      	ldr	r2, [r7, #24]
 800b8dc:	693b      	ldr	r3, [r7, #16]
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	d3e2      	bcc.n	800b8a8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800b8e2:	2300      	movs	r3, #0
}
 800b8e4:	4618      	mov	r0, r3
 800b8e6:	3724      	adds	r7, #36	; 0x24
 800b8e8:	46bd      	mov	sp, r7
 800b8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ee:	4770      	bx	lr

0800b8f0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800b8f0:	b480      	push	{r7}
 800b8f2:	b08b      	sub	sp, #44	; 0x2c
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	60f8      	str	r0, [r7, #12]
 800b8f8:	60b9      	str	r1, [r7, #8]
 800b8fa:	4613      	mov	r3, r2
 800b8fc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800b906:	88fb      	ldrh	r3, [r7, #6]
 800b908:	089b      	lsrs	r3, r3, #2
 800b90a:	b29b      	uxth	r3, r3
 800b90c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800b90e:	88fb      	ldrh	r3, [r7, #6]
 800b910:	f003 0303 	and.w	r3, r3, #3
 800b914:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800b916:	2300      	movs	r3, #0
 800b918:	623b      	str	r3, [r7, #32]
 800b91a:	e014      	b.n	800b946 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800b91c:	69bb      	ldr	r3, [r7, #24]
 800b91e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b922:	681a      	ldr	r2, [r3, #0]
 800b924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b926:	601a      	str	r2, [r3, #0]
    pDest++;
 800b928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b92a:	3301      	adds	r3, #1
 800b92c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b92e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b930:	3301      	adds	r3, #1
 800b932:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b936:	3301      	adds	r3, #1
 800b938:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800b93a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b93c:	3301      	adds	r3, #1
 800b93e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800b940:	6a3b      	ldr	r3, [r7, #32]
 800b942:	3301      	adds	r3, #1
 800b944:	623b      	str	r3, [r7, #32]
 800b946:	6a3a      	ldr	r2, [r7, #32]
 800b948:	697b      	ldr	r3, [r7, #20]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d3e6      	bcc.n	800b91c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800b94e:	8bfb      	ldrh	r3, [r7, #30]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d01e      	beq.n	800b992 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800b954:	2300      	movs	r3, #0
 800b956:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800b958:	69bb      	ldr	r3, [r7, #24]
 800b95a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800b95e:	461a      	mov	r2, r3
 800b960:	f107 0310 	add.w	r3, r7, #16
 800b964:	6812      	ldr	r2, [r2, #0]
 800b966:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800b968:	693a      	ldr	r2, [r7, #16]
 800b96a:	6a3b      	ldr	r3, [r7, #32]
 800b96c:	b2db      	uxtb	r3, r3
 800b96e:	00db      	lsls	r3, r3, #3
 800b970:	fa22 f303 	lsr.w	r3, r2, r3
 800b974:	b2da      	uxtb	r2, r3
 800b976:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b978:	701a      	strb	r2, [r3, #0]
      i++;
 800b97a:	6a3b      	ldr	r3, [r7, #32]
 800b97c:	3301      	adds	r3, #1
 800b97e:	623b      	str	r3, [r7, #32]
      pDest++;
 800b980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b982:	3301      	adds	r3, #1
 800b984:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800b986:	8bfb      	ldrh	r3, [r7, #30]
 800b988:	3b01      	subs	r3, #1
 800b98a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800b98c:	8bfb      	ldrh	r3, [r7, #30]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d1ea      	bne.n	800b968 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800b992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b994:	4618      	mov	r0, r3
 800b996:	372c      	adds	r7, #44	; 0x2c
 800b998:	46bd      	mov	sp, r7
 800b99a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99e:	4770      	bx	lr

0800b9a0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b9a0:	b480      	push	{r7}
 800b9a2:	b085      	sub	sp, #20
 800b9a4:	af00      	add	r7, sp, #0
 800b9a6:	6078      	str	r0, [r7, #4]
 800b9a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b9ae:	683b      	ldr	r3, [r7, #0]
 800b9b0:	781b      	ldrb	r3, [r3, #0]
 800b9b2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b9b4:	683b      	ldr	r3, [r7, #0]
 800b9b6:	785b      	ldrb	r3, [r3, #1]
 800b9b8:	2b01      	cmp	r3, #1
 800b9ba:	d12c      	bne.n	800ba16 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	015a      	lsls	r2, r3, #5
 800b9c0:	68fb      	ldr	r3, [r7, #12]
 800b9c2:	4413      	add	r3, r2
 800b9c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	db12      	blt.n	800b9f4 <USB_EPSetStall+0x54>
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d00f      	beq.n	800b9f4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800b9d4:	68bb      	ldr	r3, [r7, #8]
 800b9d6:	015a      	lsls	r2, r3, #5
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	4413      	add	r3, r2
 800b9dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	68ba      	ldr	r2, [r7, #8]
 800b9e4:	0151      	lsls	r1, r2, #5
 800b9e6:	68fa      	ldr	r2, [r7, #12]
 800b9e8:	440a      	add	r2, r1
 800b9ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b9ee:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800b9f2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800b9f4:	68bb      	ldr	r3, [r7, #8]
 800b9f6:	015a      	lsls	r2, r3, #5
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	4413      	add	r3, r2
 800b9fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68ba      	ldr	r2, [r7, #8]
 800ba04:	0151      	lsls	r1, r2, #5
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	440a      	add	r2, r1
 800ba0a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800ba0e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba12:	6013      	str	r3, [r2, #0]
 800ba14:	e02b      	b.n	800ba6e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	015a      	lsls	r2, r3, #5
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	4413      	add	r3, r2
 800ba1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	db12      	blt.n	800ba4e <USB_EPSetStall+0xae>
 800ba28:	68bb      	ldr	r3, [r7, #8]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d00f      	beq.n	800ba4e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800ba2e:	68bb      	ldr	r3, [r7, #8]
 800ba30:	015a      	lsls	r2, r3, #5
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	4413      	add	r3, r2
 800ba36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	68ba      	ldr	r2, [r7, #8]
 800ba3e:	0151      	lsls	r1, r2, #5
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	440a      	add	r2, r1
 800ba44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ba4c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	015a      	lsls	r2, r3, #5
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	4413      	add	r3, r2
 800ba56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	68ba      	ldr	r2, [r7, #8]
 800ba5e:	0151      	lsls	r1, r2, #5
 800ba60:	68fa      	ldr	r2, [r7, #12]
 800ba62:	440a      	add	r2, r1
 800ba64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba68:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800ba6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	3714      	adds	r7, #20
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
 800ba84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ba8a:	683b      	ldr	r3, [r7, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	785b      	ldrb	r3, [r3, #1]
 800ba94:	2b01      	cmp	r3, #1
 800ba96:	d128      	bne.n	800baea <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800ba98:	68bb      	ldr	r3, [r7, #8]
 800ba9a:	015a      	lsls	r2, r3, #5
 800ba9c:	68fb      	ldr	r3, [r7, #12]
 800ba9e:	4413      	add	r3, r2
 800baa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	68ba      	ldr	r2, [r7, #8]
 800baa8:	0151      	lsls	r1, r2, #5
 800baaa:	68fa      	ldr	r2, [r7, #12]
 800baac:	440a      	add	r2, r1
 800baae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bab2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bab6:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bab8:	683b      	ldr	r3, [r7, #0]
 800baba:	791b      	ldrb	r3, [r3, #4]
 800babc:	2b03      	cmp	r3, #3
 800babe:	d003      	beq.n	800bac8 <USB_EPClearStall+0x4c>
 800bac0:	683b      	ldr	r3, [r7, #0]
 800bac2:	791b      	ldrb	r3, [r3, #4]
 800bac4:	2b02      	cmp	r3, #2
 800bac6:	d138      	bne.n	800bb3a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bac8:	68bb      	ldr	r3, [r7, #8]
 800baca:	015a      	lsls	r2, r3, #5
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	4413      	add	r3, r2
 800bad0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68ba      	ldr	r2, [r7, #8]
 800bad8:	0151      	lsls	r1, r2, #5
 800bada:	68fa      	ldr	r2, [r7, #12]
 800badc:	440a      	add	r2, r1
 800bade:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bae2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bae6:	6013      	str	r3, [r2, #0]
 800bae8:	e027      	b.n	800bb3a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	015a      	lsls	r2, r3, #5
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	4413      	add	r3, r2
 800baf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	68ba      	ldr	r2, [r7, #8]
 800bafa:	0151      	lsls	r1, r2, #5
 800bafc:	68fa      	ldr	r2, [r7, #12]
 800bafe:	440a      	add	r2, r1
 800bb00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb04:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bb08:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bb0a:	683b      	ldr	r3, [r7, #0]
 800bb0c:	791b      	ldrb	r3, [r3, #4]
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d003      	beq.n	800bb1a <USB_EPClearStall+0x9e>
 800bb12:	683b      	ldr	r3, [r7, #0]
 800bb14:	791b      	ldrb	r3, [r3, #4]
 800bb16:	2b02      	cmp	r3, #2
 800bb18:	d10f      	bne.n	800bb3a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	015a      	lsls	r2, r3, #5
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	4413      	add	r3, r2
 800bb22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	68ba      	ldr	r2, [r7, #8]
 800bb2a:	0151      	lsls	r1, r2, #5
 800bb2c:	68fa      	ldr	r2, [r7, #12]
 800bb2e:	440a      	add	r2, r1
 800bb30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb38:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bb3a:	2300      	movs	r3, #0
}
 800bb3c:	4618      	mov	r0, r3
 800bb3e:	3714      	adds	r7, #20
 800bb40:	46bd      	mov	sp, r7
 800bb42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb46:	4770      	bx	lr

0800bb48 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bb48:	b480      	push	{r7}
 800bb4a:	b085      	sub	sp, #20
 800bb4c:	af00      	add	r7, sp, #0
 800bb4e:	6078      	str	r0, [r7, #4]
 800bb50:	460b      	mov	r3, r1
 800bb52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bb66:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bb6a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bb6c:	68fb      	ldr	r3, [r7, #12]
 800bb6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb72:	681a      	ldr	r2, [r3, #0]
 800bb74:	78fb      	ldrb	r3, [r7, #3]
 800bb76:	011b      	lsls	r3, r3, #4
 800bb78:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bb7c:	68f9      	ldr	r1, [r7, #12]
 800bb7e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bb82:	4313      	orrs	r3, r2
 800bb84:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bb86:	2300      	movs	r3, #0
}
 800bb88:	4618      	mov	r0, r3
 800bb8a:	3714      	adds	r7, #20
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b085      	sub	sp, #20
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68fa      	ldr	r2, [r7, #12]
 800bbaa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbae:	f023 0303 	bic.w	r3, r3, #3
 800bbb2:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbba:	685b      	ldr	r3, [r3, #4]
 800bbbc:	68fa      	ldr	r2, [r7, #12]
 800bbbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bbc2:	f023 0302 	bic.w	r3, r3, #2
 800bbc6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bbc8:	2300      	movs	r3, #0
}
 800bbca:	4618      	mov	r0, r3
 800bbcc:	3714      	adds	r7, #20
 800bbce:	46bd      	mov	sp, r7
 800bbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbd4:	4770      	bx	lr

0800bbd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b085      	sub	sp, #20
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	68fa      	ldr	r2, [r7, #12]
 800bbec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bbf0:	f023 0303 	bic.w	r3, r3, #3
 800bbf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	68fa      	ldr	r2, [r7, #12]
 800bc00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bc04:	f043 0302 	orr.w	r3, r3, #2
 800bc08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bc0a:	2300      	movs	r3, #0
}
 800bc0c:	4618      	mov	r0, r3
 800bc0e:	3714      	adds	r7, #20
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bc18:	b480      	push	{r7}
 800bc1a:	b085      	sub	sp, #20
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	695b      	ldr	r3, [r3, #20]
 800bc24:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	699b      	ldr	r3, [r3, #24]
 800bc2a:	68fa      	ldr	r2, [r7, #12]
 800bc2c:	4013      	ands	r3, r2
 800bc2e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bc30:	68fb      	ldr	r3, [r7, #12]
}
 800bc32:	4618      	mov	r0, r3
 800bc34:	3714      	adds	r7, #20
 800bc36:	46bd      	mov	sp, r7
 800bc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc3c:	4770      	bx	lr

0800bc3e <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800bc3e:	b480      	push	{r7}
 800bc40:	b085      	sub	sp, #20
 800bc42:	af00      	add	r7, sp, #0
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	460b      	mov	r3, r1
 800bc48:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800bc4e:	78fb      	ldrb	r3, [r7, #3]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bc5e:	78fb      	ldrb	r3, [r7, #3]
 800bc60:	015a      	lsls	r2, r3, #5
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	4413      	add	r3, r2
 800bc66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	4013      	ands	r3, r2
 800bc70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bc72:	68bb      	ldr	r3, [r7, #8]
}
 800bc74:	4618      	mov	r0, r3
 800bc76:	3714      	adds	r7, #20
 800bc78:	46bd      	mov	sp, r7
 800bc7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc7e:	4770      	bx	lr

0800bc80 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b085      	sub	sp, #20
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc92:	699b      	ldr	r3, [r3, #24]
 800bc94:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bc9c:	69db      	ldr	r3, [r3, #28]
 800bc9e:	68ba      	ldr	r2, [r7, #8]
 800bca0:	4013      	ands	r3, r2
 800bca2:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	0c1b      	lsrs	r3, r3, #16
}
 800bca8:	4618      	mov	r0, r3
 800bcaa:	3714      	adds	r7, #20
 800bcac:	46bd      	mov	sp, r7
 800bcae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb2:	4770      	bx	lr

0800bcb4 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcc6:	699b      	ldr	r3, [r3, #24]
 800bcc8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bcd0:	69db      	ldr	r3, [r3, #28]
 800bcd2:	68ba      	ldr	r2, [r7, #8]
 800bcd4:	4013      	ands	r3, r2
 800bcd6:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800bcd8:	68bb      	ldr	r3, [r7, #8]
 800bcda:	b29b      	uxth	r3, r3
}
 800bcdc:	4618      	mov	r0, r3
 800bcde:	3714      	adds	r7, #20
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b085      	sub	sp, #20
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
 800bcf0:	460b      	mov	r3, r1
 800bcf2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800bcf8:	78fb      	ldrb	r3, [r7, #3]
 800bcfa:	015a      	lsls	r2, r3, #5
 800bcfc:	68fb      	ldr	r3, [r7, #12]
 800bcfe:	4413      	add	r3, r2
 800bd00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd04:	689b      	ldr	r3, [r3, #8]
 800bd06:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800bd08:	68fb      	ldr	r3, [r7, #12]
 800bd0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd0e:	695b      	ldr	r3, [r3, #20]
 800bd10:	68ba      	ldr	r2, [r7, #8]
 800bd12:	4013      	ands	r3, r2
 800bd14:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd16:	68bb      	ldr	r3, [r7, #8]
}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3714      	adds	r7, #20
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd22:	4770      	bx	lr

0800bd24 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800bd24:	b480      	push	{r7}
 800bd26:	b087      	sub	sp, #28
 800bd28:	af00      	add	r7, sp, #0
 800bd2a:	6078      	str	r0, [r7, #4]
 800bd2c:	460b      	mov	r3, r1
 800bd2e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800bd34:	697b      	ldr	r3, [r7, #20]
 800bd36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3a:	691b      	ldr	r3, [r3, #16]
 800bd3c:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bd46:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800bd48:	78fb      	ldrb	r3, [r7, #3]
 800bd4a:	f003 030f 	and.w	r3, r3, #15
 800bd4e:	68fa      	ldr	r2, [r7, #12]
 800bd50:	fa22 f303 	lsr.w	r3, r2, r3
 800bd54:	01db      	lsls	r3, r3, #7
 800bd56:	b2db      	uxtb	r3, r3
 800bd58:	693a      	ldr	r2, [r7, #16]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800bd5e:	78fb      	ldrb	r3, [r7, #3]
 800bd60:	015a      	lsls	r2, r3, #5
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	4413      	add	r3, r2
 800bd66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd6a:	689b      	ldr	r3, [r3, #8]
 800bd6c:	693a      	ldr	r2, [r7, #16]
 800bd6e:	4013      	ands	r3, r2
 800bd70:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd72:	68bb      	ldr	r3, [r7, #8]
}
 800bd74:	4618      	mov	r0, r3
 800bd76:	371c      	adds	r7, #28
 800bd78:	46bd      	mov	sp, r7
 800bd7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7e:	4770      	bx	lr

0800bd80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800bd80:	b480      	push	{r7}
 800bd82:	b083      	sub	sp, #12
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	695b      	ldr	r3, [r3, #20]
 800bd8c:	f003 0301 	and.w	r3, r3, #1
}
 800bd90:	4618      	mov	r0, r3
 800bd92:	370c      	adds	r7, #12
 800bd94:	46bd      	mov	sp, r7
 800bd96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd9a:	4770      	bx	lr

0800bd9c <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800bd9c:	b480      	push	{r7}
 800bd9e:	b085      	sub	sp, #20
 800bda0:	af00      	add	r7, sp, #0
 800bda2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bdb6:	4619      	mov	r1, r3
 800bdb8:	4b09      	ldr	r3, [pc, #36]	; (800bde0 <USB_ActivateSetup+0x44>)
 800bdba:	4013      	ands	r3, r2
 800bdbc:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800bdbe:	68fb      	ldr	r3, [r7, #12]
 800bdc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	68fa      	ldr	r2, [r7, #12]
 800bdc8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bdcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bdd0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bdd2:	2300      	movs	r3, #0
}
 800bdd4:	4618      	mov	r0, r3
 800bdd6:	3714      	adds	r7, #20
 800bdd8:	46bd      	mov	sp, r7
 800bdda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdde:	4770      	bx	lr
 800bde0:	fffff800 	.word	0xfffff800

0800bde4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800bde4:	b480      	push	{r7}
 800bde6:	b087      	sub	sp, #28
 800bde8:	af00      	add	r7, sp, #0
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	460b      	mov	r3, r1
 800bdee:	607a      	str	r2, [r7, #4]
 800bdf0:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bdf6:	68fb      	ldr	r3, [r7, #12]
 800bdf8:	333c      	adds	r3, #60	; 0x3c
 800bdfa:	3304      	adds	r3, #4
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	4a26      	ldr	r2, [pc, #152]	; (800be9c <USB_EP0_OutStart+0xb8>)
 800be04:	4293      	cmp	r3, r2
 800be06:	d90a      	bls.n	800be1e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800be08:	697b      	ldr	r3, [r7, #20]
 800be0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800be14:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800be18:	d101      	bne.n	800be1e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	e037      	b.n	800be8e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800be1e:	697b      	ldr	r3, [r7, #20]
 800be20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be24:	461a      	mov	r2, r3
 800be26:	2300      	movs	r3, #0
 800be28:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800be2a:	697b      	ldr	r3, [r7, #20]
 800be2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be30:	691b      	ldr	r3, [r3, #16]
 800be32:	697a      	ldr	r2, [r7, #20]
 800be34:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be38:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800be3c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800be3e:	697b      	ldr	r3, [r7, #20]
 800be40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be44:	691b      	ldr	r3, [r3, #16]
 800be46:	697a      	ldr	r2, [r7, #20]
 800be48:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be4c:	f043 0318 	orr.w	r3, r3, #24
 800be50:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be58:	691b      	ldr	r3, [r3, #16]
 800be5a:	697a      	ldr	r2, [r7, #20]
 800be5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be60:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800be64:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800be66:	7afb      	ldrb	r3, [r7, #11]
 800be68:	2b01      	cmp	r3, #1
 800be6a:	d10f      	bne.n	800be8c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800be6c:	697b      	ldr	r3, [r7, #20]
 800be6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be72:	461a      	mov	r2, r3
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800be78:	697b      	ldr	r3, [r7, #20]
 800be7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	697a      	ldr	r2, [r7, #20]
 800be82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be86:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800be8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be8c:	2300      	movs	r3, #0
}
 800be8e:	4618      	mov	r0, r3
 800be90:	371c      	adds	r7, #28
 800be92:	46bd      	mov	sp, r7
 800be94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be98:	4770      	bx	lr
 800be9a:	bf00      	nop
 800be9c:	4f54300a 	.word	0x4f54300a

0800bea0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bea0:	b480      	push	{r7}
 800bea2:	b085      	sub	sp, #20
 800bea4:	af00      	add	r7, sp, #0
 800bea6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bea8:	2300      	movs	r3, #0
 800beaa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800beac:	68fb      	ldr	r3, [r7, #12]
 800beae:	3301      	adds	r3, #1
 800beb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800beb2:	68fb      	ldr	r3, [r7, #12]
 800beb4:	4a13      	ldr	r2, [pc, #76]	; (800bf04 <USB_CoreReset+0x64>)
 800beb6:	4293      	cmp	r3, r2
 800beb8:	d901      	bls.n	800bebe <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800beba:	2303      	movs	r3, #3
 800bebc:	e01b      	b.n	800bef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	691b      	ldr	r3, [r3, #16]
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	daf2      	bge.n	800beac <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bec6:	2300      	movs	r3, #0
 800bec8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	691b      	ldr	r3, [r3, #16]
 800bece:	f043 0201 	orr.w	r2, r3, #1
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	3301      	adds	r3, #1
 800beda:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	4a09      	ldr	r2, [pc, #36]	; (800bf04 <USB_CoreReset+0x64>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d901      	bls.n	800bee8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bee4:	2303      	movs	r3, #3
 800bee6:	e006      	b.n	800bef6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	f003 0301 	and.w	r3, r3, #1
 800bef0:	2b01      	cmp	r3, #1
 800bef2:	d0f0      	beq.n	800bed6 <USB_CoreReset+0x36>

  return HAL_OK;
 800bef4:	2300      	movs	r3, #0
}
 800bef6:	4618      	mov	r0, r3
 800bef8:	3714      	adds	r7, #20
 800befa:	46bd      	mov	sp, r7
 800befc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf00:	4770      	bx	lr
 800bf02:	bf00      	nop
 800bf04:	00030d40 	.word	0x00030d40

0800bf08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800bf08:	b084      	sub	sp, #16
 800bf0a:	b580      	push	{r7, lr}
 800bf0c:	b086      	sub	sp, #24
 800bf0e:	af00      	add	r7, sp, #0
 800bf10:	6078      	str	r0, [r7, #4]
 800bf12:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800bf16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800bf22:	68fb      	ldr	r3, [r7, #12]
 800bf24:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf28:	461a      	mov	r2, r3
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf32:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d018      	beq.n	800bf78 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800bf46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf48:	2b01      	cmp	r3, #1
 800bf4a:	d10a      	bne.n	800bf62 <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf5a:	f043 0304 	orr.w	r3, r3, #4
 800bf5e:	6013      	str	r3, [r2, #0]
 800bf60:	e014      	b.n	800bf8c <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bf62:	68fb      	ldr	r3, [r7, #12]
 800bf64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68fa      	ldr	r2, [r7, #12]
 800bf6c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf70:	f023 0304 	bic.w	r3, r3, #4
 800bf74:	6013      	str	r3, [r2, #0]
 800bf76:	e009      	b.n	800bf8c <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800bf78:	68fb      	ldr	r3, [r7, #12]
 800bf7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	68fa      	ldr	r2, [r7, #12]
 800bf82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800bf86:	f023 0304 	bic.w	r3, r3, #4
 800bf8a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bf8c:	2110      	movs	r1, #16
 800bf8e:	6878      	ldr	r0, [r7, #4]
 800bf90:	f7fe fe14 	bl	800abbc <USB_FlushTxFifo>
 800bf94:	4603      	mov	r3, r0
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d001      	beq.n	800bf9e <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800bf9a:	2301      	movs	r3, #1
 800bf9c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f7fe fe40 	bl	800ac24 <USB_FlushRxFifo>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d001      	beq.n	800bfae <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800bfaa:	2301      	movs	r3, #1
 800bfac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bfae:	2300      	movs	r3, #0
 800bfb0:	613b      	str	r3, [r7, #16]
 800bfb2:	e015      	b.n	800bfe0 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800bfb4:	693b      	ldr	r3, [r7, #16]
 800bfb6:	015a      	lsls	r2, r3, #5
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	4413      	add	r3, r2
 800bfbc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfc0:	461a      	mov	r2, r3
 800bfc2:	f04f 33ff 	mov.w	r3, #4294967295
 800bfc6:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bfc8:	693b      	ldr	r3, [r7, #16]
 800bfca:	015a      	lsls	r2, r3, #5
 800bfcc:	68fb      	ldr	r3, [r7, #12]
 800bfce:	4413      	add	r3, r2
 800bfd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bfd4:	461a      	mov	r2, r3
 800bfd6:	2300      	movs	r3, #0
 800bfd8:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	3301      	adds	r3, #1
 800bfde:	613b      	str	r3, [r7, #16]
 800bfe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfe2:	693a      	ldr	r2, [r7, #16]
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d3e5      	bcc.n	800bfb4 <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	2200      	movs	r2, #0
 800bfec:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	f04f 32ff 	mov.w	r2, #4294967295
 800bff4:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d00b      	beq.n	800c01a <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c008:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	4a13      	ldr	r2, [pc, #76]	; (800c05c <USB_HostInit+0x154>)
 800c00e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	4a13      	ldr	r2, [pc, #76]	; (800c060 <USB_HostInit+0x158>)
 800c014:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c018:	e009      	b.n	800c02e <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2280      	movs	r2, #128	; 0x80
 800c01e:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	4a10      	ldr	r2, [pc, #64]	; (800c064 <USB_HostInit+0x15c>)
 800c024:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	4a0f      	ldr	r2, [pc, #60]	; (800c068 <USB_HostInit+0x160>)
 800c02a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c02e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c030:	2b00      	cmp	r3, #0
 800c032:	d105      	bne.n	800c040 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	699b      	ldr	r3, [r3, #24]
 800c038:	f043 0210 	orr.w	r2, r3, #16
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	699a      	ldr	r2, [r3, #24]
 800c044:	4b09      	ldr	r3, [pc, #36]	; (800c06c <USB_HostInit+0x164>)
 800c046:	4313      	orrs	r3, r2
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c04c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c04e:	4618      	mov	r0, r3
 800c050:	3718      	adds	r7, #24
 800c052:	46bd      	mov	sp, r7
 800c054:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c058:	b004      	add	sp, #16
 800c05a:	4770      	bx	lr
 800c05c:	01000200 	.word	0x01000200
 800c060:	00e00300 	.word	0x00e00300
 800c064:	00600080 	.word	0x00600080
 800c068:	004000e0 	.word	0x004000e0
 800c06c:	a3200008 	.word	0xa3200008

0800c070 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c070:	b480      	push	{r7}
 800c072:	b085      	sub	sp, #20
 800c074:	af00      	add	r7, sp, #0
 800c076:	6078      	str	r0, [r7, #4]
 800c078:	460b      	mov	r3, r1
 800c07a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c08e:	f023 0303 	bic.w	r3, r3, #3
 800c092:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c09a:	681a      	ldr	r2, [r3, #0]
 800c09c:	78fb      	ldrb	r3, [r7, #3]
 800c09e:	f003 0303 	and.w	r3, r3, #3
 800c0a2:	68f9      	ldr	r1, [r7, #12]
 800c0a4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c0a8:	4313      	orrs	r3, r2
 800c0aa:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c0ac:	78fb      	ldrb	r3, [r7, #3]
 800c0ae:	2b01      	cmp	r3, #1
 800c0b0:	d107      	bne.n	800c0c2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0b8:	461a      	mov	r2, r3
 800c0ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c0be:	6053      	str	r3, [r2, #4]
 800c0c0:	e009      	b.n	800c0d6 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c0c2:	78fb      	ldrb	r3, [r7, #3]
 800c0c4:	2b02      	cmp	r3, #2
 800c0c6:	d106      	bne.n	800c0d6 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c0c8:	68fb      	ldr	r3, [r7, #12]
 800c0ca:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c0ce:	461a      	mov	r2, r3
 800c0d0:	f241 7370 	movw	r3, #6000	; 0x1770
 800c0d4:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c0d6:	2300      	movs	r3, #0
}
 800c0d8:	4618      	mov	r0, r3
 800c0da:	3714      	adds	r7, #20
 800c0dc:	46bd      	mov	sp, r7
 800c0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0e2:	4770      	bx	lr

0800c0e4 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c0e4:	b580      	push	{r7, lr}
 800c0e6:	b084      	sub	sp, #16
 800c0e8:	af00      	add	r7, sp, #0
 800c0ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c0f0:	2300      	movs	r3, #0
 800c0f2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c0fe:	68bb      	ldr	r3, [r7, #8]
 800c100:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c104:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c10e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c112:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c114:	2064      	movs	r0, #100	; 0x64
 800c116:	f7f5 ffdd 	bl	80020d4 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c11a:	68bb      	ldr	r3, [r7, #8]
 800c11c:	68fa      	ldr	r2, [r7, #12]
 800c11e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c122:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c126:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c128:	200a      	movs	r0, #10
 800c12a:	f7f5 ffd3 	bl	80020d4 <HAL_Delay>

  return HAL_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3710      	adds	r7, #16
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	6078      	str	r0, [r7, #4]
 800c140:	460b      	mov	r3, r1
 800c142:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c148:	2300      	movs	r3, #0
 800c14a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c156:	68bb      	ldr	r3, [r7, #8]
 800c158:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c15c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c15e:	68bb      	ldr	r3, [r7, #8]
 800c160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c164:	2b00      	cmp	r3, #0
 800c166:	d109      	bne.n	800c17c <USB_DriveVbus+0x44>
 800c168:	78fb      	ldrb	r3, [r7, #3]
 800c16a:	2b01      	cmp	r3, #1
 800c16c:	d106      	bne.n	800c17c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c16e:	68bb      	ldr	r3, [r7, #8]
 800c170:	68fa      	ldr	r2, [r7, #12]
 800c172:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c176:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c17a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c17c:	68bb      	ldr	r3, [r7, #8]
 800c17e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c186:	d109      	bne.n	800c19c <USB_DriveVbus+0x64>
 800c188:	78fb      	ldrb	r3, [r7, #3]
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d106      	bne.n	800c19c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c18e:	68bb      	ldr	r3, [r7, #8]
 800c190:	68fa      	ldr	r2, [r7, #12]
 800c192:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c196:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c19a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c19c:	2300      	movs	r3, #0
}
 800c19e:	4618      	mov	r0, r3
 800c1a0:	3714      	adds	r7, #20
 800c1a2:	46bd      	mov	sp, r7
 800c1a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a8:	4770      	bx	lr

0800c1aa <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c1aa:	b480      	push	{r7}
 800c1ac:	b085      	sub	sp, #20
 800c1ae:	af00      	add	r7, sp, #0
 800c1b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c1c0:	681b      	ldr	r3, [r3, #0]
 800c1c2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c1c4:	68bb      	ldr	r3, [r7, #8]
 800c1c6:	0c5b      	lsrs	r3, r3, #17
 800c1c8:	f003 0303 	and.w	r3, r3, #3
}
 800c1cc:	4618      	mov	r0, r3
 800c1ce:	3714      	adds	r7, #20
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d6:	4770      	bx	lr

0800c1d8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c1ea:	689b      	ldr	r3, [r3, #8]
 800c1ec:	b29b      	uxth	r3, r3
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3714      	adds	r7, #20
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f8:	4770      	bx	lr
	...

0800c1fc <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b088      	sub	sp, #32
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	4608      	mov	r0, r1
 800c206:	4611      	mov	r1, r2
 800c208:	461a      	mov	r2, r3
 800c20a:	4603      	mov	r3, r0
 800c20c:	70fb      	strb	r3, [r7, #3]
 800c20e:	460b      	mov	r3, r1
 800c210:	70bb      	strb	r3, [r7, #2]
 800c212:	4613      	mov	r3, r2
 800c214:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c216:	2300      	movs	r3, #0
 800c218:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c21e:	78fb      	ldrb	r3, [r7, #3]
 800c220:	015a      	lsls	r2, r3, #5
 800c222:	693b      	ldr	r3, [r7, #16]
 800c224:	4413      	add	r3, r2
 800c226:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c22a:	461a      	mov	r2, r3
 800c22c:	f04f 33ff 	mov.w	r3, #4294967295
 800c230:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c232:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c236:	2b03      	cmp	r3, #3
 800c238:	d87e      	bhi.n	800c338 <USB_HC_Init+0x13c>
 800c23a:	a201      	add	r2, pc, #4	; (adr r2, 800c240 <USB_HC_Init+0x44>)
 800c23c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c240:	0800c251 	.word	0x0800c251
 800c244:	0800c2fb 	.word	0x0800c2fb
 800c248:	0800c251 	.word	0x0800c251
 800c24c:	0800c2bd 	.word	0x0800c2bd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c250:	78fb      	ldrb	r3, [r7, #3]
 800c252:	015a      	lsls	r2, r3, #5
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	4413      	add	r3, r2
 800c258:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c25c:	461a      	mov	r2, r3
 800c25e:	f240 439d 	movw	r3, #1181	; 0x49d
 800c262:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c264:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	da10      	bge.n	800c28e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c26c:	78fb      	ldrb	r3, [r7, #3]
 800c26e:	015a      	lsls	r2, r3, #5
 800c270:	693b      	ldr	r3, [r7, #16]
 800c272:	4413      	add	r3, r2
 800c274:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c278:	68db      	ldr	r3, [r3, #12]
 800c27a:	78fa      	ldrb	r2, [r7, #3]
 800c27c:	0151      	lsls	r1, r2, #5
 800c27e:	693a      	ldr	r2, [r7, #16]
 800c280:	440a      	add	r2, r1
 800c282:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c28a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c28c:	e057      	b.n	800c33e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c296:	2b00      	cmp	r3, #0
 800c298:	d051      	beq.n	800c33e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c29a:	78fb      	ldrb	r3, [r7, #3]
 800c29c:	015a      	lsls	r2, r3, #5
 800c29e:	693b      	ldr	r3, [r7, #16]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2a6:	68db      	ldr	r3, [r3, #12]
 800c2a8:	78fa      	ldrb	r2, [r7, #3]
 800c2aa:	0151      	lsls	r1, r2, #5
 800c2ac:	693a      	ldr	r2, [r7, #16]
 800c2ae:	440a      	add	r2, r1
 800c2b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2b4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c2b8:	60d3      	str	r3, [r2, #12]
      break;
 800c2ba:	e040      	b.n	800c33e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c2bc:	78fb      	ldrb	r3, [r7, #3]
 800c2be:	015a      	lsls	r2, r3, #5
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	4413      	add	r3, r2
 800c2c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2c8:	461a      	mov	r2, r3
 800c2ca:	f240 639d 	movw	r3, #1693	; 0x69d
 800c2ce:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c2d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	da34      	bge.n	800c342 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c2d8:	78fb      	ldrb	r3, [r7, #3]
 800c2da:	015a      	lsls	r2, r3, #5
 800c2dc:	693b      	ldr	r3, [r7, #16]
 800c2de:	4413      	add	r3, r2
 800c2e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c2e4:	68db      	ldr	r3, [r3, #12]
 800c2e6:	78fa      	ldrb	r2, [r7, #3]
 800c2e8:	0151      	lsls	r1, r2, #5
 800c2ea:	693a      	ldr	r2, [r7, #16]
 800c2ec:	440a      	add	r2, r1
 800c2ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c2f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c2f6:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c2f8:	e023      	b.n	800c342 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c2fa:	78fb      	ldrb	r3, [r7, #3]
 800c2fc:	015a      	lsls	r2, r3, #5
 800c2fe:	693b      	ldr	r3, [r7, #16]
 800c300:	4413      	add	r3, r2
 800c302:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c306:	461a      	mov	r2, r3
 800c308:	f240 2325 	movw	r3, #549	; 0x225
 800c30c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c30e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c312:	2b00      	cmp	r3, #0
 800c314:	da17      	bge.n	800c346 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c316:	78fb      	ldrb	r3, [r7, #3]
 800c318:	015a      	lsls	r2, r3, #5
 800c31a:	693b      	ldr	r3, [r7, #16]
 800c31c:	4413      	add	r3, r2
 800c31e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c322:	68db      	ldr	r3, [r3, #12]
 800c324:	78fa      	ldrb	r2, [r7, #3]
 800c326:	0151      	lsls	r1, r2, #5
 800c328:	693a      	ldr	r2, [r7, #16]
 800c32a:	440a      	add	r2, r1
 800c32c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c330:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c334:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c336:	e006      	b.n	800c346 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c338:	2301      	movs	r3, #1
 800c33a:	77fb      	strb	r3, [r7, #31]
      break;
 800c33c:	e004      	b.n	800c348 <USB_HC_Init+0x14c>
      break;
 800c33e:	bf00      	nop
 800c340:	e002      	b.n	800c348 <USB_HC_Init+0x14c>
      break;
 800c342:	bf00      	nop
 800c344:	e000      	b.n	800c348 <USB_HC_Init+0x14c>
      break;
 800c346:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c348:	78fb      	ldrb	r3, [r7, #3]
 800c34a:	015a      	lsls	r2, r3, #5
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	4413      	add	r3, r2
 800c350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c354:	68db      	ldr	r3, [r3, #12]
 800c356:	78fa      	ldrb	r2, [r7, #3]
 800c358:	0151      	lsls	r1, r2, #5
 800c35a:	693a      	ldr	r2, [r7, #16]
 800c35c:	440a      	add	r2, r1
 800c35e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c362:	f043 0302 	orr.w	r3, r3, #2
 800c366:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c368:	693b      	ldr	r3, [r7, #16]
 800c36a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c36e:	699a      	ldr	r2, [r3, #24]
 800c370:	78fb      	ldrb	r3, [r7, #3]
 800c372:	f003 030f 	and.w	r3, r3, #15
 800c376:	2101      	movs	r1, #1
 800c378:	fa01 f303 	lsl.w	r3, r1, r3
 800c37c:	6939      	ldr	r1, [r7, #16]
 800c37e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c382:	4313      	orrs	r3, r2
 800c384:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	699b      	ldr	r3, [r3, #24]
 800c38a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c392:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c396:	2b00      	cmp	r3, #0
 800c398:	da03      	bge.n	800c3a2 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c39a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c39e:	61bb      	str	r3, [r7, #24]
 800c3a0:	e001      	b.n	800c3a6 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c3a2:	2300      	movs	r3, #0
 800c3a4:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f7ff feff 	bl	800c1aa <USB_GetHostSpeed>
 800c3ac:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c3ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c3b2:	2b02      	cmp	r3, #2
 800c3b4:	d106      	bne.n	800c3c4 <USB_HC_Init+0x1c8>
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	2b02      	cmp	r3, #2
 800c3ba:	d003      	beq.n	800c3c4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c3bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c3c0:	617b      	str	r3, [r7, #20]
 800c3c2:	e001      	b.n	800c3c8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c3c8:	787b      	ldrb	r3, [r7, #1]
 800c3ca:	059b      	lsls	r3, r3, #22
 800c3cc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c3d0:	78bb      	ldrb	r3, [r7, #2]
 800c3d2:	02db      	lsls	r3, r3, #11
 800c3d4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c3d8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c3da:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c3de:	049b      	lsls	r3, r3, #18
 800c3e0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c3e4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c3e6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c3e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c3ec:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c3ee:	69bb      	ldr	r3, [r7, #24]
 800c3f0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c3f2:	78fb      	ldrb	r3, [r7, #3]
 800c3f4:	0159      	lsls	r1, r3, #5
 800c3f6:	693b      	ldr	r3, [r7, #16]
 800c3f8:	440b      	add	r3, r1
 800c3fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c3fe:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c400:	697b      	ldr	r3, [r7, #20]
 800c402:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c404:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c406:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c40a:	2b03      	cmp	r3, #3
 800c40c:	d003      	beq.n	800c416 <USB_HC_Init+0x21a>
 800c40e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c412:	2b01      	cmp	r3, #1
 800c414:	d10f      	bne.n	800c436 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c416:	78fb      	ldrb	r3, [r7, #3]
 800c418:	015a      	lsls	r2, r3, #5
 800c41a:	693b      	ldr	r3, [r7, #16]
 800c41c:	4413      	add	r3, r2
 800c41e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	78fa      	ldrb	r2, [r7, #3]
 800c426:	0151      	lsls	r1, r2, #5
 800c428:	693a      	ldr	r2, [r7, #16]
 800c42a:	440a      	add	r2, r1
 800c42c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c430:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c434:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c436:	7ffb      	ldrb	r3, [r7, #31]
}
 800c438:	4618      	mov	r0, r3
 800c43a:	3720      	adds	r7, #32
 800c43c:	46bd      	mov	sp, r7
 800c43e:	bd80      	pop	{r7, pc}

0800c440 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c440:	b580      	push	{r7, lr}
 800c442:	b08c      	sub	sp, #48	; 0x30
 800c444:	af02      	add	r7, sp, #8
 800c446:	60f8      	str	r0, [r7, #12]
 800c448:	60b9      	str	r1, [r7, #8]
 800c44a:	4613      	mov	r3, r2
 800c44c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c452:	68bb      	ldr	r3, [r7, #8]
 800c454:	785b      	ldrb	r3, [r3, #1]
 800c456:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c458:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c45c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c45e:	68fb      	ldr	r3, [r7, #12]
 800c460:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c466:	2b00      	cmp	r3, #0
 800c468:	d02d      	beq.n	800c4c6 <USB_HC_StartXfer+0x86>
 800c46a:	68bb      	ldr	r3, [r7, #8]
 800c46c:	791b      	ldrb	r3, [r3, #4]
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d129      	bne.n	800c4c6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c472:	79fb      	ldrb	r3, [r7, #7]
 800c474:	2b01      	cmp	r3, #1
 800c476:	d117      	bne.n	800c4a8 <USB_HC_StartXfer+0x68>
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	79db      	ldrb	r3, [r3, #7]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d003      	beq.n	800c488 <USB_HC_StartXfer+0x48>
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	79db      	ldrb	r3, [r3, #7]
 800c484:	2b02      	cmp	r3, #2
 800c486:	d10f      	bne.n	800c4a8 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c488:	69fb      	ldr	r3, [r7, #28]
 800c48a:	015a      	lsls	r2, r3, #5
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	4413      	add	r3, r2
 800c490:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c494:	68db      	ldr	r3, [r3, #12]
 800c496:	69fa      	ldr	r2, [r7, #28]
 800c498:	0151      	lsls	r1, r2, #5
 800c49a:	6a3a      	ldr	r2, [r7, #32]
 800c49c:	440a      	add	r2, r1
 800c49e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c4a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4a6:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c4a8:	79fb      	ldrb	r3, [r7, #7]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10b      	bne.n	800c4c6 <USB_HC_StartXfer+0x86>
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	795b      	ldrb	r3, [r3, #5]
 800c4b2:	2b01      	cmp	r3, #1
 800c4b4:	d107      	bne.n	800c4c6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c4b6:	68bb      	ldr	r3, [r7, #8]
 800c4b8:	785b      	ldrb	r3, [r3, #1]
 800c4ba:	4619      	mov	r1, r3
 800c4bc:	68f8      	ldr	r0, [r7, #12]
 800c4be:	f000 fa0f 	bl	800c8e0 <USB_DoPing>
      return HAL_OK;
 800c4c2:	2300      	movs	r3, #0
 800c4c4:	e0f8      	b.n	800c6b8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c4c6:	68bb      	ldr	r3, [r7, #8]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d018      	beq.n	800c500 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c4ce:	68bb      	ldr	r3, [r7, #8]
 800c4d0:	695b      	ldr	r3, [r3, #20]
 800c4d2:	68ba      	ldr	r2, [r7, #8]
 800c4d4:	8912      	ldrh	r2, [r2, #8]
 800c4d6:	4413      	add	r3, r2
 800c4d8:	3b01      	subs	r3, #1
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	8912      	ldrh	r2, [r2, #8]
 800c4de:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4e2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c4e4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c4e6:	8b7b      	ldrh	r3, [r7, #26]
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d90b      	bls.n	800c504 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c4ec:	8b7b      	ldrh	r3, [r7, #26]
 800c4ee:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c4f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c4f2:	68ba      	ldr	r2, [r7, #8]
 800c4f4:	8912      	ldrh	r2, [r2, #8]
 800c4f6:	fb03 f202 	mul.w	r2, r3, r2
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	611a      	str	r2, [r3, #16]
 800c4fe:	e001      	b.n	800c504 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c500:	2301      	movs	r3, #1
 800c502:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	78db      	ldrb	r3, [r3, #3]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d007      	beq.n	800c51c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c50c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c50e:	68ba      	ldr	r2, [r7, #8]
 800c510:	8912      	ldrh	r2, [r2, #8]
 800c512:	fb03 f202 	mul.w	r2, r3, r2
 800c516:	68bb      	ldr	r3, [r7, #8]
 800c518:	611a      	str	r2, [r3, #16]
 800c51a:	e003      	b.n	800c524 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	695a      	ldr	r2, [r3, #20]
 800c520:	68bb      	ldr	r3, [r7, #8]
 800c522:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c524:	68bb      	ldr	r3, [r7, #8]
 800c526:	691b      	ldr	r3, [r3, #16]
 800c528:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c52c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c52e:	04d9      	lsls	r1, r3, #19
 800c530:	4b63      	ldr	r3, [pc, #396]	; (800c6c0 <USB_HC_StartXfer+0x280>)
 800c532:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c534:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c536:	68bb      	ldr	r3, [r7, #8]
 800c538:	7a9b      	ldrb	r3, [r3, #10]
 800c53a:	075b      	lsls	r3, r3, #29
 800c53c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c540:	69f9      	ldr	r1, [r7, #28]
 800c542:	0148      	lsls	r0, r1, #5
 800c544:	6a39      	ldr	r1, [r7, #32]
 800c546:	4401      	add	r1, r0
 800c548:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c54c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c54e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	2b00      	cmp	r3, #0
 800c554:	d009      	beq.n	800c56a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c556:	68bb      	ldr	r3, [r7, #8]
 800c558:	68d9      	ldr	r1, [r3, #12]
 800c55a:	69fb      	ldr	r3, [r7, #28]
 800c55c:	015a      	lsls	r2, r3, #5
 800c55e:	6a3b      	ldr	r3, [r7, #32]
 800c560:	4413      	add	r3, r2
 800c562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c566:	460a      	mov	r2, r1
 800c568:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c56a:	6a3b      	ldr	r3, [r7, #32]
 800c56c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c570:	689b      	ldr	r3, [r3, #8]
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	bf0c      	ite	eq
 800c57a:	2301      	moveq	r3, #1
 800c57c:	2300      	movne	r3, #0
 800c57e:	b2db      	uxtb	r3, r3
 800c580:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	015a      	lsls	r2, r3, #5
 800c586:	6a3b      	ldr	r3, [r7, #32]
 800c588:	4413      	add	r3, r2
 800c58a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	69fa      	ldr	r2, [r7, #28]
 800c592:	0151      	lsls	r1, r2, #5
 800c594:	6a3a      	ldr	r2, [r7, #32]
 800c596:	440a      	add	r2, r1
 800c598:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c59c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c5a0:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c5a2:	69fb      	ldr	r3, [r7, #28]
 800c5a4:	015a      	lsls	r2, r3, #5
 800c5a6:	6a3b      	ldr	r3, [r7, #32]
 800c5a8:	4413      	add	r3, r2
 800c5aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5ae:	681a      	ldr	r2, [r3, #0]
 800c5b0:	7e7b      	ldrb	r3, [r7, #25]
 800c5b2:	075b      	lsls	r3, r3, #29
 800c5b4:	69f9      	ldr	r1, [r7, #28]
 800c5b6:	0148      	lsls	r0, r1, #5
 800c5b8:	6a39      	ldr	r1, [r7, #32]
 800c5ba:	4401      	add	r1, r0
 800c5bc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c5c4:	69fb      	ldr	r3, [r7, #28]
 800c5c6:	015a      	lsls	r2, r3, #5
 800c5c8:	6a3b      	ldr	r3, [r7, #32]
 800c5ca:	4413      	add	r3, r2
 800c5cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c5d4:	693b      	ldr	r3, [r7, #16]
 800c5d6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c5da:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c5dc:	68bb      	ldr	r3, [r7, #8]
 800c5de:	78db      	ldrb	r3, [r3, #3]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d004      	beq.n	800c5ee <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c5e4:	693b      	ldr	r3, [r7, #16]
 800c5e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c5ea:	613b      	str	r3, [r7, #16]
 800c5ec:	e003      	b.n	800c5f6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c5ee:	693b      	ldr	r3, [r7, #16]
 800c5f0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c5f4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c5f6:	693b      	ldr	r3, [r7, #16]
 800c5f8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c5fc:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c5fe:	69fb      	ldr	r3, [r7, #28]
 800c600:	015a      	lsls	r2, r3, #5
 800c602:	6a3b      	ldr	r3, [r7, #32]
 800c604:	4413      	add	r3, r2
 800c606:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c60a:	461a      	mov	r2, r3
 800c60c:	693b      	ldr	r3, [r7, #16]
 800c60e:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	2b00      	cmp	r3, #0
 800c614:	d001      	beq.n	800c61a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c616:	2300      	movs	r3, #0
 800c618:	e04e      	b.n	800c6b8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	78db      	ldrb	r3, [r3, #3]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d149      	bne.n	800c6b6 <USB_HC_StartXfer+0x276>
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	695b      	ldr	r3, [r3, #20]
 800c626:	2b00      	cmp	r3, #0
 800c628:	d045      	beq.n	800c6b6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	79db      	ldrb	r3, [r3, #7]
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d830      	bhi.n	800c694 <USB_HC_StartXfer+0x254>
 800c632:	a201      	add	r2, pc, #4	; (adr r2, 800c638 <USB_HC_StartXfer+0x1f8>)
 800c634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c638:	0800c649 	.word	0x0800c649
 800c63c:	0800c66d 	.word	0x0800c66d
 800c640:	0800c649 	.word	0x0800c649
 800c644:	0800c66d 	.word	0x0800c66d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	695b      	ldr	r3, [r3, #20]
 800c64c:	3303      	adds	r3, #3
 800c64e:	089b      	lsrs	r3, r3, #2
 800c650:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c652:	8afa      	ldrh	r2, [r7, #22]
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c658:	b29b      	uxth	r3, r3
 800c65a:	429a      	cmp	r2, r3
 800c65c:	d91c      	bls.n	800c698 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	699b      	ldr	r3, [r3, #24]
 800c662:	f043 0220 	orr.w	r2, r3, #32
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	619a      	str	r2, [r3, #24]
        }
        break;
 800c66a:	e015      	b.n	800c698 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	695b      	ldr	r3, [r3, #20]
 800c670:	3303      	adds	r3, #3
 800c672:	089b      	lsrs	r3, r3, #2
 800c674:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c676:	8afa      	ldrh	r2, [r7, #22]
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c67e:	691b      	ldr	r3, [r3, #16]
 800c680:	b29b      	uxth	r3, r3
 800c682:	429a      	cmp	r2, r3
 800c684:	d90a      	bls.n	800c69c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	699b      	ldr	r3, [r3, #24]
 800c68a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	619a      	str	r2, [r3, #24]
        }
        break;
 800c692:	e003      	b.n	800c69c <USB_HC_StartXfer+0x25c>

      default:
        break;
 800c694:	bf00      	nop
 800c696:	e002      	b.n	800c69e <USB_HC_StartXfer+0x25e>
        break;
 800c698:	bf00      	nop
 800c69a:	e000      	b.n	800c69e <USB_HC_StartXfer+0x25e>
        break;
 800c69c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c69e:	68bb      	ldr	r3, [r7, #8]
 800c6a0:	68d9      	ldr	r1, [r3, #12]
 800c6a2:	68bb      	ldr	r3, [r7, #8]
 800c6a4:	785a      	ldrb	r2, [r3, #1]
 800c6a6:	68bb      	ldr	r3, [r7, #8]
 800c6a8:	695b      	ldr	r3, [r3, #20]
 800c6aa:	b29b      	uxth	r3, r3
 800c6ac:	2000      	movs	r0, #0
 800c6ae:	9000      	str	r0, [sp, #0]
 800c6b0:	68f8      	ldr	r0, [r7, #12]
 800c6b2:	f7ff f8df 	bl	800b874 <USB_WritePacket>
  }

  return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
}
 800c6b8:	4618      	mov	r0, r3
 800c6ba:	3728      	adds	r7, #40	; 0x28
 800c6bc:	46bd      	mov	sp, r7
 800c6be:	bd80      	pop	{r7, pc}
 800c6c0:	1ff80000 	.word	0x1ff80000

0800c6c4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c6c4:	b480      	push	{r7}
 800c6c6:	b085      	sub	sp, #20
 800c6c8:	af00      	add	r7, sp, #0
 800c6ca:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c6d6:	695b      	ldr	r3, [r3, #20]
 800c6d8:	b29b      	uxth	r3, r3
}
 800c6da:	4618      	mov	r0, r3
 800c6dc:	3714      	adds	r7, #20
 800c6de:	46bd      	mov	sp, r7
 800c6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e4:	4770      	bx	lr

0800c6e6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c6e6:	b480      	push	{r7}
 800c6e8:	b089      	sub	sp, #36	; 0x24
 800c6ea:	af00      	add	r7, sp, #0
 800c6ec:	6078      	str	r0, [r7, #4]
 800c6ee:	460b      	mov	r3, r1
 800c6f0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c6f6:	78fb      	ldrb	r3, [r7, #3]
 800c6f8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c6fe:	69bb      	ldr	r3, [r7, #24]
 800c700:	015a      	lsls	r2, r3, #5
 800c702:	69fb      	ldr	r3, [r7, #28]
 800c704:	4413      	add	r3, r2
 800c706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c70a:	681b      	ldr	r3, [r3, #0]
 800c70c:	0c9b      	lsrs	r3, r3, #18
 800c70e:	f003 0303 	and.w	r3, r3, #3
 800c712:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c714:	69bb      	ldr	r3, [r7, #24]
 800c716:	015a      	lsls	r2, r3, #5
 800c718:	69fb      	ldr	r3, [r7, #28]
 800c71a:	4413      	add	r3, r2
 800c71c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	0fdb      	lsrs	r3, r3, #31
 800c724:	f003 0301 	and.w	r3, r3, #1
 800c728:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	f003 0320 	and.w	r3, r3, #32
 800c732:	2b20      	cmp	r3, #32
 800c734:	d104      	bne.n	800c740 <USB_HC_Halt+0x5a>
 800c736:	693b      	ldr	r3, [r7, #16]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d101      	bne.n	800c740 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800c73c:	2300      	movs	r3, #0
 800c73e:	e0c8      	b.n	800c8d2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c740:	697b      	ldr	r3, [r7, #20]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <USB_HC_Halt+0x66>
 800c746:	697b      	ldr	r3, [r7, #20]
 800c748:	2b02      	cmp	r3, #2
 800c74a:	d163      	bne.n	800c814 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c74c:	69bb      	ldr	r3, [r7, #24]
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	4413      	add	r3, r2
 800c754:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	69ba      	ldr	r2, [r7, #24]
 800c75c:	0151      	lsls	r1, r2, #5
 800c75e:	69fa      	ldr	r2, [r7, #28]
 800c760:	440a      	add	r2, r1
 800c762:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c766:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c76a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	689b      	ldr	r3, [r3, #8]
 800c770:	f003 0320 	and.w	r3, r3, #32
 800c774:	2b00      	cmp	r3, #0
 800c776:	f040 80ab 	bne.w	800c8d0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c77e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c782:	2b00      	cmp	r3, #0
 800c784:	d133      	bne.n	800c7ee <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	015a      	lsls	r2, r3, #5
 800c78a:	69fb      	ldr	r3, [r7, #28]
 800c78c:	4413      	add	r3, r2
 800c78e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	69ba      	ldr	r2, [r7, #24]
 800c796:	0151      	lsls	r1, r2, #5
 800c798:	69fa      	ldr	r2, [r7, #28]
 800c79a:	440a      	add	r2, r1
 800c79c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c7a4:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c7a6:	69bb      	ldr	r3, [r7, #24]
 800c7a8:	015a      	lsls	r2, r3, #5
 800c7aa:	69fb      	ldr	r3, [r7, #28]
 800c7ac:	4413      	add	r3, r2
 800c7ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	69ba      	ldr	r2, [r7, #24]
 800c7b6:	0151      	lsls	r1, r2, #5
 800c7b8:	69fa      	ldr	r2, [r7, #28]
 800c7ba:	440a      	add	r2, r1
 800c7bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c7c4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	3301      	adds	r3, #1
 800c7ca:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c7d2:	d81d      	bhi.n	800c810 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c7d4:	69bb      	ldr	r3, [r7, #24]
 800c7d6:	015a      	lsls	r2, r3, #5
 800c7d8:	69fb      	ldr	r3, [r7, #28]
 800c7da:	4413      	add	r3, r2
 800c7dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c7e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c7ea:	d0ec      	beq.n	800c7c6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c7ec:	e070      	b.n	800c8d0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c7ee:	69bb      	ldr	r3, [r7, #24]
 800c7f0:	015a      	lsls	r2, r3, #5
 800c7f2:	69fb      	ldr	r3, [r7, #28]
 800c7f4:	4413      	add	r3, r2
 800c7f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7fa:	681b      	ldr	r3, [r3, #0]
 800c7fc:	69ba      	ldr	r2, [r7, #24]
 800c7fe:	0151      	lsls	r1, r2, #5
 800c800:	69fa      	ldr	r2, [r7, #28]
 800c802:	440a      	add	r2, r1
 800c804:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c808:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c80c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c80e:	e05f      	b.n	800c8d0 <USB_HC_Halt+0x1ea>
            break;
 800c810:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c812:	e05d      	b.n	800c8d0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c814:	69bb      	ldr	r3, [r7, #24]
 800c816:	015a      	lsls	r2, r3, #5
 800c818:	69fb      	ldr	r3, [r7, #28]
 800c81a:	4413      	add	r3, r2
 800c81c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	69ba      	ldr	r2, [r7, #24]
 800c824:	0151      	lsls	r1, r2, #5
 800c826:	69fa      	ldr	r2, [r7, #28]
 800c828:	440a      	add	r2, r1
 800c82a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c82e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c832:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c83a:	691b      	ldr	r3, [r3, #16]
 800c83c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800c840:	2b00      	cmp	r3, #0
 800c842:	d133      	bne.n	800c8ac <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	015a      	lsls	r2, r3, #5
 800c848:	69fb      	ldr	r3, [r7, #28]
 800c84a:	4413      	add	r3, r2
 800c84c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	69ba      	ldr	r2, [r7, #24]
 800c854:	0151      	lsls	r1, r2, #5
 800c856:	69fa      	ldr	r2, [r7, #28]
 800c858:	440a      	add	r2, r1
 800c85a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c85e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c862:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c864:	69bb      	ldr	r3, [r7, #24]
 800c866:	015a      	lsls	r2, r3, #5
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	4413      	add	r3, r2
 800c86c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	69ba      	ldr	r2, [r7, #24]
 800c874:	0151      	lsls	r1, r2, #5
 800c876:	69fa      	ldr	r2, [r7, #28]
 800c878:	440a      	add	r2, r1
 800c87a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c87e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c882:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800c884:	68fb      	ldr	r3, [r7, #12]
 800c886:	3301      	adds	r3, #1
 800c888:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c890:	d81d      	bhi.n	800c8ce <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c892:	69bb      	ldr	r3, [r7, #24]
 800c894:	015a      	lsls	r2, r3, #5
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	4413      	add	r3, r2
 800c89a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c8a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c8a8:	d0ec      	beq.n	800c884 <USB_HC_Halt+0x19e>
 800c8aa:	e011      	b.n	800c8d0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c8ac:	69bb      	ldr	r3, [r7, #24]
 800c8ae:	015a      	lsls	r2, r3, #5
 800c8b0:	69fb      	ldr	r3, [r7, #28]
 800c8b2:	4413      	add	r3, r2
 800c8b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	69ba      	ldr	r2, [r7, #24]
 800c8bc:	0151      	lsls	r1, r2, #5
 800c8be:	69fa      	ldr	r2, [r7, #28]
 800c8c0:	440a      	add	r2, r1
 800c8c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c8c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c8ca:	6013      	str	r3, [r2, #0]
 800c8cc:	e000      	b.n	800c8d0 <USB_HC_Halt+0x1ea>
          break;
 800c8ce:	bf00      	nop
    }
  }

  return HAL_OK;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3724      	adds	r7, #36	; 0x24
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8dc:	4770      	bx	lr
	...

0800c8e0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800c8e0:	b480      	push	{r7}
 800c8e2:	b087      	sub	sp, #28
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	460b      	mov	r3, r1
 800c8ea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800c8f0:	78fb      	ldrb	r3, [r7, #3]
 800c8f2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c8f8:	68fb      	ldr	r3, [r7, #12]
 800c8fa:	04da      	lsls	r2, r3, #19
 800c8fc:	4b15      	ldr	r3, [pc, #84]	; (800c954 <USB_DoPing+0x74>)
 800c8fe:	4013      	ands	r3, r2
 800c900:	693a      	ldr	r2, [r7, #16]
 800c902:	0151      	lsls	r1, r2, #5
 800c904:	697a      	ldr	r2, [r7, #20]
 800c906:	440a      	add	r2, r1
 800c908:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c90c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c910:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800c912:	693b      	ldr	r3, [r7, #16]
 800c914:	015a      	lsls	r2, r3, #5
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	4413      	add	r3, r2
 800c91a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c922:	68bb      	ldr	r3, [r7, #8]
 800c924:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c928:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c92a:	68bb      	ldr	r3, [r7, #8]
 800c92c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c930:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	015a      	lsls	r2, r3, #5
 800c936:	697b      	ldr	r3, [r7, #20]
 800c938:	4413      	add	r3, r2
 800c93a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c93e:	461a      	mov	r2, r3
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800c944:	2300      	movs	r3, #0
}
 800c946:	4618      	mov	r0, r3
 800c948:	371c      	adds	r7, #28
 800c94a:	46bd      	mov	sp, r7
 800c94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c950:	4770      	bx	lr
 800c952:	bf00      	nop
 800c954:	1ff80000 	.word	0x1ff80000

0800c958 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b088      	sub	sp, #32
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800c960:	2300      	movs	r3, #0
 800c962:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800c968:	2300      	movs	r3, #0
 800c96a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f7fd ff6a 	bl	800a846 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c972:	2110      	movs	r1, #16
 800c974:	6878      	ldr	r0, [r7, #4]
 800c976:	f7fe f921 	bl	800abbc <USB_FlushTxFifo>
 800c97a:	4603      	mov	r3, r0
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d001      	beq.n	800c984 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800c980:	2301      	movs	r3, #1
 800c982:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c984:	6878      	ldr	r0, [r7, #4]
 800c986:	f7fe f94d 	bl	800ac24 <USB_FlushRxFifo>
 800c98a:	4603      	mov	r3, r0
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d001      	beq.n	800c994 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800c990:	2301      	movs	r3, #1
 800c992:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800c994:	2300      	movs	r3, #0
 800c996:	61bb      	str	r3, [r7, #24]
 800c998:	e01f      	b.n	800c9da <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800c99a:	69bb      	ldr	r3, [r7, #24]
 800c99c:	015a      	lsls	r2, r3, #5
 800c99e:	697b      	ldr	r3, [r7, #20]
 800c9a0:	4413      	add	r3, r2
 800c9a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800c9aa:	693b      	ldr	r3, [r7, #16]
 800c9ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9b0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800c9b2:	693b      	ldr	r3, [r7, #16]
 800c9b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c9b8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800c9ba:	693b      	ldr	r3, [r7, #16]
 800c9bc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c9c0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800c9c2:	69bb      	ldr	r3, [r7, #24]
 800c9c4:	015a      	lsls	r2, r3, #5
 800c9c6:	697b      	ldr	r3, [r7, #20]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9ce:	461a      	mov	r2, r3
 800c9d0:	693b      	ldr	r3, [r7, #16]
 800c9d2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800c9d4:	69bb      	ldr	r3, [r7, #24]
 800c9d6:	3301      	adds	r3, #1
 800c9d8:	61bb      	str	r3, [r7, #24]
 800c9da:	69bb      	ldr	r3, [r7, #24]
 800c9dc:	2b0f      	cmp	r3, #15
 800c9de:	d9dc      	bls.n	800c99a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800c9e0:	2300      	movs	r3, #0
 800c9e2:	61bb      	str	r3, [r7, #24]
 800c9e4:	e034      	b.n	800ca50 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	015a      	lsls	r2, r3, #5
 800c9ea:	697b      	ldr	r3, [r7, #20]
 800c9ec:	4413      	add	r3, r2
 800c9ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800c9f6:	693b      	ldr	r3, [r7, #16]
 800c9f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c9fc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800c9fe:	693b      	ldr	r3, [r7, #16]
 800ca00:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ca04:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800ca06:	693b      	ldr	r3, [r7, #16]
 800ca08:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800ca0c:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	015a      	lsls	r2, r3, #5
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	4413      	add	r3, r2
 800ca16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca1a:	461a      	mov	r2, r3
 800ca1c:	693b      	ldr	r3, [r7, #16]
 800ca1e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	3301      	adds	r3, #1
 800ca24:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ca2c:	d80c      	bhi.n	800ca48 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	015a      	lsls	r2, r3, #5
 800ca32:	697b      	ldr	r3, [r7, #20]
 800ca34:	4413      	add	r3, r2
 800ca36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ca40:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ca44:	d0ec      	beq.n	800ca20 <USB_StopHost+0xc8>
 800ca46:	e000      	b.n	800ca4a <USB_StopHost+0xf2>
        break;
 800ca48:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800ca4a:	69bb      	ldr	r3, [r7, #24]
 800ca4c:	3301      	adds	r3, #1
 800ca4e:	61bb      	str	r3, [r7, #24]
 800ca50:	69bb      	ldr	r3, [r7, #24]
 800ca52:	2b0f      	cmp	r3, #15
 800ca54:	d9c7      	bls.n	800c9e6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800ca56:	697b      	ldr	r3, [r7, #20]
 800ca58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca5c:	461a      	mov	r2, r3
 800ca5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ca62:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	f04f 32ff 	mov.w	r2, #4294967295
 800ca6a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ca6c:	6878      	ldr	r0, [r7, #4]
 800ca6e:	f7fd fed9 	bl	800a824 <USB_EnableGlobalInt>

  return ret;
 800ca72:	7ffb      	ldrb	r3, [r7, #31]
}
 800ca74:	4618      	mov	r0, r3
 800ca76:	3720      	adds	r7, #32
 800ca78:	46bd      	mov	sp, r7
 800ca7a:	bd80      	pop	{r7, pc}

0800ca7c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ca7c:	b580      	push	{r7, lr}
 800ca7e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ca80:	4904      	ldr	r1, [pc, #16]	; (800ca94 <MX_FATFS_Init+0x18>)
 800ca82:	4805      	ldr	r0, [pc, #20]	; (800ca98 <MX_FATFS_Init+0x1c>)
 800ca84:	f004 fe40 	bl	8011708 <FATFS_LinkDriver>
 800ca88:	4603      	mov	r3, r0
 800ca8a:	461a      	mov	r2, r3
 800ca8c:	4b03      	ldr	r3, [pc, #12]	; (800ca9c <MX_FATFS_Init+0x20>)
 800ca8e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ca90:	bf00      	nop
 800ca92:	bd80      	pop	{r7, pc}
 800ca94:	200016c4 	.word	0x200016c4
 800ca98:	08015334 	.word	0x08015334
 800ca9c:	200016c0 	.word	0x200016c0

0800caa0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800caaa:	f000 f86b 	bl	800cb84 <BSP_SD_IsDetected>
 800caae:	4603      	mov	r3, r0
 800cab0:	2b01      	cmp	r3, #1
 800cab2:	d001      	beq.n	800cab8 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800cab4:	2302      	movs	r3, #2
 800cab6:	e005      	b.n	800cac4 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800cab8:	4804      	ldr	r0, [pc, #16]	; (800cacc <BSP_SD_Init+0x2c>)
 800caba:	f7fa fc89 	bl	80073d0 <HAL_SD_Init>
 800cabe:	4603      	mov	r3, r0
 800cac0:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800cac2:	79fb      	ldrb	r3, [r7, #7]
}
 800cac4:	4618      	mov	r0, r3
 800cac6:	3708      	adds	r7, #8
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	200003c0 	.word	0x200003c0

0800cad0 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b088      	sub	sp, #32
 800cad4:	af02      	add	r7, sp, #8
 800cad6:	60f8      	str	r0, [r7, #12]
 800cad8:	60b9      	str	r1, [r7, #8]
 800cada:	607a      	str	r2, [r7, #4]
 800cadc:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cade:	2300      	movs	r3, #0
 800cae0:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cae2:	683b      	ldr	r3, [r7, #0]
 800cae4:	9300      	str	r3, [sp, #0]
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	68ba      	ldr	r2, [r7, #8]
 800caea:	68f9      	ldr	r1, [r7, #12]
 800caec:	4806      	ldr	r0, [pc, #24]	; (800cb08 <BSP_SD_ReadBlocks+0x38>)
 800caee:	f7fa fd27 	bl	8007540 <HAL_SD_ReadBlocks>
 800caf2:	4603      	mov	r3, r0
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d001      	beq.n	800cafc <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800caf8:	2301      	movs	r3, #1
 800cafa:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cafc:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafe:	4618      	mov	r0, r3
 800cb00:	3718      	adds	r7, #24
 800cb02:	46bd      	mov	sp, r7
 800cb04:	bd80      	pop	{r7, pc}
 800cb06:	bf00      	nop
 800cb08:	200003c0 	.word	0x200003c0

0800cb0c <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b088      	sub	sp, #32
 800cb10:	af02      	add	r7, sp, #8
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	9300      	str	r3, [sp, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	68ba      	ldr	r2, [r7, #8]
 800cb26:	68f9      	ldr	r1, [r7, #12]
 800cb28:	4806      	ldr	r0, [pc, #24]	; (800cb44 <BSP_SD_WriteBlocks+0x38>)
 800cb2a:	f7fa fee7 	bl	80078fc <HAL_SD_WriteBlocks>
 800cb2e:	4603      	mov	r3, r0
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d001      	beq.n	800cb38 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800cb38:	7dfb      	ldrb	r3, [r7, #23]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3718      	adds	r7, #24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	bd80      	pop	{r7, pc}
 800cb42:	bf00      	nop
 800cb44:	200003c0 	.word	0x200003c0

0800cb48 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cb4c:	4805      	ldr	r0, [pc, #20]	; (800cb64 <BSP_SD_GetCardState+0x1c>)
 800cb4e:	f7fb fa2b 	bl	8007fa8 <HAL_SD_GetCardState>
 800cb52:	4603      	mov	r3, r0
 800cb54:	2b04      	cmp	r3, #4
 800cb56:	bf14      	ite	ne
 800cb58:	2301      	movne	r3, #1
 800cb5a:	2300      	moveq	r3, #0
 800cb5c:	b2db      	uxtb	r3, r3
}
 800cb5e:	4618      	mov	r0, r3
 800cb60:	bd80      	pop	{r7, pc}
 800cb62:	bf00      	nop
 800cb64:	200003c0 	.word	0x200003c0

0800cb68 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
 800cb6e:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cb70:	6879      	ldr	r1, [r7, #4]
 800cb72:	4803      	ldr	r0, [pc, #12]	; (800cb80 <BSP_SD_GetCardInfo+0x18>)
 800cb74:	f7fb f9ec 	bl	8007f50 <HAL_SD_GetCardInfo>
}
 800cb78:	bf00      	nop
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}
 800cb80:	200003c0 	.word	0x200003c0

0800cb84 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cb84:	b580      	push	{r7, lr}
 800cb86:	b082      	sub	sp, #8
 800cb88:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cb8a:	2301      	movs	r3, #1
 800cb8c:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cb8e:	f000 f80b 	bl	800cba8 <BSP_PlatformIsDetected>
 800cb92:	4603      	mov	r3, r0
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d101      	bne.n	800cb9c <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cb98:	2300      	movs	r3, #0
 800cb9a:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cb9c:	79fb      	ldrb	r3, [r7, #7]
 800cb9e:	b2db      	uxtb	r3, r3
}
 800cba0:	4618      	mov	r0, r3
 800cba2:	3708      	adds	r7, #8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cbae:	2301      	movs	r3, #1
 800cbb0:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cbb2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cbb6:	4806      	ldr	r0, [pc, #24]	; (800cbd0 <BSP_PlatformIsDetected+0x28>)
 800cbb8:	f7f6 faec 	bl	8003194 <HAL_GPIO_ReadPin>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d001      	beq.n	800cbc6 <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cbc6:	79fb      	ldrb	r3, [r7, #7]
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	3708      	adds	r7, #8
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	bd80      	pop	{r7, pc}
 800cbd0:	40020000 	.word	0x40020000

0800cbd4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cbd4:	b580      	push	{r7, lr}
 800cbd6:	b082      	sub	sp, #8
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	4603      	mov	r3, r0
 800cbdc:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cbde:	4b0b      	ldr	r3, [pc, #44]	; (800cc0c <SD_CheckStatus+0x38>)
 800cbe0:	2201      	movs	r2, #1
 800cbe2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cbe4:	f7ff ffb0 	bl	800cb48 <BSP_SD_GetCardState>
 800cbe8:	4603      	mov	r3, r0
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	d107      	bne.n	800cbfe <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cbee:	4b07      	ldr	r3, [pc, #28]	; (800cc0c <SD_CheckStatus+0x38>)
 800cbf0:	781b      	ldrb	r3, [r3, #0]
 800cbf2:	b2db      	uxtb	r3, r3
 800cbf4:	f023 0301 	bic.w	r3, r3, #1
 800cbf8:	b2da      	uxtb	r2, r3
 800cbfa:	4b04      	ldr	r3, [pc, #16]	; (800cc0c <SD_CheckStatus+0x38>)
 800cbfc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cbfe:	4b03      	ldr	r3, [pc, #12]	; (800cc0c <SD_CheckStatus+0x38>)
 800cc00:	781b      	ldrb	r3, [r3, #0]
 800cc02:	b2db      	uxtb	r3, r3
}
 800cc04:	4618      	mov	r0, r3
 800cc06:	3708      	adds	r7, #8
 800cc08:	46bd      	mov	sp, r7
 800cc0a:	bd80      	pop	{r7, pc}
 800cc0c:	20000009 	.word	0x20000009

0800cc10 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b082      	sub	sp, #8
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	4603      	mov	r3, r0
 800cc18:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cc1a:	4b0b      	ldr	r3, [pc, #44]	; (800cc48 <SD_initialize+0x38>)
 800cc1c:	2201      	movs	r2, #1
 800cc1e:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cc20:	f7ff ff3e 	bl	800caa0 <BSP_SD_Init>
 800cc24:	4603      	mov	r3, r0
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d107      	bne.n	800cc3a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cc2a:	79fb      	ldrb	r3, [r7, #7]
 800cc2c:	4618      	mov	r0, r3
 800cc2e:	f7ff ffd1 	bl	800cbd4 <SD_CheckStatus>
 800cc32:	4603      	mov	r3, r0
 800cc34:	461a      	mov	r2, r3
 800cc36:	4b04      	ldr	r3, [pc, #16]	; (800cc48 <SD_initialize+0x38>)
 800cc38:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cc3a:	4b03      	ldr	r3, [pc, #12]	; (800cc48 <SD_initialize+0x38>)
 800cc3c:	781b      	ldrb	r3, [r3, #0]
 800cc3e:	b2db      	uxtb	r3, r3
}
 800cc40:	4618      	mov	r0, r3
 800cc42:	3708      	adds	r7, #8
 800cc44:	46bd      	mov	sp, r7
 800cc46:	bd80      	pop	{r7, pc}
 800cc48:	20000009 	.word	0x20000009

0800cc4c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b082      	sub	sp, #8
 800cc50:	af00      	add	r7, sp, #0
 800cc52:	4603      	mov	r3, r0
 800cc54:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cc56:	79fb      	ldrb	r3, [r7, #7]
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f7ff ffbb 	bl	800cbd4 <SD_CheckStatus>
 800cc5e:	4603      	mov	r3, r0
}
 800cc60:	4618      	mov	r0, r3
 800cc62:	3708      	adds	r7, #8
 800cc64:	46bd      	mov	sp, r7
 800cc66:	bd80      	pop	{r7, pc}

0800cc68 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800cc68:	b580      	push	{r7, lr}
 800cc6a:	b086      	sub	sp, #24
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60b9      	str	r1, [r7, #8]
 800cc70:	607a      	str	r2, [r7, #4]
 800cc72:	603b      	str	r3, [r7, #0]
 800cc74:	4603      	mov	r3, r0
 800cc76:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800cc78:	2301      	movs	r3, #1
 800cc7a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800cc7c:	f04f 33ff 	mov.w	r3, #4294967295
 800cc80:	683a      	ldr	r2, [r7, #0]
 800cc82:	6879      	ldr	r1, [r7, #4]
 800cc84:	68b8      	ldr	r0, [r7, #8]
 800cc86:	f7ff ff23 	bl	800cad0 <BSP_SD_ReadBlocks>
 800cc8a:	4603      	mov	r3, r0
 800cc8c:	2b00      	cmp	r3, #0
 800cc8e:	d107      	bne.n	800cca0 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800cc90:	bf00      	nop
 800cc92:	f7ff ff59 	bl	800cb48 <BSP_SD_GetCardState>
 800cc96:	4603      	mov	r3, r0
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1fa      	bne.n	800cc92 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cca0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cca2:	4618      	mov	r0, r3
 800cca4:	3718      	adds	r7, #24
 800cca6:	46bd      	mov	sp, r7
 800cca8:	bd80      	pop	{r7, pc}

0800ccaa <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800ccaa:	b580      	push	{r7, lr}
 800ccac:	b086      	sub	sp, #24
 800ccae:	af00      	add	r7, sp, #0
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
 800ccb4:	603b      	str	r3, [r7, #0]
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800ccba:	2301      	movs	r3, #1
 800ccbc:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800ccbe:	f04f 33ff 	mov.w	r3, #4294967295
 800ccc2:	683a      	ldr	r2, [r7, #0]
 800ccc4:	6879      	ldr	r1, [r7, #4]
 800ccc6:	68b8      	ldr	r0, [r7, #8]
 800ccc8:	f7ff ff20 	bl	800cb0c <BSP_SD_WriteBlocks>
 800cccc:	4603      	mov	r3, r0
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d107      	bne.n	800cce2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800ccd2:	bf00      	nop
 800ccd4:	f7ff ff38 	bl	800cb48 <BSP_SD_GetCardState>
 800ccd8:	4603      	mov	r3, r0
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1fa      	bne.n	800ccd4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800ccde:	2300      	movs	r3, #0
 800cce0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800cce2:	7dfb      	ldrb	r3, [r7, #23]
}
 800cce4:	4618      	mov	r0, r3
 800cce6:	3718      	adds	r7, #24
 800cce8:	46bd      	mov	sp, r7
 800ccea:	bd80      	pop	{r7, pc}

0800ccec <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800ccec:	b580      	push	{r7, lr}
 800ccee:	b08c      	sub	sp, #48	; 0x30
 800ccf0:	af00      	add	r7, sp, #0
 800ccf2:	4603      	mov	r3, r0
 800ccf4:	603a      	str	r2, [r7, #0]
 800ccf6:	71fb      	strb	r3, [r7, #7]
 800ccf8:	460b      	mov	r3, r1
 800ccfa:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800cd02:	4b25      	ldr	r3, [pc, #148]	; (800cd98 <SD_ioctl+0xac>)
 800cd04:	781b      	ldrb	r3, [r3, #0]
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	f003 0301 	and.w	r3, r3, #1
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d001      	beq.n	800cd14 <SD_ioctl+0x28>
 800cd10:	2303      	movs	r3, #3
 800cd12:	e03c      	b.n	800cd8e <SD_ioctl+0xa2>

  switch (cmd)
 800cd14:	79bb      	ldrb	r3, [r7, #6]
 800cd16:	2b03      	cmp	r3, #3
 800cd18:	d834      	bhi.n	800cd84 <SD_ioctl+0x98>
 800cd1a:	a201      	add	r2, pc, #4	; (adr r2, 800cd20 <SD_ioctl+0x34>)
 800cd1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd20:	0800cd31 	.word	0x0800cd31
 800cd24:	0800cd39 	.word	0x0800cd39
 800cd28:	0800cd51 	.word	0x0800cd51
 800cd2c:	0800cd6b 	.word	0x0800cd6b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800cd30:	2300      	movs	r3, #0
 800cd32:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd36:	e028      	b.n	800cd8a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd38:	f107 030c 	add.w	r3, r7, #12
 800cd3c:	4618      	mov	r0, r3
 800cd3e:	f7ff ff13 	bl	800cb68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800cd42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd48:	2300      	movs	r3, #0
 800cd4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd4e:	e01c      	b.n	800cd8a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd50:	f107 030c 	add.w	r3, r7, #12
 800cd54:	4618      	mov	r0, r3
 800cd56:	f7ff ff07 	bl	800cb68 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800cd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd5c:	b29a      	uxth	r2, r3
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800cd62:	2300      	movs	r3, #0
 800cd64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd68:	e00f      	b.n	800cd8a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800cd6a:	f107 030c 	add.w	r3, r7, #12
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff fefa 	bl	800cb68 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800cd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd76:	0a5a      	lsrs	r2, r3, #9
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800cd7c:	2300      	movs	r3, #0
 800cd7e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800cd82:	e002      	b.n	800cd8a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800cd84:	2304      	movs	r3, #4
 800cd86:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800cd8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cd8e:	4618      	mov	r0, r3
 800cd90:	3730      	adds	r7, #48	; 0x30
 800cd92:	46bd      	mov	sp, r7
 800cd94:	bd80      	pop	{r7, pc}
 800cd96:	bf00      	nop
 800cd98:	20000009 	.word	0x20000009

0800cd9c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cd9c:	b580      	push	{r7, lr}
 800cd9e:	b084      	sub	sp, #16
 800cda0:	af00      	add	r7, sp, #0
 800cda2:	6078      	str	r0, [r7, #4]
 800cda4:	460b      	mov	r3, r1
 800cda6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800cda8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cdac:	f005 fd5a 	bl	8012864 <malloc>
 800cdb0:	4603      	mov	r3, r0
 800cdb2:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cdb4:	68fb      	ldr	r3, [r7, #12]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d109      	bne.n	800cdce <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	32b0      	adds	r2, #176	; 0xb0
 800cdc4:	2100      	movs	r1, #0
 800cdc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	e0d4      	b.n	800cf78 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800cdce:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f005 fd55 	bl	8012884 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	32b0      	adds	r2, #176	; 0xb0
 800cde4:	68f9      	ldr	r1, [r7, #12]
 800cde6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	32b0      	adds	r2, #176	; 0xb0
 800cdf4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	7c1b      	ldrb	r3, [r3, #16]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d138      	bne.n	800ce78 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce06:	4b5e      	ldr	r3, [pc, #376]	; (800cf80 <USBD_CDC_Init+0x1e4>)
 800ce08:	7819      	ldrb	r1, [r3, #0]
 800ce0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce0e:	2202      	movs	r2, #2
 800ce10:	6878      	ldr	r0, [r7, #4]
 800ce12:	f005 f842 	bl	8011e9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce16:	4b5a      	ldr	r3, [pc, #360]	; (800cf80 <USBD_CDC_Init+0x1e4>)
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	f003 020f 	and.w	r2, r3, #15
 800ce1e:	6879      	ldr	r1, [r7, #4]
 800ce20:	4613      	mov	r3, r2
 800ce22:	009b      	lsls	r3, r3, #2
 800ce24:	4413      	add	r3, r2
 800ce26:	009b      	lsls	r3, r3, #2
 800ce28:	440b      	add	r3, r1
 800ce2a:	3324      	adds	r3, #36	; 0x24
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ce30:	4b54      	ldr	r3, [pc, #336]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800ce32:	7819      	ldrb	r1, [r3, #0]
 800ce34:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ce38:	2202      	movs	r2, #2
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f005 f82d 	bl	8011e9a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ce40:	4b50      	ldr	r3, [pc, #320]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800ce42:	781b      	ldrb	r3, [r3, #0]
 800ce44:	f003 020f 	and.w	r2, r3, #15
 800ce48:	6879      	ldr	r1, [r7, #4]
 800ce4a:	4613      	mov	r3, r2
 800ce4c:	009b      	lsls	r3, r3, #2
 800ce4e:	4413      	add	r3, r2
 800ce50:	009b      	lsls	r3, r3, #2
 800ce52:	440b      	add	r3, r1
 800ce54:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800ce58:	2201      	movs	r2, #1
 800ce5a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ce5c:	4b4a      	ldr	r3, [pc, #296]	; (800cf88 <USBD_CDC_Init+0x1ec>)
 800ce5e:	781b      	ldrb	r3, [r3, #0]
 800ce60:	f003 020f 	and.w	r2, r3, #15
 800ce64:	6879      	ldr	r1, [r7, #4]
 800ce66:	4613      	mov	r3, r2
 800ce68:	009b      	lsls	r3, r3, #2
 800ce6a:	4413      	add	r3, r2
 800ce6c:	009b      	lsls	r3, r3, #2
 800ce6e:	440b      	add	r3, r1
 800ce70:	3326      	adds	r3, #38	; 0x26
 800ce72:	2210      	movs	r2, #16
 800ce74:	801a      	strh	r2, [r3, #0]
 800ce76:	e035      	b.n	800cee4 <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ce78:	4b41      	ldr	r3, [pc, #260]	; (800cf80 <USBD_CDC_Init+0x1e4>)
 800ce7a:	7819      	ldrb	r1, [r3, #0]
 800ce7c:	2340      	movs	r3, #64	; 0x40
 800ce7e:	2202      	movs	r2, #2
 800ce80:	6878      	ldr	r0, [r7, #4]
 800ce82:	f005 f80a 	bl	8011e9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ce86:	4b3e      	ldr	r3, [pc, #248]	; (800cf80 <USBD_CDC_Init+0x1e4>)
 800ce88:	781b      	ldrb	r3, [r3, #0]
 800ce8a:	f003 020f 	and.w	r2, r3, #15
 800ce8e:	6879      	ldr	r1, [r7, #4]
 800ce90:	4613      	mov	r3, r2
 800ce92:	009b      	lsls	r3, r3, #2
 800ce94:	4413      	add	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	440b      	add	r3, r1
 800ce9a:	3324      	adds	r3, #36	; 0x24
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800cea0:	4b38      	ldr	r3, [pc, #224]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800cea2:	7819      	ldrb	r1, [r3, #0]
 800cea4:	2340      	movs	r3, #64	; 0x40
 800cea6:	2202      	movs	r2, #2
 800cea8:	6878      	ldr	r0, [r7, #4]
 800ceaa:	f004 fff6 	bl	8011e9a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ceae:	4b35      	ldr	r3, [pc, #212]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800ceb0:	781b      	ldrb	r3, [r3, #0]
 800ceb2:	f003 020f 	and.w	r2, r3, #15
 800ceb6:	6879      	ldr	r1, [r7, #4]
 800ceb8:	4613      	mov	r3, r2
 800ceba:	009b      	lsls	r3, r3, #2
 800cebc:	4413      	add	r3, r2
 800cebe:	009b      	lsls	r3, r3, #2
 800cec0:	440b      	add	r3, r1
 800cec2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cec6:	2201      	movs	r2, #1
 800cec8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ceca:	4b2f      	ldr	r3, [pc, #188]	; (800cf88 <USBD_CDC_Init+0x1ec>)
 800cecc:	781b      	ldrb	r3, [r3, #0]
 800cece:	f003 020f 	and.w	r2, r3, #15
 800ced2:	6879      	ldr	r1, [r7, #4]
 800ced4:	4613      	mov	r3, r2
 800ced6:	009b      	lsls	r3, r3, #2
 800ced8:	4413      	add	r3, r2
 800ceda:	009b      	lsls	r3, r3, #2
 800cedc:	440b      	add	r3, r1
 800cede:	3326      	adds	r3, #38	; 0x26
 800cee0:	2210      	movs	r2, #16
 800cee2:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cee4:	4b28      	ldr	r3, [pc, #160]	; (800cf88 <USBD_CDC_Init+0x1ec>)
 800cee6:	7819      	ldrb	r1, [r3, #0]
 800cee8:	2308      	movs	r3, #8
 800ceea:	2203      	movs	r2, #3
 800ceec:	6878      	ldr	r0, [r7, #4]
 800ceee:	f004 ffd4 	bl	8011e9a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800cef2:	4b25      	ldr	r3, [pc, #148]	; (800cf88 <USBD_CDC_Init+0x1ec>)
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	f003 020f 	and.w	r2, r3, #15
 800cefa:	6879      	ldr	r1, [r7, #4]
 800cefc:	4613      	mov	r3, r2
 800cefe:	009b      	lsls	r3, r3, #2
 800cf00:	4413      	add	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	440b      	add	r3, r1
 800cf06:	3324      	adds	r3, #36	; 0x24
 800cf08:	2201      	movs	r2, #1
 800cf0a:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	2200      	movs	r2, #0
 800cf10:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800cf14:	687b      	ldr	r3, [r7, #4]
 800cf16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cf1a:	687a      	ldr	r2, [r7, #4]
 800cf1c:	33b0      	adds	r3, #176	; 0xb0
 800cf1e:	009b      	lsls	r3, r3, #2
 800cf20:	4413      	add	r3, r2
 800cf22:	685b      	ldr	r3, [r3, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	2200      	movs	r2, #0
 800cf2c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800cf30:	68fb      	ldr	r3, [r7, #12]
 800cf32:	2200      	movs	r2, #0
 800cf34:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800cf38:	68fb      	ldr	r3, [r7, #12]
 800cf3a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d101      	bne.n	800cf46 <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800cf42:	2302      	movs	r3, #2
 800cf44:	e018      	b.n	800cf78 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	7c1b      	ldrb	r3, [r3, #16]
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d10a      	bne.n	800cf64 <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf4e:	4b0d      	ldr	r3, [pc, #52]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800cf50:	7819      	ldrb	r1, [r3, #0]
 800cf52:	68fb      	ldr	r3, [r7, #12]
 800cf54:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf58:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cf5c:	6878      	ldr	r0, [r7, #4]
 800cf5e:	f005 f88b 	bl	8012078 <USBD_LL_PrepareReceive>
 800cf62:	e008      	b.n	800cf76 <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800cf64:	4b07      	ldr	r3, [pc, #28]	; (800cf84 <USBD_CDC_Init+0x1e8>)
 800cf66:	7819      	ldrb	r1, [r3, #0]
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cf6e:	2340      	movs	r3, #64	; 0x40
 800cf70:	6878      	ldr	r0, [r7, #4]
 800cf72:	f005 f881 	bl	8012078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800cf76:	2300      	movs	r3, #0
}
 800cf78:	4618      	mov	r0, r3
 800cf7a:	3710      	adds	r7, #16
 800cf7c:	46bd      	mov	sp, r7
 800cf7e:	bd80      	pop	{r7, pc}
 800cf80:	20000093 	.word	0x20000093
 800cf84:	20000094 	.word	0x20000094
 800cf88:	20000095 	.word	0x20000095

0800cf8c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cf8c:	b580      	push	{r7, lr}
 800cf8e:	b082      	sub	sp, #8
 800cf90:	af00      	add	r7, sp, #0
 800cf92:	6078      	str	r0, [r7, #4]
 800cf94:	460b      	mov	r3, r1
 800cf96:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800cf98:	4b3a      	ldr	r3, [pc, #232]	; (800d084 <USBD_CDC_DeInit+0xf8>)
 800cf9a:	781b      	ldrb	r3, [r3, #0]
 800cf9c:	4619      	mov	r1, r3
 800cf9e:	6878      	ldr	r0, [r7, #4]
 800cfa0:	f004 ffa1 	bl	8011ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800cfa4:	4b37      	ldr	r3, [pc, #220]	; (800d084 <USBD_CDC_DeInit+0xf8>)
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	f003 020f 	and.w	r2, r3, #15
 800cfac:	6879      	ldr	r1, [r7, #4]
 800cfae:	4613      	mov	r3, r2
 800cfb0:	009b      	lsls	r3, r3, #2
 800cfb2:	4413      	add	r3, r2
 800cfb4:	009b      	lsls	r3, r3, #2
 800cfb6:	440b      	add	r3, r1
 800cfb8:	3324      	adds	r3, #36	; 0x24
 800cfba:	2200      	movs	r2, #0
 800cfbc:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800cfbe:	4b32      	ldr	r3, [pc, #200]	; (800d088 <USBD_CDC_DeInit+0xfc>)
 800cfc0:	781b      	ldrb	r3, [r3, #0]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	6878      	ldr	r0, [r7, #4]
 800cfc6:	f004 ff8e 	bl	8011ee6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800cfca:	4b2f      	ldr	r3, [pc, #188]	; (800d088 <USBD_CDC_DeInit+0xfc>)
 800cfcc:	781b      	ldrb	r3, [r3, #0]
 800cfce:	f003 020f 	and.w	r2, r3, #15
 800cfd2:	6879      	ldr	r1, [r7, #4]
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	440b      	add	r3, r1
 800cfde:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800cfe2:	2200      	movs	r2, #0
 800cfe4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800cfe6:	4b29      	ldr	r3, [pc, #164]	; (800d08c <USBD_CDC_DeInit+0x100>)
 800cfe8:	781b      	ldrb	r3, [r3, #0]
 800cfea:	4619      	mov	r1, r3
 800cfec:	6878      	ldr	r0, [r7, #4]
 800cfee:	f004 ff7a 	bl	8011ee6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800cff2:	4b26      	ldr	r3, [pc, #152]	; (800d08c <USBD_CDC_DeInit+0x100>)
 800cff4:	781b      	ldrb	r3, [r3, #0]
 800cff6:	f003 020f 	and.w	r2, r3, #15
 800cffa:	6879      	ldr	r1, [r7, #4]
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	009b      	lsls	r3, r3, #2
 800d004:	440b      	add	r3, r1
 800d006:	3324      	adds	r3, #36	; 0x24
 800d008:	2200      	movs	r2, #0
 800d00a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d00c:	4b1f      	ldr	r3, [pc, #124]	; (800d08c <USBD_CDC_DeInit+0x100>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	f003 020f 	and.w	r2, r3, #15
 800d014:	6879      	ldr	r1, [r7, #4]
 800d016:	4613      	mov	r3, r2
 800d018:	009b      	lsls	r3, r3, #2
 800d01a:	4413      	add	r3, r2
 800d01c:	009b      	lsls	r3, r3, #2
 800d01e:	440b      	add	r3, r1
 800d020:	3326      	adds	r3, #38	; 0x26
 800d022:	2200      	movs	r2, #0
 800d024:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	32b0      	adds	r2, #176	; 0xb0
 800d030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d034:	2b00      	cmp	r3, #0
 800d036:	d01f      	beq.n	800d078 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d03e:	687a      	ldr	r2, [r7, #4]
 800d040:	33b0      	adds	r3, #176	; 0xb0
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4413      	add	r3, r2
 800d046:	685b      	ldr	r3, [r3, #4]
 800d048:	685b      	ldr	r3, [r3, #4]
 800d04a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	32b0      	adds	r2, #176	; 0xb0
 800d056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d05a:	4618      	mov	r0, r3
 800d05c:	f005 fc0a 	bl	8012874 <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	32b0      	adds	r2, #176	; 0xb0
 800d06a:	2100      	movs	r1, #0
 800d06c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	2200      	movs	r2, #0
 800d074:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3708      	adds	r7, #8
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}
 800d082:	bf00      	nop
 800d084:	20000093 	.word	0x20000093
 800d088:	20000094 	.word	0x20000094
 800d08c:	20000095 	.word	0x20000095

0800d090 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b086      	sub	sp, #24
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
 800d098:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d09a:	687b      	ldr	r3, [r7, #4]
 800d09c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	32b0      	adds	r2, #176	; 0xb0
 800d0a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d0a8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d0b2:	2300      	movs	r3, #0
 800d0b4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d0b6:	693b      	ldr	r3, [r7, #16]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d101      	bne.n	800d0c0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d0bc:	2303      	movs	r3, #3
 800d0be:	e0bf      	b.n	800d240 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d0c0:	683b      	ldr	r3, [r7, #0]
 800d0c2:	781b      	ldrb	r3, [r3, #0]
 800d0c4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d050      	beq.n	800d16e <USBD_CDC_Setup+0xde>
 800d0cc:	2b20      	cmp	r3, #32
 800d0ce:	f040 80af 	bne.w	800d230 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d0d2:	683b      	ldr	r3, [r7, #0]
 800d0d4:	88db      	ldrh	r3, [r3, #6]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d03a      	beq.n	800d150 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d0da:	683b      	ldr	r3, [r7, #0]
 800d0dc:	781b      	ldrb	r3, [r3, #0]
 800d0de:	b25b      	sxtb	r3, r3
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	da1b      	bge.n	800d11c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d0ea:	687a      	ldr	r2, [r7, #4]
 800d0ec:	33b0      	adds	r3, #176	; 0xb0
 800d0ee:	009b      	lsls	r3, r3, #2
 800d0f0:	4413      	add	r3, r2
 800d0f2:	685b      	ldr	r3, [r3, #4]
 800d0f4:	689b      	ldr	r3, [r3, #8]
 800d0f6:	683a      	ldr	r2, [r7, #0]
 800d0f8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d0fa:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d0fc:	683a      	ldr	r2, [r7, #0]
 800d0fe:	88d2      	ldrh	r2, [r2, #6]
 800d100:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d102:	683b      	ldr	r3, [r7, #0]
 800d104:	88db      	ldrh	r3, [r3, #6]
 800d106:	2b07      	cmp	r3, #7
 800d108:	bf28      	it	cs
 800d10a:	2307      	movcs	r3, #7
 800d10c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d10e:	693b      	ldr	r3, [r7, #16]
 800d110:	89fa      	ldrh	r2, [r7, #14]
 800d112:	4619      	mov	r1, r3
 800d114:	6878      	ldr	r0, [r7, #4]
 800d116:	f001 fd6d 	bl	800ebf4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d11a:	e090      	b.n	800d23e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d11c:	683b      	ldr	r3, [r7, #0]
 800d11e:	785a      	ldrb	r2, [r3, #1]
 800d120:	693b      	ldr	r3, [r7, #16]
 800d122:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	88db      	ldrh	r3, [r3, #6]
 800d12a:	2b3f      	cmp	r3, #63	; 0x3f
 800d12c:	d803      	bhi.n	800d136 <USBD_CDC_Setup+0xa6>
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	88db      	ldrh	r3, [r3, #6]
 800d132:	b2da      	uxtb	r2, r3
 800d134:	e000      	b.n	800d138 <USBD_CDC_Setup+0xa8>
 800d136:	2240      	movs	r2, #64	; 0x40
 800d138:	693b      	ldr	r3, [r7, #16]
 800d13a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d13e:	6939      	ldr	r1, [r7, #16]
 800d140:	693b      	ldr	r3, [r7, #16]
 800d142:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d146:	461a      	mov	r2, r3
 800d148:	6878      	ldr	r0, [r7, #4]
 800d14a:	f001 fd7f 	bl	800ec4c <USBD_CtlPrepareRx>
      break;
 800d14e:	e076      	b.n	800d23e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d156:	687a      	ldr	r2, [r7, #4]
 800d158:	33b0      	adds	r3, #176	; 0xb0
 800d15a:	009b      	lsls	r3, r3, #2
 800d15c:	4413      	add	r3, r2
 800d15e:	685b      	ldr	r3, [r3, #4]
 800d160:	689b      	ldr	r3, [r3, #8]
 800d162:	683a      	ldr	r2, [r7, #0]
 800d164:	7850      	ldrb	r0, [r2, #1]
 800d166:	2200      	movs	r2, #0
 800d168:	6839      	ldr	r1, [r7, #0]
 800d16a:	4798      	blx	r3
      break;
 800d16c:	e067      	b.n	800d23e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d16e:	683b      	ldr	r3, [r7, #0]
 800d170:	785b      	ldrb	r3, [r3, #1]
 800d172:	2b0b      	cmp	r3, #11
 800d174:	d851      	bhi.n	800d21a <USBD_CDC_Setup+0x18a>
 800d176:	a201      	add	r2, pc, #4	; (adr r2, 800d17c <USBD_CDC_Setup+0xec>)
 800d178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d17c:	0800d1ad 	.word	0x0800d1ad
 800d180:	0800d229 	.word	0x0800d229
 800d184:	0800d21b 	.word	0x0800d21b
 800d188:	0800d21b 	.word	0x0800d21b
 800d18c:	0800d21b 	.word	0x0800d21b
 800d190:	0800d21b 	.word	0x0800d21b
 800d194:	0800d21b 	.word	0x0800d21b
 800d198:	0800d21b 	.word	0x0800d21b
 800d19c:	0800d21b 	.word	0x0800d21b
 800d1a0:	0800d21b 	.word	0x0800d21b
 800d1a4:	0800d1d7 	.word	0x0800d1d7
 800d1a8:	0800d201 	.word	0x0800d201
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1b2:	b2db      	uxtb	r3, r3
 800d1b4:	2b03      	cmp	r3, #3
 800d1b6:	d107      	bne.n	800d1c8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d1b8:	f107 030a 	add.w	r3, r7, #10
 800d1bc:	2202      	movs	r2, #2
 800d1be:	4619      	mov	r1, r3
 800d1c0:	6878      	ldr	r0, [r7, #4]
 800d1c2:	f001 fd17 	bl	800ebf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1c6:	e032      	b.n	800d22e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d1c8:	6839      	ldr	r1, [r7, #0]
 800d1ca:	6878      	ldr	r0, [r7, #4]
 800d1cc:	f001 fca1 	bl	800eb12 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1d0:	2303      	movs	r3, #3
 800d1d2:	75fb      	strb	r3, [r7, #23]
          break;
 800d1d4:	e02b      	b.n	800d22e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d1dc:	b2db      	uxtb	r3, r3
 800d1de:	2b03      	cmp	r3, #3
 800d1e0:	d107      	bne.n	800d1f2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d1e2:	f107 030d 	add.w	r3, r7, #13
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	4619      	mov	r1, r3
 800d1ea:	6878      	ldr	r0, [r7, #4]
 800d1ec:	f001 fd02 	bl	800ebf4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d1f0:	e01d      	b.n	800d22e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d1f2:	6839      	ldr	r1, [r7, #0]
 800d1f4:	6878      	ldr	r0, [r7, #4]
 800d1f6:	f001 fc8c 	bl	800eb12 <USBD_CtlError>
            ret = USBD_FAIL;
 800d1fa:	2303      	movs	r3, #3
 800d1fc:	75fb      	strb	r3, [r7, #23]
          break;
 800d1fe:	e016      	b.n	800d22e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d206:	b2db      	uxtb	r3, r3
 800d208:	2b03      	cmp	r3, #3
 800d20a:	d00f      	beq.n	800d22c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f001 fc7f 	bl	800eb12 <USBD_CtlError>
            ret = USBD_FAIL;
 800d214:	2303      	movs	r3, #3
 800d216:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d218:	e008      	b.n	800d22c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d21a:	6839      	ldr	r1, [r7, #0]
 800d21c:	6878      	ldr	r0, [r7, #4]
 800d21e:	f001 fc78 	bl	800eb12 <USBD_CtlError>
          ret = USBD_FAIL;
 800d222:	2303      	movs	r3, #3
 800d224:	75fb      	strb	r3, [r7, #23]
          break;
 800d226:	e002      	b.n	800d22e <USBD_CDC_Setup+0x19e>
          break;
 800d228:	bf00      	nop
 800d22a:	e008      	b.n	800d23e <USBD_CDC_Setup+0x1ae>
          break;
 800d22c:	bf00      	nop
      }
      break;
 800d22e:	e006      	b.n	800d23e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d230:	6839      	ldr	r1, [r7, #0]
 800d232:	6878      	ldr	r0, [r7, #4]
 800d234:	f001 fc6d 	bl	800eb12 <USBD_CtlError>
      ret = USBD_FAIL;
 800d238:	2303      	movs	r3, #3
 800d23a:	75fb      	strb	r3, [r7, #23]
      break;
 800d23c:	bf00      	nop
  }

  return (uint8_t)ret;
 800d23e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3718      	adds	r7, #24
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b084      	sub	sp, #16
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d25a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d262:	687b      	ldr	r3, [r7, #4]
 800d264:	32b0      	adds	r2, #176	; 0xb0
 800d266:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d101      	bne.n	800d272 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d26e:	2303      	movs	r3, #3
 800d270:	e065      	b.n	800d33e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d272:	687b      	ldr	r3, [r7, #4]
 800d274:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	32b0      	adds	r2, #176	; 0xb0
 800d27c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d280:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d282:	78fb      	ldrb	r3, [r7, #3]
 800d284:	f003 020f 	and.w	r2, r3, #15
 800d288:	6879      	ldr	r1, [r7, #4]
 800d28a:	4613      	mov	r3, r2
 800d28c:	009b      	lsls	r3, r3, #2
 800d28e:	4413      	add	r3, r2
 800d290:	009b      	lsls	r3, r3, #2
 800d292:	440b      	add	r3, r1
 800d294:	3318      	adds	r3, #24
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	d02f      	beq.n	800d2fc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d29c:	78fb      	ldrb	r3, [r7, #3]
 800d29e:	f003 020f 	and.w	r2, r3, #15
 800d2a2:	6879      	ldr	r1, [r7, #4]
 800d2a4:	4613      	mov	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	4413      	add	r3, r2
 800d2aa:	009b      	lsls	r3, r3, #2
 800d2ac:	440b      	add	r3, r1
 800d2ae:	3318      	adds	r3, #24
 800d2b0:	681a      	ldr	r2, [r3, #0]
 800d2b2:	78fb      	ldrb	r3, [r7, #3]
 800d2b4:	f003 010f 	and.w	r1, r3, #15
 800d2b8:	68f8      	ldr	r0, [r7, #12]
 800d2ba:	460b      	mov	r3, r1
 800d2bc:	00db      	lsls	r3, r3, #3
 800d2be:	440b      	add	r3, r1
 800d2c0:	009b      	lsls	r3, r3, #2
 800d2c2:	4403      	add	r3, r0
 800d2c4:	3348      	adds	r3, #72	; 0x48
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	fbb2 f1f3 	udiv	r1, r2, r3
 800d2cc:	fb01 f303 	mul.w	r3, r1, r3
 800d2d0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d112      	bne.n	800d2fc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d2d6:	78fb      	ldrb	r3, [r7, #3]
 800d2d8:	f003 020f 	and.w	r2, r3, #15
 800d2dc:	6879      	ldr	r1, [r7, #4]
 800d2de:	4613      	mov	r3, r2
 800d2e0:	009b      	lsls	r3, r3, #2
 800d2e2:	4413      	add	r3, r2
 800d2e4:	009b      	lsls	r3, r3, #2
 800d2e6:	440b      	add	r3, r1
 800d2e8:	3318      	adds	r3, #24
 800d2ea:	2200      	movs	r2, #0
 800d2ec:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d2ee:	78f9      	ldrb	r1, [r7, #3]
 800d2f0:	2300      	movs	r3, #0
 800d2f2:	2200      	movs	r2, #0
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f004 fe9e 	bl	8012036 <USBD_LL_Transmit>
 800d2fa:	e01f      	b.n	800d33c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	2200      	movs	r2, #0
 800d300:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d30a:	687a      	ldr	r2, [r7, #4]
 800d30c:	33b0      	adds	r3, #176	; 0xb0
 800d30e:	009b      	lsls	r3, r3, #2
 800d310:	4413      	add	r3, r2
 800d312:	685b      	ldr	r3, [r3, #4]
 800d314:	691b      	ldr	r3, [r3, #16]
 800d316:	2b00      	cmp	r3, #0
 800d318:	d010      	beq.n	800d33c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d320:	687a      	ldr	r2, [r7, #4]
 800d322:	33b0      	adds	r3, #176	; 0xb0
 800d324:	009b      	lsls	r3, r3, #2
 800d326:	4413      	add	r3, r2
 800d328:	685b      	ldr	r3, [r3, #4]
 800d32a:	691b      	ldr	r3, [r3, #16]
 800d32c:	68ba      	ldr	r2, [r7, #8]
 800d32e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d332:	68ba      	ldr	r2, [r7, #8]
 800d334:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d338:	78fa      	ldrb	r2, [r7, #3]
 800d33a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d33c:	2300      	movs	r3, #0
}
 800d33e:	4618      	mov	r0, r3
 800d340:	3710      	adds	r7, #16
 800d342:	46bd      	mov	sp, r7
 800d344:	bd80      	pop	{r7, pc}

0800d346 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d346:	b580      	push	{r7, lr}
 800d348:	b084      	sub	sp, #16
 800d34a:	af00      	add	r7, sp, #0
 800d34c:	6078      	str	r0, [r7, #4]
 800d34e:	460b      	mov	r3, r1
 800d350:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d358:	687b      	ldr	r3, [r7, #4]
 800d35a:	32b0      	adds	r2, #176	; 0xb0
 800d35c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d360:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	32b0      	adds	r2, #176	; 0xb0
 800d36c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d370:	2b00      	cmp	r3, #0
 800d372:	d101      	bne.n	800d378 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d374:	2303      	movs	r3, #3
 800d376:	e01a      	b.n	800d3ae <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d378:	78fb      	ldrb	r3, [r7, #3]
 800d37a:	4619      	mov	r1, r3
 800d37c:	6878      	ldr	r0, [r7, #4]
 800d37e:	f004 fe9c 	bl	80120ba <USBD_LL_GetRxDataSize>
 800d382:	4602      	mov	r2, r0
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d390:	687a      	ldr	r2, [r7, #4]
 800d392:	33b0      	adds	r3, #176	; 0xb0
 800d394:	009b      	lsls	r3, r3, #2
 800d396:	4413      	add	r3, r2
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	68db      	ldr	r3, [r3, #12]
 800d39c:	68fa      	ldr	r2, [r7, #12]
 800d39e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d3a2:	68fa      	ldr	r2, [r7, #12]
 800d3a4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d3a8:	4611      	mov	r1, r2
 800d3aa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d3ac:	2300      	movs	r3, #0
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3710      	adds	r7, #16
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	bd80      	pop	{r7, pc}

0800d3b6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d3b6:	b580      	push	{r7, lr}
 800d3b8:	b084      	sub	sp, #16
 800d3ba:	af00      	add	r7, sp, #0
 800d3bc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	32b0      	adds	r2, #176	; 0xb0
 800d3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3cc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d101      	bne.n	800d3d8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d3d4:	2303      	movs	r3, #3
 800d3d6:	e025      	b.n	800d424 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3de:	687a      	ldr	r2, [r7, #4]
 800d3e0:	33b0      	adds	r3, #176	; 0xb0
 800d3e2:	009b      	lsls	r3, r3, #2
 800d3e4:	4413      	add	r3, r2
 800d3e6:	685b      	ldr	r3, [r3, #4]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d01a      	beq.n	800d422 <USBD_CDC_EP0_RxReady+0x6c>
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d3f2:	2bff      	cmp	r3, #255	; 0xff
 800d3f4:	d015      	beq.n	800d422 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	33b0      	adds	r3, #176	; 0xb0
 800d400:	009b      	lsls	r3, r3, #2
 800d402:	4413      	add	r3, r2
 800d404:	685b      	ldr	r3, [r3, #4]
 800d406:	689b      	ldr	r3, [r3, #8]
 800d408:	68fa      	ldr	r2, [r7, #12]
 800d40a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d40e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d416:	b292      	uxth	r2, r2
 800d418:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	22ff      	movs	r2, #255	; 0xff
 800d41e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d422:	2300      	movs	r3, #0
}
 800d424:	4618      	mov	r0, r3
 800d426:	3710      	adds	r7, #16
 800d428:	46bd      	mov	sp, r7
 800d42a:	bd80      	pop	{r7, pc}

0800d42c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d434:	2182      	movs	r1, #130	; 0x82
 800d436:	4818      	ldr	r0, [pc, #96]	; (800d498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d438:	f000 fd09 	bl	800de4e <USBD_GetEpDesc>
 800d43c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d43e:	2101      	movs	r1, #1
 800d440:	4815      	ldr	r0, [pc, #84]	; (800d498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d442:	f000 fd04 	bl	800de4e <USBD_GetEpDesc>
 800d446:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d448:	2181      	movs	r1, #129	; 0x81
 800d44a:	4813      	ldr	r0, [pc, #76]	; (800d498 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d44c:	f000 fcff 	bl	800de4e <USBD_GetEpDesc>
 800d450:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d002      	beq.n	800d45e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d458:	697b      	ldr	r3, [r7, #20]
 800d45a:	2210      	movs	r2, #16
 800d45c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	2b00      	cmp	r3, #0
 800d462:	d006      	beq.n	800d472 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	2200      	movs	r2, #0
 800d468:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d46c:	711a      	strb	r2, [r3, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d472:	68fb      	ldr	r3, [r7, #12]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d478:	68fb      	ldr	r3, [r7, #12]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d480:	711a      	strb	r2, [r3, #4]
 800d482:	2200      	movs	r2, #0
 800d484:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2243      	movs	r2, #67	; 0x43
 800d48a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d48c:	4b02      	ldr	r3, [pc, #8]	; (800d498 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d48e:	4618      	mov	r0, r3
 800d490:	3718      	adds	r7, #24
 800d492:	46bd      	mov	sp, r7
 800d494:	bd80      	pop	{r7, pc}
 800d496:	bf00      	nop
 800d498:	20000050 	.word	0x20000050

0800d49c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d49c:	b580      	push	{r7, lr}
 800d49e:	b086      	sub	sp, #24
 800d4a0:	af00      	add	r7, sp, #0
 800d4a2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d4a4:	2182      	movs	r1, #130	; 0x82
 800d4a6:	4818      	ldr	r0, [pc, #96]	; (800d508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d4a8:	f000 fcd1 	bl	800de4e <USBD_GetEpDesc>
 800d4ac:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d4ae:	2101      	movs	r1, #1
 800d4b0:	4815      	ldr	r0, [pc, #84]	; (800d508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d4b2:	f000 fccc 	bl	800de4e <USBD_GetEpDesc>
 800d4b6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d4b8:	2181      	movs	r1, #129	; 0x81
 800d4ba:	4813      	ldr	r0, [pc, #76]	; (800d508 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d4bc:	f000 fcc7 	bl	800de4e <USBD_GetEpDesc>
 800d4c0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d4c2:	697b      	ldr	r3, [r7, #20]
 800d4c4:	2b00      	cmp	r3, #0
 800d4c6:	d002      	beq.n	800d4ce <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d4c8:	697b      	ldr	r3, [r7, #20]
 800d4ca:	2210      	movs	r2, #16
 800d4cc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d4ce:	693b      	ldr	r3, [r7, #16]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	d006      	beq.n	800d4e2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	2200      	movs	r2, #0
 800d4d8:	711a      	strb	r2, [r3, #4]
 800d4da:	2200      	movs	r2, #0
 800d4dc:	f042 0202 	orr.w	r2, r2, #2
 800d4e0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d006      	beq.n	800d4f6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2200      	movs	r2, #0
 800d4ec:	711a      	strb	r2, [r3, #4]
 800d4ee:	2200      	movs	r2, #0
 800d4f0:	f042 0202 	orr.w	r2, r2, #2
 800d4f4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	2243      	movs	r2, #67	; 0x43
 800d4fa:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d4fc:	4b02      	ldr	r3, [pc, #8]	; (800d508 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d4fe:	4618      	mov	r0, r3
 800d500:	3718      	adds	r7, #24
 800d502:	46bd      	mov	sp, r7
 800d504:	bd80      	pop	{r7, pc}
 800d506:	bf00      	nop
 800d508:	20000050 	.word	0x20000050

0800d50c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b086      	sub	sp, #24
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d514:	2182      	movs	r1, #130	; 0x82
 800d516:	4818      	ldr	r0, [pc, #96]	; (800d578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d518:	f000 fc99 	bl	800de4e <USBD_GetEpDesc>
 800d51c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d51e:	2101      	movs	r1, #1
 800d520:	4815      	ldr	r0, [pc, #84]	; (800d578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d522:	f000 fc94 	bl	800de4e <USBD_GetEpDesc>
 800d526:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d528:	2181      	movs	r1, #129	; 0x81
 800d52a:	4813      	ldr	r0, [pc, #76]	; (800d578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d52c:	f000 fc8f 	bl	800de4e <USBD_GetEpDesc>
 800d530:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d532:	697b      	ldr	r3, [r7, #20]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d002      	beq.n	800d53e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d538:	697b      	ldr	r3, [r7, #20]
 800d53a:	2210      	movs	r2, #16
 800d53c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d53e:	693b      	ldr	r3, [r7, #16]
 800d540:	2b00      	cmp	r3, #0
 800d542:	d006      	beq.n	800d552 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	2200      	movs	r2, #0
 800d548:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d54c:	711a      	strb	r2, [r3, #4]
 800d54e:	2200      	movs	r2, #0
 800d550:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	2b00      	cmp	r3, #0
 800d556:	d006      	beq.n	800d566 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	2200      	movs	r2, #0
 800d55c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d560:	711a      	strb	r2, [r3, #4]
 800d562:	2200      	movs	r2, #0
 800d564:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d566:	687b      	ldr	r3, [r7, #4]
 800d568:	2243      	movs	r2, #67	; 0x43
 800d56a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d56c:	4b02      	ldr	r3, [pc, #8]	; (800d578 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d56e:	4618      	mov	r0, r3
 800d570:	3718      	adds	r7, #24
 800d572:	46bd      	mov	sp, r7
 800d574:	bd80      	pop	{r7, pc}
 800d576:	bf00      	nop
 800d578:	20000050 	.word	0x20000050

0800d57c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
 800d582:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	220a      	movs	r2, #10
 800d588:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d58a:	4b03      	ldr	r3, [pc, #12]	; (800d598 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d58c:	4618      	mov	r0, r3
 800d58e:	370c      	adds	r7, #12
 800d590:	46bd      	mov	sp, r7
 800d592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d596:	4770      	bx	lr
 800d598:	2000000c 	.word	0x2000000c

0800d59c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d59c:	b480      	push	{r7}
 800d59e:	b083      	sub	sp, #12
 800d5a0:	af00      	add	r7, sp, #0
 800d5a2:	6078      	str	r0, [r7, #4]
 800d5a4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d5a6:	683b      	ldr	r3, [r7, #0]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d101      	bne.n	800d5b0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	e009      	b.n	800d5c4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d5b6:	687a      	ldr	r2, [r7, #4]
 800d5b8:	33b0      	adds	r3, #176	; 0xb0
 800d5ba:	009b      	lsls	r3, r3, #2
 800d5bc:	4413      	add	r3, r2
 800d5be:	683a      	ldr	r2, [r7, #0]
 800d5c0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d5c2:	2300      	movs	r3, #0
}
 800d5c4:	4618      	mov	r0, r3
 800d5c6:	370c      	adds	r7, #12
 800d5c8:	46bd      	mov	sp, r7
 800d5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ce:	4770      	bx	lr

0800d5d0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d5d0:	b480      	push	{r7}
 800d5d2:	b087      	sub	sp, #28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	32b0      	adds	r2, #176	; 0xb0
 800d5e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5ea:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d5ec:	697b      	ldr	r3, [r7, #20]
 800d5ee:	2b00      	cmp	r3, #0
 800d5f0:	d101      	bne.n	800d5f6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d5f2:	2303      	movs	r3, #3
 800d5f4:	e008      	b.n	800d608 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d5f6:	697b      	ldr	r3, [r7, #20]
 800d5f8:	68ba      	ldr	r2, [r7, #8]
 800d5fa:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d5fe:	697b      	ldr	r3, [r7, #20]
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d606:	2300      	movs	r3, #0
}
 800d608:	4618      	mov	r0, r3
 800d60a:	371c      	adds	r7, #28
 800d60c:	46bd      	mov	sp, r7
 800d60e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d612:	4770      	bx	lr

0800d614 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d614:	b480      	push	{r7}
 800d616:	b085      	sub	sp, #20
 800d618:	af00      	add	r7, sp, #0
 800d61a:	6078      	str	r0, [r7, #4]
 800d61c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d61e:	687b      	ldr	r3, [r7, #4]
 800d620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	32b0      	adds	r2, #176	; 0xb0
 800d628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d62c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d101      	bne.n	800d638 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d634:	2303      	movs	r3, #3
 800d636:	e004      	b.n	800d642 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	683a      	ldr	r2, [r7, #0]
 800d63c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d640:	2300      	movs	r3, #0
}
 800d642:	4618      	mov	r0, r3
 800d644:	3714      	adds	r7, #20
 800d646:	46bd      	mov	sp, r7
 800d648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d64c:	4770      	bx	lr
	...

0800d650 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	32b0      	adds	r2, #176	; 0xb0
 800d662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d666:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d668:	687b      	ldr	r3, [r7, #4]
 800d66a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	32b0      	adds	r2, #176	; 0xb0
 800d672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d676:	2b00      	cmp	r3, #0
 800d678:	d101      	bne.n	800d67e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800d67a:	2303      	movs	r3, #3
 800d67c:	e018      	b.n	800d6b0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	7c1b      	ldrb	r3, [r3, #16]
 800d682:	2b00      	cmp	r3, #0
 800d684:	d10a      	bne.n	800d69c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d686:	4b0c      	ldr	r3, [pc, #48]	; (800d6b8 <USBD_CDC_ReceivePacket+0x68>)
 800d688:	7819      	ldrb	r1, [r3, #0]
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d690:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d694:	6878      	ldr	r0, [r7, #4]
 800d696:	f004 fcef 	bl	8012078 <USBD_LL_PrepareReceive>
 800d69a:	e008      	b.n	800d6ae <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d69c:	4b06      	ldr	r3, [pc, #24]	; (800d6b8 <USBD_CDC_ReceivePacket+0x68>)
 800d69e:	7819      	ldrb	r1, [r3, #0]
 800d6a0:	68fb      	ldr	r3, [r7, #12]
 800d6a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d6a6:	2340      	movs	r3, #64	; 0x40
 800d6a8:	6878      	ldr	r0, [r7, #4]
 800d6aa:	f004 fce5 	bl	8012078 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d6ae:	2300      	movs	r3, #0
}
 800d6b0:	4618      	mov	r0, r3
 800d6b2:	3710      	adds	r7, #16
 800d6b4:	46bd      	mov	sp, r7
 800d6b6:	bd80      	pop	{r7, pc}
 800d6b8:	20000094 	.word	0x20000094

0800d6bc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d6bc:	b580      	push	{r7, lr}
 800d6be:	b086      	sub	sp, #24
 800d6c0:	af00      	add	r7, sp, #0
 800d6c2:	60f8      	str	r0, [r7, #12]
 800d6c4:	60b9      	str	r1, [r7, #8]
 800d6c6:	4613      	mov	r3, r2
 800d6c8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	2b00      	cmp	r3, #0
 800d6ce:	d101      	bne.n	800d6d4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d6d0:	2303      	movs	r3, #3
 800d6d2:	e01f      	b.n	800d714 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	2200      	movs	r2, #0
 800d6d8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800d6dc:	68fb      	ldr	r3, [r7, #12]
 800d6de:	2200      	movs	r2, #0
 800d6e0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800d6e4:	68fb      	ldr	r3, [r7, #12]
 800d6e6:	2200      	movs	r2, #0
 800d6e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800d6ec:	68bb      	ldr	r3, [r7, #8]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d003      	beq.n	800d6fa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800d6f2:	68fb      	ldr	r3, [r7, #12]
 800d6f4:	68ba      	ldr	r2, [r7, #8]
 800d6f6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2201      	movs	r2, #1
 800d6fe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800d702:	68fb      	ldr	r3, [r7, #12]
 800d704:	79fa      	ldrb	r2, [r7, #7]
 800d706:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800d708:	68f8      	ldr	r0, [r7, #12]
 800d70a:	f004 fb59 	bl	8011dc0 <USBD_LL_Init>
 800d70e:	4603      	mov	r3, r0
 800d710:	75fb      	strb	r3, [r7, #23]

  return ret;
 800d712:	7dfb      	ldrb	r3, [r7, #23]
}
 800d714:	4618      	mov	r0, r3
 800d716:	3718      	adds	r7, #24
 800d718:	46bd      	mov	sp, r7
 800d71a:	bd80      	pop	{r7, pc}

0800d71c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
 800d724:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800d726:	2300      	movs	r3, #0
 800d728:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	2b00      	cmp	r3, #0
 800d72e:	d101      	bne.n	800d734 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800d730:	2303      	movs	r3, #3
 800d732:	e025      	b.n	800d780 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800d734:	687b      	ldr	r3, [r7, #4]
 800d736:	683a      	ldr	r2, [r7, #0]
 800d738:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	32ae      	adds	r2, #174	; 0xae
 800d746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d74a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00f      	beq.n	800d770 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	32ae      	adds	r2, #174	; 0xae
 800d75a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d75e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d760:	f107 020e 	add.w	r2, r7, #14
 800d764:	4610      	mov	r0, r2
 800d766:	4798      	blx	r3
 800d768:	4602      	mov	r2, r0
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800d776:	1c5a      	adds	r2, r3, #1
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800d77e:	2300      	movs	r3, #0
}
 800d780:	4618      	mov	r0, r3
 800d782:	3710      	adds	r7, #16
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b082      	sub	sp, #8
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800d790:	6878      	ldr	r0, [r7, #4]
 800d792:	f004 fb67 	bl	8011e64 <USBD_LL_Start>
 800d796:	4603      	mov	r3, r0
}
 800d798:	4618      	mov	r0, r3
 800d79a:	3708      	adds	r7, #8
 800d79c:	46bd      	mov	sp, r7
 800d79e:	bd80      	pop	{r7, pc}

0800d7a0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800d7a0:	b480      	push	{r7}
 800d7a2:	b083      	sub	sp, #12
 800d7a4:	af00      	add	r7, sp, #0
 800d7a6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d7a8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800d7aa:	4618      	mov	r0, r3
 800d7ac:	370c      	adds	r7, #12
 800d7ae:	46bd      	mov	sp, r7
 800d7b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7b4:	4770      	bx	lr

0800d7b6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7b6:	b580      	push	{r7, lr}
 800d7b8:	b084      	sub	sp, #16
 800d7ba:	af00      	add	r7, sp, #0
 800d7bc:	6078      	str	r0, [r7, #4]
 800d7be:	460b      	mov	r3, r1
 800d7c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7cc:	2b00      	cmp	r3, #0
 800d7ce:	d009      	beq.n	800d7e4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	78fa      	ldrb	r2, [r7, #3]
 800d7da:	4611      	mov	r1, r2
 800d7dc:	6878      	ldr	r0, [r7, #4]
 800d7de:	4798      	blx	r3
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d7ee:	b580      	push	{r7, lr}
 800d7f0:	b084      	sub	sp, #16
 800d7f2:	af00      	add	r7, sp, #0
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	460b      	mov	r3, r1
 800d7f8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d804:	685b      	ldr	r3, [r3, #4]
 800d806:	78fa      	ldrb	r2, [r7, #3]
 800d808:	4611      	mov	r1, r2
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	4798      	blx	r3
 800d80e:	4603      	mov	r3, r0
 800d810:	2b00      	cmp	r3, #0
 800d812:	d001      	beq.n	800d818 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800d814:	2303      	movs	r3, #3
 800d816:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d818:	7bfb      	ldrb	r3, [r7, #15]
}
 800d81a:	4618      	mov	r0, r3
 800d81c:	3710      	adds	r7, #16
 800d81e:	46bd      	mov	sp, r7
 800d820:	bd80      	pop	{r7, pc}

0800d822 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d822:	b580      	push	{r7, lr}
 800d824:	b084      	sub	sp, #16
 800d826:	af00      	add	r7, sp, #0
 800d828:	6078      	str	r0, [r7, #4]
 800d82a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d832:	6839      	ldr	r1, [r7, #0]
 800d834:	4618      	mov	r0, r3
 800d836:	f001 f932 	bl	800ea9e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2201      	movs	r2, #1
 800d83e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800d848:	461a      	mov	r2, r3
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d856:	f003 031f 	and.w	r3, r3, #31
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d01a      	beq.n	800d894 <USBD_LL_SetupStage+0x72>
 800d85e:	2b02      	cmp	r3, #2
 800d860:	d822      	bhi.n	800d8a8 <USBD_LL_SetupStage+0x86>
 800d862:	2b00      	cmp	r3, #0
 800d864:	d002      	beq.n	800d86c <USBD_LL_SetupStage+0x4a>
 800d866:	2b01      	cmp	r3, #1
 800d868:	d00a      	beq.n	800d880 <USBD_LL_SetupStage+0x5e>
 800d86a:	e01d      	b.n	800d8a8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d872:	4619      	mov	r1, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f000 fb5f 	bl	800df38 <USBD_StdDevReq>
 800d87a:	4603      	mov	r3, r0
 800d87c:	73fb      	strb	r3, [r7, #15]
      break;
 800d87e:	e020      	b.n	800d8c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fbc7 	bl	800e01c <USBD_StdItfReq>
 800d88e:	4603      	mov	r3, r0
 800d890:	73fb      	strb	r3, [r7, #15]
      break;
 800d892:	e016      	b.n	800d8c2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800d894:	687b      	ldr	r3, [r7, #4]
 800d896:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800d89a:	4619      	mov	r1, r3
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	f000 fc29 	bl	800e0f4 <USBD_StdEPReq>
 800d8a2:	4603      	mov	r3, r0
 800d8a4:	73fb      	strb	r3, [r7, #15]
      break;
 800d8a6:	e00c      	b.n	800d8c2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d8ae:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d8b2:	b2db      	uxtb	r3, r3
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f004 fb34 	bl	8011f24 <USBD_LL_StallEP>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	73fb      	strb	r3, [r7, #15]
      break;
 800d8c0:	bf00      	nop
  }

  return ret;
 800d8c2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c4:	4618      	mov	r0, r3
 800d8c6:	3710      	adds	r7, #16
 800d8c8:	46bd      	mov	sp, r7
 800d8ca:	bd80      	pop	{r7, pc}

0800d8cc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d8cc:	b580      	push	{r7, lr}
 800d8ce:	b086      	sub	sp, #24
 800d8d0:	af00      	add	r7, sp, #0
 800d8d2:	60f8      	str	r0, [r7, #12]
 800d8d4:	460b      	mov	r3, r1
 800d8d6:	607a      	str	r2, [r7, #4]
 800d8d8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800d8da:	2300      	movs	r3, #0
 800d8dc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800d8de:	7afb      	ldrb	r3, [r7, #11]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d16e      	bne.n	800d9c2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800d8e4:	68fb      	ldr	r3, [r7, #12]
 800d8e6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800d8ea:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d8ec:	68fb      	ldr	r3, [r7, #12]
 800d8ee:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d8f2:	2b03      	cmp	r3, #3
 800d8f4:	f040 8098 	bne.w	800da28 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	689a      	ldr	r2, [r3, #8]
 800d8fc:	693b      	ldr	r3, [r7, #16]
 800d8fe:	68db      	ldr	r3, [r3, #12]
 800d900:	429a      	cmp	r2, r3
 800d902:	d913      	bls.n	800d92c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800d904:	693b      	ldr	r3, [r7, #16]
 800d906:	689a      	ldr	r2, [r3, #8]
 800d908:	693b      	ldr	r3, [r7, #16]
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	1ad2      	subs	r2, r2, r3
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	68da      	ldr	r2, [r3, #12]
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	689b      	ldr	r3, [r3, #8]
 800d91a:	4293      	cmp	r3, r2
 800d91c:	bf28      	it	cs
 800d91e:	4613      	movcs	r3, r2
 800d920:	461a      	mov	r2, r3
 800d922:	6879      	ldr	r1, [r7, #4]
 800d924:	68f8      	ldr	r0, [r7, #12]
 800d926:	f001 f9ae 	bl	800ec86 <USBD_CtlContinueRx>
 800d92a:	e07d      	b.n	800da28 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800d932:	f003 031f 	and.w	r3, r3, #31
 800d936:	2b02      	cmp	r3, #2
 800d938:	d014      	beq.n	800d964 <USBD_LL_DataOutStage+0x98>
 800d93a:	2b02      	cmp	r3, #2
 800d93c:	d81d      	bhi.n	800d97a <USBD_LL_DataOutStage+0xae>
 800d93e:	2b00      	cmp	r3, #0
 800d940:	d002      	beq.n	800d948 <USBD_LL_DataOutStage+0x7c>
 800d942:	2b01      	cmp	r3, #1
 800d944:	d003      	beq.n	800d94e <USBD_LL_DataOutStage+0x82>
 800d946:	e018      	b.n	800d97a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800d948:	2300      	movs	r3, #0
 800d94a:	75bb      	strb	r3, [r7, #22]
            break;
 800d94c:	e018      	b.n	800d980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800d94e:	68fb      	ldr	r3, [r7, #12]
 800d950:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d954:	b2db      	uxtb	r3, r3
 800d956:	4619      	mov	r1, r3
 800d958:	68f8      	ldr	r0, [r7, #12]
 800d95a:	f000 fa5e 	bl	800de1a <USBD_CoreFindIF>
 800d95e:	4603      	mov	r3, r0
 800d960:	75bb      	strb	r3, [r7, #22]
            break;
 800d962:	e00d      	b.n	800d980 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800d964:	68fb      	ldr	r3, [r7, #12]
 800d966:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800d96a:	b2db      	uxtb	r3, r3
 800d96c:	4619      	mov	r1, r3
 800d96e:	68f8      	ldr	r0, [r7, #12]
 800d970:	f000 fa60 	bl	800de34 <USBD_CoreFindEP>
 800d974:	4603      	mov	r3, r0
 800d976:	75bb      	strb	r3, [r7, #22]
            break;
 800d978:	e002      	b.n	800d980 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800d97a:	2300      	movs	r3, #0
 800d97c:	75bb      	strb	r3, [r7, #22]
            break;
 800d97e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800d980:	7dbb      	ldrb	r3, [r7, #22]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d119      	bne.n	800d9ba <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d98c:	b2db      	uxtb	r3, r3
 800d98e:	2b03      	cmp	r3, #3
 800d990:	d113      	bne.n	800d9ba <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800d992:	7dba      	ldrb	r2, [r7, #22]
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	32ae      	adds	r2, #174	; 0xae
 800d998:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d99c:	691b      	ldr	r3, [r3, #16]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d00b      	beq.n	800d9ba <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800d9a2:	7dba      	ldrb	r2, [r7, #22]
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800d9aa:	7dba      	ldrb	r2, [r7, #22]
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	32ae      	adds	r2, #174	; 0xae
 800d9b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9b4:	691b      	ldr	r3, [r3, #16]
 800d9b6:	68f8      	ldr	r0, [r7, #12]
 800d9b8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800d9ba:	68f8      	ldr	r0, [r7, #12]
 800d9bc:	f001 f974 	bl	800eca8 <USBD_CtlSendStatus>
 800d9c0:	e032      	b.n	800da28 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d9c2:	7afb      	ldrb	r3, [r7, #11]
 800d9c4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9c8:	b2db      	uxtb	r3, r3
 800d9ca:	4619      	mov	r1, r3
 800d9cc:	68f8      	ldr	r0, [r7, #12]
 800d9ce:	f000 fa31 	bl	800de34 <USBD_CoreFindEP>
 800d9d2:	4603      	mov	r3, r0
 800d9d4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d9d6:	7dbb      	ldrb	r3, [r7, #22]
 800d9d8:	2bff      	cmp	r3, #255	; 0xff
 800d9da:	d025      	beq.n	800da28 <USBD_LL_DataOutStage+0x15c>
 800d9dc:	7dbb      	ldrb	r3, [r7, #22]
 800d9de:	2b00      	cmp	r3, #0
 800d9e0:	d122      	bne.n	800da28 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d9e8:	b2db      	uxtb	r3, r3
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d117      	bne.n	800da1e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d9ee:	7dba      	ldrb	r2, [r7, #22]
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	32ae      	adds	r2, #174	; 0xae
 800d9f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9f8:	699b      	ldr	r3, [r3, #24]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00f      	beq.n	800da1e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d9fe:	7dba      	ldrb	r2, [r7, #22]
 800da00:	68fb      	ldr	r3, [r7, #12]
 800da02:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800da06:	7dba      	ldrb	r2, [r7, #22]
 800da08:	68fb      	ldr	r3, [r7, #12]
 800da0a:	32ae      	adds	r2, #174	; 0xae
 800da0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da10:	699b      	ldr	r3, [r3, #24]
 800da12:	7afa      	ldrb	r2, [r7, #11]
 800da14:	4611      	mov	r1, r2
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	4798      	blx	r3
 800da1a:	4603      	mov	r3, r0
 800da1c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800da1e:	7dfb      	ldrb	r3, [r7, #23]
 800da20:	2b00      	cmp	r3, #0
 800da22:	d001      	beq.n	800da28 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800da24:	7dfb      	ldrb	r3, [r7, #23]
 800da26:	e000      	b.n	800da2a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800da28:	2300      	movs	r3, #0
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3718      	adds	r7, #24
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}

0800da32 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800da32:	b580      	push	{r7, lr}
 800da34:	b086      	sub	sp, #24
 800da36:	af00      	add	r7, sp, #0
 800da38:	60f8      	str	r0, [r7, #12]
 800da3a:	460b      	mov	r3, r1
 800da3c:	607a      	str	r2, [r7, #4]
 800da3e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800da40:	7afb      	ldrb	r3, [r7, #11]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d16f      	bne.n	800db26 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	3314      	adds	r3, #20
 800da4a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800da4c:	68fb      	ldr	r3, [r7, #12]
 800da4e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800da52:	2b02      	cmp	r3, #2
 800da54:	d15a      	bne.n	800db0c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	689a      	ldr	r2, [r3, #8]
 800da5a:	693b      	ldr	r3, [r7, #16]
 800da5c:	68db      	ldr	r3, [r3, #12]
 800da5e:	429a      	cmp	r2, r3
 800da60:	d914      	bls.n	800da8c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800da62:	693b      	ldr	r3, [r7, #16]
 800da64:	689a      	ldr	r2, [r3, #8]
 800da66:	693b      	ldr	r3, [r7, #16]
 800da68:	68db      	ldr	r3, [r3, #12]
 800da6a:	1ad2      	subs	r2, r2, r3
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800da70:	693b      	ldr	r3, [r7, #16]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	461a      	mov	r2, r3
 800da76:	6879      	ldr	r1, [r7, #4]
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f001 f8d6 	bl	800ec2a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800da7e:	2300      	movs	r3, #0
 800da80:	2200      	movs	r2, #0
 800da82:	2100      	movs	r1, #0
 800da84:	68f8      	ldr	r0, [r7, #12]
 800da86:	f004 faf7 	bl	8012078 <USBD_LL_PrepareReceive>
 800da8a:	e03f      	b.n	800db0c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800da8c:	693b      	ldr	r3, [r7, #16]
 800da8e:	68da      	ldr	r2, [r3, #12]
 800da90:	693b      	ldr	r3, [r7, #16]
 800da92:	689b      	ldr	r3, [r3, #8]
 800da94:	429a      	cmp	r2, r3
 800da96:	d11c      	bne.n	800dad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	685a      	ldr	r2, [r3, #4]
 800da9c:	693b      	ldr	r3, [r7, #16]
 800da9e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d316      	bcc.n	800dad2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800daa4:	693b      	ldr	r3, [r7, #16]
 800daa6:	685a      	ldr	r2, [r3, #4]
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800daae:	429a      	cmp	r2, r3
 800dab0:	d20f      	bcs.n	800dad2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800dab2:	2200      	movs	r2, #0
 800dab4:	2100      	movs	r1, #0
 800dab6:	68f8      	ldr	r0, [r7, #12]
 800dab8:	f001 f8b7 	bl	800ec2a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	2200      	movs	r2, #0
 800dac0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dac4:	2300      	movs	r3, #0
 800dac6:	2200      	movs	r2, #0
 800dac8:	2100      	movs	r1, #0
 800daca:	68f8      	ldr	r0, [r7, #12]
 800dacc:	f004 fad4 	bl	8012078 <USBD_LL_PrepareReceive>
 800dad0:	e01c      	b.n	800db0c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dad8:	b2db      	uxtb	r3, r3
 800dada:	2b03      	cmp	r3, #3
 800dadc:	d10f      	bne.n	800dafe <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	d009      	beq.n	800dafe <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	2200      	movs	r2, #0
 800daee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800daf8:	68db      	ldr	r3, [r3, #12]
 800dafa:	68f8      	ldr	r0, [r7, #12]
 800dafc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800dafe:	2180      	movs	r1, #128	; 0x80
 800db00:	68f8      	ldr	r0, [r7, #12]
 800db02:	f004 fa0f 	bl	8011f24 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800db06:	68f8      	ldr	r0, [r7, #12]
 800db08:	f001 f8e1 	bl	800ecce <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800db12:	2b00      	cmp	r3, #0
 800db14:	d03a      	beq.n	800db8c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800db16:	68f8      	ldr	r0, [r7, #12]
 800db18:	f7ff fe42 	bl	800d7a0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	2200      	movs	r2, #0
 800db20:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800db24:	e032      	b.n	800db8c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800db26:	7afb      	ldrb	r3, [r7, #11]
 800db28:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800db2c:	b2db      	uxtb	r3, r3
 800db2e:	4619      	mov	r1, r3
 800db30:	68f8      	ldr	r0, [r7, #12]
 800db32:	f000 f97f 	bl	800de34 <USBD_CoreFindEP>
 800db36:	4603      	mov	r3, r0
 800db38:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800db3a:	7dfb      	ldrb	r3, [r7, #23]
 800db3c:	2bff      	cmp	r3, #255	; 0xff
 800db3e:	d025      	beq.n	800db8c <USBD_LL_DataInStage+0x15a>
 800db40:	7dfb      	ldrb	r3, [r7, #23]
 800db42:	2b00      	cmp	r3, #0
 800db44:	d122      	bne.n	800db8c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800db4c:	b2db      	uxtb	r3, r3
 800db4e:	2b03      	cmp	r3, #3
 800db50:	d11c      	bne.n	800db8c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800db52:	7dfa      	ldrb	r2, [r7, #23]
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	32ae      	adds	r2, #174	; 0xae
 800db58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db5c:	695b      	ldr	r3, [r3, #20]
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d014      	beq.n	800db8c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800db62:	7dfa      	ldrb	r2, [r7, #23]
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800db6a:	7dfa      	ldrb	r2, [r7, #23]
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	32ae      	adds	r2, #174	; 0xae
 800db70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db74:	695b      	ldr	r3, [r3, #20]
 800db76:	7afa      	ldrb	r2, [r7, #11]
 800db78:	4611      	mov	r1, r2
 800db7a:	68f8      	ldr	r0, [r7, #12]
 800db7c:	4798      	blx	r3
 800db7e:	4603      	mov	r3, r0
 800db80:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800db82:	7dbb      	ldrb	r3, [r7, #22]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d001      	beq.n	800db8c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800db88:	7dbb      	ldrb	r3, [r7, #22]
 800db8a:	e000      	b.n	800db8e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800db8c:	2300      	movs	r3, #0
}
 800db8e:	4618      	mov	r0, r3
 800db90:	3718      	adds	r7, #24
 800db92:	46bd      	mov	sp, r7
 800db94:	bd80      	pop	{r7, pc}

0800db96 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800db96:	b580      	push	{r7, lr}
 800db98:	b084      	sub	sp, #16
 800db9a:	af00      	add	r7, sp, #0
 800db9c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800db9e:	2300      	movs	r3, #0
 800dba0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	2200      	movs	r2, #0
 800dbae:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	2200      	movs	r2, #0
 800dbbc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	2200      	movs	r2, #0
 800dbc4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d014      	beq.n	800dbfc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dbd2:	687b      	ldr	r3, [r7, #4]
 800dbd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbd8:	685b      	ldr	r3, [r3, #4]
 800dbda:	2b00      	cmp	r3, #0
 800dbdc:	d00e      	beq.n	800dbfc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbe4:	685b      	ldr	r3, [r3, #4]
 800dbe6:	687a      	ldr	r2, [r7, #4]
 800dbe8:	6852      	ldr	r2, [r2, #4]
 800dbea:	b2d2      	uxtb	r2, r2
 800dbec:	4611      	mov	r1, r2
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	4798      	blx	r3
 800dbf2:	4603      	mov	r3, r0
 800dbf4:	2b00      	cmp	r3, #0
 800dbf6:	d001      	beq.n	800dbfc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800dbf8:	2303      	movs	r3, #3
 800dbfa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dbfc:	2340      	movs	r3, #64	; 0x40
 800dbfe:	2200      	movs	r2, #0
 800dc00:	2100      	movs	r1, #0
 800dc02:	6878      	ldr	r0, [r7, #4]
 800dc04:	f004 f949 	bl	8011e9a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	2240      	movs	r2, #64	; 0x40
 800dc14:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800dc18:	2340      	movs	r3, #64	; 0x40
 800dc1a:	2200      	movs	r2, #0
 800dc1c:	2180      	movs	r1, #128	; 0x80
 800dc1e:	6878      	ldr	r0, [r7, #4]
 800dc20:	f004 f93b 	bl	8011e9a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	2201      	movs	r2, #1
 800dc28:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	2240      	movs	r2, #64	; 0x40
 800dc2e:	621a      	str	r2, [r3, #32]

  return ret;
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800dc3a:	b480      	push	{r7}
 800dc3c:	b083      	sub	sp, #12
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	460b      	mov	r3, r1
 800dc44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	78fa      	ldrb	r2, [r7, #3]
 800dc4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800dc4c:	2300      	movs	r3, #0
}
 800dc4e:	4618      	mov	r0, r3
 800dc50:	370c      	adds	r7, #12
 800dc52:	46bd      	mov	sp, r7
 800dc54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc58:	4770      	bx	lr

0800dc5a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800dc5a:	b480      	push	{r7}
 800dc5c:	b083      	sub	sp, #12
 800dc5e:	af00      	add	r7, sp, #0
 800dc60:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc68:	b2da      	uxtb	r2, r3
 800dc6a:	687b      	ldr	r3, [r7, #4]
 800dc6c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800dc70:	687b      	ldr	r3, [r7, #4]
 800dc72:	2204      	movs	r2, #4
 800dc74:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800dc78:	2300      	movs	r3, #0
}
 800dc7a:	4618      	mov	r0, r3
 800dc7c:	370c      	adds	r7, #12
 800dc7e:	46bd      	mov	sp, r7
 800dc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc84:	4770      	bx	lr

0800dc86 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800dc86:	b480      	push	{r7}
 800dc88:	b083      	sub	sp, #12
 800dc8a:	af00      	add	r7, sp, #0
 800dc8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dc94:	b2db      	uxtb	r3, r3
 800dc96:	2b04      	cmp	r3, #4
 800dc98:	d106      	bne.n	800dca8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800dca0:	b2da      	uxtb	r2, r3
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800dca8:	2300      	movs	r3, #0
}
 800dcaa:	4618      	mov	r0, r3
 800dcac:	370c      	adds	r7, #12
 800dcae:	46bd      	mov	sp, r7
 800dcb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcb4:	4770      	bx	lr

0800dcb6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800dcb6:	b580      	push	{r7, lr}
 800dcb8:	b082      	sub	sp, #8
 800dcba:	af00      	add	r7, sp, #0
 800dcbc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcbe:	687b      	ldr	r3, [r7, #4]
 800dcc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dcc4:	b2db      	uxtb	r3, r3
 800dcc6:	2b03      	cmp	r3, #3
 800dcc8:	d110      	bne.n	800dcec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d00b      	beq.n	800dcec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcda:	69db      	ldr	r3, [r3, #28]
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	d005      	beq.n	800dcec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dce6:	69db      	ldr	r3, [r3, #28]
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800dcec:	2300      	movs	r3, #0
}
 800dcee:	4618      	mov	r0, r3
 800dcf0:	3708      	adds	r7, #8
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	bd80      	pop	{r7, pc}

0800dcf6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800dcf6:	b580      	push	{r7, lr}
 800dcf8:	b082      	sub	sp, #8
 800dcfa:	af00      	add	r7, sp, #0
 800dcfc:	6078      	str	r0, [r7, #4]
 800dcfe:	460b      	mov	r3, r1
 800dd00:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	32ae      	adds	r2, #174	; 0xae
 800dd0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d101      	bne.n	800dd18 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd14:	2303      	movs	r3, #3
 800dd16:	e01c      	b.n	800dd52 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd1e:	b2db      	uxtb	r3, r3
 800dd20:	2b03      	cmp	r3, #3
 800dd22:	d115      	bne.n	800dd50 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	32ae      	adds	r2, #174	; 0xae
 800dd2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd32:	6a1b      	ldr	r3, [r3, #32]
 800dd34:	2b00      	cmp	r3, #0
 800dd36:	d00b      	beq.n	800dd50 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	32ae      	adds	r2, #174	; 0xae
 800dd42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd46:	6a1b      	ldr	r3, [r3, #32]
 800dd48:	78fa      	ldrb	r2, [r7, #3]
 800dd4a:	4611      	mov	r1, r2
 800dd4c:	6878      	ldr	r0, [r7, #4]
 800dd4e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800dd50:	2300      	movs	r3, #0
}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3708      	adds	r7, #8
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b082      	sub	sp, #8
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	6078      	str	r0, [r7, #4]
 800dd62:	460b      	mov	r3, r1
 800dd64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	32ae      	adds	r2, #174	; 0xae
 800dd70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d101      	bne.n	800dd7c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800dd78:	2303      	movs	r3, #3
 800dd7a:	e01c      	b.n	800ddb6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	2b03      	cmp	r3, #3
 800dd86:	d115      	bne.n	800ddb4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	32ae      	adds	r2, #174	; 0xae
 800dd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dd96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d00b      	beq.n	800ddb4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800dd9c:	687b      	ldr	r3, [r7, #4]
 800dd9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	32ae      	adds	r2, #174	; 0xae
 800dda6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ddac:	78fa      	ldrb	r2, [r7, #3]
 800ddae:	4611      	mov	r1, r2
 800ddb0:	6878      	ldr	r0, [r7, #4]
 800ddb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ddb4:	2300      	movs	r3, #0
}
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	3708      	adds	r7, #8
 800ddba:	46bd      	mov	sp, r7
 800ddbc:	bd80      	pop	{r7, pc}

0800ddbe <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800ddbe:	b480      	push	{r7}
 800ddc0:	b083      	sub	sp, #12
 800ddc2:	af00      	add	r7, sp, #0
 800ddc4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ddc6:	2300      	movs	r3, #0
}
 800ddc8:	4618      	mov	r0, r3
 800ddca:	370c      	adds	r7, #12
 800ddcc:	46bd      	mov	sp, r7
 800ddce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddd2:	4770      	bx	lr

0800ddd4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800ddd4:	b580      	push	{r7, lr}
 800ddd6:	b084      	sub	sp, #16
 800ddd8:	af00      	add	r7, sp, #0
 800ddda:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800dddc:	2300      	movs	r3, #0
 800ddde:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2201      	movs	r2, #1
 800dde4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d00e      	beq.n	800de10 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ddf8:	685b      	ldr	r3, [r3, #4]
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	6852      	ldr	r2, [r2, #4]
 800ddfe:	b2d2      	uxtb	r2, r2
 800de00:	4611      	mov	r1, r2
 800de02:	6878      	ldr	r0, [r7, #4]
 800de04:	4798      	blx	r3
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800de0c:	2303      	movs	r3, #3
 800de0e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800de10:	7bfb      	ldrb	r3, [r7, #15]
}
 800de12:	4618      	mov	r0, r3
 800de14:	3710      	adds	r7, #16
 800de16:	46bd      	mov	sp, r7
 800de18:	bd80      	pop	{r7, pc}

0800de1a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de1a:	b480      	push	{r7}
 800de1c:	b083      	sub	sp, #12
 800de1e:	af00      	add	r7, sp, #0
 800de20:	6078      	str	r0, [r7, #4]
 800de22:	460b      	mov	r3, r1
 800de24:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de26:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de28:	4618      	mov	r0, r3
 800de2a:	370c      	adds	r7, #12
 800de2c:	46bd      	mov	sp, r7
 800de2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de32:	4770      	bx	lr

0800de34 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800de34:	b480      	push	{r7}
 800de36:	b083      	sub	sp, #12
 800de38:	af00      	add	r7, sp, #0
 800de3a:	6078      	str	r0, [r7, #4]
 800de3c:	460b      	mov	r3, r1
 800de3e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800de40:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800de42:	4618      	mov	r0, r3
 800de44:	370c      	adds	r7, #12
 800de46:	46bd      	mov	sp, r7
 800de48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de4c:	4770      	bx	lr

0800de4e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800de4e:	b580      	push	{r7, lr}
 800de50:	b086      	sub	sp, #24
 800de52:	af00      	add	r7, sp, #0
 800de54:	6078      	str	r0, [r7, #4]
 800de56:	460b      	mov	r3, r1
 800de58:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800de5a:	687b      	ldr	r3, [r7, #4]
 800de5c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800de62:	2300      	movs	r3, #0
 800de64:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800de66:	68fb      	ldr	r3, [r7, #12]
 800de68:	885b      	ldrh	r3, [r3, #2]
 800de6a:	b29a      	uxth	r2, r3
 800de6c:	68fb      	ldr	r3, [r7, #12]
 800de6e:	781b      	ldrb	r3, [r3, #0]
 800de70:	b29b      	uxth	r3, r3
 800de72:	429a      	cmp	r2, r3
 800de74:	d920      	bls.n	800deb8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800de76:	68fb      	ldr	r3, [r7, #12]
 800de78:	781b      	ldrb	r3, [r3, #0]
 800de7a:	b29b      	uxth	r3, r3
 800de7c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800de7e:	e013      	b.n	800dea8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800de80:	f107 030a 	add.w	r3, r7, #10
 800de84:	4619      	mov	r1, r3
 800de86:	6978      	ldr	r0, [r7, #20]
 800de88:	f000 f81b 	bl	800dec2 <USBD_GetNextDesc>
 800de8c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800de8e:	697b      	ldr	r3, [r7, #20]
 800de90:	785b      	ldrb	r3, [r3, #1]
 800de92:	2b05      	cmp	r3, #5
 800de94:	d108      	bne.n	800dea8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800de96:	697b      	ldr	r3, [r7, #20]
 800de98:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800de9a:	693b      	ldr	r3, [r7, #16]
 800de9c:	789b      	ldrb	r3, [r3, #2]
 800de9e:	78fa      	ldrb	r2, [r7, #3]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	d008      	beq.n	800deb6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800dea4:	2300      	movs	r3, #0
 800dea6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	885b      	ldrh	r3, [r3, #2]
 800deac:	b29a      	uxth	r2, r3
 800deae:	897b      	ldrh	r3, [r7, #10]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d8e5      	bhi.n	800de80 <USBD_GetEpDesc+0x32>
 800deb4:	e000      	b.n	800deb8 <USBD_GetEpDesc+0x6a>
          break;
 800deb6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800deb8:	693b      	ldr	r3, [r7, #16]
}
 800deba:	4618      	mov	r0, r3
 800debc:	3718      	adds	r7, #24
 800debe:	46bd      	mov	sp, r7
 800dec0:	bd80      	pop	{r7, pc}

0800dec2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800dec2:	b480      	push	{r7}
 800dec4:	b085      	sub	sp, #20
 800dec6:	af00      	add	r7, sp, #0
 800dec8:	6078      	str	r0, [r7, #4]
 800deca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800ded0:	683b      	ldr	r3, [r7, #0]
 800ded2:	881a      	ldrh	r2, [r3, #0]
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	781b      	ldrb	r3, [r3, #0]
 800ded8:	b29b      	uxth	r3, r3
 800deda:	4413      	add	r3, r2
 800dedc:	b29a      	uxth	r2, r3
 800dede:	683b      	ldr	r3, [r7, #0]
 800dee0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800dee2:	68fb      	ldr	r3, [r7, #12]
 800dee4:	781b      	ldrb	r3, [r3, #0]
 800dee6:	461a      	mov	r2, r3
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	4413      	add	r3, r2
 800deec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800deee:	68fb      	ldr	r3, [r7, #12]
}
 800def0:	4618      	mov	r0, r3
 800def2:	3714      	adds	r7, #20
 800def4:	46bd      	mov	sp, r7
 800def6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defa:	4770      	bx	lr

0800defc <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800defc:	b480      	push	{r7}
 800defe:	b087      	sub	sp, #28
 800df00:	af00      	add	r7, sp, #0
 800df02:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800df04:	687b      	ldr	r3, [r7, #4]
 800df06:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800df08:	697b      	ldr	r3, [r7, #20]
 800df0a:	781b      	ldrb	r3, [r3, #0]
 800df0c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800df0e:	697b      	ldr	r3, [r7, #20]
 800df10:	3301      	adds	r3, #1
 800df12:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800df14:	697b      	ldr	r3, [r7, #20]
 800df16:	781b      	ldrb	r3, [r3, #0]
 800df18:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800df1a:	8a3b      	ldrh	r3, [r7, #16]
 800df1c:	021b      	lsls	r3, r3, #8
 800df1e:	b21a      	sxth	r2, r3
 800df20:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800df24:	4313      	orrs	r3, r2
 800df26:	b21b      	sxth	r3, r3
 800df28:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800df2a:	89fb      	ldrh	r3, [r7, #14]
}
 800df2c:	4618      	mov	r0, r3
 800df2e:	371c      	adds	r7, #28
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr

0800df38 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df38:	b580      	push	{r7, lr}
 800df3a:	b084      	sub	sp, #16
 800df3c:	af00      	add	r7, sp, #0
 800df3e:	6078      	str	r0, [r7, #4]
 800df40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800df42:	2300      	movs	r3, #0
 800df44:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800df46:	683b      	ldr	r3, [r7, #0]
 800df48:	781b      	ldrb	r3, [r3, #0]
 800df4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800df4e:	2b40      	cmp	r3, #64	; 0x40
 800df50:	d005      	beq.n	800df5e <USBD_StdDevReq+0x26>
 800df52:	2b40      	cmp	r3, #64	; 0x40
 800df54:	d857      	bhi.n	800e006 <USBD_StdDevReq+0xce>
 800df56:	2b00      	cmp	r3, #0
 800df58:	d00f      	beq.n	800df7a <USBD_StdDevReq+0x42>
 800df5a:	2b20      	cmp	r3, #32
 800df5c:	d153      	bne.n	800e006 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	32ae      	adds	r2, #174	; 0xae
 800df68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df6c:	689b      	ldr	r3, [r3, #8]
 800df6e:	6839      	ldr	r1, [r7, #0]
 800df70:	6878      	ldr	r0, [r7, #4]
 800df72:	4798      	blx	r3
 800df74:	4603      	mov	r3, r0
 800df76:	73fb      	strb	r3, [r7, #15]
      break;
 800df78:	e04a      	b.n	800e010 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800df7a:	683b      	ldr	r3, [r7, #0]
 800df7c:	785b      	ldrb	r3, [r3, #1]
 800df7e:	2b09      	cmp	r3, #9
 800df80:	d83b      	bhi.n	800dffa <USBD_StdDevReq+0xc2>
 800df82:	a201      	add	r2, pc, #4	; (adr r2, 800df88 <USBD_StdDevReq+0x50>)
 800df84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df88:	0800dfdd 	.word	0x0800dfdd
 800df8c:	0800dff1 	.word	0x0800dff1
 800df90:	0800dffb 	.word	0x0800dffb
 800df94:	0800dfe7 	.word	0x0800dfe7
 800df98:	0800dffb 	.word	0x0800dffb
 800df9c:	0800dfbb 	.word	0x0800dfbb
 800dfa0:	0800dfb1 	.word	0x0800dfb1
 800dfa4:	0800dffb 	.word	0x0800dffb
 800dfa8:	0800dfd3 	.word	0x0800dfd3
 800dfac:	0800dfc5 	.word	0x0800dfc5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800dfb0:	6839      	ldr	r1, [r7, #0]
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f000 fa3c 	bl	800e430 <USBD_GetDescriptor>
          break;
 800dfb8:	e024      	b.n	800e004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800dfba:	6839      	ldr	r1, [r7, #0]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f000 fbcb 	bl	800e758 <USBD_SetAddress>
          break;
 800dfc2:	e01f      	b.n	800e004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800dfc4:	6839      	ldr	r1, [r7, #0]
 800dfc6:	6878      	ldr	r0, [r7, #4]
 800dfc8:	f000 fc0a 	bl	800e7e0 <USBD_SetConfig>
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73fb      	strb	r3, [r7, #15]
          break;
 800dfd0:	e018      	b.n	800e004 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800dfd2:	6839      	ldr	r1, [r7, #0]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f000 fcad 	bl	800e934 <USBD_GetConfig>
          break;
 800dfda:	e013      	b.n	800e004 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	6878      	ldr	r0, [r7, #4]
 800dfe0:	f000 fcde 	bl	800e9a0 <USBD_GetStatus>
          break;
 800dfe4:	e00e      	b.n	800e004 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800dfe6:	6839      	ldr	r1, [r7, #0]
 800dfe8:	6878      	ldr	r0, [r7, #4]
 800dfea:	f000 fd0d 	bl	800ea08 <USBD_SetFeature>
          break;
 800dfee:	e009      	b.n	800e004 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800dff0:	6839      	ldr	r1, [r7, #0]
 800dff2:	6878      	ldr	r0, [r7, #4]
 800dff4:	f000 fd31 	bl	800ea5a <USBD_ClrFeature>
          break;
 800dff8:	e004      	b.n	800e004 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800dffa:	6839      	ldr	r1, [r7, #0]
 800dffc:	6878      	ldr	r0, [r7, #4]
 800dffe:	f000 fd88 	bl	800eb12 <USBD_CtlError>
          break;
 800e002:	bf00      	nop
      }
      break;
 800e004:	e004      	b.n	800e010 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e006:	6839      	ldr	r1, [r7, #0]
 800e008:	6878      	ldr	r0, [r7, #4]
 800e00a:	f000 fd82 	bl	800eb12 <USBD_CtlError>
      break;
 800e00e:	bf00      	nop
  }

  return ret;
 800e010:	7bfb      	ldrb	r3, [r7, #15]
}
 800e012:	4618      	mov	r0, r3
 800e014:	3710      	adds	r7, #16
 800e016:	46bd      	mov	sp, r7
 800e018:	bd80      	pop	{r7, pc}
 800e01a:	bf00      	nop

0800e01c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b084      	sub	sp, #16
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
 800e024:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e026:	2300      	movs	r3, #0
 800e028:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e02a:	683b      	ldr	r3, [r7, #0]
 800e02c:	781b      	ldrb	r3, [r3, #0]
 800e02e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e032:	2b40      	cmp	r3, #64	; 0x40
 800e034:	d005      	beq.n	800e042 <USBD_StdItfReq+0x26>
 800e036:	2b40      	cmp	r3, #64	; 0x40
 800e038:	d852      	bhi.n	800e0e0 <USBD_StdItfReq+0xc4>
 800e03a:	2b00      	cmp	r3, #0
 800e03c:	d001      	beq.n	800e042 <USBD_StdItfReq+0x26>
 800e03e:	2b20      	cmp	r3, #32
 800e040:	d14e      	bne.n	800e0e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e048:	b2db      	uxtb	r3, r3
 800e04a:	3b01      	subs	r3, #1
 800e04c:	2b02      	cmp	r3, #2
 800e04e:	d840      	bhi.n	800e0d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	889b      	ldrh	r3, [r3, #4]
 800e054:	b2db      	uxtb	r3, r3
 800e056:	2b01      	cmp	r3, #1
 800e058:	d836      	bhi.n	800e0c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e05a:	683b      	ldr	r3, [r7, #0]
 800e05c:	889b      	ldrh	r3, [r3, #4]
 800e05e:	b2db      	uxtb	r3, r3
 800e060:	4619      	mov	r1, r3
 800e062:	6878      	ldr	r0, [r7, #4]
 800e064:	f7ff fed9 	bl	800de1a <USBD_CoreFindIF>
 800e068:	4603      	mov	r3, r0
 800e06a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e06c:	7bbb      	ldrb	r3, [r7, #14]
 800e06e:	2bff      	cmp	r3, #255	; 0xff
 800e070:	d01d      	beq.n	800e0ae <USBD_StdItfReq+0x92>
 800e072:	7bbb      	ldrb	r3, [r7, #14]
 800e074:	2b00      	cmp	r3, #0
 800e076:	d11a      	bne.n	800e0ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e078:	7bba      	ldrb	r2, [r7, #14]
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	32ae      	adds	r2, #174	; 0xae
 800e07e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e082:	689b      	ldr	r3, [r3, #8]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d00f      	beq.n	800e0a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e088:	7bba      	ldrb	r2, [r7, #14]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e090:	7bba      	ldrb	r2, [r7, #14]
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	32ae      	adds	r2, #174	; 0xae
 800e096:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e09a:	689b      	ldr	r3, [r3, #8]
 800e09c:	6839      	ldr	r1, [r7, #0]
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	4798      	blx	r3
 800e0a2:	4603      	mov	r3, r0
 800e0a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0a6:	e004      	b.n	800e0b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e0a8:	2303      	movs	r3, #3
 800e0aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e0ac:	e001      	b.n	800e0b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e0ae:	2303      	movs	r3, #3
 800e0b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e0b2:	683b      	ldr	r3, [r7, #0]
 800e0b4:	88db      	ldrh	r3, [r3, #6]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d110      	bne.n	800e0dc <USBD_StdItfReq+0xc0>
 800e0ba:	7bfb      	ldrb	r3, [r7, #15]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d10d      	bne.n	800e0dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e0c0:	6878      	ldr	r0, [r7, #4]
 800e0c2:	f000 fdf1 	bl	800eca8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e0c6:	e009      	b.n	800e0dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e0c8:	6839      	ldr	r1, [r7, #0]
 800e0ca:	6878      	ldr	r0, [r7, #4]
 800e0cc:	f000 fd21 	bl	800eb12 <USBD_CtlError>
          break;
 800e0d0:	e004      	b.n	800e0dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e0d2:	6839      	ldr	r1, [r7, #0]
 800e0d4:	6878      	ldr	r0, [r7, #4]
 800e0d6:	f000 fd1c 	bl	800eb12 <USBD_CtlError>
          break;
 800e0da:	e000      	b.n	800e0de <USBD_StdItfReq+0xc2>
          break;
 800e0dc:	bf00      	nop
      }
      break;
 800e0de:	e004      	b.n	800e0ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e0e0:	6839      	ldr	r1, [r7, #0]
 800e0e2:	6878      	ldr	r0, [r7, #4]
 800e0e4:	f000 fd15 	bl	800eb12 <USBD_CtlError>
      break;
 800e0e8:	bf00      	nop
  }

  return ret;
 800e0ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3710      	adds	r7, #16
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b084      	sub	sp, #16
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e0fe:	2300      	movs	r3, #0
 800e100:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e102:	683b      	ldr	r3, [r7, #0]
 800e104:	889b      	ldrh	r3, [r3, #4]
 800e106:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e108:	683b      	ldr	r3, [r7, #0]
 800e10a:	781b      	ldrb	r3, [r3, #0]
 800e10c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e110:	2b40      	cmp	r3, #64	; 0x40
 800e112:	d007      	beq.n	800e124 <USBD_StdEPReq+0x30>
 800e114:	2b40      	cmp	r3, #64	; 0x40
 800e116:	f200 817f 	bhi.w	800e418 <USBD_StdEPReq+0x324>
 800e11a:	2b00      	cmp	r3, #0
 800e11c:	d02a      	beq.n	800e174 <USBD_StdEPReq+0x80>
 800e11e:	2b20      	cmp	r3, #32
 800e120:	f040 817a 	bne.w	800e418 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e124:	7bbb      	ldrb	r3, [r7, #14]
 800e126:	4619      	mov	r1, r3
 800e128:	6878      	ldr	r0, [r7, #4]
 800e12a:	f7ff fe83 	bl	800de34 <USBD_CoreFindEP>
 800e12e:	4603      	mov	r3, r0
 800e130:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e132:	7b7b      	ldrb	r3, [r7, #13]
 800e134:	2bff      	cmp	r3, #255	; 0xff
 800e136:	f000 8174 	beq.w	800e422 <USBD_StdEPReq+0x32e>
 800e13a:	7b7b      	ldrb	r3, [r7, #13]
 800e13c:	2b00      	cmp	r3, #0
 800e13e:	f040 8170 	bne.w	800e422 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e142:	7b7a      	ldrb	r2, [r7, #13]
 800e144:	687b      	ldr	r3, [r7, #4]
 800e146:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e14a:	7b7a      	ldrb	r2, [r7, #13]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	32ae      	adds	r2, #174	; 0xae
 800e150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e154:	689b      	ldr	r3, [r3, #8]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f000 8163 	beq.w	800e422 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e15c:	7b7a      	ldrb	r2, [r7, #13]
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	32ae      	adds	r2, #174	; 0xae
 800e162:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e166:	689b      	ldr	r3, [r3, #8]
 800e168:	6839      	ldr	r1, [r7, #0]
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	4798      	blx	r3
 800e16e:	4603      	mov	r3, r0
 800e170:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e172:	e156      	b.n	800e422 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e174:	683b      	ldr	r3, [r7, #0]
 800e176:	785b      	ldrb	r3, [r3, #1]
 800e178:	2b03      	cmp	r3, #3
 800e17a:	d008      	beq.n	800e18e <USBD_StdEPReq+0x9a>
 800e17c:	2b03      	cmp	r3, #3
 800e17e:	f300 8145 	bgt.w	800e40c <USBD_StdEPReq+0x318>
 800e182:	2b00      	cmp	r3, #0
 800e184:	f000 809b 	beq.w	800e2be <USBD_StdEPReq+0x1ca>
 800e188:	2b01      	cmp	r3, #1
 800e18a:	d03c      	beq.n	800e206 <USBD_StdEPReq+0x112>
 800e18c:	e13e      	b.n	800e40c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e194:	b2db      	uxtb	r3, r3
 800e196:	2b02      	cmp	r3, #2
 800e198:	d002      	beq.n	800e1a0 <USBD_StdEPReq+0xac>
 800e19a:	2b03      	cmp	r3, #3
 800e19c:	d016      	beq.n	800e1cc <USBD_StdEPReq+0xd8>
 800e19e:	e02c      	b.n	800e1fa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e1a0:	7bbb      	ldrb	r3, [r7, #14]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d00d      	beq.n	800e1c2 <USBD_StdEPReq+0xce>
 800e1a6:	7bbb      	ldrb	r3, [r7, #14]
 800e1a8:	2b80      	cmp	r3, #128	; 0x80
 800e1aa:	d00a      	beq.n	800e1c2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1ac:	7bbb      	ldrb	r3, [r7, #14]
 800e1ae:	4619      	mov	r1, r3
 800e1b0:	6878      	ldr	r0, [r7, #4]
 800e1b2:	f003 feb7 	bl	8011f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e1b6:	2180      	movs	r1, #128	; 0x80
 800e1b8:	6878      	ldr	r0, [r7, #4]
 800e1ba:	f003 feb3 	bl	8011f24 <USBD_LL_StallEP>
 800e1be:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e1c0:	e020      	b.n	800e204 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e1c2:	6839      	ldr	r1, [r7, #0]
 800e1c4:	6878      	ldr	r0, [r7, #4]
 800e1c6:	f000 fca4 	bl	800eb12 <USBD_CtlError>
              break;
 800e1ca:	e01b      	b.n	800e204 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	885b      	ldrh	r3, [r3, #2]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d10e      	bne.n	800e1f2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e1d4:	7bbb      	ldrb	r3, [r7, #14]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d00b      	beq.n	800e1f2 <USBD_StdEPReq+0xfe>
 800e1da:	7bbb      	ldrb	r3, [r7, #14]
 800e1dc:	2b80      	cmp	r3, #128	; 0x80
 800e1de:	d008      	beq.n	800e1f2 <USBD_StdEPReq+0xfe>
 800e1e0:	683b      	ldr	r3, [r7, #0]
 800e1e2:	88db      	ldrh	r3, [r3, #6]
 800e1e4:	2b00      	cmp	r3, #0
 800e1e6:	d104      	bne.n	800e1f2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e1e8:	7bbb      	ldrb	r3, [r7, #14]
 800e1ea:	4619      	mov	r1, r3
 800e1ec:	6878      	ldr	r0, [r7, #4]
 800e1ee:	f003 fe99 	bl	8011f24 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e1f2:	6878      	ldr	r0, [r7, #4]
 800e1f4:	f000 fd58 	bl	800eca8 <USBD_CtlSendStatus>

              break;
 800e1f8:	e004      	b.n	800e204 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e1fa:	6839      	ldr	r1, [r7, #0]
 800e1fc:	6878      	ldr	r0, [r7, #4]
 800e1fe:	f000 fc88 	bl	800eb12 <USBD_CtlError>
              break;
 800e202:	bf00      	nop
          }
          break;
 800e204:	e107      	b.n	800e416 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e20c:	b2db      	uxtb	r3, r3
 800e20e:	2b02      	cmp	r3, #2
 800e210:	d002      	beq.n	800e218 <USBD_StdEPReq+0x124>
 800e212:	2b03      	cmp	r3, #3
 800e214:	d016      	beq.n	800e244 <USBD_StdEPReq+0x150>
 800e216:	e04b      	b.n	800e2b0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e218:	7bbb      	ldrb	r3, [r7, #14]
 800e21a:	2b00      	cmp	r3, #0
 800e21c:	d00d      	beq.n	800e23a <USBD_StdEPReq+0x146>
 800e21e:	7bbb      	ldrb	r3, [r7, #14]
 800e220:	2b80      	cmp	r3, #128	; 0x80
 800e222:	d00a      	beq.n	800e23a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e224:	7bbb      	ldrb	r3, [r7, #14]
 800e226:	4619      	mov	r1, r3
 800e228:	6878      	ldr	r0, [r7, #4]
 800e22a:	f003 fe7b 	bl	8011f24 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e22e:	2180      	movs	r1, #128	; 0x80
 800e230:	6878      	ldr	r0, [r7, #4]
 800e232:	f003 fe77 	bl	8011f24 <USBD_LL_StallEP>
 800e236:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e238:	e040      	b.n	800e2bc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e23a:	6839      	ldr	r1, [r7, #0]
 800e23c:	6878      	ldr	r0, [r7, #4]
 800e23e:	f000 fc68 	bl	800eb12 <USBD_CtlError>
              break;
 800e242:	e03b      	b.n	800e2bc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	885b      	ldrh	r3, [r3, #2]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d136      	bne.n	800e2ba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e24c:	7bbb      	ldrb	r3, [r7, #14]
 800e24e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e252:	2b00      	cmp	r3, #0
 800e254:	d004      	beq.n	800e260 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e256:	7bbb      	ldrb	r3, [r7, #14]
 800e258:	4619      	mov	r1, r3
 800e25a:	6878      	ldr	r0, [r7, #4]
 800e25c:	f003 fe81 	bl	8011f62 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e260:	6878      	ldr	r0, [r7, #4]
 800e262:	f000 fd21 	bl	800eca8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e266:	7bbb      	ldrb	r3, [r7, #14]
 800e268:	4619      	mov	r1, r3
 800e26a:	6878      	ldr	r0, [r7, #4]
 800e26c:	f7ff fde2 	bl	800de34 <USBD_CoreFindEP>
 800e270:	4603      	mov	r3, r0
 800e272:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e274:	7b7b      	ldrb	r3, [r7, #13]
 800e276:	2bff      	cmp	r3, #255	; 0xff
 800e278:	d01f      	beq.n	800e2ba <USBD_StdEPReq+0x1c6>
 800e27a:	7b7b      	ldrb	r3, [r7, #13]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d11c      	bne.n	800e2ba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e280:	7b7a      	ldrb	r2, [r7, #13]
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e288:	7b7a      	ldrb	r2, [r7, #13]
 800e28a:	687b      	ldr	r3, [r7, #4]
 800e28c:	32ae      	adds	r2, #174	; 0xae
 800e28e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e292:	689b      	ldr	r3, [r3, #8]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d010      	beq.n	800e2ba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e298:	7b7a      	ldrb	r2, [r7, #13]
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	32ae      	adds	r2, #174	; 0xae
 800e29e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e2a2:	689b      	ldr	r3, [r3, #8]
 800e2a4:	6839      	ldr	r1, [r7, #0]
 800e2a6:	6878      	ldr	r0, [r7, #4]
 800e2a8:	4798      	blx	r3
 800e2aa:	4603      	mov	r3, r0
 800e2ac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e2ae:	e004      	b.n	800e2ba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e2b0:	6839      	ldr	r1, [r7, #0]
 800e2b2:	6878      	ldr	r0, [r7, #4]
 800e2b4:	f000 fc2d 	bl	800eb12 <USBD_CtlError>
              break;
 800e2b8:	e000      	b.n	800e2bc <USBD_StdEPReq+0x1c8>
              break;
 800e2ba:	bf00      	nop
          }
          break;
 800e2bc:	e0ab      	b.n	800e416 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e2c4:	b2db      	uxtb	r3, r3
 800e2c6:	2b02      	cmp	r3, #2
 800e2c8:	d002      	beq.n	800e2d0 <USBD_StdEPReq+0x1dc>
 800e2ca:	2b03      	cmp	r3, #3
 800e2cc:	d032      	beq.n	800e334 <USBD_StdEPReq+0x240>
 800e2ce:	e097      	b.n	800e400 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e2d0:	7bbb      	ldrb	r3, [r7, #14]
 800e2d2:	2b00      	cmp	r3, #0
 800e2d4:	d007      	beq.n	800e2e6 <USBD_StdEPReq+0x1f2>
 800e2d6:	7bbb      	ldrb	r3, [r7, #14]
 800e2d8:	2b80      	cmp	r3, #128	; 0x80
 800e2da:	d004      	beq.n	800e2e6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e2dc:	6839      	ldr	r1, [r7, #0]
 800e2de:	6878      	ldr	r0, [r7, #4]
 800e2e0:	f000 fc17 	bl	800eb12 <USBD_CtlError>
                break;
 800e2e4:	e091      	b.n	800e40a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e2e6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	da0b      	bge.n	800e306 <USBD_StdEPReq+0x212>
 800e2ee:	7bbb      	ldrb	r3, [r7, #14]
 800e2f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e2f4:	4613      	mov	r3, r2
 800e2f6:	009b      	lsls	r3, r3, #2
 800e2f8:	4413      	add	r3, r2
 800e2fa:	009b      	lsls	r3, r3, #2
 800e2fc:	3310      	adds	r3, #16
 800e2fe:	687a      	ldr	r2, [r7, #4]
 800e300:	4413      	add	r3, r2
 800e302:	3304      	adds	r3, #4
 800e304:	e00b      	b.n	800e31e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e306:	7bbb      	ldrb	r3, [r7, #14]
 800e308:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e30c:	4613      	mov	r3, r2
 800e30e:	009b      	lsls	r3, r3, #2
 800e310:	4413      	add	r3, r2
 800e312:	009b      	lsls	r3, r3, #2
 800e314:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e318:	687a      	ldr	r2, [r7, #4]
 800e31a:	4413      	add	r3, r2
 800e31c:	3304      	adds	r3, #4
 800e31e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e320:	68bb      	ldr	r3, [r7, #8]
 800e322:	2200      	movs	r2, #0
 800e324:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e326:	68bb      	ldr	r3, [r7, #8]
 800e328:	2202      	movs	r2, #2
 800e32a:	4619      	mov	r1, r3
 800e32c:	6878      	ldr	r0, [r7, #4]
 800e32e:	f000 fc61 	bl	800ebf4 <USBD_CtlSendData>
              break;
 800e332:	e06a      	b.n	800e40a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e334:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	da11      	bge.n	800e360 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e33c:	7bbb      	ldrb	r3, [r7, #14]
 800e33e:	f003 020f 	and.w	r2, r3, #15
 800e342:	6879      	ldr	r1, [r7, #4]
 800e344:	4613      	mov	r3, r2
 800e346:	009b      	lsls	r3, r3, #2
 800e348:	4413      	add	r3, r2
 800e34a:	009b      	lsls	r3, r3, #2
 800e34c:	440b      	add	r3, r1
 800e34e:	3324      	adds	r3, #36	; 0x24
 800e350:	881b      	ldrh	r3, [r3, #0]
 800e352:	2b00      	cmp	r3, #0
 800e354:	d117      	bne.n	800e386 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e356:	6839      	ldr	r1, [r7, #0]
 800e358:	6878      	ldr	r0, [r7, #4]
 800e35a:	f000 fbda 	bl	800eb12 <USBD_CtlError>
                  break;
 800e35e:	e054      	b.n	800e40a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e360:	7bbb      	ldrb	r3, [r7, #14]
 800e362:	f003 020f 	and.w	r2, r3, #15
 800e366:	6879      	ldr	r1, [r7, #4]
 800e368:	4613      	mov	r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	4413      	add	r3, r2
 800e36e:	009b      	lsls	r3, r3, #2
 800e370:	440b      	add	r3, r1
 800e372:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e376:	881b      	ldrh	r3, [r3, #0]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d104      	bne.n	800e386 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e37c:	6839      	ldr	r1, [r7, #0]
 800e37e:	6878      	ldr	r0, [r7, #4]
 800e380:	f000 fbc7 	bl	800eb12 <USBD_CtlError>
                  break;
 800e384:	e041      	b.n	800e40a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e386:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	da0b      	bge.n	800e3a6 <USBD_StdEPReq+0x2b2>
 800e38e:	7bbb      	ldrb	r3, [r7, #14]
 800e390:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e394:	4613      	mov	r3, r2
 800e396:	009b      	lsls	r3, r3, #2
 800e398:	4413      	add	r3, r2
 800e39a:	009b      	lsls	r3, r3, #2
 800e39c:	3310      	adds	r3, #16
 800e39e:	687a      	ldr	r2, [r7, #4]
 800e3a0:	4413      	add	r3, r2
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	e00b      	b.n	800e3be <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e3a6:	7bbb      	ldrb	r3, [r7, #14]
 800e3a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e3ac:	4613      	mov	r3, r2
 800e3ae:	009b      	lsls	r3, r3, #2
 800e3b0:	4413      	add	r3, r2
 800e3b2:	009b      	lsls	r3, r3, #2
 800e3b4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e3b8:	687a      	ldr	r2, [r7, #4]
 800e3ba:	4413      	add	r3, r2
 800e3bc:	3304      	adds	r3, #4
 800e3be:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e3c0:	7bbb      	ldrb	r3, [r7, #14]
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d002      	beq.n	800e3cc <USBD_StdEPReq+0x2d8>
 800e3c6:	7bbb      	ldrb	r3, [r7, #14]
 800e3c8:	2b80      	cmp	r3, #128	; 0x80
 800e3ca:	d103      	bne.n	800e3d4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e3cc:	68bb      	ldr	r3, [r7, #8]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	601a      	str	r2, [r3, #0]
 800e3d2:	e00e      	b.n	800e3f2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e3d4:	7bbb      	ldrb	r3, [r7, #14]
 800e3d6:	4619      	mov	r1, r3
 800e3d8:	6878      	ldr	r0, [r7, #4]
 800e3da:	f003 fde1 	bl	8011fa0 <USBD_LL_IsStallEP>
 800e3de:	4603      	mov	r3, r0
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	d003      	beq.n	800e3ec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e3e4:	68bb      	ldr	r3, [r7, #8]
 800e3e6:	2201      	movs	r2, #1
 800e3e8:	601a      	str	r2, [r3, #0]
 800e3ea:	e002      	b.n	800e3f2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e3ec:	68bb      	ldr	r3, [r7, #8]
 800e3ee:	2200      	movs	r2, #0
 800e3f0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e3f2:	68bb      	ldr	r3, [r7, #8]
 800e3f4:	2202      	movs	r2, #2
 800e3f6:	4619      	mov	r1, r3
 800e3f8:	6878      	ldr	r0, [r7, #4]
 800e3fa:	f000 fbfb 	bl	800ebf4 <USBD_CtlSendData>
              break;
 800e3fe:	e004      	b.n	800e40a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e400:	6839      	ldr	r1, [r7, #0]
 800e402:	6878      	ldr	r0, [r7, #4]
 800e404:	f000 fb85 	bl	800eb12 <USBD_CtlError>
              break;
 800e408:	bf00      	nop
          }
          break;
 800e40a:	e004      	b.n	800e416 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e40c:	6839      	ldr	r1, [r7, #0]
 800e40e:	6878      	ldr	r0, [r7, #4]
 800e410:	f000 fb7f 	bl	800eb12 <USBD_CtlError>
          break;
 800e414:	bf00      	nop
      }
      break;
 800e416:	e005      	b.n	800e424 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e418:	6839      	ldr	r1, [r7, #0]
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f000 fb79 	bl	800eb12 <USBD_CtlError>
      break;
 800e420:	e000      	b.n	800e424 <USBD_StdEPReq+0x330>
      break;
 800e422:	bf00      	nop
  }

  return ret;
 800e424:	7bfb      	ldrb	r3, [r7, #15]
}
 800e426:	4618      	mov	r0, r3
 800e428:	3710      	adds	r7, #16
 800e42a:	46bd      	mov	sp, r7
 800e42c:	bd80      	pop	{r7, pc}
	...

0800e430 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b084      	sub	sp, #16
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
 800e438:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e43a:	2300      	movs	r3, #0
 800e43c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e43e:	2300      	movs	r3, #0
 800e440:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e442:	2300      	movs	r3, #0
 800e444:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e446:	683b      	ldr	r3, [r7, #0]
 800e448:	885b      	ldrh	r3, [r3, #2]
 800e44a:	0a1b      	lsrs	r3, r3, #8
 800e44c:	b29b      	uxth	r3, r3
 800e44e:	3b01      	subs	r3, #1
 800e450:	2b0e      	cmp	r3, #14
 800e452:	f200 8152 	bhi.w	800e6fa <USBD_GetDescriptor+0x2ca>
 800e456:	a201      	add	r2, pc, #4	; (adr r2, 800e45c <USBD_GetDescriptor+0x2c>)
 800e458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e45c:	0800e4cd 	.word	0x0800e4cd
 800e460:	0800e4e5 	.word	0x0800e4e5
 800e464:	0800e525 	.word	0x0800e525
 800e468:	0800e6fb 	.word	0x0800e6fb
 800e46c:	0800e6fb 	.word	0x0800e6fb
 800e470:	0800e69b 	.word	0x0800e69b
 800e474:	0800e6c7 	.word	0x0800e6c7
 800e478:	0800e6fb 	.word	0x0800e6fb
 800e47c:	0800e6fb 	.word	0x0800e6fb
 800e480:	0800e6fb 	.word	0x0800e6fb
 800e484:	0800e6fb 	.word	0x0800e6fb
 800e488:	0800e6fb 	.word	0x0800e6fb
 800e48c:	0800e6fb 	.word	0x0800e6fb
 800e490:	0800e6fb 	.word	0x0800e6fb
 800e494:	0800e499 	.word	0x0800e499
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e498:	687b      	ldr	r3, [r7, #4]
 800e49a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e49e:	69db      	ldr	r3, [r3, #28]
 800e4a0:	2b00      	cmp	r3, #0
 800e4a2:	d00b      	beq.n	800e4bc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4aa:	69db      	ldr	r3, [r3, #28]
 800e4ac:	687a      	ldr	r2, [r7, #4]
 800e4ae:	7c12      	ldrb	r2, [r2, #16]
 800e4b0:	f107 0108 	add.w	r1, r7, #8
 800e4b4:	4610      	mov	r0, r2
 800e4b6:	4798      	blx	r3
 800e4b8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e4ba:	e126      	b.n	800e70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e4bc:	6839      	ldr	r1, [r7, #0]
 800e4be:	6878      	ldr	r0, [r7, #4]
 800e4c0:	f000 fb27 	bl	800eb12 <USBD_CtlError>
        err++;
 800e4c4:	7afb      	ldrb	r3, [r7, #11]
 800e4c6:	3301      	adds	r3, #1
 800e4c8:	72fb      	strb	r3, [r7, #11]
      break;
 800e4ca:	e11e      	b.n	800e70a <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	687a      	ldr	r2, [r7, #4]
 800e4d6:	7c12      	ldrb	r2, [r2, #16]
 800e4d8:	f107 0108 	add.w	r1, r7, #8
 800e4dc:	4610      	mov	r0, r2
 800e4de:	4798      	blx	r3
 800e4e0:	60f8      	str	r0, [r7, #12]
      break;
 800e4e2:	e112      	b.n	800e70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	7c1b      	ldrb	r3, [r3, #16]
 800e4e8:	2b00      	cmp	r3, #0
 800e4ea:	d10d      	bne.n	800e508 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e4ec:	687b      	ldr	r3, [r7, #4]
 800e4ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e4f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4f4:	f107 0208 	add.w	r2, r7, #8
 800e4f8:	4610      	mov	r0, r2
 800e4fa:	4798      	blx	r3
 800e4fc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e4fe:	68fb      	ldr	r3, [r7, #12]
 800e500:	3301      	adds	r3, #1
 800e502:	2202      	movs	r2, #2
 800e504:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e506:	e100      	b.n	800e70a <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e50e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e510:	f107 0208 	add.w	r2, r7, #8
 800e514:	4610      	mov	r0, r2
 800e516:	4798      	blx	r3
 800e518:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3301      	adds	r3, #1
 800e51e:	2202      	movs	r2, #2
 800e520:	701a      	strb	r2, [r3, #0]
      break;
 800e522:	e0f2      	b.n	800e70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e524:	683b      	ldr	r3, [r7, #0]
 800e526:	885b      	ldrh	r3, [r3, #2]
 800e528:	b2db      	uxtb	r3, r3
 800e52a:	2b05      	cmp	r3, #5
 800e52c:	f200 80ac 	bhi.w	800e688 <USBD_GetDescriptor+0x258>
 800e530:	a201      	add	r2, pc, #4	; (adr r2, 800e538 <USBD_GetDescriptor+0x108>)
 800e532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e536:	bf00      	nop
 800e538:	0800e551 	.word	0x0800e551
 800e53c:	0800e585 	.word	0x0800e585
 800e540:	0800e5b9 	.word	0x0800e5b9
 800e544:	0800e5ed 	.word	0x0800e5ed
 800e548:	0800e621 	.word	0x0800e621
 800e54c:	0800e655 	.word	0x0800e655
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e556:	685b      	ldr	r3, [r3, #4]
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d00b      	beq.n	800e574 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e562:	685b      	ldr	r3, [r3, #4]
 800e564:	687a      	ldr	r2, [r7, #4]
 800e566:	7c12      	ldrb	r2, [r2, #16]
 800e568:	f107 0108 	add.w	r1, r7, #8
 800e56c:	4610      	mov	r0, r2
 800e56e:	4798      	blx	r3
 800e570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e572:	e091      	b.n	800e698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e574:	6839      	ldr	r1, [r7, #0]
 800e576:	6878      	ldr	r0, [r7, #4]
 800e578:	f000 facb 	bl	800eb12 <USBD_CtlError>
            err++;
 800e57c:	7afb      	ldrb	r3, [r7, #11]
 800e57e:	3301      	adds	r3, #1
 800e580:	72fb      	strb	r3, [r7, #11]
          break;
 800e582:	e089      	b.n	800e698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e584:	687b      	ldr	r3, [r7, #4]
 800e586:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e58a:	689b      	ldr	r3, [r3, #8]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	d00b      	beq.n	800e5a8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e596:	689b      	ldr	r3, [r3, #8]
 800e598:	687a      	ldr	r2, [r7, #4]
 800e59a:	7c12      	ldrb	r2, [r2, #16]
 800e59c:	f107 0108 	add.w	r1, r7, #8
 800e5a0:	4610      	mov	r0, r2
 800e5a2:	4798      	blx	r3
 800e5a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5a6:	e077      	b.n	800e698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5a8:	6839      	ldr	r1, [r7, #0]
 800e5aa:	6878      	ldr	r0, [r7, #4]
 800e5ac:	f000 fab1 	bl	800eb12 <USBD_CtlError>
            err++;
 800e5b0:	7afb      	ldrb	r3, [r7, #11]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	72fb      	strb	r3, [r7, #11]
          break;
 800e5b6:	e06f      	b.n	800e698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5be:	68db      	ldr	r3, [r3, #12]
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d00b      	beq.n	800e5dc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e5c4:	687b      	ldr	r3, [r7, #4]
 800e5c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5ca:	68db      	ldr	r3, [r3, #12]
 800e5cc:	687a      	ldr	r2, [r7, #4]
 800e5ce:	7c12      	ldrb	r2, [r2, #16]
 800e5d0:	f107 0108 	add.w	r1, r7, #8
 800e5d4:	4610      	mov	r0, r2
 800e5d6:	4798      	blx	r3
 800e5d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e5da:	e05d      	b.n	800e698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e5dc:	6839      	ldr	r1, [r7, #0]
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f000 fa97 	bl	800eb12 <USBD_CtlError>
            err++;
 800e5e4:	7afb      	ldrb	r3, [r7, #11]
 800e5e6:	3301      	adds	r3, #1
 800e5e8:	72fb      	strb	r3, [r7, #11]
          break;
 800e5ea:	e055      	b.n	800e698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5f2:	691b      	ldr	r3, [r3, #16]
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d00b      	beq.n	800e610 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e5fe:	691b      	ldr	r3, [r3, #16]
 800e600:	687a      	ldr	r2, [r7, #4]
 800e602:	7c12      	ldrb	r2, [r2, #16]
 800e604:	f107 0108 	add.w	r1, r7, #8
 800e608:	4610      	mov	r0, r2
 800e60a:	4798      	blx	r3
 800e60c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e60e:	e043      	b.n	800e698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e610:	6839      	ldr	r1, [r7, #0]
 800e612:	6878      	ldr	r0, [r7, #4]
 800e614:	f000 fa7d 	bl	800eb12 <USBD_CtlError>
            err++;
 800e618:	7afb      	ldrb	r3, [r7, #11]
 800e61a:	3301      	adds	r3, #1
 800e61c:	72fb      	strb	r3, [r7, #11]
          break;
 800e61e:	e03b      	b.n	800e698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e626:	695b      	ldr	r3, [r3, #20]
 800e628:	2b00      	cmp	r3, #0
 800e62a:	d00b      	beq.n	800e644 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e632:	695b      	ldr	r3, [r3, #20]
 800e634:	687a      	ldr	r2, [r7, #4]
 800e636:	7c12      	ldrb	r2, [r2, #16]
 800e638:	f107 0108 	add.w	r1, r7, #8
 800e63c:	4610      	mov	r0, r2
 800e63e:	4798      	blx	r3
 800e640:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e642:	e029      	b.n	800e698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e644:	6839      	ldr	r1, [r7, #0]
 800e646:	6878      	ldr	r0, [r7, #4]
 800e648:	f000 fa63 	bl	800eb12 <USBD_CtlError>
            err++;
 800e64c:	7afb      	ldrb	r3, [r7, #11]
 800e64e:	3301      	adds	r3, #1
 800e650:	72fb      	strb	r3, [r7, #11]
          break;
 800e652:	e021      	b.n	800e698 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e65a:	699b      	ldr	r3, [r3, #24]
 800e65c:	2b00      	cmp	r3, #0
 800e65e:	d00b      	beq.n	800e678 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e666:	699b      	ldr	r3, [r3, #24]
 800e668:	687a      	ldr	r2, [r7, #4]
 800e66a:	7c12      	ldrb	r2, [r2, #16]
 800e66c:	f107 0108 	add.w	r1, r7, #8
 800e670:	4610      	mov	r0, r2
 800e672:	4798      	blx	r3
 800e674:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e676:	e00f      	b.n	800e698 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e678:	6839      	ldr	r1, [r7, #0]
 800e67a:	6878      	ldr	r0, [r7, #4]
 800e67c:	f000 fa49 	bl	800eb12 <USBD_CtlError>
            err++;
 800e680:	7afb      	ldrb	r3, [r7, #11]
 800e682:	3301      	adds	r3, #1
 800e684:	72fb      	strb	r3, [r7, #11]
          break;
 800e686:	e007      	b.n	800e698 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800e688:	6839      	ldr	r1, [r7, #0]
 800e68a:	6878      	ldr	r0, [r7, #4]
 800e68c:	f000 fa41 	bl	800eb12 <USBD_CtlError>
          err++;
 800e690:	7afb      	ldrb	r3, [r7, #11]
 800e692:	3301      	adds	r3, #1
 800e694:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800e696:	bf00      	nop
      }
      break;
 800e698:	e037      	b.n	800e70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	7c1b      	ldrb	r3, [r3, #16]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	d109      	bne.n	800e6b6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e6aa:	f107 0208 	add.w	r2, r7, #8
 800e6ae:	4610      	mov	r0, r2
 800e6b0:	4798      	blx	r3
 800e6b2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6b4:	e029      	b.n	800e70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6b6:	6839      	ldr	r1, [r7, #0]
 800e6b8:	6878      	ldr	r0, [r7, #4]
 800e6ba:	f000 fa2a 	bl	800eb12 <USBD_CtlError>
        err++;
 800e6be:	7afb      	ldrb	r3, [r7, #11]
 800e6c0:	3301      	adds	r3, #1
 800e6c2:	72fb      	strb	r3, [r7, #11]
      break;
 800e6c4:	e021      	b.n	800e70a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e6c6:	687b      	ldr	r3, [r7, #4]
 800e6c8:	7c1b      	ldrb	r3, [r3, #16]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d10d      	bne.n	800e6ea <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e6d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6d6:	f107 0208 	add.w	r2, r7, #8
 800e6da:	4610      	mov	r0, r2
 800e6dc:	4798      	blx	r3
 800e6de:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	3301      	adds	r3, #1
 800e6e4:	2207      	movs	r2, #7
 800e6e6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e6e8:	e00f      	b.n	800e70a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e6ea:	6839      	ldr	r1, [r7, #0]
 800e6ec:	6878      	ldr	r0, [r7, #4]
 800e6ee:	f000 fa10 	bl	800eb12 <USBD_CtlError>
        err++;
 800e6f2:	7afb      	ldrb	r3, [r7, #11]
 800e6f4:	3301      	adds	r3, #1
 800e6f6:	72fb      	strb	r3, [r7, #11]
      break;
 800e6f8:	e007      	b.n	800e70a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800e6fa:	6839      	ldr	r1, [r7, #0]
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f000 fa08 	bl	800eb12 <USBD_CtlError>
      err++;
 800e702:	7afb      	ldrb	r3, [r7, #11]
 800e704:	3301      	adds	r3, #1
 800e706:	72fb      	strb	r3, [r7, #11]
      break;
 800e708:	bf00      	nop
  }

  if (err != 0U)
 800e70a:	7afb      	ldrb	r3, [r7, #11]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d11e      	bne.n	800e74e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800e710:	683b      	ldr	r3, [r7, #0]
 800e712:	88db      	ldrh	r3, [r3, #6]
 800e714:	2b00      	cmp	r3, #0
 800e716:	d016      	beq.n	800e746 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800e718:	893b      	ldrh	r3, [r7, #8]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d00e      	beq.n	800e73c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	88da      	ldrh	r2, [r3, #6]
 800e722:	893b      	ldrh	r3, [r7, #8]
 800e724:	4293      	cmp	r3, r2
 800e726:	bf28      	it	cs
 800e728:	4613      	movcs	r3, r2
 800e72a:	b29b      	uxth	r3, r3
 800e72c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800e72e:	893b      	ldrh	r3, [r7, #8]
 800e730:	461a      	mov	r2, r3
 800e732:	68f9      	ldr	r1, [r7, #12]
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f000 fa5d 	bl	800ebf4 <USBD_CtlSendData>
 800e73a:	e009      	b.n	800e750 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800e73c:	6839      	ldr	r1, [r7, #0]
 800e73e:	6878      	ldr	r0, [r7, #4]
 800e740:	f000 f9e7 	bl	800eb12 <USBD_CtlError>
 800e744:	e004      	b.n	800e750 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800e746:	6878      	ldr	r0, [r7, #4]
 800e748:	f000 faae 	bl	800eca8 <USBD_CtlSendStatus>
 800e74c:	e000      	b.n	800e750 <USBD_GetDescriptor+0x320>
    return;
 800e74e:	bf00      	nop
  }
}
 800e750:	3710      	adds	r7, #16
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop

0800e758 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e758:	b580      	push	{r7, lr}
 800e75a:	b084      	sub	sp, #16
 800e75c:	af00      	add	r7, sp, #0
 800e75e:	6078      	str	r0, [r7, #4]
 800e760:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800e762:	683b      	ldr	r3, [r7, #0]
 800e764:	889b      	ldrh	r3, [r3, #4]
 800e766:	2b00      	cmp	r3, #0
 800e768:	d131      	bne.n	800e7ce <USBD_SetAddress+0x76>
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	88db      	ldrh	r3, [r3, #6]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	d12d      	bne.n	800e7ce <USBD_SetAddress+0x76>
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	885b      	ldrh	r3, [r3, #2]
 800e776:	2b7f      	cmp	r3, #127	; 0x7f
 800e778:	d829      	bhi.n	800e7ce <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800e77a:	683b      	ldr	r3, [r7, #0]
 800e77c:	885b      	ldrh	r3, [r3, #2]
 800e77e:	b2db      	uxtb	r3, r3
 800e780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e784:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e786:	687b      	ldr	r3, [r7, #4]
 800e788:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e78c:	b2db      	uxtb	r3, r3
 800e78e:	2b03      	cmp	r3, #3
 800e790:	d104      	bne.n	800e79c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800e792:	6839      	ldr	r1, [r7, #0]
 800e794:	6878      	ldr	r0, [r7, #4]
 800e796:	f000 f9bc 	bl	800eb12 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e79a:	e01d      	b.n	800e7d8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	7bfa      	ldrb	r2, [r7, #15]
 800e7a0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800e7a4:	7bfb      	ldrb	r3, [r7, #15]
 800e7a6:	4619      	mov	r1, r3
 800e7a8:	6878      	ldr	r0, [r7, #4]
 800e7aa:	f003 fc25 	bl	8011ff8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800e7ae:	6878      	ldr	r0, [r7, #4]
 800e7b0:	f000 fa7a 	bl	800eca8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800e7b4:	7bfb      	ldrb	r3, [r7, #15]
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	d004      	beq.n	800e7c4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	2202      	movs	r2, #2
 800e7be:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7c2:	e009      	b.n	800e7d8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	2201      	movs	r2, #1
 800e7c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e7cc:	e004      	b.n	800e7d8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800e7ce:	6839      	ldr	r1, [r7, #0]
 800e7d0:	6878      	ldr	r0, [r7, #4]
 800e7d2:	f000 f99e 	bl	800eb12 <USBD_CtlError>
  }
}
 800e7d6:	bf00      	nop
 800e7d8:	bf00      	nop
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}

0800e7e0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b084      	sub	sp, #16
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e7ea:	2300      	movs	r3, #0
 800e7ec:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800e7ee:	683b      	ldr	r3, [r7, #0]
 800e7f0:	885b      	ldrh	r3, [r3, #2]
 800e7f2:	b2da      	uxtb	r2, r3
 800e7f4:	4b4e      	ldr	r3, [pc, #312]	; (800e930 <USBD_SetConfig+0x150>)
 800e7f6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800e7f8:	4b4d      	ldr	r3, [pc, #308]	; (800e930 <USBD_SetConfig+0x150>)
 800e7fa:	781b      	ldrb	r3, [r3, #0]
 800e7fc:	2b01      	cmp	r3, #1
 800e7fe:	d905      	bls.n	800e80c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800e800:	6839      	ldr	r1, [r7, #0]
 800e802:	6878      	ldr	r0, [r7, #4]
 800e804:	f000 f985 	bl	800eb12 <USBD_CtlError>
    return USBD_FAIL;
 800e808:	2303      	movs	r3, #3
 800e80a:	e08c      	b.n	800e926 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800e80c:	687b      	ldr	r3, [r7, #4]
 800e80e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e812:	b2db      	uxtb	r3, r3
 800e814:	2b02      	cmp	r3, #2
 800e816:	d002      	beq.n	800e81e <USBD_SetConfig+0x3e>
 800e818:	2b03      	cmp	r3, #3
 800e81a:	d029      	beq.n	800e870 <USBD_SetConfig+0x90>
 800e81c:	e075      	b.n	800e90a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800e81e:	4b44      	ldr	r3, [pc, #272]	; (800e930 <USBD_SetConfig+0x150>)
 800e820:	781b      	ldrb	r3, [r3, #0]
 800e822:	2b00      	cmp	r3, #0
 800e824:	d020      	beq.n	800e868 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800e826:	4b42      	ldr	r3, [pc, #264]	; (800e930 <USBD_SetConfig+0x150>)
 800e828:	781b      	ldrb	r3, [r3, #0]
 800e82a:	461a      	mov	r2, r3
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e830:	4b3f      	ldr	r3, [pc, #252]	; (800e930 <USBD_SetConfig+0x150>)
 800e832:	781b      	ldrb	r3, [r3, #0]
 800e834:	4619      	mov	r1, r3
 800e836:	6878      	ldr	r0, [r7, #4]
 800e838:	f7fe ffbd 	bl	800d7b6 <USBD_SetClassConfig>
 800e83c:	4603      	mov	r3, r0
 800e83e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800e840:	7bfb      	ldrb	r3, [r7, #15]
 800e842:	2b00      	cmp	r3, #0
 800e844:	d008      	beq.n	800e858 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800e846:	6839      	ldr	r1, [r7, #0]
 800e848:	6878      	ldr	r0, [r7, #4]
 800e84a:	f000 f962 	bl	800eb12 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	2202      	movs	r2, #2
 800e852:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e856:	e065      	b.n	800e924 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e858:	6878      	ldr	r0, [r7, #4]
 800e85a:	f000 fa25 	bl	800eca8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2203      	movs	r2, #3
 800e862:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e866:	e05d      	b.n	800e924 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e868:	6878      	ldr	r0, [r7, #4]
 800e86a:	f000 fa1d 	bl	800eca8 <USBD_CtlSendStatus>
      break;
 800e86e:	e059      	b.n	800e924 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800e870:	4b2f      	ldr	r3, [pc, #188]	; (800e930 <USBD_SetConfig+0x150>)
 800e872:	781b      	ldrb	r3, [r3, #0]
 800e874:	2b00      	cmp	r3, #0
 800e876:	d112      	bne.n	800e89e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2202      	movs	r2, #2
 800e87c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800e880:	4b2b      	ldr	r3, [pc, #172]	; (800e930 <USBD_SetConfig+0x150>)
 800e882:	781b      	ldrb	r3, [r3, #0]
 800e884:	461a      	mov	r2, r3
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e88a:	4b29      	ldr	r3, [pc, #164]	; (800e930 <USBD_SetConfig+0x150>)
 800e88c:	781b      	ldrb	r3, [r3, #0]
 800e88e:	4619      	mov	r1, r3
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f7fe ffac 	bl	800d7ee <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800e896:	6878      	ldr	r0, [r7, #4]
 800e898:	f000 fa06 	bl	800eca8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800e89c:	e042      	b.n	800e924 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800e89e:	4b24      	ldr	r3, [pc, #144]	; (800e930 <USBD_SetConfig+0x150>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	461a      	mov	r2, r3
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	685b      	ldr	r3, [r3, #4]
 800e8a8:	429a      	cmp	r2, r3
 800e8aa:	d02a      	beq.n	800e902 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	b2db      	uxtb	r3, r3
 800e8b2:	4619      	mov	r1, r3
 800e8b4:	6878      	ldr	r0, [r7, #4]
 800e8b6:	f7fe ff9a 	bl	800d7ee <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800e8ba:	4b1d      	ldr	r3, [pc, #116]	; (800e930 <USBD_SetConfig+0x150>)
 800e8bc:	781b      	ldrb	r3, [r3, #0]
 800e8be:	461a      	mov	r2, r3
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800e8c4:	4b1a      	ldr	r3, [pc, #104]	; (800e930 <USBD_SetConfig+0x150>)
 800e8c6:	781b      	ldrb	r3, [r3, #0]
 800e8c8:	4619      	mov	r1, r3
 800e8ca:	6878      	ldr	r0, [r7, #4]
 800e8cc:	f7fe ff73 	bl	800d7b6 <USBD_SetClassConfig>
 800e8d0:	4603      	mov	r3, r0
 800e8d2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800e8d4:	7bfb      	ldrb	r3, [r7, #15]
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d00f      	beq.n	800e8fa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800e8da:	6839      	ldr	r1, [r7, #0]
 800e8dc:	6878      	ldr	r0, [r7, #4]
 800e8de:	f000 f918 	bl	800eb12 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	685b      	ldr	r3, [r3, #4]
 800e8e6:	b2db      	uxtb	r3, r3
 800e8e8:	4619      	mov	r1, r3
 800e8ea:	6878      	ldr	r0, [r7, #4]
 800e8ec:	f7fe ff7f 	bl	800d7ee <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800e8f0:	687b      	ldr	r3, [r7, #4]
 800e8f2:	2202      	movs	r2, #2
 800e8f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800e8f8:	e014      	b.n	800e924 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800e8fa:	6878      	ldr	r0, [r7, #4]
 800e8fc:	f000 f9d4 	bl	800eca8 <USBD_CtlSendStatus>
      break;
 800e900:	e010      	b.n	800e924 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800e902:	6878      	ldr	r0, [r7, #4]
 800e904:	f000 f9d0 	bl	800eca8 <USBD_CtlSendStatus>
      break;
 800e908:	e00c      	b.n	800e924 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800e90a:	6839      	ldr	r1, [r7, #0]
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 f900 	bl	800eb12 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800e912:	4b07      	ldr	r3, [pc, #28]	; (800e930 <USBD_SetConfig+0x150>)
 800e914:	781b      	ldrb	r3, [r3, #0]
 800e916:	4619      	mov	r1, r3
 800e918:	6878      	ldr	r0, [r7, #4]
 800e91a:	f7fe ff68 	bl	800d7ee <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800e91e:	2303      	movs	r3, #3
 800e920:	73fb      	strb	r3, [r7, #15]
      break;
 800e922:	bf00      	nop
  }

  return ret;
 800e924:	7bfb      	ldrb	r3, [r7, #15]
}
 800e926:	4618      	mov	r0, r3
 800e928:	3710      	adds	r7, #16
 800e92a:	46bd      	mov	sp, r7
 800e92c:	bd80      	pop	{r7, pc}
 800e92e:	bf00      	nop
 800e930:	200016c8 	.word	0x200016c8

0800e934 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e934:	b580      	push	{r7, lr}
 800e936:	b082      	sub	sp, #8
 800e938:	af00      	add	r7, sp, #0
 800e93a:	6078      	str	r0, [r7, #4]
 800e93c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800e93e:	683b      	ldr	r3, [r7, #0]
 800e940:	88db      	ldrh	r3, [r3, #6]
 800e942:	2b01      	cmp	r3, #1
 800e944:	d004      	beq.n	800e950 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800e946:	6839      	ldr	r1, [r7, #0]
 800e948:	6878      	ldr	r0, [r7, #4]
 800e94a:	f000 f8e2 	bl	800eb12 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800e94e:	e023      	b.n	800e998 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e956:	b2db      	uxtb	r3, r3
 800e958:	2b02      	cmp	r3, #2
 800e95a:	dc02      	bgt.n	800e962 <USBD_GetConfig+0x2e>
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	dc03      	bgt.n	800e968 <USBD_GetConfig+0x34>
 800e960:	e015      	b.n	800e98e <USBD_GetConfig+0x5a>
 800e962:	2b03      	cmp	r3, #3
 800e964:	d00b      	beq.n	800e97e <USBD_GetConfig+0x4a>
 800e966:	e012      	b.n	800e98e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	2200      	movs	r2, #0
 800e96c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800e96e:	687b      	ldr	r3, [r7, #4]
 800e970:	3308      	adds	r3, #8
 800e972:	2201      	movs	r2, #1
 800e974:	4619      	mov	r1, r3
 800e976:	6878      	ldr	r0, [r7, #4]
 800e978:	f000 f93c 	bl	800ebf4 <USBD_CtlSendData>
        break;
 800e97c:	e00c      	b.n	800e998 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	3304      	adds	r3, #4
 800e982:	2201      	movs	r2, #1
 800e984:	4619      	mov	r1, r3
 800e986:	6878      	ldr	r0, [r7, #4]
 800e988:	f000 f934 	bl	800ebf4 <USBD_CtlSendData>
        break;
 800e98c:	e004      	b.n	800e998 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800e98e:	6839      	ldr	r1, [r7, #0]
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f000 f8be 	bl	800eb12 <USBD_CtlError>
        break;
 800e996:	bf00      	nop
}
 800e998:	bf00      	nop
 800e99a:	3708      	adds	r7, #8
 800e99c:	46bd      	mov	sp, r7
 800e99e:	bd80      	pop	{r7, pc}

0800e9a0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e9a0:	b580      	push	{r7, lr}
 800e9a2:	b082      	sub	sp, #8
 800e9a4:	af00      	add	r7, sp, #0
 800e9a6:	6078      	str	r0, [r7, #4]
 800e9a8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e9b0:	b2db      	uxtb	r3, r3
 800e9b2:	3b01      	subs	r3, #1
 800e9b4:	2b02      	cmp	r3, #2
 800e9b6:	d81e      	bhi.n	800e9f6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	88db      	ldrh	r3, [r3, #6]
 800e9bc:	2b02      	cmp	r3, #2
 800e9be:	d004      	beq.n	800e9ca <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e9c0:	6839      	ldr	r1, [r7, #0]
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 f8a5 	bl	800eb12 <USBD_CtlError>
        break;
 800e9c8:	e01a      	b.n	800ea00 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	2201      	movs	r2, #1
 800e9ce:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e9d6:	2b00      	cmp	r3, #0
 800e9d8:	d005      	beq.n	800e9e6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	68db      	ldr	r3, [r3, #12]
 800e9de:	f043 0202 	orr.w	r2, r3, #2
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e9e6:	687b      	ldr	r3, [r7, #4]
 800e9e8:	330c      	adds	r3, #12
 800e9ea:	2202      	movs	r2, #2
 800e9ec:	4619      	mov	r1, r3
 800e9ee:	6878      	ldr	r0, [r7, #4]
 800e9f0:	f000 f900 	bl	800ebf4 <USBD_CtlSendData>
      break;
 800e9f4:	e004      	b.n	800ea00 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e9f6:	6839      	ldr	r1, [r7, #0]
 800e9f8:	6878      	ldr	r0, [r7, #4]
 800e9fa:	f000 f88a 	bl	800eb12 <USBD_CtlError>
      break;
 800e9fe:	bf00      	nop
  }
}
 800ea00:	bf00      	nop
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
 800ea10:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea12:	683b      	ldr	r3, [r7, #0]
 800ea14:	885b      	ldrh	r3, [r3, #2]
 800ea16:	2b01      	cmp	r3, #1
 800ea18:	d107      	bne.n	800ea2a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	2201      	movs	r2, #1
 800ea1e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	f000 f940 	bl	800eca8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ea28:	e013      	b.n	800ea52 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ea2a:	683b      	ldr	r3, [r7, #0]
 800ea2c:	885b      	ldrh	r3, [r3, #2]
 800ea2e:	2b02      	cmp	r3, #2
 800ea30:	d10b      	bne.n	800ea4a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ea32:	683b      	ldr	r3, [r7, #0]
 800ea34:	889b      	ldrh	r3, [r3, #4]
 800ea36:	0a1b      	lsrs	r3, r3, #8
 800ea38:	b29b      	uxth	r3, r3
 800ea3a:	b2da      	uxtb	r2, r3
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ea42:	6878      	ldr	r0, [r7, #4]
 800ea44:	f000 f930 	bl	800eca8 <USBD_CtlSendStatus>
}
 800ea48:	e003      	b.n	800ea52 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ea4a:	6839      	ldr	r1, [r7, #0]
 800ea4c:	6878      	ldr	r0, [r7, #4]
 800ea4e:	f000 f860 	bl	800eb12 <USBD_CtlError>
}
 800ea52:	bf00      	nop
 800ea54:	3708      	adds	r7, #8
 800ea56:	46bd      	mov	sp, r7
 800ea58:	bd80      	pop	{r7, pc}

0800ea5a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ea5a:	b580      	push	{r7, lr}
 800ea5c:	b082      	sub	sp, #8
 800ea5e:	af00      	add	r7, sp, #0
 800ea60:	6078      	str	r0, [r7, #4]
 800ea62:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ea6a:	b2db      	uxtb	r3, r3
 800ea6c:	3b01      	subs	r3, #1
 800ea6e:	2b02      	cmp	r3, #2
 800ea70:	d80b      	bhi.n	800ea8a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	885b      	ldrh	r3, [r3, #2]
 800ea76:	2b01      	cmp	r3, #1
 800ea78:	d10c      	bne.n	800ea94 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2200      	movs	r2, #0
 800ea7e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f910 	bl	800eca8 <USBD_CtlSendStatus>
      }
      break;
 800ea88:	e004      	b.n	800ea94 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800ea8a:	6839      	ldr	r1, [r7, #0]
 800ea8c:	6878      	ldr	r0, [r7, #4]
 800ea8e:	f000 f840 	bl	800eb12 <USBD_CtlError>
      break;
 800ea92:	e000      	b.n	800ea96 <USBD_ClrFeature+0x3c>
      break;
 800ea94:	bf00      	nop
  }
}
 800ea96:	bf00      	nop
 800ea98:	3708      	adds	r7, #8
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	bd80      	pop	{r7, pc}

0800ea9e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800ea9e:	b580      	push	{r7, lr}
 800eaa0:	b084      	sub	sp, #16
 800eaa2:	af00      	add	r7, sp, #0
 800eaa4:	6078      	str	r0, [r7, #4]
 800eaa6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eaac:	68fb      	ldr	r3, [r7, #12]
 800eaae:	781a      	ldrb	r2, [r3, #0]
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	3301      	adds	r3, #1
 800eab8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eaba:	68fb      	ldr	r3, [r7, #12]
 800eabc:	781a      	ldrb	r2, [r3, #0]
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eac2:	68fb      	ldr	r3, [r7, #12]
 800eac4:	3301      	adds	r3, #1
 800eac6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eac8:	68f8      	ldr	r0, [r7, #12]
 800eaca:	f7ff fa17 	bl	800defc <SWAPBYTE>
 800eace:	4603      	mov	r3, r0
 800ead0:	461a      	mov	r2, r3
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800ead6:	68fb      	ldr	r3, [r7, #12]
 800ead8:	3301      	adds	r3, #1
 800eada:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eadc:	68fb      	ldr	r3, [r7, #12]
 800eade:	3301      	adds	r3, #1
 800eae0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eae2:	68f8      	ldr	r0, [r7, #12]
 800eae4:	f7ff fa0a 	bl	800defc <SWAPBYTE>
 800eae8:	4603      	mov	r3, r0
 800eaea:	461a      	mov	r2, r3
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800eaf0:	68fb      	ldr	r3, [r7, #12]
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eaf6:	68fb      	ldr	r3, [r7, #12]
 800eaf8:	3301      	adds	r3, #1
 800eafa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800eafc:	68f8      	ldr	r0, [r7, #12]
 800eafe:	f7ff f9fd 	bl	800defc <SWAPBYTE>
 800eb02:	4603      	mov	r3, r0
 800eb04:	461a      	mov	r2, r3
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	80da      	strh	r2, [r3, #6]
}
 800eb0a:	bf00      	nop
 800eb0c:	3710      	adds	r7, #16
 800eb0e:	46bd      	mov	sp, r7
 800eb10:	bd80      	pop	{r7, pc}

0800eb12 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb12:	b580      	push	{r7, lr}
 800eb14:	b082      	sub	sp, #8
 800eb16:	af00      	add	r7, sp, #0
 800eb18:	6078      	str	r0, [r7, #4]
 800eb1a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800eb1c:	2180      	movs	r1, #128	; 0x80
 800eb1e:	6878      	ldr	r0, [r7, #4]
 800eb20:	f003 fa00 	bl	8011f24 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800eb24:	2100      	movs	r1, #0
 800eb26:	6878      	ldr	r0, [r7, #4]
 800eb28:	f003 f9fc 	bl	8011f24 <USBD_LL_StallEP>
}
 800eb2c:	bf00      	nop
 800eb2e:	3708      	adds	r7, #8
 800eb30:	46bd      	mov	sp, r7
 800eb32:	bd80      	pop	{r7, pc}

0800eb34 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b086      	sub	sp, #24
 800eb38:	af00      	add	r7, sp, #0
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800eb40:	2300      	movs	r3, #0
 800eb42:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800eb44:	68fb      	ldr	r3, [r7, #12]
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d036      	beq.n	800ebb8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800eb4e:	6938      	ldr	r0, [r7, #16]
 800eb50:	f000 f836 	bl	800ebc0 <USBD_GetLen>
 800eb54:	4603      	mov	r3, r0
 800eb56:	3301      	adds	r3, #1
 800eb58:	b29b      	uxth	r3, r3
 800eb5a:	005b      	lsls	r3, r3, #1
 800eb5c:	b29a      	uxth	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800eb62:	7dfb      	ldrb	r3, [r7, #23]
 800eb64:	68ba      	ldr	r2, [r7, #8]
 800eb66:	4413      	add	r3, r2
 800eb68:	687a      	ldr	r2, [r7, #4]
 800eb6a:	7812      	ldrb	r2, [r2, #0]
 800eb6c:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb6e:	7dfb      	ldrb	r3, [r7, #23]
 800eb70:	3301      	adds	r3, #1
 800eb72:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800eb74:	7dfb      	ldrb	r3, [r7, #23]
 800eb76:	68ba      	ldr	r2, [r7, #8]
 800eb78:	4413      	add	r3, r2
 800eb7a:	2203      	movs	r2, #3
 800eb7c:	701a      	strb	r2, [r3, #0]
  idx++;
 800eb7e:	7dfb      	ldrb	r3, [r7, #23]
 800eb80:	3301      	adds	r3, #1
 800eb82:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800eb84:	e013      	b.n	800ebae <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800eb86:	7dfb      	ldrb	r3, [r7, #23]
 800eb88:	68ba      	ldr	r2, [r7, #8]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	693a      	ldr	r2, [r7, #16]
 800eb8e:	7812      	ldrb	r2, [r2, #0]
 800eb90:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800eb92:	693b      	ldr	r3, [r7, #16]
 800eb94:	3301      	adds	r3, #1
 800eb96:	613b      	str	r3, [r7, #16]
    idx++;
 800eb98:	7dfb      	ldrb	r3, [r7, #23]
 800eb9a:	3301      	adds	r3, #1
 800eb9c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800eb9e:	7dfb      	ldrb	r3, [r7, #23]
 800eba0:	68ba      	ldr	r2, [r7, #8]
 800eba2:	4413      	add	r3, r2
 800eba4:	2200      	movs	r2, #0
 800eba6:	701a      	strb	r2, [r3, #0]
    idx++;
 800eba8:	7dfb      	ldrb	r3, [r7, #23]
 800ebaa:	3301      	adds	r3, #1
 800ebac:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800ebae:	693b      	ldr	r3, [r7, #16]
 800ebb0:	781b      	ldrb	r3, [r3, #0]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d1e7      	bne.n	800eb86 <USBD_GetString+0x52>
 800ebb6:	e000      	b.n	800ebba <USBD_GetString+0x86>
    return;
 800ebb8:	bf00      	nop
  }
}
 800ebba:	3718      	adds	r7, #24
 800ebbc:	46bd      	mov	sp, r7
 800ebbe:	bd80      	pop	{r7, pc}

0800ebc0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800ebc0:	b480      	push	{r7}
 800ebc2:	b085      	sub	sp, #20
 800ebc4:	af00      	add	r7, sp, #0
 800ebc6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800ebc8:	2300      	movs	r3, #0
 800ebca:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800ebd0:	e005      	b.n	800ebde <USBD_GetLen+0x1e>
  {
    len++;
 800ebd2:	7bfb      	ldrb	r3, [r7, #15]
 800ebd4:	3301      	adds	r3, #1
 800ebd6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800ebd8:	68bb      	ldr	r3, [r7, #8]
 800ebda:	3301      	adds	r3, #1
 800ebdc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800ebde:	68bb      	ldr	r3, [r7, #8]
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	2b00      	cmp	r3, #0
 800ebe4:	d1f5      	bne.n	800ebd2 <USBD_GetLen+0x12>
  }

  return len;
 800ebe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebe8:	4618      	mov	r0, r3
 800ebea:	3714      	adds	r7, #20
 800ebec:	46bd      	mov	sp, r7
 800ebee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebf2:	4770      	bx	lr

0800ebf4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800ebf4:	b580      	push	{r7, lr}
 800ebf6:	b084      	sub	sp, #16
 800ebf8:	af00      	add	r7, sp, #0
 800ebfa:	60f8      	str	r0, [r7, #12]
 800ebfc:	60b9      	str	r1, [r7, #8]
 800ebfe:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	2202      	movs	r2, #2
 800ec04:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800ec08:	68fb      	ldr	r3, [r7, #12]
 800ec0a:	687a      	ldr	r2, [r7, #4]
 800ec0c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ec0e:	68fb      	ldr	r3, [r7, #12]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	68ba      	ldr	r2, [r7, #8]
 800ec18:	2100      	movs	r1, #0
 800ec1a:	68f8      	ldr	r0, [r7, #12]
 800ec1c:	f003 fa0b 	bl	8012036 <USBD_LL_Transmit>

  return USBD_OK;
 800ec20:	2300      	movs	r3, #0
}
 800ec22:	4618      	mov	r0, r3
 800ec24:	3710      	adds	r7, #16
 800ec26:	46bd      	mov	sp, r7
 800ec28:	bd80      	pop	{r7, pc}

0800ec2a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ec2a:	b580      	push	{r7, lr}
 800ec2c:	b084      	sub	sp, #16
 800ec2e:	af00      	add	r7, sp, #0
 800ec30:	60f8      	str	r0, [r7, #12]
 800ec32:	60b9      	str	r1, [r7, #8]
 800ec34:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	68ba      	ldr	r2, [r7, #8]
 800ec3a:	2100      	movs	r1, #0
 800ec3c:	68f8      	ldr	r0, [r7, #12]
 800ec3e:	f003 f9fa 	bl	8012036 <USBD_LL_Transmit>

  return USBD_OK;
 800ec42:	2300      	movs	r3, #0
}
 800ec44:	4618      	mov	r0, r3
 800ec46:	3710      	adds	r7, #16
 800ec48:	46bd      	mov	sp, r7
 800ec4a:	bd80      	pop	{r7, pc}

0800ec4c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ec4c:	b580      	push	{r7, lr}
 800ec4e:	b084      	sub	sp, #16
 800ec50:	af00      	add	r7, sp, #0
 800ec52:	60f8      	str	r0, [r7, #12]
 800ec54:	60b9      	str	r1, [r7, #8]
 800ec56:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2203      	movs	r2, #3
 800ec5c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	687a      	ldr	r2, [r7, #4]
 800ec64:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	687a      	ldr	r2, [r7, #4]
 800ec6c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	68ba      	ldr	r2, [r7, #8]
 800ec74:	2100      	movs	r1, #0
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f003 f9fe 	bl	8012078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3710      	adds	r7, #16
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b084      	sub	sp, #16
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	60f8      	str	r0, [r7, #12]
 800ec8e:	60b9      	str	r1, [r7, #8]
 800ec90:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ec92:	687b      	ldr	r3, [r7, #4]
 800ec94:	68ba      	ldr	r2, [r7, #8]
 800ec96:	2100      	movs	r1, #0
 800ec98:	68f8      	ldr	r0, [r7, #12]
 800ec9a:	f003 f9ed 	bl	8012078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ec9e:	2300      	movs	r3, #0
}
 800eca0:	4618      	mov	r0, r3
 800eca2:	3710      	adds	r7, #16
 800eca4:	46bd      	mov	sp, r7
 800eca6:	bd80      	pop	{r7, pc}

0800eca8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800eca8:	b580      	push	{r7, lr}
 800ecaa:	b082      	sub	sp, #8
 800ecac:	af00      	add	r7, sp, #0
 800ecae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	2204      	movs	r2, #4
 800ecb4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800ecb8:	2300      	movs	r3, #0
 800ecba:	2200      	movs	r2, #0
 800ecbc:	2100      	movs	r1, #0
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f003 f9b9 	bl	8012036 <USBD_LL_Transmit>

  return USBD_OK;
 800ecc4:	2300      	movs	r3, #0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}

0800ecce <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800ecce:	b580      	push	{r7, lr}
 800ecd0:	b082      	sub	sp, #8
 800ecd2:	af00      	add	r7, sp, #0
 800ecd4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800ecd6:	687b      	ldr	r3, [r7, #4]
 800ecd8:	2205      	movs	r2, #5
 800ecda:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ecde:	2300      	movs	r3, #0
 800ece0:	2200      	movs	r2, #0
 800ece2:	2100      	movs	r1, #0
 800ece4:	6878      	ldr	r0, [r7, #4]
 800ece6:	f003 f9c7 	bl	8012078 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ecea:	2300      	movs	r3, #0
}
 800ecec:	4618      	mov	r0, r3
 800ecee:	3708      	adds	r7, #8
 800ecf0:	46bd      	mov	sp, r7
 800ecf2:	bd80      	pop	{r7, pc}

0800ecf4 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800ecf4:	b590      	push	{r4, r7, lr}
 800ecf6:	b089      	sub	sp, #36	; 0x24
 800ecf8:	af04      	add	r7, sp, #16
 800ecfa:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800ecfc:	2301      	movs	r3, #1
 800ecfe:	2202      	movs	r2, #2
 800ed00:	2102      	movs	r1, #2
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f000 fc85 	bl	800f612 <USBH_FindInterface>
 800ed08:	4603      	mov	r3, r0
 800ed0a:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ed0c:	7bfb      	ldrb	r3, [r7, #15]
 800ed0e:	2bff      	cmp	r3, #255	; 0xff
 800ed10:	d002      	beq.n	800ed18 <USBH_CDC_InterfaceInit+0x24>
 800ed12:	7bfb      	ldrb	r3, [r7, #15]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d901      	bls.n	800ed1c <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ed18:	2302      	movs	r3, #2
 800ed1a:	e13d      	b.n	800ef98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800ed1c:	7bfb      	ldrb	r3, [r7, #15]
 800ed1e:	4619      	mov	r1, r3
 800ed20:	6878      	ldr	r0, [r7, #4]
 800ed22:	f000 fc5a 	bl	800f5da <USBH_SelectInterface>
 800ed26:	4603      	mov	r3, r0
 800ed28:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800ed2a:	7bbb      	ldrb	r3, [r7, #14]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d001      	beq.n	800ed34 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800ed30:	2302      	movs	r3, #2
 800ed32:	e131      	b.n	800ef98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800ed3a:	2050      	movs	r0, #80	; 0x50
 800ed3c:	f003 fd92 	bl	8012864 <malloc>
 800ed40:	4603      	mov	r3, r0
 800ed42:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800ed4a:	69db      	ldr	r3, [r3, #28]
 800ed4c:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ed4e:	68bb      	ldr	r3, [r7, #8]
 800ed50:	2b00      	cmp	r3, #0
 800ed52:	d101      	bne.n	800ed58 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800ed54:	2302      	movs	r3, #2
 800ed56:	e11f      	b.n	800ef98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ed58:	2250      	movs	r2, #80	; 0x50
 800ed5a:	2100      	movs	r1, #0
 800ed5c:	68b8      	ldr	r0, [r7, #8]
 800ed5e:	f003 fd91 	bl	8012884 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ed62:	7bfb      	ldrb	r3, [r7, #15]
 800ed64:	687a      	ldr	r2, [r7, #4]
 800ed66:	211a      	movs	r1, #26
 800ed68:	fb01 f303 	mul.w	r3, r1, r3
 800ed6c:	4413      	add	r3, r2
 800ed6e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ed72:	781b      	ldrb	r3, [r3, #0]
 800ed74:	b25b      	sxtb	r3, r3
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	da15      	bge.n	800eda6 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ed7a:	7bfb      	ldrb	r3, [r7, #15]
 800ed7c:	687a      	ldr	r2, [r7, #4]
 800ed7e:	211a      	movs	r1, #26
 800ed80:	fb01 f303 	mul.w	r3, r1, r3
 800ed84:	4413      	add	r3, r2
 800ed86:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ed8a:	781a      	ldrb	r2, [r3, #0]
 800ed8c:	68bb      	ldr	r3, [r7, #8]
 800ed8e:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ed90:	7bfb      	ldrb	r3, [r7, #15]
 800ed92:	687a      	ldr	r2, [r7, #4]
 800ed94:	211a      	movs	r1, #26
 800ed96:	fb01 f303 	mul.w	r3, r1, r3
 800ed9a:	4413      	add	r3, r2
 800ed9c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800eda0:	881a      	ldrh	r2, [r3, #0]
 800eda2:	68bb      	ldr	r3, [r7, #8]
 800eda4:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	785b      	ldrb	r3, [r3, #1]
 800edaa:	4619      	mov	r1, r3
 800edac:	6878      	ldr	r0, [r7, #4]
 800edae:	f001 ff26 	bl	8010bfe <USBH_AllocPipe>
 800edb2:	4603      	mov	r3, r0
 800edb4:	461a      	mov	r2, r3
 800edb6:	68bb      	ldr	r3, [r7, #8]
 800edb8:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800edba:	68bb      	ldr	r3, [r7, #8]
 800edbc:	7819      	ldrb	r1, [r3, #0]
 800edbe:	68bb      	ldr	r3, [r7, #8]
 800edc0:	7858      	ldrb	r0, [r3, #1]
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800edce:	68ba      	ldr	r2, [r7, #8]
 800edd0:	8952      	ldrh	r2, [r2, #10]
 800edd2:	9202      	str	r2, [sp, #8]
 800edd4:	2203      	movs	r2, #3
 800edd6:	9201      	str	r2, [sp, #4]
 800edd8:	9300      	str	r3, [sp, #0]
 800edda:	4623      	mov	r3, r4
 800eddc:	4602      	mov	r2, r0
 800edde:	6878      	ldr	r0, [r7, #4]
 800ede0:	f001 fede 	bl	8010ba0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	781b      	ldrb	r3, [r3, #0]
 800ede8:	2200      	movs	r2, #0
 800edea:	4619      	mov	r1, r3
 800edec:	6878      	ldr	r0, [r7, #4]
 800edee:	f003 fc8b 	bl	8012708 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800edf2:	2300      	movs	r3, #0
 800edf4:	2200      	movs	r2, #0
 800edf6:	210a      	movs	r1, #10
 800edf8:	6878      	ldr	r0, [r7, #4]
 800edfa:	f000 fc0a 	bl	800f612 <USBH_FindInterface>
 800edfe:	4603      	mov	r3, r0
 800ee00:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800ee02:	7bfb      	ldrb	r3, [r7, #15]
 800ee04:	2bff      	cmp	r3, #255	; 0xff
 800ee06:	d002      	beq.n	800ee0e <USBH_CDC_InterfaceInit+0x11a>
 800ee08:	7bfb      	ldrb	r3, [r7, #15]
 800ee0a:	2b01      	cmp	r3, #1
 800ee0c:	d901      	bls.n	800ee12 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800ee0e:	2302      	movs	r3, #2
 800ee10:	e0c2      	b.n	800ef98 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ee12:	7bfb      	ldrb	r3, [r7, #15]
 800ee14:	687a      	ldr	r2, [r7, #4]
 800ee16:	211a      	movs	r1, #26
 800ee18:	fb01 f303 	mul.w	r3, r1, r3
 800ee1c:	4413      	add	r3, r2
 800ee1e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	b25b      	sxtb	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	da16      	bge.n	800ee58 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ee2a:	7bfb      	ldrb	r3, [r7, #15]
 800ee2c:	687a      	ldr	r2, [r7, #4]
 800ee2e:	211a      	movs	r1, #26
 800ee30:	fb01 f303 	mul.w	r3, r1, r3
 800ee34:	4413      	add	r3, r2
 800ee36:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ee3a:	781a      	ldrb	r2, [r3, #0]
 800ee3c:	68bb      	ldr	r3, [r7, #8]
 800ee3e:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ee40:	7bfb      	ldrb	r3, [r7, #15]
 800ee42:	687a      	ldr	r2, [r7, #4]
 800ee44:	211a      	movs	r1, #26
 800ee46:	fb01 f303 	mul.w	r3, r1, r3
 800ee4a:	4413      	add	r3, r2
 800ee4c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ee50:	881a      	ldrh	r2, [r3, #0]
 800ee52:	68bb      	ldr	r3, [r7, #8]
 800ee54:	835a      	strh	r2, [r3, #26]
 800ee56:	e015      	b.n	800ee84 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ee58:	7bfb      	ldrb	r3, [r7, #15]
 800ee5a:	687a      	ldr	r2, [r7, #4]
 800ee5c:	211a      	movs	r1, #26
 800ee5e:	fb01 f303 	mul.w	r3, r1, r3
 800ee62:	4413      	add	r3, r2
 800ee64:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800ee68:	781a      	ldrb	r2, [r3, #0]
 800ee6a:	68bb      	ldr	r3, [r7, #8]
 800ee6c:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800ee6e:	7bfb      	ldrb	r3, [r7, #15]
 800ee70:	687a      	ldr	r2, [r7, #4]
 800ee72:	211a      	movs	r1, #26
 800ee74:	fb01 f303 	mul.w	r3, r1, r3
 800ee78:	4413      	add	r3, r2
 800ee7a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800ee7e:	881a      	ldrh	r2, [r3, #0]
 800ee80:	68bb      	ldr	r3, [r7, #8]
 800ee82:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800ee84:	7bfb      	ldrb	r3, [r7, #15]
 800ee86:	687a      	ldr	r2, [r7, #4]
 800ee88:	211a      	movs	r1, #26
 800ee8a:	fb01 f303 	mul.w	r3, r1, r3
 800ee8e:	4413      	add	r3, r2
 800ee90:	f203 3356 	addw	r3, r3, #854	; 0x356
 800ee94:	781b      	ldrb	r3, [r3, #0]
 800ee96:	b25b      	sxtb	r3, r3
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	da16      	bge.n	800eeca <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ee9c:	7bfb      	ldrb	r3, [r7, #15]
 800ee9e:	687a      	ldr	r2, [r7, #4]
 800eea0:	211a      	movs	r1, #26
 800eea2:	fb01 f303 	mul.w	r3, r1, r3
 800eea6:	4413      	add	r3, r2
 800eea8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800eeac:	781a      	ldrb	r2, [r3, #0]
 800eeae:	68bb      	ldr	r3, [r7, #8]
 800eeb0:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800eeb2:	7bfb      	ldrb	r3, [r7, #15]
 800eeb4:	687a      	ldr	r2, [r7, #4]
 800eeb6:	211a      	movs	r1, #26
 800eeb8:	fb01 f303 	mul.w	r3, r1, r3
 800eebc:	4413      	add	r3, r2
 800eebe:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800eec2:	881a      	ldrh	r2, [r3, #0]
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	835a      	strh	r2, [r3, #26]
 800eec8:	e015      	b.n	800eef6 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800eeca:	7bfb      	ldrb	r3, [r7, #15]
 800eecc:	687a      	ldr	r2, [r7, #4]
 800eece:	211a      	movs	r1, #26
 800eed0:	fb01 f303 	mul.w	r3, r1, r3
 800eed4:	4413      	add	r3, r2
 800eed6:	f203 3356 	addw	r3, r3, #854	; 0x356
 800eeda:	781a      	ldrb	r2, [r3, #0]
 800eedc:	68bb      	ldr	r3, [r7, #8]
 800eede:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800eee0:	7bfb      	ldrb	r3, [r7, #15]
 800eee2:	687a      	ldr	r2, [r7, #4]
 800eee4:	211a      	movs	r1, #26
 800eee6:	fb01 f303 	mul.w	r3, r1, r3
 800eeea:	4413      	add	r3, r2
 800eeec:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800eef0:	881a      	ldrh	r2, [r3, #0]
 800eef2:	68bb      	ldr	r3, [r7, #8]
 800eef4:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	7b9b      	ldrb	r3, [r3, #14]
 800eefa:	4619      	mov	r1, r3
 800eefc:	6878      	ldr	r0, [r7, #4]
 800eefe:	f001 fe7e 	bl	8010bfe <USBH_AllocPipe>
 800ef02:	4603      	mov	r3, r0
 800ef04:	461a      	mov	r2, r3
 800ef06:	68bb      	ldr	r3, [r7, #8]
 800ef08:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ef0a:	68bb      	ldr	r3, [r7, #8]
 800ef0c:	7bdb      	ldrb	r3, [r3, #15]
 800ef0e:	4619      	mov	r1, r3
 800ef10:	6878      	ldr	r0, [r7, #4]
 800ef12:	f001 fe74 	bl	8010bfe <USBH_AllocPipe>
 800ef16:	4603      	mov	r3, r0
 800ef18:	461a      	mov	r2, r3
 800ef1a:	68bb      	ldr	r3, [r7, #8]
 800ef1c:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ef1e:	68bb      	ldr	r3, [r7, #8]
 800ef20:	7b59      	ldrb	r1, [r3, #13]
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	7b98      	ldrb	r0, [r3, #14]
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ef32:	68ba      	ldr	r2, [r7, #8]
 800ef34:	8b12      	ldrh	r2, [r2, #24]
 800ef36:	9202      	str	r2, [sp, #8]
 800ef38:	2202      	movs	r2, #2
 800ef3a:	9201      	str	r2, [sp, #4]
 800ef3c:	9300      	str	r3, [sp, #0]
 800ef3e:	4623      	mov	r3, r4
 800ef40:	4602      	mov	r2, r0
 800ef42:	6878      	ldr	r0, [r7, #4]
 800ef44:	f001 fe2c 	bl	8010ba0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	7b19      	ldrb	r1, [r3, #12]
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	7bd8      	ldrb	r0, [r3, #15]
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800ef5c:	68ba      	ldr	r2, [r7, #8]
 800ef5e:	8b52      	ldrh	r2, [r2, #26]
 800ef60:	9202      	str	r2, [sp, #8]
 800ef62:	2202      	movs	r2, #2
 800ef64:	9201      	str	r2, [sp, #4]
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	4623      	mov	r3, r4
 800ef6a:	4602      	mov	r2, r0
 800ef6c:	6878      	ldr	r0, [r7, #4]
 800ef6e:	f001 fe17 	bl	8010ba0 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ef72:	68bb      	ldr	r3, [r7, #8]
 800ef74:	2200      	movs	r2, #0
 800ef76:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ef7a:	68bb      	ldr	r3, [r7, #8]
 800ef7c:	7b5b      	ldrb	r3, [r3, #13]
 800ef7e:	2200      	movs	r2, #0
 800ef80:	4619      	mov	r1, r3
 800ef82:	6878      	ldr	r0, [r7, #4]
 800ef84:	f003 fbc0 	bl	8012708 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	7b1b      	ldrb	r3, [r3, #12]
 800ef8c:	2200      	movs	r2, #0
 800ef8e:	4619      	mov	r1, r3
 800ef90:	6878      	ldr	r0, [r7, #4]
 800ef92:	f003 fbb9 	bl	8012708 <USBH_LL_SetToggle>

  return USBH_OK;
 800ef96:	2300      	movs	r3, #0
}
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3714      	adds	r7, #20
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd90      	pop	{r4, r7, pc}

0800efa0 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800efae:	69db      	ldr	r3, [r3, #28]
 800efb0:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	781b      	ldrb	r3, [r3, #0]
 800efb6:	2b00      	cmp	r3, #0
 800efb8:	d00e      	beq.n	800efd8 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800efba:	68fb      	ldr	r3, [r7, #12]
 800efbc:	781b      	ldrb	r3, [r3, #0]
 800efbe:	4619      	mov	r1, r3
 800efc0:	6878      	ldr	r0, [r7, #4]
 800efc2:	f001 fe0c 	bl	8010bde <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	4619      	mov	r1, r3
 800efcc:	6878      	ldr	r0, [r7, #4]
 800efce:	f001 fe37 	bl	8010c40 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	2200      	movs	r2, #0
 800efd6:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800efd8:	68fb      	ldr	r3, [r7, #12]
 800efda:	7b1b      	ldrb	r3, [r3, #12]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d00e      	beq.n	800effe <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800efe0:	68fb      	ldr	r3, [r7, #12]
 800efe2:	7b1b      	ldrb	r3, [r3, #12]
 800efe4:	4619      	mov	r1, r3
 800efe6:	6878      	ldr	r0, [r7, #4]
 800efe8:	f001 fdf9 	bl	8010bde <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800efec:	68fb      	ldr	r3, [r7, #12]
 800efee:	7b1b      	ldrb	r3, [r3, #12]
 800eff0:	4619      	mov	r1, r3
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f001 fe24 	bl	8010c40 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800eff8:	68fb      	ldr	r3, [r7, #12]
 800effa:	2200      	movs	r2, #0
 800effc:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	7b5b      	ldrb	r3, [r3, #13]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d00e      	beq.n	800f024 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	7b5b      	ldrb	r3, [r3, #13]
 800f00a:	4619      	mov	r1, r3
 800f00c:	6878      	ldr	r0, [r7, #4]
 800f00e:	f001 fde6 	bl	8010bde <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f012:	68fb      	ldr	r3, [r7, #12]
 800f014:	7b5b      	ldrb	r3, [r3, #13]
 800f016:	4619      	mov	r1, r3
 800f018:	6878      	ldr	r0, [r7, #4]
 800f01a:	f001 fe11 	bl	8010c40 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2200      	movs	r2, #0
 800f022:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f02a:	69db      	ldr	r3, [r3, #28]
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d00b      	beq.n	800f048 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f036:	69db      	ldr	r3, [r3, #28]
 800f038:	4618      	mov	r0, r3
 800f03a:	f003 fc1b 	bl	8012874 <free>
    phost->pActiveClass->pData = 0U;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f044:	2200      	movs	r2, #0
 800f046:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f048:	2300      	movs	r3, #0
}
 800f04a:	4618      	mov	r0, r3
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}

0800f052 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f052:	b580      	push	{r7, lr}
 800f054:	b084      	sub	sp, #16
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f05a:	687b      	ldr	r3, [r7, #4]
 800f05c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f060:	69db      	ldr	r3, [r3, #28]
 800f062:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f064:	68fb      	ldr	r3, [r7, #12]
 800f066:	3340      	adds	r3, #64	; 0x40
 800f068:	4619      	mov	r1, r3
 800f06a:	6878      	ldr	r0, [r7, #4]
 800f06c:	f000 f8b1 	bl	800f1d2 <GetLineCoding>
 800f070:	4603      	mov	r3, r0
 800f072:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f074:	7afb      	ldrb	r3, [r7, #11]
 800f076:	2b00      	cmp	r3, #0
 800f078:	d105      	bne.n	800f086 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f080:	2102      	movs	r1, #2
 800f082:	6878      	ldr	r0, [r7, #4]
 800f084:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f086:	7afb      	ldrb	r3, [r7, #11]
}
 800f088:	4618      	mov	r0, r3
 800f08a:	3710      	adds	r7, #16
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b084      	sub	sp, #16
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f098:	2301      	movs	r3, #1
 800f09a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f09c:	2300      	movs	r3, #0
 800f09e:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f0a6:	69db      	ldr	r3, [r3, #28]
 800f0a8:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f0aa:	68bb      	ldr	r3, [r7, #8]
 800f0ac:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f0b0:	2b04      	cmp	r3, #4
 800f0b2:	d877      	bhi.n	800f1a4 <USBH_CDC_Process+0x114>
 800f0b4:	a201      	add	r2, pc, #4	; (adr r2, 800f0bc <USBH_CDC_Process+0x2c>)
 800f0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f0ba:	bf00      	nop
 800f0bc:	0800f0d1 	.word	0x0800f0d1
 800f0c0:	0800f0d7 	.word	0x0800f0d7
 800f0c4:	0800f107 	.word	0x0800f107
 800f0c8:	0800f17b 	.word	0x0800f17b
 800f0cc:	0800f189 	.word	0x0800f189
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	73fb      	strb	r3, [r7, #15]
      break;
 800f0d4:	e06d      	b.n	800f1b2 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f0d6:	68bb      	ldr	r3, [r7, #8]
 800f0d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f0da:	4619      	mov	r1, r3
 800f0dc:	6878      	ldr	r0, [r7, #4]
 800f0de:	f000 f897 	bl	800f210 <SetLineCoding>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f0e6:	7bbb      	ldrb	r3, [r7, #14]
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d104      	bne.n	800f0f6 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f0ec:	68bb      	ldr	r3, [r7, #8]
 800f0ee:	2202      	movs	r2, #2
 800f0f0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f0f4:	e058      	b.n	800f1a8 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f0f6:	7bbb      	ldrb	r3, [r7, #14]
 800f0f8:	2b01      	cmp	r3, #1
 800f0fa:	d055      	beq.n	800f1a8 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f0fc:	68bb      	ldr	r3, [r7, #8]
 800f0fe:	2204      	movs	r2, #4
 800f100:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f104:	e050      	b.n	800f1a8 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f106:	68bb      	ldr	r3, [r7, #8]
 800f108:	3340      	adds	r3, #64	; 0x40
 800f10a:	4619      	mov	r1, r3
 800f10c:	6878      	ldr	r0, [r7, #4]
 800f10e:	f000 f860 	bl	800f1d2 <GetLineCoding>
 800f112:	4603      	mov	r3, r0
 800f114:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f116:	7bbb      	ldrb	r3, [r7, #14]
 800f118:	2b00      	cmp	r3, #0
 800f11a:	d126      	bne.n	800f16a <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f11c:	68bb      	ldr	r3, [r7, #8]
 800f11e:	2200      	movs	r2, #0
 800f120:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f124:	68bb      	ldr	r3, [r7, #8]
 800f126:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f12a:	68bb      	ldr	r3, [r7, #8]
 800f12c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f12e:	791b      	ldrb	r3, [r3, #4]
 800f130:	429a      	cmp	r2, r3
 800f132:	d13b      	bne.n	800f1ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f134:	68bb      	ldr	r3, [r7, #8]
 800f136:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800f13a:	68bb      	ldr	r3, [r7, #8]
 800f13c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f13e:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f140:	429a      	cmp	r2, r3
 800f142:	d133      	bne.n	800f1ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f144:	68bb      	ldr	r3, [r7, #8]
 800f146:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800f14a:	68bb      	ldr	r3, [r7, #8]
 800f14c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f14e:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f150:	429a      	cmp	r2, r3
 800f152:	d12b      	bne.n	800f1ac <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f154:	68bb      	ldr	r3, [r7, #8]
 800f156:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f158:	68bb      	ldr	r3, [r7, #8]
 800f15a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f15c:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f15e:	429a      	cmp	r2, r3
 800f160:	d124      	bne.n	800f1ac <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f162:	6878      	ldr	r0, [r7, #4]
 800f164:	f000 f958 	bl	800f418 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f168:	e020      	b.n	800f1ac <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f16a:	7bbb      	ldrb	r3, [r7, #14]
 800f16c:	2b01      	cmp	r3, #1
 800f16e:	d01d      	beq.n	800f1ac <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f170:	68bb      	ldr	r3, [r7, #8]
 800f172:	2204      	movs	r2, #4
 800f174:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f178:	e018      	b.n	800f1ac <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f17a:	6878      	ldr	r0, [r7, #4]
 800f17c:	f000 f867 	bl	800f24e <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f180:	6878      	ldr	r0, [r7, #4]
 800f182:	f000 f8da 	bl	800f33a <CDC_ProcessReception>
      break;
 800f186:	e014      	b.n	800f1b2 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f188:	2100      	movs	r1, #0
 800f18a:	6878      	ldr	r0, [r7, #4]
 800f18c:	f001 f80f 	bl	80101ae <USBH_ClrFeature>
 800f190:	4603      	mov	r3, r0
 800f192:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f194:	7bbb      	ldrb	r3, [r7, #14]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d10a      	bne.n	800f1b0 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f19a:	68bb      	ldr	r3, [r7, #8]
 800f19c:	2200      	movs	r2, #0
 800f19e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800f1a2:	e005      	b.n	800f1b0 <USBH_CDC_Process+0x120>

    default:
      break;
 800f1a4:	bf00      	nop
 800f1a6:	e004      	b.n	800f1b2 <USBH_CDC_Process+0x122>
      break;
 800f1a8:	bf00      	nop
 800f1aa:	e002      	b.n	800f1b2 <USBH_CDC_Process+0x122>
      break;
 800f1ac:	bf00      	nop
 800f1ae:	e000      	b.n	800f1b2 <USBH_CDC_Process+0x122>
      break;
 800f1b0:	bf00      	nop

  }

  return status;
 800f1b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f1b4:	4618      	mov	r0, r3
 800f1b6:	3710      	adds	r7, #16
 800f1b8:	46bd      	mov	sp, r7
 800f1ba:	bd80      	pop	{r7, pc}

0800f1bc <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f1bc:	b480      	push	{r7}
 800f1be:	b083      	sub	sp, #12
 800f1c0:	af00      	add	r7, sp, #0
 800f1c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f1c4:	2300      	movs	r3, #0
}
 800f1c6:	4618      	mov	r0, r3
 800f1c8:	370c      	adds	r7, #12
 800f1ca:	46bd      	mov	sp, r7
 800f1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1d0:	4770      	bx	lr

0800f1d2 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f1d2:	b580      	push	{r7, lr}
 800f1d4:	b082      	sub	sp, #8
 800f1d6:	af00      	add	r7, sp, #0
 800f1d8:	6078      	str	r0, [r7, #4]
 800f1da:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	22a1      	movs	r2, #161	; 0xa1
 800f1e0:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f1e2:	687b      	ldr	r3, [r7, #4]
 800f1e4:	2221      	movs	r2, #33	; 0x21
 800f1e6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f1e8:	687b      	ldr	r3, [r7, #4]
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	2200      	movs	r2, #0
 800f1f2:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2207      	movs	r2, #7
 800f1f8:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f1fa:	683b      	ldr	r3, [r7, #0]
 800f1fc:	2207      	movs	r2, #7
 800f1fe:	4619      	mov	r1, r3
 800f200:	6878      	ldr	r0, [r7, #4]
 800f202:	f001 fa7b 	bl	80106fc <USBH_CtlReq>
 800f206:	4603      	mov	r3, r0
}
 800f208:	4618      	mov	r0, r3
 800f20a:	3708      	adds	r7, #8
 800f20c:	46bd      	mov	sp, r7
 800f20e:	bd80      	pop	{r7, pc}

0800f210 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f210:	b580      	push	{r7, lr}
 800f212:	b082      	sub	sp, #8
 800f214:	af00      	add	r7, sp, #0
 800f216:	6078      	str	r0, [r7, #4]
 800f218:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	2221      	movs	r2, #33	; 0x21
 800f21e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	2220      	movs	r2, #32
 800f224:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2200      	movs	r2, #0
 800f22a:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2200      	movs	r2, #0
 800f230:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	2207      	movs	r2, #7
 800f236:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f238:	683b      	ldr	r3, [r7, #0]
 800f23a:	2207      	movs	r2, #7
 800f23c:	4619      	mov	r1, r3
 800f23e:	6878      	ldr	r0, [r7, #4]
 800f240:	f001 fa5c 	bl	80106fc <USBH_CtlReq>
 800f244:	4603      	mov	r3, r0
}
 800f246:	4618      	mov	r0, r3
 800f248:	3708      	adds	r7, #8
 800f24a:	46bd      	mov	sp, r7
 800f24c:	bd80      	pop	{r7, pc}

0800f24e <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f24e:	b580      	push	{r7, lr}
 800f250:	b086      	sub	sp, #24
 800f252:	af02      	add	r7, sp, #8
 800f254:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f25c:	69db      	ldr	r3, [r3, #28]
 800f25e:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f260:	2300      	movs	r3, #0
 800f262:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f26a:	2b01      	cmp	r3, #1
 800f26c:	d002      	beq.n	800f274 <CDC_ProcessTransmission+0x26>
 800f26e:	2b02      	cmp	r3, #2
 800f270:	d023      	beq.n	800f2ba <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f272:	e05e      	b.n	800f332 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f274:	68fb      	ldr	r3, [r7, #12]
 800f276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f278:	68fa      	ldr	r2, [r7, #12]
 800f27a:	8b12      	ldrh	r2, [r2, #24]
 800f27c:	4293      	cmp	r3, r2
 800f27e:	d90b      	bls.n	800f298 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	69d9      	ldr	r1, [r3, #28]
 800f284:	68fb      	ldr	r3, [r7, #12]
 800f286:	8b1a      	ldrh	r2, [r3, #24]
 800f288:	68fb      	ldr	r3, [r7, #12]
 800f28a:	7b5b      	ldrb	r3, [r3, #13]
 800f28c:	2001      	movs	r0, #1
 800f28e:	9000      	str	r0, [sp, #0]
 800f290:	6878      	ldr	r0, [r7, #4]
 800f292:	f001 fc42 	bl	8010b1a <USBH_BulkSendData>
 800f296:	e00b      	b.n	800f2b0 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f298:	68fb      	ldr	r3, [r7, #12]
 800f29a:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f29c:	68fb      	ldr	r3, [r7, #12]
 800f29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800f2a0:	b29a      	uxth	r2, r3
 800f2a2:	68fb      	ldr	r3, [r7, #12]
 800f2a4:	7b5b      	ldrb	r3, [r3, #13]
 800f2a6:	2001      	movs	r0, #1
 800f2a8:	9000      	str	r0, [sp, #0]
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f001 fc35 	bl	8010b1a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f2b0:	68fb      	ldr	r3, [r7, #12]
 800f2b2:	2202      	movs	r2, #2
 800f2b4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f2b8:	e03b      	b.n	800f332 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f2ba:	68fb      	ldr	r3, [r7, #12]
 800f2bc:	7b5b      	ldrb	r3, [r3, #13]
 800f2be:	4619      	mov	r1, r3
 800f2c0:	6878      	ldr	r0, [r7, #4]
 800f2c2:	f003 f9f7 	bl	80126b4 <USBH_LL_GetURBState>
 800f2c6:	4603      	mov	r3, r0
 800f2c8:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f2ca:	7afb      	ldrb	r3, [r7, #11]
 800f2cc:	2b01      	cmp	r3, #1
 800f2ce:	d128      	bne.n	800f322 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f2d0:	68fb      	ldr	r3, [r7, #12]
 800f2d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2d4:	68fa      	ldr	r2, [r7, #12]
 800f2d6:	8b12      	ldrh	r2, [r2, #24]
 800f2d8:	4293      	cmp	r3, r2
 800f2da:	d90e      	bls.n	800f2fa <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f2dc:	68fb      	ldr	r3, [r7, #12]
 800f2de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f2e0:	68fa      	ldr	r2, [r7, #12]
 800f2e2:	8b12      	ldrh	r2, [r2, #24]
 800f2e4:	1a9a      	subs	r2, r3, r2
 800f2e6:	68fb      	ldr	r3, [r7, #12]
 800f2e8:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	69db      	ldr	r3, [r3, #28]
 800f2ee:	68fa      	ldr	r2, [r7, #12]
 800f2f0:	8b12      	ldrh	r2, [r2, #24]
 800f2f2:	441a      	add	r2, r3
 800f2f4:	68fb      	ldr	r3, [r7, #12]
 800f2f6:	61da      	str	r2, [r3, #28]
 800f2f8:	e002      	b.n	800f300 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2200      	movs	r2, #0
 800f2fe:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f304:	2b00      	cmp	r3, #0
 800f306:	d004      	beq.n	800f312 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f308:	68fb      	ldr	r3, [r7, #12]
 800f30a:	2201      	movs	r2, #1
 800f30c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f310:	e00e      	b.n	800f330 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f312:	68fb      	ldr	r3, [r7, #12]
 800f314:	2200      	movs	r2, #0
 800f316:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f31a:	6878      	ldr	r0, [r7, #4]
 800f31c:	f000 f868 	bl	800f3f0 <USBH_CDC_TransmitCallback>
      break;
 800f320:	e006      	b.n	800f330 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800f322:	7afb      	ldrb	r3, [r7, #11]
 800f324:	2b02      	cmp	r3, #2
 800f326:	d103      	bne.n	800f330 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f328:	68fb      	ldr	r3, [r7, #12]
 800f32a:	2201      	movs	r2, #1
 800f32c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f330:	bf00      	nop
  }
}
 800f332:	bf00      	nop
 800f334:	3710      	adds	r7, #16
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b086      	sub	sp, #24
 800f33e:	af00      	add	r7, sp, #0
 800f340:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f342:	687b      	ldr	r3, [r7, #4]
 800f344:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f348:	69db      	ldr	r3, [r3, #28]
 800f34a:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f34c:	2300      	movs	r3, #0
 800f34e:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f356:	2b03      	cmp	r3, #3
 800f358:	d002      	beq.n	800f360 <CDC_ProcessReception+0x26>
 800f35a:	2b04      	cmp	r3, #4
 800f35c:	d00e      	beq.n	800f37c <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f35e:	e043      	b.n	800f3e8 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800f360:	697b      	ldr	r3, [r7, #20]
 800f362:	6a19      	ldr	r1, [r3, #32]
 800f364:	697b      	ldr	r3, [r7, #20]
 800f366:	8b5a      	ldrh	r2, [r3, #26]
 800f368:	697b      	ldr	r3, [r7, #20]
 800f36a:	7b1b      	ldrb	r3, [r3, #12]
 800f36c:	6878      	ldr	r0, [r7, #4]
 800f36e:	f001 fbf9 	bl	8010b64 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f372:	697b      	ldr	r3, [r7, #20]
 800f374:	2204      	movs	r2, #4
 800f376:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f37a:	e035      	b.n	800f3e8 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f37c:	697b      	ldr	r3, [r7, #20]
 800f37e:	7b1b      	ldrb	r3, [r3, #12]
 800f380:	4619      	mov	r1, r3
 800f382:	6878      	ldr	r0, [r7, #4]
 800f384:	f003 f996 	bl	80126b4 <USBH_LL_GetURBState>
 800f388:	4603      	mov	r3, r0
 800f38a:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f38c:	7cfb      	ldrb	r3, [r7, #19]
 800f38e:	2b01      	cmp	r3, #1
 800f390:	d129      	bne.n	800f3e6 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f392:	697b      	ldr	r3, [r7, #20]
 800f394:	7b1b      	ldrb	r3, [r3, #12]
 800f396:	4619      	mov	r1, r3
 800f398:	6878      	ldr	r0, [r7, #4]
 800f39a:	f003 f8f9 	bl	8012590 <USBH_LL_GetLastXferSize>
 800f39e:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f3a0:	697b      	ldr	r3, [r7, #20]
 800f3a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f3a4:	68fa      	ldr	r2, [r7, #12]
 800f3a6:	429a      	cmp	r2, r3
 800f3a8:	d016      	beq.n	800f3d8 <CDC_ProcessReception+0x9e>
 800f3aa:	697b      	ldr	r3, [r7, #20]
 800f3ac:	8b5b      	ldrh	r3, [r3, #26]
 800f3ae:	461a      	mov	r2, r3
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	4293      	cmp	r3, r2
 800f3b4:	d910      	bls.n	800f3d8 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f3ba:	68fb      	ldr	r3, [r7, #12]
 800f3bc:	1ad2      	subs	r2, r2, r3
 800f3be:	697b      	ldr	r3, [r7, #20]
 800f3c0:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800f3c2:	697b      	ldr	r3, [r7, #20]
 800f3c4:	6a1a      	ldr	r2, [r3, #32]
 800f3c6:	68fb      	ldr	r3, [r7, #12]
 800f3c8:	441a      	add	r2, r3
 800f3ca:	697b      	ldr	r3, [r7, #20]
 800f3cc:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f3ce:	697b      	ldr	r3, [r7, #20]
 800f3d0:	2203      	movs	r2, #3
 800f3d2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f3d6:	e006      	b.n	800f3e6 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f3d8:	697b      	ldr	r3, [r7, #20]
 800f3da:	2200      	movs	r2, #0
 800f3dc:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f3e0:	6878      	ldr	r0, [r7, #4]
 800f3e2:	f000 f80f 	bl	800f404 <USBH_CDC_ReceiveCallback>
      break;
 800f3e6:	bf00      	nop
  }
}
 800f3e8:	bf00      	nop
 800f3ea:	3718      	adds	r7, #24
 800f3ec:	46bd      	mov	sp, r7
 800f3ee:	bd80      	pop	{r7, pc}

0800f3f0 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f3f0:	b480      	push	{r7}
 800f3f2:	b083      	sub	sp, #12
 800f3f4:	af00      	add	r7, sp, #0
 800f3f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f3f8:	bf00      	nop
 800f3fa:	370c      	adds	r7, #12
 800f3fc:	46bd      	mov	sp, r7
 800f3fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f402:	4770      	bx	lr

0800f404 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f404:	b480      	push	{r7}
 800f406:	b083      	sub	sp, #12
 800f408:	af00      	add	r7, sp, #0
 800f40a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f40c:	bf00      	nop
 800f40e:	370c      	adds	r7, #12
 800f410:	46bd      	mov	sp, r7
 800f412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f416:	4770      	bx	lr

0800f418 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f418:	b480      	push	{r7}
 800f41a:	b083      	sub	sp, #12
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f420:	bf00      	nop
 800f422:	370c      	adds	r7, #12
 800f424:	46bd      	mov	sp, r7
 800f426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f42a:	4770      	bx	lr

0800f42c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f42c:	b580      	push	{r7, lr}
 800f42e:	b084      	sub	sp, #16
 800f430:	af00      	add	r7, sp, #0
 800f432:	60f8      	str	r0, [r7, #12]
 800f434:	60b9      	str	r1, [r7, #8]
 800f436:	4613      	mov	r3, r2
 800f438:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f43a:	68fb      	ldr	r3, [r7, #12]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d101      	bne.n	800f444 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f440:	2302      	movs	r3, #2
 800f442:	e029      	b.n	800f498 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f444:	68fb      	ldr	r3, [r7, #12]
 800f446:	79fa      	ldrb	r2, [r7, #7]
 800f448:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	2200      	movs	r2, #0
 800f450:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800f454:	68fb      	ldr	r3, [r7, #12]
 800f456:	2200      	movs	r2, #0
 800f458:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f000 f81f 	bl	800f4a0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	2200      	movs	r2, #0
 800f466:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f46a:	68fb      	ldr	r3, [r7, #12]
 800f46c:	2200      	movs	r2, #0
 800f46e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f472:	68fb      	ldr	r3, [r7, #12]
 800f474:	2200      	movs	r2, #0
 800f476:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f47a:	68fb      	ldr	r3, [r7, #12]
 800f47c:	2200      	movs	r2, #0
 800f47e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f482:	68bb      	ldr	r3, [r7, #8]
 800f484:	2b00      	cmp	r3, #0
 800f486:	d003      	beq.n	800f490 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	68ba      	ldr	r2, [r7, #8]
 800f48c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f490:	68f8      	ldr	r0, [r7, #12]
 800f492:	f002 ffc9 	bl	8012428 <USBH_LL_Init>

  return USBH_OK;
 800f496:	2300      	movs	r3, #0
}
 800f498:	4618      	mov	r0, r3
 800f49a:	3710      	adds	r7, #16
 800f49c:	46bd      	mov	sp, r7
 800f49e:	bd80      	pop	{r7, pc}

0800f4a0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f4a0:	b580      	push	{r7, lr}
 800f4a2:	b084      	sub	sp, #16
 800f4a4:	af00      	add	r7, sp, #0
 800f4a6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f4a8:	2300      	movs	r3, #0
 800f4aa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f4ac:	2300      	movs	r3, #0
 800f4ae:	60fb      	str	r3, [r7, #12]
 800f4b0:	e009      	b.n	800f4c6 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f4b2:	687a      	ldr	r2, [r7, #4]
 800f4b4:	68fb      	ldr	r3, [r7, #12]
 800f4b6:	33e0      	adds	r3, #224	; 0xe0
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	4413      	add	r3, r2
 800f4bc:	2200      	movs	r2, #0
 800f4be:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	3301      	adds	r3, #1
 800f4c4:	60fb      	str	r3, [r7, #12]
 800f4c6:	68fb      	ldr	r3, [r7, #12]
 800f4c8:	2b0f      	cmp	r3, #15
 800f4ca:	d9f2      	bls.n	800f4b2 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f4cc:	2300      	movs	r3, #0
 800f4ce:	60fb      	str	r3, [r7, #12]
 800f4d0:	e009      	b.n	800f4e6 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f4d2:	687a      	ldr	r2, [r7, #4]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	4413      	add	r3, r2
 800f4d8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f4dc:	2200      	movs	r2, #0
 800f4de:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f4e0:	68fb      	ldr	r3, [r7, #12]
 800f4e2:	3301      	adds	r3, #1
 800f4e4:	60fb      	str	r3, [r7, #12]
 800f4e6:	68fb      	ldr	r3, [r7, #12]
 800f4e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f4ec:	d3f1      	bcc.n	800f4d2 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f4fa:	687b      	ldr	r3, [r7, #4]
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	2200      	movs	r2, #0
 800f504:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	2201      	movs	r2, #1
 800f50c:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	2240      	movs	r2, #64	; 0x40
 800f512:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	2200      	movs	r2, #0
 800f518:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2200      	movs	r2, #0
 800f51e:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2201      	movs	r2, #1
 800f526:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800f52a:	687b      	ldr	r3, [r7, #4]
 800f52c:	2200      	movs	r2, #0
 800f52e:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	331c      	adds	r3, #28
 800f53e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f542:	2100      	movs	r1, #0
 800f544:	4618      	mov	r0, r3
 800f546:	f003 f99d 	bl	8012884 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f550:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f554:	2100      	movs	r1, #0
 800f556:	4618      	mov	r0, r3
 800f558:	f003 f994 	bl	8012884 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	f203 3326 	addw	r3, r3, #806	; 0x326
 800f562:	2212      	movs	r2, #18
 800f564:	2100      	movs	r1, #0
 800f566:	4618      	mov	r0, r3
 800f568:	f003 f98c 	bl	8012884 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f56c:	687b      	ldr	r3, [r7, #4]
 800f56e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f572:	223e      	movs	r2, #62	; 0x3e
 800f574:	2100      	movs	r1, #0
 800f576:	4618      	mov	r0, r3
 800f578:	f003 f984 	bl	8012884 <memset>

  return USBH_OK;
 800f57c:	2300      	movs	r3, #0
}
 800f57e:	4618      	mov	r0, r3
 800f580:	3710      	adds	r7, #16
 800f582:	46bd      	mov	sp, r7
 800f584:	bd80      	pop	{r7, pc}

0800f586 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f586:	b480      	push	{r7}
 800f588:	b085      	sub	sp, #20
 800f58a:	af00      	add	r7, sp, #0
 800f58c:	6078      	str	r0, [r7, #4]
 800f58e:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f590:	2300      	movs	r3, #0
 800f592:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f594:	683b      	ldr	r3, [r7, #0]
 800f596:	2b00      	cmp	r3, #0
 800f598:	d016      	beq.n	800f5c8 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f5a0:	2b00      	cmp	r3, #0
 800f5a2:	d10e      	bne.n	800f5c2 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f5a4:	687b      	ldr	r3, [r7, #4]
 800f5a6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f5aa:	1c59      	adds	r1, r3, #1
 800f5ac:	687a      	ldr	r2, [r7, #4]
 800f5ae:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f5b2:	687a      	ldr	r2, [r7, #4]
 800f5b4:	33de      	adds	r3, #222	; 0xde
 800f5b6:	6839      	ldr	r1, [r7, #0]
 800f5b8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f5bc:	2300      	movs	r3, #0
 800f5be:	73fb      	strb	r3, [r7, #15]
 800f5c0:	e004      	b.n	800f5cc <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f5c2:	2302      	movs	r3, #2
 800f5c4:	73fb      	strb	r3, [r7, #15]
 800f5c6:	e001      	b.n	800f5cc <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f5c8:	2302      	movs	r3, #2
 800f5ca:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f5cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	3714      	adds	r7, #20
 800f5d2:	46bd      	mov	sp, r7
 800f5d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d8:	4770      	bx	lr

0800f5da <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f5da:	b480      	push	{r7}
 800f5dc:	b085      	sub	sp, #20
 800f5de:	af00      	add	r7, sp, #0
 800f5e0:	6078      	str	r0, [r7, #4]
 800f5e2:	460b      	mov	r3, r1
 800f5e4:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800f5f0:	78fa      	ldrb	r2, [r7, #3]
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d204      	bcs.n	800f600 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	78fa      	ldrb	r2, [r7, #3]
 800f5fa:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800f5fe:	e001      	b.n	800f604 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800f600:	2302      	movs	r3, #2
 800f602:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f604:	7bfb      	ldrb	r3, [r7, #15]
}
 800f606:	4618      	mov	r0, r3
 800f608:	3714      	adds	r7, #20
 800f60a:	46bd      	mov	sp, r7
 800f60c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f610:	4770      	bx	lr

0800f612 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800f612:	b480      	push	{r7}
 800f614:	b087      	sub	sp, #28
 800f616:	af00      	add	r7, sp, #0
 800f618:	6078      	str	r0, [r7, #4]
 800f61a:	4608      	mov	r0, r1
 800f61c:	4611      	mov	r1, r2
 800f61e:	461a      	mov	r2, r3
 800f620:	4603      	mov	r3, r0
 800f622:	70fb      	strb	r3, [r7, #3]
 800f624:	460b      	mov	r3, r1
 800f626:	70bb      	strb	r3, [r7, #2]
 800f628:	4613      	mov	r3, r2
 800f62a:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800f62c:	2300      	movs	r3, #0
 800f62e:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800f630:	2300      	movs	r3, #0
 800f632:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f63a:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f63c:	e025      	b.n	800f68a <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800f63e:	7dfb      	ldrb	r3, [r7, #23]
 800f640:	221a      	movs	r2, #26
 800f642:	fb02 f303 	mul.w	r3, r2, r3
 800f646:	3308      	adds	r3, #8
 800f648:	68fa      	ldr	r2, [r7, #12]
 800f64a:	4413      	add	r3, r2
 800f64c:	3302      	adds	r3, #2
 800f64e:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f650:	693b      	ldr	r3, [r7, #16]
 800f652:	795b      	ldrb	r3, [r3, #5]
 800f654:	78fa      	ldrb	r2, [r7, #3]
 800f656:	429a      	cmp	r2, r3
 800f658:	d002      	beq.n	800f660 <USBH_FindInterface+0x4e>
 800f65a:	78fb      	ldrb	r3, [r7, #3]
 800f65c:	2bff      	cmp	r3, #255	; 0xff
 800f65e:	d111      	bne.n	800f684 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f660:	693b      	ldr	r3, [r7, #16]
 800f662:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800f664:	78ba      	ldrb	r2, [r7, #2]
 800f666:	429a      	cmp	r2, r3
 800f668:	d002      	beq.n	800f670 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f66a:	78bb      	ldrb	r3, [r7, #2]
 800f66c:	2bff      	cmp	r3, #255	; 0xff
 800f66e:	d109      	bne.n	800f684 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f670:	693b      	ldr	r3, [r7, #16]
 800f672:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800f674:	787a      	ldrb	r2, [r7, #1]
 800f676:	429a      	cmp	r2, r3
 800f678:	d002      	beq.n	800f680 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800f67a:	787b      	ldrb	r3, [r7, #1]
 800f67c:	2bff      	cmp	r3, #255	; 0xff
 800f67e:	d101      	bne.n	800f684 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800f680:	7dfb      	ldrb	r3, [r7, #23]
 800f682:	e006      	b.n	800f692 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800f684:	7dfb      	ldrb	r3, [r7, #23]
 800f686:	3301      	adds	r3, #1
 800f688:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800f68a:	7dfb      	ldrb	r3, [r7, #23]
 800f68c:	2b01      	cmp	r3, #1
 800f68e:	d9d6      	bls.n	800f63e <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800f690:	23ff      	movs	r3, #255	; 0xff
}
 800f692:	4618      	mov	r0, r3
 800f694:	371c      	adds	r7, #28
 800f696:	46bd      	mov	sp, r7
 800f698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f69c:	4770      	bx	lr

0800f69e <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800f69e:	b580      	push	{r7, lr}
 800f6a0:	b082      	sub	sp, #8
 800f6a2:	af00      	add	r7, sp, #0
 800f6a4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f002 fefa 	bl	80124a0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800f6ac:	2101      	movs	r1, #1
 800f6ae:	6878      	ldr	r0, [r7, #4]
 800f6b0:	f003 f813 	bl	80126da <USBH_LL_DriverVBUS>

  return USBH_OK;
 800f6b4:	2300      	movs	r3, #0
}
 800f6b6:	4618      	mov	r0, r3
 800f6b8:	3708      	adds	r7, #8
 800f6ba:	46bd      	mov	sp, r7
 800f6bc:	bd80      	pop	{r7, pc}
	...

0800f6c0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800f6c0:	b580      	push	{r7, lr}
 800f6c2:	b088      	sub	sp, #32
 800f6c4:	af04      	add	r7, sp, #16
 800f6c6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800f6c8:	2302      	movs	r3, #2
 800f6ca:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800f6cc:	2300      	movs	r3, #0
 800f6ce:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800f6d0:	687b      	ldr	r3, [r7, #4]
 800f6d2:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800f6d6:	b2db      	uxtb	r3, r3
 800f6d8:	2b01      	cmp	r3, #1
 800f6da:	d102      	bne.n	800f6e2 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800f6dc:	687b      	ldr	r3, [r7, #4]
 800f6de:	2203      	movs	r2, #3
 800f6e0:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	781b      	ldrb	r3, [r3, #0]
 800f6e6:	b2db      	uxtb	r3, r3
 800f6e8:	2b0b      	cmp	r3, #11
 800f6ea:	f200 81be 	bhi.w	800fa6a <USBH_Process+0x3aa>
 800f6ee:	a201      	add	r2, pc, #4	; (adr r2, 800f6f4 <USBH_Process+0x34>)
 800f6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6f4:	0800f725 	.word	0x0800f725
 800f6f8:	0800f757 	.word	0x0800f757
 800f6fc:	0800f7bf 	.word	0x0800f7bf
 800f700:	0800fa05 	.word	0x0800fa05
 800f704:	0800fa6b 	.word	0x0800fa6b
 800f708:	0800f863 	.word	0x0800f863
 800f70c:	0800f9ab 	.word	0x0800f9ab
 800f710:	0800f899 	.word	0x0800f899
 800f714:	0800f8b9 	.word	0x0800f8b9
 800f718:	0800f8d9 	.word	0x0800f8d9
 800f71c:	0800f91d 	.word	0x0800f91d
 800f720:	0800f9ed 	.word	0x0800f9ed
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800f72a:	b2db      	uxtb	r3, r3
 800f72c:	2b00      	cmp	r3, #0
 800f72e:	f000 819e 	beq.w	800fa6e <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	2201      	movs	r2, #1
 800f736:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800f738:	20c8      	movs	r0, #200	; 0xc8
 800f73a:	f003 f815 	bl	8012768 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800f73e:	6878      	ldr	r0, [r7, #4]
 800f740:	f002 ff0b 	bl	801255a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	2200      	movs	r2, #0
 800f748:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800f74c:	687b      	ldr	r3, [r7, #4]
 800f74e:	2200      	movs	r2, #0
 800f750:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f754:	e18b      	b.n	800fa6e <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800f75c:	2b01      	cmp	r3, #1
 800f75e:	d107      	bne.n	800f770 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800f760:	687b      	ldr	r3, [r7, #4]
 800f762:	2200      	movs	r2, #0
 800f764:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	2202      	movs	r2, #2
 800f76c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f76e:	e18d      	b.n	800fa8c <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f776:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800f77a:	d914      	bls.n	800f7a6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f782:	3301      	adds	r3, #1
 800f784:	b2da      	uxtb	r2, r3
 800f786:	687b      	ldr	r3, [r7, #4]
 800f788:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800f792:	2b03      	cmp	r3, #3
 800f794:	d903      	bls.n	800f79e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	220d      	movs	r2, #13
 800f79a:	701a      	strb	r2, [r3, #0]
      break;
 800f79c:	e176      	b.n	800fa8c <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	2200      	movs	r2, #0
 800f7a2:	701a      	strb	r2, [r3, #0]
      break;
 800f7a4:	e172      	b.n	800fa8c <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800f7ac:	f103 020a 	add.w	r2, r3, #10
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800f7b6:	200a      	movs	r0, #10
 800f7b8:	f002 ffd6 	bl	8012768 <USBH_Delay>
      break;
 800f7bc:	e166      	b.n	800fa8c <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f7c4:	2b00      	cmp	r3, #0
 800f7c6:	d005      	beq.n	800f7d4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800f7c8:	687b      	ldr	r3, [r7, #4]
 800f7ca:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f7ce:	2104      	movs	r1, #4
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800f7d4:	2064      	movs	r0, #100	; 0x64
 800f7d6:	f002 ffc7 	bl	8012768 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800f7da:	6878      	ldr	r0, [r7, #4]
 800f7dc:	f002 fe96 	bl	801250c <USBH_LL_GetSpeed>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	461a      	mov	r2, r3
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	2205      	movs	r2, #5
 800f7ee:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800f7f0:	2100      	movs	r1, #0
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f001 fa03 	bl	8010bfe <USBH_AllocPipe>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	461a      	mov	r2, r3
 800f7fc:	687b      	ldr	r3, [r7, #4]
 800f7fe:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800f800:	2180      	movs	r1, #128	; 0x80
 800f802:	6878      	ldr	r0, [r7, #4]
 800f804:	f001 f9fb 	bl	8010bfe <USBH_AllocPipe>
 800f808:	4603      	mov	r3, r0
 800f80a:	461a      	mov	r2, r3
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f810:	687b      	ldr	r3, [r7, #4]
 800f812:	7919      	ldrb	r1, [r3, #4]
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f81a:	687b      	ldr	r3, [r7, #4]
 800f81c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800f824:	b292      	uxth	r2, r2
 800f826:	9202      	str	r2, [sp, #8]
 800f828:	2200      	movs	r2, #0
 800f82a:	9201      	str	r2, [sp, #4]
 800f82c:	9300      	str	r3, [sp, #0]
 800f82e:	4603      	mov	r3, r0
 800f830:	2280      	movs	r2, #128	; 0x80
 800f832:	6878      	ldr	r0, [r7, #4]
 800f834:	f001 f9b4 	bl	8010ba0 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	7959      	ldrb	r1, [r3, #5]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800f842:	687b      	ldr	r3, [r7, #4]
 800f844:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800f848:	687a      	ldr	r2, [r7, #4]
 800f84a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800f84c:	b292      	uxth	r2, r2
 800f84e:	9202      	str	r2, [sp, #8]
 800f850:	2200      	movs	r2, #0
 800f852:	9201      	str	r2, [sp, #4]
 800f854:	9300      	str	r3, [sp, #0]
 800f856:	4603      	mov	r3, r0
 800f858:	2200      	movs	r2, #0
 800f85a:	6878      	ldr	r0, [r7, #4]
 800f85c:	f001 f9a0 	bl	8010ba0 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f860:	e114      	b.n	800fa8c <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f000 f918 	bl	800fa98 <USBH_HandleEnum>
 800f868:	4603      	mov	r3, r0
 800f86a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800f86c:	7bbb      	ldrb	r3, [r7, #14]
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b00      	cmp	r3, #0
 800f872:	f040 80fe 	bne.w	800fa72 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800f884:	2b01      	cmp	r3, #1
 800f886:	d103      	bne.n	800f890 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2208      	movs	r2, #8
 800f88c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800f88e:	e0f0      	b.n	800fa72 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	2207      	movs	r2, #7
 800f894:	701a      	strb	r2, [r3, #0]
      break;
 800f896:	e0ec      	b.n	800fa72 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	f000 80e9 	beq.w	800fa76 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800f8a4:	687b      	ldr	r3, [r7, #4]
 800f8a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f8aa:	2101      	movs	r1, #1
 800f8ac:	6878      	ldr	r0, [r7, #4]
 800f8ae:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2208      	movs	r2, #8
 800f8b4:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800f8b6:	e0de      	b.n	800fa76 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800f8be:	b29b      	uxth	r3, r3
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	6878      	ldr	r0, [r7, #4]
 800f8c4:	f000 fc2c 	bl	8010120 <USBH_SetCfg>
 800f8c8:	4603      	mov	r3, r0
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	f040 80d5 	bne.w	800fa7a <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	2209      	movs	r2, #9
 800f8d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f8d6:	e0d0      	b.n	800fa7a <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800f8de:	f003 0320 	and.w	r3, r3, #32
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d016      	beq.n	800f914 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800f8e6:	2101      	movs	r1, #1
 800f8e8:	6878      	ldr	r0, [r7, #4]
 800f8ea:	f000 fc3c 	bl	8010166 <USBH_SetFeature>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f8f2:	7bbb      	ldrb	r3, [r7, #14]
 800f8f4:	b2db      	uxtb	r3, r3
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d103      	bne.n	800f902 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	220a      	movs	r2, #10
 800f8fe:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f900:	e0bd      	b.n	800fa7e <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800f902:	7bbb      	ldrb	r3, [r7, #14]
 800f904:	b2db      	uxtb	r3, r3
 800f906:	2b03      	cmp	r3, #3
 800f908:	f040 80b9 	bne.w	800fa7e <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	220a      	movs	r2, #10
 800f910:	701a      	strb	r2, [r3, #0]
      break;
 800f912:	e0b4      	b.n	800fa7e <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	220a      	movs	r2, #10
 800f918:	701a      	strb	r2, [r3, #0]
      break;
 800f91a:	e0b0      	b.n	800fa7e <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f922:	2b00      	cmp	r3, #0
 800f924:	f000 80ad 	beq.w	800fa82 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	2200      	movs	r2, #0
 800f92c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f930:	2300      	movs	r3, #0
 800f932:	73fb      	strb	r3, [r7, #15]
 800f934:	e016      	b.n	800f964 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800f936:	7bfa      	ldrb	r2, [r7, #15]
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	32de      	adds	r2, #222	; 0xde
 800f93c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f940:	791a      	ldrb	r2, [r3, #4]
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800f948:	429a      	cmp	r2, r3
 800f94a:	d108      	bne.n	800f95e <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800f94c:	7bfa      	ldrb	r2, [r7, #15]
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	32de      	adds	r2, #222	; 0xde
 800f952:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800f95c:	e005      	b.n	800f96a <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800f95e:	7bfb      	ldrb	r3, [r7, #15]
 800f960:	3301      	adds	r3, #1
 800f962:	73fb      	strb	r3, [r7, #15]
 800f964:	7bfb      	ldrb	r3, [r7, #15]
 800f966:	2b00      	cmp	r3, #0
 800f968:	d0e5      	beq.n	800f936 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f970:	2b00      	cmp	r3, #0
 800f972:	d016      	beq.n	800f9a2 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f97a:	689b      	ldr	r3, [r3, #8]
 800f97c:	6878      	ldr	r0, [r7, #4]
 800f97e:	4798      	blx	r3
 800f980:	4603      	mov	r3, r0
 800f982:	2b00      	cmp	r3, #0
 800f984:	d109      	bne.n	800f99a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800f986:	687b      	ldr	r3, [r7, #4]
 800f988:	2206      	movs	r2, #6
 800f98a:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f992:	2103      	movs	r1, #3
 800f994:	6878      	ldr	r0, [r7, #4]
 800f996:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f998:	e073      	b.n	800fa82 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	220d      	movs	r2, #13
 800f99e:	701a      	strb	r2, [r3, #0]
      break;
 800f9a0:	e06f      	b.n	800fa82 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	220d      	movs	r2, #13
 800f9a6:	701a      	strb	r2, [r3, #0]
      break;
 800f9a8:	e06b      	b.n	800fa82 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	d017      	beq.n	800f9e4 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800f9b4:	687b      	ldr	r3, [r7, #4]
 800f9b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9ba:	691b      	ldr	r3, [r3, #16]
 800f9bc:	6878      	ldr	r0, [r7, #4]
 800f9be:	4798      	blx	r3
 800f9c0:	4603      	mov	r3, r0
 800f9c2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800f9c4:	7bbb      	ldrb	r3, [r7, #14]
 800f9c6:	b2db      	uxtb	r3, r3
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d103      	bne.n	800f9d4 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800f9cc:	687b      	ldr	r3, [r7, #4]
 800f9ce:	220b      	movs	r2, #11
 800f9d0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800f9d2:	e058      	b.n	800fa86 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800f9d4:	7bbb      	ldrb	r3, [r7, #14]
 800f9d6:	b2db      	uxtb	r3, r3
 800f9d8:	2b02      	cmp	r3, #2
 800f9da:	d154      	bne.n	800fa86 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	220d      	movs	r2, #13
 800f9e0:	701a      	strb	r2, [r3, #0]
      break;
 800f9e2:	e050      	b.n	800fa86 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	220d      	movs	r2, #13
 800f9e8:	701a      	strb	r2, [r3, #0]
      break;
 800f9ea:	e04c      	b.n	800fa86 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d049      	beq.n	800fa8a <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f9fc:	695b      	ldr	r3, [r3, #20]
 800f9fe:	6878      	ldr	r0, [r7, #4]
 800fa00:	4798      	blx	r3
      }
      break;
 800fa02:	e042      	b.n	800fa8a <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fa04:	687b      	ldr	r3, [r7, #4]
 800fa06:	2200      	movs	r2, #0
 800fa08:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800fa0c:	6878      	ldr	r0, [r7, #4]
 800fa0e:	f7ff fd47 	bl	800f4a0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d009      	beq.n	800fa30 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fa22:	68db      	ldr	r3, [r3, #12]
 800fa24:	6878      	ldr	r0, [r7, #4]
 800fa26:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2200      	movs	r2, #0
 800fa2c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d005      	beq.n	800fa46 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fa40:	2105      	movs	r1, #5
 800fa42:	6878      	ldr	r0, [r7, #4]
 800fa44:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800fa4c:	b2db      	uxtb	r3, r3
 800fa4e:	2b01      	cmp	r3, #1
 800fa50:	d107      	bne.n	800fa62 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fa5a:	6878      	ldr	r0, [r7, #4]
 800fa5c:	f7ff fe1f 	bl	800f69e <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fa60:	e014      	b.n	800fa8c <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800fa62:	6878      	ldr	r0, [r7, #4]
 800fa64:	f002 fd1c 	bl	80124a0 <USBH_LL_Start>
      break;
 800fa68:	e010      	b.n	800fa8c <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800fa6a:	bf00      	nop
 800fa6c:	e00e      	b.n	800fa8c <USBH_Process+0x3cc>
      break;
 800fa6e:	bf00      	nop
 800fa70:	e00c      	b.n	800fa8c <USBH_Process+0x3cc>
      break;
 800fa72:	bf00      	nop
 800fa74:	e00a      	b.n	800fa8c <USBH_Process+0x3cc>
    break;
 800fa76:	bf00      	nop
 800fa78:	e008      	b.n	800fa8c <USBH_Process+0x3cc>
      break;
 800fa7a:	bf00      	nop
 800fa7c:	e006      	b.n	800fa8c <USBH_Process+0x3cc>
      break;
 800fa7e:	bf00      	nop
 800fa80:	e004      	b.n	800fa8c <USBH_Process+0x3cc>
      break;
 800fa82:	bf00      	nop
 800fa84:	e002      	b.n	800fa8c <USBH_Process+0x3cc>
      break;
 800fa86:	bf00      	nop
 800fa88:	e000      	b.n	800fa8c <USBH_Process+0x3cc>
      break;
 800fa8a:	bf00      	nop
  }
  return USBH_OK;
 800fa8c:	2300      	movs	r3, #0
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3710      	adds	r7, #16
 800fa92:	46bd      	mov	sp, r7
 800fa94:	bd80      	pop	{r7, pc}
 800fa96:	bf00      	nop

0800fa98 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800fa98:	b580      	push	{r7, lr}
 800fa9a:	b088      	sub	sp, #32
 800fa9c:	af04      	add	r7, sp, #16
 800fa9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800faa0:	2301      	movs	r3, #1
 800faa2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800faa4:	2301      	movs	r3, #1
 800faa6:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	785b      	ldrb	r3, [r3, #1]
 800faac:	2b07      	cmp	r3, #7
 800faae:	f200 81c1 	bhi.w	800fe34 <USBH_HandleEnum+0x39c>
 800fab2:	a201      	add	r2, pc, #4	; (adr r2, 800fab8 <USBH_HandleEnum+0x20>)
 800fab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fab8:	0800fad9 	.word	0x0800fad9
 800fabc:	0800fb97 	.word	0x0800fb97
 800fac0:	0800fc01 	.word	0x0800fc01
 800fac4:	0800fc8f 	.word	0x0800fc8f
 800fac8:	0800fcf9 	.word	0x0800fcf9
 800facc:	0800fd69 	.word	0x0800fd69
 800fad0:	0800fdaf 	.word	0x0800fdaf
 800fad4:	0800fdf5 	.word	0x0800fdf5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fad8:	2108      	movs	r1, #8
 800fada:	6878      	ldr	r0, [r7, #4]
 800fadc:	f000 fa50 	bl	800ff80 <USBH_Get_DevDesc>
 800fae0:	4603      	mov	r3, r0
 800fae2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fae4:	7bbb      	ldrb	r3, [r7, #14]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d130      	bne.n	800fb4c <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800faf0:	687b      	ldr	r3, [r7, #4]
 800faf2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2201      	movs	r2, #1
 800faf8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	7919      	ldrb	r1, [r3, #4]
 800fafe:	687b      	ldr	r3, [r7, #4]
 800fb00:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fb04:	687b      	ldr	r3, [r7, #4]
 800fb06:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fb0a:	687a      	ldr	r2, [r7, #4]
 800fb0c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800fb0e:	b292      	uxth	r2, r2
 800fb10:	9202      	str	r2, [sp, #8]
 800fb12:	2200      	movs	r2, #0
 800fb14:	9201      	str	r2, [sp, #4]
 800fb16:	9300      	str	r3, [sp, #0]
 800fb18:	4603      	mov	r3, r0
 800fb1a:	2280      	movs	r2, #128	; 0x80
 800fb1c:	6878      	ldr	r0, [r7, #4]
 800fb1e:	f001 f83f 	bl	8010ba0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fb22:	687b      	ldr	r3, [r7, #4]
 800fb24:	7959      	ldrb	r1, [r3, #5]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fb32:	687a      	ldr	r2, [r7, #4]
 800fb34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fb36:	b292      	uxth	r2, r2
 800fb38:	9202      	str	r2, [sp, #8]
 800fb3a:	2200      	movs	r2, #0
 800fb3c:	9201      	str	r2, [sp, #4]
 800fb3e:	9300      	str	r3, [sp, #0]
 800fb40:	4603      	mov	r3, r0
 800fb42:	2200      	movs	r2, #0
 800fb44:	6878      	ldr	r0, [r7, #4]
 800fb46:	f001 f82b 	bl	8010ba0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fb4a:	e175      	b.n	800fe38 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fb4c:	7bbb      	ldrb	r3, [r7, #14]
 800fb4e:	2b03      	cmp	r3, #3
 800fb50:	f040 8172 	bne.w	800fe38 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800fb54:	687b      	ldr	r3, [r7, #4]
 800fb56:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fb5a:	3301      	adds	r3, #1
 800fb5c:	b2da      	uxtb	r2, r3
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fb6a:	2b03      	cmp	r3, #3
 800fb6c:	d903      	bls.n	800fb76 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	220d      	movs	r2, #13
 800fb72:	701a      	strb	r2, [r3, #0]
      break;
 800fb74:	e160      	b.n	800fe38 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	795b      	ldrb	r3, [r3, #5]
 800fb7a:	4619      	mov	r1, r3
 800fb7c:	6878      	ldr	r0, [r7, #4]
 800fb7e:	f001 f85f 	bl	8010c40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fb82:	687b      	ldr	r3, [r7, #4]
 800fb84:	791b      	ldrb	r3, [r3, #4]
 800fb86:	4619      	mov	r1, r3
 800fb88:	6878      	ldr	r0, [r7, #4]
 800fb8a:	f001 f859 	bl	8010c40 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	2200      	movs	r2, #0
 800fb92:	701a      	strb	r2, [r3, #0]
      break;
 800fb94:	e150      	b.n	800fe38 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800fb96:	2112      	movs	r1, #18
 800fb98:	6878      	ldr	r0, [r7, #4]
 800fb9a:	f000 f9f1 	bl	800ff80 <USBH_Get_DevDesc>
 800fb9e:	4603      	mov	r3, r0
 800fba0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fba2:	7bbb      	ldrb	r3, [r7, #14]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d103      	bne.n	800fbb0 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	2202      	movs	r2, #2
 800fbac:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fbae:	e145      	b.n	800fe3c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fbb0:	7bbb      	ldrb	r3, [r7, #14]
 800fbb2:	2b03      	cmp	r3, #3
 800fbb4:	f040 8142 	bne.w	800fe3c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fbbe:	3301      	adds	r3, #1
 800fbc0:	b2da      	uxtb	r2, r3
 800fbc2:	687b      	ldr	r3, [r7, #4]
 800fbc4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fbce:	2b03      	cmp	r3, #3
 800fbd0:	d903      	bls.n	800fbda <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	220d      	movs	r2, #13
 800fbd6:	701a      	strb	r2, [r3, #0]
      break;
 800fbd8:	e130      	b.n	800fe3c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fbda:	687b      	ldr	r3, [r7, #4]
 800fbdc:	795b      	ldrb	r3, [r3, #5]
 800fbde:	4619      	mov	r1, r3
 800fbe0:	6878      	ldr	r0, [r7, #4]
 800fbe2:	f001 f82d 	bl	8010c40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fbe6:	687b      	ldr	r3, [r7, #4]
 800fbe8:	791b      	ldrb	r3, [r3, #4]
 800fbea:	4619      	mov	r1, r3
 800fbec:	6878      	ldr	r0, [r7, #4]
 800fbee:	f001 f827 	bl	8010c40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	2200      	movs	r2, #0
 800fbf6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	2200      	movs	r2, #0
 800fbfc:	701a      	strb	r2, [r3, #0]
      break;
 800fbfe:	e11d      	b.n	800fe3c <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800fc00:	2101      	movs	r1, #1
 800fc02:	6878      	ldr	r0, [r7, #4]
 800fc04:	f000 fa68 	bl	80100d8 <USBH_SetAddress>
 800fc08:	4603      	mov	r3, r0
 800fc0a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fc0c:	7bbb      	ldrb	r3, [r7, #14]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d132      	bne.n	800fc78 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 800fc12:	2002      	movs	r0, #2
 800fc14:	f002 fda8 	bl	8012768 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	2201      	movs	r2, #1
 800fc1c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800fc20:	687b      	ldr	r3, [r7, #4]
 800fc22:	2203      	movs	r2, #3
 800fc24:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fc26:	687b      	ldr	r3, [r7, #4]
 800fc28:	7919      	ldrb	r1, [r3, #4]
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800fc3a:	b292      	uxth	r2, r2
 800fc3c:	9202      	str	r2, [sp, #8]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	9201      	str	r2, [sp, #4]
 800fc42:	9300      	str	r3, [sp, #0]
 800fc44:	4603      	mov	r3, r0
 800fc46:	2280      	movs	r2, #128	; 0x80
 800fc48:	6878      	ldr	r0, [r7, #4]
 800fc4a:	f000 ffa9 	bl	8010ba0 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fc4e:	687b      	ldr	r3, [r7, #4]
 800fc50:	7959      	ldrb	r1, [r3, #5]
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800fc5e:	687a      	ldr	r2, [r7, #4]
 800fc60:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800fc62:	b292      	uxth	r2, r2
 800fc64:	9202      	str	r2, [sp, #8]
 800fc66:	2200      	movs	r2, #0
 800fc68:	9201      	str	r2, [sp, #4]
 800fc6a:	9300      	str	r3, [sp, #0]
 800fc6c:	4603      	mov	r3, r0
 800fc6e:	2200      	movs	r2, #0
 800fc70:	6878      	ldr	r0, [r7, #4]
 800fc72:	f000 ff95 	bl	8010ba0 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800fc76:	e0e3      	b.n	800fe40 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fc78:	7bbb      	ldrb	r3, [r7, #14]
 800fc7a:	2b03      	cmp	r3, #3
 800fc7c:	f040 80e0 	bne.w	800fe40 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	220d      	movs	r2, #13
 800fc84:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	2200      	movs	r2, #0
 800fc8a:	705a      	strb	r2, [r3, #1]
      break;
 800fc8c:	e0d8      	b.n	800fe40 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800fc8e:	2109      	movs	r1, #9
 800fc90:	6878      	ldr	r0, [r7, #4]
 800fc92:	f000 f99d 	bl	800ffd0 <USBH_Get_CfgDesc>
 800fc96:	4603      	mov	r3, r0
 800fc98:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fc9a:	7bbb      	ldrb	r3, [r7, #14]
 800fc9c:	2b00      	cmp	r3, #0
 800fc9e:	d103      	bne.n	800fca8 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2204      	movs	r2, #4
 800fca4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fca6:	e0cd      	b.n	800fe44 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fca8:	7bbb      	ldrb	r3, [r7, #14]
 800fcaa:	2b03      	cmp	r3, #3
 800fcac:	f040 80ca 	bne.w	800fe44 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fcb6:	3301      	adds	r3, #1
 800fcb8:	b2da      	uxtb	r2, r3
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fcc0:	687b      	ldr	r3, [r7, #4]
 800fcc2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fcc6:	2b03      	cmp	r3, #3
 800fcc8:	d903      	bls.n	800fcd2 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 800fcca:	687b      	ldr	r3, [r7, #4]
 800fccc:	220d      	movs	r2, #13
 800fcce:	701a      	strb	r2, [r3, #0]
      break;
 800fcd0:	e0b8      	b.n	800fe44 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	795b      	ldrb	r3, [r3, #5]
 800fcd6:	4619      	mov	r1, r3
 800fcd8:	6878      	ldr	r0, [r7, #4]
 800fcda:	f000 ffb1 	bl	8010c40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	791b      	ldrb	r3, [r3, #4]
 800fce2:	4619      	mov	r1, r3
 800fce4:	6878      	ldr	r0, [r7, #4]
 800fce6:	f000 ffab 	bl	8010c40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fcea:	687b      	ldr	r3, [r7, #4]
 800fcec:	2200      	movs	r2, #0
 800fcee:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	2200      	movs	r2, #0
 800fcf4:	701a      	strb	r2, [r3, #0]
      break;
 800fcf6:	e0a5      	b.n	800fe44 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 800fcfe:	4619      	mov	r1, r3
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 f965 	bl	800ffd0 <USBH_Get_CfgDesc>
 800fd06:	4603      	mov	r3, r0
 800fd08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fd0a:	7bbb      	ldrb	r3, [r7, #14]
 800fd0c:	2b00      	cmp	r3, #0
 800fd0e:	d103      	bne.n	800fd18 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800fd10:	687b      	ldr	r3, [r7, #4]
 800fd12:	2205      	movs	r2, #5
 800fd14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800fd16:	e097      	b.n	800fe48 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd18:	7bbb      	ldrb	r3, [r7, #14]
 800fd1a:	2b03      	cmp	r3, #3
 800fd1c:	f040 8094 	bne.w	800fe48 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800fd20:	687b      	ldr	r3, [r7, #4]
 800fd22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fd26:	3301      	adds	r3, #1
 800fd28:	b2da      	uxtb	r2, r3
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800fd30:	687b      	ldr	r3, [r7, #4]
 800fd32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800fd36:	2b03      	cmp	r3, #3
 800fd38:	d903      	bls.n	800fd42 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	220d      	movs	r2, #13
 800fd3e:	701a      	strb	r2, [r3, #0]
      break;
 800fd40:	e082      	b.n	800fe48 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	795b      	ldrb	r3, [r3, #5]
 800fd46:	4619      	mov	r1, r3
 800fd48:	6878      	ldr	r0, [r7, #4]
 800fd4a:	f000 ff79 	bl	8010c40 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fd4e:	687b      	ldr	r3, [r7, #4]
 800fd50:	791b      	ldrb	r3, [r3, #4]
 800fd52:	4619      	mov	r1, r3
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f000 ff73 	bl	8010c40 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	2200      	movs	r2, #0
 800fd64:	701a      	strb	r2, [r3, #0]
      break;
 800fd66:	e06f      	b.n	800fe48 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800fd68:	687b      	ldr	r3, [r7, #4]
 800fd6a:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d019      	beq.n	800fda6 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800fd7e:	23ff      	movs	r3, #255	; 0xff
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f000 f949 	bl	8010018 <USBH_Get_StringDesc>
 800fd86:	4603      	mov	r3, r0
 800fd88:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fd8a:	7bbb      	ldrb	r3, [r7, #14]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d103      	bne.n	800fd98 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fd90:	687b      	ldr	r3, [r7, #4]
 800fd92:	2206      	movs	r2, #6
 800fd94:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fd96:	e059      	b.n	800fe4c <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fd98:	7bbb      	ldrb	r3, [r7, #14]
 800fd9a:	2b03      	cmp	r3, #3
 800fd9c:	d156      	bne.n	800fe4c <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2206      	movs	r2, #6
 800fda2:	705a      	strb	r2, [r3, #1]
      break;
 800fda4:	e052      	b.n	800fe4c <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	2206      	movs	r2, #6
 800fdaa:	705a      	strb	r2, [r3, #1]
      break;
 800fdac:	e04e      	b.n	800fe4c <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	d019      	beq.n	800fdec <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fdb8:	687b      	ldr	r3, [r7, #4]
 800fdba:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800fdc4:	23ff      	movs	r3, #255	; 0xff
 800fdc6:	6878      	ldr	r0, [r7, #4]
 800fdc8:	f000 f926 	bl	8010018 <USBH_Get_StringDesc>
 800fdcc:	4603      	mov	r3, r0
 800fdce:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fdd0:	7bbb      	ldrb	r3, [r7, #14]
 800fdd2:	2b00      	cmp	r3, #0
 800fdd4:	d103      	bne.n	800fdde <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	2207      	movs	r2, #7
 800fdda:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fddc:	e038      	b.n	800fe50 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fdde:	7bbb      	ldrb	r3, [r7, #14]
 800fde0:	2b03      	cmp	r3, #3
 800fde2:	d135      	bne.n	800fe50 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	2207      	movs	r2, #7
 800fde8:	705a      	strb	r2, [r3, #1]
      break;
 800fdea:	e031      	b.n	800fe50 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2207      	movs	r2, #7
 800fdf0:	705a      	strb	r2, [r3, #1]
      break;
 800fdf2:	e02d      	b.n	800fe50 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d017      	beq.n	800fe2e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800fe0a:	23ff      	movs	r3, #255	; 0xff
 800fe0c:	6878      	ldr	r0, [r7, #4]
 800fe0e:	f000 f903 	bl	8010018 <USBH_Get_StringDesc>
 800fe12:	4603      	mov	r3, r0
 800fe14:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800fe16:	7bbb      	ldrb	r3, [r7, #14]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d102      	bne.n	800fe22 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800fe20:	e018      	b.n	800fe54 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800fe22:	7bbb      	ldrb	r3, [r7, #14]
 800fe24:	2b03      	cmp	r3, #3
 800fe26:	d115      	bne.n	800fe54 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 800fe28:	2300      	movs	r3, #0
 800fe2a:	73fb      	strb	r3, [r7, #15]
      break;
 800fe2c:	e012      	b.n	800fe54 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800fe2e:	2300      	movs	r3, #0
 800fe30:	73fb      	strb	r3, [r7, #15]
      break;
 800fe32:	e00f      	b.n	800fe54 <USBH_HandleEnum+0x3bc>

    default:
      break;
 800fe34:	bf00      	nop
 800fe36:	e00e      	b.n	800fe56 <USBH_HandleEnum+0x3be>
      break;
 800fe38:	bf00      	nop
 800fe3a:	e00c      	b.n	800fe56 <USBH_HandleEnum+0x3be>
      break;
 800fe3c:	bf00      	nop
 800fe3e:	e00a      	b.n	800fe56 <USBH_HandleEnum+0x3be>
      break;
 800fe40:	bf00      	nop
 800fe42:	e008      	b.n	800fe56 <USBH_HandleEnum+0x3be>
      break;
 800fe44:	bf00      	nop
 800fe46:	e006      	b.n	800fe56 <USBH_HandleEnum+0x3be>
      break;
 800fe48:	bf00      	nop
 800fe4a:	e004      	b.n	800fe56 <USBH_HandleEnum+0x3be>
      break;
 800fe4c:	bf00      	nop
 800fe4e:	e002      	b.n	800fe56 <USBH_HandleEnum+0x3be>
      break;
 800fe50:	bf00      	nop
 800fe52:	e000      	b.n	800fe56 <USBH_HandleEnum+0x3be>
      break;
 800fe54:	bf00      	nop
  }
  return Status;
 800fe56:	7bfb      	ldrb	r3, [r7, #15]
}
 800fe58:	4618      	mov	r0, r3
 800fe5a:	3710      	adds	r7, #16
 800fe5c:	46bd      	mov	sp, r7
 800fe5e:	bd80      	pop	{r7, pc}

0800fe60 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800fe60:	b480      	push	{r7}
 800fe62:	b083      	sub	sp, #12
 800fe64:	af00      	add	r7, sp, #0
 800fe66:	6078      	str	r0, [r7, #4]
 800fe68:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	683a      	ldr	r2, [r7, #0]
 800fe6e:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800fe72:	bf00      	nop
 800fe74:	370c      	adds	r7, #12
 800fe76:	46bd      	mov	sp, r7
 800fe78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe7c:	4770      	bx	lr

0800fe7e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800fe7e:	b580      	push	{r7, lr}
 800fe80:	b082      	sub	sp, #8
 800fe82:	af00      	add	r7, sp, #0
 800fe84:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800fe86:	687b      	ldr	r3, [r7, #4]
 800fe88:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800fe94:	6878      	ldr	r0, [r7, #4]
 800fe96:	f000 f804 	bl	800fea2 <USBH_HandleSof>
}
 800fe9a:	bf00      	nop
 800fe9c:	3708      	adds	r7, #8
 800fe9e:	46bd      	mov	sp, r7
 800fea0:	bd80      	pop	{r7, pc}

0800fea2 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800fea2:	b580      	push	{r7, lr}
 800fea4:	b082      	sub	sp, #8
 800fea6:	af00      	add	r7, sp, #0
 800fea8:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800feaa:	687b      	ldr	r3, [r7, #4]
 800feac:	781b      	ldrb	r3, [r3, #0]
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	2b0b      	cmp	r3, #11
 800feb2:	d10a      	bne.n	800feca <USBH_HandleSof+0x28>
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800feba:	2b00      	cmp	r3, #0
 800febc:	d005      	beq.n	800feca <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fec4:	699b      	ldr	r3, [r3, #24]
 800fec6:	6878      	ldr	r0, [r7, #4]
 800fec8:	4798      	blx	r3
  }
}
 800feca:	bf00      	nop
 800fecc:	3708      	adds	r7, #8
 800fece:	46bd      	mov	sp, r7
 800fed0:	bd80      	pop	{r7, pc}

0800fed2 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800fed2:	b480      	push	{r7}
 800fed4:	b083      	sub	sp, #12
 800fed6:	af00      	add	r7, sp, #0
 800fed8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800feda:	687b      	ldr	r3, [r7, #4]
 800fedc:	2201      	movs	r2, #1
 800fede:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800fee2:	bf00      	nop
}
 800fee4:	370c      	adds	r7, #12
 800fee6:	46bd      	mov	sp, r7
 800fee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800feec:	4770      	bx	lr

0800feee <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800feee:	b480      	push	{r7}
 800fef0:	b083      	sub	sp, #12
 800fef2:	af00      	add	r7, sp, #0
 800fef4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800fef6:	687b      	ldr	r3, [r7, #4]
 800fef8:	2200      	movs	r2, #0
 800fefa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800fefe:	bf00      	nop
}
 800ff00:	370c      	adds	r7, #12
 800ff02:	46bd      	mov	sp, r7
 800ff04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff08:	4770      	bx	lr

0800ff0a <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800ff0a:	b480      	push	{r7}
 800ff0c:	b083      	sub	sp, #12
 800ff0e:	af00      	add	r7, sp, #0
 800ff10:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	2201      	movs	r2, #1
 800ff16:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800ff1a:	687b      	ldr	r3, [r7, #4]
 800ff1c:	2200      	movs	r2, #0
 800ff1e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	2200      	movs	r2, #0
 800ff26:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ff2a:	2300      	movs	r3, #0
}
 800ff2c:	4618      	mov	r0, r3
 800ff2e:	370c      	adds	r7, #12
 800ff30:	46bd      	mov	sp, r7
 800ff32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff36:	4770      	bx	lr

0800ff38 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b082      	sub	sp, #8
 800ff3c:	af00      	add	r7, sp, #0
 800ff3e:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800ff40:	687b      	ldr	r3, [r7, #4]
 800ff42:	2201      	movs	r2, #1
 800ff44:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 800ff48:	687b      	ldr	r3, [r7, #4]
 800ff4a:	2200      	movs	r2, #0
 800ff4c:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800ff50:	687b      	ldr	r3, [r7, #4]
 800ff52:	2200      	movs	r2, #0
 800ff54:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800ff58:	6878      	ldr	r0, [r7, #4]
 800ff5a:	f002 fabc 	bl	80124d6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff5e:	687b      	ldr	r3, [r7, #4]
 800ff60:	791b      	ldrb	r3, [r3, #4]
 800ff62:	4619      	mov	r1, r3
 800ff64:	6878      	ldr	r0, [r7, #4]
 800ff66:	f000 fe6b 	bl	8010c40 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	795b      	ldrb	r3, [r3, #5]
 800ff6e:	4619      	mov	r1, r3
 800ff70:	6878      	ldr	r0, [r7, #4]
 800ff72:	f000 fe65 	bl	8010c40 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800ff76:	2300      	movs	r3, #0
}
 800ff78:	4618      	mov	r0, r3
 800ff7a:	3708      	adds	r7, #8
 800ff7c:	46bd      	mov	sp, r7
 800ff7e:	bd80      	pop	{r7, pc}

0800ff80 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800ff80:	b580      	push	{r7, lr}
 800ff82:	b086      	sub	sp, #24
 800ff84:	af02      	add	r7, sp, #8
 800ff86:	6078      	str	r0, [r7, #4]
 800ff88:	460b      	mov	r3, r1
 800ff8a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800ff92:	78fb      	ldrb	r3, [r7, #3]
 800ff94:	b29b      	uxth	r3, r3
 800ff96:	9300      	str	r3, [sp, #0]
 800ff98:	4613      	mov	r3, r2
 800ff9a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800ff9e:	2100      	movs	r1, #0
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f000 f864 	bl	801006e <USBH_GetDescriptor>
 800ffa6:	4603      	mov	r3, r0
 800ffa8:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 800ffaa:	7bfb      	ldrb	r3, [r7, #15]
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	d10a      	bne.n	800ffc6 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f203 3026 	addw	r0, r3, #806	; 0x326
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800ffbc:	78fa      	ldrb	r2, [r7, #3]
 800ffbe:	b292      	uxth	r2, r2
 800ffc0:	4619      	mov	r1, r3
 800ffc2:	f000 f919 	bl	80101f8 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 800ffc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ffc8:	4618      	mov	r0, r3
 800ffca:	3710      	adds	r7, #16
 800ffcc:	46bd      	mov	sp, r7
 800ffce:	bd80      	pop	{r7, pc}

0800ffd0 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 800ffd0:	b580      	push	{r7, lr}
 800ffd2:	b086      	sub	sp, #24
 800ffd4:	af02      	add	r7, sp, #8
 800ffd6:	6078      	str	r0, [r7, #4]
 800ffd8:	460b      	mov	r3, r1
 800ffda:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800ffdc:	687b      	ldr	r3, [r7, #4]
 800ffde:	331c      	adds	r3, #28
 800ffe0:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800ffe2:	887b      	ldrh	r3, [r7, #2]
 800ffe4:	9300      	str	r3, [sp, #0]
 800ffe6:	68bb      	ldr	r3, [r7, #8]
 800ffe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ffec:	2100      	movs	r1, #0
 800ffee:	6878      	ldr	r0, [r7, #4]
 800fff0:	f000 f83d 	bl	801006e <USBH_GetDescriptor>
 800fff4:	4603      	mov	r3, r0
 800fff6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800fff8:	7bfb      	ldrb	r3, [r7, #15]
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d107      	bne.n	801000e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800fffe:	887b      	ldrh	r3, [r7, #2]
 8010000:	461a      	mov	r2, r3
 8010002:	68b9      	ldr	r1, [r7, #8]
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f000 f987 	bl	8010318 <USBH_ParseCfgDesc>
 801000a:	4603      	mov	r3, r0
 801000c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 801000e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010010:	4618      	mov	r0, r3
 8010012:	3710      	adds	r7, #16
 8010014:	46bd      	mov	sp, r7
 8010016:	bd80      	pop	{r7, pc}

08010018 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b088      	sub	sp, #32
 801001c:	af02      	add	r7, sp, #8
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	607a      	str	r2, [r7, #4]
 8010022:	461a      	mov	r2, r3
 8010024:	460b      	mov	r3, r1
 8010026:	72fb      	strb	r3, [r7, #11]
 8010028:	4613      	mov	r3, r2
 801002a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 801002c:	7afb      	ldrb	r3, [r7, #11]
 801002e:	b29b      	uxth	r3, r3
 8010030:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8010034:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8010036:	68fb      	ldr	r3, [r7, #12]
 8010038:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 801003c:	893b      	ldrh	r3, [r7, #8]
 801003e:	9300      	str	r3, [sp, #0]
 8010040:	460b      	mov	r3, r1
 8010042:	2100      	movs	r1, #0
 8010044:	68f8      	ldr	r0, [r7, #12]
 8010046:	f000 f812 	bl	801006e <USBH_GetDescriptor>
 801004a:	4603      	mov	r3, r0
 801004c:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 801004e:	7dfb      	ldrb	r3, [r7, #23]
 8010050:	2b00      	cmp	r3, #0
 8010052:	d107      	bne.n	8010064 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8010054:	68fb      	ldr	r3, [r7, #12]
 8010056:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 801005a:	893a      	ldrh	r2, [r7, #8]
 801005c:	6879      	ldr	r1, [r7, #4]
 801005e:	4618      	mov	r0, r3
 8010060:	f000 fafe 	bl	8010660 <USBH_ParseStringDesc>
  }

  return status;
 8010064:	7dfb      	ldrb	r3, [r7, #23]
}
 8010066:	4618      	mov	r0, r3
 8010068:	3718      	adds	r7, #24
 801006a:	46bd      	mov	sp, r7
 801006c:	bd80      	pop	{r7, pc}

0801006e <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 801006e:	b580      	push	{r7, lr}
 8010070:	b084      	sub	sp, #16
 8010072:	af00      	add	r7, sp, #0
 8010074:	60f8      	str	r0, [r7, #12]
 8010076:	607b      	str	r3, [r7, #4]
 8010078:	460b      	mov	r3, r1
 801007a:	72fb      	strb	r3, [r7, #11]
 801007c:	4613      	mov	r3, r2
 801007e:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010080:	68fb      	ldr	r3, [r7, #12]
 8010082:	789b      	ldrb	r3, [r3, #2]
 8010084:	2b01      	cmp	r3, #1
 8010086:	d11c      	bne.n	80100c2 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8010088:	7afb      	ldrb	r3, [r7, #11]
 801008a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801008e:	b2da      	uxtb	r2, r3
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8010094:	68fb      	ldr	r3, [r7, #12]
 8010096:	2206      	movs	r2, #6
 8010098:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 801009a:	68fb      	ldr	r3, [r7, #12]
 801009c:	893a      	ldrh	r2, [r7, #8]
 801009e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80100a0:	893b      	ldrh	r3, [r7, #8]
 80100a2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80100a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80100aa:	d104      	bne.n	80100b6 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80100ac:	68fb      	ldr	r3, [r7, #12]
 80100ae:	f240 4209 	movw	r2, #1033	; 0x409
 80100b2:	829a      	strh	r2, [r3, #20]
 80100b4:	e002      	b.n	80100bc <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	2200      	movs	r2, #0
 80100ba:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	8b3a      	ldrh	r2, [r7, #24]
 80100c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80100c2:	8b3b      	ldrh	r3, [r7, #24]
 80100c4:	461a      	mov	r2, r3
 80100c6:	6879      	ldr	r1, [r7, #4]
 80100c8:	68f8      	ldr	r0, [r7, #12]
 80100ca:	f000 fb17 	bl	80106fc <USBH_CtlReq>
 80100ce:	4603      	mov	r3, r0
}
 80100d0:	4618      	mov	r0, r3
 80100d2:	3710      	adds	r7, #16
 80100d4:	46bd      	mov	sp, r7
 80100d6:	bd80      	pop	{r7, pc}

080100d8 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80100d8:	b580      	push	{r7, lr}
 80100da:	b082      	sub	sp, #8
 80100dc:	af00      	add	r7, sp, #0
 80100de:	6078      	str	r0, [r7, #4]
 80100e0:	460b      	mov	r3, r1
 80100e2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80100e4:	687b      	ldr	r3, [r7, #4]
 80100e6:	789b      	ldrb	r3, [r3, #2]
 80100e8:	2b01      	cmp	r3, #1
 80100ea:	d10f      	bne.n	801010c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	2200      	movs	r2, #0
 80100f0:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2205      	movs	r2, #5
 80100f6:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80100f8:	78fb      	ldrb	r3, [r7, #3]
 80100fa:	b29a      	uxth	r2, r3
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	2200      	movs	r2, #0
 8010104:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	2200      	movs	r2, #0
 801010a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801010c:	2200      	movs	r2, #0
 801010e:	2100      	movs	r1, #0
 8010110:	6878      	ldr	r0, [r7, #4]
 8010112:	f000 faf3 	bl	80106fc <USBH_CtlReq>
 8010116:	4603      	mov	r3, r0
}
 8010118:	4618      	mov	r0, r3
 801011a:	3708      	adds	r7, #8
 801011c:	46bd      	mov	sp, r7
 801011e:	bd80      	pop	{r7, pc}

08010120 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b082      	sub	sp, #8
 8010124:	af00      	add	r7, sp, #0
 8010126:	6078      	str	r0, [r7, #4]
 8010128:	460b      	mov	r3, r1
 801012a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	789b      	ldrb	r3, [r3, #2]
 8010130:	2b01      	cmp	r3, #1
 8010132:	d10e      	bne.n	8010152 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010134:	687b      	ldr	r3, [r7, #4]
 8010136:	2200      	movs	r2, #0
 8010138:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 801013a:	687b      	ldr	r3, [r7, #4]
 801013c:	2209      	movs	r2, #9
 801013e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	887a      	ldrh	r2, [r7, #2]
 8010144:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010146:	687b      	ldr	r3, [r7, #4]
 8010148:	2200      	movs	r2, #0
 801014a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	2200      	movs	r2, #0
 8010150:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010152:	2200      	movs	r2, #0
 8010154:	2100      	movs	r1, #0
 8010156:	6878      	ldr	r0, [r7, #4]
 8010158:	f000 fad0 	bl	80106fc <USBH_CtlReq>
 801015c:	4603      	mov	r3, r0
}
 801015e:	4618      	mov	r0, r3
 8010160:	3708      	adds	r7, #8
 8010162:	46bd      	mov	sp, r7
 8010164:	bd80      	pop	{r7, pc}

08010166 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8010166:	b580      	push	{r7, lr}
 8010168:	b082      	sub	sp, #8
 801016a:	af00      	add	r7, sp, #0
 801016c:	6078      	str	r0, [r7, #4]
 801016e:	460b      	mov	r3, r1
 8010170:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	789b      	ldrb	r3, [r3, #2]
 8010176:	2b01      	cmp	r3, #1
 8010178:	d10f      	bne.n	801019a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2200      	movs	r2, #0
 801017e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	2203      	movs	r2, #3
 8010184:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8010186:	78fb      	ldrb	r3, [r7, #3]
 8010188:	b29a      	uxth	r2, r3
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2200      	movs	r2, #0
 8010192:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	2200      	movs	r2, #0
 8010198:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801019a:	2200      	movs	r2, #0
 801019c:	2100      	movs	r1, #0
 801019e:	6878      	ldr	r0, [r7, #4]
 80101a0:	f000 faac 	bl	80106fc <USBH_CtlReq>
 80101a4:	4603      	mov	r3, r0
}
 80101a6:	4618      	mov	r0, r3
 80101a8:	3708      	adds	r7, #8
 80101aa:	46bd      	mov	sp, r7
 80101ac:	bd80      	pop	{r7, pc}

080101ae <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80101ae:	b580      	push	{r7, lr}
 80101b0:	b082      	sub	sp, #8
 80101b2:	af00      	add	r7, sp, #0
 80101b4:	6078      	str	r0, [r7, #4]
 80101b6:	460b      	mov	r3, r1
 80101b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80101ba:	687b      	ldr	r3, [r7, #4]
 80101bc:	789b      	ldrb	r3, [r3, #2]
 80101be:	2b01      	cmp	r3, #1
 80101c0:	d10f      	bne.n	80101e2 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80101c2:	687b      	ldr	r3, [r7, #4]
 80101c4:	2202      	movs	r2, #2
 80101c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80101c8:	687b      	ldr	r3, [r7, #4]
 80101ca:	2201      	movs	r2, #1
 80101cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80101ce:	687b      	ldr	r3, [r7, #4]
 80101d0:	2200      	movs	r2, #0
 80101d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80101d4:	78fb      	ldrb	r3, [r7, #3]
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	687b      	ldr	r3, [r7, #4]
 80101da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	2200      	movs	r2, #0
 80101e0:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80101e2:	2200      	movs	r2, #0
 80101e4:	2100      	movs	r1, #0
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f000 fa88 	bl	80106fc <USBH_CtlReq>
 80101ec:	4603      	mov	r3, r0
}
 80101ee:	4618      	mov	r0, r3
 80101f0:	3708      	adds	r7, #8
 80101f2:	46bd      	mov	sp, r7
 80101f4:	bd80      	pop	{r7, pc}
	...

080101f8 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 80101f8:	b480      	push	{r7}
 80101fa:	b085      	sub	sp, #20
 80101fc:	af00      	add	r7, sp, #0
 80101fe:	60f8      	str	r0, [r7, #12]
 8010200:	60b9      	str	r1, [r7, #8]
 8010202:	4613      	mov	r3, r2
 8010204:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8010206:	68bb      	ldr	r3, [r7, #8]
 8010208:	781a      	ldrb	r2, [r3, #0]
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	785a      	ldrb	r2, [r3, #1]
 8010212:	68fb      	ldr	r3, [r7, #12]
 8010214:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8010216:	68bb      	ldr	r3, [r7, #8]
 8010218:	3302      	adds	r3, #2
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	b29a      	uxth	r2, r3
 801021e:	68bb      	ldr	r3, [r7, #8]
 8010220:	3303      	adds	r3, #3
 8010222:	781b      	ldrb	r3, [r3, #0]
 8010224:	b29b      	uxth	r3, r3
 8010226:	021b      	lsls	r3, r3, #8
 8010228:	b29b      	uxth	r3, r3
 801022a:	4313      	orrs	r3, r2
 801022c:	b29a      	uxth	r2, r3
 801022e:	68fb      	ldr	r3, [r7, #12]
 8010230:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8010232:	68bb      	ldr	r3, [r7, #8]
 8010234:	791a      	ldrb	r2, [r3, #4]
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 801023a:	68bb      	ldr	r3, [r7, #8]
 801023c:	795a      	ldrb	r2, [r3, #5]
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	799a      	ldrb	r2, [r3, #6]
 8010246:	68fb      	ldr	r3, [r7, #12]
 8010248:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 801024a:	68bb      	ldr	r3, [r7, #8]
 801024c:	79da      	ldrb	r2, [r3, #7]
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 8010252:	68fb      	ldr	r3, [r7, #12]
 8010254:	79db      	ldrb	r3, [r3, #7]
 8010256:	2b20      	cmp	r3, #32
 8010258:	dc0e      	bgt.n	8010278 <USBH_ParseDevDesc+0x80>
 801025a:	2b08      	cmp	r3, #8
 801025c:	db13      	blt.n	8010286 <USBH_ParseDevDesc+0x8e>
 801025e:	3b08      	subs	r3, #8
 8010260:	2201      	movs	r2, #1
 8010262:	409a      	lsls	r2, r3
 8010264:	4b2b      	ldr	r3, [pc, #172]	; (8010314 <USBH_ParseDevDesc+0x11c>)
 8010266:	4013      	ands	r3, r2
 8010268:	2b00      	cmp	r3, #0
 801026a:	bf14      	ite	ne
 801026c:	2301      	movne	r3, #1
 801026e:	2300      	moveq	r3, #0
 8010270:	b2db      	uxtb	r3, r3
 8010272:	2b00      	cmp	r3, #0
 8010274:	d102      	bne.n	801027c <USBH_ParseDevDesc+0x84>
 8010276:	e006      	b.n	8010286 <USBH_ParseDevDesc+0x8e>
 8010278:	2b40      	cmp	r3, #64	; 0x40
 801027a:	d104      	bne.n	8010286 <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 801027c:	68fb      	ldr	r3, [r7, #12]
 801027e:	79da      	ldrb	r2, [r3, #7]
 8010280:	68fb      	ldr	r3, [r7, #12]
 8010282:	71da      	strb	r2, [r3, #7]
      break;
 8010284:	e003      	b.n	801028e <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	2240      	movs	r2, #64	; 0x40
 801028a:	71da      	strb	r2, [r3, #7]
      break;
 801028c:	bf00      	nop
  }

  if (length > 8U)
 801028e:	88fb      	ldrh	r3, [r7, #6]
 8010290:	2b08      	cmp	r3, #8
 8010292:	d939      	bls.n	8010308 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8010294:	68bb      	ldr	r3, [r7, #8]
 8010296:	3308      	adds	r3, #8
 8010298:	781b      	ldrb	r3, [r3, #0]
 801029a:	b29a      	uxth	r2, r3
 801029c:	68bb      	ldr	r3, [r7, #8]
 801029e:	3309      	adds	r3, #9
 80102a0:	781b      	ldrb	r3, [r3, #0]
 80102a2:	b29b      	uxth	r3, r3
 80102a4:	021b      	lsls	r3, r3, #8
 80102a6:	b29b      	uxth	r3, r3
 80102a8:	4313      	orrs	r3, r2
 80102aa:	b29a      	uxth	r2, r3
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80102b0:	68bb      	ldr	r3, [r7, #8]
 80102b2:	330a      	adds	r3, #10
 80102b4:	781b      	ldrb	r3, [r3, #0]
 80102b6:	b29a      	uxth	r2, r3
 80102b8:	68bb      	ldr	r3, [r7, #8]
 80102ba:	330b      	adds	r3, #11
 80102bc:	781b      	ldrb	r3, [r3, #0]
 80102be:	b29b      	uxth	r3, r3
 80102c0:	021b      	lsls	r3, r3, #8
 80102c2:	b29b      	uxth	r3, r3
 80102c4:	4313      	orrs	r3, r2
 80102c6:	b29a      	uxth	r2, r3
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80102cc:	68bb      	ldr	r3, [r7, #8]
 80102ce:	330c      	adds	r3, #12
 80102d0:	781b      	ldrb	r3, [r3, #0]
 80102d2:	b29a      	uxth	r2, r3
 80102d4:	68bb      	ldr	r3, [r7, #8]
 80102d6:	330d      	adds	r3, #13
 80102d8:	781b      	ldrb	r3, [r3, #0]
 80102da:	b29b      	uxth	r3, r3
 80102dc:	021b      	lsls	r3, r3, #8
 80102de:	b29b      	uxth	r3, r3
 80102e0:	4313      	orrs	r3, r2
 80102e2:	b29a      	uxth	r2, r3
 80102e4:	68fb      	ldr	r3, [r7, #12]
 80102e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80102e8:	68bb      	ldr	r3, [r7, #8]
 80102ea:	7b9a      	ldrb	r2, [r3, #14]
 80102ec:	68fb      	ldr	r3, [r7, #12]
 80102ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80102f0:	68bb      	ldr	r3, [r7, #8]
 80102f2:	7bda      	ldrb	r2, [r3, #15]
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80102f8:	68bb      	ldr	r3, [r7, #8]
 80102fa:	7c1a      	ldrb	r2, [r3, #16]
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8010300:	68bb      	ldr	r3, [r7, #8]
 8010302:	7c5a      	ldrb	r2, [r3, #17]
 8010304:	68fb      	ldr	r3, [r7, #12]
 8010306:	745a      	strb	r2, [r3, #17]
  }
}
 8010308:	bf00      	nop
 801030a:	3714      	adds	r7, #20
 801030c:	46bd      	mov	sp, r7
 801030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010312:	4770      	bx	lr
 8010314:	01000101 	.word	0x01000101

08010318 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010318:	b580      	push	{r7, lr}
 801031a:	b08c      	sub	sp, #48	; 0x30
 801031c:	af00      	add	r7, sp, #0
 801031e:	60f8      	str	r0, [r7, #12]
 8010320:	60b9      	str	r1, [r7, #8]
 8010322:	4613      	mov	r3, r2
 8010324:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8010326:	68fb      	ldr	r3, [r7, #12]
 8010328:	f503 734e 	add.w	r3, r3, #824	; 0x338
 801032c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 801032e:	2300      	movs	r3, #0
 8010330:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8010334:	68bb      	ldr	r3, [r7, #8]
 8010336:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010338:	2300      	movs	r3, #0
 801033a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 801033e:	2300      	movs	r3, #0
 8010340:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8010344:	68bb      	ldr	r3, [r7, #8]
 8010346:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010348:	68bb      	ldr	r3, [r7, #8]
 801034a:	781a      	ldrb	r2, [r3, #0]
 801034c:	6a3b      	ldr	r3, [r7, #32]
 801034e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8010350:	68bb      	ldr	r3, [r7, #8]
 8010352:	785a      	ldrb	r2, [r3, #1]
 8010354:	6a3b      	ldr	r3, [r7, #32]
 8010356:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010358:	68bb      	ldr	r3, [r7, #8]
 801035a:	3302      	adds	r3, #2
 801035c:	781b      	ldrb	r3, [r3, #0]
 801035e:	b29a      	uxth	r2, r3
 8010360:	68bb      	ldr	r3, [r7, #8]
 8010362:	3303      	adds	r3, #3
 8010364:	781b      	ldrb	r3, [r3, #0]
 8010366:	b29b      	uxth	r3, r3
 8010368:	021b      	lsls	r3, r3, #8
 801036a:	b29b      	uxth	r3, r3
 801036c:	4313      	orrs	r3, r2
 801036e:	b29b      	uxth	r3, r3
 8010370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010374:	bf28      	it	cs
 8010376:	f44f 7380 	movcs.w	r3, #256	; 0x100
 801037a:	b29a      	uxth	r2, r3
 801037c:	6a3b      	ldr	r3, [r7, #32]
 801037e:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	791a      	ldrb	r2, [r3, #4]
 8010384:	6a3b      	ldr	r3, [r7, #32]
 8010386:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8010388:	68bb      	ldr	r3, [r7, #8]
 801038a:	795a      	ldrb	r2, [r3, #5]
 801038c:	6a3b      	ldr	r3, [r7, #32]
 801038e:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8010390:	68bb      	ldr	r3, [r7, #8]
 8010392:	799a      	ldrb	r2, [r3, #6]
 8010394:	6a3b      	ldr	r3, [r7, #32]
 8010396:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8010398:	68bb      	ldr	r3, [r7, #8]
 801039a:	79da      	ldrb	r2, [r3, #7]
 801039c:	6a3b      	ldr	r3, [r7, #32]
 801039e:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80103a0:	68bb      	ldr	r3, [r7, #8]
 80103a2:	7a1a      	ldrb	r2, [r3, #8]
 80103a4:	6a3b      	ldr	r3, [r7, #32]
 80103a6:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80103a8:	6a3b      	ldr	r3, [r7, #32]
 80103aa:	781b      	ldrb	r3, [r3, #0]
 80103ac:	2b09      	cmp	r3, #9
 80103ae:	d002      	beq.n	80103b6 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80103b0:	6a3b      	ldr	r3, [r7, #32]
 80103b2:	2209      	movs	r2, #9
 80103b4:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80103b6:	88fb      	ldrh	r3, [r7, #6]
 80103b8:	2b09      	cmp	r3, #9
 80103ba:	f240 8099 	bls.w	80104f0 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 80103be:	2309      	movs	r3, #9
 80103c0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80103c2:	2300      	movs	r3, #0
 80103c4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80103c6:	e07d      	b.n	80104c4 <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80103c8:	f107 0316 	add.w	r3, r7, #22
 80103cc:	4619      	mov	r1, r3
 80103ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80103d0:	f000 f979 	bl	80106c6 <USBH_GetNextDesc>
 80103d4:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80103d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103d8:	785b      	ldrb	r3, [r3, #1]
 80103da:	2b04      	cmp	r3, #4
 80103dc:	d172      	bne.n	80104c4 <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80103de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	2b09      	cmp	r3, #9
 80103e4:	d002      	beq.n	80103ec <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80103e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e8:	2209      	movs	r2, #9
 80103ea:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80103ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80103f0:	221a      	movs	r2, #26
 80103f2:	fb02 f303 	mul.w	r3, r2, r3
 80103f6:	3308      	adds	r3, #8
 80103f8:	6a3a      	ldr	r2, [r7, #32]
 80103fa:	4413      	add	r3, r2
 80103fc:	3302      	adds	r3, #2
 80103fe:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010400:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010402:	69f8      	ldr	r0, [r7, #28]
 8010404:	f000 f87a 	bl	80104fc <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010408:	2300      	movs	r3, #0
 801040a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 801040e:	2300      	movs	r3, #0
 8010410:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010412:	e03f      	b.n	8010494 <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8010414:	f107 0316 	add.w	r3, r7, #22
 8010418:	4619      	mov	r1, r3
 801041a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801041c:	f000 f953 	bl	80106c6 <USBH_GetNextDesc>
 8010420:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8010422:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010424:	785b      	ldrb	r3, [r3, #1]
 8010426:	2b05      	cmp	r3, #5
 8010428:	d134      	bne.n	8010494 <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 801042a:	69fb      	ldr	r3, [r7, #28]
 801042c:	795b      	ldrb	r3, [r3, #5]
 801042e:	2b01      	cmp	r3, #1
 8010430:	d10f      	bne.n	8010452 <USBH_ParseCfgDesc+0x13a>
 8010432:	69fb      	ldr	r3, [r7, #28]
 8010434:	799b      	ldrb	r3, [r3, #6]
 8010436:	2b02      	cmp	r3, #2
 8010438:	d10b      	bne.n	8010452 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801043a:	69fb      	ldr	r3, [r7, #28]
 801043c:	79db      	ldrb	r3, [r3, #7]
 801043e:	2b00      	cmp	r3, #0
 8010440:	d10b      	bne.n	801045a <USBH_ParseCfgDesc+0x142>
 8010442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010444:	781b      	ldrb	r3, [r3, #0]
 8010446:	2b09      	cmp	r3, #9
 8010448:	d007      	beq.n	801045a <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 801044a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044c:	2209      	movs	r2, #9
 801044e:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010450:	e003      	b.n	801045a <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8010452:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010454:	2207      	movs	r2, #7
 8010456:	701a      	strb	r2, [r3, #0]
 8010458:	e000      	b.n	801045c <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 801045a:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 801045c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010460:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8010464:	3201      	adds	r2, #1
 8010466:	00d2      	lsls	r2, r2, #3
 8010468:	211a      	movs	r1, #26
 801046a:	fb01 f303 	mul.w	r3, r1, r3
 801046e:	4413      	add	r3, r2
 8010470:	3308      	adds	r3, #8
 8010472:	6a3a      	ldr	r2, [r7, #32]
 8010474:	4413      	add	r3, r2
 8010476:	3304      	adds	r3, #4
 8010478:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 801047a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801047c:	69b9      	ldr	r1, [r7, #24]
 801047e:	68f8      	ldr	r0, [r7, #12]
 8010480:	f000 f86c 	bl	801055c <USBH_ParseEPDesc>
 8010484:	4603      	mov	r3, r0
 8010486:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 801048a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801048e:	3301      	adds	r3, #1
 8010490:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8010494:	69fb      	ldr	r3, [r7, #28]
 8010496:	791b      	ldrb	r3, [r3, #4]
 8010498:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801049c:	429a      	cmp	r2, r3
 801049e:	d204      	bcs.n	80104aa <USBH_ParseCfgDesc+0x192>
 80104a0:	6a3b      	ldr	r3, [r7, #32]
 80104a2:	885a      	ldrh	r2, [r3, #2]
 80104a4:	8afb      	ldrh	r3, [r7, #22]
 80104a6:	429a      	cmp	r2, r3
 80104a8:	d8b4      	bhi.n	8010414 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80104aa:	69fb      	ldr	r3, [r7, #28]
 80104ac:	791b      	ldrb	r3, [r3, #4]
 80104ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80104b2:	429a      	cmp	r2, r3
 80104b4:	d201      	bcs.n	80104ba <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 80104b6:	2303      	movs	r3, #3
 80104b8:	e01c      	b.n	80104f4 <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 80104ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104be:	3301      	adds	r3, #1
 80104c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80104c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104c8:	2b01      	cmp	r3, #1
 80104ca:	d805      	bhi.n	80104d8 <USBH_ParseCfgDesc+0x1c0>
 80104cc:	6a3b      	ldr	r3, [r7, #32]
 80104ce:	885a      	ldrh	r2, [r3, #2]
 80104d0:	8afb      	ldrh	r3, [r7, #22]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	f63f af78 	bhi.w	80103c8 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80104d8:	6a3b      	ldr	r3, [r7, #32]
 80104da:	791b      	ldrb	r3, [r3, #4]
 80104dc:	2b02      	cmp	r3, #2
 80104de:	bf28      	it	cs
 80104e0:	2302      	movcs	r3, #2
 80104e2:	b2db      	uxtb	r3, r3
 80104e4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d201      	bcs.n	80104f0 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 80104ec:	2303      	movs	r3, #3
 80104ee:	e001      	b.n	80104f4 <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 80104f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80104f4:	4618      	mov	r0, r3
 80104f6:	3730      	adds	r7, #48	; 0x30
 80104f8:	46bd      	mov	sp, r7
 80104fa:	bd80      	pop	{r7, pc}

080104fc <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 80104fc:	b480      	push	{r7}
 80104fe:	b083      	sub	sp, #12
 8010500:	af00      	add	r7, sp, #0
 8010502:	6078      	str	r0, [r7, #4]
 8010504:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8010506:	683b      	ldr	r3, [r7, #0]
 8010508:	781a      	ldrb	r2, [r3, #0]
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 801050e:	683b      	ldr	r3, [r7, #0]
 8010510:	785a      	ldrb	r2, [r3, #1]
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8010516:	683b      	ldr	r3, [r7, #0]
 8010518:	789a      	ldrb	r2, [r3, #2]
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 801051e:	683b      	ldr	r3, [r7, #0]
 8010520:	78da      	ldrb	r2, [r3, #3]
 8010522:	687b      	ldr	r3, [r7, #4]
 8010524:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8010526:	683b      	ldr	r3, [r7, #0]
 8010528:	791a      	ldrb	r2, [r3, #4]
 801052a:	687b      	ldr	r3, [r7, #4]
 801052c:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 801052e:	683b      	ldr	r3, [r7, #0]
 8010530:	795a      	ldrb	r2, [r3, #5]
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8010536:	683b      	ldr	r3, [r7, #0]
 8010538:	799a      	ldrb	r2, [r3, #6]
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 801053e:	683b      	ldr	r3, [r7, #0]
 8010540:	79da      	ldrb	r2, [r3, #7]
 8010542:	687b      	ldr	r3, [r7, #4]
 8010544:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8010546:	683b      	ldr	r3, [r7, #0]
 8010548:	7a1a      	ldrb	r2, [r3, #8]
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	721a      	strb	r2, [r3, #8]
}
 801054e:	bf00      	nop
 8010550:	370c      	adds	r7, #12
 8010552:	46bd      	mov	sp, r7
 8010554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010558:	4770      	bx	lr
	...

0801055c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 801055c:	b480      	push	{r7}
 801055e:	b087      	sub	sp, #28
 8010560:	af00      	add	r7, sp, #0
 8010562:	60f8      	str	r0, [r7, #12]
 8010564:	60b9      	str	r1, [r7, #8]
 8010566:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010568:	2300      	movs	r3, #0
 801056a:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 801056c:	687b      	ldr	r3, [r7, #4]
 801056e:	781a      	ldrb	r2, [r3, #0]
 8010570:	68bb      	ldr	r3, [r7, #8]
 8010572:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8010574:	687b      	ldr	r3, [r7, #4]
 8010576:	785a      	ldrb	r2, [r3, #1]
 8010578:	68bb      	ldr	r3, [r7, #8]
 801057a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	789a      	ldrb	r2, [r3, #2]
 8010580:	68bb      	ldr	r3, [r7, #8]
 8010582:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	78da      	ldrb	r2, [r3, #3]
 8010588:	68bb      	ldr	r3, [r7, #8]
 801058a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 801058c:	687b      	ldr	r3, [r7, #4]
 801058e:	3304      	adds	r3, #4
 8010590:	781b      	ldrb	r3, [r3, #0]
 8010592:	b29a      	uxth	r2, r3
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	3305      	adds	r3, #5
 8010598:	781b      	ldrb	r3, [r3, #0]
 801059a:	b29b      	uxth	r3, r3
 801059c:	021b      	lsls	r3, r3, #8
 801059e:	b29b      	uxth	r3, r3
 80105a0:	4313      	orrs	r3, r2
 80105a2:	b29a      	uxth	r2, r3
 80105a4:	68bb      	ldr	r3, [r7, #8]
 80105a6:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	799a      	ldrb	r2, [r3, #6]
 80105ac:	68bb      	ldr	r3, [r7, #8]
 80105ae:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80105b0:	68bb      	ldr	r3, [r7, #8]
 80105b2:	889b      	ldrh	r3, [r3, #4]
 80105b4:	2b00      	cmp	r3, #0
 80105b6:	d102      	bne.n	80105be <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80105b8:	2303      	movs	r3, #3
 80105ba:	75fb      	strb	r3, [r7, #23]
 80105bc:	e00d      	b.n	80105da <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80105be:	68bb      	ldr	r3, [r7, #8]
 80105c0:	889a      	ldrh	r2, [r3, #4]
 80105c2:	4b26      	ldr	r3, [pc, #152]	; (801065c <USBH_ParseEPDesc+0x100>)
 80105c4:	4013      	ands	r3, r2
 80105c6:	b29a      	uxth	r2, r3
 80105c8:	68bb      	ldr	r3, [r7, #8]
 80105ca:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 80105cc:	68bb      	ldr	r3, [r7, #8]
 80105ce:	889b      	ldrh	r3, [r3, #4]
 80105d0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80105d4:	b29a      	uxth	r2, r3
 80105d6:	68bb      	ldr	r3, [r7, #8]
 80105d8:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80105e0:	2b00      	cmp	r3, #0
 80105e2:	d116      	bne.n	8010612 <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80105e4:	68bb      	ldr	r3, [r7, #8]
 80105e6:	78db      	ldrb	r3, [r3, #3]
 80105e8:	f003 0303 	and.w	r3, r3, #3
 80105ec:	2b01      	cmp	r3, #1
 80105ee:	d005      	beq.n	80105fc <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80105f0:	68bb      	ldr	r3, [r7, #8]
 80105f2:	78db      	ldrb	r3, [r3, #3]
 80105f4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80105f8:	2b03      	cmp	r3, #3
 80105fa:	d127      	bne.n	801064c <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80105fc:	68bb      	ldr	r3, [r7, #8]
 80105fe:	799b      	ldrb	r3, [r3, #6]
 8010600:	2b00      	cmp	r3, #0
 8010602:	d003      	beq.n	801060c <USBH_ParseEPDesc+0xb0>
 8010604:	68bb      	ldr	r3, [r7, #8]
 8010606:	799b      	ldrb	r3, [r3, #6]
 8010608:	2b10      	cmp	r3, #16
 801060a:	d91f      	bls.n	801064c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801060c:	2303      	movs	r3, #3
 801060e:	75fb      	strb	r3, [r7, #23]
 8010610:	e01c      	b.n	801064c <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010612:	68bb      	ldr	r3, [r7, #8]
 8010614:	78db      	ldrb	r3, [r3, #3]
 8010616:	f003 0303 	and.w	r3, r3, #3
 801061a:	2b01      	cmp	r3, #1
 801061c:	d10a      	bne.n	8010634 <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	799b      	ldrb	r3, [r3, #6]
 8010622:	2b00      	cmp	r3, #0
 8010624:	d003      	beq.n	801062e <USBH_ParseEPDesc+0xd2>
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	799b      	ldrb	r3, [r3, #6]
 801062a:	2b10      	cmp	r3, #16
 801062c:	d90e      	bls.n	801064c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 801062e:	2303      	movs	r3, #3
 8010630:	75fb      	strb	r3, [r7, #23]
 8010632:	e00b      	b.n	801064c <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010634:	68bb      	ldr	r3, [r7, #8]
 8010636:	78db      	ldrb	r3, [r3, #3]
 8010638:	f003 0303 	and.w	r3, r3, #3
 801063c:	2b03      	cmp	r3, #3
 801063e:	d105      	bne.n	801064c <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8010640:	68bb      	ldr	r3, [r7, #8]
 8010642:	799b      	ldrb	r3, [r3, #6]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d101      	bne.n	801064c <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8010648:	2303      	movs	r3, #3
 801064a:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 801064c:	7dfb      	ldrb	r3, [r7, #23]
}
 801064e:	4618      	mov	r0, r3
 8010650:	371c      	adds	r7, #28
 8010652:	46bd      	mov	sp, r7
 8010654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010658:	4770      	bx	lr
 801065a:	bf00      	nop
 801065c:	fffff800 	.word	0xfffff800

08010660 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010660:	b480      	push	{r7}
 8010662:	b087      	sub	sp, #28
 8010664:	af00      	add	r7, sp, #0
 8010666:	60f8      	str	r0, [r7, #12]
 8010668:	60b9      	str	r1, [r7, #8]
 801066a:	4613      	mov	r3, r2
 801066c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 801066e:	68fb      	ldr	r3, [r7, #12]
 8010670:	3301      	adds	r3, #1
 8010672:	781b      	ldrb	r3, [r3, #0]
 8010674:	2b03      	cmp	r3, #3
 8010676:	d120      	bne.n	80106ba <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010678:	68fb      	ldr	r3, [r7, #12]
 801067a:	781b      	ldrb	r3, [r3, #0]
 801067c:	1e9a      	subs	r2, r3, #2
 801067e:	88fb      	ldrh	r3, [r7, #6]
 8010680:	4293      	cmp	r3, r2
 8010682:	bf28      	it	cs
 8010684:	4613      	movcs	r3, r2
 8010686:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010688:	68fb      	ldr	r3, [r7, #12]
 801068a:	3302      	adds	r3, #2
 801068c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 801068e:	2300      	movs	r3, #0
 8010690:	82fb      	strh	r3, [r7, #22]
 8010692:	e00b      	b.n	80106ac <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010694:	8afb      	ldrh	r3, [r7, #22]
 8010696:	68fa      	ldr	r2, [r7, #12]
 8010698:	4413      	add	r3, r2
 801069a:	781a      	ldrb	r2, [r3, #0]
 801069c:	68bb      	ldr	r3, [r7, #8]
 801069e:	701a      	strb	r2, [r3, #0]
      pdest++;
 80106a0:	68bb      	ldr	r3, [r7, #8]
 80106a2:	3301      	adds	r3, #1
 80106a4:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80106a6:	8afb      	ldrh	r3, [r7, #22]
 80106a8:	3302      	adds	r3, #2
 80106aa:	82fb      	strh	r3, [r7, #22]
 80106ac:	8afa      	ldrh	r2, [r7, #22]
 80106ae:	8abb      	ldrh	r3, [r7, #20]
 80106b0:	429a      	cmp	r2, r3
 80106b2:	d3ef      	bcc.n	8010694 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	2200      	movs	r2, #0
 80106b8:	701a      	strb	r2, [r3, #0]
  }
}
 80106ba:	bf00      	nop
 80106bc:	371c      	adds	r7, #28
 80106be:	46bd      	mov	sp, r7
 80106c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106c4:	4770      	bx	lr

080106c6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80106c6:	b480      	push	{r7}
 80106c8:	b085      	sub	sp, #20
 80106ca:	af00      	add	r7, sp, #0
 80106cc:	6078      	str	r0, [r7, #4]
 80106ce:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 80106d0:	683b      	ldr	r3, [r7, #0]
 80106d2:	881a      	ldrh	r2, [r3, #0]
 80106d4:	687b      	ldr	r3, [r7, #4]
 80106d6:	781b      	ldrb	r3, [r3, #0]
 80106d8:	b29b      	uxth	r3, r3
 80106da:	4413      	add	r3, r2
 80106dc:	b29a      	uxth	r2, r3
 80106de:	683b      	ldr	r3, [r7, #0]
 80106e0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 80106e2:	687b      	ldr	r3, [r7, #4]
 80106e4:	781b      	ldrb	r3, [r3, #0]
 80106e6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 80106e8:	687b      	ldr	r3, [r7, #4]
 80106ea:	4413      	add	r3, r2
 80106ec:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80106ee:	68fb      	ldr	r3, [r7, #12]
}
 80106f0:	4618      	mov	r0, r3
 80106f2:	3714      	adds	r7, #20
 80106f4:	46bd      	mov	sp, r7
 80106f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106fa:	4770      	bx	lr

080106fc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b086      	sub	sp, #24
 8010700:	af00      	add	r7, sp, #0
 8010702:	60f8      	str	r0, [r7, #12]
 8010704:	60b9      	str	r1, [r7, #8]
 8010706:	4613      	mov	r3, r2
 8010708:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 801070a:	2301      	movs	r3, #1
 801070c:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 801070e:	68fb      	ldr	r3, [r7, #12]
 8010710:	789b      	ldrb	r3, [r3, #2]
 8010712:	2b01      	cmp	r3, #1
 8010714:	d002      	beq.n	801071c <USBH_CtlReq+0x20>
 8010716:	2b02      	cmp	r3, #2
 8010718:	d00f      	beq.n	801073a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 801071a:	e027      	b.n	801076c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	68ba      	ldr	r2, [r7, #8]
 8010720:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010722:	68fb      	ldr	r3, [r7, #12]
 8010724:	88fa      	ldrh	r2, [r7, #6]
 8010726:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010728:	68fb      	ldr	r3, [r7, #12]
 801072a:	2201      	movs	r2, #1
 801072c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2202      	movs	r2, #2
 8010732:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010734:	2301      	movs	r3, #1
 8010736:	75fb      	strb	r3, [r7, #23]
      break;
 8010738:	e018      	b.n	801076c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 801073a:	68f8      	ldr	r0, [r7, #12]
 801073c:	f000 f81c 	bl	8010778 <USBH_HandleControl>
 8010740:	4603      	mov	r3, r0
 8010742:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010744:	7dfb      	ldrb	r3, [r7, #23]
 8010746:	2b00      	cmp	r3, #0
 8010748:	d002      	beq.n	8010750 <USBH_CtlReq+0x54>
 801074a:	7dfb      	ldrb	r3, [r7, #23]
 801074c:	2b03      	cmp	r3, #3
 801074e:	d106      	bne.n	801075e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010750:	68fb      	ldr	r3, [r7, #12]
 8010752:	2201      	movs	r2, #1
 8010754:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010756:	68fb      	ldr	r3, [r7, #12]
 8010758:	2200      	movs	r2, #0
 801075a:	761a      	strb	r2, [r3, #24]
      break;
 801075c:	e005      	b.n	801076a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 801075e:	7dfb      	ldrb	r3, [r7, #23]
 8010760:	2b02      	cmp	r3, #2
 8010762:	d102      	bne.n	801076a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	2201      	movs	r2, #1
 8010768:	709a      	strb	r2, [r3, #2]
      break;
 801076a:	bf00      	nop
  }
  return status;
 801076c:	7dfb      	ldrb	r3, [r7, #23]
}
 801076e:	4618      	mov	r0, r3
 8010770:	3718      	adds	r7, #24
 8010772:	46bd      	mov	sp, r7
 8010774:	bd80      	pop	{r7, pc}
	...

08010778 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010778:	b580      	push	{r7, lr}
 801077a:	b086      	sub	sp, #24
 801077c:	af02      	add	r7, sp, #8
 801077e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010780:	2301      	movs	r3, #1
 8010782:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010784:	2300      	movs	r3, #0
 8010786:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	7e1b      	ldrb	r3, [r3, #24]
 801078c:	3b01      	subs	r3, #1
 801078e:	2b0a      	cmp	r3, #10
 8010790:	f200 8156 	bhi.w	8010a40 <USBH_HandleControl+0x2c8>
 8010794:	a201      	add	r2, pc, #4	; (adr r2, 801079c <USBH_HandleControl+0x24>)
 8010796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801079a:	bf00      	nop
 801079c:	080107c9 	.word	0x080107c9
 80107a0:	080107e3 	.word	0x080107e3
 80107a4:	0801084d 	.word	0x0801084d
 80107a8:	08010873 	.word	0x08010873
 80107ac:	080108ab 	.word	0x080108ab
 80107b0:	080108d5 	.word	0x080108d5
 80107b4:	08010927 	.word	0x08010927
 80107b8:	08010949 	.word	0x08010949
 80107bc:	08010985 	.word	0x08010985
 80107c0:	080109ab 	.word	0x080109ab
 80107c4:	080109e9 	.word	0x080109e9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80107c8:	687b      	ldr	r3, [r7, #4]
 80107ca:	f103 0110 	add.w	r1, r3, #16
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	795b      	ldrb	r3, [r3, #5]
 80107d2:	461a      	mov	r2, r3
 80107d4:	6878      	ldr	r0, [r7, #4]
 80107d6:	f000 f943 	bl	8010a60 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80107da:	687b      	ldr	r3, [r7, #4]
 80107dc:	2202      	movs	r2, #2
 80107de:	761a      	strb	r2, [r3, #24]
      break;
 80107e0:	e139      	b.n	8010a56 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80107e2:	687b      	ldr	r3, [r7, #4]
 80107e4:	795b      	ldrb	r3, [r3, #5]
 80107e6:	4619      	mov	r1, r3
 80107e8:	6878      	ldr	r0, [r7, #4]
 80107ea:	f001 ff63 	bl	80126b4 <USBH_LL_GetURBState>
 80107ee:	4603      	mov	r3, r0
 80107f0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80107f2:	7bbb      	ldrb	r3, [r7, #14]
 80107f4:	2b01      	cmp	r3, #1
 80107f6:	d11e      	bne.n	8010836 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80107f8:	687b      	ldr	r3, [r7, #4]
 80107fa:	7c1b      	ldrb	r3, [r3, #16]
 80107fc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010800:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010802:	687b      	ldr	r3, [r7, #4]
 8010804:	8adb      	ldrh	r3, [r3, #22]
 8010806:	2b00      	cmp	r3, #0
 8010808:	d00a      	beq.n	8010820 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 801080a:	7b7b      	ldrb	r3, [r7, #13]
 801080c:	2b80      	cmp	r3, #128	; 0x80
 801080e:	d103      	bne.n	8010818 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010810:	687b      	ldr	r3, [r7, #4]
 8010812:	2203      	movs	r2, #3
 8010814:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010816:	e115      	b.n	8010a44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8010818:	687b      	ldr	r3, [r7, #4]
 801081a:	2205      	movs	r2, #5
 801081c:	761a      	strb	r2, [r3, #24]
      break;
 801081e:	e111      	b.n	8010a44 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8010820:	7b7b      	ldrb	r3, [r7, #13]
 8010822:	2b80      	cmp	r3, #128	; 0x80
 8010824:	d103      	bne.n	801082e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010826:	687b      	ldr	r3, [r7, #4]
 8010828:	2209      	movs	r2, #9
 801082a:	761a      	strb	r2, [r3, #24]
      break;
 801082c:	e10a      	b.n	8010a44 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 801082e:	687b      	ldr	r3, [r7, #4]
 8010830:	2207      	movs	r2, #7
 8010832:	761a      	strb	r2, [r3, #24]
      break;
 8010834:	e106      	b.n	8010a44 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010836:	7bbb      	ldrb	r3, [r7, #14]
 8010838:	2b04      	cmp	r3, #4
 801083a:	d003      	beq.n	8010844 <USBH_HandleControl+0xcc>
 801083c:	7bbb      	ldrb	r3, [r7, #14]
 801083e:	2b02      	cmp	r3, #2
 8010840:	f040 8100 	bne.w	8010a44 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	220b      	movs	r2, #11
 8010848:	761a      	strb	r2, [r3, #24]
      break;
 801084a:	e0fb      	b.n	8010a44 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 801084c:	687b      	ldr	r3, [r7, #4]
 801084e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	6899      	ldr	r1, [r3, #8]
 801085c:	687b      	ldr	r3, [r7, #4]
 801085e:	899a      	ldrh	r2, [r3, #12]
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	791b      	ldrb	r3, [r3, #4]
 8010864:	6878      	ldr	r0, [r7, #4]
 8010866:	f000 f93a 	bl	8010ade <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	2204      	movs	r2, #4
 801086e:	761a      	strb	r2, [r3, #24]
      break;
 8010870:	e0f1      	b.n	8010a56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	791b      	ldrb	r3, [r3, #4]
 8010876:	4619      	mov	r1, r3
 8010878:	6878      	ldr	r0, [r7, #4]
 801087a:	f001 ff1b 	bl	80126b4 <USBH_LL_GetURBState>
 801087e:	4603      	mov	r3, r0
 8010880:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010882:	7bbb      	ldrb	r3, [r7, #14]
 8010884:	2b01      	cmp	r3, #1
 8010886:	d102      	bne.n	801088e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	2209      	movs	r2, #9
 801088c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 801088e:	7bbb      	ldrb	r3, [r7, #14]
 8010890:	2b05      	cmp	r3, #5
 8010892:	d102      	bne.n	801089a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010894:	2303      	movs	r3, #3
 8010896:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010898:	e0d6      	b.n	8010a48 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 801089a:	7bbb      	ldrb	r3, [r7, #14]
 801089c:	2b04      	cmp	r3, #4
 801089e:	f040 80d3 	bne.w	8010a48 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	220b      	movs	r2, #11
 80108a6:	761a      	strb	r2, [r3, #24]
      break;
 80108a8:	e0ce      	b.n	8010a48 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80108aa:	687b      	ldr	r3, [r7, #4]
 80108ac:	6899      	ldr	r1, [r3, #8]
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	899a      	ldrh	r2, [r3, #12]
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	795b      	ldrb	r3, [r3, #5]
 80108b6:	2001      	movs	r0, #1
 80108b8:	9000      	str	r0, [sp, #0]
 80108ba:	6878      	ldr	r0, [r7, #4]
 80108bc:	f000 f8ea 	bl	8010a94 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80108c6:	b29a      	uxth	r2, r3
 80108c8:	687b      	ldr	r3, [r7, #4]
 80108ca:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	2206      	movs	r2, #6
 80108d0:	761a      	strb	r2, [r3, #24]
      break;
 80108d2:	e0c0      	b.n	8010a56 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	795b      	ldrb	r3, [r3, #5]
 80108d8:	4619      	mov	r1, r3
 80108da:	6878      	ldr	r0, [r7, #4]
 80108dc:	f001 feea 	bl	80126b4 <USBH_LL_GetURBState>
 80108e0:	4603      	mov	r3, r0
 80108e2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80108e4:	7bbb      	ldrb	r3, [r7, #14]
 80108e6:	2b01      	cmp	r3, #1
 80108e8:	d103      	bne.n	80108f2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2207      	movs	r2, #7
 80108ee:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80108f0:	e0ac      	b.n	8010a4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80108f2:	7bbb      	ldrb	r3, [r7, #14]
 80108f4:	2b05      	cmp	r3, #5
 80108f6:	d105      	bne.n	8010904 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80108f8:	687b      	ldr	r3, [r7, #4]
 80108fa:	220c      	movs	r2, #12
 80108fc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80108fe:	2303      	movs	r3, #3
 8010900:	73fb      	strb	r3, [r7, #15]
      break;
 8010902:	e0a3      	b.n	8010a4c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010904:	7bbb      	ldrb	r3, [r7, #14]
 8010906:	2b02      	cmp	r3, #2
 8010908:	d103      	bne.n	8010912 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2205      	movs	r2, #5
 801090e:	761a      	strb	r2, [r3, #24]
      break;
 8010910:	e09c      	b.n	8010a4c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8010912:	7bbb      	ldrb	r3, [r7, #14]
 8010914:	2b04      	cmp	r3, #4
 8010916:	f040 8099 	bne.w	8010a4c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	220b      	movs	r2, #11
 801091e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010920:	2302      	movs	r3, #2
 8010922:	73fb      	strb	r3, [r7, #15]
      break;
 8010924:	e092      	b.n	8010a4c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	791b      	ldrb	r3, [r3, #4]
 801092a:	2200      	movs	r2, #0
 801092c:	2100      	movs	r1, #0
 801092e:	6878      	ldr	r0, [r7, #4]
 8010930:	f000 f8d5 	bl	8010ade <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801093a:	b29a      	uxth	r2, r3
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010940:	687b      	ldr	r3, [r7, #4]
 8010942:	2208      	movs	r2, #8
 8010944:	761a      	strb	r2, [r3, #24]

      break;
 8010946:	e086      	b.n	8010a56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	791b      	ldrb	r3, [r3, #4]
 801094c:	4619      	mov	r1, r3
 801094e:	6878      	ldr	r0, [r7, #4]
 8010950:	f001 feb0 	bl	80126b4 <USBH_LL_GetURBState>
 8010954:	4603      	mov	r3, r0
 8010956:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010958:	7bbb      	ldrb	r3, [r7, #14]
 801095a:	2b01      	cmp	r3, #1
 801095c:	d105      	bne.n	801096a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	220d      	movs	r2, #13
 8010962:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010964:	2300      	movs	r3, #0
 8010966:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010968:	e072      	b.n	8010a50 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 801096a:	7bbb      	ldrb	r3, [r7, #14]
 801096c:	2b04      	cmp	r3, #4
 801096e:	d103      	bne.n	8010978 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010970:	687b      	ldr	r3, [r7, #4]
 8010972:	220b      	movs	r2, #11
 8010974:	761a      	strb	r2, [r3, #24]
      break;
 8010976:	e06b      	b.n	8010a50 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8010978:	7bbb      	ldrb	r3, [r7, #14]
 801097a:	2b05      	cmp	r3, #5
 801097c:	d168      	bne.n	8010a50 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 801097e:	2303      	movs	r3, #3
 8010980:	73fb      	strb	r3, [r7, #15]
      break;
 8010982:	e065      	b.n	8010a50 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	795b      	ldrb	r3, [r3, #5]
 8010988:	2201      	movs	r2, #1
 801098a:	9200      	str	r2, [sp, #0]
 801098c:	2200      	movs	r2, #0
 801098e:	2100      	movs	r1, #0
 8010990:	6878      	ldr	r0, [r7, #4]
 8010992:	f000 f87f 	bl	8010a94 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 801099c:	b29a      	uxth	r2, r3
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 80109a2:	687b      	ldr	r3, [r7, #4]
 80109a4:	220a      	movs	r2, #10
 80109a6:	761a      	strb	r2, [r3, #24]
      break;
 80109a8:	e055      	b.n	8010a56 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	795b      	ldrb	r3, [r3, #5]
 80109ae:	4619      	mov	r1, r3
 80109b0:	6878      	ldr	r0, [r7, #4]
 80109b2:	f001 fe7f 	bl	80126b4 <USBH_LL_GetURBState>
 80109b6:	4603      	mov	r3, r0
 80109b8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80109ba:	7bbb      	ldrb	r3, [r7, #14]
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d105      	bne.n	80109cc <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80109c0:	2300      	movs	r3, #0
 80109c2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80109c4:	687b      	ldr	r3, [r7, #4]
 80109c6:	220d      	movs	r2, #13
 80109c8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80109ca:	e043      	b.n	8010a54 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80109cc:	7bbb      	ldrb	r3, [r7, #14]
 80109ce:	2b02      	cmp	r3, #2
 80109d0:	d103      	bne.n	80109da <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80109d2:	687b      	ldr	r3, [r7, #4]
 80109d4:	2209      	movs	r2, #9
 80109d6:	761a      	strb	r2, [r3, #24]
      break;
 80109d8:	e03c      	b.n	8010a54 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80109da:	7bbb      	ldrb	r3, [r7, #14]
 80109dc:	2b04      	cmp	r3, #4
 80109de:	d139      	bne.n	8010a54 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80109e0:	687b      	ldr	r3, [r7, #4]
 80109e2:	220b      	movs	r2, #11
 80109e4:	761a      	strb	r2, [r3, #24]
      break;
 80109e6:	e035      	b.n	8010a54 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	7e5b      	ldrb	r3, [r3, #25]
 80109ec:	3301      	adds	r3, #1
 80109ee:	b2da      	uxtb	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	765a      	strb	r2, [r3, #25]
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	7e5b      	ldrb	r3, [r3, #25]
 80109f8:	2b02      	cmp	r3, #2
 80109fa:	d806      	bhi.n	8010a0a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2201      	movs	r2, #1
 8010a00:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010a02:	687b      	ldr	r3, [r7, #4]
 8010a04:	2201      	movs	r2, #1
 8010a06:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010a08:	e025      	b.n	8010a56 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010a10:	2106      	movs	r1, #6
 8010a12:	6878      	ldr	r0, [r7, #4]
 8010a14:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	2200      	movs	r2, #0
 8010a1a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	795b      	ldrb	r3, [r3, #5]
 8010a20:	4619      	mov	r1, r3
 8010a22:	6878      	ldr	r0, [r7, #4]
 8010a24:	f000 f90c 	bl	8010c40 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010a28:	687b      	ldr	r3, [r7, #4]
 8010a2a:	791b      	ldrb	r3, [r3, #4]
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	6878      	ldr	r0, [r7, #4]
 8010a30:	f000 f906 	bl	8010c40 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2200      	movs	r2, #0
 8010a38:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010a3a:	2302      	movs	r3, #2
 8010a3c:	73fb      	strb	r3, [r7, #15]
      break;
 8010a3e:	e00a      	b.n	8010a56 <USBH_HandleControl+0x2de>

    default:
      break;
 8010a40:	bf00      	nop
 8010a42:	e008      	b.n	8010a56 <USBH_HandleControl+0x2de>
      break;
 8010a44:	bf00      	nop
 8010a46:	e006      	b.n	8010a56 <USBH_HandleControl+0x2de>
      break;
 8010a48:	bf00      	nop
 8010a4a:	e004      	b.n	8010a56 <USBH_HandleControl+0x2de>
      break;
 8010a4c:	bf00      	nop
 8010a4e:	e002      	b.n	8010a56 <USBH_HandleControl+0x2de>
      break;
 8010a50:	bf00      	nop
 8010a52:	e000      	b.n	8010a56 <USBH_HandleControl+0x2de>
      break;
 8010a54:	bf00      	nop
  }

  return status;
 8010a56:	7bfb      	ldrb	r3, [r7, #15]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3710      	adds	r7, #16
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}

08010a60 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010a60:	b580      	push	{r7, lr}
 8010a62:	b088      	sub	sp, #32
 8010a64:	af04      	add	r7, sp, #16
 8010a66:	60f8      	str	r0, [r7, #12]
 8010a68:	60b9      	str	r1, [r7, #8]
 8010a6a:	4613      	mov	r3, r2
 8010a6c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010a6e:	79f9      	ldrb	r1, [r7, #7]
 8010a70:	2300      	movs	r3, #0
 8010a72:	9303      	str	r3, [sp, #12]
 8010a74:	2308      	movs	r3, #8
 8010a76:	9302      	str	r3, [sp, #8]
 8010a78:	68bb      	ldr	r3, [r7, #8]
 8010a7a:	9301      	str	r3, [sp, #4]
 8010a7c:	2300      	movs	r3, #0
 8010a7e:	9300      	str	r3, [sp, #0]
 8010a80:	2300      	movs	r3, #0
 8010a82:	2200      	movs	r2, #0
 8010a84:	68f8      	ldr	r0, [r7, #12]
 8010a86:	f001 fde4 	bl	8012652 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010a8a:	2300      	movs	r3, #0
}
 8010a8c:	4618      	mov	r0, r3
 8010a8e:	3710      	adds	r7, #16
 8010a90:	46bd      	mov	sp, r7
 8010a92:	bd80      	pop	{r7, pc}

08010a94 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b088      	sub	sp, #32
 8010a98:	af04      	add	r7, sp, #16
 8010a9a:	60f8      	str	r0, [r7, #12]
 8010a9c:	60b9      	str	r1, [r7, #8]
 8010a9e:	4611      	mov	r1, r2
 8010aa0:	461a      	mov	r2, r3
 8010aa2:	460b      	mov	r3, r1
 8010aa4:	80fb      	strh	r3, [r7, #6]
 8010aa6:	4613      	mov	r3, r2
 8010aa8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d001      	beq.n	8010ab8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010ab8:	7979      	ldrb	r1, [r7, #5]
 8010aba:	7e3b      	ldrb	r3, [r7, #24]
 8010abc:	9303      	str	r3, [sp, #12]
 8010abe:	88fb      	ldrh	r3, [r7, #6]
 8010ac0:	9302      	str	r3, [sp, #8]
 8010ac2:	68bb      	ldr	r3, [r7, #8]
 8010ac4:	9301      	str	r3, [sp, #4]
 8010ac6:	2301      	movs	r3, #1
 8010ac8:	9300      	str	r3, [sp, #0]
 8010aca:	2300      	movs	r3, #0
 8010acc:	2200      	movs	r2, #0
 8010ace:	68f8      	ldr	r0, [r7, #12]
 8010ad0:	f001 fdbf 	bl	8012652 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010ad4:	2300      	movs	r3, #0
}
 8010ad6:	4618      	mov	r0, r3
 8010ad8:	3710      	adds	r7, #16
 8010ada:	46bd      	mov	sp, r7
 8010adc:	bd80      	pop	{r7, pc}

08010ade <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010ade:	b580      	push	{r7, lr}
 8010ae0:	b088      	sub	sp, #32
 8010ae2:	af04      	add	r7, sp, #16
 8010ae4:	60f8      	str	r0, [r7, #12]
 8010ae6:	60b9      	str	r1, [r7, #8]
 8010ae8:	4611      	mov	r1, r2
 8010aea:	461a      	mov	r2, r3
 8010aec:	460b      	mov	r3, r1
 8010aee:	80fb      	strh	r3, [r7, #6]
 8010af0:	4613      	mov	r3, r2
 8010af2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010af4:	7979      	ldrb	r1, [r7, #5]
 8010af6:	2300      	movs	r3, #0
 8010af8:	9303      	str	r3, [sp, #12]
 8010afa:	88fb      	ldrh	r3, [r7, #6]
 8010afc:	9302      	str	r3, [sp, #8]
 8010afe:	68bb      	ldr	r3, [r7, #8]
 8010b00:	9301      	str	r3, [sp, #4]
 8010b02:	2301      	movs	r3, #1
 8010b04:	9300      	str	r3, [sp, #0]
 8010b06:	2300      	movs	r3, #0
 8010b08:	2201      	movs	r2, #1
 8010b0a:	68f8      	ldr	r0, [r7, #12]
 8010b0c:	f001 fda1 	bl	8012652 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010b10:	2300      	movs	r3, #0

}
 8010b12:	4618      	mov	r0, r3
 8010b14:	3710      	adds	r7, #16
 8010b16:	46bd      	mov	sp, r7
 8010b18:	bd80      	pop	{r7, pc}

08010b1a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010b1a:	b580      	push	{r7, lr}
 8010b1c:	b088      	sub	sp, #32
 8010b1e:	af04      	add	r7, sp, #16
 8010b20:	60f8      	str	r0, [r7, #12]
 8010b22:	60b9      	str	r1, [r7, #8]
 8010b24:	4611      	mov	r1, r2
 8010b26:	461a      	mov	r2, r3
 8010b28:	460b      	mov	r3, r1
 8010b2a:	80fb      	strh	r3, [r7, #6]
 8010b2c:	4613      	mov	r3, r2
 8010b2e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010b30:	68fb      	ldr	r3, [r7, #12]
 8010b32:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010b36:	2b00      	cmp	r3, #0
 8010b38:	d001      	beq.n	8010b3e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010b3e:	7979      	ldrb	r1, [r7, #5]
 8010b40:	7e3b      	ldrb	r3, [r7, #24]
 8010b42:	9303      	str	r3, [sp, #12]
 8010b44:	88fb      	ldrh	r3, [r7, #6]
 8010b46:	9302      	str	r3, [sp, #8]
 8010b48:	68bb      	ldr	r3, [r7, #8]
 8010b4a:	9301      	str	r3, [sp, #4]
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	9300      	str	r3, [sp, #0]
 8010b50:	2302      	movs	r3, #2
 8010b52:	2200      	movs	r2, #0
 8010b54:	68f8      	ldr	r0, [r7, #12]
 8010b56:	f001 fd7c 	bl	8012652 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010b5a:	2300      	movs	r3, #0
}
 8010b5c:	4618      	mov	r0, r3
 8010b5e:	3710      	adds	r7, #16
 8010b60:	46bd      	mov	sp, r7
 8010b62:	bd80      	pop	{r7, pc}

08010b64 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010b64:	b580      	push	{r7, lr}
 8010b66:	b088      	sub	sp, #32
 8010b68:	af04      	add	r7, sp, #16
 8010b6a:	60f8      	str	r0, [r7, #12]
 8010b6c:	60b9      	str	r1, [r7, #8]
 8010b6e:	4611      	mov	r1, r2
 8010b70:	461a      	mov	r2, r3
 8010b72:	460b      	mov	r3, r1
 8010b74:	80fb      	strh	r3, [r7, #6]
 8010b76:	4613      	mov	r3, r2
 8010b78:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010b7a:	7979      	ldrb	r1, [r7, #5]
 8010b7c:	2300      	movs	r3, #0
 8010b7e:	9303      	str	r3, [sp, #12]
 8010b80:	88fb      	ldrh	r3, [r7, #6]
 8010b82:	9302      	str	r3, [sp, #8]
 8010b84:	68bb      	ldr	r3, [r7, #8]
 8010b86:	9301      	str	r3, [sp, #4]
 8010b88:	2301      	movs	r3, #1
 8010b8a:	9300      	str	r3, [sp, #0]
 8010b8c:	2302      	movs	r3, #2
 8010b8e:	2201      	movs	r2, #1
 8010b90:	68f8      	ldr	r0, [r7, #12]
 8010b92:	f001 fd5e 	bl	8012652 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010b96:	2300      	movs	r3, #0
}
 8010b98:	4618      	mov	r0, r3
 8010b9a:	3710      	adds	r7, #16
 8010b9c:	46bd      	mov	sp, r7
 8010b9e:	bd80      	pop	{r7, pc}

08010ba0 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010ba0:	b580      	push	{r7, lr}
 8010ba2:	b086      	sub	sp, #24
 8010ba4:	af04      	add	r7, sp, #16
 8010ba6:	6078      	str	r0, [r7, #4]
 8010ba8:	4608      	mov	r0, r1
 8010baa:	4611      	mov	r1, r2
 8010bac:	461a      	mov	r2, r3
 8010bae:	4603      	mov	r3, r0
 8010bb0:	70fb      	strb	r3, [r7, #3]
 8010bb2:	460b      	mov	r3, r1
 8010bb4:	70bb      	strb	r3, [r7, #2]
 8010bb6:	4613      	mov	r3, r2
 8010bb8:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010bba:	7878      	ldrb	r0, [r7, #1]
 8010bbc:	78ba      	ldrb	r2, [r7, #2]
 8010bbe:	78f9      	ldrb	r1, [r7, #3]
 8010bc0:	8b3b      	ldrh	r3, [r7, #24]
 8010bc2:	9302      	str	r3, [sp, #8]
 8010bc4:	7d3b      	ldrb	r3, [r7, #20]
 8010bc6:	9301      	str	r3, [sp, #4]
 8010bc8:	7c3b      	ldrb	r3, [r7, #16]
 8010bca:	9300      	str	r3, [sp, #0]
 8010bcc:	4603      	mov	r3, r0
 8010bce:	6878      	ldr	r0, [r7, #4]
 8010bd0:	f001 fcf1 	bl	80125b6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8010bd4:	2300      	movs	r3, #0
}
 8010bd6:	4618      	mov	r0, r3
 8010bd8:	3708      	adds	r7, #8
 8010bda:	46bd      	mov	sp, r7
 8010bdc:	bd80      	pop	{r7, pc}

08010bde <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010bde:	b580      	push	{r7, lr}
 8010be0:	b082      	sub	sp, #8
 8010be2:	af00      	add	r7, sp, #0
 8010be4:	6078      	str	r0, [r7, #4]
 8010be6:	460b      	mov	r3, r1
 8010be8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8010bea:	78fb      	ldrb	r3, [r7, #3]
 8010bec:	4619      	mov	r1, r3
 8010bee:	6878      	ldr	r0, [r7, #4]
 8010bf0:	f001 fd10 	bl	8012614 <USBH_LL_ClosePipe>

  return USBH_OK;
 8010bf4:	2300      	movs	r3, #0
}
 8010bf6:	4618      	mov	r0, r3
 8010bf8:	3708      	adds	r7, #8
 8010bfa:	46bd      	mov	sp, r7
 8010bfc:	bd80      	pop	{r7, pc}

08010bfe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8010bfe:	b580      	push	{r7, lr}
 8010c00:	b084      	sub	sp, #16
 8010c02:	af00      	add	r7, sp, #0
 8010c04:	6078      	str	r0, [r7, #4]
 8010c06:	460b      	mov	r3, r1
 8010c08:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8010c0a:	6878      	ldr	r0, [r7, #4]
 8010c0c:	f000 f836 	bl	8010c7c <USBH_GetFreePipe>
 8010c10:	4603      	mov	r3, r0
 8010c12:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8010c14:	89fb      	ldrh	r3, [r7, #14]
 8010c16:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010c1a:	4293      	cmp	r3, r2
 8010c1c:	d00a      	beq.n	8010c34 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8010c1e:	78fa      	ldrb	r2, [r7, #3]
 8010c20:	89fb      	ldrh	r3, [r7, #14]
 8010c22:	f003 030f 	and.w	r3, r3, #15
 8010c26:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8010c2a:	6879      	ldr	r1, [r7, #4]
 8010c2c:	33e0      	adds	r3, #224	; 0xe0
 8010c2e:	009b      	lsls	r3, r3, #2
 8010c30:	440b      	add	r3, r1
 8010c32:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8010c34:	89fb      	ldrh	r3, [r7, #14]
 8010c36:	b2db      	uxtb	r3, r3
}
 8010c38:	4618      	mov	r0, r3
 8010c3a:	3710      	adds	r7, #16
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}

08010c40 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8010c40:	b480      	push	{r7}
 8010c42:	b083      	sub	sp, #12
 8010c44:	af00      	add	r7, sp, #0
 8010c46:	6078      	str	r0, [r7, #4]
 8010c48:	460b      	mov	r3, r1
 8010c4a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8010c4c:	78fb      	ldrb	r3, [r7, #3]
 8010c4e:	2b0f      	cmp	r3, #15
 8010c50:	d80d      	bhi.n	8010c6e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8010c52:	78fb      	ldrb	r3, [r7, #3]
 8010c54:	687a      	ldr	r2, [r7, #4]
 8010c56:	33e0      	adds	r3, #224	; 0xe0
 8010c58:	009b      	lsls	r3, r3, #2
 8010c5a:	4413      	add	r3, r2
 8010c5c:	685a      	ldr	r2, [r3, #4]
 8010c5e:	78fb      	ldrb	r3, [r7, #3]
 8010c60:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8010c64:	6879      	ldr	r1, [r7, #4]
 8010c66:	33e0      	adds	r3, #224	; 0xe0
 8010c68:	009b      	lsls	r3, r3, #2
 8010c6a:	440b      	add	r3, r1
 8010c6c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8010c6e:	2300      	movs	r3, #0
}
 8010c70:	4618      	mov	r0, r3
 8010c72:	370c      	adds	r7, #12
 8010c74:	46bd      	mov	sp, r7
 8010c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c7a:	4770      	bx	lr

08010c7c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b085      	sub	sp, #20
 8010c80:	af00      	add	r7, sp, #0
 8010c82:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8010c84:	2300      	movs	r3, #0
 8010c86:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010c88:	2300      	movs	r3, #0
 8010c8a:	73fb      	strb	r3, [r7, #15]
 8010c8c:	e00f      	b.n	8010cae <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8010c8e:	7bfb      	ldrb	r3, [r7, #15]
 8010c90:	687a      	ldr	r2, [r7, #4]
 8010c92:	33e0      	adds	r3, #224	; 0xe0
 8010c94:	009b      	lsls	r3, r3, #2
 8010c96:	4413      	add	r3, r2
 8010c98:	685b      	ldr	r3, [r3, #4]
 8010c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8010c9e:	2b00      	cmp	r3, #0
 8010ca0:	d102      	bne.n	8010ca8 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8010ca2:	7bfb      	ldrb	r3, [r7, #15]
 8010ca4:	b29b      	uxth	r3, r3
 8010ca6:	e007      	b.n	8010cb8 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8010ca8:	7bfb      	ldrb	r3, [r7, #15]
 8010caa:	3301      	adds	r3, #1
 8010cac:	73fb      	strb	r3, [r7, #15]
 8010cae:	7bfb      	ldrb	r3, [r7, #15]
 8010cb0:	2b0f      	cmp	r3, #15
 8010cb2:	d9ec      	bls.n	8010c8e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8010cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8010cb8:	4618      	mov	r0, r3
 8010cba:	3714      	adds	r7, #20
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cc2:	4770      	bx	lr

08010cc4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8010cc4:	b580      	push	{r7, lr}
 8010cc6:	b084      	sub	sp, #16
 8010cc8:	af00      	add	r7, sp, #0
 8010cca:	4603      	mov	r3, r0
 8010ccc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8010cce:	79fb      	ldrb	r3, [r7, #7]
 8010cd0:	4a08      	ldr	r2, [pc, #32]	; (8010cf4 <disk_status+0x30>)
 8010cd2:	009b      	lsls	r3, r3, #2
 8010cd4:	4413      	add	r3, r2
 8010cd6:	685b      	ldr	r3, [r3, #4]
 8010cd8:	685b      	ldr	r3, [r3, #4]
 8010cda:	79fa      	ldrb	r2, [r7, #7]
 8010cdc:	4905      	ldr	r1, [pc, #20]	; (8010cf4 <disk_status+0x30>)
 8010cde:	440a      	add	r2, r1
 8010ce0:	7a12      	ldrb	r2, [r2, #8]
 8010ce2:	4610      	mov	r0, r2
 8010ce4:	4798      	blx	r3
 8010ce6:	4603      	mov	r3, r0
 8010ce8:	73fb      	strb	r3, [r7, #15]
  return stat;
 8010cea:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cec:	4618      	mov	r0, r3
 8010cee:	3710      	adds	r7, #16
 8010cf0:	46bd      	mov	sp, r7
 8010cf2:	bd80      	pop	{r7, pc}
 8010cf4:	200018f4 	.word	0x200018f4

08010cf8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	4603      	mov	r3, r0
 8010d00:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8010d02:	2300      	movs	r3, #0
 8010d04:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8010d06:	79fb      	ldrb	r3, [r7, #7]
 8010d08:	4a0d      	ldr	r2, [pc, #52]	; (8010d40 <disk_initialize+0x48>)
 8010d0a:	5cd3      	ldrb	r3, [r2, r3]
 8010d0c:	2b00      	cmp	r3, #0
 8010d0e:	d111      	bne.n	8010d34 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8010d10:	79fb      	ldrb	r3, [r7, #7]
 8010d12:	4a0b      	ldr	r2, [pc, #44]	; (8010d40 <disk_initialize+0x48>)
 8010d14:	2101      	movs	r1, #1
 8010d16:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8010d18:	79fb      	ldrb	r3, [r7, #7]
 8010d1a:	4a09      	ldr	r2, [pc, #36]	; (8010d40 <disk_initialize+0x48>)
 8010d1c:	009b      	lsls	r3, r3, #2
 8010d1e:	4413      	add	r3, r2
 8010d20:	685b      	ldr	r3, [r3, #4]
 8010d22:	681b      	ldr	r3, [r3, #0]
 8010d24:	79fa      	ldrb	r2, [r7, #7]
 8010d26:	4906      	ldr	r1, [pc, #24]	; (8010d40 <disk_initialize+0x48>)
 8010d28:	440a      	add	r2, r1
 8010d2a:	7a12      	ldrb	r2, [r2, #8]
 8010d2c:	4610      	mov	r0, r2
 8010d2e:	4798      	blx	r3
 8010d30:	4603      	mov	r3, r0
 8010d32:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8010d34:	7bfb      	ldrb	r3, [r7, #15]
}
 8010d36:	4618      	mov	r0, r3
 8010d38:	3710      	adds	r7, #16
 8010d3a:	46bd      	mov	sp, r7
 8010d3c:	bd80      	pop	{r7, pc}
 8010d3e:	bf00      	nop
 8010d40:	200018f4 	.word	0x200018f4

08010d44 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8010d44:	b590      	push	{r4, r7, lr}
 8010d46:	b087      	sub	sp, #28
 8010d48:	af00      	add	r7, sp, #0
 8010d4a:	60b9      	str	r1, [r7, #8]
 8010d4c:	607a      	str	r2, [r7, #4]
 8010d4e:	603b      	str	r3, [r7, #0]
 8010d50:	4603      	mov	r3, r0
 8010d52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8010d54:	7bfb      	ldrb	r3, [r7, #15]
 8010d56:	4a0a      	ldr	r2, [pc, #40]	; (8010d80 <disk_read+0x3c>)
 8010d58:	009b      	lsls	r3, r3, #2
 8010d5a:	4413      	add	r3, r2
 8010d5c:	685b      	ldr	r3, [r3, #4]
 8010d5e:	689c      	ldr	r4, [r3, #8]
 8010d60:	7bfb      	ldrb	r3, [r7, #15]
 8010d62:	4a07      	ldr	r2, [pc, #28]	; (8010d80 <disk_read+0x3c>)
 8010d64:	4413      	add	r3, r2
 8010d66:	7a18      	ldrb	r0, [r3, #8]
 8010d68:	683b      	ldr	r3, [r7, #0]
 8010d6a:	687a      	ldr	r2, [r7, #4]
 8010d6c:	68b9      	ldr	r1, [r7, #8]
 8010d6e:	47a0      	blx	r4
 8010d70:	4603      	mov	r3, r0
 8010d72:	75fb      	strb	r3, [r7, #23]
  return res;
 8010d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8010d76:	4618      	mov	r0, r3
 8010d78:	371c      	adds	r7, #28
 8010d7a:	46bd      	mov	sp, r7
 8010d7c:	bd90      	pop	{r4, r7, pc}
 8010d7e:	bf00      	nop
 8010d80:	200018f4 	.word	0x200018f4

08010d84 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8010d84:	b590      	push	{r4, r7, lr}
 8010d86:	b087      	sub	sp, #28
 8010d88:	af00      	add	r7, sp, #0
 8010d8a:	60b9      	str	r1, [r7, #8]
 8010d8c:	607a      	str	r2, [r7, #4]
 8010d8e:	603b      	str	r3, [r7, #0]
 8010d90:	4603      	mov	r3, r0
 8010d92:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8010d94:	7bfb      	ldrb	r3, [r7, #15]
 8010d96:	4a0a      	ldr	r2, [pc, #40]	; (8010dc0 <disk_write+0x3c>)
 8010d98:	009b      	lsls	r3, r3, #2
 8010d9a:	4413      	add	r3, r2
 8010d9c:	685b      	ldr	r3, [r3, #4]
 8010d9e:	68dc      	ldr	r4, [r3, #12]
 8010da0:	7bfb      	ldrb	r3, [r7, #15]
 8010da2:	4a07      	ldr	r2, [pc, #28]	; (8010dc0 <disk_write+0x3c>)
 8010da4:	4413      	add	r3, r2
 8010da6:	7a18      	ldrb	r0, [r3, #8]
 8010da8:	683b      	ldr	r3, [r7, #0]
 8010daa:	687a      	ldr	r2, [r7, #4]
 8010dac:	68b9      	ldr	r1, [r7, #8]
 8010dae:	47a0      	blx	r4
 8010db0:	4603      	mov	r3, r0
 8010db2:	75fb      	strb	r3, [r7, #23]
  return res;
 8010db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010db6:	4618      	mov	r0, r3
 8010db8:	371c      	adds	r7, #28
 8010dba:	46bd      	mov	sp, r7
 8010dbc:	bd90      	pop	{r4, r7, pc}
 8010dbe:	bf00      	nop
 8010dc0:	200018f4 	.word	0x200018f4

08010dc4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8010dc4:	b580      	push	{r7, lr}
 8010dc6:	b084      	sub	sp, #16
 8010dc8:	af00      	add	r7, sp, #0
 8010dca:	4603      	mov	r3, r0
 8010dcc:	603a      	str	r2, [r7, #0]
 8010dce:	71fb      	strb	r3, [r7, #7]
 8010dd0:	460b      	mov	r3, r1
 8010dd2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8010dd4:	79fb      	ldrb	r3, [r7, #7]
 8010dd6:	4a09      	ldr	r2, [pc, #36]	; (8010dfc <disk_ioctl+0x38>)
 8010dd8:	009b      	lsls	r3, r3, #2
 8010dda:	4413      	add	r3, r2
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	691b      	ldr	r3, [r3, #16]
 8010de0:	79fa      	ldrb	r2, [r7, #7]
 8010de2:	4906      	ldr	r1, [pc, #24]	; (8010dfc <disk_ioctl+0x38>)
 8010de4:	440a      	add	r2, r1
 8010de6:	7a10      	ldrb	r0, [r2, #8]
 8010de8:	79b9      	ldrb	r1, [r7, #6]
 8010dea:	683a      	ldr	r2, [r7, #0]
 8010dec:	4798      	blx	r3
 8010dee:	4603      	mov	r3, r0
 8010df0:	73fb      	strb	r3, [r7, #15]
  return res;
 8010df2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010df4:	4618      	mov	r0, r3
 8010df6:	3710      	adds	r7, #16
 8010df8:	46bd      	mov	sp, r7
 8010dfa:	bd80      	pop	{r7, pc}
 8010dfc:	200018f4 	.word	0x200018f4

08010e00 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8010e00:	b480      	push	{r7}
 8010e02:	b085      	sub	sp, #20
 8010e04:	af00      	add	r7, sp, #0
 8010e06:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	3301      	adds	r3, #1
 8010e0c:	781b      	ldrb	r3, [r3, #0]
 8010e0e:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8010e10:	89fb      	ldrh	r3, [r7, #14]
 8010e12:	021b      	lsls	r3, r3, #8
 8010e14:	b21a      	sxth	r2, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	781b      	ldrb	r3, [r3, #0]
 8010e1a:	b21b      	sxth	r3, r3
 8010e1c:	4313      	orrs	r3, r2
 8010e1e:	b21b      	sxth	r3, r3
 8010e20:	81fb      	strh	r3, [r7, #14]
	return rv;
 8010e22:	89fb      	ldrh	r3, [r7, #14]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3714      	adds	r7, #20
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e2e:	4770      	bx	lr

08010e30 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8010e30:	b480      	push	{r7}
 8010e32:	b085      	sub	sp, #20
 8010e34:	af00      	add	r7, sp, #0
 8010e36:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	3303      	adds	r3, #3
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8010e40:	68fb      	ldr	r3, [r7, #12]
 8010e42:	021b      	lsls	r3, r3, #8
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	3202      	adds	r2, #2
 8010e48:	7812      	ldrb	r2, [r2, #0]
 8010e4a:	4313      	orrs	r3, r2
 8010e4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8010e4e:	68fb      	ldr	r3, [r7, #12]
 8010e50:	021b      	lsls	r3, r3, #8
 8010e52:	687a      	ldr	r2, [r7, #4]
 8010e54:	3201      	adds	r2, #1
 8010e56:	7812      	ldrb	r2, [r2, #0]
 8010e58:	4313      	orrs	r3, r2
 8010e5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8010e5c:	68fb      	ldr	r3, [r7, #12]
 8010e5e:	021b      	lsls	r3, r3, #8
 8010e60:	687a      	ldr	r2, [r7, #4]
 8010e62:	7812      	ldrb	r2, [r2, #0]
 8010e64:	4313      	orrs	r3, r2
 8010e66:	60fb      	str	r3, [r7, #12]
	return rv;
 8010e68:	68fb      	ldr	r3, [r7, #12]
}
 8010e6a:	4618      	mov	r0, r3
 8010e6c:	3714      	adds	r7, #20
 8010e6e:	46bd      	mov	sp, r7
 8010e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e74:	4770      	bx	lr
	...

08010e78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8010e78:	b480      	push	{r7}
 8010e7a:	b085      	sub	sp, #20
 8010e7c:	af00      	add	r7, sp, #0
 8010e7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8010e80:	2300      	movs	r3, #0
 8010e82:	60fb      	str	r3, [r7, #12]
 8010e84:	e010      	b.n	8010ea8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8010e86:	4a0d      	ldr	r2, [pc, #52]	; (8010ebc <clear_lock+0x44>)
 8010e88:	68fb      	ldr	r3, [r7, #12]
 8010e8a:	011b      	lsls	r3, r3, #4
 8010e8c:	4413      	add	r3, r2
 8010e8e:	681b      	ldr	r3, [r3, #0]
 8010e90:	687a      	ldr	r2, [r7, #4]
 8010e92:	429a      	cmp	r2, r3
 8010e94:	d105      	bne.n	8010ea2 <clear_lock+0x2a>
 8010e96:	4a09      	ldr	r2, [pc, #36]	; (8010ebc <clear_lock+0x44>)
 8010e98:	68fb      	ldr	r3, [r7, #12]
 8010e9a:	011b      	lsls	r3, r3, #4
 8010e9c:	4413      	add	r3, r2
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8010ea2:	68fb      	ldr	r3, [r7, #12]
 8010ea4:	3301      	adds	r3, #1
 8010ea6:	60fb      	str	r3, [r7, #12]
 8010ea8:	68fb      	ldr	r3, [r7, #12]
 8010eaa:	2b01      	cmp	r3, #1
 8010eac:	d9eb      	bls.n	8010e86 <clear_lock+0xe>
	}
}
 8010eae:	bf00      	nop
 8010eb0:	bf00      	nop
 8010eb2:	3714      	adds	r7, #20
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eba:	4770      	bx	lr
 8010ebc:	200016d4 	.word	0x200016d4

08010ec0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b086      	sub	sp, #24
 8010ec4:	af00      	add	r7, sp, #0
 8010ec6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8010ecc:	687b      	ldr	r3, [r7, #4]
 8010ece:	78db      	ldrb	r3, [r3, #3]
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d034      	beq.n	8010f3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8010eda:	687b      	ldr	r3, [r7, #4]
 8010edc:	7858      	ldrb	r0, [r3, #1]
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010ee4:	2301      	movs	r3, #1
 8010ee6:	697a      	ldr	r2, [r7, #20]
 8010ee8:	f7ff ff4c 	bl	8010d84 <disk_write>
 8010eec:	4603      	mov	r3, r0
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d002      	beq.n	8010ef8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8010ef2:	2301      	movs	r3, #1
 8010ef4:	73fb      	strb	r3, [r7, #15]
 8010ef6:	e022      	b.n	8010f3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	2200      	movs	r2, #0
 8010efc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8010efe:	687b      	ldr	r3, [r7, #4]
 8010f00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f02:	697a      	ldr	r2, [r7, #20]
 8010f04:	1ad2      	subs	r2, r2, r3
 8010f06:	687b      	ldr	r3, [r7, #4]
 8010f08:	6a1b      	ldr	r3, [r3, #32]
 8010f0a:	429a      	cmp	r2, r3
 8010f0c:	d217      	bcs.n	8010f3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	789b      	ldrb	r3, [r3, #2]
 8010f12:	613b      	str	r3, [r7, #16]
 8010f14:	e010      	b.n	8010f38 <sync_window+0x78>
					wsect += fs->fsize;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	6a1b      	ldr	r3, [r3, #32]
 8010f1a:	697a      	ldr	r2, [r7, #20]
 8010f1c:	4413      	add	r3, r2
 8010f1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8010f20:	687b      	ldr	r3, [r7, #4]
 8010f22:	7858      	ldrb	r0, [r3, #1]
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f2a:	2301      	movs	r3, #1
 8010f2c:	697a      	ldr	r2, [r7, #20]
 8010f2e:	f7ff ff29 	bl	8010d84 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8010f32:	693b      	ldr	r3, [r7, #16]
 8010f34:	3b01      	subs	r3, #1
 8010f36:	613b      	str	r3, [r7, #16]
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	2b01      	cmp	r3, #1
 8010f3c:	d8eb      	bhi.n	8010f16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8010f3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f40:	4618      	mov	r0, r3
 8010f42:	3718      	adds	r7, #24
 8010f44:	46bd      	mov	sp, r7
 8010f46:	bd80      	pop	{r7, pc}

08010f48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8010f48:	b580      	push	{r7, lr}
 8010f4a:	b084      	sub	sp, #16
 8010f4c:	af00      	add	r7, sp, #0
 8010f4e:	6078      	str	r0, [r7, #4]
 8010f50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8010f52:	2300      	movs	r3, #0
 8010f54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8010f56:	687b      	ldr	r3, [r7, #4]
 8010f58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f5a:	683a      	ldr	r2, [r7, #0]
 8010f5c:	429a      	cmp	r2, r3
 8010f5e:	d01b      	beq.n	8010f98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8010f60:	6878      	ldr	r0, [r7, #4]
 8010f62:	f7ff ffad 	bl	8010ec0 <sync_window>
 8010f66:	4603      	mov	r3, r0
 8010f68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8010f6a:	7bfb      	ldrb	r3, [r7, #15]
 8010f6c:	2b00      	cmp	r3, #0
 8010f6e:	d113      	bne.n	8010f98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8010f70:	687b      	ldr	r3, [r7, #4]
 8010f72:	7858      	ldrb	r0, [r3, #1]
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	f103 0138 	add.w	r1, r3, #56	; 0x38
 8010f7a:	2301      	movs	r3, #1
 8010f7c:	683a      	ldr	r2, [r7, #0]
 8010f7e:	f7ff fee1 	bl	8010d44 <disk_read>
 8010f82:	4603      	mov	r3, r0
 8010f84:	2b00      	cmp	r3, #0
 8010f86:	d004      	beq.n	8010f92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8010f88:	f04f 33ff 	mov.w	r3, #4294967295
 8010f8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8010f8e:	2301      	movs	r3, #1
 8010f90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	683a      	ldr	r2, [r7, #0]
 8010f96:	635a      	str	r2, [r3, #52]	; 0x34
		}
	}
	return res;
 8010f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f9a:	4618      	mov	r0, r3
 8010f9c:	3710      	adds	r7, #16
 8010f9e:	46bd      	mov	sp, r7
 8010fa0:	bd80      	pop	{r7, pc}

08010fa2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010fa2:	b480      	push	{r7}
 8010fa4:	b087      	sub	sp, #28
 8010fa6:	af00      	add	r7, sp, #0
 8010fa8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8010faa:	f04f 33ff 	mov.w	r3, #4294967295
 8010fae:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	d031      	beq.n	801101c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	681b      	ldr	r3, [r3, #0]
 8010fbc:	617b      	str	r3, [r7, #20]
 8010fbe:	e002      	b.n	8010fc6 <get_ldnumber+0x24>
 8010fc0:	697b      	ldr	r3, [r7, #20]
 8010fc2:	3301      	adds	r3, #1
 8010fc4:	617b      	str	r3, [r7, #20]
 8010fc6:	697b      	ldr	r3, [r7, #20]
 8010fc8:	781b      	ldrb	r3, [r3, #0]
 8010fca:	2b1f      	cmp	r3, #31
 8010fcc:	d903      	bls.n	8010fd6 <get_ldnumber+0x34>
 8010fce:	697b      	ldr	r3, [r7, #20]
 8010fd0:	781b      	ldrb	r3, [r3, #0]
 8010fd2:	2b3a      	cmp	r3, #58	; 0x3a
 8010fd4:	d1f4      	bne.n	8010fc0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	781b      	ldrb	r3, [r3, #0]
 8010fda:	2b3a      	cmp	r3, #58	; 0x3a
 8010fdc:	d11c      	bne.n	8011018 <get_ldnumber+0x76>
			tp = *path;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010fe4:	68fb      	ldr	r3, [r7, #12]
 8010fe6:	1c5a      	adds	r2, r3, #1
 8010fe8:	60fa      	str	r2, [r7, #12]
 8010fea:	781b      	ldrb	r3, [r3, #0]
 8010fec:	3b30      	subs	r3, #48	; 0x30
 8010fee:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010ff0:	68bb      	ldr	r3, [r7, #8]
 8010ff2:	2b09      	cmp	r3, #9
 8010ff4:	d80e      	bhi.n	8011014 <get_ldnumber+0x72>
 8010ff6:	68fa      	ldr	r2, [r7, #12]
 8010ff8:	697b      	ldr	r3, [r7, #20]
 8010ffa:	429a      	cmp	r2, r3
 8010ffc:	d10a      	bne.n	8011014 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8010ffe:	68bb      	ldr	r3, [r7, #8]
 8011000:	2b00      	cmp	r3, #0
 8011002:	d107      	bne.n	8011014 <get_ldnumber+0x72>
					vol = (int)i;
 8011004:	68bb      	ldr	r3, [r7, #8]
 8011006:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	3301      	adds	r3, #1
 801100c:	617b      	str	r3, [r7, #20]
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	697a      	ldr	r2, [r7, #20]
 8011012:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8011014:	693b      	ldr	r3, [r7, #16]
 8011016:	e002      	b.n	801101e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8011018:	2300      	movs	r3, #0
 801101a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 801101c:	693b      	ldr	r3, [r7, #16]
}
 801101e:	4618      	mov	r0, r3
 8011020:	371c      	adds	r7, #28
 8011022:	46bd      	mov	sp, r7
 8011024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011028:	4770      	bx	lr
	...

0801102c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 801102c:	b580      	push	{r7, lr}
 801102e:	b082      	sub	sp, #8
 8011030:	af00      	add	r7, sp, #0
 8011032:	6078      	str	r0, [r7, #4]
 8011034:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8011036:	687b      	ldr	r3, [r7, #4]
 8011038:	2200      	movs	r2, #0
 801103a:	70da      	strb	r2, [r3, #3]
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	f04f 32ff 	mov.w	r2, #4294967295
 8011042:	635a      	str	r2, [r3, #52]	; 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8011044:	6839      	ldr	r1, [r7, #0]
 8011046:	6878      	ldr	r0, [r7, #4]
 8011048:	f7ff ff7e 	bl	8010f48 <move_window>
 801104c:	4603      	mov	r3, r0
 801104e:	2b00      	cmp	r3, #0
 8011050:	d001      	beq.n	8011056 <check_fs+0x2a>
 8011052:	2304      	movs	r3, #4
 8011054:	e038      	b.n	80110c8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8011056:	687b      	ldr	r3, [r7, #4]
 8011058:	3338      	adds	r3, #56	; 0x38
 801105a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801105e:	4618      	mov	r0, r3
 8011060:	f7ff fece 	bl	8010e00 <ld_word>
 8011064:	4603      	mov	r3, r0
 8011066:	461a      	mov	r2, r3
 8011068:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801106c:	429a      	cmp	r2, r3
 801106e:	d001      	beq.n	8011074 <check_fs+0x48>
 8011070:	2303      	movs	r3, #3
 8011072:	e029      	b.n	80110c8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8011074:	687b      	ldr	r3, [r7, #4]
 8011076:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 801107a:	2be9      	cmp	r3, #233	; 0xe9
 801107c:	d009      	beq.n	8011092 <check_fs+0x66>
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8011084:	2beb      	cmp	r3, #235	; 0xeb
 8011086:	d11e      	bne.n	80110c6 <check_fs+0x9a>
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 801108e:	2b90      	cmp	r3, #144	; 0x90
 8011090:	d119      	bne.n	80110c6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	3338      	adds	r3, #56	; 0x38
 8011096:	3336      	adds	r3, #54	; 0x36
 8011098:	4618      	mov	r0, r3
 801109a:	f7ff fec9 	bl	8010e30 <ld_dword>
 801109e:	4603      	mov	r3, r0
 80110a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80110a4:	4a0a      	ldr	r2, [pc, #40]	; (80110d0 <check_fs+0xa4>)
 80110a6:	4293      	cmp	r3, r2
 80110a8:	d101      	bne.n	80110ae <check_fs+0x82>
 80110aa:	2300      	movs	r3, #0
 80110ac:	e00c      	b.n	80110c8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	3338      	adds	r3, #56	; 0x38
 80110b2:	3352      	adds	r3, #82	; 0x52
 80110b4:	4618      	mov	r0, r3
 80110b6:	f7ff febb 	bl	8010e30 <ld_dword>
 80110ba:	4603      	mov	r3, r0
 80110bc:	4a05      	ldr	r2, [pc, #20]	; (80110d4 <check_fs+0xa8>)
 80110be:	4293      	cmp	r3, r2
 80110c0:	d101      	bne.n	80110c6 <check_fs+0x9a>
 80110c2:	2300      	movs	r3, #0
 80110c4:	e000      	b.n	80110c8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80110c6:	2302      	movs	r3, #2
}
 80110c8:	4618      	mov	r0, r3
 80110ca:	3708      	adds	r7, #8
 80110cc:	46bd      	mov	sp, r7
 80110ce:	bd80      	pop	{r7, pc}
 80110d0:	00544146 	.word	0x00544146
 80110d4:	33544146 	.word	0x33544146

080110d8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80110d8:	b580      	push	{r7, lr}
 80110da:	b096      	sub	sp, #88	; 0x58
 80110dc:	af00      	add	r7, sp, #0
 80110de:	60f8      	str	r0, [r7, #12]
 80110e0:	60b9      	str	r1, [r7, #8]
 80110e2:	4613      	mov	r3, r2
 80110e4:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80110e6:	68bb      	ldr	r3, [r7, #8]
 80110e8:	2200      	movs	r2, #0
 80110ea:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80110ec:	68f8      	ldr	r0, [r7, #12]
 80110ee:	f7ff ff58 	bl	8010fa2 <get_ldnumber>
 80110f2:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 80110f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	da01      	bge.n	80110fe <find_volume+0x26>
 80110fa:	230b      	movs	r3, #11
 80110fc:	e265      	b.n	80115ca <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 80110fe:	4a9f      	ldr	r2, [pc, #636]	; (801137c <find_volume+0x2a4>)
 8011100:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011102:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011106:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8011108:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801110a:	2b00      	cmp	r3, #0
 801110c:	d101      	bne.n	8011112 <find_volume+0x3a>
 801110e:	230c      	movs	r3, #12
 8011110:	e25b      	b.n	80115ca <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011116:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8011118:	79fb      	ldrb	r3, [r7, #7]
 801111a:	f023 0301 	bic.w	r3, r3, #1
 801111e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8011120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011122:	781b      	ldrb	r3, [r3, #0]
 8011124:	2b00      	cmp	r3, #0
 8011126:	d01a      	beq.n	801115e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8011128:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801112a:	785b      	ldrb	r3, [r3, #1]
 801112c:	4618      	mov	r0, r3
 801112e:	f7ff fdc9 	bl	8010cc4 <disk_status>
 8011132:	4603      	mov	r3, r0
 8011134:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8011138:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801113c:	f003 0301 	and.w	r3, r3, #1
 8011140:	2b00      	cmp	r3, #0
 8011142:	d10c      	bne.n	801115e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8011144:	79fb      	ldrb	r3, [r7, #7]
 8011146:	2b00      	cmp	r3, #0
 8011148:	d007      	beq.n	801115a <find_volume+0x82>
 801114a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801114e:	f003 0304 	and.w	r3, r3, #4
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8011156:	230a      	movs	r3, #10
 8011158:	e237      	b.n	80115ca <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 801115a:	2300      	movs	r3, #0
 801115c:	e235      	b.n	80115ca <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801115e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011160:	2200      	movs	r2, #0
 8011162:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8011164:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011166:	b2da      	uxtb	r2, r3
 8011168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801116e:	785b      	ldrb	r3, [r3, #1]
 8011170:	4618      	mov	r0, r3
 8011172:	f7ff fdc1 	bl	8010cf8 <disk_initialize>
 8011176:	4603      	mov	r3, r0
 8011178:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801117c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011180:	f003 0301 	and.w	r3, r3, #1
 8011184:	2b00      	cmp	r3, #0
 8011186:	d001      	beq.n	801118c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8011188:	2303      	movs	r3, #3
 801118a:	e21e      	b.n	80115ca <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801118c:	79fb      	ldrb	r3, [r7, #7]
 801118e:	2b00      	cmp	r3, #0
 8011190:	d007      	beq.n	80111a2 <find_volume+0xca>
 8011192:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8011196:	f003 0304 	and.w	r3, r3, #4
 801119a:	2b00      	cmp	r3, #0
 801119c:	d001      	beq.n	80111a2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801119e:	230a      	movs	r3, #10
 80111a0:	e213      	b.n	80115ca <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80111a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a4:	7858      	ldrb	r0, [r3, #1]
 80111a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111a8:	330c      	adds	r3, #12
 80111aa:	461a      	mov	r2, r3
 80111ac:	2102      	movs	r1, #2
 80111ae:	f7ff fe09 	bl	8010dc4 <disk_ioctl>
 80111b2:	4603      	mov	r3, r0
 80111b4:	2b00      	cmp	r3, #0
 80111b6:	d001      	beq.n	80111bc <find_volume+0xe4>
 80111b8:	2301      	movs	r3, #1
 80111ba:	e206      	b.n	80115ca <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80111bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111be:	899b      	ldrh	r3, [r3, #12]
 80111c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80111c4:	d80d      	bhi.n	80111e2 <find_volume+0x10a>
 80111c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111c8:	899b      	ldrh	r3, [r3, #12]
 80111ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80111ce:	d308      	bcc.n	80111e2 <find_volume+0x10a>
 80111d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d2:	899b      	ldrh	r3, [r3, #12]
 80111d4:	461a      	mov	r2, r3
 80111d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111d8:	899b      	ldrh	r3, [r3, #12]
 80111da:	3b01      	subs	r3, #1
 80111dc:	4013      	ands	r3, r2
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d001      	beq.n	80111e6 <find_volume+0x10e>
 80111e2:	2301      	movs	r3, #1
 80111e4:	e1f1      	b.n	80115ca <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80111e6:	2300      	movs	r3, #0
 80111e8:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80111ea:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80111ec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80111ee:	f7ff ff1d 	bl	801102c <check_fs>
 80111f2:	4603      	mov	r3, r0
 80111f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80111f8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80111fc:	2b02      	cmp	r3, #2
 80111fe:	d149      	bne.n	8011294 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8011200:	2300      	movs	r3, #0
 8011202:	643b      	str	r3, [r7, #64]	; 0x40
 8011204:	e01e      	b.n	8011244 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8011206:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011208:	f103 0238 	add.w	r2, r3, #56	; 0x38
 801120c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801120e:	011b      	lsls	r3, r3, #4
 8011210:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8011214:	4413      	add	r3, r2
 8011216:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8011218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801121a:	3304      	adds	r3, #4
 801121c:	781b      	ldrb	r3, [r3, #0]
 801121e:	2b00      	cmp	r3, #0
 8011220:	d006      	beq.n	8011230 <find_volume+0x158>
 8011222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011224:	3308      	adds	r3, #8
 8011226:	4618      	mov	r0, r3
 8011228:	f7ff fe02 	bl	8010e30 <ld_dword>
 801122c:	4602      	mov	r2, r0
 801122e:	e000      	b.n	8011232 <find_volume+0x15a>
 8011230:	2200      	movs	r2, #0
 8011232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011234:	009b      	lsls	r3, r3, #2
 8011236:	3358      	adds	r3, #88	; 0x58
 8011238:	443b      	add	r3, r7
 801123a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801123e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011240:	3301      	adds	r3, #1
 8011242:	643b      	str	r3, [r7, #64]	; 0x40
 8011244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011246:	2b03      	cmp	r3, #3
 8011248:	d9dd      	bls.n	8011206 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 801124a:	2300      	movs	r3, #0
 801124c:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801124e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011250:	2b00      	cmp	r3, #0
 8011252:	d002      	beq.n	801125a <find_volume+0x182>
 8011254:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011256:	3b01      	subs	r3, #1
 8011258:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 801125a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801125c:	009b      	lsls	r3, r3, #2
 801125e:	3358      	adds	r3, #88	; 0x58
 8011260:	443b      	add	r3, r7
 8011262:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8011266:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8011268:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801126a:	2b00      	cmp	r3, #0
 801126c:	d005      	beq.n	801127a <find_volume+0x1a2>
 801126e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8011270:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011272:	f7ff fedb 	bl	801102c <check_fs>
 8011276:	4603      	mov	r3, r0
 8011278:	e000      	b.n	801127c <find_volume+0x1a4>
 801127a:	2303      	movs	r3, #3
 801127c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8011280:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011284:	2b01      	cmp	r3, #1
 8011286:	d905      	bls.n	8011294 <find_volume+0x1bc>
 8011288:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801128a:	3301      	adds	r3, #1
 801128c:	643b      	str	r3, [r7, #64]	; 0x40
 801128e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011290:	2b03      	cmp	r3, #3
 8011292:	d9e2      	bls.n	801125a <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8011294:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011298:	2b04      	cmp	r3, #4
 801129a:	d101      	bne.n	80112a0 <find_volume+0x1c8>
 801129c:	2301      	movs	r3, #1
 801129e:	e194      	b.n	80115ca <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80112a0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80112a4:	2b01      	cmp	r3, #1
 80112a6:	d901      	bls.n	80112ac <find_volume+0x1d4>
 80112a8:	230d      	movs	r3, #13
 80112aa:	e18e      	b.n	80115ca <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80112ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ae:	3338      	adds	r3, #56	; 0x38
 80112b0:	330b      	adds	r3, #11
 80112b2:	4618      	mov	r0, r3
 80112b4:	f7ff fda4 	bl	8010e00 <ld_word>
 80112b8:	4603      	mov	r3, r0
 80112ba:	461a      	mov	r2, r3
 80112bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112be:	899b      	ldrh	r3, [r3, #12]
 80112c0:	429a      	cmp	r2, r3
 80112c2:	d001      	beq.n	80112c8 <find_volume+0x1f0>
 80112c4:	230d      	movs	r3, #13
 80112c6:	e180      	b.n	80115ca <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80112c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ca:	3338      	adds	r3, #56	; 0x38
 80112cc:	3316      	adds	r3, #22
 80112ce:	4618      	mov	r0, r3
 80112d0:	f7ff fd96 	bl	8010e00 <ld_word>
 80112d4:	4603      	mov	r3, r0
 80112d6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80112d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80112da:	2b00      	cmp	r3, #0
 80112dc:	d106      	bne.n	80112ec <find_volume+0x214>
 80112de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112e0:	3338      	adds	r3, #56	; 0x38
 80112e2:	3324      	adds	r3, #36	; 0x24
 80112e4:	4618      	mov	r0, r3
 80112e6:	f7ff fda3 	bl	8010e30 <ld_dword>
 80112ea:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80112ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80112f0:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80112f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112f4:	f893 2048 	ldrb.w	r2, [r3, #72]	; 0x48
 80112f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fa:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80112fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80112fe:	789b      	ldrb	r3, [r3, #2]
 8011300:	2b01      	cmp	r3, #1
 8011302:	d005      	beq.n	8011310 <find_volume+0x238>
 8011304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011306:	789b      	ldrb	r3, [r3, #2]
 8011308:	2b02      	cmp	r3, #2
 801130a:	d001      	beq.n	8011310 <find_volume+0x238>
 801130c:	230d      	movs	r3, #13
 801130e:	e15c      	b.n	80115ca <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8011310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011312:	789b      	ldrb	r3, [r3, #2]
 8011314:	461a      	mov	r2, r3
 8011316:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011318:	fb02 f303 	mul.w	r3, r2, r3
 801131c:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 801131e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8011324:	b29a      	uxth	r2, r3
 8011326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011328:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 801132a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801132c:	895b      	ldrh	r3, [r3, #10]
 801132e:	2b00      	cmp	r3, #0
 8011330:	d008      	beq.n	8011344 <find_volume+0x26c>
 8011332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011334:	895b      	ldrh	r3, [r3, #10]
 8011336:	461a      	mov	r2, r3
 8011338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801133a:	895b      	ldrh	r3, [r3, #10]
 801133c:	3b01      	subs	r3, #1
 801133e:	4013      	ands	r3, r2
 8011340:	2b00      	cmp	r3, #0
 8011342:	d001      	beq.n	8011348 <find_volume+0x270>
 8011344:	230d      	movs	r3, #13
 8011346:	e140      	b.n	80115ca <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8011348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801134a:	3338      	adds	r3, #56	; 0x38
 801134c:	3311      	adds	r3, #17
 801134e:	4618      	mov	r0, r3
 8011350:	f7ff fd56 	bl	8010e00 <ld_word>
 8011354:	4603      	mov	r3, r0
 8011356:	461a      	mov	r2, r3
 8011358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135a:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 801135c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801135e:	891b      	ldrh	r3, [r3, #8]
 8011360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011362:	8992      	ldrh	r2, [r2, #12]
 8011364:	0952      	lsrs	r2, r2, #5
 8011366:	b292      	uxth	r2, r2
 8011368:	fbb3 f1f2 	udiv	r1, r3, r2
 801136c:	fb01 f202 	mul.w	r2, r1, r2
 8011370:	1a9b      	subs	r3, r3, r2
 8011372:	b29b      	uxth	r3, r3
 8011374:	2b00      	cmp	r3, #0
 8011376:	d003      	beq.n	8011380 <find_volume+0x2a8>
 8011378:	230d      	movs	r3, #13
 801137a:	e126      	b.n	80115ca <find_volume+0x4f2>
 801137c:	200016cc 	.word	0x200016cc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8011380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011382:	3338      	adds	r3, #56	; 0x38
 8011384:	3313      	adds	r3, #19
 8011386:	4618      	mov	r0, r3
 8011388:	f7ff fd3a 	bl	8010e00 <ld_word>
 801138c:	4603      	mov	r3, r0
 801138e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8011390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011392:	2b00      	cmp	r3, #0
 8011394:	d106      	bne.n	80113a4 <find_volume+0x2cc>
 8011396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011398:	3338      	adds	r3, #56	; 0x38
 801139a:	3320      	adds	r3, #32
 801139c:	4618      	mov	r0, r3
 801139e:	f7ff fd47 	bl	8010e30 <ld_dword>
 80113a2:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80113a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80113a6:	3338      	adds	r3, #56	; 0x38
 80113a8:	330e      	adds	r3, #14
 80113aa:	4618      	mov	r0, r3
 80113ac:	f7ff fd28 	bl	8010e00 <ld_word>
 80113b0:	4603      	mov	r3, r0
 80113b2:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80113b4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80113b6:	2b00      	cmp	r3, #0
 80113b8:	d101      	bne.n	80113be <find_volume+0x2e6>
 80113ba:	230d      	movs	r3, #13
 80113bc:	e105      	b.n	80115ca <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80113be:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80113c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80113c2:	4413      	add	r3, r2
 80113c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113c6:	8911      	ldrh	r1, [r2, #8]
 80113c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113ca:	8992      	ldrh	r2, [r2, #12]
 80113cc:	0952      	lsrs	r2, r2, #5
 80113ce:	b292      	uxth	r2, r2
 80113d0:	fbb1 f2f2 	udiv	r2, r1, r2
 80113d4:	b292      	uxth	r2, r2
 80113d6:	4413      	add	r3, r2
 80113d8:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80113da:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113de:	429a      	cmp	r2, r3
 80113e0:	d201      	bcs.n	80113e6 <find_volume+0x30e>
 80113e2:	230d      	movs	r3, #13
 80113e4:	e0f1      	b.n	80115ca <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80113e6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80113e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80113ea:	1ad3      	subs	r3, r2, r3
 80113ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80113ee:	8952      	ldrh	r2, [r2, #10]
 80113f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80113f4:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80113f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80113f8:	2b00      	cmp	r3, #0
 80113fa:	d101      	bne.n	8011400 <find_volume+0x328>
 80113fc:	230d      	movs	r3, #13
 80113fe:	e0e4      	b.n	80115ca <find_volume+0x4f2>
		fmt = FS_FAT32;
 8011400:	2303      	movs	r3, #3
 8011402:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8011406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011408:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801140c:	4293      	cmp	r3, r2
 801140e:	d802      	bhi.n	8011416 <find_volume+0x33e>
 8011410:	2302      	movs	r3, #2
 8011412:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8011416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011418:	f640 72f5 	movw	r2, #4085	; 0xff5
 801141c:	4293      	cmp	r3, r2
 801141e:	d802      	bhi.n	8011426 <find_volume+0x34e>
 8011420:	2301      	movs	r3, #1
 8011422:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8011426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011428:	1c9a      	adds	r2, r3, #2
 801142a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801142c:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 801142e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011430:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011432:	625a      	str	r2, [r3, #36]	; 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8011434:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8011436:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011438:	441a      	add	r2, r3
 801143a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801143c:	629a      	str	r2, [r3, #40]	; 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 801143e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8011440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011442:	441a      	add	r2, r3
 8011444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011446:	631a      	str	r2, [r3, #48]	; 0x30
		if (fmt == FS_FAT32) {
 8011448:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801144c:	2b03      	cmp	r3, #3
 801144e:	d11e      	bne.n	801148e <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8011450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011452:	3338      	adds	r3, #56	; 0x38
 8011454:	332a      	adds	r3, #42	; 0x2a
 8011456:	4618      	mov	r0, r3
 8011458:	f7ff fcd2 	bl	8010e00 <ld_word>
 801145c:	4603      	mov	r3, r0
 801145e:	2b00      	cmp	r3, #0
 8011460:	d001      	beq.n	8011466 <find_volume+0x38e>
 8011462:	230d      	movs	r3, #13
 8011464:	e0b1      	b.n	80115ca <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8011466:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011468:	891b      	ldrh	r3, [r3, #8]
 801146a:	2b00      	cmp	r3, #0
 801146c:	d001      	beq.n	8011472 <find_volume+0x39a>
 801146e:	230d      	movs	r3, #13
 8011470:	e0ab      	b.n	80115ca <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8011472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011474:	3338      	adds	r3, #56	; 0x38
 8011476:	332c      	adds	r3, #44	; 0x2c
 8011478:	4618      	mov	r0, r3
 801147a:	f7ff fcd9 	bl	8010e30 <ld_dword>
 801147e:	4602      	mov	r2, r0
 8011480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011482:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8011484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011486:	69db      	ldr	r3, [r3, #28]
 8011488:	009b      	lsls	r3, r3, #2
 801148a:	647b      	str	r3, [r7, #68]	; 0x44
 801148c:	e01f      	b.n	80114ce <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 801148e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011490:	891b      	ldrh	r3, [r3, #8]
 8011492:	2b00      	cmp	r3, #0
 8011494:	d101      	bne.n	801149a <find_volume+0x3c2>
 8011496:	230d      	movs	r3, #13
 8011498:	e097      	b.n	80115ca <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801149a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801149c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801149e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114a0:	441a      	add	r2, r3
 80114a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114a4:	62da      	str	r2, [r3, #44]	; 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80114a6:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80114aa:	2b02      	cmp	r3, #2
 80114ac:	d103      	bne.n	80114b6 <find_volume+0x3de>
 80114ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b0:	69db      	ldr	r3, [r3, #28]
 80114b2:	005b      	lsls	r3, r3, #1
 80114b4:	e00a      	b.n	80114cc <find_volume+0x3f4>
 80114b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b8:	69da      	ldr	r2, [r3, #28]
 80114ba:	4613      	mov	r3, r2
 80114bc:	005b      	lsls	r3, r3, #1
 80114be:	4413      	add	r3, r2
 80114c0:	085a      	lsrs	r2, r3, #1
 80114c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114c4:	69db      	ldr	r3, [r3, #28]
 80114c6:	f003 0301 	and.w	r3, r3, #1
 80114ca:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80114cc:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80114ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d0:	6a1a      	ldr	r2, [r3, #32]
 80114d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114d4:	899b      	ldrh	r3, [r3, #12]
 80114d6:	4619      	mov	r1, r3
 80114d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114da:	440b      	add	r3, r1
 80114dc:	3b01      	subs	r3, #1
 80114de:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80114e0:	8989      	ldrh	r1, [r1, #12]
 80114e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80114e6:	429a      	cmp	r2, r3
 80114e8:	d201      	bcs.n	80114ee <find_volume+0x416>
 80114ea:	230d      	movs	r3, #13
 80114ec:	e06d      	b.n	80115ca <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80114ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f0:	f04f 32ff 	mov.w	r2, #4294967295
 80114f4:	619a      	str	r2, [r3, #24]
 80114f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114f8:	699a      	ldr	r2, [r3, #24]
 80114fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114fc:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 80114fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011500:	2280      	movs	r2, #128	; 0x80
 8011502:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8011504:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8011508:	2b03      	cmp	r3, #3
 801150a:	d149      	bne.n	80115a0 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 801150c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801150e:	3338      	adds	r3, #56	; 0x38
 8011510:	3330      	adds	r3, #48	; 0x30
 8011512:	4618      	mov	r0, r3
 8011514:	f7ff fc74 	bl	8010e00 <ld_word>
 8011518:	4603      	mov	r3, r0
 801151a:	2b01      	cmp	r3, #1
 801151c:	d140      	bne.n	80115a0 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 801151e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011520:	3301      	adds	r3, #1
 8011522:	4619      	mov	r1, r3
 8011524:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8011526:	f7ff fd0f 	bl	8010f48 <move_window>
 801152a:	4603      	mov	r3, r0
 801152c:	2b00      	cmp	r3, #0
 801152e:	d137      	bne.n	80115a0 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8011530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011532:	2200      	movs	r2, #0
 8011534:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8011536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011538:	3338      	adds	r3, #56	; 0x38
 801153a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 801153e:	4618      	mov	r0, r3
 8011540:	f7ff fc5e 	bl	8010e00 <ld_word>
 8011544:	4603      	mov	r3, r0
 8011546:	461a      	mov	r2, r3
 8011548:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801154c:	429a      	cmp	r2, r3
 801154e:	d127      	bne.n	80115a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8011550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011552:	3338      	adds	r3, #56	; 0x38
 8011554:	4618      	mov	r0, r3
 8011556:	f7ff fc6b 	bl	8010e30 <ld_dword>
 801155a:	4603      	mov	r3, r0
 801155c:	4a1d      	ldr	r2, [pc, #116]	; (80115d4 <find_volume+0x4fc>)
 801155e:	4293      	cmp	r3, r2
 8011560:	d11e      	bne.n	80115a0 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8011562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011564:	3338      	adds	r3, #56	; 0x38
 8011566:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 801156a:	4618      	mov	r0, r3
 801156c:	f7ff fc60 	bl	8010e30 <ld_dword>
 8011570:	4603      	mov	r3, r0
 8011572:	4a19      	ldr	r2, [pc, #100]	; (80115d8 <find_volume+0x500>)
 8011574:	4293      	cmp	r3, r2
 8011576:	d113      	bne.n	80115a0 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8011578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801157a:	3338      	adds	r3, #56	; 0x38
 801157c:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8011580:	4618      	mov	r0, r3
 8011582:	f7ff fc55 	bl	8010e30 <ld_dword>
 8011586:	4602      	mov	r2, r0
 8011588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158a:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 801158c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801158e:	3338      	adds	r3, #56	; 0x38
 8011590:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8011594:	4618      	mov	r0, r3
 8011596:	f7ff fc4b 	bl	8010e30 <ld_dword>
 801159a:	4602      	mov	r2, r0
 801159c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801159e:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80115a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115a2:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80115a6:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80115a8:	4b0c      	ldr	r3, [pc, #48]	; (80115dc <find_volume+0x504>)
 80115aa:	881b      	ldrh	r3, [r3, #0]
 80115ac:	3301      	adds	r3, #1
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	4b0a      	ldr	r3, [pc, #40]	; (80115dc <find_volume+0x504>)
 80115b2:	801a      	strh	r2, [r3, #0]
 80115b4:	4b09      	ldr	r3, [pc, #36]	; (80115dc <find_volume+0x504>)
 80115b6:	881a      	ldrh	r2, [r3, #0]
 80115b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115ba:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80115bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80115be:	4a08      	ldr	r2, [pc, #32]	; (80115e0 <find_volume+0x508>)
 80115c0:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80115c2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80115c4:	f7ff fc58 	bl	8010e78 <clear_lock>
#endif
	return FR_OK;
 80115c8:	2300      	movs	r3, #0
}
 80115ca:	4618      	mov	r0, r3
 80115cc:	3758      	adds	r7, #88	; 0x58
 80115ce:	46bd      	mov	sp, r7
 80115d0:	bd80      	pop	{r7, pc}
 80115d2:	bf00      	nop
 80115d4:	41615252 	.word	0x41615252
 80115d8:	61417272 	.word	0x61417272
 80115dc:	200016d0 	.word	0x200016d0
 80115e0:	200016f4 	.word	0x200016f4

080115e4 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80115e4:	b580      	push	{r7, lr}
 80115e6:	b088      	sub	sp, #32
 80115e8:	af00      	add	r7, sp, #0
 80115ea:	60f8      	str	r0, [r7, #12]
 80115ec:	60b9      	str	r1, [r7, #8]
 80115ee:	4613      	mov	r3, r2
 80115f0:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80115f2:	68bb      	ldr	r3, [r7, #8]
 80115f4:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80115f6:	f107 0310 	add.w	r3, r7, #16
 80115fa:	4618      	mov	r0, r3
 80115fc:	f7ff fcd1 	bl	8010fa2 <get_ldnumber>
 8011600:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8011602:	69fb      	ldr	r3, [r7, #28]
 8011604:	2b00      	cmp	r3, #0
 8011606:	da01      	bge.n	801160c <f_mount+0x28>
 8011608:	230b      	movs	r3, #11
 801160a:	e02b      	b.n	8011664 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801160c:	4a17      	ldr	r2, [pc, #92]	; (801166c <f_mount+0x88>)
 801160e:	69fb      	ldr	r3, [r7, #28]
 8011610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011614:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8011616:	69bb      	ldr	r3, [r7, #24]
 8011618:	2b00      	cmp	r3, #0
 801161a:	d005      	beq.n	8011628 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801161c:	69b8      	ldr	r0, [r7, #24]
 801161e:	f7ff fc2b 	bl	8010e78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8011622:	69bb      	ldr	r3, [r7, #24]
 8011624:	2200      	movs	r2, #0
 8011626:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8011628:	68fb      	ldr	r3, [r7, #12]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d002      	beq.n	8011634 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801162e:	68fb      	ldr	r3, [r7, #12]
 8011630:	2200      	movs	r2, #0
 8011632:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8011634:	68fa      	ldr	r2, [r7, #12]
 8011636:	490d      	ldr	r1, [pc, #52]	; (801166c <f_mount+0x88>)
 8011638:	69fb      	ldr	r3, [r7, #28]
 801163a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	2b00      	cmp	r3, #0
 8011642:	d002      	beq.n	801164a <f_mount+0x66>
 8011644:	79fb      	ldrb	r3, [r7, #7]
 8011646:	2b01      	cmp	r3, #1
 8011648:	d001      	beq.n	801164e <f_mount+0x6a>
 801164a:	2300      	movs	r3, #0
 801164c:	e00a      	b.n	8011664 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801164e:	f107 010c 	add.w	r1, r7, #12
 8011652:	f107 0308 	add.w	r3, r7, #8
 8011656:	2200      	movs	r2, #0
 8011658:	4618      	mov	r0, r3
 801165a:	f7ff fd3d 	bl	80110d8 <find_volume>
 801165e:	4603      	mov	r3, r0
 8011660:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8011662:	7dfb      	ldrb	r3, [r7, #23]
}
 8011664:	4618      	mov	r0, r3
 8011666:	3720      	adds	r7, #32
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	200016cc 	.word	0x200016cc

08011670 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011670:	b480      	push	{r7}
 8011672:	b087      	sub	sp, #28
 8011674:	af00      	add	r7, sp, #0
 8011676:	60f8      	str	r0, [r7, #12]
 8011678:	60b9      	str	r1, [r7, #8]
 801167a:	4613      	mov	r3, r2
 801167c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 801167e:	2301      	movs	r3, #1
 8011680:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8011682:	2300      	movs	r3, #0
 8011684:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8011686:	4b1f      	ldr	r3, [pc, #124]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 8011688:	7a5b      	ldrb	r3, [r3, #9]
 801168a:	b2db      	uxtb	r3, r3
 801168c:	2b00      	cmp	r3, #0
 801168e:	d131      	bne.n	80116f4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011690:	4b1c      	ldr	r3, [pc, #112]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 8011692:	7a5b      	ldrb	r3, [r3, #9]
 8011694:	b2db      	uxtb	r3, r3
 8011696:	461a      	mov	r2, r3
 8011698:	4b1a      	ldr	r3, [pc, #104]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 801169a:	2100      	movs	r1, #0
 801169c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801169e:	4b19      	ldr	r3, [pc, #100]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116a0:	7a5b      	ldrb	r3, [r3, #9]
 80116a2:	b2db      	uxtb	r3, r3
 80116a4:	4a17      	ldr	r2, [pc, #92]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4413      	add	r3, r2
 80116aa:	68fa      	ldr	r2, [r7, #12]
 80116ac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80116ae:	4b15      	ldr	r3, [pc, #84]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116b0:	7a5b      	ldrb	r3, [r3, #9]
 80116b2:	b2db      	uxtb	r3, r3
 80116b4:	461a      	mov	r2, r3
 80116b6:	4b13      	ldr	r3, [pc, #76]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116b8:	4413      	add	r3, r2
 80116ba:	79fa      	ldrb	r2, [r7, #7]
 80116bc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80116be:	4b11      	ldr	r3, [pc, #68]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116c0:	7a5b      	ldrb	r3, [r3, #9]
 80116c2:	b2db      	uxtb	r3, r3
 80116c4:	1c5a      	adds	r2, r3, #1
 80116c6:	b2d1      	uxtb	r1, r2
 80116c8:	4a0e      	ldr	r2, [pc, #56]	; (8011704 <FATFS_LinkDriverEx+0x94>)
 80116ca:	7251      	strb	r1, [r2, #9]
 80116cc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80116ce:	7dbb      	ldrb	r3, [r7, #22]
 80116d0:	3330      	adds	r3, #48	; 0x30
 80116d2:	b2da      	uxtb	r2, r3
 80116d4:	68bb      	ldr	r3, [r7, #8]
 80116d6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80116d8:	68bb      	ldr	r3, [r7, #8]
 80116da:	3301      	adds	r3, #1
 80116dc:	223a      	movs	r2, #58	; 0x3a
 80116de:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80116e0:	68bb      	ldr	r3, [r7, #8]
 80116e2:	3302      	adds	r3, #2
 80116e4:	222f      	movs	r2, #47	; 0x2f
 80116e6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80116e8:	68bb      	ldr	r3, [r7, #8]
 80116ea:	3303      	adds	r3, #3
 80116ec:	2200      	movs	r2, #0
 80116ee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80116f0:	2300      	movs	r3, #0
 80116f2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80116f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80116f6:	4618      	mov	r0, r3
 80116f8:	371c      	adds	r7, #28
 80116fa:	46bd      	mov	sp, r7
 80116fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011700:	4770      	bx	lr
 8011702:	bf00      	nop
 8011704:	200018f4 	.word	0x200018f4

08011708 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011708:	b580      	push	{r7, lr}
 801170a:	b082      	sub	sp, #8
 801170c:	af00      	add	r7, sp, #0
 801170e:	6078      	str	r0, [r7, #4]
 8011710:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8011712:	2200      	movs	r2, #0
 8011714:	6839      	ldr	r1, [r7, #0]
 8011716:	6878      	ldr	r0, [r7, #4]
 8011718:	f7ff ffaa 	bl	8011670 <FATFS_LinkDriverEx>
 801171c:	4603      	mov	r3, r0
}
 801171e:	4618      	mov	r0, r3
 8011720:	3708      	adds	r7, #8
 8011722:	46bd      	mov	sp, r7
 8011724:	bd80      	pop	{r7, pc}
	...

08011728 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 801172c:	2201      	movs	r2, #1
 801172e:	4912      	ldr	r1, [pc, #72]	; (8011778 <MX_USB_DEVICE_Init+0x50>)
 8011730:	4812      	ldr	r0, [pc, #72]	; (801177c <MX_USB_DEVICE_Init+0x54>)
 8011732:	f7fb ffc3 	bl	800d6bc <USBD_Init>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d001      	beq.n	8011740 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801173c:	f7ef ffea 	bl	8001714 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8011740:	490f      	ldr	r1, [pc, #60]	; (8011780 <MX_USB_DEVICE_Init+0x58>)
 8011742:	480e      	ldr	r0, [pc, #56]	; (801177c <MX_USB_DEVICE_Init+0x54>)
 8011744:	f7fb ffea 	bl	800d71c <USBD_RegisterClass>
 8011748:	4603      	mov	r3, r0
 801174a:	2b00      	cmp	r3, #0
 801174c:	d001      	beq.n	8011752 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 801174e:	f7ef ffe1 	bl	8001714 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8011752:	490c      	ldr	r1, [pc, #48]	; (8011784 <MX_USB_DEVICE_Init+0x5c>)
 8011754:	4809      	ldr	r0, [pc, #36]	; (801177c <MX_USB_DEVICE_Init+0x54>)
 8011756:	f7fb ff21 	bl	800d59c <USBD_CDC_RegisterInterface>
 801175a:	4603      	mov	r3, r0
 801175c:	2b00      	cmp	r3, #0
 801175e:	d001      	beq.n	8011764 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011760:	f7ef ffd8 	bl	8001714 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8011764:	4805      	ldr	r0, [pc, #20]	; (801177c <MX_USB_DEVICE_Init+0x54>)
 8011766:	f7fc f80f 	bl	800d788 <USBD_Start>
 801176a:	4603      	mov	r3, r0
 801176c:	2b00      	cmp	r3, #0
 801176e:	d001      	beq.n	8011774 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011770:	f7ef ffd0 	bl	8001714 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8011774:	bf00      	nop
 8011776:	bd80      	pop	{r7, pc}
 8011778:	200000cc 	.word	0x200000cc
 801177c:	20001900 	.word	0x20001900
 8011780:	20000018 	.word	0x20000018
 8011784:	200000b8 	.word	0x200000b8

08011788 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8011788:	b580      	push	{r7, lr}
 801178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 801178c:	2200      	movs	r2, #0
 801178e:	4905      	ldr	r1, [pc, #20]	; (80117a4 <CDC_Init_HS+0x1c>)
 8011790:	4805      	ldr	r0, [pc, #20]	; (80117a8 <CDC_Init_HS+0x20>)
 8011792:	f7fb ff1d 	bl	800d5d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8011796:	4905      	ldr	r1, [pc, #20]	; (80117ac <CDC_Init_HS+0x24>)
 8011798:	4803      	ldr	r0, [pc, #12]	; (80117a8 <CDC_Init_HS+0x20>)
 801179a:	f7fb ff3b 	bl	800d614 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801179e:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80117a0:	4618      	mov	r0, r3
 80117a2:	bd80      	pop	{r7, pc}
 80117a4:	200023dc 	.word	0x200023dc
 80117a8:	20001900 	.word	0x20001900
 80117ac:	20001bdc 	.word	0x20001bdc

080117b0 <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 80117b0:	b480      	push	{r7}
 80117b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 80117b4:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 80117b6:	4618      	mov	r0, r3
 80117b8:	46bd      	mov	sp, r7
 80117ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117be:	4770      	bx	lr

080117c0 <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80117c0:	b480      	push	{r7}
 80117c2:	b083      	sub	sp, #12
 80117c4:	af00      	add	r7, sp, #0
 80117c6:	4603      	mov	r3, r0
 80117c8:	6039      	str	r1, [r7, #0]
 80117ca:	71fb      	strb	r3, [r7, #7]
 80117cc:	4613      	mov	r3, r2
 80117ce:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 80117d0:	79fb      	ldrb	r3, [r7, #7]
 80117d2:	2b23      	cmp	r3, #35	; 0x23
 80117d4:	d84a      	bhi.n	801186c <CDC_Control_HS+0xac>
 80117d6:	a201      	add	r2, pc, #4	; (adr r2, 80117dc <CDC_Control_HS+0x1c>)
 80117d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80117dc:	0801186d 	.word	0x0801186d
 80117e0:	0801186d 	.word	0x0801186d
 80117e4:	0801186d 	.word	0x0801186d
 80117e8:	0801186d 	.word	0x0801186d
 80117ec:	0801186d 	.word	0x0801186d
 80117f0:	0801186d 	.word	0x0801186d
 80117f4:	0801186d 	.word	0x0801186d
 80117f8:	0801186d 	.word	0x0801186d
 80117fc:	0801186d 	.word	0x0801186d
 8011800:	0801186d 	.word	0x0801186d
 8011804:	0801186d 	.word	0x0801186d
 8011808:	0801186d 	.word	0x0801186d
 801180c:	0801186d 	.word	0x0801186d
 8011810:	0801186d 	.word	0x0801186d
 8011814:	0801186d 	.word	0x0801186d
 8011818:	0801186d 	.word	0x0801186d
 801181c:	0801186d 	.word	0x0801186d
 8011820:	0801186d 	.word	0x0801186d
 8011824:	0801186d 	.word	0x0801186d
 8011828:	0801186d 	.word	0x0801186d
 801182c:	0801186d 	.word	0x0801186d
 8011830:	0801186d 	.word	0x0801186d
 8011834:	0801186d 	.word	0x0801186d
 8011838:	0801186d 	.word	0x0801186d
 801183c:	0801186d 	.word	0x0801186d
 8011840:	0801186d 	.word	0x0801186d
 8011844:	0801186d 	.word	0x0801186d
 8011848:	0801186d 	.word	0x0801186d
 801184c:	0801186d 	.word	0x0801186d
 8011850:	0801186d 	.word	0x0801186d
 8011854:	0801186d 	.word	0x0801186d
 8011858:	0801186d 	.word	0x0801186d
 801185c:	0801186d 	.word	0x0801186d
 8011860:	0801186d 	.word	0x0801186d
 8011864:	0801186d 	.word	0x0801186d
 8011868:	0801186d 	.word	0x0801186d
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 801186c:	bf00      	nop
  }

  return (USBD_OK);
 801186e:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8011870:	4618      	mov	r0, r3
 8011872:	370c      	adds	r7, #12
 8011874:	46bd      	mov	sp, r7
 8011876:	f85d 7b04 	ldr.w	r7, [sp], #4
 801187a:	4770      	bx	lr

0801187c <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b082      	sub	sp, #8
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8011886:	6879      	ldr	r1, [r7, #4]
 8011888:	4805      	ldr	r0, [pc, #20]	; (80118a0 <CDC_Receive_HS+0x24>)
 801188a:	f7fb fec3 	bl	800d614 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 801188e:	4804      	ldr	r0, [pc, #16]	; (80118a0 <CDC_Receive_HS+0x24>)
 8011890:	f7fb fede 	bl	800d650 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011894:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8011896:	4618      	mov	r0, r3
 8011898:	3708      	adds	r7, #8
 801189a:	46bd      	mov	sp, r7
 801189c:	bd80      	pop	{r7, pc}
 801189e:	bf00      	nop
 80118a0:	20001900 	.word	0x20001900

080118a4 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80118a4:	b480      	push	{r7}
 80118a6:	b087      	sub	sp, #28
 80118a8:	af00      	add	r7, sp, #0
 80118aa:	60f8      	str	r0, [r7, #12]
 80118ac:	60b9      	str	r1, [r7, #8]
 80118ae:	4613      	mov	r3, r2
 80118b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80118b2:	2300      	movs	r3, #0
 80118b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 80118b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80118ba:	4618      	mov	r0, r3
 80118bc:	371c      	adds	r7, #28
 80118be:	46bd      	mov	sp, r7
 80118c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118c4:	4770      	bx	lr
	...

080118c8 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118c8:	b480      	push	{r7}
 80118ca:	b083      	sub	sp, #12
 80118cc:	af00      	add	r7, sp, #0
 80118ce:	4603      	mov	r3, r0
 80118d0:	6039      	str	r1, [r7, #0]
 80118d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	2212      	movs	r2, #18
 80118d8:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80118da:	4b03      	ldr	r3, [pc, #12]	; (80118e8 <USBD_HS_DeviceDescriptor+0x20>)
}
 80118dc:	4618      	mov	r0, r3
 80118de:	370c      	adds	r7, #12
 80118e0:	46bd      	mov	sp, r7
 80118e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118e6:	4770      	bx	lr
 80118e8:	200000ec 	.word	0x200000ec

080118ec <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80118ec:	b480      	push	{r7}
 80118ee:	b083      	sub	sp, #12
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	4603      	mov	r3, r0
 80118f4:	6039      	str	r1, [r7, #0]
 80118f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80118f8:	683b      	ldr	r3, [r7, #0]
 80118fa:	2204      	movs	r2, #4
 80118fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80118fe:	4b03      	ldr	r3, [pc, #12]	; (801190c <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8011900:	4618      	mov	r0, r3
 8011902:	370c      	adds	r7, #12
 8011904:	46bd      	mov	sp, r7
 8011906:	f85d 7b04 	ldr.w	r7, [sp], #4
 801190a:	4770      	bx	lr
 801190c:	2000010c 	.word	0x2000010c

08011910 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011910:	b580      	push	{r7, lr}
 8011912:	b082      	sub	sp, #8
 8011914:	af00      	add	r7, sp, #0
 8011916:	4603      	mov	r3, r0
 8011918:	6039      	str	r1, [r7, #0]
 801191a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801191c:	79fb      	ldrb	r3, [r7, #7]
 801191e:	2b00      	cmp	r3, #0
 8011920:	d105      	bne.n	801192e <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8011922:	683a      	ldr	r2, [r7, #0]
 8011924:	4907      	ldr	r1, [pc, #28]	; (8011944 <USBD_HS_ProductStrDescriptor+0x34>)
 8011926:	4808      	ldr	r0, [pc, #32]	; (8011948 <USBD_HS_ProductStrDescriptor+0x38>)
 8011928:	f7fd f904 	bl	800eb34 <USBD_GetString>
 801192c:	e004      	b.n	8011938 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 801192e:	683a      	ldr	r2, [r7, #0]
 8011930:	4904      	ldr	r1, [pc, #16]	; (8011944 <USBD_HS_ProductStrDescriptor+0x34>)
 8011932:	4805      	ldr	r0, [pc, #20]	; (8011948 <USBD_HS_ProductStrDescriptor+0x38>)
 8011934:	f7fd f8fe 	bl	800eb34 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011938:	4b02      	ldr	r3, [pc, #8]	; (8011944 <USBD_HS_ProductStrDescriptor+0x34>)
}
 801193a:	4618      	mov	r0, r3
 801193c:	3708      	adds	r7, #8
 801193e:	46bd      	mov	sp, r7
 8011940:	bd80      	pop	{r7, pc}
 8011942:	bf00      	nop
 8011944:	20002bdc 	.word	0x20002bdc
 8011948:	080152cc 	.word	0x080152cc

0801194c <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801194c:	b580      	push	{r7, lr}
 801194e:	b082      	sub	sp, #8
 8011950:	af00      	add	r7, sp, #0
 8011952:	4603      	mov	r3, r0
 8011954:	6039      	str	r1, [r7, #0]
 8011956:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011958:	683a      	ldr	r2, [r7, #0]
 801195a:	4904      	ldr	r1, [pc, #16]	; (801196c <USBD_HS_ManufacturerStrDescriptor+0x20>)
 801195c:	4804      	ldr	r0, [pc, #16]	; (8011970 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 801195e:	f7fd f8e9 	bl	800eb34 <USBD_GetString>
  return USBD_StrDesc;
 8011962:	4b02      	ldr	r3, [pc, #8]	; (801196c <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8011964:	4618      	mov	r0, r3
 8011966:	3708      	adds	r7, #8
 8011968:	46bd      	mov	sp, r7
 801196a:	bd80      	pop	{r7, pc}
 801196c:	20002bdc 	.word	0x20002bdc
 8011970:	080152e4 	.word	0x080152e4

08011974 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011974:	b580      	push	{r7, lr}
 8011976:	b082      	sub	sp, #8
 8011978:	af00      	add	r7, sp, #0
 801197a:	4603      	mov	r3, r0
 801197c:	6039      	str	r1, [r7, #0]
 801197e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011980:	683b      	ldr	r3, [r7, #0]
 8011982:	221a      	movs	r2, #26
 8011984:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8011986:	f000 f855 	bl	8011a34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 801198a:	4b02      	ldr	r3, [pc, #8]	; (8011994 <USBD_HS_SerialStrDescriptor+0x20>)
}
 801198c:	4618      	mov	r0, r3
 801198e:	3708      	adds	r7, #8
 8011990:	46bd      	mov	sp, r7
 8011992:	bd80      	pop	{r7, pc}
 8011994:	20000110 	.word	0x20000110

08011998 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011998:	b580      	push	{r7, lr}
 801199a:	b082      	sub	sp, #8
 801199c:	af00      	add	r7, sp, #0
 801199e:	4603      	mov	r3, r0
 80119a0:	6039      	str	r1, [r7, #0]
 80119a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80119a4:	79fb      	ldrb	r3, [r7, #7]
 80119a6:	2b00      	cmp	r3, #0
 80119a8:	d105      	bne.n	80119b6 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80119aa:	683a      	ldr	r2, [r7, #0]
 80119ac:	4907      	ldr	r1, [pc, #28]	; (80119cc <USBD_HS_ConfigStrDescriptor+0x34>)
 80119ae:	4808      	ldr	r0, [pc, #32]	; (80119d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 80119b0:	f7fd f8c0 	bl	800eb34 <USBD_GetString>
 80119b4:	e004      	b.n	80119c0 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80119b6:	683a      	ldr	r2, [r7, #0]
 80119b8:	4904      	ldr	r1, [pc, #16]	; (80119cc <USBD_HS_ConfigStrDescriptor+0x34>)
 80119ba:	4805      	ldr	r0, [pc, #20]	; (80119d0 <USBD_HS_ConfigStrDescriptor+0x38>)
 80119bc:	f7fd f8ba 	bl	800eb34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80119c0:	4b02      	ldr	r3, [pc, #8]	; (80119cc <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80119c2:	4618      	mov	r0, r3
 80119c4:	3708      	adds	r7, #8
 80119c6:	46bd      	mov	sp, r7
 80119c8:	bd80      	pop	{r7, pc}
 80119ca:	bf00      	nop
 80119cc:	20002bdc 	.word	0x20002bdc
 80119d0:	080152f8 	.word	0x080152f8

080119d4 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80119d4:	b580      	push	{r7, lr}
 80119d6:	b082      	sub	sp, #8
 80119d8:	af00      	add	r7, sp, #0
 80119da:	4603      	mov	r3, r0
 80119dc:	6039      	str	r1, [r7, #0]
 80119de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80119e0:	79fb      	ldrb	r3, [r7, #7]
 80119e2:	2b00      	cmp	r3, #0
 80119e4:	d105      	bne.n	80119f2 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80119e6:	683a      	ldr	r2, [r7, #0]
 80119e8:	4907      	ldr	r1, [pc, #28]	; (8011a08 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80119ea:	4808      	ldr	r0, [pc, #32]	; (8011a0c <USBD_HS_InterfaceStrDescriptor+0x38>)
 80119ec:	f7fd f8a2 	bl	800eb34 <USBD_GetString>
 80119f0:	e004      	b.n	80119fc <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80119f2:	683a      	ldr	r2, [r7, #0]
 80119f4:	4904      	ldr	r1, [pc, #16]	; (8011a08 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80119f6:	4805      	ldr	r0, [pc, #20]	; (8011a0c <USBD_HS_InterfaceStrDescriptor+0x38>)
 80119f8:	f7fd f89c 	bl	800eb34 <USBD_GetString>
  }
  return USBD_StrDesc;
 80119fc:	4b02      	ldr	r3, [pc, #8]	; (8011a08 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80119fe:	4618      	mov	r0, r3
 8011a00:	3708      	adds	r7, #8
 8011a02:	46bd      	mov	sp, r7
 8011a04:	bd80      	pop	{r7, pc}
 8011a06:	bf00      	nop
 8011a08:	20002bdc 	.word	0x20002bdc
 8011a0c:	08015304 	.word	0x08015304

08011a10 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011a10:	b480      	push	{r7}
 8011a12:	b083      	sub	sp, #12
 8011a14:	af00      	add	r7, sp, #0
 8011a16:	4603      	mov	r3, r0
 8011a18:	6039      	str	r1, [r7, #0]
 8011a1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 8011a1c:	683b      	ldr	r3, [r7, #0]
 8011a1e:	220c      	movs	r2, #12
 8011a20:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 8011a22:	4b03      	ldr	r3, [pc, #12]	; (8011a30 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 8011a24:	4618      	mov	r0, r3
 8011a26:	370c      	adds	r7, #12
 8011a28:	46bd      	mov	sp, r7
 8011a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a2e:	4770      	bx	lr
 8011a30:	20000100 	.word	0x20000100

08011a34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011a34:	b580      	push	{r7, lr}
 8011a36:	b084      	sub	sp, #16
 8011a38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8011a3a:	4b0f      	ldr	r3, [pc, #60]	; (8011a78 <Get_SerialNum+0x44>)
 8011a3c:	681b      	ldr	r3, [r3, #0]
 8011a3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011a40:	4b0e      	ldr	r3, [pc, #56]	; (8011a7c <Get_SerialNum+0x48>)
 8011a42:	681b      	ldr	r3, [r3, #0]
 8011a44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8011a46:	4b0e      	ldr	r3, [pc, #56]	; (8011a80 <Get_SerialNum+0x4c>)
 8011a48:	681b      	ldr	r3, [r3, #0]
 8011a4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011a4c:	68fa      	ldr	r2, [r7, #12]
 8011a4e:	687b      	ldr	r3, [r7, #4]
 8011a50:	4413      	add	r3, r2
 8011a52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011a54:	68fb      	ldr	r3, [r7, #12]
 8011a56:	2b00      	cmp	r3, #0
 8011a58:	d009      	beq.n	8011a6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011a5a:	2208      	movs	r2, #8
 8011a5c:	4909      	ldr	r1, [pc, #36]	; (8011a84 <Get_SerialNum+0x50>)
 8011a5e:	68f8      	ldr	r0, [r7, #12]
 8011a60:	f000 f814 	bl	8011a8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011a64:	2204      	movs	r2, #4
 8011a66:	4908      	ldr	r1, [pc, #32]	; (8011a88 <Get_SerialNum+0x54>)
 8011a68:	68b8      	ldr	r0, [r7, #8]
 8011a6a:	f000 f80f 	bl	8011a8c <IntToUnicode>
  }
}
 8011a6e:	bf00      	nop
 8011a70:	3710      	adds	r7, #16
 8011a72:	46bd      	mov	sp, r7
 8011a74:	bd80      	pop	{r7, pc}
 8011a76:	bf00      	nop
 8011a78:	1ff0f420 	.word	0x1ff0f420
 8011a7c:	1ff0f424 	.word	0x1ff0f424
 8011a80:	1ff0f428 	.word	0x1ff0f428
 8011a84:	20000112 	.word	0x20000112
 8011a88:	20000122 	.word	0x20000122

08011a8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011a8c:	b480      	push	{r7}
 8011a8e:	b087      	sub	sp, #28
 8011a90:	af00      	add	r7, sp, #0
 8011a92:	60f8      	str	r0, [r7, #12]
 8011a94:	60b9      	str	r1, [r7, #8]
 8011a96:	4613      	mov	r3, r2
 8011a98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011a9e:	2300      	movs	r3, #0
 8011aa0:	75fb      	strb	r3, [r7, #23]
 8011aa2:	e027      	b.n	8011af4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011aa4:	68fb      	ldr	r3, [r7, #12]
 8011aa6:	0f1b      	lsrs	r3, r3, #28
 8011aa8:	2b09      	cmp	r3, #9
 8011aaa:	d80b      	bhi.n	8011ac4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	0f1b      	lsrs	r3, r3, #28
 8011ab0:	b2da      	uxtb	r2, r3
 8011ab2:	7dfb      	ldrb	r3, [r7, #23]
 8011ab4:	005b      	lsls	r3, r3, #1
 8011ab6:	4619      	mov	r1, r3
 8011ab8:	68bb      	ldr	r3, [r7, #8]
 8011aba:	440b      	add	r3, r1
 8011abc:	3230      	adds	r2, #48	; 0x30
 8011abe:	b2d2      	uxtb	r2, r2
 8011ac0:	701a      	strb	r2, [r3, #0]
 8011ac2:	e00a      	b.n	8011ada <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	0f1b      	lsrs	r3, r3, #28
 8011ac8:	b2da      	uxtb	r2, r3
 8011aca:	7dfb      	ldrb	r3, [r7, #23]
 8011acc:	005b      	lsls	r3, r3, #1
 8011ace:	4619      	mov	r1, r3
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	440b      	add	r3, r1
 8011ad4:	3237      	adds	r2, #55	; 0x37
 8011ad6:	b2d2      	uxtb	r2, r2
 8011ad8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	011b      	lsls	r3, r3, #4
 8011ade:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011ae0:	7dfb      	ldrb	r3, [r7, #23]
 8011ae2:	005b      	lsls	r3, r3, #1
 8011ae4:	3301      	adds	r3, #1
 8011ae6:	68ba      	ldr	r2, [r7, #8]
 8011ae8:	4413      	add	r3, r2
 8011aea:	2200      	movs	r2, #0
 8011aec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011aee:	7dfb      	ldrb	r3, [r7, #23]
 8011af0:	3301      	adds	r3, #1
 8011af2:	75fb      	strb	r3, [r7, #23]
 8011af4:	7dfa      	ldrb	r2, [r7, #23]
 8011af6:	79fb      	ldrb	r3, [r7, #7]
 8011af8:	429a      	cmp	r2, r3
 8011afa:	d3d3      	bcc.n	8011aa4 <IntToUnicode+0x18>
  }
}
 8011afc:	bf00      	nop
 8011afe:	bf00      	nop
 8011b00:	371c      	adds	r7, #28
 8011b02:	46bd      	mov	sp, r7
 8011b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b08:	4770      	bx	lr
	...

08011b0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011b0c:	b580      	push	{r7, lr}
 8011b0e:	b0aa      	sub	sp, #168	; 0xa8
 8011b10:	af00      	add	r7, sp, #0
 8011b12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011b14:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011b18:	2200      	movs	r2, #0
 8011b1a:	601a      	str	r2, [r3, #0]
 8011b1c:	605a      	str	r2, [r3, #4]
 8011b1e:	609a      	str	r2, [r3, #8]
 8011b20:	60da      	str	r2, [r3, #12]
 8011b22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011b24:	f107 0310 	add.w	r3, r7, #16
 8011b28:	2284      	movs	r2, #132	; 0x84
 8011b2a:	2100      	movs	r1, #0
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	f000 fea9 	bl	8012884 <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 8011b32:	687b      	ldr	r3, [r7, #4]
 8011b34:	681b      	ldr	r3, [r3, #0]
 8011b36:	4a26      	ldr	r2, [pc, #152]	; (8011bd0 <HAL_PCD_MspInit+0xc4>)
 8011b38:	4293      	cmp	r3, r2
 8011b3a:	d145      	bne.n	8011bc8 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011b3c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011b40:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8011b42:	2300      	movs	r3, #0
 8011b44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011b48:	f107 0310 	add.w	r3, r7, #16
 8011b4c:	4618      	mov	r0, r3
 8011b4e:	f7f5 f887 	bl	8006c60 <HAL_RCCEx_PeriphCLKConfig>
 8011b52:	4603      	mov	r3, r0
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d001      	beq.n	8011b5c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8011b58:	f7ef fddc 	bl	8001714 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011b5c:	4b1d      	ldr	r3, [pc, #116]	; (8011bd4 <HAL_PCD_MspInit+0xc8>)
 8011b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b60:	4a1c      	ldr	r2, [pc, #112]	; (8011bd4 <HAL_PCD_MspInit+0xc8>)
 8011b62:	f043 0302 	orr.w	r3, r3, #2
 8011b66:	6313      	str	r3, [r2, #48]	; 0x30
 8011b68:	4b1a      	ldr	r3, [pc, #104]	; (8011bd4 <HAL_PCD_MspInit+0xc8>)
 8011b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011b6c:	f003 0302 	and.w	r3, r3, #2
 8011b70:	60fb      	str	r3, [r7, #12]
 8011b72:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8011b74:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8011b78:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011b7c:	2302      	movs	r3, #2
 8011b7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011b82:	2300      	movs	r3, #0
 8011b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011b88:	2303      	movs	r3, #3
 8011b8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8011b8e:	230c      	movs	r3, #12
 8011b90:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8011b94:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011b98:	4619      	mov	r1, r3
 8011b9a:	480f      	ldr	r0, [pc, #60]	; (8011bd8 <HAL_PCD_MspInit+0xcc>)
 8011b9c:	f7f1 f94e 	bl	8002e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011ba0:	4b0c      	ldr	r3, [pc, #48]	; (8011bd4 <HAL_PCD_MspInit+0xc8>)
 8011ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011ba4:	4a0b      	ldr	r2, [pc, #44]	; (8011bd4 <HAL_PCD_MspInit+0xc8>)
 8011ba6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011baa:	6313      	str	r3, [r2, #48]	; 0x30
 8011bac:	4b09      	ldr	r3, [pc, #36]	; (8011bd4 <HAL_PCD_MspInit+0xc8>)
 8011bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011bb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8011bb4:	60bb      	str	r3, [r7, #8]
 8011bb6:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8011bb8:	2200      	movs	r2, #0
 8011bba:	2100      	movs	r1, #0
 8011bbc:	204d      	movs	r0, #77	; 0x4d
 8011bbe:	f7f0 fe1c 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8011bc2:	204d      	movs	r0, #77	; 0x4d
 8011bc4:	f7f0 fe35 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011bc8:	bf00      	nop
 8011bca:	37a8      	adds	r7, #168	; 0xa8
 8011bcc:	46bd      	mov	sp, r7
 8011bce:	bd80      	pop	{r7, pc}
 8011bd0:	40040000 	.word	0x40040000
 8011bd4:	40023800 	.word	0x40023800
 8011bd8:	40020400 	.word	0x40020400

08011bdc <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b082      	sub	sp, #8
 8011be0:	af00      	add	r7, sp, #0
 8011be2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8011bf0:	4619      	mov	r1, r3
 8011bf2:	4610      	mov	r0, r2
 8011bf4:	f7fb fe15 	bl	800d822 <USBD_LL_SetupStage>
}
 8011bf8:	bf00      	nop
 8011bfa:	3708      	adds	r7, #8
 8011bfc:	46bd      	mov	sp, r7
 8011bfe:	bd80      	pop	{r7, pc}

08011c00 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c00:	b580      	push	{r7, lr}
 8011c02:	b082      	sub	sp, #8
 8011c04:	af00      	add	r7, sp, #0
 8011c06:	6078      	str	r0, [r7, #4]
 8011c08:	460b      	mov	r3, r1
 8011c0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011c12:	78fa      	ldrb	r2, [r7, #3]
 8011c14:	6879      	ldr	r1, [r7, #4]
 8011c16:	4613      	mov	r3, r2
 8011c18:	00db      	lsls	r3, r3, #3
 8011c1a:	4413      	add	r3, r2
 8011c1c:	009b      	lsls	r3, r3, #2
 8011c1e:	440b      	add	r3, r1
 8011c20:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8011c24:	681a      	ldr	r2, [r3, #0]
 8011c26:	78fb      	ldrb	r3, [r7, #3]
 8011c28:	4619      	mov	r1, r3
 8011c2a:	f7fb fe4f 	bl	800d8cc <USBD_LL_DataOutStage>
}
 8011c2e:	bf00      	nop
 8011c30:	3708      	adds	r7, #8
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bd80      	pop	{r7, pc}

08011c36 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c36:	b580      	push	{r7, lr}
 8011c38:	b082      	sub	sp, #8
 8011c3a:	af00      	add	r7, sp, #0
 8011c3c:	6078      	str	r0, [r7, #4]
 8011c3e:	460b      	mov	r3, r1
 8011c40:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8011c42:	687b      	ldr	r3, [r7, #4]
 8011c44:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011c48:	78fa      	ldrb	r2, [r7, #3]
 8011c4a:	6879      	ldr	r1, [r7, #4]
 8011c4c:	4613      	mov	r3, r2
 8011c4e:	00db      	lsls	r3, r3, #3
 8011c50:	4413      	add	r3, r2
 8011c52:	009b      	lsls	r3, r3, #2
 8011c54:	440b      	add	r3, r1
 8011c56:	334c      	adds	r3, #76	; 0x4c
 8011c58:	681a      	ldr	r2, [r3, #0]
 8011c5a:	78fb      	ldrb	r3, [r7, #3]
 8011c5c:	4619      	mov	r1, r3
 8011c5e:	f7fb fee8 	bl	800da32 <USBD_LL_DataInStage>
}
 8011c62:	bf00      	nop
 8011c64:	3708      	adds	r7, #8
 8011c66:	46bd      	mov	sp, r7
 8011c68:	bd80      	pop	{r7, pc}

08011c6a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c6a:	b580      	push	{r7, lr}
 8011c6c:	b082      	sub	sp, #8
 8011c6e:	af00      	add	r7, sp, #0
 8011c70:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011c78:	4618      	mov	r0, r3
 8011c7a:	f7fc f81c 	bl	800dcb6 <USBD_LL_SOF>
}
 8011c7e:	bf00      	nop
 8011c80:	3708      	adds	r7, #8
 8011c82:	46bd      	mov	sp, r7
 8011c84:	bd80      	pop	{r7, pc}

08011c86 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b084      	sub	sp, #16
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011c8e:	2301      	movs	r3, #1
 8011c90:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8011c92:	687b      	ldr	r3, [r7, #4]
 8011c94:	68db      	ldr	r3, [r3, #12]
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	d102      	bne.n	8011ca0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011c9a:	2300      	movs	r3, #0
 8011c9c:	73fb      	strb	r3, [r7, #15]
 8011c9e:	e008      	b.n	8011cb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	68db      	ldr	r3, [r3, #12]
 8011ca4:	2b02      	cmp	r3, #2
 8011ca6:	d102      	bne.n	8011cae <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011ca8:	2301      	movs	r3, #1
 8011caa:	73fb      	strb	r3, [r7, #15]
 8011cac:	e001      	b.n	8011cb2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011cae:	f7ef fd31 	bl	8001714 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011cb8:	7bfa      	ldrb	r2, [r7, #15]
 8011cba:	4611      	mov	r1, r2
 8011cbc:	4618      	mov	r0, r3
 8011cbe:	f7fb ffbc 	bl	800dc3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011cc8:	4618      	mov	r0, r3
 8011cca:	f7fb ff64 	bl	800db96 <USBD_LL_Reset>
}
 8011cce:	bf00      	nop
 8011cd0:	3710      	adds	r7, #16
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}
	...

08011cd8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011cd8:	b580      	push	{r7, lr}
 8011cda:	b082      	sub	sp, #8
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011ce0:	687b      	ldr	r3, [r7, #4]
 8011ce2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011ce6:	4618      	mov	r0, r3
 8011ce8:	f7fb ffb7 	bl	800dc5a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011cec:	687b      	ldr	r3, [r7, #4]
 8011cee:	681b      	ldr	r3, [r3, #0]
 8011cf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011cf4:	681b      	ldr	r3, [r3, #0]
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	6812      	ldr	r2, [r2, #0]
 8011cfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011cfe:	f043 0301 	orr.w	r3, r3, #1
 8011d02:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	6a1b      	ldr	r3, [r3, #32]
 8011d08:	2b00      	cmp	r3, #0
 8011d0a:	d005      	beq.n	8011d18 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011d0c:	4b04      	ldr	r3, [pc, #16]	; (8011d20 <HAL_PCD_SuspendCallback+0x48>)
 8011d0e:	691b      	ldr	r3, [r3, #16]
 8011d10:	4a03      	ldr	r2, [pc, #12]	; (8011d20 <HAL_PCD_SuspendCallback+0x48>)
 8011d12:	f043 0306 	orr.w	r3, r3, #6
 8011d16:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011d18:	bf00      	nop
 8011d1a:	3708      	adds	r7, #8
 8011d1c:	46bd      	mov	sp, r7
 8011d1e:	bd80      	pop	{r7, pc}
 8011d20:	e000ed00 	.word	0xe000ed00

08011d24 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d24:	b580      	push	{r7, lr}
 8011d26:	b082      	sub	sp, #8
 8011d28:	af00      	add	r7, sp, #0
 8011d2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011d32:	4618      	mov	r0, r3
 8011d34:	f7fb ffa7 	bl	800dc86 <USBD_LL_Resume>
}
 8011d38:	bf00      	nop
 8011d3a:	3708      	adds	r7, #8
 8011d3c:	46bd      	mov	sp, r7
 8011d3e:	bd80      	pop	{r7, pc}

08011d40 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d40:	b580      	push	{r7, lr}
 8011d42:	b082      	sub	sp, #8
 8011d44:	af00      	add	r7, sp, #0
 8011d46:	6078      	str	r0, [r7, #4]
 8011d48:	460b      	mov	r3, r1
 8011d4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011d52:	78fa      	ldrb	r2, [r7, #3]
 8011d54:	4611      	mov	r1, r2
 8011d56:	4618      	mov	r0, r3
 8011d58:	f7fb ffff 	bl	800dd5a <USBD_LL_IsoOUTIncomplete>
}
 8011d5c:	bf00      	nop
 8011d5e:	3708      	adds	r7, #8
 8011d60:	46bd      	mov	sp, r7
 8011d62:	bd80      	pop	{r7, pc}

08011d64 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b082      	sub	sp, #8
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
 8011d6c:	460b      	mov	r3, r1
 8011d6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011d70:	687b      	ldr	r3, [r7, #4]
 8011d72:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011d76:	78fa      	ldrb	r2, [r7, #3]
 8011d78:	4611      	mov	r1, r2
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	f7fb ffbb 	bl	800dcf6 <USBD_LL_IsoINIncomplete>
}
 8011d80:	bf00      	nop
 8011d82:	3708      	adds	r7, #8
 8011d84:	46bd      	mov	sp, r7
 8011d86:	bd80      	pop	{r7, pc}

08011d88 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011d88:	b580      	push	{r7, lr}
 8011d8a:	b082      	sub	sp, #8
 8011d8c:	af00      	add	r7, sp, #0
 8011d8e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011d90:	687b      	ldr	r3, [r7, #4]
 8011d92:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011d96:	4618      	mov	r0, r3
 8011d98:	f7fc f811 	bl	800ddbe <USBD_LL_DevConnected>
}
 8011d9c:	bf00      	nop
 8011d9e:	3708      	adds	r7, #8
 8011da0:	46bd      	mov	sp, r7
 8011da2:	bd80      	pop	{r7, pc}

08011da4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011da4:	b580      	push	{r7, lr}
 8011da6:	b082      	sub	sp, #8
 8011da8:	af00      	add	r7, sp, #0
 8011daa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011db2:	4618      	mov	r0, r3
 8011db4:	f7fc f80e 	bl	800ddd4 <USBD_LL_DevDisconnected>
}
 8011db8:	bf00      	nop
 8011dba:	3708      	adds	r7, #8
 8011dbc:	46bd      	mov	sp, r7
 8011dbe:	bd80      	pop	{r7, pc}

08011dc0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011dc0:	b580      	push	{r7, lr}
 8011dc2:	b082      	sub	sp, #8
 8011dc4:	af00      	add	r7, sp, #0
 8011dc6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	781b      	ldrb	r3, [r3, #0]
 8011dcc:	2b01      	cmp	r3, #1
 8011dce:	d140      	bne.n	8011e52 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8011dd0:	4a22      	ldr	r2, [pc, #136]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011dd2:	687b      	ldr	r3, [r7, #4]
 8011dd4:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8011dd8:	687b      	ldr	r3, [r7, #4]
 8011dda:	4a20      	ldr	r2, [pc, #128]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011ddc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011de0:	4b1e      	ldr	r3, [pc, #120]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011de2:	4a1f      	ldr	r2, [pc, #124]	; (8011e60 <USBD_LL_Init+0xa0>)
 8011de4:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8011de6:	4b1d      	ldr	r3, [pc, #116]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011de8:	2208      	movs	r2, #8
 8011dea:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 8011dec:	4b1b      	ldr	r3, [pc, #108]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011dee:	2202      	movs	r2, #2
 8011df0:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8011df2:	4b1a      	ldr	r3, [pc, #104]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011df4:	2200      	movs	r2, #0
 8011df6:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8011df8:	4b18      	ldr	r3, [pc, #96]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011dfa:	2202      	movs	r2, #2
 8011dfc:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8011dfe:	4b17      	ldr	r3, [pc, #92]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e00:	2200      	movs	r2, #0
 8011e02:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8011e04:	4b15      	ldr	r3, [pc, #84]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e06:	2200      	movs	r2, #0
 8011e08:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8011e0a:	4b14      	ldr	r3, [pc, #80]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e0c:	2200      	movs	r2, #0
 8011e0e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8011e10:	4b12      	ldr	r3, [pc, #72]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e12:	2200      	movs	r2, #0
 8011e14:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8011e16:	4b11      	ldr	r3, [pc, #68]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e18:	2200      	movs	r2, #0
 8011e1a:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8011e1c:	4b0f      	ldr	r3, [pc, #60]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e1e:	2200      	movs	r2, #0
 8011e20:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8011e22:	480e      	ldr	r0, [pc, #56]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e24:	f7f2 ff3c 	bl	8004ca0 <HAL_PCD_Init>
 8011e28:	4603      	mov	r3, r0
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d001      	beq.n	8011e32 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8011e2e:	f7ef fc71 	bl	8001714 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8011e32:	f44f 7100 	mov.w	r1, #512	; 0x200
 8011e36:	4809      	ldr	r0, [pc, #36]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e38:	f7f4 f9b5 	bl	80061a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8011e3c:	2280      	movs	r2, #128	; 0x80
 8011e3e:	2100      	movs	r1, #0
 8011e40:	4806      	ldr	r0, [pc, #24]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e42:	f7f4 f969 	bl	8006118 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8011e46:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8011e4a:	2101      	movs	r1, #1
 8011e4c:	4803      	ldr	r0, [pc, #12]	; (8011e5c <USBD_LL_Init+0x9c>)
 8011e4e:	f7f4 f963 	bl	8006118 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8011e52:	2300      	movs	r3, #0
}
 8011e54:	4618      	mov	r0, r3
 8011e56:	3708      	adds	r7, #8
 8011e58:	46bd      	mov	sp, r7
 8011e5a:	bd80      	pop	{r7, pc}
 8011e5c:	20002ddc 	.word	0x20002ddc
 8011e60:	40040000 	.word	0x40040000

08011e64 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011e64:	b580      	push	{r7, lr}
 8011e66:	b084      	sub	sp, #16
 8011e68:	af00      	add	r7, sp, #0
 8011e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011e6c:	2300      	movs	r3, #0
 8011e6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011e70:	2300      	movs	r3, #0
 8011e72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011e74:	687b      	ldr	r3, [r7, #4]
 8011e76:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f7f3 f834 	bl	8004ee8 <HAL_PCD_Start>
 8011e80:	4603      	mov	r3, r0
 8011e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011e84:	7bfb      	ldrb	r3, [r7, #15]
 8011e86:	4618      	mov	r0, r3
 8011e88:	f000 f97e 	bl	8012188 <USBD_Get_USB_Status>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8011e92:	4618      	mov	r0, r3
 8011e94:	3710      	adds	r7, #16
 8011e96:	46bd      	mov	sp, r7
 8011e98:	bd80      	pop	{r7, pc}

08011e9a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011e9a:	b580      	push	{r7, lr}
 8011e9c:	b084      	sub	sp, #16
 8011e9e:	af00      	add	r7, sp, #0
 8011ea0:	6078      	str	r0, [r7, #4]
 8011ea2:	4608      	mov	r0, r1
 8011ea4:	4611      	mov	r1, r2
 8011ea6:	461a      	mov	r2, r3
 8011ea8:	4603      	mov	r3, r0
 8011eaa:	70fb      	strb	r3, [r7, #3]
 8011eac:	460b      	mov	r3, r1
 8011eae:	70bb      	strb	r3, [r7, #2]
 8011eb0:	4613      	mov	r3, r2
 8011eb2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011eb4:	2300      	movs	r3, #0
 8011eb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011eb8:	2300      	movs	r3, #0
 8011eba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011ec2:	78bb      	ldrb	r3, [r7, #2]
 8011ec4:	883a      	ldrh	r2, [r7, #0]
 8011ec6:	78f9      	ldrb	r1, [r7, #3]
 8011ec8:	f7f3 fd21 	bl	800590e <HAL_PCD_EP_Open>
 8011ecc:	4603      	mov	r3, r0
 8011ece:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ed0:	7bfb      	ldrb	r3, [r7, #15]
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f000 f958 	bl	8012188 <USBD_Get_USB_Status>
 8011ed8:	4603      	mov	r3, r0
 8011eda:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011edc:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ede:	4618      	mov	r0, r3
 8011ee0:	3710      	adds	r7, #16
 8011ee2:	46bd      	mov	sp, r7
 8011ee4:	bd80      	pop	{r7, pc}

08011ee6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011ee6:	b580      	push	{r7, lr}
 8011ee8:	b084      	sub	sp, #16
 8011eea:	af00      	add	r7, sp, #0
 8011eec:	6078      	str	r0, [r7, #4]
 8011eee:	460b      	mov	r3, r1
 8011ef0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011ef2:	2300      	movs	r3, #0
 8011ef4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ef6:	2300      	movs	r3, #0
 8011ef8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011f00:	78fa      	ldrb	r2, [r7, #3]
 8011f02:	4611      	mov	r1, r2
 8011f04:	4618      	mov	r0, r3
 8011f06:	f7f3 fd6a 	bl	80059de <HAL_PCD_EP_Close>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f0e:	7bfb      	ldrb	r3, [r7, #15]
 8011f10:	4618      	mov	r0, r3
 8011f12:	f000 f939 	bl	8012188 <USBD_Get_USB_Status>
 8011f16:	4603      	mov	r3, r0
 8011f18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f1c:	4618      	mov	r0, r3
 8011f1e:	3710      	adds	r7, #16
 8011f20:	46bd      	mov	sp, r7
 8011f22:	bd80      	pop	{r7, pc}

08011f24 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f24:	b580      	push	{r7, lr}
 8011f26:	b084      	sub	sp, #16
 8011f28:	af00      	add	r7, sp, #0
 8011f2a:	6078      	str	r0, [r7, #4]
 8011f2c:	460b      	mov	r3, r1
 8011f2e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f30:	2300      	movs	r3, #0
 8011f32:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f34:	2300      	movs	r3, #0
 8011f36:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011f38:	687b      	ldr	r3, [r7, #4]
 8011f3a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011f3e:	78fa      	ldrb	r2, [r7, #3]
 8011f40:	4611      	mov	r1, r2
 8011f42:	4618      	mov	r0, r3
 8011f44:	f7f3 fe42 	bl	8005bcc <HAL_PCD_EP_SetStall>
 8011f48:	4603      	mov	r3, r0
 8011f4a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f4c:	7bfb      	ldrb	r3, [r7, #15]
 8011f4e:	4618      	mov	r0, r3
 8011f50:	f000 f91a 	bl	8012188 <USBD_Get_USB_Status>
 8011f54:	4603      	mov	r3, r0
 8011f56:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f58:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f5a:	4618      	mov	r0, r3
 8011f5c:	3710      	adds	r7, #16
 8011f5e:	46bd      	mov	sp, r7
 8011f60:	bd80      	pop	{r7, pc}

08011f62 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011f62:	b580      	push	{r7, lr}
 8011f64:	b084      	sub	sp, #16
 8011f66:	af00      	add	r7, sp, #0
 8011f68:	6078      	str	r0, [r7, #4]
 8011f6a:	460b      	mov	r3, r1
 8011f6c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f6e:	2300      	movs	r3, #0
 8011f70:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011f72:	2300      	movs	r3, #0
 8011f74:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011f76:	687b      	ldr	r3, [r7, #4]
 8011f78:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011f7c:	78fa      	ldrb	r2, [r7, #3]
 8011f7e:	4611      	mov	r1, r2
 8011f80:	4618      	mov	r0, r3
 8011f82:	f7f3 fe87 	bl	8005c94 <HAL_PCD_EP_ClrStall>
 8011f86:	4603      	mov	r3, r0
 8011f88:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011f8a:	7bfb      	ldrb	r3, [r7, #15]
 8011f8c:	4618      	mov	r0, r3
 8011f8e:	f000 f8fb 	bl	8012188 <USBD_Get_USB_Status>
 8011f92:	4603      	mov	r3, r0
 8011f94:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f96:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f98:	4618      	mov	r0, r3
 8011f9a:	3710      	adds	r7, #16
 8011f9c:	46bd      	mov	sp, r7
 8011f9e:	bd80      	pop	{r7, pc}

08011fa0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011fa0:	b480      	push	{r7}
 8011fa2:	b085      	sub	sp, #20
 8011fa4:	af00      	add	r7, sp, #0
 8011fa6:	6078      	str	r0, [r7, #4]
 8011fa8:	460b      	mov	r3, r1
 8011faa:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011fac:	687b      	ldr	r3, [r7, #4]
 8011fae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011fb2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011fb4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011fb8:	2b00      	cmp	r3, #0
 8011fba:	da0b      	bge.n	8011fd4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011fbc:	78fb      	ldrb	r3, [r7, #3]
 8011fbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fc2:	68f9      	ldr	r1, [r7, #12]
 8011fc4:	4613      	mov	r3, r2
 8011fc6:	00db      	lsls	r3, r3, #3
 8011fc8:	4413      	add	r3, r2
 8011fca:	009b      	lsls	r3, r3, #2
 8011fcc:	440b      	add	r3, r1
 8011fce:	333e      	adds	r3, #62	; 0x3e
 8011fd0:	781b      	ldrb	r3, [r3, #0]
 8011fd2:	e00b      	b.n	8011fec <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011fd4:	78fb      	ldrb	r3, [r7, #3]
 8011fd6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011fda:	68f9      	ldr	r1, [r7, #12]
 8011fdc:	4613      	mov	r3, r2
 8011fde:	00db      	lsls	r3, r3, #3
 8011fe0:	4413      	add	r3, r2
 8011fe2:	009b      	lsls	r3, r3, #2
 8011fe4:	440b      	add	r3, r1
 8011fe6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011fea:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011fec:	4618      	mov	r0, r3
 8011fee:	3714      	adds	r7, #20
 8011ff0:	46bd      	mov	sp, r7
 8011ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ff6:	4770      	bx	lr

08011ff8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011ff8:	b580      	push	{r7, lr}
 8011ffa:	b084      	sub	sp, #16
 8011ffc:	af00      	add	r7, sp, #0
 8011ffe:	6078      	str	r0, [r7, #4]
 8012000:	460b      	mov	r3, r1
 8012002:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012004:	2300      	movs	r3, #0
 8012006:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012008:	2300      	movs	r3, #0
 801200a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8012012:	78fa      	ldrb	r2, [r7, #3]
 8012014:	4611      	mov	r1, r2
 8012016:	4618      	mov	r0, r3
 8012018:	f7f3 fc54 	bl	80058c4 <HAL_PCD_SetAddress>
 801201c:	4603      	mov	r3, r0
 801201e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012020:	7bfb      	ldrb	r3, [r7, #15]
 8012022:	4618      	mov	r0, r3
 8012024:	f000 f8b0 	bl	8012188 <USBD_Get_USB_Status>
 8012028:	4603      	mov	r3, r0
 801202a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801202c:	7bbb      	ldrb	r3, [r7, #14]
}
 801202e:	4618      	mov	r0, r3
 8012030:	3710      	adds	r7, #16
 8012032:	46bd      	mov	sp, r7
 8012034:	bd80      	pop	{r7, pc}

08012036 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012036:	b580      	push	{r7, lr}
 8012038:	b086      	sub	sp, #24
 801203a:	af00      	add	r7, sp, #0
 801203c:	60f8      	str	r0, [r7, #12]
 801203e:	607a      	str	r2, [r7, #4]
 8012040:	603b      	str	r3, [r7, #0]
 8012042:	460b      	mov	r3, r1
 8012044:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012046:	2300      	movs	r3, #0
 8012048:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801204a:	2300      	movs	r3, #0
 801204c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801204e:	68fb      	ldr	r3, [r7, #12]
 8012050:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012054:	7af9      	ldrb	r1, [r7, #11]
 8012056:	683b      	ldr	r3, [r7, #0]
 8012058:	687a      	ldr	r2, [r7, #4]
 801205a:	f7f3 fd6d 	bl	8005b38 <HAL_PCD_EP_Transmit>
 801205e:	4603      	mov	r3, r0
 8012060:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8012062:	7dfb      	ldrb	r3, [r7, #23]
 8012064:	4618      	mov	r0, r3
 8012066:	f000 f88f 	bl	8012188 <USBD_Get_USB_Status>
 801206a:	4603      	mov	r3, r0
 801206c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801206e:	7dbb      	ldrb	r3, [r7, #22]
}
 8012070:	4618      	mov	r0, r3
 8012072:	3718      	adds	r7, #24
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}

08012078 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8012078:	b580      	push	{r7, lr}
 801207a:	b086      	sub	sp, #24
 801207c:	af00      	add	r7, sp, #0
 801207e:	60f8      	str	r0, [r7, #12]
 8012080:	607a      	str	r2, [r7, #4]
 8012082:	603b      	str	r3, [r7, #0]
 8012084:	460b      	mov	r3, r1
 8012086:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012088:	2300      	movs	r3, #0
 801208a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801208c:	2300      	movs	r3, #0
 801208e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8012096:	7af9      	ldrb	r1, [r7, #11]
 8012098:	683b      	ldr	r3, [r7, #0]
 801209a:	687a      	ldr	r2, [r7, #4]
 801209c:	f7f3 fce9 	bl	8005a72 <HAL_PCD_EP_Receive>
 80120a0:	4603      	mov	r3, r0
 80120a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80120a4:	7dfb      	ldrb	r3, [r7, #23]
 80120a6:	4618      	mov	r0, r3
 80120a8:	f000 f86e 	bl	8012188 <USBD_Get_USB_Status>
 80120ac:	4603      	mov	r3, r0
 80120ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80120b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80120b2:	4618      	mov	r0, r3
 80120b4:	3718      	adds	r7, #24
 80120b6:	46bd      	mov	sp, r7
 80120b8:	bd80      	pop	{r7, pc}

080120ba <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80120ba:	b580      	push	{r7, lr}
 80120bc:	b082      	sub	sp, #8
 80120be:	af00      	add	r7, sp, #0
 80120c0:	6078      	str	r0, [r7, #4]
 80120c2:	460b      	mov	r3, r1
 80120c4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80120cc:	78fa      	ldrb	r2, [r7, #3]
 80120ce:	4611      	mov	r1, r2
 80120d0:	4618      	mov	r0, r3
 80120d2:	f7f3 fd19 	bl	8005b08 <HAL_PCD_EP_GetRxCount>
 80120d6:	4603      	mov	r3, r0
}
 80120d8:	4618      	mov	r0, r3
 80120da:	3708      	adds	r7, #8
 80120dc:	46bd      	mov	sp, r7
 80120de:	bd80      	pop	{r7, pc}

080120e0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80120e0:	b580      	push	{r7, lr}
 80120e2:	b082      	sub	sp, #8
 80120e4:	af00      	add	r7, sp, #0
 80120e6:	6078      	str	r0, [r7, #4]
 80120e8:	460b      	mov	r3, r1
 80120ea:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 80120ec:	78fb      	ldrb	r3, [r7, #3]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d002      	beq.n	80120f8 <HAL_PCDEx_LPM_Callback+0x18>
 80120f2:	2b01      	cmp	r3, #1
 80120f4:	d01f      	beq.n	8012136 <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 80120f6:	e03b      	b.n	8012170 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 80120f8:	687b      	ldr	r3, [r7, #4]
 80120fa:	6a1b      	ldr	r3, [r3, #32]
 80120fc:	2b00      	cmp	r3, #0
 80120fe:	d007      	beq.n	8012110 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8012100:	f000 f83c 	bl	801217c <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012104:	4b1c      	ldr	r3, [pc, #112]	; (8012178 <HAL_PCDEx_LPM_Callback+0x98>)
 8012106:	691b      	ldr	r3, [r3, #16]
 8012108:	4a1b      	ldr	r2, [pc, #108]	; (8012178 <HAL_PCDEx_LPM_Callback+0x98>)
 801210a:	f023 0306 	bic.w	r3, r3, #6
 801210e:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	681b      	ldr	r3, [r3, #0]
 8012114:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	687a      	ldr	r2, [r7, #4]
 801211c:	6812      	ldr	r2, [r2, #0]
 801211e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012122:	f023 0301 	bic.w	r3, r3, #1
 8012126:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801212e:	4618      	mov	r0, r3
 8012130:	f7fb fda9 	bl	800dc86 <USBD_LL_Resume>
    break;
 8012134:	e01c      	b.n	8012170 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 801213e:	681b      	ldr	r3, [r3, #0]
 8012140:	687a      	ldr	r2, [r7, #4]
 8012142:	6812      	ldr	r2, [r2, #0]
 8012144:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8012148:	f043 0301 	orr.w	r3, r3, #1
 801214c:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 801214e:	687b      	ldr	r3, [r7, #4]
 8012150:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8012154:	4618      	mov	r0, r3
 8012156:	f7fb fd80 	bl	800dc5a <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	6a1b      	ldr	r3, [r3, #32]
 801215e:	2b00      	cmp	r3, #0
 8012160:	d005      	beq.n	801216e <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8012162:	4b05      	ldr	r3, [pc, #20]	; (8012178 <HAL_PCDEx_LPM_Callback+0x98>)
 8012164:	691b      	ldr	r3, [r3, #16]
 8012166:	4a04      	ldr	r2, [pc, #16]	; (8012178 <HAL_PCDEx_LPM_Callback+0x98>)
 8012168:	f043 0306 	orr.w	r3, r3, #6
 801216c:	6113      	str	r3, [r2, #16]
    break;
 801216e:	bf00      	nop
}
 8012170:	bf00      	nop
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	e000ed00 	.word	0xe000ed00

0801217c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 801217c:	b580      	push	{r7, lr}
 801217e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8012180:	f7ee feee 	bl	8000f60 <SystemClock_Config>
}
 8012184:	bf00      	nop
 8012186:	bd80      	pop	{r7, pc}

08012188 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012188:	b480      	push	{r7}
 801218a:	b085      	sub	sp, #20
 801218c:	af00      	add	r7, sp, #0
 801218e:	4603      	mov	r3, r0
 8012190:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8012192:	2300      	movs	r3, #0
 8012194:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012196:	79fb      	ldrb	r3, [r7, #7]
 8012198:	2b03      	cmp	r3, #3
 801219a:	d817      	bhi.n	80121cc <USBD_Get_USB_Status+0x44>
 801219c:	a201      	add	r2, pc, #4	; (adr r2, 80121a4 <USBD_Get_USB_Status+0x1c>)
 801219e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80121a2:	bf00      	nop
 80121a4:	080121b5 	.word	0x080121b5
 80121a8:	080121bb 	.word	0x080121bb
 80121ac:	080121c1 	.word	0x080121c1
 80121b0:	080121c7 	.word	0x080121c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80121b4:	2300      	movs	r3, #0
 80121b6:	73fb      	strb	r3, [r7, #15]
    break;
 80121b8:	e00b      	b.n	80121d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80121ba:	2303      	movs	r3, #3
 80121bc:	73fb      	strb	r3, [r7, #15]
    break;
 80121be:	e008      	b.n	80121d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80121c0:	2301      	movs	r3, #1
 80121c2:	73fb      	strb	r3, [r7, #15]
    break;
 80121c4:	e005      	b.n	80121d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80121c6:	2303      	movs	r3, #3
 80121c8:	73fb      	strb	r3, [r7, #15]
    break;
 80121ca:	e002      	b.n	80121d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80121cc:	2303      	movs	r3, #3
 80121ce:	73fb      	strb	r3, [r7, #15]
    break;
 80121d0:	bf00      	nop
  }
  return usb_status;
 80121d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80121d4:	4618      	mov	r0, r3
 80121d6:	3714      	adds	r7, #20
 80121d8:	46bd      	mov	sp, r7
 80121da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121de:	4770      	bx	lr

080121e0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80121e0:	b580      	push	{r7, lr}
 80121e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80121e4:	2201      	movs	r2, #1
 80121e6:	490e      	ldr	r1, [pc, #56]	; (8012220 <MX_USB_HOST_Init+0x40>)
 80121e8:	480e      	ldr	r0, [pc, #56]	; (8012224 <MX_USB_HOST_Init+0x44>)
 80121ea:	f7fd f91f 	bl	800f42c <USBH_Init>
 80121ee:	4603      	mov	r3, r0
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	d001      	beq.n	80121f8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80121f4:	f7ef fa8e 	bl	8001714 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80121f8:	490b      	ldr	r1, [pc, #44]	; (8012228 <MX_USB_HOST_Init+0x48>)
 80121fa:	480a      	ldr	r0, [pc, #40]	; (8012224 <MX_USB_HOST_Init+0x44>)
 80121fc:	f7fd f9c3 	bl	800f586 <USBH_RegisterClass>
 8012200:	4603      	mov	r3, r0
 8012202:	2b00      	cmp	r3, #0
 8012204:	d001      	beq.n	801220a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8012206:	f7ef fa85 	bl	8001714 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 801220a:	4806      	ldr	r0, [pc, #24]	; (8012224 <MX_USB_HOST_Init+0x44>)
 801220c:	f7fd fa47 	bl	800f69e <USBH_Start>
 8012210:	4603      	mov	r3, r0
 8012212:	2b00      	cmp	r3, #0
 8012214:	d001      	beq.n	801221a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8012216:	f7ef fa7d 	bl	8001714 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 801221a:	bf00      	nop
 801221c:	bd80      	pop	{r7, pc}
 801221e:	bf00      	nop
 8012220:	08012241 	.word	0x08012241
 8012224:	200032e4 	.word	0x200032e4
 8012228:	20000098 	.word	0x20000098

0801222c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 801222c:	b580      	push	{r7, lr}
 801222e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8012230:	4802      	ldr	r0, [pc, #8]	; (801223c <MX_USB_HOST_Process+0x10>)
 8012232:	f7fd fa45 	bl	800f6c0 <USBH_Process>
}
 8012236:	bf00      	nop
 8012238:	bd80      	pop	{r7, pc}
 801223a:	bf00      	nop
 801223c:	200032e4 	.word	0x200032e4

08012240 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8012240:	b480      	push	{r7}
 8012242:	b083      	sub	sp, #12
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
 8012248:	460b      	mov	r3, r1
 801224a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 801224c:	78fb      	ldrb	r3, [r7, #3]
 801224e:	3b01      	subs	r3, #1
 8012250:	2b04      	cmp	r3, #4
 8012252:	d819      	bhi.n	8012288 <USBH_UserProcess+0x48>
 8012254:	a201      	add	r2, pc, #4	; (adr r2, 801225c <USBH_UserProcess+0x1c>)
 8012256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801225a:	bf00      	nop
 801225c:	08012289 	.word	0x08012289
 8012260:	08012279 	.word	0x08012279
 8012264:	08012289 	.word	0x08012289
 8012268:	08012281 	.word	0x08012281
 801226c:	08012271 	.word	0x08012271
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8012270:	4b09      	ldr	r3, [pc, #36]	; (8012298 <USBH_UserProcess+0x58>)
 8012272:	2203      	movs	r2, #3
 8012274:	701a      	strb	r2, [r3, #0]
  break;
 8012276:	e008      	b.n	801228a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8012278:	4b07      	ldr	r3, [pc, #28]	; (8012298 <USBH_UserProcess+0x58>)
 801227a:	2202      	movs	r2, #2
 801227c:	701a      	strb	r2, [r3, #0]
  break;
 801227e:	e004      	b.n	801228a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8012280:	4b05      	ldr	r3, [pc, #20]	; (8012298 <USBH_UserProcess+0x58>)
 8012282:	2201      	movs	r2, #1
 8012284:	701a      	strb	r2, [r3, #0]
  break;
 8012286:	e000      	b.n	801228a <USBH_UserProcess+0x4a>

  default:
  break;
 8012288:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 801228a:	bf00      	nop
 801228c:	370c      	adds	r7, #12
 801228e:	46bd      	mov	sp, r7
 8012290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012294:	4770      	bx	lr
 8012296:	bf00      	nop
 8012298:	200036bc 	.word	0x200036bc

0801229c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b0ac      	sub	sp, #176	; 0xb0
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80122a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80122a8:	2200      	movs	r2, #0
 80122aa:	601a      	str	r2, [r3, #0]
 80122ac:	605a      	str	r2, [r3, #4]
 80122ae:	609a      	str	r2, [r3, #8]
 80122b0:	60da      	str	r2, [r3, #12]
 80122b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80122b4:	f107 0318 	add.w	r3, r7, #24
 80122b8:	2284      	movs	r2, #132	; 0x84
 80122ba:	2100      	movs	r1, #0
 80122bc:	4618      	mov	r0, r3
 80122be:	f000 fae1 	bl	8012884 <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80122ca:	d151      	bne.n	8012370 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80122cc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80122d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80122d2:	2300      	movs	r3, #0
 80122d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80122d8:	f107 0318 	add.w	r3, r7, #24
 80122dc:	4618      	mov	r0, r3
 80122de:	f7f4 fcbf 	bl	8006c60 <HAL_RCCEx_PeriphCLKConfig>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d001      	beq.n	80122ec <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 80122e8:	f7ef fa14 	bl	8001714 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80122ec:	4b22      	ldr	r3, [pc, #136]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 80122ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122f0:	4a21      	ldr	r2, [pc, #132]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 80122f2:	f043 0301 	orr.w	r3, r3, #1
 80122f6:	6313      	str	r3, [r2, #48]	; 0x30
 80122f8:	4b1f      	ldr	r3, [pc, #124]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 80122fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80122fc:	f003 0301 	and.w	r3, r3, #1
 8012300:	617b      	str	r3, [r7, #20]
 8012302:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8012304:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8012308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801230c:	2302      	movs	r3, #2
 801230e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012312:	2300      	movs	r3, #0
 8012314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8012318:	2303      	movs	r3, #3
 801231a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 801231e:	230a      	movs	r3, #10
 8012320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012324:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012328:	4619      	mov	r1, r3
 801232a:	4814      	ldr	r0, [pc, #80]	; (801237c <HAL_HCD_MspInit+0xe0>)
 801232c:	f7f0 fd86 	bl	8002e3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8012330:	4b11      	ldr	r3, [pc, #68]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 8012332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012334:	4a10      	ldr	r2, [pc, #64]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 8012336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801233a:	6353      	str	r3, [r2, #52]	; 0x34
 801233c:	4b0e      	ldr	r3, [pc, #56]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 801233e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012340:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012344:	613b      	str	r3, [r7, #16]
 8012346:	693b      	ldr	r3, [r7, #16]
 8012348:	4b0b      	ldr	r3, [pc, #44]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 801234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801234c:	4a0a      	ldr	r2, [pc, #40]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 801234e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8012352:	6453      	str	r3, [r2, #68]	; 0x44
 8012354:	4b08      	ldr	r3, [pc, #32]	; (8012378 <HAL_HCD_MspInit+0xdc>)
 8012356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012358:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 801235c:	60fb      	str	r3, [r7, #12]
 801235e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8012360:	2200      	movs	r2, #0
 8012362:	2100      	movs	r1, #0
 8012364:	2043      	movs	r0, #67	; 0x43
 8012366:	f7f0 fa48 	bl	80027fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 801236a:	2043      	movs	r0, #67	; 0x43
 801236c:	f7f0 fa61 	bl	8002832 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8012370:	bf00      	nop
 8012372:	37b0      	adds	r7, #176	; 0xb0
 8012374:	46bd      	mov	sp, r7
 8012376:	bd80      	pop	{r7, pc}
 8012378:	40023800 	.word	0x40023800
 801237c:	40020000 	.word	0x40020000

08012380 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8012380:	b580      	push	{r7, lr}
 8012382:	b082      	sub	sp, #8
 8012384:	af00      	add	r7, sp, #0
 8012386:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8012388:	687b      	ldr	r3, [r7, #4]
 801238a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801238e:	4618      	mov	r0, r3
 8012390:	f7fd fd75 	bl	800fe7e <USBH_LL_IncTimer>
}
 8012394:	bf00      	nop
 8012396:	3708      	adds	r7, #8
 8012398:	46bd      	mov	sp, r7
 801239a:	bd80      	pop	{r7, pc}

0801239c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 801239c:	b580      	push	{r7, lr}
 801239e:	b082      	sub	sp, #8
 80123a0:	af00      	add	r7, sp, #0
 80123a2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80123aa:	4618      	mov	r0, r3
 80123ac:	f7fd fdad 	bl	800ff0a <USBH_LL_Connect>
}
 80123b0:	bf00      	nop
 80123b2:	3708      	adds	r7, #8
 80123b4:	46bd      	mov	sp, r7
 80123b6:	bd80      	pop	{r7, pc}

080123b8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80123c6:	4618      	mov	r0, r3
 80123c8:	f7fd fdb6 	bl	800ff38 <USBH_LL_Disconnect>
}
 80123cc:	bf00      	nop
 80123ce:	3708      	adds	r7, #8
 80123d0:	46bd      	mov	sp, r7
 80123d2:	bd80      	pop	{r7, pc}

080123d4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80123d4:	b480      	push	{r7}
 80123d6:	b083      	sub	sp, #12
 80123d8:	af00      	add	r7, sp, #0
 80123da:	6078      	str	r0, [r7, #4]
 80123dc:	460b      	mov	r3, r1
 80123de:	70fb      	strb	r3, [r7, #3]
 80123e0:	4613      	mov	r3, r2
 80123e2:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80123e4:	bf00      	nop
 80123e6:	370c      	adds	r7, #12
 80123e8:	46bd      	mov	sp, r7
 80123ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ee:	4770      	bx	lr

080123f0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80123f0:	b580      	push	{r7, lr}
 80123f2:	b082      	sub	sp, #8
 80123f4:	af00      	add	r7, sp, #0
 80123f6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80123fe:	4618      	mov	r0, r3
 8012400:	f7fd fd67 	bl	800fed2 <USBH_LL_PortEnabled>
}
 8012404:	bf00      	nop
 8012406:	3708      	adds	r7, #8
 8012408:	46bd      	mov	sp, r7
 801240a:	bd80      	pop	{r7, pc}

0801240c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 801240c:	b580      	push	{r7, lr}
 801240e:	b082      	sub	sp, #8
 8012410:	af00      	add	r7, sp, #0
 8012412:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8012414:	687b      	ldr	r3, [r7, #4]
 8012416:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 801241a:	4618      	mov	r0, r3
 801241c:	f7fd fd67 	bl	800feee <USBH_LL_PortDisabled>
}
 8012420:	bf00      	nop
 8012422:	3708      	adds	r7, #8
 8012424:	46bd      	mov	sp, r7
 8012426:	bd80      	pop	{r7, pc}

08012428 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8012428:	b580      	push	{r7, lr}
 801242a:	b082      	sub	sp, #8
 801242c:	af00      	add	r7, sp, #0
 801242e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8012430:	687b      	ldr	r3, [r7, #4]
 8012432:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8012436:	2b01      	cmp	r3, #1
 8012438:	d12a      	bne.n	8012490 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 801243a:	4a18      	ldr	r2, [pc, #96]	; (801249c <USBH_LL_Init+0x74>)
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8012442:	687b      	ldr	r3, [r7, #4]
 8012444:	4a15      	ldr	r2, [pc, #84]	; (801249c <USBH_LL_Init+0x74>)
 8012446:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 801244a:	4b14      	ldr	r3, [pc, #80]	; (801249c <USBH_LL_Init+0x74>)
 801244c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8012450:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8012452:	4b12      	ldr	r3, [pc, #72]	; (801249c <USBH_LL_Init+0x74>)
 8012454:	2208      	movs	r2, #8
 8012456:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8012458:	4b10      	ldr	r3, [pc, #64]	; (801249c <USBH_LL_Init+0x74>)
 801245a:	2201      	movs	r2, #1
 801245c:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 801245e:	4b0f      	ldr	r3, [pc, #60]	; (801249c <USBH_LL_Init+0x74>)
 8012460:	2200      	movs	r2, #0
 8012462:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8012464:	4b0d      	ldr	r3, [pc, #52]	; (801249c <USBH_LL_Init+0x74>)
 8012466:	2202      	movs	r2, #2
 8012468:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 801246a:	4b0c      	ldr	r3, [pc, #48]	; (801249c <USBH_LL_Init+0x74>)
 801246c:	2200      	movs	r2, #0
 801246e:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8012470:	480a      	ldr	r0, [pc, #40]	; (801249c <USBH_LL_Init+0x74>)
 8012472:	f7f0 feda 	bl	800322a <HAL_HCD_Init>
 8012476:	4603      	mov	r3, r0
 8012478:	2b00      	cmp	r3, #0
 801247a:	d001      	beq.n	8012480 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 801247c:	f7ef f94a 	bl	8001714 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8012480:	4806      	ldr	r0, [pc, #24]	; (801249c <USBH_LL_Init+0x74>)
 8012482:	f7f1 fabe 	bl	8003a02 <HAL_HCD_GetCurrentFrame>
 8012486:	4603      	mov	r3, r0
 8012488:	4619      	mov	r1, r3
 801248a:	6878      	ldr	r0, [r7, #4]
 801248c:	f7fd fce8 	bl	800fe60 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8012490:	2300      	movs	r3, #0
}
 8012492:	4618      	mov	r0, r3
 8012494:	3708      	adds	r7, #8
 8012496:	46bd      	mov	sp, r7
 8012498:	bd80      	pop	{r7, pc}
 801249a:	bf00      	nop
 801249c:	200036c0 	.word	0x200036c0

080124a0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80124a0:	b580      	push	{r7, lr}
 80124a2:	b084      	sub	sp, #16
 80124a4:	af00      	add	r7, sp, #0
 80124a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124a8:	2300      	movs	r3, #0
 80124aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80124ac:	2300      	movs	r3, #0
 80124ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80124b6:	4618      	mov	r0, r3
 80124b8:	f7f1 fa2d 	bl	8003916 <HAL_HCD_Start>
 80124bc:	4603      	mov	r3, r0
 80124be:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80124c0:	7bfb      	ldrb	r3, [r7, #15]
 80124c2:	4618      	mov	r0, r3
 80124c4:	f000 f95c 	bl	8012780 <USBH_Get_USB_Status>
 80124c8:	4603      	mov	r3, r0
 80124ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80124cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80124ce:	4618      	mov	r0, r3
 80124d0:	3710      	adds	r7, #16
 80124d2:	46bd      	mov	sp, r7
 80124d4:	bd80      	pop	{r7, pc}

080124d6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80124d6:	b580      	push	{r7, lr}
 80124d8:	b084      	sub	sp, #16
 80124da:	af00      	add	r7, sp, #0
 80124dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80124de:	2300      	movs	r3, #0
 80124e0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80124e2:	2300      	movs	r3, #0
 80124e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80124ec:	4618      	mov	r0, r3
 80124ee:	f7f1 fa35 	bl	800395c <HAL_HCD_Stop>
 80124f2:	4603      	mov	r3, r0
 80124f4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80124f6:	7bfb      	ldrb	r3, [r7, #15]
 80124f8:	4618      	mov	r0, r3
 80124fa:	f000 f941 	bl	8012780 <USBH_Get_USB_Status>
 80124fe:	4603      	mov	r3, r0
 8012500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012502:	7bbb      	ldrb	r3, [r7, #14]
}
 8012504:	4618      	mov	r0, r3
 8012506:	3710      	adds	r7, #16
 8012508:	46bd      	mov	sp, r7
 801250a:	bd80      	pop	{r7, pc}

0801250c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 801250c:	b580      	push	{r7, lr}
 801250e:	b084      	sub	sp, #16
 8012510:	af00      	add	r7, sp, #0
 8012512:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8012514:	2301      	movs	r3, #1
 8012516:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8012518:	687b      	ldr	r3, [r7, #4]
 801251a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801251e:	4618      	mov	r0, r3
 8012520:	f7f1 fa7d 	bl	8003a1e <HAL_HCD_GetCurrentSpeed>
 8012524:	4603      	mov	r3, r0
 8012526:	2b02      	cmp	r3, #2
 8012528:	d00c      	beq.n	8012544 <USBH_LL_GetSpeed+0x38>
 801252a:	2b02      	cmp	r3, #2
 801252c:	d80d      	bhi.n	801254a <USBH_LL_GetSpeed+0x3e>
 801252e:	2b00      	cmp	r3, #0
 8012530:	d002      	beq.n	8012538 <USBH_LL_GetSpeed+0x2c>
 8012532:	2b01      	cmp	r3, #1
 8012534:	d003      	beq.n	801253e <USBH_LL_GetSpeed+0x32>
 8012536:	e008      	b.n	801254a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8012538:	2300      	movs	r3, #0
 801253a:	73fb      	strb	r3, [r7, #15]
    break;
 801253c:	e008      	b.n	8012550 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 801253e:	2301      	movs	r3, #1
 8012540:	73fb      	strb	r3, [r7, #15]
    break;
 8012542:	e005      	b.n	8012550 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8012544:	2302      	movs	r3, #2
 8012546:	73fb      	strb	r3, [r7, #15]
    break;
 8012548:	e002      	b.n	8012550 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 801254a:	2301      	movs	r3, #1
 801254c:	73fb      	strb	r3, [r7, #15]
    break;
 801254e:	bf00      	nop
  }
  return  speed;
 8012550:	7bfb      	ldrb	r3, [r7, #15]
}
 8012552:	4618      	mov	r0, r3
 8012554:	3710      	adds	r7, #16
 8012556:	46bd      	mov	sp, r7
 8012558:	bd80      	pop	{r7, pc}

0801255a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 801255a:	b580      	push	{r7, lr}
 801255c:	b084      	sub	sp, #16
 801255e:	af00      	add	r7, sp, #0
 8012560:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012562:	2300      	movs	r3, #0
 8012564:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012566:	2300      	movs	r3, #0
 8012568:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 801256a:	687b      	ldr	r3, [r7, #4]
 801256c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012570:	4618      	mov	r0, r3
 8012572:	f7f1 fa10 	bl	8003996 <HAL_HCD_ResetPort>
 8012576:	4603      	mov	r3, r0
 8012578:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801257a:	7bfb      	ldrb	r3, [r7, #15]
 801257c:	4618      	mov	r0, r3
 801257e:	f000 f8ff 	bl	8012780 <USBH_Get_USB_Status>
 8012582:	4603      	mov	r3, r0
 8012584:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012586:	7bbb      	ldrb	r3, [r7, #14]
}
 8012588:	4618      	mov	r0, r3
 801258a:	3710      	adds	r7, #16
 801258c:	46bd      	mov	sp, r7
 801258e:	bd80      	pop	{r7, pc}

08012590 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012590:	b580      	push	{r7, lr}
 8012592:	b082      	sub	sp, #8
 8012594:	af00      	add	r7, sp, #0
 8012596:	6078      	str	r0, [r7, #4]
 8012598:	460b      	mov	r3, r1
 801259a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80125a2:	78fa      	ldrb	r2, [r7, #3]
 80125a4:	4611      	mov	r1, r2
 80125a6:	4618      	mov	r0, r3
 80125a8:	f7f1 fa17 	bl	80039da <HAL_HCD_HC_GetXferCount>
 80125ac:	4603      	mov	r3, r0
}
 80125ae:	4618      	mov	r0, r3
 80125b0:	3708      	adds	r7, #8
 80125b2:	46bd      	mov	sp, r7
 80125b4:	bd80      	pop	{r7, pc}

080125b6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80125b6:	b590      	push	{r4, r7, lr}
 80125b8:	b089      	sub	sp, #36	; 0x24
 80125ba:	af04      	add	r7, sp, #16
 80125bc:	6078      	str	r0, [r7, #4]
 80125be:	4608      	mov	r0, r1
 80125c0:	4611      	mov	r1, r2
 80125c2:	461a      	mov	r2, r3
 80125c4:	4603      	mov	r3, r0
 80125c6:	70fb      	strb	r3, [r7, #3]
 80125c8:	460b      	mov	r3, r1
 80125ca:	70bb      	strb	r3, [r7, #2]
 80125cc:	4613      	mov	r3, r2
 80125ce:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80125d0:	2300      	movs	r3, #0
 80125d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80125d4:	2300      	movs	r3, #0
 80125d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80125de:	787c      	ldrb	r4, [r7, #1]
 80125e0:	78ba      	ldrb	r2, [r7, #2]
 80125e2:	78f9      	ldrb	r1, [r7, #3]
 80125e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80125e6:	9302      	str	r3, [sp, #8]
 80125e8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80125ec:	9301      	str	r3, [sp, #4]
 80125ee:	f897 3020 	ldrb.w	r3, [r7, #32]
 80125f2:	9300      	str	r3, [sp, #0]
 80125f4:	4623      	mov	r3, r4
 80125f6:	f7f0 fe7a 	bl	80032ee <HAL_HCD_HC_Init>
 80125fa:	4603      	mov	r3, r0
 80125fc:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80125fe:	7bfb      	ldrb	r3, [r7, #15]
 8012600:	4618      	mov	r0, r3
 8012602:	f000 f8bd 	bl	8012780 <USBH_Get_USB_Status>
 8012606:	4603      	mov	r3, r0
 8012608:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801260a:	7bbb      	ldrb	r3, [r7, #14]
}
 801260c:	4618      	mov	r0, r3
 801260e:	3714      	adds	r7, #20
 8012610:	46bd      	mov	sp, r7
 8012612:	bd90      	pop	{r4, r7, pc}

08012614 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012614:	b580      	push	{r7, lr}
 8012616:	b084      	sub	sp, #16
 8012618:	af00      	add	r7, sp, #0
 801261a:	6078      	str	r0, [r7, #4]
 801261c:	460b      	mov	r3, r1
 801261e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012620:	2300      	movs	r3, #0
 8012622:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012624:	2300      	movs	r3, #0
 8012626:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801262e:	78fa      	ldrb	r2, [r7, #3]
 8012630:	4611      	mov	r1, r2
 8012632:	4618      	mov	r0, r3
 8012634:	f7f0 feea 	bl	800340c <HAL_HCD_HC_Halt>
 8012638:	4603      	mov	r3, r0
 801263a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 801263c:	7bfb      	ldrb	r3, [r7, #15]
 801263e:	4618      	mov	r0, r3
 8012640:	f000 f89e 	bl	8012780 <USBH_Get_USB_Status>
 8012644:	4603      	mov	r3, r0
 8012646:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012648:	7bbb      	ldrb	r3, [r7, #14]
}
 801264a:	4618      	mov	r0, r3
 801264c:	3710      	adds	r7, #16
 801264e:	46bd      	mov	sp, r7
 8012650:	bd80      	pop	{r7, pc}

08012652 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8012652:	b590      	push	{r4, r7, lr}
 8012654:	b089      	sub	sp, #36	; 0x24
 8012656:	af04      	add	r7, sp, #16
 8012658:	6078      	str	r0, [r7, #4]
 801265a:	4608      	mov	r0, r1
 801265c:	4611      	mov	r1, r2
 801265e:	461a      	mov	r2, r3
 8012660:	4603      	mov	r3, r0
 8012662:	70fb      	strb	r3, [r7, #3]
 8012664:	460b      	mov	r3, r1
 8012666:	70bb      	strb	r3, [r7, #2]
 8012668:	4613      	mov	r3, r2
 801266a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801266c:	2300      	movs	r3, #0
 801266e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012670:	2300      	movs	r3, #0
 8012672:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 801267a:	787c      	ldrb	r4, [r7, #1]
 801267c:	78ba      	ldrb	r2, [r7, #2]
 801267e:	78f9      	ldrb	r1, [r7, #3]
 8012680:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8012684:	9303      	str	r3, [sp, #12]
 8012686:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012688:	9302      	str	r3, [sp, #8]
 801268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801268c:	9301      	str	r3, [sp, #4]
 801268e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8012692:	9300      	str	r3, [sp, #0]
 8012694:	4623      	mov	r3, r4
 8012696:	f7f0 fedd 	bl	8003454 <HAL_HCD_HC_SubmitRequest>
 801269a:	4603      	mov	r3, r0
 801269c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 801269e:	7bfb      	ldrb	r3, [r7, #15]
 80126a0:	4618      	mov	r0, r3
 80126a2:	f000 f86d 	bl	8012780 <USBH_Get_USB_Status>
 80126a6:	4603      	mov	r3, r0
 80126a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80126aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3714      	adds	r7, #20
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd90      	pop	{r4, r7, pc}

080126b4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b082      	sub	sp, #8
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	6078      	str	r0, [r7, #4]
 80126bc:	460b      	mov	r3, r1
 80126be:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80126c6:	78fa      	ldrb	r2, [r7, #3]
 80126c8:	4611      	mov	r1, r2
 80126ca:	4618      	mov	r0, r3
 80126cc:	f7f1 f971 	bl	80039b2 <HAL_HCD_HC_GetURBState>
 80126d0:	4603      	mov	r3, r0
}
 80126d2:	4618      	mov	r0, r3
 80126d4:	3708      	adds	r7, #8
 80126d6:	46bd      	mov	sp, r7
 80126d8:	bd80      	pop	{r7, pc}

080126da <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80126da:	b580      	push	{r7, lr}
 80126dc:	b082      	sub	sp, #8
 80126de:	af00      	add	r7, sp, #0
 80126e0:	6078      	str	r0, [r7, #4]
 80126e2:	460b      	mov	r3, r1
 80126e4:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80126e6:	687b      	ldr	r3, [r7, #4]
 80126e8:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80126ec:	2b01      	cmp	r3, #1
 80126ee:	d103      	bne.n	80126f8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80126f0:	78fb      	ldrb	r3, [r7, #3]
 80126f2:	4618      	mov	r0, r3
 80126f4:	f000 f870 	bl	80127d8 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80126f8:	20c8      	movs	r0, #200	; 0xc8
 80126fa:	f7ef fceb 	bl	80020d4 <HAL_Delay>
  return USBH_OK;
 80126fe:	2300      	movs	r3, #0
}
 8012700:	4618      	mov	r0, r3
 8012702:	3708      	adds	r7, #8
 8012704:	46bd      	mov	sp, r7
 8012706:	bd80      	pop	{r7, pc}

08012708 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8012708:	b480      	push	{r7}
 801270a:	b085      	sub	sp, #20
 801270c:	af00      	add	r7, sp, #0
 801270e:	6078      	str	r0, [r7, #4]
 8012710:	460b      	mov	r3, r1
 8012712:	70fb      	strb	r3, [r7, #3]
 8012714:	4613      	mov	r3, r2
 8012716:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8012718:	687b      	ldr	r3, [r7, #4]
 801271a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801271e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8012720:	78fb      	ldrb	r3, [r7, #3]
 8012722:	68fa      	ldr	r2, [r7, #12]
 8012724:	212c      	movs	r1, #44	; 0x2c
 8012726:	fb01 f303 	mul.w	r3, r1, r3
 801272a:	4413      	add	r3, r2
 801272c:	333b      	adds	r3, #59	; 0x3b
 801272e:	781b      	ldrb	r3, [r3, #0]
 8012730:	2b00      	cmp	r3, #0
 8012732:	d009      	beq.n	8012748 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8012734:	78fb      	ldrb	r3, [r7, #3]
 8012736:	68fa      	ldr	r2, [r7, #12]
 8012738:	212c      	movs	r1, #44	; 0x2c
 801273a:	fb01 f303 	mul.w	r3, r1, r3
 801273e:	4413      	add	r3, r2
 8012740:	3354      	adds	r3, #84	; 0x54
 8012742:	78ba      	ldrb	r2, [r7, #2]
 8012744:	701a      	strb	r2, [r3, #0]
 8012746:	e008      	b.n	801275a <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012748:	78fb      	ldrb	r3, [r7, #3]
 801274a:	68fa      	ldr	r2, [r7, #12]
 801274c:	212c      	movs	r1, #44	; 0x2c
 801274e:	fb01 f303 	mul.w	r3, r1, r3
 8012752:	4413      	add	r3, r2
 8012754:	3355      	adds	r3, #85	; 0x55
 8012756:	78ba      	ldrb	r2, [r7, #2]
 8012758:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 801275a:	2300      	movs	r3, #0
}
 801275c:	4618      	mov	r0, r3
 801275e:	3714      	adds	r7, #20
 8012760:	46bd      	mov	sp, r7
 8012762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012766:	4770      	bx	lr

08012768 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012768:	b580      	push	{r7, lr}
 801276a:	b082      	sub	sp, #8
 801276c:	af00      	add	r7, sp, #0
 801276e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f7ef fcaf 	bl	80020d4 <HAL_Delay>
}
 8012776:	bf00      	nop
 8012778:	3708      	adds	r7, #8
 801277a:	46bd      	mov	sp, r7
 801277c:	bd80      	pop	{r7, pc}
	...

08012780 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012780:	b480      	push	{r7}
 8012782:	b085      	sub	sp, #20
 8012784:	af00      	add	r7, sp, #0
 8012786:	4603      	mov	r3, r0
 8012788:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801278a:	2300      	movs	r3, #0
 801278c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 801278e:	79fb      	ldrb	r3, [r7, #7]
 8012790:	2b03      	cmp	r3, #3
 8012792:	d817      	bhi.n	80127c4 <USBH_Get_USB_Status+0x44>
 8012794:	a201      	add	r2, pc, #4	; (adr r2, 801279c <USBH_Get_USB_Status+0x1c>)
 8012796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801279a:	bf00      	nop
 801279c:	080127ad 	.word	0x080127ad
 80127a0:	080127b3 	.word	0x080127b3
 80127a4:	080127b9 	.word	0x080127b9
 80127a8:	080127bf 	.word	0x080127bf
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80127ac:	2300      	movs	r3, #0
 80127ae:	73fb      	strb	r3, [r7, #15]
    break;
 80127b0:	e00b      	b.n	80127ca <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80127b2:	2302      	movs	r3, #2
 80127b4:	73fb      	strb	r3, [r7, #15]
    break;
 80127b6:	e008      	b.n	80127ca <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80127b8:	2301      	movs	r3, #1
 80127ba:	73fb      	strb	r3, [r7, #15]
    break;
 80127bc:	e005      	b.n	80127ca <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80127be:	2302      	movs	r3, #2
 80127c0:	73fb      	strb	r3, [r7, #15]
    break;
 80127c2:	e002      	b.n	80127ca <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80127c4:	2302      	movs	r3, #2
 80127c6:	73fb      	strb	r3, [r7, #15]
    break;
 80127c8:	bf00      	nop
  }
  return usb_status;
 80127ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80127cc:	4618      	mov	r0, r3
 80127ce:	3714      	adds	r7, #20
 80127d0:	46bd      	mov	sp, r7
 80127d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127d6:	4770      	bx	lr

080127d8 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80127d8:	b580      	push	{r7, lr}
 80127da:	b084      	sub	sp, #16
 80127dc:	af00      	add	r7, sp, #0
 80127de:	4603      	mov	r3, r0
 80127e0:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80127e2:	79fb      	ldrb	r3, [r7, #7]
 80127e4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80127e6:	79fb      	ldrb	r3, [r7, #7]
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d102      	bne.n	80127f2 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80127ec:	2300      	movs	r3, #0
 80127ee:	73fb      	strb	r3, [r7, #15]
 80127f0:	e001      	b.n	80127f6 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80127f2:	2301      	movs	r3, #1
 80127f4:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 80127f6:	7bfb      	ldrb	r3, [r7, #15]
 80127f8:	461a      	mov	r2, r3
 80127fa:	2104      	movs	r1, #4
 80127fc:	4803      	ldr	r0, [pc, #12]	; (801280c <MX_DriverVbusFS+0x34>)
 80127fe:	f7f0 fce1 	bl	80031c4 <HAL_GPIO_WritePin>
}
 8012802:	bf00      	nop
 8012804:	3710      	adds	r7, #16
 8012806:	46bd      	mov	sp, r7
 8012808:	bd80      	pop	{r7, pc}
 801280a:	bf00      	nop
 801280c:	40022000 	.word	0x40022000

08012810 <__errno>:
 8012810:	4b01      	ldr	r3, [pc, #4]	; (8012818 <__errno+0x8>)
 8012812:	6818      	ldr	r0, [r3, #0]
 8012814:	4770      	bx	lr
 8012816:	bf00      	nop
 8012818:	2000012c 	.word	0x2000012c

0801281c <__libc_init_array>:
 801281c:	b570      	push	{r4, r5, r6, lr}
 801281e:	4d0d      	ldr	r5, [pc, #52]	; (8012854 <__libc_init_array+0x38>)
 8012820:	4c0d      	ldr	r4, [pc, #52]	; (8012858 <__libc_init_array+0x3c>)
 8012822:	1b64      	subs	r4, r4, r5
 8012824:	10a4      	asrs	r4, r4, #2
 8012826:	2600      	movs	r6, #0
 8012828:	42a6      	cmp	r6, r4
 801282a:	d109      	bne.n	8012840 <__libc_init_array+0x24>
 801282c:	4d0b      	ldr	r5, [pc, #44]	; (801285c <__libc_init_array+0x40>)
 801282e:	4c0c      	ldr	r4, [pc, #48]	; (8012860 <__libc_init_array+0x44>)
 8012830:	f002 fd3c 	bl	80152ac <_init>
 8012834:	1b64      	subs	r4, r4, r5
 8012836:	10a4      	asrs	r4, r4, #2
 8012838:	2600      	movs	r6, #0
 801283a:	42a6      	cmp	r6, r4
 801283c:	d105      	bne.n	801284a <__libc_init_array+0x2e>
 801283e:	bd70      	pop	{r4, r5, r6, pc}
 8012840:	f855 3b04 	ldr.w	r3, [r5], #4
 8012844:	4798      	blx	r3
 8012846:	3601      	adds	r6, #1
 8012848:	e7ee      	b.n	8012828 <__libc_init_array+0xc>
 801284a:	f855 3b04 	ldr.w	r3, [r5], #4
 801284e:	4798      	blx	r3
 8012850:	3601      	adds	r6, #1
 8012852:	e7f2      	b.n	801283a <__libc_init_array+0x1e>
 8012854:	0801572c 	.word	0x0801572c
 8012858:	0801572c 	.word	0x0801572c
 801285c:	0801572c 	.word	0x0801572c
 8012860:	08015730 	.word	0x08015730

08012864 <malloc>:
 8012864:	4b02      	ldr	r3, [pc, #8]	; (8012870 <malloc+0xc>)
 8012866:	4601      	mov	r1, r0
 8012868:	6818      	ldr	r0, [r3, #0]
 801286a:	f000 b87f 	b.w	801296c <_malloc_r>
 801286e:	bf00      	nop
 8012870:	2000012c 	.word	0x2000012c

08012874 <free>:
 8012874:	4b02      	ldr	r3, [pc, #8]	; (8012880 <free+0xc>)
 8012876:	4601      	mov	r1, r0
 8012878:	6818      	ldr	r0, [r3, #0]
 801287a:	f000 b80b 	b.w	8012894 <_free_r>
 801287e:	bf00      	nop
 8012880:	2000012c 	.word	0x2000012c

08012884 <memset>:
 8012884:	4402      	add	r2, r0
 8012886:	4603      	mov	r3, r0
 8012888:	4293      	cmp	r3, r2
 801288a:	d100      	bne.n	801288e <memset+0xa>
 801288c:	4770      	bx	lr
 801288e:	f803 1b01 	strb.w	r1, [r3], #1
 8012892:	e7f9      	b.n	8012888 <memset+0x4>

08012894 <_free_r>:
 8012894:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012896:	2900      	cmp	r1, #0
 8012898:	d044      	beq.n	8012924 <_free_r+0x90>
 801289a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801289e:	9001      	str	r0, [sp, #4]
 80128a0:	2b00      	cmp	r3, #0
 80128a2:	f1a1 0404 	sub.w	r4, r1, #4
 80128a6:	bfb8      	it	lt
 80128a8:	18e4      	addlt	r4, r4, r3
 80128aa:	f001 fbd9 	bl	8014060 <__malloc_lock>
 80128ae:	4a1e      	ldr	r2, [pc, #120]	; (8012928 <_free_r+0x94>)
 80128b0:	9801      	ldr	r0, [sp, #4]
 80128b2:	6813      	ldr	r3, [r2, #0]
 80128b4:	b933      	cbnz	r3, 80128c4 <_free_r+0x30>
 80128b6:	6063      	str	r3, [r4, #4]
 80128b8:	6014      	str	r4, [r2, #0]
 80128ba:	b003      	add	sp, #12
 80128bc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80128c0:	f001 bbd4 	b.w	801406c <__malloc_unlock>
 80128c4:	42a3      	cmp	r3, r4
 80128c6:	d908      	bls.n	80128da <_free_r+0x46>
 80128c8:	6825      	ldr	r5, [r4, #0]
 80128ca:	1961      	adds	r1, r4, r5
 80128cc:	428b      	cmp	r3, r1
 80128ce:	bf01      	itttt	eq
 80128d0:	6819      	ldreq	r1, [r3, #0]
 80128d2:	685b      	ldreq	r3, [r3, #4]
 80128d4:	1949      	addeq	r1, r1, r5
 80128d6:	6021      	streq	r1, [r4, #0]
 80128d8:	e7ed      	b.n	80128b6 <_free_r+0x22>
 80128da:	461a      	mov	r2, r3
 80128dc:	685b      	ldr	r3, [r3, #4]
 80128de:	b10b      	cbz	r3, 80128e4 <_free_r+0x50>
 80128e0:	42a3      	cmp	r3, r4
 80128e2:	d9fa      	bls.n	80128da <_free_r+0x46>
 80128e4:	6811      	ldr	r1, [r2, #0]
 80128e6:	1855      	adds	r5, r2, r1
 80128e8:	42a5      	cmp	r5, r4
 80128ea:	d10b      	bne.n	8012904 <_free_r+0x70>
 80128ec:	6824      	ldr	r4, [r4, #0]
 80128ee:	4421      	add	r1, r4
 80128f0:	1854      	adds	r4, r2, r1
 80128f2:	42a3      	cmp	r3, r4
 80128f4:	6011      	str	r1, [r2, #0]
 80128f6:	d1e0      	bne.n	80128ba <_free_r+0x26>
 80128f8:	681c      	ldr	r4, [r3, #0]
 80128fa:	685b      	ldr	r3, [r3, #4]
 80128fc:	6053      	str	r3, [r2, #4]
 80128fe:	4421      	add	r1, r4
 8012900:	6011      	str	r1, [r2, #0]
 8012902:	e7da      	b.n	80128ba <_free_r+0x26>
 8012904:	d902      	bls.n	801290c <_free_r+0x78>
 8012906:	230c      	movs	r3, #12
 8012908:	6003      	str	r3, [r0, #0]
 801290a:	e7d6      	b.n	80128ba <_free_r+0x26>
 801290c:	6825      	ldr	r5, [r4, #0]
 801290e:	1961      	adds	r1, r4, r5
 8012910:	428b      	cmp	r3, r1
 8012912:	bf04      	itt	eq
 8012914:	6819      	ldreq	r1, [r3, #0]
 8012916:	685b      	ldreq	r3, [r3, #4]
 8012918:	6063      	str	r3, [r4, #4]
 801291a:	bf04      	itt	eq
 801291c:	1949      	addeq	r1, r1, r5
 801291e:	6021      	streq	r1, [r4, #0]
 8012920:	6054      	str	r4, [r2, #4]
 8012922:	e7ca      	b.n	80128ba <_free_r+0x26>
 8012924:	b003      	add	sp, #12
 8012926:	bd30      	pop	{r4, r5, pc}
 8012928:	200039c4 	.word	0x200039c4

0801292c <sbrk_aligned>:
 801292c:	b570      	push	{r4, r5, r6, lr}
 801292e:	4e0e      	ldr	r6, [pc, #56]	; (8012968 <sbrk_aligned+0x3c>)
 8012930:	460c      	mov	r4, r1
 8012932:	6831      	ldr	r1, [r6, #0]
 8012934:	4605      	mov	r5, r0
 8012936:	b911      	cbnz	r1, 801293e <sbrk_aligned+0x12>
 8012938:	f000 fcf6 	bl	8013328 <_sbrk_r>
 801293c:	6030      	str	r0, [r6, #0]
 801293e:	4621      	mov	r1, r4
 8012940:	4628      	mov	r0, r5
 8012942:	f000 fcf1 	bl	8013328 <_sbrk_r>
 8012946:	1c43      	adds	r3, r0, #1
 8012948:	d00a      	beq.n	8012960 <sbrk_aligned+0x34>
 801294a:	1cc4      	adds	r4, r0, #3
 801294c:	f024 0403 	bic.w	r4, r4, #3
 8012950:	42a0      	cmp	r0, r4
 8012952:	d007      	beq.n	8012964 <sbrk_aligned+0x38>
 8012954:	1a21      	subs	r1, r4, r0
 8012956:	4628      	mov	r0, r5
 8012958:	f000 fce6 	bl	8013328 <_sbrk_r>
 801295c:	3001      	adds	r0, #1
 801295e:	d101      	bne.n	8012964 <sbrk_aligned+0x38>
 8012960:	f04f 34ff 	mov.w	r4, #4294967295
 8012964:	4620      	mov	r0, r4
 8012966:	bd70      	pop	{r4, r5, r6, pc}
 8012968:	200039c8 	.word	0x200039c8

0801296c <_malloc_r>:
 801296c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012970:	1ccd      	adds	r5, r1, #3
 8012972:	f025 0503 	bic.w	r5, r5, #3
 8012976:	3508      	adds	r5, #8
 8012978:	2d0c      	cmp	r5, #12
 801297a:	bf38      	it	cc
 801297c:	250c      	movcc	r5, #12
 801297e:	2d00      	cmp	r5, #0
 8012980:	4607      	mov	r7, r0
 8012982:	db01      	blt.n	8012988 <_malloc_r+0x1c>
 8012984:	42a9      	cmp	r1, r5
 8012986:	d905      	bls.n	8012994 <_malloc_r+0x28>
 8012988:	230c      	movs	r3, #12
 801298a:	603b      	str	r3, [r7, #0]
 801298c:	2600      	movs	r6, #0
 801298e:	4630      	mov	r0, r6
 8012990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012994:	4e2e      	ldr	r6, [pc, #184]	; (8012a50 <_malloc_r+0xe4>)
 8012996:	f001 fb63 	bl	8014060 <__malloc_lock>
 801299a:	6833      	ldr	r3, [r6, #0]
 801299c:	461c      	mov	r4, r3
 801299e:	bb34      	cbnz	r4, 80129ee <_malloc_r+0x82>
 80129a0:	4629      	mov	r1, r5
 80129a2:	4638      	mov	r0, r7
 80129a4:	f7ff ffc2 	bl	801292c <sbrk_aligned>
 80129a8:	1c43      	adds	r3, r0, #1
 80129aa:	4604      	mov	r4, r0
 80129ac:	d14d      	bne.n	8012a4a <_malloc_r+0xde>
 80129ae:	6834      	ldr	r4, [r6, #0]
 80129b0:	4626      	mov	r6, r4
 80129b2:	2e00      	cmp	r6, #0
 80129b4:	d140      	bne.n	8012a38 <_malloc_r+0xcc>
 80129b6:	6823      	ldr	r3, [r4, #0]
 80129b8:	4631      	mov	r1, r6
 80129ba:	4638      	mov	r0, r7
 80129bc:	eb04 0803 	add.w	r8, r4, r3
 80129c0:	f000 fcb2 	bl	8013328 <_sbrk_r>
 80129c4:	4580      	cmp	r8, r0
 80129c6:	d13a      	bne.n	8012a3e <_malloc_r+0xd2>
 80129c8:	6821      	ldr	r1, [r4, #0]
 80129ca:	3503      	adds	r5, #3
 80129cc:	1a6d      	subs	r5, r5, r1
 80129ce:	f025 0503 	bic.w	r5, r5, #3
 80129d2:	3508      	adds	r5, #8
 80129d4:	2d0c      	cmp	r5, #12
 80129d6:	bf38      	it	cc
 80129d8:	250c      	movcc	r5, #12
 80129da:	4629      	mov	r1, r5
 80129dc:	4638      	mov	r0, r7
 80129de:	f7ff ffa5 	bl	801292c <sbrk_aligned>
 80129e2:	3001      	adds	r0, #1
 80129e4:	d02b      	beq.n	8012a3e <_malloc_r+0xd2>
 80129e6:	6823      	ldr	r3, [r4, #0]
 80129e8:	442b      	add	r3, r5
 80129ea:	6023      	str	r3, [r4, #0]
 80129ec:	e00e      	b.n	8012a0c <_malloc_r+0xa0>
 80129ee:	6822      	ldr	r2, [r4, #0]
 80129f0:	1b52      	subs	r2, r2, r5
 80129f2:	d41e      	bmi.n	8012a32 <_malloc_r+0xc6>
 80129f4:	2a0b      	cmp	r2, #11
 80129f6:	d916      	bls.n	8012a26 <_malloc_r+0xba>
 80129f8:	1961      	adds	r1, r4, r5
 80129fa:	42a3      	cmp	r3, r4
 80129fc:	6025      	str	r5, [r4, #0]
 80129fe:	bf18      	it	ne
 8012a00:	6059      	strne	r1, [r3, #4]
 8012a02:	6863      	ldr	r3, [r4, #4]
 8012a04:	bf08      	it	eq
 8012a06:	6031      	streq	r1, [r6, #0]
 8012a08:	5162      	str	r2, [r4, r5]
 8012a0a:	604b      	str	r3, [r1, #4]
 8012a0c:	4638      	mov	r0, r7
 8012a0e:	f104 060b 	add.w	r6, r4, #11
 8012a12:	f001 fb2b 	bl	801406c <__malloc_unlock>
 8012a16:	f026 0607 	bic.w	r6, r6, #7
 8012a1a:	1d23      	adds	r3, r4, #4
 8012a1c:	1af2      	subs	r2, r6, r3
 8012a1e:	d0b6      	beq.n	801298e <_malloc_r+0x22>
 8012a20:	1b9b      	subs	r3, r3, r6
 8012a22:	50a3      	str	r3, [r4, r2]
 8012a24:	e7b3      	b.n	801298e <_malloc_r+0x22>
 8012a26:	6862      	ldr	r2, [r4, #4]
 8012a28:	42a3      	cmp	r3, r4
 8012a2a:	bf0c      	ite	eq
 8012a2c:	6032      	streq	r2, [r6, #0]
 8012a2e:	605a      	strne	r2, [r3, #4]
 8012a30:	e7ec      	b.n	8012a0c <_malloc_r+0xa0>
 8012a32:	4623      	mov	r3, r4
 8012a34:	6864      	ldr	r4, [r4, #4]
 8012a36:	e7b2      	b.n	801299e <_malloc_r+0x32>
 8012a38:	4634      	mov	r4, r6
 8012a3a:	6876      	ldr	r6, [r6, #4]
 8012a3c:	e7b9      	b.n	80129b2 <_malloc_r+0x46>
 8012a3e:	230c      	movs	r3, #12
 8012a40:	603b      	str	r3, [r7, #0]
 8012a42:	4638      	mov	r0, r7
 8012a44:	f001 fb12 	bl	801406c <__malloc_unlock>
 8012a48:	e7a1      	b.n	801298e <_malloc_r+0x22>
 8012a4a:	6025      	str	r5, [r4, #0]
 8012a4c:	e7de      	b.n	8012a0c <_malloc_r+0xa0>
 8012a4e:	bf00      	nop
 8012a50:	200039c4 	.word	0x200039c4

08012a54 <__cvt>:
 8012a54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012a58:	ec55 4b10 	vmov	r4, r5, d0
 8012a5c:	2d00      	cmp	r5, #0
 8012a5e:	460e      	mov	r6, r1
 8012a60:	4619      	mov	r1, r3
 8012a62:	462b      	mov	r3, r5
 8012a64:	bfbb      	ittet	lt
 8012a66:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012a6a:	461d      	movlt	r5, r3
 8012a6c:	2300      	movge	r3, #0
 8012a6e:	232d      	movlt	r3, #45	; 0x2d
 8012a70:	700b      	strb	r3, [r1, #0]
 8012a72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8012a74:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012a78:	4691      	mov	r9, r2
 8012a7a:	f023 0820 	bic.w	r8, r3, #32
 8012a7e:	bfbc      	itt	lt
 8012a80:	4622      	movlt	r2, r4
 8012a82:	4614      	movlt	r4, r2
 8012a84:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012a88:	d005      	beq.n	8012a96 <__cvt+0x42>
 8012a8a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012a8e:	d100      	bne.n	8012a92 <__cvt+0x3e>
 8012a90:	3601      	adds	r6, #1
 8012a92:	2102      	movs	r1, #2
 8012a94:	e000      	b.n	8012a98 <__cvt+0x44>
 8012a96:	2103      	movs	r1, #3
 8012a98:	ab03      	add	r3, sp, #12
 8012a9a:	9301      	str	r3, [sp, #4]
 8012a9c:	ab02      	add	r3, sp, #8
 8012a9e:	9300      	str	r3, [sp, #0]
 8012aa0:	ec45 4b10 	vmov	d0, r4, r5
 8012aa4:	4653      	mov	r3, sl
 8012aa6:	4632      	mov	r2, r6
 8012aa8:	f000 fcda 	bl	8013460 <_dtoa_r>
 8012aac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012ab0:	4607      	mov	r7, r0
 8012ab2:	d102      	bne.n	8012aba <__cvt+0x66>
 8012ab4:	f019 0f01 	tst.w	r9, #1
 8012ab8:	d022      	beq.n	8012b00 <__cvt+0xac>
 8012aba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012abe:	eb07 0906 	add.w	r9, r7, r6
 8012ac2:	d110      	bne.n	8012ae6 <__cvt+0x92>
 8012ac4:	783b      	ldrb	r3, [r7, #0]
 8012ac6:	2b30      	cmp	r3, #48	; 0x30
 8012ac8:	d10a      	bne.n	8012ae0 <__cvt+0x8c>
 8012aca:	2200      	movs	r2, #0
 8012acc:	2300      	movs	r3, #0
 8012ace:	4620      	mov	r0, r4
 8012ad0:	4629      	mov	r1, r5
 8012ad2:	f7ee f819 	bl	8000b08 <__aeabi_dcmpeq>
 8012ad6:	b918      	cbnz	r0, 8012ae0 <__cvt+0x8c>
 8012ad8:	f1c6 0601 	rsb	r6, r6, #1
 8012adc:	f8ca 6000 	str.w	r6, [sl]
 8012ae0:	f8da 3000 	ldr.w	r3, [sl]
 8012ae4:	4499      	add	r9, r3
 8012ae6:	2200      	movs	r2, #0
 8012ae8:	2300      	movs	r3, #0
 8012aea:	4620      	mov	r0, r4
 8012aec:	4629      	mov	r1, r5
 8012aee:	f7ee f80b 	bl	8000b08 <__aeabi_dcmpeq>
 8012af2:	b108      	cbz	r0, 8012af8 <__cvt+0xa4>
 8012af4:	f8cd 900c 	str.w	r9, [sp, #12]
 8012af8:	2230      	movs	r2, #48	; 0x30
 8012afa:	9b03      	ldr	r3, [sp, #12]
 8012afc:	454b      	cmp	r3, r9
 8012afe:	d307      	bcc.n	8012b10 <__cvt+0xbc>
 8012b00:	9b03      	ldr	r3, [sp, #12]
 8012b02:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8012b04:	1bdb      	subs	r3, r3, r7
 8012b06:	4638      	mov	r0, r7
 8012b08:	6013      	str	r3, [r2, #0]
 8012b0a:	b004      	add	sp, #16
 8012b0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b10:	1c59      	adds	r1, r3, #1
 8012b12:	9103      	str	r1, [sp, #12]
 8012b14:	701a      	strb	r2, [r3, #0]
 8012b16:	e7f0      	b.n	8012afa <__cvt+0xa6>

08012b18 <__exponent>:
 8012b18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8012b1a:	4603      	mov	r3, r0
 8012b1c:	2900      	cmp	r1, #0
 8012b1e:	bfb8      	it	lt
 8012b20:	4249      	neglt	r1, r1
 8012b22:	f803 2b02 	strb.w	r2, [r3], #2
 8012b26:	bfb4      	ite	lt
 8012b28:	222d      	movlt	r2, #45	; 0x2d
 8012b2a:	222b      	movge	r2, #43	; 0x2b
 8012b2c:	2909      	cmp	r1, #9
 8012b2e:	7042      	strb	r2, [r0, #1]
 8012b30:	dd2a      	ble.n	8012b88 <__exponent+0x70>
 8012b32:	f10d 0407 	add.w	r4, sp, #7
 8012b36:	46a4      	mov	ip, r4
 8012b38:	270a      	movs	r7, #10
 8012b3a:	46a6      	mov	lr, r4
 8012b3c:	460a      	mov	r2, r1
 8012b3e:	fb91 f6f7 	sdiv	r6, r1, r7
 8012b42:	fb07 1516 	mls	r5, r7, r6, r1
 8012b46:	3530      	adds	r5, #48	; 0x30
 8012b48:	2a63      	cmp	r2, #99	; 0x63
 8012b4a:	f104 34ff 	add.w	r4, r4, #4294967295
 8012b4e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8012b52:	4631      	mov	r1, r6
 8012b54:	dcf1      	bgt.n	8012b3a <__exponent+0x22>
 8012b56:	3130      	adds	r1, #48	; 0x30
 8012b58:	f1ae 0502 	sub.w	r5, lr, #2
 8012b5c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012b60:	1c44      	adds	r4, r0, #1
 8012b62:	4629      	mov	r1, r5
 8012b64:	4561      	cmp	r1, ip
 8012b66:	d30a      	bcc.n	8012b7e <__exponent+0x66>
 8012b68:	f10d 0209 	add.w	r2, sp, #9
 8012b6c:	eba2 020e 	sub.w	r2, r2, lr
 8012b70:	4565      	cmp	r5, ip
 8012b72:	bf88      	it	hi
 8012b74:	2200      	movhi	r2, #0
 8012b76:	4413      	add	r3, r2
 8012b78:	1a18      	subs	r0, r3, r0
 8012b7a:	b003      	add	sp, #12
 8012b7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012b7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8012b82:	f804 2f01 	strb.w	r2, [r4, #1]!
 8012b86:	e7ed      	b.n	8012b64 <__exponent+0x4c>
 8012b88:	2330      	movs	r3, #48	; 0x30
 8012b8a:	3130      	adds	r1, #48	; 0x30
 8012b8c:	7083      	strb	r3, [r0, #2]
 8012b8e:	70c1      	strb	r1, [r0, #3]
 8012b90:	1d03      	adds	r3, r0, #4
 8012b92:	e7f1      	b.n	8012b78 <__exponent+0x60>

08012b94 <_printf_float>:
 8012b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012b98:	ed2d 8b02 	vpush	{d8}
 8012b9c:	b08d      	sub	sp, #52	; 0x34
 8012b9e:	460c      	mov	r4, r1
 8012ba0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8012ba4:	4616      	mov	r6, r2
 8012ba6:	461f      	mov	r7, r3
 8012ba8:	4605      	mov	r5, r0
 8012baa:	f001 fa47 	bl	801403c <_localeconv_r>
 8012bae:	f8d0 a000 	ldr.w	sl, [r0]
 8012bb2:	4650      	mov	r0, sl
 8012bb4:	f7ed fb2c 	bl	8000210 <strlen>
 8012bb8:	2300      	movs	r3, #0
 8012bba:	930a      	str	r3, [sp, #40]	; 0x28
 8012bbc:	6823      	ldr	r3, [r4, #0]
 8012bbe:	9305      	str	r3, [sp, #20]
 8012bc0:	f8d8 3000 	ldr.w	r3, [r8]
 8012bc4:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012bc8:	3307      	adds	r3, #7
 8012bca:	f023 0307 	bic.w	r3, r3, #7
 8012bce:	f103 0208 	add.w	r2, r3, #8
 8012bd2:	f8c8 2000 	str.w	r2, [r8]
 8012bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bda:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012bde:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8012be2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8012be6:	9307      	str	r3, [sp, #28]
 8012be8:	f8cd 8018 	str.w	r8, [sp, #24]
 8012bec:	ee08 0a10 	vmov	s16, r0
 8012bf0:	4b9f      	ldr	r3, [pc, #636]	; (8012e70 <_printf_float+0x2dc>)
 8012bf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012bf6:	f04f 32ff 	mov.w	r2, #4294967295
 8012bfa:	f7ed ffb7 	bl	8000b6c <__aeabi_dcmpun>
 8012bfe:	bb88      	cbnz	r0, 8012c64 <_printf_float+0xd0>
 8012c00:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8012c04:	4b9a      	ldr	r3, [pc, #616]	; (8012e70 <_printf_float+0x2dc>)
 8012c06:	f04f 32ff 	mov.w	r2, #4294967295
 8012c0a:	f7ed ff91 	bl	8000b30 <__aeabi_dcmple>
 8012c0e:	bb48      	cbnz	r0, 8012c64 <_printf_float+0xd0>
 8012c10:	2200      	movs	r2, #0
 8012c12:	2300      	movs	r3, #0
 8012c14:	4640      	mov	r0, r8
 8012c16:	4649      	mov	r1, r9
 8012c18:	f7ed ff80 	bl	8000b1c <__aeabi_dcmplt>
 8012c1c:	b110      	cbz	r0, 8012c24 <_printf_float+0x90>
 8012c1e:	232d      	movs	r3, #45	; 0x2d
 8012c20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c24:	4b93      	ldr	r3, [pc, #588]	; (8012e74 <_printf_float+0x2e0>)
 8012c26:	4894      	ldr	r0, [pc, #592]	; (8012e78 <_printf_float+0x2e4>)
 8012c28:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8012c2c:	bf94      	ite	ls
 8012c2e:	4698      	movls	r8, r3
 8012c30:	4680      	movhi	r8, r0
 8012c32:	2303      	movs	r3, #3
 8012c34:	6123      	str	r3, [r4, #16]
 8012c36:	9b05      	ldr	r3, [sp, #20]
 8012c38:	f023 0204 	bic.w	r2, r3, #4
 8012c3c:	6022      	str	r2, [r4, #0]
 8012c3e:	f04f 0900 	mov.w	r9, #0
 8012c42:	9700      	str	r7, [sp, #0]
 8012c44:	4633      	mov	r3, r6
 8012c46:	aa0b      	add	r2, sp, #44	; 0x2c
 8012c48:	4621      	mov	r1, r4
 8012c4a:	4628      	mov	r0, r5
 8012c4c:	f000 f9d8 	bl	8013000 <_printf_common>
 8012c50:	3001      	adds	r0, #1
 8012c52:	f040 8090 	bne.w	8012d76 <_printf_float+0x1e2>
 8012c56:	f04f 30ff 	mov.w	r0, #4294967295
 8012c5a:	b00d      	add	sp, #52	; 0x34
 8012c5c:	ecbd 8b02 	vpop	{d8}
 8012c60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c64:	4642      	mov	r2, r8
 8012c66:	464b      	mov	r3, r9
 8012c68:	4640      	mov	r0, r8
 8012c6a:	4649      	mov	r1, r9
 8012c6c:	f7ed ff7e 	bl	8000b6c <__aeabi_dcmpun>
 8012c70:	b140      	cbz	r0, 8012c84 <_printf_float+0xf0>
 8012c72:	464b      	mov	r3, r9
 8012c74:	2b00      	cmp	r3, #0
 8012c76:	bfbc      	itt	lt
 8012c78:	232d      	movlt	r3, #45	; 0x2d
 8012c7a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012c7e:	487f      	ldr	r0, [pc, #508]	; (8012e7c <_printf_float+0x2e8>)
 8012c80:	4b7f      	ldr	r3, [pc, #508]	; (8012e80 <_printf_float+0x2ec>)
 8012c82:	e7d1      	b.n	8012c28 <_printf_float+0x94>
 8012c84:	6863      	ldr	r3, [r4, #4]
 8012c86:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012c8a:	9206      	str	r2, [sp, #24]
 8012c8c:	1c5a      	adds	r2, r3, #1
 8012c8e:	d13f      	bne.n	8012d10 <_printf_float+0x17c>
 8012c90:	2306      	movs	r3, #6
 8012c92:	6063      	str	r3, [r4, #4]
 8012c94:	9b05      	ldr	r3, [sp, #20]
 8012c96:	6861      	ldr	r1, [r4, #4]
 8012c98:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012c9c:	2300      	movs	r3, #0
 8012c9e:	9303      	str	r3, [sp, #12]
 8012ca0:	ab0a      	add	r3, sp, #40	; 0x28
 8012ca2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8012ca6:	ab09      	add	r3, sp, #36	; 0x24
 8012ca8:	ec49 8b10 	vmov	d0, r8, r9
 8012cac:	9300      	str	r3, [sp, #0]
 8012cae:	6022      	str	r2, [r4, #0]
 8012cb0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8012cb4:	4628      	mov	r0, r5
 8012cb6:	f7ff fecd 	bl	8012a54 <__cvt>
 8012cba:	9b06      	ldr	r3, [sp, #24]
 8012cbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012cbe:	2b47      	cmp	r3, #71	; 0x47
 8012cc0:	4680      	mov	r8, r0
 8012cc2:	d108      	bne.n	8012cd6 <_printf_float+0x142>
 8012cc4:	1cc8      	adds	r0, r1, #3
 8012cc6:	db02      	blt.n	8012cce <_printf_float+0x13a>
 8012cc8:	6863      	ldr	r3, [r4, #4]
 8012cca:	4299      	cmp	r1, r3
 8012ccc:	dd41      	ble.n	8012d52 <_printf_float+0x1be>
 8012cce:	f1ab 0b02 	sub.w	fp, fp, #2
 8012cd2:	fa5f fb8b 	uxtb.w	fp, fp
 8012cd6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012cda:	d820      	bhi.n	8012d1e <_printf_float+0x18a>
 8012cdc:	3901      	subs	r1, #1
 8012cde:	465a      	mov	r2, fp
 8012ce0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8012ce4:	9109      	str	r1, [sp, #36]	; 0x24
 8012ce6:	f7ff ff17 	bl	8012b18 <__exponent>
 8012cea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012cec:	1813      	adds	r3, r2, r0
 8012cee:	2a01      	cmp	r2, #1
 8012cf0:	4681      	mov	r9, r0
 8012cf2:	6123      	str	r3, [r4, #16]
 8012cf4:	dc02      	bgt.n	8012cfc <_printf_float+0x168>
 8012cf6:	6822      	ldr	r2, [r4, #0]
 8012cf8:	07d2      	lsls	r2, r2, #31
 8012cfa:	d501      	bpl.n	8012d00 <_printf_float+0x16c>
 8012cfc:	3301      	adds	r3, #1
 8012cfe:	6123      	str	r3, [r4, #16]
 8012d00:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8012d04:	2b00      	cmp	r3, #0
 8012d06:	d09c      	beq.n	8012c42 <_printf_float+0xae>
 8012d08:	232d      	movs	r3, #45	; 0x2d
 8012d0a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d0e:	e798      	b.n	8012c42 <_printf_float+0xae>
 8012d10:	9a06      	ldr	r2, [sp, #24]
 8012d12:	2a47      	cmp	r2, #71	; 0x47
 8012d14:	d1be      	bne.n	8012c94 <_printf_float+0x100>
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d1bc      	bne.n	8012c94 <_printf_float+0x100>
 8012d1a:	2301      	movs	r3, #1
 8012d1c:	e7b9      	b.n	8012c92 <_printf_float+0xfe>
 8012d1e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8012d22:	d118      	bne.n	8012d56 <_printf_float+0x1c2>
 8012d24:	2900      	cmp	r1, #0
 8012d26:	6863      	ldr	r3, [r4, #4]
 8012d28:	dd0b      	ble.n	8012d42 <_printf_float+0x1ae>
 8012d2a:	6121      	str	r1, [r4, #16]
 8012d2c:	b913      	cbnz	r3, 8012d34 <_printf_float+0x1a0>
 8012d2e:	6822      	ldr	r2, [r4, #0]
 8012d30:	07d0      	lsls	r0, r2, #31
 8012d32:	d502      	bpl.n	8012d3a <_printf_float+0x1a6>
 8012d34:	3301      	adds	r3, #1
 8012d36:	440b      	add	r3, r1
 8012d38:	6123      	str	r3, [r4, #16]
 8012d3a:	65a1      	str	r1, [r4, #88]	; 0x58
 8012d3c:	f04f 0900 	mov.w	r9, #0
 8012d40:	e7de      	b.n	8012d00 <_printf_float+0x16c>
 8012d42:	b913      	cbnz	r3, 8012d4a <_printf_float+0x1b6>
 8012d44:	6822      	ldr	r2, [r4, #0]
 8012d46:	07d2      	lsls	r2, r2, #31
 8012d48:	d501      	bpl.n	8012d4e <_printf_float+0x1ba>
 8012d4a:	3302      	adds	r3, #2
 8012d4c:	e7f4      	b.n	8012d38 <_printf_float+0x1a4>
 8012d4e:	2301      	movs	r3, #1
 8012d50:	e7f2      	b.n	8012d38 <_printf_float+0x1a4>
 8012d52:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8012d56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012d58:	4299      	cmp	r1, r3
 8012d5a:	db05      	blt.n	8012d68 <_printf_float+0x1d4>
 8012d5c:	6823      	ldr	r3, [r4, #0]
 8012d5e:	6121      	str	r1, [r4, #16]
 8012d60:	07d8      	lsls	r0, r3, #31
 8012d62:	d5ea      	bpl.n	8012d3a <_printf_float+0x1a6>
 8012d64:	1c4b      	adds	r3, r1, #1
 8012d66:	e7e7      	b.n	8012d38 <_printf_float+0x1a4>
 8012d68:	2900      	cmp	r1, #0
 8012d6a:	bfd4      	ite	le
 8012d6c:	f1c1 0202 	rsble	r2, r1, #2
 8012d70:	2201      	movgt	r2, #1
 8012d72:	4413      	add	r3, r2
 8012d74:	e7e0      	b.n	8012d38 <_printf_float+0x1a4>
 8012d76:	6823      	ldr	r3, [r4, #0]
 8012d78:	055a      	lsls	r2, r3, #21
 8012d7a:	d407      	bmi.n	8012d8c <_printf_float+0x1f8>
 8012d7c:	6923      	ldr	r3, [r4, #16]
 8012d7e:	4642      	mov	r2, r8
 8012d80:	4631      	mov	r1, r6
 8012d82:	4628      	mov	r0, r5
 8012d84:	47b8      	blx	r7
 8012d86:	3001      	adds	r0, #1
 8012d88:	d12c      	bne.n	8012de4 <_printf_float+0x250>
 8012d8a:	e764      	b.n	8012c56 <_printf_float+0xc2>
 8012d8c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012d90:	f240 80e0 	bls.w	8012f54 <_printf_float+0x3c0>
 8012d94:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012d98:	2200      	movs	r2, #0
 8012d9a:	2300      	movs	r3, #0
 8012d9c:	f7ed feb4 	bl	8000b08 <__aeabi_dcmpeq>
 8012da0:	2800      	cmp	r0, #0
 8012da2:	d034      	beq.n	8012e0e <_printf_float+0x27a>
 8012da4:	4a37      	ldr	r2, [pc, #220]	; (8012e84 <_printf_float+0x2f0>)
 8012da6:	2301      	movs	r3, #1
 8012da8:	4631      	mov	r1, r6
 8012daa:	4628      	mov	r0, r5
 8012dac:	47b8      	blx	r7
 8012dae:	3001      	adds	r0, #1
 8012db0:	f43f af51 	beq.w	8012c56 <_printf_float+0xc2>
 8012db4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012db8:	429a      	cmp	r2, r3
 8012dba:	db02      	blt.n	8012dc2 <_printf_float+0x22e>
 8012dbc:	6823      	ldr	r3, [r4, #0]
 8012dbe:	07d8      	lsls	r0, r3, #31
 8012dc0:	d510      	bpl.n	8012de4 <_printf_float+0x250>
 8012dc2:	ee18 3a10 	vmov	r3, s16
 8012dc6:	4652      	mov	r2, sl
 8012dc8:	4631      	mov	r1, r6
 8012dca:	4628      	mov	r0, r5
 8012dcc:	47b8      	blx	r7
 8012dce:	3001      	adds	r0, #1
 8012dd0:	f43f af41 	beq.w	8012c56 <_printf_float+0xc2>
 8012dd4:	f04f 0800 	mov.w	r8, #0
 8012dd8:	f104 091a 	add.w	r9, r4, #26
 8012ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012dde:	3b01      	subs	r3, #1
 8012de0:	4543      	cmp	r3, r8
 8012de2:	dc09      	bgt.n	8012df8 <_printf_float+0x264>
 8012de4:	6823      	ldr	r3, [r4, #0]
 8012de6:	079b      	lsls	r3, r3, #30
 8012de8:	f100 8105 	bmi.w	8012ff6 <_printf_float+0x462>
 8012dec:	68e0      	ldr	r0, [r4, #12]
 8012dee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8012df0:	4298      	cmp	r0, r3
 8012df2:	bfb8      	it	lt
 8012df4:	4618      	movlt	r0, r3
 8012df6:	e730      	b.n	8012c5a <_printf_float+0xc6>
 8012df8:	2301      	movs	r3, #1
 8012dfa:	464a      	mov	r2, r9
 8012dfc:	4631      	mov	r1, r6
 8012dfe:	4628      	mov	r0, r5
 8012e00:	47b8      	blx	r7
 8012e02:	3001      	adds	r0, #1
 8012e04:	f43f af27 	beq.w	8012c56 <_printf_float+0xc2>
 8012e08:	f108 0801 	add.w	r8, r8, #1
 8012e0c:	e7e6      	b.n	8012ddc <_printf_float+0x248>
 8012e0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e10:	2b00      	cmp	r3, #0
 8012e12:	dc39      	bgt.n	8012e88 <_printf_float+0x2f4>
 8012e14:	4a1b      	ldr	r2, [pc, #108]	; (8012e84 <_printf_float+0x2f0>)
 8012e16:	2301      	movs	r3, #1
 8012e18:	4631      	mov	r1, r6
 8012e1a:	4628      	mov	r0, r5
 8012e1c:	47b8      	blx	r7
 8012e1e:	3001      	adds	r0, #1
 8012e20:	f43f af19 	beq.w	8012c56 <_printf_float+0xc2>
 8012e24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012e28:	4313      	orrs	r3, r2
 8012e2a:	d102      	bne.n	8012e32 <_printf_float+0x29e>
 8012e2c:	6823      	ldr	r3, [r4, #0]
 8012e2e:	07d9      	lsls	r1, r3, #31
 8012e30:	d5d8      	bpl.n	8012de4 <_printf_float+0x250>
 8012e32:	ee18 3a10 	vmov	r3, s16
 8012e36:	4652      	mov	r2, sl
 8012e38:	4631      	mov	r1, r6
 8012e3a:	4628      	mov	r0, r5
 8012e3c:	47b8      	blx	r7
 8012e3e:	3001      	adds	r0, #1
 8012e40:	f43f af09 	beq.w	8012c56 <_printf_float+0xc2>
 8012e44:	f04f 0900 	mov.w	r9, #0
 8012e48:	f104 0a1a 	add.w	sl, r4, #26
 8012e4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012e4e:	425b      	negs	r3, r3
 8012e50:	454b      	cmp	r3, r9
 8012e52:	dc01      	bgt.n	8012e58 <_printf_float+0x2c4>
 8012e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012e56:	e792      	b.n	8012d7e <_printf_float+0x1ea>
 8012e58:	2301      	movs	r3, #1
 8012e5a:	4652      	mov	r2, sl
 8012e5c:	4631      	mov	r1, r6
 8012e5e:	4628      	mov	r0, r5
 8012e60:	47b8      	blx	r7
 8012e62:	3001      	adds	r0, #1
 8012e64:	f43f aef7 	beq.w	8012c56 <_printf_float+0xc2>
 8012e68:	f109 0901 	add.w	r9, r9, #1
 8012e6c:	e7ee      	b.n	8012e4c <_printf_float+0x2b8>
 8012e6e:	bf00      	nop
 8012e70:	7fefffff 	.word	0x7fefffff
 8012e74:	0801534c 	.word	0x0801534c
 8012e78:	08015350 	.word	0x08015350
 8012e7c:	08015358 	.word	0x08015358
 8012e80:	08015354 	.word	0x08015354
 8012e84:	0801535c 	.word	0x0801535c
 8012e88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012e8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012e8c:	429a      	cmp	r2, r3
 8012e8e:	bfa8      	it	ge
 8012e90:	461a      	movge	r2, r3
 8012e92:	2a00      	cmp	r2, #0
 8012e94:	4691      	mov	r9, r2
 8012e96:	dc37      	bgt.n	8012f08 <_printf_float+0x374>
 8012e98:	f04f 0b00 	mov.w	fp, #0
 8012e9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ea0:	f104 021a 	add.w	r2, r4, #26
 8012ea4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012ea6:	9305      	str	r3, [sp, #20]
 8012ea8:	eba3 0309 	sub.w	r3, r3, r9
 8012eac:	455b      	cmp	r3, fp
 8012eae:	dc33      	bgt.n	8012f18 <_printf_float+0x384>
 8012eb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012eb4:	429a      	cmp	r2, r3
 8012eb6:	db3b      	blt.n	8012f30 <_printf_float+0x39c>
 8012eb8:	6823      	ldr	r3, [r4, #0]
 8012eba:	07da      	lsls	r2, r3, #31
 8012ebc:	d438      	bmi.n	8012f30 <_printf_float+0x39c>
 8012ebe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012ec0:	9a05      	ldr	r2, [sp, #20]
 8012ec2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012ec4:	1a9a      	subs	r2, r3, r2
 8012ec6:	eba3 0901 	sub.w	r9, r3, r1
 8012eca:	4591      	cmp	r9, r2
 8012ecc:	bfa8      	it	ge
 8012ece:	4691      	movge	r9, r2
 8012ed0:	f1b9 0f00 	cmp.w	r9, #0
 8012ed4:	dc35      	bgt.n	8012f42 <_printf_float+0x3ae>
 8012ed6:	f04f 0800 	mov.w	r8, #0
 8012eda:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012ede:	f104 0a1a 	add.w	sl, r4, #26
 8012ee2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012ee6:	1a9b      	subs	r3, r3, r2
 8012ee8:	eba3 0309 	sub.w	r3, r3, r9
 8012eec:	4543      	cmp	r3, r8
 8012eee:	f77f af79 	ble.w	8012de4 <_printf_float+0x250>
 8012ef2:	2301      	movs	r3, #1
 8012ef4:	4652      	mov	r2, sl
 8012ef6:	4631      	mov	r1, r6
 8012ef8:	4628      	mov	r0, r5
 8012efa:	47b8      	blx	r7
 8012efc:	3001      	adds	r0, #1
 8012efe:	f43f aeaa 	beq.w	8012c56 <_printf_float+0xc2>
 8012f02:	f108 0801 	add.w	r8, r8, #1
 8012f06:	e7ec      	b.n	8012ee2 <_printf_float+0x34e>
 8012f08:	4613      	mov	r3, r2
 8012f0a:	4631      	mov	r1, r6
 8012f0c:	4642      	mov	r2, r8
 8012f0e:	4628      	mov	r0, r5
 8012f10:	47b8      	blx	r7
 8012f12:	3001      	adds	r0, #1
 8012f14:	d1c0      	bne.n	8012e98 <_printf_float+0x304>
 8012f16:	e69e      	b.n	8012c56 <_printf_float+0xc2>
 8012f18:	2301      	movs	r3, #1
 8012f1a:	4631      	mov	r1, r6
 8012f1c:	4628      	mov	r0, r5
 8012f1e:	9205      	str	r2, [sp, #20]
 8012f20:	47b8      	blx	r7
 8012f22:	3001      	adds	r0, #1
 8012f24:	f43f ae97 	beq.w	8012c56 <_printf_float+0xc2>
 8012f28:	9a05      	ldr	r2, [sp, #20]
 8012f2a:	f10b 0b01 	add.w	fp, fp, #1
 8012f2e:	e7b9      	b.n	8012ea4 <_printf_float+0x310>
 8012f30:	ee18 3a10 	vmov	r3, s16
 8012f34:	4652      	mov	r2, sl
 8012f36:	4631      	mov	r1, r6
 8012f38:	4628      	mov	r0, r5
 8012f3a:	47b8      	blx	r7
 8012f3c:	3001      	adds	r0, #1
 8012f3e:	d1be      	bne.n	8012ebe <_printf_float+0x32a>
 8012f40:	e689      	b.n	8012c56 <_printf_float+0xc2>
 8012f42:	9a05      	ldr	r2, [sp, #20]
 8012f44:	464b      	mov	r3, r9
 8012f46:	4442      	add	r2, r8
 8012f48:	4631      	mov	r1, r6
 8012f4a:	4628      	mov	r0, r5
 8012f4c:	47b8      	blx	r7
 8012f4e:	3001      	adds	r0, #1
 8012f50:	d1c1      	bne.n	8012ed6 <_printf_float+0x342>
 8012f52:	e680      	b.n	8012c56 <_printf_float+0xc2>
 8012f54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012f56:	2a01      	cmp	r2, #1
 8012f58:	dc01      	bgt.n	8012f5e <_printf_float+0x3ca>
 8012f5a:	07db      	lsls	r3, r3, #31
 8012f5c:	d538      	bpl.n	8012fd0 <_printf_float+0x43c>
 8012f5e:	2301      	movs	r3, #1
 8012f60:	4642      	mov	r2, r8
 8012f62:	4631      	mov	r1, r6
 8012f64:	4628      	mov	r0, r5
 8012f66:	47b8      	blx	r7
 8012f68:	3001      	adds	r0, #1
 8012f6a:	f43f ae74 	beq.w	8012c56 <_printf_float+0xc2>
 8012f6e:	ee18 3a10 	vmov	r3, s16
 8012f72:	4652      	mov	r2, sl
 8012f74:	4631      	mov	r1, r6
 8012f76:	4628      	mov	r0, r5
 8012f78:	47b8      	blx	r7
 8012f7a:	3001      	adds	r0, #1
 8012f7c:	f43f ae6b 	beq.w	8012c56 <_printf_float+0xc2>
 8012f80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012f84:	2200      	movs	r2, #0
 8012f86:	2300      	movs	r3, #0
 8012f88:	f7ed fdbe 	bl	8000b08 <__aeabi_dcmpeq>
 8012f8c:	b9d8      	cbnz	r0, 8012fc6 <_printf_float+0x432>
 8012f8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012f90:	f108 0201 	add.w	r2, r8, #1
 8012f94:	3b01      	subs	r3, #1
 8012f96:	4631      	mov	r1, r6
 8012f98:	4628      	mov	r0, r5
 8012f9a:	47b8      	blx	r7
 8012f9c:	3001      	adds	r0, #1
 8012f9e:	d10e      	bne.n	8012fbe <_printf_float+0x42a>
 8012fa0:	e659      	b.n	8012c56 <_printf_float+0xc2>
 8012fa2:	2301      	movs	r3, #1
 8012fa4:	4652      	mov	r2, sl
 8012fa6:	4631      	mov	r1, r6
 8012fa8:	4628      	mov	r0, r5
 8012faa:	47b8      	blx	r7
 8012fac:	3001      	adds	r0, #1
 8012fae:	f43f ae52 	beq.w	8012c56 <_printf_float+0xc2>
 8012fb2:	f108 0801 	add.w	r8, r8, #1
 8012fb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012fb8:	3b01      	subs	r3, #1
 8012fba:	4543      	cmp	r3, r8
 8012fbc:	dcf1      	bgt.n	8012fa2 <_printf_float+0x40e>
 8012fbe:	464b      	mov	r3, r9
 8012fc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012fc4:	e6dc      	b.n	8012d80 <_printf_float+0x1ec>
 8012fc6:	f04f 0800 	mov.w	r8, #0
 8012fca:	f104 0a1a 	add.w	sl, r4, #26
 8012fce:	e7f2      	b.n	8012fb6 <_printf_float+0x422>
 8012fd0:	2301      	movs	r3, #1
 8012fd2:	4642      	mov	r2, r8
 8012fd4:	e7df      	b.n	8012f96 <_printf_float+0x402>
 8012fd6:	2301      	movs	r3, #1
 8012fd8:	464a      	mov	r2, r9
 8012fda:	4631      	mov	r1, r6
 8012fdc:	4628      	mov	r0, r5
 8012fde:	47b8      	blx	r7
 8012fe0:	3001      	adds	r0, #1
 8012fe2:	f43f ae38 	beq.w	8012c56 <_printf_float+0xc2>
 8012fe6:	f108 0801 	add.w	r8, r8, #1
 8012fea:	68e3      	ldr	r3, [r4, #12]
 8012fec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012fee:	1a5b      	subs	r3, r3, r1
 8012ff0:	4543      	cmp	r3, r8
 8012ff2:	dcf0      	bgt.n	8012fd6 <_printf_float+0x442>
 8012ff4:	e6fa      	b.n	8012dec <_printf_float+0x258>
 8012ff6:	f04f 0800 	mov.w	r8, #0
 8012ffa:	f104 0919 	add.w	r9, r4, #25
 8012ffe:	e7f4      	b.n	8012fea <_printf_float+0x456>

08013000 <_printf_common>:
 8013000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013004:	4616      	mov	r6, r2
 8013006:	4699      	mov	r9, r3
 8013008:	688a      	ldr	r2, [r1, #8]
 801300a:	690b      	ldr	r3, [r1, #16]
 801300c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013010:	4293      	cmp	r3, r2
 8013012:	bfb8      	it	lt
 8013014:	4613      	movlt	r3, r2
 8013016:	6033      	str	r3, [r6, #0]
 8013018:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801301c:	4607      	mov	r7, r0
 801301e:	460c      	mov	r4, r1
 8013020:	b10a      	cbz	r2, 8013026 <_printf_common+0x26>
 8013022:	3301      	adds	r3, #1
 8013024:	6033      	str	r3, [r6, #0]
 8013026:	6823      	ldr	r3, [r4, #0]
 8013028:	0699      	lsls	r1, r3, #26
 801302a:	bf42      	ittt	mi
 801302c:	6833      	ldrmi	r3, [r6, #0]
 801302e:	3302      	addmi	r3, #2
 8013030:	6033      	strmi	r3, [r6, #0]
 8013032:	6825      	ldr	r5, [r4, #0]
 8013034:	f015 0506 	ands.w	r5, r5, #6
 8013038:	d106      	bne.n	8013048 <_printf_common+0x48>
 801303a:	f104 0a19 	add.w	sl, r4, #25
 801303e:	68e3      	ldr	r3, [r4, #12]
 8013040:	6832      	ldr	r2, [r6, #0]
 8013042:	1a9b      	subs	r3, r3, r2
 8013044:	42ab      	cmp	r3, r5
 8013046:	dc26      	bgt.n	8013096 <_printf_common+0x96>
 8013048:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801304c:	1e13      	subs	r3, r2, #0
 801304e:	6822      	ldr	r2, [r4, #0]
 8013050:	bf18      	it	ne
 8013052:	2301      	movne	r3, #1
 8013054:	0692      	lsls	r2, r2, #26
 8013056:	d42b      	bmi.n	80130b0 <_printf_common+0xb0>
 8013058:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801305c:	4649      	mov	r1, r9
 801305e:	4638      	mov	r0, r7
 8013060:	47c0      	blx	r8
 8013062:	3001      	adds	r0, #1
 8013064:	d01e      	beq.n	80130a4 <_printf_common+0xa4>
 8013066:	6823      	ldr	r3, [r4, #0]
 8013068:	68e5      	ldr	r5, [r4, #12]
 801306a:	6832      	ldr	r2, [r6, #0]
 801306c:	f003 0306 	and.w	r3, r3, #6
 8013070:	2b04      	cmp	r3, #4
 8013072:	bf08      	it	eq
 8013074:	1aad      	subeq	r5, r5, r2
 8013076:	68a3      	ldr	r3, [r4, #8]
 8013078:	6922      	ldr	r2, [r4, #16]
 801307a:	bf0c      	ite	eq
 801307c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013080:	2500      	movne	r5, #0
 8013082:	4293      	cmp	r3, r2
 8013084:	bfc4      	itt	gt
 8013086:	1a9b      	subgt	r3, r3, r2
 8013088:	18ed      	addgt	r5, r5, r3
 801308a:	2600      	movs	r6, #0
 801308c:	341a      	adds	r4, #26
 801308e:	42b5      	cmp	r5, r6
 8013090:	d11a      	bne.n	80130c8 <_printf_common+0xc8>
 8013092:	2000      	movs	r0, #0
 8013094:	e008      	b.n	80130a8 <_printf_common+0xa8>
 8013096:	2301      	movs	r3, #1
 8013098:	4652      	mov	r2, sl
 801309a:	4649      	mov	r1, r9
 801309c:	4638      	mov	r0, r7
 801309e:	47c0      	blx	r8
 80130a0:	3001      	adds	r0, #1
 80130a2:	d103      	bne.n	80130ac <_printf_common+0xac>
 80130a4:	f04f 30ff 	mov.w	r0, #4294967295
 80130a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80130ac:	3501      	adds	r5, #1
 80130ae:	e7c6      	b.n	801303e <_printf_common+0x3e>
 80130b0:	18e1      	adds	r1, r4, r3
 80130b2:	1c5a      	adds	r2, r3, #1
 80130b4:	2030      	movs	r0, #48	; 0x30
 80130b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80130ba:	4422      	add	r2, r4
 80130bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80130c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80130c4:	3302      	adds	r3, #2
 80130c6:	e7c7      	b.n	8013058 <_printf_common+0x58>
 80130c8:	2301      	movs	r3, #1
 80130ca:	4622      	mov	r2, r4
 80130cc:	4649      	mov	r1, r9
 80130ce:	4638      	mov	r0, r7
 80130d0:	47c0      	blx	r8
 80130d2:	3001      	adds	r0, #1
 80130d4:	d0e6      	beq.n	80130a4 <_printf_common+0xa4>
 80130d6:	3601      	adds	r6, #1
 80130d8:	e7d9      	b.n	801308e <_printf_common+0x8e>
	...

080130dc <_printf_i>:
 80130dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80130e0:	7e0f      	ldrb	r7, [r1, #24]
 80130e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80130e4:	2f78      	cmp	r7, #120	; 0x78
 80130e6:	4691      	mov	r9, r2
 80130e8:	4680      	mov	r8, r0
 80130ea:	460c      	mov	r4, r1
 80130ec:	469a      	mov	sl, r3
 80130ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80130f2:	d807      	bhi.n	8013104 <_printf_i+0x28>
 80130f4:	2f62      	cmp	r7, #98	; 0x62
 80130f6:	d80a      	bhi.n	801310e <_printf_i+0x32>
 80130f8:	2f00      	cmp	r7, #0
 80130fa:	f000 80d8 	beq.w	80132ae <_printf_i+0x1d2>
 80130fe:	2f58      	cmp	r7, #88	; 0x58
 8013100:	f000 80a3 	beq.w	801324a <_printf_i+0x16e>
 8013104:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013108:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801310c:	e03a      	b.n	8013184 <_printf_i+0xa8>
 801310e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013112:	2b15      	cmp	r3, #21
 8013114:	d8f6      	bhi.n	8013104 <_printf_i+0x28>
 8013116:	a101      	add	r1, pc, #4	; (adr r1, 801311c <_printf_i+0x40>)
 8013118:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801311c:	08013175 	.word	0x08013175
 8013120:	08013189 	.word	0x08013189
 8013124:	08013105 	.word	0x08013105
 8013128:	08013105 	.word	0x08013105
 801312c:	08013105 	.word	0x08013105
 8013130:	08013105 	.word	0x08013105
 8013134:	08013189 	.word	0x08013189
 8013138:	08013105 	.word	0x08013105
 801313c:	08013105 	.word	0x08013105
 8013140:	08013105 	.word	0x08013105
 8013144:	08013105 	.word	0x08013105
 8013148:	08013295 	.word	0x08013295
 801314c:	080131b9 	.word	0x080131b9
 8013150:	08013277 	.word	0x08013277
 8013154:	08013105 	.word	0x08013105
 8013158:	08013105 	.word	0x08013105
 801315c:	080132b7 	.word	0x080132b7
 8013160:	08013105 	.word	0x08013105
 8013164:	080131b9 	.word	0x080131b9
 8013168:	08013105 	.word	0x08013105
 801316c:	08013105 	.word	0x08013105
 8013170:	0801327f 	.word	0x0801327f
 8013174:	682b      	ldr	r3, [r5, #0]
 8013176:	1d1a      	adds	r2, r3, #4
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	602a      	str	r2, [r5, #0]
 801317c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013180:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013184:	2301      	movs	r3, #1
 8013186:	e0a3      	b.n	80132d0 <_printf_i+0x1f4>
 8013188:	6820      	ldr	r0, [r4, #0]
 801318a:	6829      	ldr	r1, [r5, #0]
 801318c:	0606      	lsls	r6, r0, #24
 801318e:	f101 0304 	add.w	r3, r1, #4
 8013192:	d50a      	bpl.n	80131aa <_printf_i+0xce>
 8013194:	680e      	ldr	r6, [r1, #0]
 8013196:	602b      	str	r3, [r5, #0]
 8013198:	2e00      	cmp	r6, #0
 801319a:	da03      	bge.n	80131a4 <_printf_i+0xc8>
 801319c:	232d      	movs	r3, #45	; 0x2d
 801319e:	4276      	negs	r6, r6
 80131a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80131a4:	485e      	ldr	r0, [pc, #376]	; (8013320 <_printf_i+0x244>)
 80131a6:	230a      	movs	r3, #10
 80131a8:	e019      	b.n	80131de <_printf_i+0x102>
 80131aa:	680e      	ldr	r6, [r1, #0]
 80131ac:	602b      	str	r3, [r5, #0]
 80131ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80131b2:	bf18      	it	ne
 80131b4:	b236      	sxthne	r6, r6
 80131b6:	e7ef      	b.n	8013198 <_printf_i+0xbc>
 80131b8:	682b      	ldr	r3, [r5, #0]
 80131ba:	6820      	ldr	r0, [r4, #0]
 80131bc:	1d19      	adds	r1, r3, #4
 80131be:	6029      	str	r1, [r5, #0]
 80131c0:	0601      	lsls	r1, r0, #24
 80131c2:	d501      	bpl.n	80131c8 <_printf_i+0xec>
 80131c4:	681e      	ldr	r6, [r3, #0]
 80131c6:	e002      	b.n	80131ce <_printf_i+0xf2>
 80131c8:	0646      	lsls	r6, r0, #25
 80131ca:	d5fb      	bpl.n	80131c4 <_printf_i+0xe8>
 80131cc:	881e      	ldrh	r6, [r3, #0]
 80131ce:	4854      	ldr	r0, [pc, #336]	; (8013320 <_printf_i+0x244>)
 80131d0:	2f6f      	cmp	r7, #111	; 0x6f
 80131d2:	bf0c      	ite	eq
 80131d4:	2308      	moveq	r3, #8
 80131d6:	230a      	movne	r3, #10
 80131d8:	2100      	movs	r1, #0
 80131da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80131de:	6865      	ldr	r5, [r4, #4]
 80131e0:	60a5      	str	r5, [r4, #8]
 80131e2:	2d00      	cmp	r5, #0
 80131e4:	bfa2      	ittt	ge
 80131e6:	6821      	ldrge	r1, [r4, #0]
 80131e8:	f021 0104 	bicge.w	r1, r1, #4
 80131ec:	6021      	strge	r1, [r4, #0]
 80131ee:	b90e      	cbnz	r6, 80131f4 <_printf_i+0x118>
 80131f0:	2d00      	cmp	r5, #0
 80131f2:	d04d      	beq.n	8013290 <_printf_i+0x1b4>
 80131f4:	4615      	mov	r5, r2
 80131f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80131fa:	fb03 6711 	mls	r7, r3, r1, r6
 80131fe:	5dc7      	ldrb	r7, [r0, r7]
 8013200:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013204:	4637      	mov	r7, r6
 8013206:	42bb      	cmp	r3, r7
 8013208:	460e      	mov	r6, r1
 801320a:	d9f4      	bls.n	80131f6 <_printf_i+0x11a>
 801320c:	2b08      	cmp	r3, #8
 801320e:	d10b      	bne.n	8013228 <_printf_i+0x14c>
 8013210:	6823      	ldr	r3, [r4, #0]
 8013212:	07de      	lsls	r6, r3, #31
 8013214:	d508      	bpl.n	8013228 <_printf_i+0x14c>
 8013216:	6923      	ldr	r3, [r4, #16]
 8013218:	6861      	ldr	r1, [r4, #4]
 801321a:	4299      	cmp	r1, r3
 801321c:	bfde      	ittt	le
 801321e:	2330      	movle	r3, #48	; 0x30
 8013220:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013224:	f105 35ff 	addle.w	r5, r5, #4294967295
 8013228:	1b52      	subs	r2, r2, r5
 801322a:	6122      	str	r2, [r4, #16]
 801322c:	f8cd a000 	str.w	sl, [sp]
 8013230:	464b      	mov	r3, r9
 8013232:	aa03      	add	r2, sp, #12
 8013234:	4621      	mov	r1, r4
 8013236:	4640      	mov	r0, r8
 8013238:	f7ff fee2 	bl	8013000 <_printf_common>
 801323c:	3001      	adds	r0, #1
 801323e:	d14c      	bne.n	80132da <_printf_i+0x1fe>
 8013240:	f04f 30ff 	mov.w	r0, #4294967295
 8013244:	b004      	add	sp, #16
 8013246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801324a:	4835      	ldr	r0, [pc, #212]	; (8013320 <_printf_i+0x244>)
 801324c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8013250:	6829      	ldr	r1, [r5, #0]
 8013252:	6823      	ldr	r3, [r4, #0]
 8013254:	f851 6b04 	ldr.w	r6, [r1], #4
 8013258:	6029      	str	r1, [r5, #0]
 801325a:	061d      	lsls	r5, r3, #24
 801325c:	d514      	bpl.n	8013288 <_printf_i+0x1ac>
 801325e:	07df      	lsls	r7, r3, #31
 8013260:	bf44      	itt	mi
 8013262:	f043 0320 	orrmi.w	r3, r3, #32
 8013266:	6023      	strmi	r3, [r4, #0]
 8013268:	b91e      	cbnz	r6, 8013272 <_printf_i+0x196>
 801326a:	6823      	ldr	r3, [r4, #0]
 801326c:	f023 0320 	bic.w	r3, r3, #32
 8013270:	6023      	str	r3, [r4, #0]
 8013272:	2310      	movs	r3, #16
 8013274:	e7b0      	b.n	80131d8 <_printf_i+0xfc>
 8013276:	6823      	ldr	r3, [r4, #0]
 8013278:	f043 0320 	orr.w	r3, r3, #32
 801327c:	6023      	str	r3, [r4, #0]
 801327e:	2378      	movs	r3, #120	; 0x78
 8013280:	4828      	ldr	r0, [pc, #160]	; (8013324 <_printf_i+0x248>)
 8013282:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8013286:	e7e3      	b.n	8013250 <_printf_i+0x174>
 8013288:	0659      	lsls	r1, r3, #25
 801328a:	bf48      	it	mi
 801328c:	b2b6      	uxthmi	r6, r6
 801328e:	e7e6      	b.n	801325e <_printf_i+0x182>
 8013290:	4615      	mov	r5, r2
 8013292:	e7bb      	b.n	801320c <_printf_i+0x130>
 8013294:	682b      	ldr	r3, [r5, #0]
 8013296:	6826      	ldr	r6, [r4, #0]
 8013298:	6961      	ldr	r1, [r4, #20]
 801329a:	1d18      	adds	r0, r3, #4
 801329c:	6028      	str	r0, [r5, #0]
 801329e:	0635      	lsls	r5, r6, #24
 80132a0:	681b      	ldr	r3, [r3, #0]
 80132a2:	d501      	bpl.n	80132a8 <_printf_i+0x1cc>
 80132a4:	6019      	str	r1, [r3, #0]
 80132a6:	e002      	b.n	80132ae <_printf_i+0x1d2>
 80132a8:	0670      	lsls	r0, r6, #25
 80132aa:	d5fb      	bpl.n	80132a4 <_printf_i+0x1c8>
 80132ac:	8019      	strh	r1, [r3, #0]
 80132ae:	2300      	movs	r3, #0
 80132b0:	6123      	str	r3, [r4, #16]
 80132b2:	4615      	mov	r5, r2
 80132b4:	e7ba      	b.n	801322c <_printf_i+0x150>
 80132b6:	682b      	ldr	r3, [r5, #0]
 80132b8:	1d1a      	adds	r2, r3, #4
 80132ba:	602a      	str	r2, [r5, #0]
 80132bc:	681d      	ldr	r5, [r3, #0]
 80132be:	6862      	ldr	r2, [r4, #4]
 80132c0:	2100      	movs	r1, #0
 80132c2:	4628      	mov	r0, r5
 80132c4:	f7ec ffac 	bl	8000220 <memchr>
 80132c8:	b108      	cbz	r0, 80132ce <_printf_i+0x1f2>
 80132ca:	1b40      	subs	r0, r0, r5
 80132cc:	6060      	str	r0, [r4, #4]
 80132ce:	6863      	ldr	r3, [r4, #4]
 80132d0:	6123      	str	r3, [r4, #16]
 80132d2:	2300      	movs	r3, #0
 80132d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80132d8:	e7a8      	b.n	801322c <_printf_i+0x150>
 80132da:	6923      	ldr	r3, [r4, #16]
 80132dc:	462a      	mov	r2, r5
 80132de:	4649      	mov	r1, r9
 80132e0:	4640      	mov	r0, r8
 80132e2:	47d0      	blx	sl
 80132e4:	3001      	adds	r0, #1
 80132e6:	d0ab      	beq.n	8013240 <_printf_i+0x164>
 80132e8:	6823      	ldr	r3, [r4, #0]
 80132ea:	079b      	lsls	r3, r3, #30
 80132ec:	d413      	bmi.n	8013316 <_printf_i+0x23a>
 80132ee:	68e0      	ldr	r0, [r4, #12]
 80132f0:	9b03      	ldr	r3, [sp, #12]
 80132f2:	4298      	cmp	r0, r3
 80132f4:	bfb8      	it	lt
 80132f6:	4618      	movlt	r0, r3
 80132f8:	e7a4      	b.n	8013244 <_printf_i+0x168>
 80132fa:	2301      	movs	r3, #1
 80132fc:	4632      	mov	r2, r6
 80132fe:	4649      	mov	r1, r9
 8013300:	4640      	mov	r0, r8
 8013302:	47d0      	blx	sl
 8013304:	3001      	adds	r0, #1
 8013306:	d09b      	beq.n	8013240 <_printf_i+0x164>
 8013308:	3501      	adds	r5, #1
 801330a:	68e3      	ldr	r3, [r4, #12]
 801330c:	9903      	ldr	r1, [sp, #12]
 801330e:	1a5b      	subs	r3, r3, r1
 8013310:	42ab      	cmp	r3, r5
 8013312:	dcf2      	bgt.n	80132fa <_printf_i+0x21e>
 8013314:	e7eb      	b.n	80132ee <_printf_i+0x212>
 8013316:	2500      	movs	r5, #0
 8013318:	f104 0619 	add.w	r6, r4, #25
 801331c:	e7f5      	b.n	801330a <_printf_i+0x22e>
 801331e:	bf00      	nop
 8013320:	0801535e 	.word	0x0801535e
 8013324:	0801536f 	.word	0x0801536f

08013328 <_sbrk_r>:
 8013328:	b538      	push	{r3, r4, r5, lr}
 801332a:	4d06      	ldr	r5, [pc, #24]	; (8013344 <_sbrk_r+0x1c>)
 801332c:	2300      	movs	r3, #0
 801332e:	4604      	mov	r4, r0
 8013330:	4608      	mov	r0, r1
 8013332:	602b      	str	r3, [r5, #0]
 8013334:	f7ee fe00 	bl	8001f38 <_sbrk>
 8013338:	1c43      	adds	r3, r0, #1
 801333a:	d102      	bne.n	8013342 <_sbrk_r+0x1a>
 801333c:	682b      	ldr	r3, [r5, #0]
 801333e:	b103      	cbz	r3, 8013342 <_sbrk_r+0x1a>
 8013340:	6023      	str	r3, [r4, #0]
 8013342:	bd38      	pop	{r3, r4, r5, pc}
 8013344:	200039cc 	.word	0x200039cc

08013348 <quorem>:
 8013348:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801334c:	6903      	ldr	r3, [r0, #16]
 801334e:	690c      	ldr	r4, [r1, #16]
 8013350:	42a3      	cmp	r3, r4
 8013352:	4607      	mov	r7, r0
 8013354:	f2c0 8081 	blt.w	801345a <quorem+0x112>
 8013358:	3c01      	subs	r4, #1
 801335a:	f101 0814 	add.w	r8, r1, #20
 801335e:	f100 0514 	add.w	r5, r0, #20
 8013362:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8013366:	9301      	str	r3, [sp, #4]
 8013368:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801336c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8013370:	3301      	adds	r3, #1
 8013372:	429a      	cmp	r2, r3
 8013374:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8013378:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801337c:	fbb2 f6f3 	udiv	r6, r2, r3
 8013380:	d331      	bcc.n	80133e6 <quorem+0x9e>
 8013382:	f04f 0e00 	mov.w	lr, #0
 8013386:	4640      	mov	r0, r8
 8013388:	46ac      	mov	ip, r5
 801338a:	46f2      	mov	sl, lr
 801338c:	f850 2b04 	ldr.w	r2, [r0], #4
 8013390:	b293      	uxth	r3, r2
 8013392:	fb06 e303 	mla	r3, r6, r3, lr
 8013396:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 801339a:	b29b      	uxth	r3, r3
 801339c:	ebaa 0303 	sub.w	r3, sl, r3
 80133a0:	f8dc a000 	ldr.w	sl, [ip]
 80133a4:	0c12      	lsrs	r2, r2, #16
 80133a6:	fa13 f38a 	uxtah	r3, r3, sl
 80133aa:	fb06 e202 	mla	r2, r6, r2, lr
 80133ae:	9300      	str	r3, [sp, #0]
 80133b0:	9b00      	ldr	r3, [sp, #0]
 80133b2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80133b6:	b292      	uxth	r2, r2
 80133b8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80133bc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80133c0:	f8bd 3000 	ldrh.w	r3, [sp]
 80133c4:	4581      	cmp	r9, r0
 80133c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80133ca:	f84c 3b04 	str.w	r3, [ip], #4
 80133ce:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80133d2:	d2db      	bcs.n	801338c <quorem+0x44>
 80133d4:	f855 300b 	ldr.w	r3, [r5, fp]
 80133d8:	b92b      	cbnz	r3, 80133e6 <quorem+0x9e>
 80133da:	9b01      	ldr	r3, [sp, #4]
 80133dc:	3b04      	subs	r3, #4
 80133de:	429d      	cmp	r5, r3
 80133e0:	461a      	mov	r2, r3
 80133e2:	d32e      	bcc.n	8013442 <quorem+0xfa>
 80133e4:	613c      	str	r4, [r7, #16]
 80133e6:	4638      	mov	r0, r7
 80133e8:	f001 f8c8 	bl	801457c <__mcmp>
 80133ec:	2800      	cmp	r0, #0
 80133ee:	db24      	blt.n	801343a <quorem+0xf2>
 80133f0:	3601      	adds	r6, #1
 80133f2:	4628      	mov	r0, r5
 80133f4:	f04f 0c00 	mov.w	ip, #0
 80133f8:	f858 2b04 	ldr.w	r2, [r8], #4
 80133fc:	f8d0 e000 	ldr.w	lr, [r0]
 8013400:	b293      	uxth	r3, r2
 8013402:	ebac 0303 	sub.w	r3, ip, r3
 8013406:	0c12      	lsrs	r2, r2, #16
 8013408:	fa13 f38e 	uxtah	r3, r3, lr
 801340c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8013410:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8013414:	b29b      	uxth	r3, r3
 8013416:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801341a:	45c1      	cmp	r9, r8
 801341c:	f840 3b04 	str.w	r3, [r0], #4
 8013420:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8013424:	d2e8      	bcs.n	80133f8 <quorem+0xb0>
 8013426:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801342a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801342e:	b922      	cbnz	r2, 801343a <quorem+0xf2>
 8013430:	3b04      	subs	r3, #4
 8013432:	429d      	cmp	r5, r3
 8013434:	461a      	mov	r2, r3
 8013436:	d30a      	bcc.n	801344e <quorem+0x106>
 8013438:	613c      	str	r4, [r7, #16]
 801343a:	4630      	mov	r0, r6
 801343c:	b003      	add	sp, #12
 801343e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013442:	6812      	ldr	r2, [r2, #0]
 8013444:	3b04      	subs	r3, #4
 8013446:	2a00      	cmp	r2, #0
 8013448:	d1cc      	bne.n	80133e4 <quorem+0x9c>
 801344a:	3c01      	subs	r4, #1
 801344c:	e7c7      	b.n	80133de <quorem+0x96>
 801344e:	6812      	ldr	r2, [r2, #0]
 8013450:	3b04      	subs	r3, #4
 8013452:	2a00      	cmp	r2, #0
 8013454:	d1f0      	bne.n	8013438 <quorem+0xf0>
 8013456:	3c01      	subs	r4, #1
 8013458:	e7eb      	b.n	8013432 <quorem+0xea>
 801345a:	2000      	movs	r0, #0
 801345c:	e7ee      	b.n	801343c <quorem+0xf4>
	...

08013460 <_dtoa_r>:
 8013460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013464:	ed2d 8b04 	vpush	{d8-d9}
 8013468:	ec57 6b10 	vmov	r6, r7, d0
 801346c:	b093      	sub	sp, #76	; 0x4c
 801346e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8013470:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8013474:	9106      	str	r1, [sp, #24]
 8013476:	ee10 aa10 	vmov	sl, s0
 801347a:	4604      	mov	r4, r0
 801347c:	9209      	str	r2, [sp, #36]	; 0x24
 801347e:	930c      	str	r3, [sp, #48]	; 0x30
 8013480:	46bb      	mov	fp, r7
 8013482:	b975      	cbnz	r5, 80134a2 <_dtoa_r+0x42>
 8013484:	2010      	movs	r0, #16
 8013486:	f7ff f9ed 	bl	8012864 <malloc>
 801348a:	4602      	mov	r2, r0
 801348c:	6260      	str	r0, [r4, #36]	; 0x24
 801348e:	b920      	cbnz	r0, 801349a <_dtoa_r+0x3a>
 8013490:	4ba7      	ldr	r3, [pc, #668]	; (8013730 <_dtoa_r+0x2d0>)
 8013492:	21ea      	movs	r1, #234	; 0xea
 8013494:	48a7      	ldr	r0, [pc, #668]	; (8013734 <_dtoa_r+0x2d4>)
 8013496:	f001 f989 	bl	80147ac <__assert_func>
 801349a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801349e:	6005      	str	r5, [r0, #0]
 80134a0:	60c5      	str	r5, [r0, #12]
 80134a2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134a4:	6819      	ldr	r1, [r3, #0]
 80134a6:	b151      	cbz	r1, 80134be <_dtoa_r+0x5e>
 80134a8:	685a      	ldr	r2, [r3, #4]
 80134aa:	604a      	str	r2, [r1, #4]
 80134ac:	2301      	movs	r3, #1
 80134ae:	4093      	lsls	r3, r2
 80134b0:	608b      	str	r3, [r1, #8]
 80134b2:	4620      	mov	r0, r4
 80134b4:	f000 fe20 	bl	80140f8 <_Bfree>
 80134b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80134ba:	2200      	movs	r2, #0
 80134bc:	601a      	str	r2, [r3, #0]
 80134be:	1e3b      	subs	r3, r7, #0
 80134c0:	bfaa      	itet	ge
 80134c2:	2300      	movge	r3, #0
 80134c4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80134c8:	f8c8 3000 	strge.w	r3, [r8]
 80134cc:	4b9a      	ldr	r3, [pc, #616]	; (8013738 <_dtoa_r+0x2d8>)
 80134ce:	bfbc      	itt	lt
 80134d0:	2201      	movlt	r2, #1
 80134d2:	f8c8 2000 	strlt.w	r2, [r8]
 80134d6:	ea33 030b 	bics.w	r3, r3, fp
 80134da:	d11b      	bne.n	8013514 <_dtoa_r+0xb4>
 80134dc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80134de:	f242 730f 	movw	r3, #9999	; 0x270f
 80134e2:	6013      	str	r3, [r2, #0]
 80134e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80134e8:	4333      	orrs	r3, r6
 80134ea:	f000 8592 	beq.w	8014012 <_dtoa_r+0xbb2>
 80134ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80134f0:	b963      	cbnz	r3, 801350c <_dtoa_r+0xac>
 80134f2:	4b92      	ldr	r3, [pc, #584]	; (801373c <_dtoa_r+0x2dc>)
 80134f4:	e022      	b.n	801353c <_dtoa_r+0xdc>
 80134f6:	4b92      	ldr	r3, [pc, #584]	; (8013740 <_dtoa_r+0x2e0>)
 80134f8:	9301      	str	r3, [sp, #4]
 80134fa:	3308      	adds	r3, #8
 80134fc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80134fe:	6013      	str	r3, [r2, #0]
 8013500:	9801      	ldr	r0, [sp, #4]
 8013502:	b013      	add	sp, #76	; 0x4c
 8013504:	ecbd 8b04 	vpop	{d8-d9}
 8013508:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801350c:	4b8b      	ldr	r3, [pc, #556]	; (801373c <_dtoa_r+0x2dc>)
 801350e:	9301      	str	r3, [sp, #4]
 8013510:	3303      	adds	r3, #3
 8013512:	e7f3      	b.n	80134fc <_dtoa_r+0x9c>
 8013514:	2200      	movs	r2, #0
 8013516:	2300      	movs	r3, #0
 8013518:	4650      	mov	r0, sl
 801351a:	4659      	mov	r1, fp
 801351c:	f7ed faf4 	bl	8000b08 <__aeabi_dcmpeq>
 8013520:	ec4b ab19 	vmov	d9, sl, fp
 8013524:	4680      	mov	r8, r0
 8013526:	b158      	cbz	r0, 8013540 <_dtoa_r+0xe0>
 8013528:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801352a:	2301      	movs	r3, #1
 801352c:	6013      	str	r3, [r2, #0]
 801352e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013530:	2b00      	cmp	r3, #0
 8013532:	f000 856b 	beq.w	801400c <_dtoa_r+0xbac>
 8013536:	4883      	ldr	r0, [pc, #524]	; (8013744 <_dtoa_r+0x2e4>)
 8013538:	6018      	str	r0, [r3, #0]
 801353a:	1e43      	subs	r3, r0, #1
 801353c:	9301      	str	r3, [sp, #4]
 801353e:	e7df      	b.n	8013500 <_dtoa_r+0xa0>
 8013540:	ec4b ab10 	vmov	d0, sl, fp
 8013544:	aa10      	add	r2, sp, #64	; 0x40
 8013546:	a911      	add	r1, sp, #68	; 0x44
 8013548:	4620      	mov	r0, r4
 801354a:	f001 f8bd 	bl	80146c8 <__d2b>
 801354e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8013552:	ee08 0a10 	vmov	s16, r0
 8013556:	2d00      	cmp	r5, #0
 8013558:	f000 8084 	beq.w	8013664 <_dtoa_r+0x204>
 801355c:	ee19 3a90 	vmov	r3, s19
 8013560:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8013564:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013568:	4656      	mov	r6, sl
 801356a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 801356e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8013572:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8013576:	4b74      	ldr	r3, [pc, #464]	; (8013748 <_dtoa_r+0x2e8>)
 8013578:	2200      	movs	r2, #0
 801357a:	4630      	mov	r0, r6
 801357c:	4639      	mov	r1, r7
 801357e:	f7ec fea3 	bl	80002c8 <__aeabi_dsub>
 8013582:	a365      	add	r3, pc, #404	; (adr r3, 8013718 <_dtoa_r+0x2b8>)
 8013584:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013588:	f7ed f856 	bl	8000638 <__aeabi_dmul>
 801358c:	a364      	add	r3, pc, #400	; (adr r3, 8013720 <_dtoa_r+0x2c0>)
 801358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013592:	f7ec fe9b 	bl	80002cc <__adddf3>
 8013596:	4606      	mov	r6, r0
 8013598:	4628      	mov	r0, r5
 801359a:	460f      	mov	r7, r1
 801359c:	f7ec ffe2 	bl	8000564 <__aeabi_i2d>
 80135a0:	a361      	add	r3, pc, #388	; (adr r3, 8013728 <_dtoa_r+0x2c8>)
 80135a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135a6:	f7ed f847 	bl	8000638 <__aeabi_dmul>
 80135aa:	4602      	mov	r2, r0
 80135ac:	460b      	mov	r3, r1
 80135ae:	4630      	mov	r0, r6
 80135b0:	4639      	mov	r1, r7
 80135b2:	f7ec fe8b 	bl	80002cc <__adddf3>
 80135b6:	4606      	mov	r6, r0
 80135b8:	460f      	mov	r7, r1
 80135ba:	f7ed faed 	bl	8000b98 <__aeabi_d2iz>
 80135be:	2200      	movs	r2, #0
 80135c0:	9000      	str	r0, [sp, #0]
 80135c2:	2300      	movs	r3, #0
 80135c4:	4630      	mov	r0, r6
 80135c6:	4639      	mov	r1, r7
 80135c8:	f7ed faa8 	bl	8000b1c <__aeabi_dcmplt>
 80135cc:	b150      	cbz	r0, 80135e4 <_dtoa_r+0x184>
 80135ce:	9800      	ldr	r0, [sp, #0]
 80135d0:	f7ec ffc8 	bl	8000564 <__aeabi_i2d>
 80135d4:	4632      	mov	r2, r6
 80135d6:	463b      	mov	r3, r7
 80135d8:	f7ed fa96 	bl	8000b08 <__aeabi_dcmpeq>
 80135dc:	b910      	cbnz	r0, 80135e4 <_dtoa_r+0x184>
 80135de:	9b00      	ldr	r3, [sp, #0]
 80135e0:	3b01      	subs	r3, #1
 80135e2:	9300      	str	r3, [sp, #0]
 80135e4:	9b00      	ldr	r3, [sp, #0]
 80135e6:	2b16      	cmp	r3, #22
 80135e8:	d85a      	bhi.n	80136a0 <_dtoa_r+0x240>
 80135ea:	9a00      	ldr	r2, [sp, #0]
 80135ec:	4b57      	ldr	r3, [pc, #348]	; (801374c <_dtoa_r+0x2ec>)
 80135ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80135f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80135f6:	ec51 0b19 	vmov	r0, r1, d9
 80135fa:	f7ed fa8f 	bl	8000b1c <__aeabi_dcmplt>
 80135fe:	2800      	cmp	r0, #0
 8013600:	d050      	beq.n	80136a4 <_dtoa_r+0x244>
 8013602:	9b00      	ldr	r3, [sp, #0]
 8013604:	3b01      	subs	r3, #1
 8013606:	9300      	str	r3, [sp, #0]
 8013608:	2300      	movs	r3, #0
 801360a:	930b      	str	r3, [sp, #44]	; 0x2c
 801360c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 801360e:	1b5d      	subs	r5, r3, r5
 8013610:	1e6b      	subs	r3, r5, #1
 8013612:	9305      	str	r3, [sp, #20]
 8013614:	bf45      	ittet	mi
 8013616:	f1c5 0301 	rsbmi	r3, r5, #1
 801361a:	9304      	strmi	r3, [sp, #16]
 801361c:	2300      	movpl	r3, #0
 801361e:	2300      	movmi	r3, #0
 8013620:	bf4c      	ite	mi
 8013622:	9305      	strmi	r3, [sp, #20]
 8013624:	9304      	strpl	r3, [sp, #16]
 8013626:	9b00      	ldr	r3, [sp, #0]
 8013628:	2b00      	cmp	r3, #0
 801362a:	db3d      	blt.n	80136a8 <_dtoa_r+0x248>
 801362c:	9b05      	ldr	r3, [sp, #20]
 801362e:	9a00      	ldr	r2, [sp, #0]
 8013630:	920a      	str	r2, [sp, #40]	; 0x28
 8013632:	4413      	add	r3, r2
 8013634:	9305      	str	r3, [sp, #20]
 8013636:	2300      	movs	r3, #0
 8013638:	9307      	str	r3, [sp, #28]
 801363a:	9b06      	ldr	r3, [sp, #24]
 801363c:	2b09      	cmp	r3, #9
 801363e:	f200 8089 	bhi.w	8013754 <_dtoa_r+0x2f4>
 8013642:	2b05      	cmp	r3, #5
 8013644:	bfc4      	itt	gt
 8013646:	3b04      	subgt	r3, #4
 8013648:	9306      	strgt	r3, [sp, #24]
 801364a:	9b06      	ldr	r3, [sp, #24]
 801364c:	f1a3 0302 	sub.w	r3, r3, #2
 8013650:	bfcc      	ite	gt
 8013652:	2500      	movgt	r5, #0
 8013654:	2501      	movle	r5, #1
 8013656:	2b03      	cmp	r3, #3
 8013658:	f200 8087 	bhi.w	801376a <_dtoa_r+0x30a>
 801365c:	e8df f003 	tbb	[pc, r3]
 8013660:	59383a2d 	.word	0x59383a2d
 8013664:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013668:	441d      	add	r5, r3
 801366a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 801366e:	2b20      	cmp	r3, #32
 8013670:	bfc1      	itttt	gt
 8013672:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8013676:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 801367a:	fa0b f303 	lslgt.w	r3, fp, r3
 801367e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8013682:	bfda      	itte	le
 8013684:	f1c3 0320 	rsble	r3, r3, #32
 8013688:	fa06 f003 	lslle.w	r0, r6, r3
 801368c:	4318      	orrgt	r0, r3
 801368e:	f7ec ff59 	bl	8000544 <__aeabi_ui2d>
 8013692:	2301      	movs	r3, #1
 8013694:	4606      	mov	r6, r0
 8013696:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 801369a:	3d01      	subs	r5, #1
 801369c:	930e      	str	r3, [sp, #56]	; 0x38
 801369e:	e76a      	b.n	8013576 <_dtoa_r+0x116>
 80136a0:	2301      	movs	r3, #1
 80136a2:	e7b2      	b.n	801360a <_dtoa_r+0x1aa>
 80136a4:	900b      	str	r0, [sp, #44]	; 0x2c
 80136a6:	e7b1      	b.n	801360c <_dtoa_r+0x1ac>
 80136a8:	9b04      	ldr	r3, [sp, #16]
 80136aa:	9a00      	ldr	r2, [sp, #0]
 80136ac:	1a9b      	subs	r3, r3, r2
 80136ae:	9304      	str	r3, [sp, #16]
 80136b0:	4253      	negs	r3, r2
 80136b2:	9307      	str	r3, [sp, #28]
 80136b4:	2300      	movs	r3, #0
 80136b6:	930a      	str	r3, [sp, #40]	; 0x28
 80136b8:	e7bf      	b.n	801363a <_dtoa_r+0x1da>
 80136ba:	2300      	movs	r3, #0
 80136bc:	9308      	str	r3, [sp, #32]
 80136be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80136c0:	2b00      	cmp	r3, #0
 80136c2:	dc55      	bgt.n	8013770 <_dtoa_r+0x310>
 80136c4:	2301      	movs	r3, #1
 80136c6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80136ca:	461a      	mov	r2, r3
 80136cc:	9209      	str	r2, [sp, #36]	; 0x24
 80136ce:	e00c      	b.n	80136ea <_dtoa_r+0x28a>
 80136d0:	2301      	movs	r3, #1
 80136d2:	e7f3      	b.n	80136bc <_dtoa_r+0x25c>
 80136d4:	2300      	movs	r3, #0
 80136d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80136d8:	9308      	str	r3, [sp, #32]
 80136da:	9b00      	ldr	r3, [sp, #0]
 80136dc:	4413      	add	r3, r2
 80136de:	9302      	str	r3, [sp, #8]
 80136e0:	3301      	adds	r3, #1
 80136e2:	2b01      	cmp	r3, #1
 80136e4:	9303      	str	r3, [sp, #12]
 80136e6:	bfb8      	it	lt
 80136e8:	2301      	movlt	r3, #1
 80136ea:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80136ec:	2200      	movs	r2, #0
 80136ee:	6042      	str	r2, [r0, #4]
 80136f0:	2204      	movs	r2, #4
 80136f2:	f102 0614 	add.w	r6, r2, #20
 80136f6:	429e      	cmp	r6, r3
 80136f8:	6841      	ldr	r1, [r0, #4]
 80136fa:	d93d      	bls.n	8013778 <_dtoa_r+0x318>
 80136fc:	4620      	mov	r0, r4
 80136fe:	f000 fcbb 	bl	8014078 <_Balloc>
 8013702:	9001      	str	r0, [sp, #4]
 8013704:	2800      	cmp	r0, #0
 8013706:	d13b      	bne.n	8013780 <_dtoa_r+0x320>
 8013708:	4b11      	ldr	r3, [pc, #68]	; (8013750 <_dtoa_r+0x2f0>)
 801370a:	4602      	mov	r2, r0
 801370c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8013710:	e6c0      	b.n	8013494 <_dtoa_r+0x34>
 8013712:	2301      	movs	r3, #1
 8013714:	e7df      	b.n	80136d6 <_dtoa_r+0x276>
 8013716:	bf00      	nop
 8013718:	636f4361 	.word	0x636f4361
 801371c:	3fd287a7 	.word	0x3fd287a7
 8013720:	8b60c8b3 	.word	0x8b60c8b3
 8013724:	3fc68a28 	.word	0x3fc68a28
 8013728:	509f79fb 	.word	0x509f79fb
 801372c:	3fd34413 	.word	0x3fd34413
 8013730:	0801538d 	.word	0x0801538d
 8013734:	080153a4 	.word	0x080153a4
 8013738:	7ff00000 	.word	0x7ff00000
 801373c:	08015389 	.word	0x08015389
 8013740:	08015380 	.word	0x08015380
 8013744:	0801535d 	.word	0x0801535d
 8013748:	3ff80000 	.word	0x3ff80000
 801374c:	08015498 	.word	0x08015498
 8013750:	080153ff 	.word	0x080153ff
 8013754:	2501      	movs	r5, #1
 8013756:	2300      	movs	r3, #0
 8013758:	9306      	str	r3, [sp, #24]
 801375a:	9508      	str	r5, [sp, #32]
 801375c:	f04f 33ff 	mov.w	r3, #4294967295
 8013760:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013764:	2200      	movs	r2, #0
 8013766:	2312      	movs	r3, #18
 8013768:	e7b0      	b.n	80136cc <_dtoa_r+0x26c>
 801376a:	2301      	movs	r3, #1
 801376c:	9308      	str	r3, [sp, #32]
 801376e:	e7f5      	b.n	801375c <_dtoa_r+0x2fc>
 8013770:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013772:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013776:	e7b8      	b.n	80136ea <_dtoa_r+0x28a>
 8013778:	3101      	adds	r1, #1
 801377a:	6041      	str	r1, [r0, #4]
 801377c:	0052      	lsls	r2, r2, #1
 801377e:	e7b8      	b.n	80136f2 <_dtoa_r+0x292>
 8013780:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013782:	9a01      	ldr	r2, [sp, #4]
 8013784:	601a      	str	r2, [r3, #0]
 8013786:	9b03      	ldr	r3, [sp, #12]
 8013788:	2b0e      	cmp	r3, #14
 801378a:	f200 809d 	bhi.w	80138c8 <_dtoa_r+0x468>
 801378e:	2d00      	cmp	r5, #0
 8013790:	f000 809a 	beq.w	80138c8 <_dtoa_r+0x468>
 8013794:	9b00      	ldr	r3, [sp, #0]
 8013796:	2b00      	cmp	r3, #0
 8013798:	dd32      	ble.n	8013800 <_dtoa_r+0x3a0>
 801379a:	4ab7      	ldr	r2, [pc, #732]	; (8013a78 <_dtoa_r+0x618>)
 801379c:	f003 030f 	and.w	r3, r3, #15
 80137a0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80137a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80137a8:	9b00      	ldr	r3, [sp, #0]
 80137aa:	05d8      	lsls	r0, r3, #23
 80137ac:	ea4f 1723 	mov.w	r7, r3, asr #4
 80137b0:	d516      	bpl.n	80137e0 <_dtoa_r+0x380>
 80137b2:	4bb2      	ldr	r3, [pc, #712]	; (8013a7c <_dtoa_r+0x61c>)
 80137b4:	ec51 0b19 	vmov	r0, r1, d9
 80137b8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80137bc:	f7ed f866 	bl	800088c <__aeabi_ddiv>
 80137c0:	f007 070f 	and.w	r7, r7, #15
 80137c4:	4682      	mov	sl, r0
 80137c6:	468b      	mov	fp, r1
 80137c8:	2503      	movs	r5, #3
 80137ca:	4eac      	ldr	r6, [pc, #688]	; (8013a7c <_dtoa_r+0x61c>)
 80137cc:	b957      	cbnz	r7, 80137e4 <_dtoa_r+0x384>
 80137ce:	4642      	mov	r2, r8
 80137d0:	464b      	mov	r3, r9
 80137d2:	4650      	mov	r0, sl
 80137d4:	4659      	mov	r1, fp
 80137d6:	f7ed f859 	bl	800088c <__aeabi_ddiv>
 80137da:	4682      	mov	sl, r0
 80137dc:	468b      	mov	fp, r1
 80137de:	e028      	b.n	8013832 <_dtoa_r+0x3d2>
 80137e0:	2502      	movs	r5, #2
 80137e2:	e7f2      	b.n	80137ca <_dtoa_r+0x36a>
 80137e4:	07f9      	lsls	r1, r7, #31
 80137e6:	d508      	bpl.n	80137fa <_dtoa_r+0x39a>
 80137e8:	4640      	mov	r0, r8
 80137ea:	4649      	mov	r1, r9
 80137ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 80137f0:	f7ec ff22 	bl	8000638 <__aeabi_dmul>
 80137f4:	3501      	adds	r5, #1
 80137f6:	4680      	mov	r8, r0
 80137f8:	4689      	mov	r9, r1
 80137fa:	107f      	asrs	r7, r7, #1
 80137fc:	3608      	adds	r6, #8
 80137fe:	e7e5      	b.n	80137cc <_dtoa_r+0x36c>
 8013800:	f000 809b 	beq.w	801393a <_dtoa_r+0x4da>
 8013804:	9b00      	ldr	r3, [sp, #0]
 8013806:	4f9d      	ldr	r7, [pc, #628]	; (8013a7c <_dtoa_r+0x61c>)
 8013808:	425e      	negs	r6, r3
 801380a:	4b9b      	ldr	r3, [pc, #620]	; (8013a78 <_dtoa_r+0x618>)
 801380c:	f006 020f 	and.w	r2, r6, #15
 8013810:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013818:	ec51 0b19 	vmov	r0, r1, d9
 801381c:	f7ec ff0c 	bl	8000638 <__aeabi_dmul>
 8013820:	1136      	asrs	r6, r6, #4
 8013822:	4682      	mov	sl, r0
 8013824:	468b      	mov	fp, r1
 8013826:	2300      	movs	r3, #0
 8013828:	2502      	movs	r5, #2
 801382a:	2e00      	cmp	r6, #0
 801382c:	d17a      	bne.n	8013924 <_dtoa_r+0x4c4>
 801382e:	2b00      	cmp	r3, #0
 8013830:	d1d3      	bne.n	80137da <_dtoa_r+0x37a>
 8013832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013834:	2b00      	cmp	r3, #0
 8013836:	f000 8082 	beq.w	801393e <_dtoa_r+0x4de>
 801383a:	4b91      	ldr	r3, [pc, #580]	; (8013a80 <_dtoa_r+0x620>)
 801383c:	2200      	movs	r2, #0
 801383e:	4650      	mov	r0, sl
 8013840:	4659      	mov	r1, fp
 8013842:	f7ed f96b 	bl	8000b1c <__aeabi_dcmplt>
 8013846:	2800      	cmp	r0, #0
 8013848:	d079      	beq.n	801393e <_dtoa_r+0x4de>
 801384a:	9b03      	ldr	r3, [sp, #12]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d076      	beq.n	801393e <_dtoa_r+0x4de>
 8013850:	9b02      	ldr	r3, [sp, #8]
 8013852:	2b00      	cmp	r3, #0
 8013854:	dd36      	ble.n	80138c4 <_dtoa_r+0x464>
 8013856:	9b00      	ldr	r3, [sp, #0]
 8013858:	4650      	mov	r0, sl
 801385a:	4659      	mov	r1, fp
 801385c:	1e5f      	subs	r7, r3, #1
 801385e:	2200      	movs	r2, #0
 8013860:	4b88      	ldr	r3, [pc, #544]	; (8013a84 <_dtoa_r+0x624>)
 8013862:	f7ec fee9 	bl	8000638 <__aeabi_dmul>
 8013866:	9e02      	ldr	r6, [sp, #8]
 8013868:	4682      	mov	sl, r0
 801386a:	468b      	mov	fp, r1
 801386c:	3501      	adds	r5, #1
 801386e:	4628      	mov	r0, r5
 8013870:	f7ec fe78 	bl	8000564 <__aeabi_i2d>
 8013874:	4652      	mov	r2, sl
 8013876:	465b      	mov	r3, fp
 8013878:	f7ec fede 	bl	8000638 <__aeabi_dmul>
 801387c:	4b82      	ldr	r3, [pc, #520]	; (8013a88 <_dtoa_r+0x628>)
 801387e:	2200      	movs	r2, #0
 8013880:	f7ec fd24 	bl	80002cc <__adddf3>
 8013884:	46d0      	mov	r8, sl
 8013886:	46d9      	mov	r9, fp
 8013888:	4682      	mov	sl, r0
 801388a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 801388e:	2e00      	cmp	r6, #0
 8013890:	d158      	bne.n	8013944 <_dtoa_r+0x4e4>
 8013892:	4b7e      	ldr	r3, [pc, #504]	; (8013a8c <_dtoa_r+0x62c>)
 8013894:	2200      	movs	r2, #0
 8013896:	4640      	mov	r0, r8
 8013898:	4649      	mov	r1, r9
 801389a:	f7ec fd15 	bl	80002c8 <__aeabi_dsub>
 801389e:	4652      	mov	r2, sl
 80138a0:	465b      	mov	r3, fp
 80138a2:	4680      	mov	r8, r0
 80138a4:	4689      	mov	r9, r1
 80138a6:	f7ed f957 	bl	8000b58 <__aeabi_dcmpgt>
 80138aa:	2800      	cmp	r0, #0
 80138ac:	f040 8295 	bne.w	8013dda <_dtoa_r+0x97a>
 80138b0:	4652      	mov	r2, sl
 80138b2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80138b6:	4640      	mov	r0, r8
 80138b8:	4649      	mov	r1, r9
 80138ba:	f7ed f92f 	bl	8000b1c <__aeabi_dcmplt>
 80138be:	2800      	cmp	r0, #0
 80138c0:	f040 8289 	bne.w	8013dd6 <_dtoa_r+0x976>
 80138c4:	ec5b ab19 	vmov	sl, fp, d9
 80138c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	f2c0 8148 	blt.w	8013b60 <_dtoa_r+0x700>
 80138d0:	9a00      	ldr	r2, [sp, #0]
 80138d2:	2a0e      	cmp	r2, #14
 80138d4:	f300 8144 	bgt.w	8013b60 <_dtoa_r+0x700>
 80138d8:	4b67      	ldr	r3, [pc, #412]	; (8013a78 <_dtoa_r+0x618>)
 80138da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80138de:	e9d3 8900 	ldrd	r8, r9, [r3]
 80138e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138e4:	2b00      	cmp	r3, #0
 80138e6:	f280 80d5 	bge.w	8013a94 <_dtoa_r+0x634>
 80138ea:	9b03      	ldr	r3, [sp, #12]
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	f300 80d1 	bgt.w	8013a94 <_dtoa_r+0x634>
 80138f2:	f040 826f 	bne.w	8013dd4 <_dtoa_r+0x974>
 80138f6:	4b65      	ldr	r3, [pc, #404]	; (8013a8c <_dtoa_r+0x62c>)
 80138f8:	2200      	movs	r2, #0
 80138fa:	4640      	mov	r0, r8
 80138fc:	4649      	mov	r1, r9
 80138fe:	f7ec fe9b 	bl	8000638 <__aeabi_dmul>
 8013902:	4652      	mov	r2, sl
 8013904:	465b      	mov	r3, fp
 8013906:	f7ed f91d 	bl	8000b44 <__aeabi_dcmpge>
 801390a:	9e03      	ldr	r6, [sp, #12]
 801390c:	4637      	mov	r7, r6
 801390e:	2800      	cmp	r0, #0
 8013910:	f040 8245 	bne.w	8013d9e <_dtoa_r+0x93e>
 8013914:	9d01      	ldr	r5, [sp, #4]
 8013916:	2331      	movs	r3, #49	; 0x31
 8013918:	f805 3b01 	strb.w	r3, [r5], #1
 801391c:	9b00      	ldr	r3, [sp, #0]
 801391e:	3301      	adds	r3, #1
 8013920:	9300      	str	r3, [sp, #0]
 8013922:	e240      	b.n	8013da6 <_dtoa_r+0x946>
 8013924:	07f2      	lsls	r2, r6, #31
 8013926:	d505      	bpl.n	8013934 <_dtoa_r+0x4d4>
 8013928:	e9d7 2300 	ldrd	r2, r3, [r7]
 801392c:	f7ec fe84 	bl	8000638 <__aeabi_dmul>
 8013930:	3501      	adds	r5, #1
 8013932:	2301      	movs	r3, #1
 8013934:	1076      	asrs	r6, r6, #1
 8013936:	3708      	adds	r7, #8
 8013938:	e777      	b.n	801382a <_dtoa_r+0x3ca>
 801393a:	2502      	movs	r5, #2
 801393c:	e779      	b.n	8013832 <_dtoa_r+0x3d2>
 801393e:	9f00      	ldr	r7, [sp, #0]
 8013940:	9e03      	ldr	r6, [sp, #12]
 8013942:	e794      	b.n	801386e <_dtoa_r+0x40e>
 8013944:	9901      	ldr	r1, [sp, #4]
 8013946:	4b4c      	ldr	r3, [pc, #304]	; (8013a78 <_dtoa_r+0x618>)
 8013948:	4431      	add	r1, r6
 801394a:	910d      	str	r1, [sp, #52]	; 0x34
 801394c:	9908      	ldr	r1, [sp, #32]
 801394e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8013952:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8013956:	2900      	cmp	r1, #0
 8013958:	d043      	beq.n	80139e2 <_dtoa_r+0x582>
 801395a:	494d      	ldr	r1, [pc, #308]	; (8013a90 <_dtoa_r+0x630>)
 801395c:	2000      	movs	r0, #0
 801395e:	f7ec ff95 	bl	800088c <__aeabi_ddiv>
 8013962:	4652      	mov	r2, sl
 8013964:	465b      	mov	r3, fp
 8013966:	f7ec fcaf 	bl	80002c8 <__aeabi_dsub>
 801396a:	9d01      	ldr	r5, [sp, #4]
 801396c:	4682      	mov	sl, r0
 801396e:	468b      	mov	fp, r1
 8013970:	4649      	mov	r1, r9
 8013972:	4640      	mov	r0, r8
 8013974:	f7ed f910 	bl	8000b98 <__aeabi_d2iz>
 8013978:	4606      	mov	r6, r0
 801397a:	f7ec fdf3 	bl	8000564 <__aeabi_i2d>
 801397e:	4602      	mov	r2, r0
 8013980:	460b      	mov	r3, r1
 8013982:	4640      	mov	r0, r8
 8013984:	4649      	mov	r1, r9
 8013986:	f7ec fc9f 	bl	80002c8 <__aeabi_dsub>
 801398a:	3630      	adds	r6, #48	; 0x30
 801398c:	f805 6b01 	strb.w	r6, [r5], #1
 8013990:	4652      	mov	r2, sl
 8013992:	465b      	mov	r3, fp
 8013994:	4680      	mov	r8, r0
 8013996:	4689      	mov	r9, r1
 8013998:	f7ed f8c0 	bl	8000b1c <__aeabi_dcmplt>
 801399c:	2800      	cmp	r0, #0
 801399e:	d163      	bne.n	8013a68 <_dtoa_r+0x608>
 80139a0:	4642      	mov	r2, r8
 80139a2:	464b      	mov	r3, r9
 80139a4:	4936      	ldr	r1, [pc, #216]	; (8013a80 <_dtoa_r+0x620>)
 80139a6:	2000      	movs	r0, #0
 80139a8:	f7ec fc8e 	bl	80002c8 <__aeabi_dsub>
 80139ac:	4652      	mov	r2, sl
 80139ae:	465b      	mov	r3, fp
 80139b0:	f7ed f8b4 	bl	8000b1c <__aeabi_dcmplt>
 80139b4:	2800      	cmp	r0, #0
 80139b6:	f040 80b5 	bne.w	8013b24 <_dtoa_r+0x6c4>
 80139ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139bc:	429d      	cmp	r5, r3
 80139be:	d081      	beq.n	80138c4 <_dtoa_r+0x464>
 80139c0:	4b30      	ldr	r3, [pc, #192]	; (8013a84 <_dtoa_r+0x624>)
 80139c2:	2200      	movs	r2, #0
 80139c4:	4650      	mov	r0, sl
 80139c6:	4659      	mov	r1, fp
 80139c8:	f7ec fe36 	bl	8000638 <__aeabi_dmul>
 80139cc:	4b2d      	ldr	r3, [pc, #180]	; (8013a84 <_dtoa_r+0x624>)
 80139ce:	4682      	mov	sl, r0
 80139d0:	468b      	mov	fp, r1
 80139d2:	4640      	mov	r0, r8
 80139d4:	4649      	mov	r1, r9
 80139d6:	2200      	movs	r2, #0
 80139d8:	f7ec fe2e 	bl	8000638 <__aeabi_dmul>
 80139dc:	4680      	mov	r8, r0
 80139de:	4689      	mov	r9, r1
 80139e0:	e7c6      	b.n	8013970 <_dtoa_r+0x510>
 80139e2:	4650      	mov	r0, sl
 80139e4:	4659      	mov	r1, fp
 80139e6:	f7ec fe27 	bl	8000638 <__aeabi_dmul>
 80139ea:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80139ec:	9d01      	ldr	r5, [sp, #4]
 80139ee:	930f      	str	r3, [sp, #60]	; 0x3c
 80139f0:	4682      	mov	sl, r0
 80139f2:	468b      	mov	fp, r1
 80139f4:	4649      	mov	r1, r9
 80139f6:	4640      	mov	r0, r8
 80139f8:	f7ed f8ce 	bl	8000b98 <__aeabi_d2iz>
 80139fc:	4606      	mov	r6, r0
 80139fe:	f7ec fdb1 	bl	8000564 <__aeabi_i2d>
 8013a02:	3630      	adds	r6, #48	; 0x30
 8013a04:	4602      	mov	r2, r0
 8013a06:	460b      	mov	r3, r1
 8013a08:	4640      	mov	r0, r8
 8013a0a:	4649      	mov	r1, r9
 8013a0c:	f7ec fc5c 	bl	80002c8 <__aeabi_dsub>
 8013a10:	f805 6b01 	strb.w	r6, [r5], #1
 8013a14:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013a16:	429d      	cmp	r5, r3
 8013a18:	4680      	mov	r8, r0
 8013a1a:	4689      	mov	r9, r1
 8013a1c:	f04f 0200 	mov.w	r2, #0
 8013a20:	d124      	bne.n	8013a6c <_dtoa_r+0x60c>
 8013a22:	4b1b      	ldr	r3, [pc, #108]	; (8013a90 <_dtoa_r+0x630>)
 8013a24:	4650      	mov	r0, sl
 8013a26:	4659      	mov	r1, fp
 8013a28:	f7ec fc50 	bl	80002cc <__adddf3>
 8013a2c:	4602      	mov	r2, r0
 8013a2e:	460b      	mov	r3, r1
 8013a30:	4640      	mov	r0, r8
 8013a32:	4649      	mov	r1, r9
 8013a34:	f7ed f890 	bl	8000b58 <__aeabi_dcmpgt>
 8013a38:	2800      	cmp	r0, #0
 8013a3a:	d173      	bne.n	8013b24 <_dtoa_r+0x6c4>
 8013a3c:	4652      	mov	r2, sl
 8013a3e:	465b      	mov	r3, fp
 8013a40:	4913      	ldr	r1, [pc, #76]	; (8013a90 <_dtoa_r+0x630>)
 8013a42:	2000      	movs	r0, #0
 8013a44:	f7ec fc40 	bl	80002c8 <__aeabi_dsub>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	460b      	mov	r3, r1
 8013a4c:	4640      	mov	r0, r8
 8013a4e:	4649      	mov	r1, r9
 8013a50:	f7ed f864 	bl	8000b1c <__aeabi_dcmplt>
 8013a54:	2800      	cmp	r0, #0
 8013a56:	f43f af35 	beq.w	80138c4 <_dtoa_r+0x464>
 8013a5a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013a5c:	1e6b      	subs	r3, r5, #1
 8013a5e:	930f      	str	r3, [sp, #60]	; 0x3c
 8013a60:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8013a64:	2b30      	cmp	r3, #48	; 0x30
 8013a66:	d0f8      	beq.n	8013a5a <_dtoa_r+0x5fa>
 8013a68:	9700      	str	r7, [sp, #0]
 8013a6a:	e049      	b.n	8013b00 <_dtoa_r+0x6a0>
 8013a6c:	4b05      	ldr	r3, [pc, #20]	; (8013a84 <_dtoa_r+0x624>)
 8013a6e:	f7ec fde3 	bl	8000638 <__aeabi_dmul>
 8013a72:	4680      	mov	r8, r0
 8013a74:	4689      	mov	r9, r1
 8013a76:	e7bd      	b.n	80139f4 <_dtoa_r+0x594>
 8013a78:	08015498 	.word	0x08015498
 8013a7c:	08015470 	.word	0x08015470
 8013a80:	3ff00000 	.word	0x3ff00000
 8013a84:	40240000 	.word	0x40240000
 8013a88:	401c0000 	.word	0x401c0000
 8013a8c:	40140000 	.word	0x40140000
 8013a90:	3fe00000 	.word	0x3fe00000
 8013a94:	9d01      	ldr	r5, [sp, #4]
 8013a96:	4656      	mov	r6, sl
 8013a98:	465f      	mov	r7, fp
 8013a9a:	4642      	mov	r2, r8
 8013a9c:	464b      	mov	r3, r9
 8013a9e:	4630      	mov	r0, r6
 8013aa0:	4639      	mov	r1, r7
 8013aa2:	f7ec fef3 	bl	800088c <__aeabi_ddiv>
 8013aa6:	f7ed f877 	bl	8000b98 <__aeabi_d2iz>
 8013aaa:	4682      	mov	sl, r0
 8013aac:	f7ec fd5a 	bl	8000564 <__aeabi_i2d>
 8013ab0:	4642      	mov	r2, r8
 8013ab2:	464b      	mov	r3, r9
 8013ab4:	f7ec fdc0 	bl	8000638 <__aeabi_dmul>
 8013ab8:	4602      	mov	r2, r0
 8013aba:	460b      	mov	r3, r1
 8013abc:	4630      	mov	r0, r6
 8013abe:	4639      	mov	r1, r7
 8013ac0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8013ac4:	f7ec fc00 	bl	80002c8 <__aeabi_dsub>
 8013ac8:	f805 6b01 	strb.w	r6, [r5], #1
 8013acc:	9e01      	ldr	r6, [sp, #4]
 8013ace:	9f03      	ldr	r7, [sp, #12]
 8013ad0:	1bae      	subs	r6, r5, r6
 8013ad2:	42b7      	cmp	r7, r6
 8013ad4:	4602      	mov	r2, r0
 8013ad6:	460b      	mov	r3, r1
 8013ad8:	d135      	bne.n	8013b46 <_dtoa_r+0x6e6>
 8013ada:	f7ec fbf7 	bl	80002cc <__adddf3>
 8013ade:	4642      	mov	r2, r8
 8013ae0:	464b      	mov	r3, r9
 8013ae2:	4606      	mov	r6, r0
 8013ae4:	460f      	mov	r7, r1
 8013ae6:	f7ed f837 	bl	8000b58 <__aeabi_dcmpgt>
 8013aea:	b9d0      	cbnz	r0, 8013b22 <_dtoa_r+0x6c2>
 8013aec:	4642      	mov	r2, r8
 8013aee:	464b      	mov	r3, r9
 8013af0:	4630      	mov	r0, r6
 8013af2:	4639      	mov	r1, r7
 8013af4:	f7ed f808 	bl	8000b08 <__aeabi_dcmpeq>
 8013af8:	b110      	cbz	r0, 8013b00 <_dtoa_r+0x6a0>
 8013afa:	f01a 0f01 	tst.w	sl, #1
 8013afe:	d110      	bne.n	8013b22 <_dtoa_r+0x6c2>
 8013b00:	4620      	mov	r0, r4
 8013b02:	ee18 1a10 	vmov	r1, s16
 8013b06:	f000 faf7 	bl	80140f8 <_Bfree>
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	9800      	ldr	r0, [sp, #0]
 8013b0e:	702b      	strb	r3, [r5, #0]
 8013b10:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8013b12:	3001      	adds	r0, #1
 8013b14:	6018      	str	r0, [r3, #0]
 8013b16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013b18:	2b00      	cmp	r3, #0
 8013b1a:	f43f acf1 	beq.w	8013500 <_dtoa_r+0xa0>
 8013b1e:	601d      	str	r5, [r3, #0]
 8013b20:	e4ee      	b.n	8013500 <_dtoa_r+0xa0>
 8013b22:	9f00      	ldr	r7, [sp, #0]
 8013b24:	462b      	mov	r3, r5
 8013b26:	461d      	mov	r5, r3
 8013b28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013b2c:	2a39      	cmp	r2, #57	; 0x39
 8013b2e:	d106      	bne.n	8013b3e <_dtoa_r+0x6de>
 8013b30:	9a01      	ldr	r2, [sp, #4]
 8013b32:	429a      	cmp	r2, r3
 8013b34:	d1f7      	bne.n	8013b26 <_dtoa_r+0x6c6>
 8013b36:	9901      	ldr	r1, [sp, #4]
 8013b38:	2230      	movs	r2, #48	; 0x30
 8013b3a:	3701      	adds	r7, #1
 8013b3c:	700a      	strb	r2, [r1, #0]
 8013b3e:	781a      	ldrb	r2, [r3, #0]
 8013b40:	3201      	adds	r2, #1
 8013b42:	701a      	strb	r2, [r3, #0]
 8013b44:	e790      	b.n	8013a68 <_dtoa_r+0x608>
 8013b46:	4ba6      	ldr	r3, [pc, #664]	; (8013de0 <_dtoa_r+0x980>)
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f7ec fd75 	bl	8000638 <__aeabi_dmul>
 8013b4e:	2200      	movs	r2, #0
 8013b50:	2300      	movs	r3, #0
 8013b52:	4606      	mov	r6, r0
 8013b54:	460f      	mov	r7, r1
 8013b56:	f7ec ffd7 	bl	8000b08 <__aeabi_dcmpeq>
 8013b5a:	2800      	cmp	r0, #0
 8013b5c:	d09d      	beq.n	8013a9a <_dtoa_r+0x63a>
 8013b5e:	e7cf      	b.n	8013b00 <_dtoa_r+0x6a0>
 8013b60:	9a08      	ldr	r2, [sp, #32]
 8013b62:	2a00      	cmp	r2, #0
 8013b64:	f000 80d7 	beq.w	8013d16 <_dtoa_r+0x8b6>
 8013b68:	9a06      	ldr	r2, [sp, #24]
 8013b6a:	2a01      	cmp	r2, #1
 8013b6c:	f300 80ba 	bgt.w	8013ce4 <_dtoa_r+0x884>
 8013b70:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8013b72:	2a00      	cmp	r2, #0
 8013b74:	f000 80b2 	beq.w	8013cdc <_dtoa_r+0x87c>
 8013b78:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013b7c:	9e07      	ldr	r6, [sp, #28]
 8013b7e:	9d04      	ldr	r5, [sp, #16]
 8013b80:	9a04      	ldr	r2, [sp, #16]
 8013b82:	441a      	add	r2, r3
 8013b84:	9204      	str	r2, [sp, #16]
 8013b86:	9a05      	ldr	r2, [sp, #20]
 8013b88:	2101      	movs	r1, #1
 8013b8a:	441a      	add	r2, r3
 8013b8c:	4620      	mov	r0, r4
 8013b8e:	9205      	str	r2, [sp, #20]
 8013b90:	f000 fb6a 	bl	8014268 <__i2b>
 8013b94:	4607      	mov	r7, r0
 8013b96:	2d00      	cmp	r5, #0
 8013b98:	dd0c      	ble.n	8013bb4 <_dtoa_r+0x754>
 8013b9a:	9b05      	ldr	r3, [sp, #20]
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	dd09      	ble.n	8013bb4 <_dtoa_r+0x754>
 8013ba0:	42ab      	cmp	r3, r5
 8013ba2:	9a04      	ldr	r2, [sp, #16]
 8013ba4:	bfa8      	it	ge
 8013ba6:	462b      	movge	r3, r5
 8013ba8:	1ad2      	subs	r2, r2, r3
 8013baa:	9204      	str	r2, [sp, #16]
 8013bac:	9a05      	ldr	r2, [sp, #20]
 8013bae:	1aed      	subs	r5, r5, r3
 8013bb0:	1ad3      	subs	r3, r2, r3
 8013bb2:	9305      	str	r3, [sp, #20]
 8013bb4:	9b07      	ldr	r3, [sp, #28]
 8013bb6:	b31b      	cbz	r3, 8013c00 <_dtoa_r+0x7a0>
 8013bb8:	9b08      	ldr	r3, [sp, #32]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	f000 80af 	beq.w	8013d1e <_dtoa_r+0x8be>
 8013bc0:	2e00      	cmp	r6, #0
 8013bc2:	dd13      	ble.n	8013bec <_dtoa_r+0x78c>
 8013bc4:	4639      	mov	r1, r7
 8013bc6:	4632      	mov	r2, r6
 8013bc8:	4620      	mov	r0, r4
 8013bca:	f000 fc0d 	bl	80143e8 <__pow5mult>
 8013bce:	ee18 2a10 	vmov	r2, s16
 8013bd2:	4601      	mov	r1, r0
 8013bd4:	4607      	mov	r7, r0
 8013bd6:	4620      	mov	r0, r4
 8013bd8:	f000 fb5c 	bl	8014294 <__multiply>
 8013bdc:	ee18 1a10 	vmov	r1, s16
 8013be0:	4680      	mov	r8, r0
 8013be2:	4620      	mov	r0, r4
 8013be4:	f000 fa88 	bl	80140f8 <_Bfree>
 8013be8:	ee08 8a10 	vmov	s16, r8
 8013bec:	9b07      	ldr	r3, [sp, #28]
 8013bee:	1b9a      	subs	r2, r3, r6
 8013bf0:	d006      	beq.n	8013c00 <_dtoa_r+0x7a0>
 8013bf2:	ee18 1a10 	vmov	r1, s16
 8013bf6:	4620      	mov	r0, r4
 8013bf8:	f000 fbf6 	bl	80143e8 <__pow5mult>
 8013bfc:	ee08 0a10 	vmov	s16, r0
 8013c00:	2101      	movs	r1, #1
 8013c02:	4620      	mov	r0, r4
 8013c04:	f000 fb30 	bl	8014268 <__i2b>
 8013c08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013c0a:	2b00      	cmp	r3, #0
 8013c0c:	4606      	mov	r6, r0
 8013c0e:	f340 8088 	ble.w	8013d22 <_dtoa_r+0x8c2>
 8013c12:	461a      	mov	r2, r3
 8013c14:	4601      	mov	r1, r0
 8013c16:	4620      	mov	r0, r4
 8013c18:	f000 fbe6 	bl	80143e8 <__pow5mult>
 8013c1c:	9b06      	ldr	r3, [sp, #24]
 8013c1e:	2b01      	cmp	r3, #1
 8013c20:	4606      	mov	r6, r0
 8013c22:	f340 8081 	ble.w	8013d28 <_dtoa_r+0x8c8>
 8013c26:	f04f 0800 	mov.w	r8, #0
 8013c2a:	6933      	ldr	r3, [r6, #16]
 8013c2c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8013c30:	6918      	ldr	r0, [r3, #16]
 8013c32:	f000 fac9 	bl	80141c8 <__hi0bits>
 8013c36:	f1c0 0020 	rsb	r0, r0, #32
 8013c3a:	9b05      	ldr	r3, [sp, #20]
 8013c3c:	4418      	add	r0, r3
 8013c3e:	f010 001f 	ands.w	r0, r0, #31
 8013c42:	f000 8092 	beq.w	8013d6a <_dtoa_r+0x90a>
 8013c46:	f1c0 0320 	rsb	r3, r0, #32
 8013c4a:	2b04      	cmp	r3, #4
 8013c4c:	f340 808a 	ble.w	8013d64 <_dtoa_r+0x904>
 8013c50:	f1c0 001c 	rsb	r0, r0, #28
 8013c54:	9b04      	ldr	r3, [sp, #16]
 8013c56:	4403      	add	r3, r0
 8013c58:	9304      	str	r3, [sp, #16]
 8013c5a:	9b05      	ldr	r3, [sp, #20]
 8013c5c:	4403      	add	r3, r0
 8013c5e:	4405      	add	r5, r0
 8013c60:	9305      	str	r3, [sp, #20]
 8013c62:	9b04      	ldr	r3, [sp, #16]
 8013c64:	2b00      	cmp	r3, #0
 8013c66:	dd07      	ble.n	8013c78 <_dtoa_r+0x818>
 8013c68:	ee18 1a10 	vmov	r1, s16
 8013c6c:	461a      	mov	r2, r3
 8013c6e:	4620      	mov	r0, r4
 8013c70:	f000 fc14 	bl	801449c <__lshift>
 8013c74:	ee08 0a10 	vmov	s16, r0
 8013c78:	9b05      	ldr	r3, [sp, #20]
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	dd05      	ble.n	8013c8a <_dtoa_r+0x82a>
 8013c7e:	4631      	mov	r1, r6
 8013c80:	461a      	mov	r2, r3
 8013c82:	4620      	mov	r0, r4
 8013c84:	f000 fc0a 	bl	801449c <__lshift>
 8013c88:	4606      	mov	r6, r0
 8013c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	d06e      	beq.n	8013d6e <_dtoa_r+0x90e>
 8013c90:	ee18 0a10 	vmov	r0, s16
 8013c94:	4631      	mov	r1, r6
 8013c96:	f000 fc71 	bl	801457c <__mcmp>
 8013c9a:	2800      	cmp	r0, #0
 8013c9c:	da67      	bge.n	8013d6e <_dtoa_r+0x90e>
 8013c9e:	9b00      	ldr	r3, [sp, #0]
 8013ca0:	3b01      	subs	r3, #1
 8013ca2:	ee18 1a10 	vmov	r1, s16
 8013ca6:	9300      	str	r3, [sp, #0]
 8013ca8:	220a      	movs	r2, #10
 8013caa:	2300      	movs	r3, #0
 8013cac:	4620      	mov	r0, r4
 8013cae:	f000 fa45 	bl	801413c <__multadd>
 8013cb2:	9b08      	ldr	r3, [sp, #32]
 8013cb4:	ee08 0a10 	vmov	s16, r0
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	f000 81b1 	beq.w	8014020 <_dtoa_r+0xbc0>
 8013cbe:	2300      	movs	r3, #0
 8013cc0:	4639      	mov	r1, r7
 8013cc2:	220a      	movs	r2, #10
 8013cc4:	4620      	mov	r0, r4
 8013cc6:	f000 fa39 	bl	801413c <__multadd>
 8013cca:	9b02      	ldr	r3, [sp, #8]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	4607      	mov	r7, r0
 8013cd0:	f300 808e 	bgt.w	8013df0 <_dtoa_r+0x990>
 8013cd4:	9b06      	ldr	r3, [sp, #24]
 8013cd6:	2b02      	cmp	r3, #2
 8013cd8:	dc51      	bgt.n	8013d7e <_dtoa_r+0x91e>
 8013cda:	e089      	b.n	8013df0 <_dtoa_r+0x990>
 8013cdc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013cde:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8013ce2:	e74b      	b.n	8013b7c <_dtoa_r+0x71c>
 8013ce4:	9b03      	ldr	r3, [sp, #12]
 8013ce6:	1e5e      	subs	r6, r3, #1
 8013ce8:	9b07      	ldr	r3, [sp, #28]
 8013cea:	42b3      	cmp	r3, r6
 8013cec:	bfbf      	itttt	lt
 8013cee:	9b07      	ldrlt	r3, [sp, #28]
 8013cf0:	9607      	strlt	r6, [sp, #28]
 8013cf2:	1af2      	sublt	r2, r6, r3
 8013cf4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8013cf6:	bfb6      	itet	lt
 8013cf8:	189b      	addlt	r3, r3, r2
 8013cfa:	1b9e      	subge	r6, r3, r6
 8013cfc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8013cfe:	9b03      	ldr	r3, [sp, #12]
 8013d00:	bfb8      	it	lt
 8013d02:	2600      	movlt	r6, #0
 8013d04:	2b00      	cmp	r3, #0
 8013d06:	bfb7      	itett	lt
 8013d08:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8013d0c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8013d10:	1a9d      	sublt	r5, r3, r2
 8013d12:	2300      	movlt	r3, #0
 8013d14:	e734      	b.n	8013b80 <_dtoa_r+0x720>
 8013d16:	9e07      	ldr	r6, [sp, #28]
 8013d18:	9d04      	ldr	r5, [sp, #16]
 8013d1a:	9f08      	ldr	r7, [sp, #32]
 8013d1c:	e73b      	b.n	8013b96 <_dtoa_r+0x736>
 8013d1e:	9a07      	ldr	r2, [sp, #28]
 8013d20:	e767      	b.n	8013bf2 <_dtoa_r+0x792>
 8013d22:	9b06      	ldr	r3, [sp, #24]
 8013d24:	2b01      	cmp	r3, #1
 8013d26:	dc18      	bgt.n	8013d5a <_dtoa_r+0x8fa>
 8013d28:	f1ba 0f00 	cmp.w	sl, #0
 8013d2c:	d115      	bne.n	8013d5a <_dtoa_r+0x8fa>
 8013d2e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8013d32:	b993      	cbnz	r3, 8013d5a <_dtoa_r+0x8fa>
 8013d34:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8013d38:	0d1b      	lsrs	r3, r3, #20
 8013d3a:	051b      	lsls	r3, r3, #20
 8013d3c:	b183      	cbz	r3, 8013d60 <_dtoa_r+0x900>
 8013d3e:	9b04      	ldr	r3, [sp, #16]
 8013d40:	3301      	adds	r3, #1
 8013d42:	9304      	str	r3, [sp, #16]
 8013d44:	9b05      	ldr	r3, [sp, #20]
 8013d46:	3301      	adds	r3, #1
 8013d48:	9305      	str	r3, [sp, #20]
 8013d4a:	f04f 0801 	mov.w	r8, #1
 8013d4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013d50:	2b00      	cmp	r3, #0
 8013d52:	f47f af6a 	bne.w	8013c2a <_dtoa_r+0x7ca>
 8013d56:	2001      	movs	r0, #1
 8013d58:	e76f      	b.n	8013c3a <_dtoa_r+0x7da>
 8013d5a:	f04f 0800 	mov.w	r8, #0
 8013d5e:	e7f6      	b.n	8013d4e <_dtoa_r+0x8ee>
 8013d60:	4698      	mov	r8, r3
 8013d62:	e7f4      	b.n	8013d4e <_dtoa_r+0x8ee>
 8013d64:	f43f af7d 	beq.w	8013c62 <_dtoa_r+0x802>
 8013d68:	4618      	mov	r0, r3
 8013d6a:	301c      	adds	r0, #28
 8013d6c:	e772      	b.n	8013c54 <_dtoa_r+0x7f4>
 8013d6e:	9b03      	ldr	r3, [sp, #12]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	dc37      	bgt.n	8013de4 <_dtoa_r+0x984>
 8013d74:	9b06      	ldr	r3, [sp, #24]
 8013d76:	2b02      	cmp	r3, #2
 8013d78:	dd34      	ble.n	8013de4 <_dtoa_r+0x984>
 8013d7a:	9b03      	ldr	r3, [sp, #12]
 8013d7c:	9302      	str	r3, [sp, #8]
 8013d7e:	9b02      	ldr	r3, [sp, #8]
 8013d80:	b96b      	cbnz	r3, 8013d9e <_dtoa_r+0x93e>
 8013d82:	4631      	mov	r1, r6
 8013d84:	2205      	movs	r2, #5
 8013d86:	4620      	mov	r0, r4
 8013d88:	f000 f9d8 	bl	801413c <__multadd>
 8013d8c:	4601      	mov	r1, r0
 8013d8e:	4606      	mov	r6, r0
 8013d90:	ee18 0a10 	vmov	r0, s16
 8013d94:	f000 fbf2 	bl	801457c <__mcmp>
 8013d98:	2800      	cmp	r0, #0
 8013d9a:	f73f adbb 	bgt.w	8013914 <_dtoa_r+0x4b4>
 8013d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013da0:	9d01      	ldr	r5, [sp, #4]
 8013da2:	43db      	mvns	r3, r3
 8013da4:	9300      	str	r3, [sp, #0]
 8013da6:	f04f 0800 	mov.w	r8, #0
 8013daa:	4631      	mov	r1, r6
 8013dac:	4620      	mov	r0, r4
 8013dae:	f000 f9a3 	bl	80140f8 <_Bfree>
 8013db2:	2f00      	cmp	r7, #0
 8013db4:	f43f aea4 	beq.w	8013b00 <_dtoa_r+0x6a0>
 8013db8:	f1b8 0f00 	cmp.w	r8, #0
 8013dbc:	d005      	beq.n	8013dca <_dtoa_r+0x96a>
 8013dbe:	45b8      	cmp	r8, r7
 8013dc0:	d003      	beq.n	8013dca <_dtoa_r+0x96a>
 8013dc2:	4641      	mov	r1, r8
 8013dc4:	4620      	mov	r0, r4
 8013dc6:	f000 f997 	bl	80140f8 <_Bfree>
 8013dca:	4639      	mov	r1, r7
 8013dcc:	4620      	mov	r0, r4
 8013dce:	f000 f993 	bl	80140f8 <_Bfree>
 8013dd2:	e695      	b.n	8013b00 <_dtoa_r+0x6a0>
 8013dd4:	2600      	movs	r6, #0
 8013dd6:	4637      	mov	r7, r6
 8013dd8:	e7e1      	b.n	8013d9e <_dtoa_r+0x93e>
 8013dda:	9700      	str	r7, [sp, #0]
 8013ddc:	4637      	mov	r7, r6
 8013dde:	e599      	b.n	8013914 <_dtoa_r+0x4b4>
 8013de0:	40240000 	.word	0x40240000
 8013de4:	9b08      	ldr	r3, [sp, #32]
 8013de6:	2b00      	cmp	r3, #0
 8013de8:	f000 80ca 	beq.w	8013f80 <_dtoa_r+0xb20>
 8013dec:	9b03      	ldr	r3, [sp, #12]
 8013dee:	9302      	str	r3, [sp, #8]
 8013df0:	2d00      	cmp	r5, #0
 8013df2:	dd05      	ble.n	8013e00 <_dtoa_r+0x9a0>
 8013df4:	4639      	mov	r1, r7
 8013df6:	462a      	mov	r2, r5
 8013df8:	4620      	mov	r0, r4
 8013dfa:	f000 fb4f 	bl	801449c <__lshift>
 8013dfe:	4607      	mov	r7, r0
 8013e00:	f1b8 0f00 	cmp.w	r8, #0
 8013e04:	d05b      	beq.n	8013ebe <_dtoa_r+0xa5e>
 8013e06:	6879      	ldr	r1, [r7, #4]
 8013e08:	4620      	mov	r0, r4
 8013e0a:	f000 f935 	bl	8014078 <_Balloc>
 8013e0e:	4605      	mov	r5, r0
 8013e10:	b928      	cbnz	r0, 8013e1e <_dtoa_r+0x9be>
 8013e12:	4b87      	ldr	r3, [pc, #540]	; (8014030 <_dtoa_r+0xbd0>)
 8013e14:	4602      	mov	r2, r0
 8013e16:	f240 21ea 	movw	r1, #746	; 0x2ea
 8013e1a:	f7ff bb3b 	b.w	8013494 <_dtoa_r+0x34>
 8013e1e:	693a      	ldr	r2, [r7, #16]
 8013e20:	3202      	adds	r2, #2
 8013e22:	0092      	lsls	r2, r2, #2
 8013e24:	f107 010c 	add.w	r1, r7, #12
 8013e28:	300c      	adds	r0, #12
 8013e2a:	f000 f90b 	bl	8014044 <memcpy>
 8013e2e:	2201      	movs	r2, #1
 8013e30:	4629      	mov	r1, r5
 8013e32:	4620      	mov	r0, r4
 8013e34:	f000 fb32 	bl	801449c <__lshift>
 8013e38:	9b01      	ldr	r3, [sp, #4]
 8013e3a:	f103 0901 	add.w	r9, r3, #1
 8013e3e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8013e42:	4413      	add	r3, r2
 8013e44:	9305      	str	r3, [sp, #20]
 8013e46:	f00a 0301 	and.w	r3, sl, #1
 8013e4a:	46b8      	mov	r8, r7
 8013e4c:	9304      	str	r3, [sp, #16]
 8013e4e:	4607      	mov	r7, r0
 8013e50:	4631      	mov	r1, r6
 8013e52:	ee18 0a10 	vmov	r0, s16
 8013e56:	f7ff fa77 	bl	8013348 <quorem>
 8013e5a:	4641      	mov	r1, r8
 8013e5c:	9002      	str	r0, [sp, #8]
 8013e5e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013e62:	ee18 0a10 	vmov	r0, s16
 8013e66:	f000 fb89 	bl	801457c <__mcmp>
 8013e6a:	463a      	mov	r2, r7
 8013e6c:	9003      	str	r0, [sp, #12]
 8013e6e:	4631      	mov	r1, r6
 8013e70:	4620      	mov	r0, r4
 8013e72:	f000 fb9f 	bl	80145b4 <__mdiff>
 8013e76:	68c2      	ldr	r2, [r0, #12]
 8013e78:	f109 3bff 	add.w	fp, r9, #4294967295
 8013e7c:	4605      	mov	r5, r0
 8013e7e:	bb02      	cbnz	r2, 8013ec2 <_dtoa_r+0xa62>
 8013e80:	4601      	mov	r1, r0
 8013e82:	ee18 0a10 	vmov	r0, s16
 8013e86:	f000 fb79 	bl	801457c <__mcmp>
 8013e8a:	4602      	mov	r2, r0
 8013e8c:	4629      	mov	r1, r5
 8013e8e:	4620      	mov	r0, r4
 8013e90:	9207      	str	r2, [sp, #28]
 8013e92:	f000 f931 	bl	80140f8 <_Bfree>
 8013e96:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013e9a:	ea43 0102 	orr.w	r1, r3, r2
 8013e9e:	9b04      	ldr	r3, [sp, #16]
 8013ea0:	430b      	orrs	r3, r1
 8013ea2:	464d      	mov	r5, r9
 8013ea4:	d10f      	bne.n	8013ec6 <_dtoa_r+0xa66>
 8013ea6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013eaa:	d02a      	beq.n	8013f02 <_dtoa_r+0xaa2>
 8013eac:	9b03      	ldr	r3, [sp, #12]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	dd02      	ble.n	8013eb8 <_dtoa_r+0xa58>
 8013eb2:	9b02      	ldr	r3, [sp, #8]
 8013eb4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013eb8:	f88b a000 	strb.w	sl, [fp]
 8013ebc:	e775      	b.n	8013daa <_dtoa_r+0x94a>
 8013ebe:	4638      	mov	r0, r7
 8013ec0:	e7ba      	b.n	8013e38 <_dtoa_r+0x9d8>
 8013ec2:	2201      	movs	r2, #1
 8013ec4:	e7e2      	b.n	8013e8c <_dtoa_r+0xa2c>
 8013ec6:	9b03      	ldr	r3, [sp, #12]
 8013ec8:	2b00      	cmp	r3, #0
 8013eca:	db04      	blt.n	8013ed6 <_dtoa_r+0xa76>
 8013ecc:	9906      	ldr	r1, [sp, #24]
 8013ece:	430b      	orrs	r3, r1
 8013ed0:	9904      	ldr	r1, [sp, #16]
 8013ed2:	430b      	orrs	r3, r1
 8013ed4:	d122      	bne.n	8013f1c <_dtoa_r+0xabc>
 8013ed6:	2a00      	cmp	r2, #0
 8013ed8:	ddee      	ble.n	8013eb8 <_dtoa_r+0xa58>
 8013eda:	ee18 1a10 	vmov	r1, s16
 8013ede:	2201      	movs	r2, #1
 8013ee0:	4620      	mov	r0, r4
 8013ee2:	f000 fadb 	bl	801449c <__lshift>
 8013ee6:	4631      	mov	r1, r6
 8013ee8:	ee08 0a10 	vmov	s16, r0
 8013eec:	f000 fb46 	bl	801457c <__mcmp>
 8013ef0:	2800      	cmp	r0, #0
 8013ef2:	dc03      	bgt.n	8013efc <_dtoa_r+0xa9c>
 8013ef4:	d1e0      	bne.n	8013eb8 <_dtoa_r+0xa58>
 8013ef6:	f01a 0f01 	tst.w	sl, #1
 8013efa:	d0dd      	beq.n	8013eb8 <_dtoa_r+0xa58>
 8013efc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013f00:	d1d7      	bne.n	8013eb2 <_dtoa_r+0xa52>
 8013f02:	2339      	movs	r3, #57	; 0x39
 8013f04:	f88b 3000 	strb.w	r3, [fp]
 8013f08:	462b      	mov	r3, r5
 8013f0a:	461d      	mov	r5, r3
 8013f0c:	3b01      	subs	r3, #1
 8013f0e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8013f12:	2a39      	cmp	r2, #57	; 0x39
 8013f14:	d071      	beq.n	8013ffa <_dtoa_r+0xb9a>
 8013f16:	3201      	adds	r2, #1
 8013f18:	701a      	strb	r2, [r3, #0]
 8013f1a:	e746      	b.n	8013daa <_dtoa_r+0x94a>
 8013f1c:	2a00      	cmp	r2, #0
 8013f1e:	dd07      	ble.n	8013f30 <_dtoa_r+0xad0>
 8013f20:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013f24:	d0ed      	beq.n	8013f02 <_dtoa_r+0xaa2>
 8013f26:	f10a 0301 	add.w	r3, sl, #1
 8013f2a:	f88b 3000 	strb.w	r3, [fp]
 8013f2e:	e73c      	b.n	8013daa <_dtoa_r+0x94a>
 8013f30:	9b05      	ldr	r3, [sp, #20]
 8013f32:	f809 ac01 	strb.w	sl, [r9, #-1]
 8013f36:	4599      	cmp	r9, r3
 8013f38:	d047      	beq.n	8013fca <_dtoa_r+0xb6a>
 8013f3a:	ee18 1a10 	vmov	r1, s16
 8013f3e:	2300      	movs	r3, #0
 8013f40:	220a      	movs	r2, #10
 8013f42:	4620      	mov	r0, r4
 8013f44:	f000 f8fa 	bl	801413c <__multadd>
 8013f48:	45b8      	cmp	r8, r7
 8013f4a:	ee08 0a10 	vmov	s16, r0
 8013f4e:	f04f 0300 	mov.w	r3, #0
 8013f52:	f04f 020a 	mov.w	r2, #10
 8013f56:	4641      	mov	r1, r8
 8013f58:	4620      	mov	r0, r4
 8013f5a:	d106      	bne.n	8013f6a <_dtoa_r+0xb0a>
 8013f5c:	f000 f8ee 	bl	801413c <__multadd>
 8013f60:	4680      	mov	r8, r0
 8013f62:	4607      	mov	r7, r0
 8013f64:	f109 0901 	add.w	r9, r9, #1
 8013f68:	e772      	b.n	8013e50 <_dtoa_r+0x9f0>
 8013f6a:	f000 f8e7 	bl	801413c <__multadd>
 8013f6e:	4639      	mov	r1, r7
 8013f70:	4680      	mov	r8, r0
 8013f72:	2300      	movs	r3, #0
 8013f74:	220a      	movs	r2, #10
 8013f76:	4620      	mov	r0, r4
 8013f78:	f000 f8e0 	bl	801413c <__multadd>
 8013f7c:	4607      	mov	r7, r0
 8013f7e:	e7f1      	b.n	8013f64 <_dtoa_r+0xb04>
 8013f80:	9b03      	ldr	r3, [sp, #12]
 8013f82:	9302      	str	r3, [sp, #8]
 8013f84:	9d01      	ldr	r5, [sp, #4]
 8013f86:	ee18 0a10 	vmov	r0, s16
 8013f8a:	4631      	mov	r1, r6
 8013f8c:	f7ff f9dc 	bl	8013348 <quorem>
 8013f90:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013f94:	9b01      	ldr	r3, [sp, #4]
 8013f96:	f805 ab01 	strb.w	sl, [r5], #1
 8013f9a:	1aea      	subs	r2, r5, r3
 8013f9c:	9b02      	ldr	r3, [sp, #8]
 8013f9e:	4293      	cmp	r3, r2
 8013fa0:	dd09      	ble.n	8013fb6 <_dtoa_r+0xb56>
 8013fa2:	ee18 1a10 	vmov	r1, s16
 8013fa6:	2300      	movs	r3, #0
 8013fa8:	220a      	movs	r2, #10
 8013faa:	4620      	mov	r0, r4
 8013fac:	f000 f8c6 	bl	801413c <__multadd>
 8013fb0:	ee08 0a10 	vmov	s16, r0
 8013fb4:	e7e7      	b.n	8013f86 <_dtoa_r+0xb26>
 8013fb6:	9b02      	ldr	r3, [sp, #8]
 8013fb8:	2b00      	cmp	r3, #0
 8013fba:	bfc8      	it	gt
 8013fbc:	461d      	movgt	r5, r3
 8013fbe:	9b01      	ldr	r3, [sp, #4]
 8013fc0:	bfd8      	it	le
 8013fc2:	2501      	movle	r5, #1
 8013fc4:	441d      	add	r5, r3
 8013fc6:	f04f 0800 	mov.w	r8, #0
 8013fca:	ee18 1a10 	vmov	r1, s16
 8013fce:	2201      	movs	r2, #1
 8013fd0:	4620      	mov	r0, r4
 8013fd2:	f000 fa63 	bl	801449c <__lshift>
 8013fd6:	4631      	mov	r1, r6
 8013fd8:	ee08 0a10 	vmov	s16, r0
 8013fdc:	f000 face 	bl	801457c <__mcmp>
 8013fe0:	2800      	cmp	r0, #0
 8013fe2:	dc91      	bgt.n	8013f08 <_dtoa_r+0xaa8>
 8013fe4:	d102      	bne.n	8013fec <_dtoa_r+0xb8c>
 8013fe6:	f01a 0f01 	tst.w	sl, #1
 8013fea:	d18d      	bne.n	8013f08 <_dtoa_r+0xaa8>
 8013fec:	462b      	mov	r3, r5
 8013fee:	461d      	mov	r5, r3
 8013ff0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013ff4:	2a30      	cmp	r2, #48	; 0x30
 8013ff6:	d0fa      	beq.n	8013fee <_dtoa_r+0xb8e>
 8013ff8:	e6d7      	b.n	8013daa <_dtoa_r+0x94a>
 8013ffa:	9a01      	ldr	r2, [sp, #4]
 8013ffc:	429a      	cmp	r2, r3
 8013ffe:	d184      	bne.n	8013f0a <_dtoa_r+0xaaa>
 8014000:	9b00      	ldr	r3, [sp, #0]
 8014002:	3301      	adds	r3, #1
 8014004:	9300      	str	r3, [sp, #0]
 8014006:	2331      	movs	r3, #49	; 0x31
 8014008:	7013      	strb	r3, [r2, #0]
 801400a:	e6ce      	b.n	8013daa <_dtoa_r+0x94a>
 801400c:	4b09      	ldr	r3, [pc, #36]	; (8014034 <_dtoa_r+0xbd4>)
 801400e:	f7ff ba95 	b.w	801353c <_dtoa_r+0xdc>
 8014012:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8014014:	2b00      	cmp	r3, #0
 8014016:	f47f aa6e 	bne.w	80134f6 <_dtoa_r+0x96>
 801401a:	4b07      	ldr	r3, [pc, #28]	; (8014038 <_dtoa_r+0xbd8>)
 801401c:	f7ff ba8e 	b.w	801353c <_dtoa_r+0xdc>
 8014020:	9b02      	ldr	r3, [sp, #8]
 8014022:	2b00      	cmp	r3, #0
 8014024:	dcae      	bgt.n	8013f84 <_dtoa_r+0xb24>
 8014026:	9b06      	ldr	r3, [sp, #24]
 8014028:	2b02      	cmp	r3, #2
 801402a:	f73f aea8 	bgt.w	8013d7e <_dtoa_r+0x91e>
 801402e:	e7a9      	b.n	8013f84 <_dtoa_r+0xb24>
 8014030:	080153ff 	.word	0x080153ff
 8014034:	0801535c 	.word	0x0801535c
 8014038:	08015380 	.word	0x08015380

0801403c <_localeconv_r>:
 801403c:	4800      	ldr	r0, [pc, #0]	; (8014040 <_localeconv_r+0x4>)
 801403e:	4770      	bx	lr
 8014040:	20000280 	.word	0x20000280

08014044 <memcpy>:
 8014044:	440a      	add	r2, r1
 8014046:	4291      	cmp	r1, r2
 8014048:	f100 33ff 	add.w	r3, r0, #4294967295
 801404c:	d100      	bne.n	8014050 <memcpy+0xc>
 801404e:	4770      	bx	lr
 8014050:	b510      	push	{r4, lr}
 8014052:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014056:	f803 4f01 	strb.w	r4, [r3, #1]!
 801405a:	4291      	cmp	r1, r2
 801405c:	d1f9      	bne.n	8014052 <memcpy+0xe>
 801405e:	bd10      	pop	{r4, pc}

08014060 <__malloc_lock>:
 8014060:	4801      	ldr	r0, [pc, #4]	; (8014068 <__malloc_lock+0x8>)
 8014062:	f000 bbd4 	b.w	801480e <__retarget_lock_acquire_recursive>
 8014066:	bf00      	nop
 8014068:	200039d0 	.word	0x200039d0

0801406c <__malloc_unlock>:
 801406c:	4801      	ldr	r0, [pc, #4]	; (8014074 <__malloc_unlock+0x8>)
 801406e:	f000 bbcf 	b.w	8014810 <__retarget_lock_release_recursive>
 8014072:	bf00      	nop
 8014074:	200039d0 	.word	0x200039d0

08014078 <_Balloc>:
 8014078:	b570      	push	{r4, r5, r6, lr}
 801407a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 801407c:	4604      	mov	r4, r0
 801407e:	460d      	mov	r5, r1
 8014080:	b976      	cbnz	r6, 80140a0 <_Balloc+0x28>
 8014082:	2010      	movs	r0, #16
 8014084:	f7fe fbee 	bl	8012864 <malloc>
 8014088:	4602      	mov	r2, r0
 801408a:	6260      	str	r0, [r4, #36]	; 0x24
 801408c:	b920      	cbnz	r0, 8014098 <_Balloc+0x20>
 801408e:	4b18      	ldr	r3, [pc, #96]	; (80140f0 <_Balloc+0x78>)
 8014090:	4818      	ldr	r0, [pc, #96]	; (80140f4 <_Balloc+0x7c>)
 8014092:	2166      	movs	r1, #102	; 0x66
 8014094:	f000 fb8a 	bl	80147ac <__assert_func>
 8014098:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801409c:	6006      	str	r6, [r0, #0]
 801409e:	60c6      	str	r6, [r0, #12]
 80140a0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80140a2:	68f3      	ldr	r3, [r6, #12]
 80140a4:	b183      	cbz	r3, 80140c8 <_Balloc+0x50>
 80140a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140a8:	68db      	ldr	r3, [r3, #12]
 80140aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80140ae:	b9b8      	cbnz	r0, 80140e0 <_Balloc+0x68>
 80140b0:	2101      	movs	r1, #1
 80140b2:	fa01 f605 	lsl.w	r6, r1, r5
 80140b6:	1d72      	adds	r2, r6, #5
 80140b8:	0092      	lsls	r2, r2, #2
 80140ba:	4620      	mov	r0, r4
 80140bc:	f000 fb60 	bl	8014780 <_calloc_r>
 80140c0:	b160      	cbz	r0, 80140dc <_Balloc+0x64>
 80140c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80140c6:	e00e      	b.n	80140e6 <_Balloc+0x6e>
 80140c8:	2221      	movs	r2, #33	; 0x21
 80140ca:	2104      	movs	r1, #4
 80140cc:	4620      	mov	r0, r4
 80140ce:	f000 fb57 	bl	8014780 <_calloc_r>
 80140d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80140d4:	60f0      	str	r0, [r6, #12]
 80140d6:	68db      	ldr	r3, [r3, #12]
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d1e4      	bne.n	80140a6 <_Balloc+0x2e>
 80140dc:	2000      	movs	r0, #0
 80140de:	bd70      	pop	{r4, r5, r6, pc}
 80140e0:	6802      	ldr	r2, [r0, #0]
 80140e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80140e6:	2300      	movs	r3, #0
 80140e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80140ec:	e7f7      	b.n	80140de <_Balloc+0x66>
 80140ee:	bf00      	nop
 80140f0:	0801538d 	.word	0x0801538d
 80140f4:	08015410 	.word	0x08015410

080140f8 <_Bfree>:
 80140f8:	b570      	push	{r4, r5, r6, lr}
 80140fa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80140fc:	4605      	mov	r5, r0
 80140fe:	460c      	mov	r4, r1
 8014100:	b976      	cbnz	r6, 8014120 <_Bfree+0x28>
 8014102:	2010      	movs	r0, #16
 8014104:	f7fe fbae 	bl	8012864 <malloc>
 8014108:	4602      	mov	r2, r0
 801410a:	6268      	str	r0, [r5, #36]	; 0x24
 801410c:	b920      	cbnz	r0, 8014118 <_Bfree+0x20>
 801410e:	4b09      	ldr	r3, [pc, #36]	; (8014134 <_Bfree+0x3c>)
 8014110:	4809      	ldr	r0, [pc, #36]	; (8014138 <_Bfree+0x40>)
 8014112:	218a      	movs	r1, #138	; 0x8a
 8014114:	f000 fb4a 	bl	80147ac <__assert_func>
 8014118:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801411c:	6006      	str	r6, [r0, #0]
 801411e:	60c6      	str	r6, [r0, #12]
 8014120:	b13c      	cbz	r4, 8014132 <_Bfree+0x3a>
 8014122:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8014124:	6862      	ldr	r2, [r4, #4]
 8014126:	68db      	ldr	r3, [r3, #12]
 8014128:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801412c:	6021      	str	r1, [r4, #0]
 801412e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8014132:	bd70      	pop	{r4, r5, r6, pc}
 8014134:	0801538d 	.word	0x0801538d
 8014138:	08015410 	.word	0x08015410

0801413c <__multadd>:
 801413c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014140:	690d      	ldr	r5, [r1, #16]
 8014142:	4607      	mov	r7, r0
 8014144:	460c      	mov	r4, r1
 8014146:	461e      	mov	r6, r3
 8014148:	f101 0c14 	add.w	ip, r1, #20
 801414c:	2000      	movs	r0, #0
 801414e:	f8dc 3000 	ldr.w	r3, [ip]
 8014152:	b299      	uxth	r1, r3
 8014154:	fb02 6101 	mla	r1, r2, r1, r6
 8014158:	0c1e      	lsrs	r6, r3, #16
 801415a:	0c0b      	lsrs	r3, r1, #16
 801415c:	fb02 3306 	mla	r3, r2, r6, r3
 8014160:	b289      	uxth	r1, r1
 8014162:	3001      	adds	r0, #1
 8014164:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014168:	4285      	cmp	r5, r0
 801416a:	f84c 1b04 	str.w	r1, [ip], #4
 801416e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8014172:	dcec      	bgt.n	801414e <__multadd+0x12>
 8014174:	b30e      	cbz	r6, 80141ba <__multadd+0x7e>
 8014176:	68a3      	ldr	r3, [r4, #8]
 8014178:	42ab      	cmp	r3, r5
 801417a:	dc19      	bgt.n	80141b0 <__multadd+0x74>
 801417c:	6861      	ldr	r1, [r4, #4]
 801417e:	4638      	mov	r0, r7
 8014180:	3101      	adds	r1, #1
 8014182:	f7ff ff79 	bl	8014078 <_Balloc>
 8014186:	4680      	mov	r8, r0
 8014188:	b928      	cbnz	r0, 8014196 <__multadd+0x5a>
 801418a:	4602      	mov	r2, r0
 801418c:	4b0c      	ldr	r3, [pc, #48]	; (80141c0 <__multadd+0x84>)
 801418e:	480d      	ldr	r0, [pc, #52]	; (80141c4 <__multadd+0x88>)
 8014190:	21b5      	movs	r1, #181	; 0xb5
 8014192:	f000 fb0b 	bl	80147ac <__assert_func>
 8014196:	6922      	ldr	r2, [r4, #16]
 8014198:	3202      	adds	r2, #2
 801419a:	f104 010c 	add.w	r1, r4, #12
 801419e:	0092      	lsls	r2, r2, #2
 80141a0:	300c      	adds	r0, #12
 80141a2:	f7ff ff4f 	bl	8014044 <memcpy>
 80141a6:	4621      	mov	r1, r4
 80141a8:	4638      	mov	r0, r7
 80141aa:	f7ff ffa5 	bl	80140f8 <_Bfree>
 80141ae:	4644      	mov	r4, r8
 80141b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80141b4:	3501      	adds	r5, #1
 80141b6:	615e      	str	r6, [r3, #20]
 80141b8:	6125      	str	r5, [r4, #16]
 80141ba:	4620      	mov	r0, r4
 80141bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80141c0:	080153ff 	.word	0x080153ff
 80141c4:	08015410 	.word	0x08015410

080141c8 <__hi0bits>:
 80141c8:	0c03      	lsrs	r3, r0, #16
 80141ca:	041b      	lsls	r3, r3, #16
 80141cc:	b9d3      	cbnz	r3, 8014204 <__hi0bits+0x3c>
 80141ce:	0400      	lsls	r0, r0, #16
 80141d0:	2310      	movs	r3, #16
 80141d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80141d6:	bf04      	itt	eq
 80141d8:	0200      	lsleq	r0, r0, #8
 80141da:	3308      	addeq	r3, #8
 80141dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80141e0:	bf04      	itt	eq
 80141e2:	0100      	lsleq	r0, r0, #4
 80141e4:	3304      	addeq	r3, #4
 80141e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80141ea:	bf04      	itt	eq
 80141ec:	0080      	lsleq	r0, r0, #2
 80141ee:	3302      	addeq	r3, #2
 80141f0:	2800      	cmp	r0, #0
 80141f2:	db05      	blt.n	8014200 <__hi0bits+0x38>
 80141f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80141f8:	f103 0301 	add.w	r3, r3, #1
 80141fc:	bf08      	it	eq
 80141fe:	2320      	moveq	r3, #32
 8014200:	4618      	mov	r0, r3
 8014202:	4770      	bx	lr
 8014204:	2300      	movs	r3, #0
 8014206:	e7e4      	b.n	80141d2 <__hi0bits+0xa>

08014208 <__lo0bits>:
 8014208:	6803      	ldr	r3, [r0, #0]
 801420a:	f013 0207 	ands.w	r2, r3, #7
 801420e:	4601      	mov	r1, r0
 8014210:	d00b      	beq.n	801422a <__lo0bits+0x22>
 8014212:	07da      	lsls	r2, r3, #31
 8014214:	d423      	bmi.n	801425e <__lo0bits+0x56>
 8014216:	0798      	lsls	r0, r3, #30
 8014218:	bf49      	itett	mi
 801421a:	085b      	lsrmi	r3, r3, #1
 801421c:	089b      	lsrpl	r3, r3, #2
 801421e:	2001      	movmi	r0, #1
 8014220:	600b      	strmi	r3, [r1, #0]
 8014222:	bf5c      	itt	pl
 8014224:	600b      	strpl	r3, [r1, #0]
 8014226:	2002      	movpl	r0, #2
 8014228:	4770      	bx	lr
 801422a:	b298      	uxth	r0, r3
 801422c:	b9a8      	cbnz	r0, 801425a <__lo0bits+0x52>
 801422e:	0c1b      	lsrs	r3, r3, #16
 8014230:	2010      	movs	r0, #16
 8014232:	b2da      	uxtb	r2, r3
 8014234:	b90a      	cbnz	r2, 801423a <__lo0bits+0x32>
 8014236:	3008      	adds	r0, #8
 8014238:	0a1b      	lsrs	r3, r3, #8
 801423a:	071a      	lsls	r2, r3, #28
 801423c:	bf04      	itt	eq
 801423e:	091b      	lsreq	r3, r3, #4
 8014240:	3004      	addeq	r0, #4
 8014242:	079a      	lsls	r2, r3, #30
 8014244:	bf04      	itt	eq
 8014246:	089b      	lsreq	r3, r3, #2
 8014248:	3002      	addeq	r0, #2
 801424a:	07da      	lsls	r2, r3, #31
 801424c:	d403      	bmi.n	8014256 <__lo0bits+0x4e>
 801424e:	085b      	lsrs	r3, r3, #1
 8014250:	f100 0001 	add.w	r0, r0, #1
 8014254:	d005      	beq.n	8014262 <__lo0bits+0x5a>
 8014256:	600b      	str	r3, [r1, #0]
 8014258:	4770      	bx	lr
 801425a:	4610      	mov	r0, r2
 801425c:	e7e9      	b.n	8014232 <__lo0bits+0x2a>
 801425e:	2000      	movs	r0, #0
 8014260:	4770      	bx	lr
 8014262:	2020      	movs	r0, #32
 8014264:	4770      	bx	lr
	...

08014268 <__i2b>:
 8014268:	b510      	push	{r4, lr}
 801426a:	460c      	mov	r4, r1
 801426c:	2101      	movs	r1, #1
 801426e:	f7ff ff03 	bl	8014078 <_Balloc>
 8014272:	4602      	mov	r2, r0
 8014274:	b928      	cbnz	r0, 8014282 <__i2b+0x1a>
 8014276:	4b05      	ldr	r3, [pc, #20]	; (801428c <__i2b+0x24>)
 8014278:	4805      	ldr	r0, [pc, #20]	; (8014290 <__i2b+0x28>)
 801427a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 801427e:	f000 fa95 	bl	80147ac <__assert_func>
 8014282:	2301      	movs	r3, #1
 8014284:	6144      	str	r4, [r0, #20]
 8014286:	6103      	str	r3, [r0, #16]
 8014288:	bd10      	pop	{r4, pc}
 801428a:	bf00      	nop
 801428c:	080153ff 	.word	0x080153ff
 8014290:	08015410 	.word	0x08015410

08014294 <__multiply>:
 8014294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014298:	4691      	mov	r9, r2
 801429a:	690a      	ldr	r2, [r1, #16]
 801429c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80142a0:	429a      	cmp	r2, r3
 80142a2:	bfb8      	it	lt
 80142a4:	460b      	movlt	r3, r1
 80142a6:	460c      	mov	r4, r1
 80142a8:	bfbc      	itt	lt
 80142aa:	464c      	movlt	r4, r9
 80142ac:	4699      	movlt	r9, r3
 80142ae:	6927      	ldr	r7, [r4, #16]
 80142b0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80142b4:	68a3      	ldr	r3, [r4, #8]
 80142b6:	6861      	ldr	r1, [r4, #4]
 80142b8:	eb07 060a 	add.w	r6, r7, sl
 80142bc:	42b3      	cmp	r3, r6
 80142be:	b085      	sub	sp, #20
 80142c0:	bfb8      	it	lt
 80142c2:	3101      	addlt	r1, #1
 80142c4:	f7ff fed8 	bl	8014078 <_Balloc>
 80142c8:	b930      	cbnz	r0, 80142d8 <__multiply+0x44>
 80142ca:	4602      	mov	r2, r0
 80142cc:	4b44      	ldr	r3, [pc, #272]	; (80143e0 <__multiply+0x14c>)
 80142ce:	4845      	ldr	r0, [pc, #276]	; (80143e4 <__multiply+0x150>)
 80142d0:	f240 115d 	movw	r1, #349	; 0x15d
 80142d4:	f000 fa6a 	bl	80147ac <__assert_func>
 80142d8:	f100 0514 	add.w	r5, r0, #20
 80142dc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80142e0:	462b      	mov	r3, r5
 80142e2:	2200      	movs	r2, #0
 80142e4:	4543      	cmp	r3, r8
 80142e6:	d321      	bcc.n	801432c <__multiply+0x98>
 80142e8:	f104 0314 	add.w	r3, r4, #20
 80142ec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80142f0:	f109 0314 	add.w	r3, r9, #20
 80142f4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80142f8:	9202      	str	r2, [sp, #8]
 80142fa:	1b3a      	subs	r2, r7, r4
 80142fc:	3a15      	subs	r2, #21
 80142fe:	f022 0203 	bic.w	r2, r2, #3
 8014302:	3204      	adds	r2, #4
 8014304:	f104 0115 	add.w	r1, r4, #21
 8014308:	428f      	cmp	r7, r1
 801430a:	bf38      	it	cc
 801430c:	2204      	movcc	r2, #4
 801430e:	9201      	str	r2, [sp, #4]
 8014310:	9a02      	ldr	r2, [sp, #8]
 8014312:	9303      	str	r3, [sp, #12]
 8014314:	429a      	cmp	r2, r3
 8014316:	d80c      	bhi.n	8014332 <__multiply+0x9e>
 8014318:	2e00      	cmp	r6, #0
 801431a:	dd03      	ble.n	8014324 <__multiply+0x90>
 801431c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8014320:	2b00      	cmp	r3, #0
 8014322:	d05a      	beq.n	80143da <__multiply+0x146>
 8014324:	6106      	str	r6, [r0, #16]
 8014326:	b005      	add	sp, #20
 8014328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801432c:	f843 2b04 	str.w	r2, [r3], #4
 8014330:	e7d8      	b.n	80142e4 <__multiply+0x50>
 8014332:	f8b3 a000 	ldrh.w	sl, [r3]
 8014336:	f1ba 0f00 	cmp.w	sl, #0
 801433a:	d024      	beq.n	8014386 <__multiply+0xf2>
 801433c:	f104 0e14 	add.w	lr, r4, #20
 8014340:	46a9      	mov	r9, r5
 8014342:	f04f 0c00 	mov.w	ip, #0
 8014346:	f85e 2b04 	ldr.w	r2, [lr], #4
 801434a:	f8d9 1000 	ldr.w	r1, [r9]
 801434e:	fa1f fb82 	uxth.w	fp, r2
 8014352:	b289      	uxth	r1, r1
 8014354:	fb0a 110b 	mla	r1, sl, fp, r1
 8014358:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801435c:	f8d9 2000 	ldr.w	r2, [r9]
 8014360:	4461      	add	r1, ip
 8014362:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8014366:	fb0a c20b 	mla	r2, sl, fp, ip
 801436a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801436e:	b289      	uxth	r1, r1
 8014370:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8014374:	4577      	cmp	r7, lr
 8014376:	f849 1b04 	str.w	r1, [r9], #4
 801437a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801437e:	d8e2      	bhi.n	8014346 <__multiply+0xb2>
 8014380:	9a01      	ldr	r2, [sp, #4]
 8014382:	f845 c002 	str.w	ip, [r5, r2]
 8014386:	9a03      	ldr	r2, [sp, #12]
 8014388:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801438c:	3304      	adds	r3, #4
 801438e:	f1b9 0f00 	cmp.w	r9, #0
 8014392:	d020      	beq.n	80143d6 <__multiply+0x142>
 8014394:	6829      	ldr	r1, [r5, #0]
 8014396:	f104 0c14 	add.w	ip, r4, #20
 801439a:	46ae      	mov	lr, r5
 801439c:	f04f 0a00 	mov.w	sl, #0
 80143a0:	f8bc b000 	ldrh.w	fp, [ip]
 80143a4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80143a8:	fb09 220b 	mla	r2, r9, fp, r2
 80143ac:	4492      	add	sl, r2
 80143ae:	b289      	uxth	r1, r1
 80143b0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80143b4:	f84e 1b04 	str.w	r1, [lr], #4
 80143b8:	f85c 2b04 	ldr.w	r2, [ip], #4
 80143bc:	f8be 1000 	ldrh.w	r1, [lr]
 80143c0:	0c12      	lsrs	r2, r2, #16
 80143c2:	fb09 1102 	mla	r1, r9, r2, r1
 80143c6:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80143ca:	4567      	cmp	r7, ip
 80143cc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80143d0:	d8e6      	bhi.n	80143a0 <__multiply+0x10c>
 80143d2:	9a01      	ldr	r2, [sp, #4]
 80143d4:	50a9      	str	r1, [r5, r2]
 80143d6:	3504      	adds	r5, #4
 80143d8:	e79a      	b.n	8014310 <__multiply+0x7c>
 80143da:	3e01      	subs	r6, #1
 80143dc:	e79c      	b.n	8014318 <__multiply+0x84>
 80143de:	bf00      	nop
 80143e0:	080153ff 	.word	0x080153ff
 80143e4:	08015410 	.word	0x08015410

080143e8 <__pow5mult>:
 80143e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80143ec:	4615      	mov	r5, r2
 80143ee:	f012 0203 	ands.w	r2, r2, #3
 80143f2:	4606      	mov	r6, r0
 80143f4:	460f      	mov	r7, r1
 80143f6:	d007      	beq.n	8014408 <__pow5mult+0x20>
 80143f8:	4c25      	ldr	r4, [pc, #148]	; (8014490 <__pow5mult+0xa8>)
 80143fa:	3a01      	subs	r2, #1
 80143fc:	2300      	movs	r3, #0
 80143fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8014402:	f7ff fe9b 	bl	801413c <__multadd>
 8014406:	4607      	mov	r7, r0
 8014408:	10ad      	asrs	r5, r5, #2
 801440a:	d03d      	beq.n	8014488 <__pow5mult+0xa0>
 801440c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 801440e:	b97c      	cbnz	r4, 8014430 <__pow5mult+0x48>
 8014410:	2010      	movs	r0, #16
 8014412:	f7fe fa27 	bl	8012864 <malloc>
 8014416:	4602      	mov	r2, r0
 8014418:	6270      	str	r0, [r6, #36]	; 0x24
 801441a:	b928      	cbnz	r0, 8014428 <__pow5mult+0x40>
 801441c:	4b1d      	ldr	r3, [pc, #116]	; (8014494 <__pow5mult+0xac>)
 801441e:	481e      	ldr	r0, [pc, #120]	; (8014498 <__pow5mult+0xb0>)
 8014420:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8014424:	f000 f9c2 	bl	80147ac <__assert_func>
 8014428:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801442c:	6004      	str	r4, [r0, #0]
 801442e:	60c4      	str	r4, [r0, #12]
 8014430:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8014434:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014438:	b94c      	cbnz	r4, 801444e <__pow5mult+0x66>
 801443a:	f240 2171 	movw	r1, #625	; 0x271
 801443e:	4630      	mov	r0, r6
 8014440:	f7ff ff12 	bl	8014268 <__i2b>
 8014444:	2300      	movs	r3, #0
 8014446:	f8c8 0008 	str.w	r0, [r8, #8]
 801444a:	4604      	mov	r4, r0
 801444c:	6003      	str	r3, [r0, #0]
 801444e:	f04f 0900 	mov.w	r9, #0
 8014452:	07eb      	lsls	r3, r5, #31
 8014454:	d50a      	bpl.n	801446c <__pow5mult+0x84>
 8014456:	4639      	mov	r1, r7
 8014458:	4622      	mov	r2, r4
 801445a:	4630      	mov	r0, r6
 801445c:	f7ff ff1a 	bl	8014294 <__multiply>
 8014460:	4639      	mov	r1, r7
 8014462:	4680      	mov	r8, r0
 8014464:	4630      	mov	r0, r6
 8014466:	f7ff fe47 	bl	80140f8 <_Bfree>
 801446a:	4647      	mov	r7, r8
 801446c:	106d      	asrs	r5, r5, #1
 801446e:	d00b      	beq.n	8014488 <__pow5mult+0xa0>
 8014470:	6820      	ldr	r0, [r4, #0]
 8014472:	b938      	cbnz	r0, 8014484 <__pow5mult+0x9c>
 8014474:	4622      	mov	r2, r4
 8014476:	4621      	mov	r1, r4
 8014478:	4630      	mov	r0, r6
 801447a:	f7ff ff0b 	bl	8014294 <__multiply>
 801447e:	6020      	str	r0, [r4, #0]
 8014480:	f8c0 9000 	str.w	r9, [r0]
 8014484:	4604      	mov	r4, r0
 8014486:	e7e4      	b.n	8014452 <__pow5mult+0x6a>
 8014488:	4638      	mov	r0, r7
 801448a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801448e:	bf00      	nop
 8014490:	08015560 	.word	0x08015560
 8014494:	0801538d 	.word	0x0801538d
 8014498:	08015410 	.word	0x08015410

0801449c <__lshift>:
 801449c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80144a0:	460c      	mov	r4, r1
 80144a2:	6849      	ldr	r1, [r1, #4]
 80144a4:	6923      	ldr	r3, [r4, #16]
 80144a6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80144aa:	68a3      	ldr	r3, [r4, #8]
 80144ac:	4607      	mov	r7, r0
 80144ae:	4691      	mov	r9, r2
 80144b0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80144b4:	f108 0601 	add.w	r6, r8, #1
 80144b8:	42b3      	cmp	r3, r6
 80144ba:	db0b      	blt.n	80144d4 <__lshift+0x38>
 80144bc:	4638      	mov	r0, r7
 80144be:	f7ff fddb 	bl	8014078 <_Balloc>
 80144c2:	4605      	mov	r5, r0
 80144c4:	b948      	cbnz	r0, 80144da <__lshift+0x3e>
 80144c6:	4602      	mov	r2, r0
 80144c8:	4b2a      	ldr	r3, [pc, #168]	; (8014574 <__lshift+0xd8>)
 80144ca:	482b      	ldr	r0, [pc, #172]	; (8014578 <__lshift+0xdc>)
 80144cc:	f240 11d9 	movw	r1, #473	; 0x1d9
 80144d0:	f000 f96c 	bl	80147ac <__assert_func>
 80144d4:	3101      	adds	r1, #1
 80144d6:	005b      	lsls	r3, r3, #1
 80144d8:	e7ee      	b.n	80144b8 <__lshift+0x1c>
 80144da:	2300      	movs	r3, #0
 80144dc:	f100 0114 	add.w	r1, r0, #20
 80144e0:	f100 0210 	add.w	r2, r0, #16
 80144e4:	4618      	mov	r0, r3
 80144e6:	4553      	cmp	r3, sl
 80144e8:	db37      	blt.n	801455a <__lshift+0xbe>
 80144ea:	6920      	ldr	r0, [r4, #16]
 80144ec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80144f0:	f104 0314 	add.w	r3, r4, #20
 80144f4:	f019 091f 	ands.w	r9, r9, #31
 80144f8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80144fc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8014500:	d02f      	beq.n	8014562 <__lshift+0xc6>
 8014502:	f1c9 0e20 	rsb	lr, r9, #32
 8014506:	468a      	mov	sl, r1
 8014508:	f04f 0c00 	mov.w	ip, #0
 801450c:	681a      	ldr	r2, [r3, #0]
 801450e:	fa02 f209 	lsl.w	r2, r2, r9
 8014512:	ea42 020c 	orr.w	r2, r2, ip
 8014516:	f84a 2b04 	str.w	r2, [sl], #4
 801451a:	f853 2b04 	ldr.w	r2, [r3], #4
 801451e:	4298      	cmp	r0, r3
 8014520:	fa22 fc0e 	lsr.w	ip, r2, lr
 8014524:	d8f2      	bhi.n	801450c <__lshift+0x70>
 8014526:	1b03      	subs	r3, r0, r4
 8014528:	3b15      	subs	r3, #21
 801452a:	f023 0303 	bic.w	r3, r3, #3
 801452e:	3304      	adds	r3, #4
 8014530:	f104 0215 	add.w	r2, r4, #21
 8014534:	4290      	cmp	r0, r2
 8014536:	bf38      	it	cc
 8014538:	2304      	movcc	r3, #4
 801453a:	f841 c003 	str.w	ip, [r1, r3]
 801453e:	f1bc 0f00 	cmp.w	ip, #0
 8014542:	d001      	beq.n	8014548 <__lshift+0xac>
 8014544:	f108 0602 	add.w	r6, r8, #2
 8014548:	3e01      	subs	r6, #1
 801454a:	4638      	mov	r0, r7
 801454c:	612e      	str	r6, [r5, #16]
 801454e:	4621      	mov	r1, r4
 8014550:	f7ff fdd2 	bl	80140f8 <_Bfree>
 8014554:	4628      	mov	r0, r5
 8014556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801455a:	f842 0f04 	str.w	r0, [r2, #4]!
 801455e:	3301      	adds	r3, #1
 8014560:	e7c1      	b.n	80144e6 <__lshift+0x4a>
 8014562:	3904      	subs	r1, #4
 8014564:	f853 2b04 	ldr.w	r2, [r3], #4
 8014568:	f841 2f04 	str.w	r2, [r1, #4]!
 801456c:	4298      	cmp	r0, r3
 801456e:	d8f9      	bhi.n	8014564 <__lshift+0xc8>
 8014570:	e7ea      	b.n	8014548 <__lshift+0xac>
 8014572:	bf00      	nop
 8014574:	080153ff 	.word	0x080153ff
 8014578:	08015410 	.word	0x08015410

0801457c <__mcmp>:
 801457c:	b530      	push	{r4, r5, lr}
 801457e:	6902      	ldr	r2, [r0, #16]
 8014580:	690c      	ldr	r4, [r1, #16]
 8014582:	1b12      	subs	r2, r2, r4
 8014584:	d10e      	bne.n	80145a4 <__mcmp+0x28>
 8014586:	f100 0314 	add.w	r3, r0, #20
 801458a:	3114      	adds	r1, #20
 801458c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014590:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8014594:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014598:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801459c:	42a5      	cmp	r5, r4
 801459e:	d003      	beq.n	80145a8 <__mcmp+0x2c>
 80145a0:	d305      	bcc.n	80145ae <__mcmp+0x32>
 80145a2:	2201      	movs	r2, #1
 80145a4:	4610      	mov	r0, r2
 80145a6:	bd30      	pop	{r4, r5, pc}
 80145a8:	4283      	cmp	r3, r0
 80145aa:	d3f3      	bcc.n	8014594 <__mcmp+0x18>
 80145ac:	e7fa      	b.n	80145a4 <__mcmp+0x28>
 80145ae:	f04f 32ff 	mov.w	r2, #4294967295
 80145b2:	e7f7      	b.n	80145a4 <__mcmp+0x28>

080145b4 <__mdiff>:
 80145b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145b8:	460c      	mov	r4, r1
 80145ba:	4606      	mov	r6, r0
 80145bc:	4611      	mov	r1, r2
 80145be:	4620      	mov	r0, r4
 80145c0:	4690      	mov	r8, r2
 80145c2:	f7ff ffdb 	bl	801457c <__mcmp>
 80145c6:	1e05      	subs	r5, r0, #0
 80145c8:	d110      	bne.n	80145ec <__mdiff+0x38>
 80145ca:	4629      	mov	r1, r5
 80145cc:	4630      	mov	r0, r6
 80145ce:	f7ff fd53 	bl	8014078 <_Balloc>
 80145d2:	b930      	cbnz	r0, 80145e2 <__mdiff+0x2e>
 80145d4:	4b3a      	ldr	r3, [pc, #232]	; (80146c0 <__mdiff+0x10c>)
 80145d6:	4602      	mov	r2, r0
 80145d8:	f240 2132 	movw	r1, #562	; 0x232
 80145dc:	4839      	ldr	r0, [pc, #228]	; (80146c4 <__mdiff+0x110>)
 80145de:	f000 f8e5 	bl	80147ac <__assert_func>
 80145e2:	2301      	movs	r3, #1
 80145e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80145e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80145ec:	bfa4      	itt	ge
 80145ee:	4643      	movge	r3, r8
 80145f0:	46a0      	movge	r8, r4
 80145f2:	4630      	mov	r0, r6
 80145f4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80145f8:	bfa6      	itte	ge
 80145fa:	461c      	movge	r4, r3
 80145fc:	2500      	movge	r5, #0
 80145fe:	2501      	movlt	r5, #1
 8014600:	f7ff fd3a 	bl	8014078 <_Balloc>
 8014604:	b920      	cbnz	r0, 8014610 <__mdiff+0x5c>
 8014606:	4b2e      	ldr	r3, [pc, #184]	; (80146c0 <__mdiff+0x10c>)
 8014608:	4602      	mov	r2, r0
 801460a:	f44f 7110 	mov.w	r1, #576	; 0x240
 801460e:	e7e5      	b.n	80145dc <__mdiff+0x28>
 8014610:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8014614:	6926      	ldr	r6, [r4, #16]
 8014616:	60c5      	str	r5, [r0, #12]
 8014618:	f104 0914 	add.w	r9, r4, #20
 801461c:	f108 0514 	add.w	r5, r8, #20
 8014620:	f100 0e14 	add.w	lr, r0, #20
 8014624:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8014628:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801462c:	f108 0210 	add.w	r2, r8, #16
 8014630:	46f2      	mov	sl, lr
 8014632:	2100      	movs	r1, #0
 8014634:	f859 3b04 	ldr.w	r3, [r9], #4
 8014638:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801463c:	fa1f f883 	uxth.w	r8, r3
 8014640:	fa11 f18b 	uxtah	r1, r1, fp
 8014644:	0c1b      	lsrs	r3, r3, #16
 8014646:	eba1 0808 	sub.w	r8, r1, r8
 801464a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801464e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8014652:	fa1f f888 	uxth.w	r8, r8
 8014656:	1419      	asrs	r1, r3, #16
 8014658:	454e      	cmp	r6, r9
 801465a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801465e:	f84a 3b04 	str.w	r3, [sl], #4
 8014662:	d8e7      	bhi.n	8014634 <__mdiff+0x80>
 8014664:	1b33      	subs	r3, r6, r4
 8014666:	3b15      	subs	r3, #21
 8014668:	f023 0303 	bic.w	r3, r3, #3
 801466c:	3304      	adds	r3, #4
 801466e:	3415      	adds	r4, #21
 8014670:	42a6      	cmp	r6, r4
 8014672:	bf38      	it	cc
 8014674:	2304      	movcc	r3, #4
 8014676:	441d      	add	r5, r3
 8014678:	4473      	add	r3, lr
 801467a:	469e      	mov	lr, r3
 801467c:	462e      	mov	r6, r5
 801467e:	4566      	cmp	r6, ip
 8014680:	d30e      	bcc.n	80146a0 <__mdiff+0xec>
 8014682:	f10c 0203 	add.w	r2, ip, #3
 8014686:	1b52      	subs	r2, r2, r5
 8014688:	f022 0203 	bic.w	r2, r2, #3
 801468c:	3d03      	subs	r5, #3
 801468e:	45ac      	cmp	ip, r5
 8014690:	bf38      	it	cc
 8014692:	2200      	movcc	r2, #0
 8014694:	441a      	add	r2, r3
 8014696:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 801469a:	b17b      	cbz	r3, 80146bc <__mdiff+0x108>
 801469c:	6107      	str	r7, [r0, #16]
 801469e:	e7a3      	b.n	80145e8 <__mdiff+0x34>
 80146a0:	f856 8b04 	ldr.w	r8, [r6], #4
 80146a4:	fa11 f288 	uxtah	r2, r1, r8
 80146a8:	1414      	asrs	r4, r2, #16
 80146aa:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80146ae:	b292      	uxth	r2, r2
 80146b0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80146b4:	f84e 2b04 	str.w	r2, [lr], #4
 80146b8:	1421      	asrs	r1, r4, #16
 80146ba:	e7e0      	b.n	801467e <__mdiff+0xca>
 80146bc:	3f01      	subs	r7, #1
 80146be:	e7ea      	b.n	8014696 <__mdiff+0xe2>
 80146c0:	080153ff 	.word	0x080153ff
 80146c4:	08015410 	.word	0x08015410

080146c8 <__d2b>:
 80146c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80146cc:	4689      	mov	r9, r1
 80146ce:	2101      	movs	r1, #1
 80146d0:	ec57 6b10 	vmov	r6, r7, d0
 80146d4:	4690      	mov	r8, r2
 80146d6:	f7ff fccf 	bl	8014078 <_Balloc>
 80146da:	4604      	mov	r4, r0
 80146dc:	b930      	cbnz	r0, 80146ec <__d2b+0x24>
 80146de:	4602      	mov	r2, r0
 80146e0:	4b25      	ldr	r3, [pc, #148]	; (8014778 <__d2b+0xb0>)
 80146e2:	4826      	ldr	r0, [pc, #152]	; (801477c <__d2b+0xb4>)
 80146e4:	f240 310a 	movw	r1, #778	; 0x30a
 80146e8:	f000 f860 	bl	80147ac <__assert_func>
 80146ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80146f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80146f4:	bb35      	cbnz	r5, 8014744 <__d2b+0x7c>
 80146f6:	2e00      	cmp	r6, #0
 80146f8:	9301      	str	r3, [sp, #4]
 80146fa:	d028      	beq.n	801474e <__d2b+0x86>
 80146fc:	4668      	mov	r0, sp
 80146fe:	9600      	str	r6, [sp, #0]
 8014700:	f7ff fd82 	bl	8014208 <__lo0bits>
 8014704:	9900      	ldr	r1, [sp, #0]
 8014706:	b300      	cbz	r0, 801474a <__d2b+0x82>
 8014708:	9a01      	ldr	r2, [sp, #4]
 801470a:	f1c0 0320 	rsb	r3, r0, #32
 801470e:	fa02 f303 	lsl.w	r3, r2, r3
 8014712:	430b      	orrs	r3, r1
 8014714:	40c2      	lsrs	r2, r0
 8014716:	6163      	str	r3, [r4, #20]
 8014718:	9201      	str	r2, [sp, #4]
 801471a:	9b01      	ldr	r3, [sp, #4]
 801471c:	61a3      	str	r3, [r4, #24]
 801471e:	2b00      	cmp	r3, #0
 8014720:	bf14      	ite	ne
 8014722:	2202      	movne	r2, #2
 8014724:	2201      	moveq	r2, #1
 8014726:	6122      	str	r2, [r4, #16]
 8014728:	b1d5      	cbz	r5, 8014760 <__d2b+0x98>
 801472a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801472e:	4405      	add	r5, r0
 8014730:	f8c9 5000 	str.w	r5, [r9]
 8014734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8014738:	f8c8 0000 	str.w	r0, [r8]
 801473c:	4620      	mov	r0, r4
 801473e:	b003      	add	sp, #12
 8014740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014748:	e7d5      	b.n	80146f6 <__d2b+0x2e>
 801474a:	6161      	str	r1, [r4, #20]
 801474c:	e7e5      	b.n	801471a <__d2b+0x52>
 801474e:	a801      	add	r0, sp, #4
 8014750:	f7ff fd5a 	bl	8014208 <__lo0bits>
 8014754:	9b01      	ldr	r3, [sp, #4]
 8014756:	6163      	str	r3, [r4, #20]
 8014758:	2201      	movs	r2, #1
 801475a:	6122      	str	r2, [r4, #16]
 801475c:	3020      	adds	r0, #32
 801475e:	e7e3      	b.n	8014728 <__d2b+0x60>
 8014760:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8014764:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014768:	f8c9 0000 	str.w	r0, [r9]
 801476c:	6918      	ldr	r0, [r3, #16]
 801476e:	f7ff fd2b 	bl	80141c8 <__hi0bits>
 8014772:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8014776:	e7df      	b.n	8014738 <__d2b+0x70>
 8014778:	080153ff 	.word	0x080153ff
 801477c:	08015410 	.word	0x08015410

08014780 <_calloc_r>:
 8014780:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014782:	fba1 2402 	umull	r2, r4, r1, r2
 8014786:	b94c      	cbnz	r4, 801479c <_calloc_r+0x1c>
 8014788:	4611      	mov	r1, r2
 801478a:	9201      	str	r2, [sp, #4]
 801478c:	f7fe f8ee 	bl	801296c <_malloc_r>
 8014790:	9a01      	ldr	r2, [sp, #4]
 8014792:	4605      	mov	r5, r0
 8014794:	b930      	cbnz	r0, 80147a4 <_calloc_r+0x24>
 8014796:	4628      	mov	r0, r5
 8014798:	b003      	add	sp, #12
 801479a:	bd30      	pop	{r4, r5, pc}
 801479c:	220c      	movs	r2, #12
 801479e:	6002      	str	r2, [r0, #0]
 80147a0:	2500      	movs	r5, #0
 80147a2:	e7f8      	b.n	8014796 <_calloc_r+0x16>
 80147a4:	4621      	mov	r1, r4
 80147a6:	f7fe f86d 	bl	8012884 <memset>
 80147aa:	e7f4      	b.n	8014796 <_calloc_r+0x16>

080147ac <__assert_func>:
 80147ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80147ae:	4614      	mov	r4, r2
 80147b0:	461a      	mov	r2, r3
 80147b2:	4b09      	ldr	r3, [pc, #36]	; (80147d8 <__assert_func+0x2c>)
 80147b4:	681b      	ldr	r3, [r3, #0]
 80147b6:	4605      	mov	r5, r0
 80147b8:	68d8      	ldr	r0, [r3, #12]
 80147ba:	b14c      	cbz	r4, 80147d0 <__assert_func+0x24>
 80147bc:	4b07      	ldr	r3, [pc, #28]	; (80147dc <__assert_func+0x30>)
 80147be:	9100      	str	r1, [sp, #0]
 80147c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80147c4:	4906      	ldr	r1, [pc, #24]	; (80147e0 <__assert_func+0x34>)
 80147c6:	462b      	mov	r3, r5
 80147c8:	f000 f80e 	bl	80147e8 <fiprintf>
 80147cc:	f000 fa5a 	bl	8014c84 <abort>
 80147d0:	4b04      	ldr	r3, [pc, #16]	; (80147e4 <__assert_func+0x38>)
 80147d2:	461c      	mov	r4, r3
 80147d4:	e7f3      	b.n	80147be <__assert_func+0x12>
 80147d6:	bf00      	nop
 80147d8:	2000012c 	.word	0x2000012c
 80147dc:	0801556c 	.word	0x0801556c
 80147e0:	08015579 	.word	0x08015579
 80147e4:	080155a7 	.word	0x080155a7

080147e8 <fiprintf>:
 80147e8:	b40e      	push	{r1, r2, r3}
 80147ea:	b503      	push	{r0, r1, lr}
 80147ec:	4601      	mov	r1, r0
 80147ee:	ab03      	add	r3, sp, #12
 80147f0:	4805      	ldr	r0, [pc, #20]	; (8014808 <fiprintf+0x20>)
 80147f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80147f6:	6800      	ldr	r0, [r0, #0]
 80147f8:	9301      	str	r3, [sp, #4]
 80147fa:	f000 f845 	bl	8014888 <_vfiprintf_r>
 80147fe:	b002      	add	sp, #8
 8014800:	f85d eb04 	ldr.w	lr, [sp], #4
 8014804:	b003      	add	sp, #12
 8014806:	4770      	bx	lr
 8014808:	2000012c 	.word	0x2000012c

0801480c <__retarget_lock_init_recursive>:
 801480c:	4770      	bx	lr

0801480e <__retarget_lock_acquire_recursive>:
 801480e:	4770      	bx	lr

08014810 <__retarget_lock_release_recursive>:
 8014810:	4770      	bx	lr

08014812 <__ascii_mbtowc>:
 8014812:	b082      	sub	sp, #8
 8014814:	b901      	cbnz	r1, 8014818 <__ascii_mbtowc+0x6>
 8014816:	a901      	add	r1, sp, #4
 8014818:	b142      	cbz	r2, 801482c <__ascii_mbtowc+0x1a>
 801481a:	b14b      	cbz	r3, 8014830 <__ascii_mbtowc+0x1e>
 801481c:	7813      	ldrb	r3, [r2, #0]
 801481e:	600b      	str	r3, [r1, #0]
 8014820:	7812      	ldrb	r2, [r2, #0]
 8014822:	1e10      	subs	r0, r2, #0
 8014824:	bf18      	it	ne
 8014826:	2001      	movne	r0, #1
 8014828:	b002      	add	sp, #8
 801482a:	4770      	bx	lr
 801482c:	4610      	mov	r0, r2
 801482e:	e7fb      	b.n	8014828 <__ascii_mbtowc+0x16>
 8014830:	f06f 0001 	mvn.w	r0, #1
 8014834:	e7f8      	b.n	8014828 <__ascii_mbtowc+0x16>

08014836 <__sfputc_r>:
 8014836:	6893      	ldr	r3, [r2, #8]
 8014838:	3b01      	subs	r3, #1
 801483a:	2b00      	cmp	r3, #0
 801483c:	b410      	push	{r4}
 801483e:	6093      	str	r3, [r2, #8]
 8014840:	da08      	bge.n	8014854 <__sfputc_r+0x1e>
 8014842:	6994      	ldr	r4, [r2, #24]
 8014844:	42a3      	cmp	r3, r4
 8014846:	db01      	blt.n	801484c <__sfputc_r+0x16>
 8014848:	290a      	cmp	r1, #10
 801484a:	d103      	bne.n	8014854 <__sfputc_r+0x1e>
 801484c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014850:	f000 b94a 	b.w	8014ae8 <__swbuf_r>
 8014854:	6813      	ldr	r3, [r2, #0]
 8014856:	1c58      	adds	r0, r3, #1
 8014858:	6010      	str	r0, [r2, #0]
 801485a:	7019      	strb	r1, [r3, #0]
 801485c:	4608      	mov	r0, r1
 801485e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014862:	4770      	bx	lr

08014864 <__sfputs_r>:
 8014864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014866:	4606      	mov	r6, r0
 8014868:	460f      	mov	r7, r1
 801486a:	4614      	mov	r4, r2
 801486c:	18d5      	adds	r5, r2, r3
 801486e:	42ac      	cmp	r4, r5
 8014870:	d101      	bne.n	8014876 <__sfputs_r+0x12>
 8014872:	2000      	movs	r0, #0
 8014874:	e007      	b.n	8014886 <__sfputs_r+0x22>
 8014876:	f814 1b01 	ldrb.w	r1, [r4], #1
 801487a:	463a      	mov	r2, r7
 801487c:	4630      	mov	r0, r6
 801487e:	f7ff ffda 	bl	8014836 <__sfputc_r>
 8014882:	1c43      	adds	r3, r0, #1
 8014884:	d1f3      	bne.n	801486e <__sfputs_r+0xa>
 8014886:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014888 <_vfiprintf_r>:
 8014888:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801488c:	460d      	mov	r5, r1
 801488e:	b09d      	sub	sp, #116	; 0x74
 8014890:	4614      	mov	r4, r2
 8014892:	4698      	mov	r8, r3
 8014894:	4606      	mov	r6, r0
 8014896:	b118      	cbz	r0, 80148a0 <_vfiprintf_r+0x18>
 8014898:	6983      	ldr	r3, [r0, #24]
 801489a:	b90b      	cbnz	r3, 80148a0 <_vfiprintf_r+0x18>
 801489c:	f000 fb14 	bl	8014ec8 <__sinit>
 80148a0:	4b89      	ldr	r3, [pc, #548]	; (8014ac8 <_vfiprintf_r+0x240>)
 80148a2:	429d      	cmp	r5, r3
 80148a4:	d11b      	bne.n	80148de <_vfiprintf_r+0x56>
 80148a6:	6875      	ldr	r5, [r6, #4]
 80148a8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148aa:	07d9      	lsls	r1, r3, #31
 80148ac:	d405      	bmi.n	80148ba <_vfiprintf_r+0x32>
 80148ae:	89ab      	ldrh	r3, [r5, #12]
 80148b0:	059a      	lsls	r2, r3, #22
 80148b2:	d402      	bmi.n	80148ba <_vfiprintf_r+0x32>
 80148b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148b6:	f7ff ffaa 	bl	801480e <__retarget_lock_acquire_recursive>
 80148ba:	89ab      	ldrh	r3, [r5, #12]
 80148bc:	071b      	lsls	r3, r3, #28
 80148be:	d501      	bpl.n	80148c4 <_vfiprintf_r+0x3c>
 80148c0:	692b      	ldr	r3, [r5, #16]
 80148c2:	b9eb      	cbnz	r3, 8014900 <_vfiprintf_r+0x78>
 80148c4:	4629      	mov	r1, r5
 80148c6:	4630      	mov	r0, r6
 80148c8:	f000 f96e 	bl	8014ba8 <__swsetup_r>
 80148cc:	b1c0      	cbz	r0, 8014900 <_vfiprintf_r+0x78>
 80148ce:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80148d0:	07dc      	lsls	r4, r3, #31
 80148d2:	d50e      	bpl.n	80148f2 <_vfiprintf_r+0x6a>
 80148d4:	f04f 30ff 	mov.w	r0, #4294967295
 80148d8:	b01d      	add	sp, #116	; 0x74
 80148da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148de:	4b7b      	ldr	r3, [pc, #492]	; (8014acc <_vfiprintf_r+0x244>)
 80148e0:	429d      	cmp	r5, r3
 80148e2:	d101      	bne.n	80148e8 <_vfiprintf_r+0x60>
 80148e4:	68b5      	ldr	r5, [r6, #8]
 80148e6:	e7df      	b.n	80148a8 <_vfiprintf_r+0x20>
 80148e8:	4b79      	ldr	r3, [pc, #484]	; (8014ad0 <_vfiprintf_r+0x248>)
 80148ea:	429d      	cmp	r5, r3
 80148ec:	bf08      	it	eq
 80148ee:	68f5      	ldreq	r5, [r6, #12]
 80148f0:	e7da      	b.n	80148a8 <_vfiprintf_r+0x20>
 80148f2:	89ab      	ldrh	r3, [r5, #12]
 80148f4:	0598      	lsls	r0, r3, #22
 80148f6:	d4ed      	bmi.n	80148d4 <_vfiprintf_r+0x4c>
 80148f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80148fa:	f7ff ff89 	bl	8014810 <__retarget_lock_release_recursive>
 80148fe:	e7e9      	b.n	80148d4 <_vfiprintf_r+0x4c>
 8014900:	2300      	movs	r3, #0
 8014902:	9309      	str	r3, [sp, #36]	; 0x24
 8014904:	2320      	movs	r3, #32
 8014906:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801490a:	f8cd 800c 	str.w	r8, [sp, #12]
 801490e:	2330      	movs	r3, #48	; 0x30
 8014910:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014ad4 <_vfiprintf_r+0x24c>
 8014914:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014918:	f04f 0901 	mov.w	r9, #1
 801491c:	4623      	mov	r3, r4
 801491e:	469a      	mov	sl, r3
 8014920:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014924:	b10a      	cbz	r2, 801492a <_vfiprintf_r+0xa2>
 8014926:	2a25      	cmp	r2, #37	; 0x25
 8014928:	d1f9      	bne.n	801491e <_vfiprintf_r+0x96>
 801492a:	ebba 0b04 	subs.w	fp, sl, r4
 801492e:	d00b      	beq.n	8014948 <_vfiprintf_r+0xc0>
 8014930:	465b      	mov	r3, fp
 8014932:	4622      	mov	r2, r4
 8014934:	4629      	mov	r1, r5
 8014936:	4630      	mov	r0, r6
 8014938:	f7ff ff94 	bl	8014864 <__sfputs_r>
 801493c:	3001      	adds	r0, #1
 801493e:	f000 80aa 	beq.w	8014a96 <_vfiprintf_r+0x20e>
 8014942:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014944:	445a      	add	r2, fp
 8014946:	9209      	str	r2, [sp, #36]	; 0x24
 8014948:	f89a 3000 	ldrb.w	r3, [sl]
 801494c:	2b00      	cmp	r3, #0
 801494e:	f000 80a2 	beq.w	8014a96 <_vfiprintf_r+0x20e>
 8014952:	2300      	movs	r3, #0
 8014954:	f04f 32ff 	mov.w	r2, #4294967295
 8014958:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801495c:	f10a 0a01 	add.w	sl, sl, #1
 8014960:	9304      	str	r3, [sp, #16]
 8014962:	9307      	str	r3, [sp, #28]
 8014964:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014968:	931a      	str	r3, [sp, #104]	; 0x68
 801496a:	4654      	mov	r4, sl
 801496c:	2205      	movs	r2, #5
 801496e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014972:	4858      	ldr	r0, [pc, #352]	; (8014ad4 <_vfiprintf_r+0x24c>)
 8014974:	f7eb fc54 	bl	8000220 <memchr>
 8014978:	9a04      	ldr	r2, [sp, #16]
 801497a:	b9d8      	cbnz	r0, 80149b4 <_vfiprintf_r+0x12c>
 801497c:	06d1      	lsls	r1, r2, #27
 801497e:	bf44      	itt	mi
 8014980:	2320      	movmi	r3, #32
 8014982:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014986:	0713      	lsls	r3, r2, #28
 8014988:	bf44      	itt	mi
 801498a:	232b      	movmi	r3, #43	; 0x2b
 801498c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014990:	f89a 3000 	ldrb.w	r3, [sl]
 8014994:	2b2a      	cmp	r3, #42	; 0x2a
 8014996:	d015      	beq.n	80149c4 <_vfiprintf_r+0x13c>
 8014998:	9a07      	ldr	r2, [sp, #28]
 801499a:	4654      	mov	r4, sl
 801499c:	2000      	movs	r0, #0
 801499e:	f04f 0c0a 	mov.w	ip, #10
 80149a2:	4621      	mov	r1, r4
 80149a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80149a8:	3b30      	subs	r3, #48	; 0x30
 80149aa:	2b09      	cmp	r3, #9
 80149ac:	d94e      	bls.n	8014a4c <_vfiprintf_r+0x1c4>
 80149ae:	b1b0      	cbz	r0, 80149de <_vfiprintf_r+0x156>
 80149b0:	9207      	str	r2, [sp, #28]
 80149b2:	e014      	b.n	80149de <_vfiprintf_r+0x156>
 80149b4:	eba0 0308 	sub.w	r3, r0, r8
 80149b8:	fa09 f303 	lsl.w	r3, r9, r3
 80149bc:	4313      	orrs	r3, r2
 80149be:	9304      	str	r3, [sp, #16]
 80149c0:	46a2      	mov	sl, r4
 80149c2:	e7d2      	b.n	801496a <_vfiprintf_r+0xe2>
 80149c4:	9b03      	ldr	r3, [sp, #12]
 80149c6:	1d19      	adds	r1, r3, #4
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	9103      	str	r1, [sp, #12]
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	bfbb      	ittet	lt
 80149d0:	425b      	neglt	r3, r3
 80149d2:	f042 0202 	orrlt.w	r2, r2, #2
 80149d6:	9307      	strge	r3, [sp, #28]
 80149d8:	9307      	strlt	r3, [sp, #28]
 80149da:	bfb8      	it	lt
 80149dc:	9204      	strlt	r2, [sp, #16]
 80149de:	7823      	ldrb	r3, [r4, #0]
 80149e0:	2b2e      	cmp	r3, #46	; 0x2e
 80149e2:	d10c      	bne.n	80149fe <_vfiprintf_r+0x176>
 80149e4:	7863      	ldrb	r3, [r4, #1]
 80149e6:	2b2a      	cmp	r3, #42	; 0x2a
 80149e8:	d135      	bne.n	8014a56 <_vfiprintf_r+0x1ce>
 80149ea:	9b03      	ldr	r3, [sp, #12]
 80149ec:	1d1a      	adds	r2, r3, #4
 80149ee:	681b      	ldr	r3, [r3, #0]
 80149f0:	9203      	str	r2, [sp, #12]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	bfb8      	it	lt
 80149f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80149fa:	3402      	adds	r4, #2
 80149fc:	9305      	str	r3, [sp, #20]
 80149fe:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014ae4 <_vfiprintf_r+0x25c>
 8014a02:	7821      	ldrb	r1, [r4, #0]
 8014a04:	2203      	movs	r2, #3
 8014a06:	4650      	mov	r0, sl
 8014a08:	f7eb fc0a 	bl	8000220 <memchr>
 8014a0c:	b140      	cbz	r0, 8014a20 <_vfiprintf_r+0x198>
 8014a0e:	2340      	movs	r3, #64	; 0x40
 8014a10:	eba0 000a 	sub.w	r0, r0, sl
 8014a14:	fa03 f000 	lsl.w	r0, r3, r0
 8014a18:	9b04      	ldr	r3, [sp, #16]
 8014a1a:	4303      	orrs	r3, r0
 8014a1c:	3401      	adds	r4, #1
 8014a1e:	9304      	str	r3, [sp, #16]
 8014a20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a24:	482c      	ldr	r0, [pc, #176]	; (8014ad8 <_vfiprintf_r+0x250>)
 8014a26:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014a2a:	2206      	movs	r2, #6
 8014a2c:	f7eb fbf8 	bl	8000220 <memchr>
 8014a30:	2800      	cmp	r0, #0
 8014a32:	d03f      	beq.n	8014ab4 <_vfiprintf_r+0x22c>
 8014a34:	4b29      	ldr	r3, [pc, #164]	; (8014adc <_vfiprintf_r+0x254>)
 8014a36:	bb1b      	cbnz	r3, 8014a80 <_vfiprintf_r+0x1f8>
 8014a38:	9b03      	ldr	r3, [sp, #12]
 8014a3a:	3307      	adds	r3, #7
 8014a3c:	f023 0307 	bic.w	r3, r3, #7
 8014a40:	3308      	adds	r3, #8
 8014a42:	9303      	str	r3, [sp, #12]
 8014a44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014a46:	443b      	add	r3, r7
 8014a48:	9309      	str	r3, [sp, #36]	; 0x24
 8014a4a:	e767      	b.n	801491c <_vfiprintf_r+0x94>
 8014a4c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014a50:	460c      	mov	r4, r1
 8014a52:	2001      	movs	r0, #1
 8014a54:	e7a5      	b.n	80149a2 <_vfiprintf_r+0x11a>
 8014a56:	2300      	movs	r3, #0
 8014a58:	3401      	adds	r4, #1
 8014a5a:	9305      	str	r3, [sp, #20]
 8014a5c:	4619      	mov	r1, r3
 8014a5e:	f04f 0c0a 	mov.w	ip, #10
 8014a62:	4620      	mov	r0, r4
 8014a64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014a68:	3a30      	subs	r2, #48	; 0x30
 8014a6a:	2a09      	cmp	r2, #9
 8014a6c:	d903      	bls.n	8014a76 <_vfiprintf_r+0x1ee>
 8014a6e:	2b00      	cmp	r3, #0
 8014a70:	d0c5      	beq.n	80149fe <_vfiprintf_r+0x176>
 8014a72:	9105      	str	r1, [sp, #20]
 8014a74:	e7c3      	b.n	80149fe <_vfiprintf_r+0x176>
 8014a76:	fb0c 2101 	mla	r1, ip, r1, r2
 8014a7a:	4604      	mov	r4, r0
 8014a7c:	2301      	movs	r3, #1
 8014a7e:	e7f0      	b.n	8014a62 <_vfiprintf_r+0x1da>
 8014a80:	ab03      	add	r3, sp, #12
 8014a82:	9300      	str	r3, [sp, #0]
 8014a84:	462a      	mov	r2, r5
 8014a86:	4b16      	ldr	r3, [pc, #88]	; (8014ae0 <_vfiprintf_r+0x258>)
 8014a88:	a904      	add	r1, sp, #16
 8014a8a:	4630      	mov	r0, r6
 8014a8c:	f7fe f882 	bl	8012b94 <_printf_float>
 8014a90:	4607      	mov	r7, r0
 8014a92:	1c78      	adds	r0, r7, #1
 8014a94:	d1d6      	bne.n	8014a44 <_vfiprintf_r+0x1bc>
 8014a96:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a98:	07d9      	lsls	r1, r3, #31
 8014a9a:	d405      	bmi.n	8014aa8 <_vfiprintf_r+0x220>
 8014a9c:	89ab      	ldrh	r3, [r5, #12]
 8014a9e:	059a      	lsls	r2, r3, #22
 8014aa0:	d402      	bmi.n	8014aa8 <_vfiprintf_r+0x220>
 8014aa2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014aa4:	f7ff feb4 	bl	8014810 <__retarget_lock_release_recursive>
 8014aa8:	89ab      	ldrh	r3, [r5, #12]
 8014aaa:	065b      	lsls	r3, r3, #25
 8014aac:	f53f af12 	bmi.w	80148d4 <_vfiprintf_r+0x4c>
 8014ab0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014ab2:	e711      	b.n	80148d8 <_vfiprintf_r+0x50>
 8014ab4:	ab03      	add	r3, sp, #12
 8014ab6:	9300      	str	r3, [sp, #0]
 8014ab8:	462a      	mov	r2, r5
 8014aba:	4b09      	ldr	r3, [pc, #36]	; (8014ae0 <_vfiprintf_r+0x258>)
 8014abc:	a904      	add	r1, sp, #16
 8014abe:	4630      	mov	r0, r6
 8014ac0:	f7fe fb0c 	bl	80130dc <_printf_i>
 8014ac4:	e7e4      	b.n	8014a90 <_vfiprintf_r+0x208>
 8014ac6:	bf00      	nop
 8014ac8:	080156e4 	.word	0x080156e4
 8014acc:	08015704 	.word	0x08015704
 8014ad0:	080156c4 	.word	0x080156c4
 8014ad4:	080155b2 	.word	0x080155b2
 8014ad8:	080155bc 	.word	0x080155bc
 8014adc:	08012b95 	.word	0x08012b95
 8014ae0:	08014865 	.word	0x08014865
 8014ae4:	080155b8 	.word	0x080155b8

08014ae8 <__swbuf_r>:
 8014ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014aea:	460e      	mov	r6, r1
 8014aec:	4614      	mov	r4, r2
 8014aee:	4605      	mov	r5, r0
 8014af0:	b118      	cbz	r0, 8014afa <__swbuf_r+0x12>
 8014af2:	6983      	ldr	r3, [r0, #24]
 8014af4:	b90b      	cbnz	r3, 8014afa <__swbuf_r+0x12>
 8014af6:	f000 f9e7 	bl	8014ec8 <__sinit>
 8014afa:	4b21      	ldr	r3, [pc, #132]	; (8014b80 <__swbuf_r+0x98>)
 8014afc:	429c      	cmp	r4, r3
 8014afe:	d12b      	bne.n	8014b58 <__swbuf_r+0x70>
 8014b00:	686c      	ldr	r4, [r5, #4]
 8014b02:	69a3      	ldr	r3, [r4, #24]
 8014b04:	60a3      	str	r3, [r4, #8]
 8014b06:	89a3      	ldrh	r3, [r4, #12]
 8014b08:	071a      	lsls	r2, r3, #28
 8014b0a:	d52f      	bpl.n	8014b6c <__swbuf_r+0x84>
 8014b0c:	6923      	ldr	r3, [r4, #16]
 8014b0e:	b36b      	cbz	r3, 8014b6c <__swbuf_r+0x84>
 8014b10:	6923      	ldr	r3, [r4, #16]
 8014b12:	6820      	ldr	r0, [r4, #0]
 8014b14:	1ac0      	subs	r0, r0, r3
 8014b16:	6963      	ldr	r3, [r4, #20]
 8014b18:	b2f6      	uxtb	r6, r6
 8014b1a:	4283      	cmp	r3, r0
 8014b1c:	4637      	mov	r7, r6
 8014b1e:	dc04      	bgt.n	8014b2a <__swbuf_r+0x42>
 8014b20:	4621      	mov	r1, r4
 8014b22:	4628      	mov	r0, r5
 8014b24:	f000 f93c 	bl	8014da0 <_fflush_r>
 8014b28:	bb30      	cbnz	r0, 8014b78 <__swbuf_r+0x90>
 8014b2a:	68a3      	ldr	r3, [r4, #8]
 8014b2c:	3b01      	subs	r3, #1
 8014b2e:	60a3      	str	r3, [r4, #8]
 8014b30:	6823      	ldr	r3, [r4, #0]
 8014b32:	1c5a      	adds	r2, r3, #1
 8014b34:	6022      	str	r2, [r4, #0]
 8014b36:	701e      	strb	r6, [r3, #0]
 8014b38:	6963      	ldr	r3, [r4, #20]
 8014b3a:	3001      	adds	r0, #1
 8014b3c:	4283      	cmp	r3, r0
 8014b3e:	d004      	beq.n	8014b4a <__swbuf_r+0x62>
 8014b40:	89a3      	ldrh	r3, [r4, #12]
 8014b42:	07db      	lsls	r3, r3, #31
 8014b44:	d506      	bpl.n	8014b54 <__swbuf_r+0x6c>
 8014b46:	2e0a      	cmp	r6, #10
 8014b48:	d104      	bne.n	8014b54 <__swbuf_r+0x6c>
 8014b4a:	4621      	mov	r1, r4
 8014b4c:	4628      	mov	r0, r5
 8014b4e:	f000 f927 	bl	8014da0 <_fflush_r>
 8014b52:	b988      	cbnz	r0, 8014b78 <__swbuf_r+0x90>
 8014b54:	4638      	mov	r0, r7
 8014b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014b58:	4b0a      	ldr	r3, [pc, #40]	; (8014b84 <__swbuf_r+0x9c>)
 8014b5a:	429c      	cmp	r4, r3
 8014b5c:	d101      	bne.n	8014b62 <__swbuf_r+0x7a>
 8014b5e:	68ac      	ldr	r4, [r5, #8]
 8014b60:	e7cf      	b.n	8014b02 <__swbuf_r+0x1a>
 8014b62:	4b09      	ldr	r3, [pc, #36]	; (8014b88 <__swbuf_r+0xa0>)
 8014b64:	429c      	cmp	r4, r3
 8014b66:	bf08      	it	eq
 8014b68:	68ec      	ldreq	r4, [r5, #12]
 8014b6a:	e7ca      	b.n	8014b02 <__swbuf_r+0x1a>
 8014b6c:	4621      	mov	r1, r4
 8014b6e:	4628      	mov	r0, r5
 8014b70:	f000 f81a 	bl	8014ba8 <__swsetup_r>
 8014b74:	2800      	cmp	r0, #0
 8014b76:	d0cb      	beq.n	8014b10 <__swbuf_r+0x28>
 8014b78:	f04f 37ff 	mov.w	r7, #4294967295
 8014b7c:	e7ea      	b.n	8014b54 <__swbuf_r+0x6c>
 8014b7e:	bf00      	nop
 8014b80:	080156e4 	.word	0x080156e4
 8014b84:	08015704 	.word	0x08015704
 8014b88:	080156c4 	.word	0x080156c4

08014b8c <__ascii_wctomb>:
 8014b8c:	b149      	cbz	r1, 8014ba2 <__ascii_wctomb+0x16>
 8014b8e:	2aff      	cmp	r2, #255	; 0xff
 8014b90:	bf85      	ittet	hi
 8014b92:	238a      	movhi	r3, #138	; 0x8a
 8014b94:	6003      	strhi	r3, [r0, #0]
 8014b96:	700a      	strbls	r2, [r1, #0]
 8014b98:	f04f 30ff 	movhi.w	r0, #4294967295
 8014b9c:	bf98      	it	ls
 8014b9e:	2001      	movls	r0, #1
 8014ba0:	4770      	bx	lr
 8014ba2:	4608      	mov	r0, r1
 8014ba4:	4770      	bx	lr
	...

08014ba8 <__swsetup_r>:
 8014ba8:	4b32      	ldr	r3, [pc, #200]	; (8014c74 <__swsetup_r+0xcc>)
 8014baa:	b570      	push	{r4, r5, r6, lr}
 8014bac:	681d      	ldr	r5, [r3, #0]
 8014bae:	4606      	mov	r6, r0
 8014bb0:	460c      	mov	r4, r1
 8014bb2:	b125      	cbz	r5, 8014bbe <__swsetup_r+0x16>
 8014bb4:	69ab      	ldr	r3, [r5, #24]
 8014bb6:	b913      	cbnz	r3, 8014bbe <__swsetup_r+0x16>
 8014bb8:	4628      	mov	r0, r5
 8014bba:	f000 f985 	bl	8014ec8 <__sinit>
 8014bbe:	4b2e      	ldr	r3, [pc, #184]	; (8014c78 <__swsetup_r+0xd0>)
 8014bc0:	429c      	cmp	r4, r3
 8014bc2:	d10f      	bne.n	8014be4 <__swsetup_r+0x3c>
 8014bc4:	686c      	ldr	r4, [r5, #4]
 8014bc6:	89a3      	ldrh	r3, [r4, #12]
 8014bc8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014bcc:	0719      	lsls	r1, r3, #28
 8014bce:	d42c      	bmi.n	8014c2a <__swsetup_r+0x82>
 8014bd0:	06dd      	lsls	r5, r3, #27
 8014bd2:	d411      	bmi.n	8014bf8 <__swsetup_r+0x50>
 8014bd4:	2309      	movs	r3, #9
 8014bd6:	6033      	str	r3, [r6, #0]
 8014bd8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014bdc:	81a3      	strh	r3, [r4, #12]
 8014bde:	f04f 30ff 	mov.w	r0, #4294967295
 8014be2:	e03e      	b.n	8014c62 <__swsetup_r+0xba>
 8014be4:	4b25      	ldr	r3, [pc, #148]	; (8014c7c <__swsetup_r+0xd4>)
 8014be6:	429c      	cmp	r4, r3
 8014be8:	d101      	bne.n	8014bee <__swsetup_r+0x46>
 8014bea:	68ac      	ldr	r4, [r5, #8]
 8014bec:	e7eb      	b.n	8014bc6 <__swsetup_r+0x1e>
 8014bee:	4b24      	ldr	r3, [pc, #144]	; (8014c80 <__swsetup_r+0xd8>)
 8014bf0:	429c      	cmp	r4, r3
 8014bf2:	bf08      	it	eq
 8014bf4:	68ec      	ldreq	r4, [r5, #12]
 8014bf6:	e7e6      	b.n	8014bc6 <__swsetup_r+0x1e>
 8014bf8:	0758      	lsls	r0, r3, #29
 8014bfa:	d512      	bpl.n	8014c22 <__swsetup_r+0x7a>
 8014bfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014bfe:	b141      	cbz	r1, 8014c12 <__swsetup_r+0x6a>
 8014c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014c04:	4299      	cmp	r1, r3
 8014c06:	d002      	beq.n	8014c0e <__swsetup_r+0x66>
 8014c08:	4630      	mov	r0, r6
 8014c0a:	f7fd fe43 	bl	8012894 <_free_r>
 8014c0e:	2300      	movs	r3, #0
 8014c10:	6363      	str	r3, [r4, #52]	; 0x34
 8014c12:	89a3      	ldrh	r3, [r4, #12]
 8014c14:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014c18:	81a3      	strh	r3, [r4, #12]
 8014c1a:	2300      	movs	r3, #0
 8014c1c:	6063      	str	r3, [r4, #4]
 8014c1e:	6923      	ldr	r3, [r4, #16]
 8014c20:	6023      	str	r3, [r4, #0]
 8014c22:	89a3      	ldrh	r3, [r4, #12]
 8014c24:	f043 0308 	orr.w	r3, r3, #8
 8014c28:	81a3      	strh	r3, [r4, #12]
 8014c2a:	6923      	ldr	r3, [r4, #16]
 8014c2c:	b94b      	cbnz	r3, 8014c42 <__swsetup_r+0x9a>
 8014c2e:	89a3      	ldrh	r3, [r4, #12]
 8014c30:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014c38:	d003      	beq.n	8014c42 <__swsetup_r+0x9a>
 8014c3a:	4621      	mov	r1, r4
 8014c3c:	4630      	mov	r0, r6
 8014c3e:	f000 fa05 	bl	801504c <__smakebuf_r>
 8014c42:	89a0      	ldrh	r0, [r4, #12]
 8014c44:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014c48:	f010 0301 	ands.w	r3, r0, #1
 8014c4c:	d00a      	beq.n	8014c64 <__swsetup_r+0xbc>
 8014c4e:	2300      	movs	r3, #0
 8014c50:	60a3      	str	r3, [r4, #8]
 8014c52:	6963      	ldr	r3, [r4, #20]
 8014c54:	425b      	negs	r3, r3
 8014c56:	61a3      	str	r3, [r4, #24]
 8014c58:	6923      	ldr	r3, [r4, #16]
 8014c5a:	b943      	cbnz	r3, 8014c6e <__swsetup_r+0xc6>
 8014c5c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014c60:	d1ba      	bne.n	8014bd8 <__swsetup_r+0x30>
 8014c62:	bd70      	pop	{r4, r5, r6, pc}
 8014c64:	0781      	lsls	r1, r0, #30
 8014c66:	bf58      	it	pl
 8014c68:	6963      	ldrpl	r3, [r4, #20]
 8014c6a:	60a3      	str	r3, [r4, #8]
 8014c6c:	e7f4      	b.n	8014c58 <__swsetup_r+0xb0>
 8014c6e:	2000      	movs	r0, #0
 8014c70:	e7f7      	b.n	8014c62 <__swsetup_r+0xba>
 8014c72:	bf00      	nop
 8014c74:	2000012c 	.word	0x2000012c
 8014c78:	080156e4 	.word	0x080156e4
 8014c7c:	08015704 	.word	0x08015704
 8014c80:	080156c4 	.word	0x080156c4

08014c84 <abort>:
 8014c84:	b508      	push	{r3, lr}
 8014c86:	2006      	movs	r0, #6
 8014c88:	f000 fa48 	bl	801511c <raise>
 8014c8c:	2001      	movs	r0, #1
 8014c8e:	f7ed f8db 	bl	8001e48 <_exit>
	...

08014c94 <__sflush_r>:
 8014c94:	898a      	ldrh	r2, [r1, #12]
 8014c96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c9a:	4605      	mov	r5, r0
 8014c9c:	0710      	lsls	r0, r2, #28
 8014c9e:	460c      	mov	r4, r1
 8014ca0:	d458      	bmi.n	8014d54 <__sflush_r+0xc0>
 8014ca2:	684b      	ldr	r3, [r1, #4]
 8014ca4:	2b00      	cmp	r3, #0
 8014ca6:	dc05      	bgt.n	8014cb4 <__sflush_r+0x20>
 8014ca8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014caa:	2b00      	cmp	r3, #0
 8014cac:	dc02      	bgt.n	8014cb4 <__sflush_r+0x20>
 8014cae:	2000      	movs	r0, #0
 8014cb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014cb4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014cb6:	2e00      	cmp	r6, #0
 8014cb8:	d0f9      	beq.n	8014cae <__sflush_r+0x1a>
 8014cba:	2300      	movs	r3, #0
 8014cbc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014cc0:	682f      	ldr	r7, [r5, #0]
 8014cc2:	602b      	str	r3, [r5, #0]
 8014cc4:	d032      	beq.n	8014d2c <__sflush_r+0x98>
 8014cc6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014cc8:	89a3      	ldrh	r3, [r4, #12]
 8014cca:	075a      	lsls	r2, r3, #29
 8014ccc:	d505      	bpl.n	8014cda <__sflush_r+0x46>
 8014cce:	6863      	ldr	r3, [r4, #4]
 8014cd0:	1ac0      	subs	r0, r0, r3
 8014cd2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014cd4:	b10b      	cbz	r3, 8014cda <__sflush_r+0x46>
 8014cd6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014cd8:	1ac0      	subs	r0, r0, r3
 8014cda:	2300      	movs	r3, #0
 8014cdc:	4602      	mov	r2, r0
 8014cde:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014ce0:	6a21      	ldr	r1, [r4, #32]
 8014ce2:	4628      	mov	r0, r5
 8014ce4:	47b0      	blx	r6
 8014ce6:	1c43      	adds	r3, r0, #1
 8014ce8:	89a3      	ldrh	r3, [r4, #12]
 8014cea:	d106      	bne.n	8014cfa <__sflush_r+0x66>
 8014cec:	6829      	ldr	r1, [r5, #0]
 8014cee:	291d      	cmp	r1, #29
 8014cf0:	d82c      	bhi.n	8014d4c <__sflush_r+0xb8>
 8014cf2:	4a2a      	ldr	r2, [pc, #168]	; (8014d9c <__sflush_r+0x108>)
 8014cf4:	40ca      	lsrs	r2, r1
 8014cf6:	07d6      	lsls	r6, r2, #31
 8014cf8:	d528      	bpl.n	8014d4c <__sflush_r+0xb8>
 8014cfa:	2200      	movs	r2, #0
 8014cfc:	6062      	str	r2, [r4, #4]
 8014cfe:	04d9      	lsls	r1, r3, #19
 8014d00:	6922      	ldr	r2, [r4, #16]
 8014d02:	6022      	str	r2, [r4, #0]
 8014d04:	d504      	bpl.n	8014d10 <__sflush_r+0x7c>
 8014d06:	1c42      	adds	r2, r0, #1
 8014d08:	d101      	bne.n	8014d0e <__sflush_r+0x7a>
 8014d0a:	682b      	ldr	r3, [r5, #0]
 8014d0c:	b903      	cbnz	r3, 8014d10 <__sflush_r+0x7c>
 8014d0e:	6560      	str	r0, [r4, #84]	; 0x54
 8014d10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014d12:	602f      	str	r7, [r5, #0]
 8014d14:	2900      	cmp	r1, #0
 8014d16:	d0ca      	beq.n	8014cae <__sflush_r+0x1a>
 8014d18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014d1c:	4299      	cmp	r1, r3
 8014d1e:	d002      	beq.n	8014d26 <__sflush_r+0x92>
 8014d20:	4628      	mov	r0, r5
 8014d22:	f7fd fdb7 	bl	8012894 <_free_r>
 8014d26:	2000      	movs	r0, #0
 8014d28:	6360      	str	r0, [r4, #52]	; 0x34
 8014d2a:	e7c1      	b.n	8014cb0 <__sflush_r+0x1c>
 8014d2c:	6a21      	ldr	r1, [r4, #32]
 8014d2e:	2301      	movs	r3, #1
 8014d30:	4628      	mov	r0, r5
 8014d32:	47b0      	blx	r6
 8014d34:	1c41      	adds	r1, r0, #1
 8014d36:	d1c7      	bne.n	8014cc8 <__sflush_r+0x34>
 8014d38:	682b      	ldr	r3, [r5, #0]
 8014d3a:	2b00      	cmp	r3, #0
 8014d3c:	d0c4      	beq.n	8014cc8 <__sflush_r+0x34>
 8014d3e:	2b1d      	cmp	r3, #29
 8014d40:	d001      	beq.n	8014d46 <__sflush_r+0xb2>
 8014d42:	2b16      	cmp	r3, #22
 8014d44:	d101      	bne.n	8014d4a <__sflush_r+0xb6>
 8014d46:	602f      	str	r7, [r5, #0]
 8014d48:	e7b1      	b.n	8014cae <__sflush_r+0x1a>
 8014d4a:	89a3      	ldrh	r3, [r4, #12]
 8014d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d50:	81a3      	strh	r3, [r4, #12]
 8014d52:	e7ad      	b.n	8014cb0 <__sflush_r+0x1c>
 8014d54:	690f      	ldr	r7, [r1, #16]
 8014d56:	2f00      	cmp	r7, #0
 8014d58:	d0a9      	beq.n	8014cae <__sflush_r+0x1a>
 8014d5a:	0793      	lsls	r3, r2, #30
 8014d5c:	680e      	ldr	r6, [r1, #0]
 8014d5e:	bf08      	it	eq
 8014d60:	694b      	ldreq	r3, [r1, #20]
 8014d62:	600f      	str	r7, [r1, #0]
 8014d64:	bf18      	it	ne
 8014d66:	2300      	movne	r3, #0
 8014d68:	eba6 0807 	sub.w	r8, r6, r7
 8014d6c:	608b      	str	r3, [r1, #8]
 8014d6e:	f1b8 0f00 	cmp.w	r8, #0
 8014d72:	dd9c      	ble.n	8014cae <__sflush_r+0x1a>
 8014d74:	6a21      	ldr	r1, [r4, #32]
 8014d76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014d78:	4643      	mov	r3, r8
 8014d7a:	463a      	mov	r2, r7
 8014d7c:	4628      	mov	r0, r5
 8014d7e:	47b0      	blx	r6
 8014d80:	2800      	cmp	r0, #0
 8014d82:	dc06      	bgt.n	8014d92 <__sflush_r+0xfe>
 8014d84:	89a3      	ldrh	r3, [r4, #12]
 8014d86:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d8a:	81a3      	strh	r3, [r4, #12]
 8014d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014d90:	e78e      	b.n	8014cb0 <__sflush_r+0x1c>
 8014d92:	4407      	add	r7, r0
 8014d94:	eba8 0800 	sub.w	r8, r8, r0
 8014d98:	e7e9      	b.n	8014d6e <__sflush_r+0xda>
 8014d9a:	bf00      	nop
 8014d9c:	20400001 	.word	0x20400001

08014da0 <_fflush_r>:
 8014da0:	b538      	push	{r3, r4, r5, lr}
 8014da2:	690b      	ldr	r3, [r1, #16]
 8014da4:	4605      	mov	r5, r0
 8014da6:	460c      	mov	r4, r1
 8014da8:	b913      	cbnz	r3, 8014db0 <_fflush_r+0x10>
 8014daa:	2500      	movs	r5, #0
 8014dac:	4628      	mov	r0, r5
 8014dae:	bd38      	pop	{r3, r4, r5, pc}
 8014db0:	b118      	cbz	r0, 8014dba <_fflush_r+0x1a>
 8014db2:	6983      	ldr	r3, [r0, #24]
 8014db4:	b90b      	cbnz	r3, 8014dba <_fflush_r+0x1a>
 8014db6:	f000 f887 	bl	8014ec8 <__sinit>
 8014dba:	4b14      	ldr	r3, [pc, #80]	; (8014e0c <_fflush_r+0x6c>)
 8014dbc:	429c      	cmp	r4, r3
 8014dbe:	d11b      	bne.n	8014df8 <_fflush_r+0x58>
 8014dc0:	686c      	ldr	r4, [r5, #4]
 8014dc2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014dc6:	2b00      	cmp	r3, #0
 8014dc8:	d0ef      	beq.n	8014daa <_fflush_r+0xa>
 8014dca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014dcc:	07d0      	lsls	r0, r2, #31
 8014dce:	d404      	bmi.n	8014dda <_fflush_r+0x3a>
 8014dd0:	0599      	lsls	r1, r3, #22
 8014dd2:	d402      	bmi.n	8014dda <_fflush_r+0x3a>
 8014dd4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014dd6:	f7ff fd1a 	bl	801480e <__retarget_lock_acquire_recursive>
 8014dda:	4628      	mov	r0, r5
 8014ddc:	4621      	mov	r1, r4
 8014dde:	f7ff ff59 	bl	8014c94 <__sflush_r>
 8014de2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014de4:	07da      	lsls	r2, r3, #31
 8014de6:	4605      	mov	r5, r0
 8014de8:	d4e0      	bmi.n	8014dac <_fflush_r+0xc>
 8014dea:	89a3      	ldrh	r3, [r4, #12]
 8014dec:	059b      	lsls	r3, r3, #22
 8014dee:	d4dd      	bmi.n	8014dac <_fflush_r+0xc>
 8014df0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014df2:	f7ff fd0d 	bl	8014810 <__retarget_lock_release_recursive>
 8014df6:	e7d9      	b.n	8014dac <_fflush_r+0xc>
 8014df8:	4b05      	ldr	r3, [pc, #20]	; (8014e10 <_fflush_r+0x70>)
 8014dfa:	429c      	cmp	r4, r3
 8014dfc:	d101      	bne.n	8014e02 <_fflush_r+0x62>
 8014dfe:	68ac      	ldr	r4, [r5, #8]
 8014e00:	e7df      	b.n	8014dc2 <_fflush_r+0x22>
 8014e02:	4b04      	ldr	r3, [pc, #16]	; (8014e14 <_fflush_r+0x74>)
 8014e04:	429c      	cmp	r4, r3
 8014e06:	bf08      	it	eq
 8014e08:	68ec      	ldreq	r4, [r5, #12]
 8014e0a:	e7da      	b.n	8014dc2 <_fflush_r+0x22>
 8014e0c:	080156e4 	.word	0x080156e4
 8014e10:	08015704 	.word	0x08015704
 8014e14:	080156c4 	.word	0x080156c4

08014e18 <std>:
 8014e18:	2300      	movs	r3, #0
 8014e1a:	b510      	push	{r4, lr}
 8014e1c:	4604      	mov	r4, r0
 8014e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8014e22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8014e26:	6083      	str	r3, [r0, #8]
 8014e28:	8181      	strh	r1, [r0, #12]
 8014e2a:	6643      	str	r3, [r0, #100]	; 0x64
 8014e2c:	81c2      	strh	r2, [r0, #14]
 8014e2e:	6183      	str	r3, [r0, #24]
 8014e30:	4619      	mov	r1, r3
 8014e32:	2208      	movs	r2, #8
 8014e34:	305c      	adds	r0, #92	; 0x5c
 8014e36:	f7fd fd25 	bl	8012884 <memset>
 8014e3a:	4b05      	ldr	r3, [pc, #20]	; (8014e50 <std+0x38>)
 8014e3c:	6263      	str	r3, [r4, #36]	; 0x24
 8014e3e:	4b05      	ldr	r3, [pc, #20]	; (8014e54 <std+0x3c>)
 8014e40:	62a3      	str	r3, [r4, #40]	; 0x28
 8014e42:	4b05      	ldr	r3, [pc, #20]	; (8014e58 <std+0x40>)
 8014e44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014e46:	4b05      	ldr	r3, [pc, #20]	; (8014e5c <std+0x44>)
 8014e48:	6224      	str	r4, [r4, #32]
 8014e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8014e4c:	bd10      	pop	{r4, pc}
 8014e4e:	bf00      	nop
 8014e50:	08015155 	.word	0x08015155
 8014e54:	08015177 	.word	0x08015177
 8014e58:	080151af 	.word	0x080151af
 8014e5c:	080151d3 	.word	0x080151d3

08014e60 <_cleanup_r>:
 8014e60:	4901      	ldr	r1, [pc, #4]	; (8014e68 <_cleanup_r+0x8>)
 8014e62:	f000 b8af 	b.w	8014fc4 <_fwalk_reent>
 8014e66:	bf00      	nop
 8014e68:	08014da1 	.word	0x08014da1

08014e6c <__sfmoreglue>:
 8014e6c:	b570      	push	{r4, r5, r6, lr}
 8014e6e:	2268      	movs	r2, #104	; 0x68
 8014e70:	1e4d      	subs	r5, r1, #1
 8014e72:	4355      	muls	r5, r2
 8014e74:	460e      	mov	r6, r1
 8014e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014e7a:	f7fd fd77 	bl	801296c <_malloc_r>
 8014e7e:	4604      	mov	r4, r0
 8014e80:	b140      	cbz	r0, 8014e94 <__sfmoreglue+0x28>
 8014e82:	2100      	movs	r1, #0
 8014e84:	e9c0 1600 	strd	r1, r6, [r0]
 8014e88:	300c      	adds	r0, #12
 8014e8a:	60a0      	str	r0, [r4, #8]
 8014e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014e90:	f7fd fcf8 	bl	8012884 <memset>
 8014e94:	4620      	mov	r0, r4
 8014e96:	bd70      	pop	{r4, r5, r6, pc}

08014e98 <__sfp_lock_acquire>:
 8014e98:	4801      	ldr	r0, [pc, #4]	; (8014ea0 <__sfp_lock_acquire+0x8>)
 8014e9a:	f7ff bcb8 	b.w	801480e <__retarget_lock_acquire_recursive>
 8014e9e:	bf00      	nop
 8014ea0:	200039d1 	.word	0x200039d1

08014ea4 <__sfp_lock_release>:
 8014ea4:	4801      	ldr	r0, [pc, #4]	; (8014eac <__sfp_lock_release+0x8>)
 8014ea6:	f7ff bcb3 	b.w	8014810 <__retarget_lock_release_recursive>
 8014eaa:	bf00      	nop
 8014eac:	200039d1 	.word	0x200039d1

08014eb0 <__sinit_lock_acquire>:
 8014eb0:	4801      	ldr	r0, [pc, #4]	; (8014eb8 <__sinit_lock_acquire+0x8>)
 8014eb2:	f7ff bcac 	b.w	801480e <__retarget_lock_acquire_recursive>
 8014eb6:	bf00      	nop
 8014eb8:	200039d2 	.word	0x200039d2

08014ebc <__sinit_lock_release>:
 8014ebc:	4801      	ldr	r0, [pc, #4]	; (8014ec4 <__sinit_lock_release+0x8>)
 8014ebe:	f7ff bca7 	b.w	8014810 <__retarget_lock_release_recursive>
 8014ec2:	bf00      	nop
 8014ec4:	200039d2 	.word	0x200039d2

08014ec8 <__sinit>:
 8014ec8:	b510      	push	{r4, lr}
 8014eca:	4604      	mov	r4, r0
 8014ecc:	f7ff fff0 	bl	8014eb0 <__sinit_lock_acquire>
 8014ed0:	69a3      	ldr	r3, [r4, #24]
 8014ed2:	b11b      	cbz	r3, 8014edc <__sinit+0x14>
 8014ed4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014ed8:	f7ff bff0 	b.w	8014ebc <__sinit_lock_release>
 8014edc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014ee0:	6523      	str	r3, [r4, #80]	; 0x50
 8014ee2:	4b13      	ldr	r3, [pc, #76]	; (8014f30 <__sinit+0x68>)
 8014ee4:	4a13      	ldr	r2, [pc, #76]	; (8014f34 <__sinit+0x6c>)
 8014ee6:	681b      	ldr	r3, [r3, #0]
 8014ee8:	62a2      	str	r2, [r4, #40]	; 0x28
 8014eea:	42a3      	cmp	r3, r4
 8014eec:	bf04      	itt	eq
 8014eee:	2301      	moveq	r3, #1
 8014ef0:	61a3      	streq	r3, [r4, #24]
 8014ef2:	4620      	mov	r0, r4
 8014ef4:	f000 f820 	bl	8014f38 <__sfp>
 8014ef8:	6060      	str	r0, [r4, #4]
 8014efa:	4620      	mov	r0, r4
 8014efc:	f000 f81c 	bl	8014f38 <__sfp>
 8014f00:	60a0      	str	r0, [r4, #8]
 8014f02:	4620      	mov	r0, r4
 8014f04:	f000 f818 	bl	8014f38 <__sfp>
 8014f08:	2200      	movs	r2, #0
 8014f0a:	60e0      	str	r0, [r4, #12]
 8014f0c:	2104      	movs	r1, #4
 8014f0e:	6860      	ldr	r0, [r4, #4]
 8014f10:	f7ff ff82 	bl	8014e18 <std>
 8014f14:	68a0      	ldr	r0, [r4, #8]
 8014f16:	2201      	movs	r2, #1
 8014f18:	2109      	movs	r1, #9
 8014f1a:	f7ff ff7d 	bl	8014e18 <std>
 8014f1e:	68e0      	ldr	r0, [r4, #12]
 8014f20:	2202      	movs	r2, #2
 8014f22:	2112      	movs	r1, #18
 8014f24:	f7ff ff78 	bl	8014e18 <std>
 8014f28:	2301      	movs	r3, #1
 8014f2a:	61a3      	str	r3, [r4, #24]
 8014f2c:	e7d2      	b.n	8014ed4 <__sinit+0xc>
 8014f2e:	bf00      	nop
 8014f30:	08015348 	.word	0x08015348
 8014f34:	08014e61 	.word	0x08014e61

08014f38 <__sfp>:
 8014f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f3a:	4607      	mov	r7, r0
 8014f3c:	f7ff ffac 	bl	8014e98 <__sfp_lock_acquire>
 8014f40:	4b1e      	ldr	r3, [pc, #120]	; (8014fbc <__sfp+0x84>)
 8014f42:	681e      	ldr	r6, [r3, #0]
 8014f44:	69b3      	ldr	r3, [r6, #24]
 8014f46:	b913      	cbnz	r3, 8014f4e <__sfp+0x16>
 8014f48:	4630      	mov	r0, r6
 8014f4a:	f7ff ffbd 	bl	8014ec8 <__sinit>
 8014f4e:	3648      	adds	r6, #72	; 0x48
 8014f50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014f54:	3b01      	subs	r3, #1
 8014f56:	d503      	bpl.n	8014f60 <__sfp+0x28>
 8014f58:	6833      	ldr	r3, [r6, #0]
 8014f5a:	b30b      	cbz	r3, 8014fa0 <__sfp+0x68>
 8014f5c:	6836      	ldr	r6, [r6, #0]
 8014f5e:	e7f7      	b.n	8014f50 <__sfp+0x18>
 8014f60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014f64:	b9d5      	cbnz	r5, 8014f9c <__sfp+0x64>
 8014f66:	4b16      	ldr	r3, [pc, #88]	; (8014fc0 <__sfp+0x88>)
 8014f68:	60e3      	str	r3, [r4, #12]
 8014f6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014f6e:	6665      	str	r5, [r4, #100]	; 0x64
 8014f70:	f7ff fc4c 	bl	801480c <__retarget_lock_init_recursive>
 8014f74:	f7ff ff96 	bl	8014ea4 <__sfp_lock_release>
 8014f78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014f7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014f80:	6025      	str	r5, [r4, #0]
 8014f82:	61a5      	str	r5, [r4, #24]
 8014f84:	2208      	movs	r2, #8
 8014f86:	4629      	mov	r1, r5
 8014f88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014f8c:	f7fd fc7a 	bl	8012884 <memset>
 8014f90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014f94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014f98:	4620      	mov	r0, r4
 8014f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014f9c:	3468      	adds	r4, #104	; 0x68
 8014f9e:	e7d9      	b.n	8014f54 <__sfp+0x1c>
 8014fa0:	2104      	movs	r1, #4
 8014fa2:	4638      	mov	r0, r7
 8014fa4:	f7ff ff62 	bl	8014e6c <__sfmoreglue>
 8014fa8:	4604      	mov	r4, r0
 8014faa:	6030      	str	r0, [r6, #0]
 8014fac:	2800      	cmp	r0, #0
 8014fae:	d1d5      	bne.n	8014f5c <__sfp+0x24>
 8014fb0:	f7ff ff78 	bl	8014ea4 <__sfp_lock_release>
 8014fb4:	230c      	movs	r3, #12
 8014fb6:	603b      	str	r3, [r7, #0]
 8014fb8:	e7ee      	b.n	8014f98 <__sfp+0x60>
 8014fba:	bf00      	nop
 8014fbc:	08015348 	.word	0x08015348
 8014fc0:	ffff0001 	.word	0xffff0001

08014fc4 <_fwalk_reent>:
 8014fc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fc8:	4606      	mov	r6, r0
 8014fca:	4688      	mov	r8, r1
 8014fcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014fd0:	2700      	movs	r7, #0
 8014fd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014fd6:	f1b9 0901 	subs.w	r9, r9, #1
 8014fda:	d505      	bpl.n	8014fe8 <_fwalk_reent+0x24>
 8014fdc:	6824      	ldr	r4, [r4, #0]
 8014fde:	2c00      	cmp	r4, #0
 8014fe0:	d1f7      	bne.n	8014fd2 <_fwalk_reent+0xe>
 8014fe2:	4638      	mov	r0, r7
 8014fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014fe8:	89ab      	ldrh	r3, [r5, #12]
 8014fea:	2b01      	cmp	r3, #1
 8014fec:	d907      	bls.n	8014ffe <_fwalk_reent+0x3a>
 8014fee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014ff2:	3301      	adds	r3, #1
 8014ff4:	d003      	beq.n	8014ffe <_fwalk_reent+0x3a>
 8014ff6:	4629      	mov	r1, r5
 8014ff8:	4630      	mov	r0, r6
 8014ffa:	47c0      	blx	r8
 8014ffc:	4307      	orrs	r7, r0
 8014ffe:	3568      	adds	r5, #104	; 0x68
 8015000:	e7e9      	b.n	8014fd6 <_fwalk_reent+0x12>

08015002 <__swhatbuf_r>:
 8015002:	b570      	push	{r4, r5, r6, lr}
 8015004:	460e      	mov	r6, r1
 8015006:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801500a:	2900      	cmp	r1, #0
 801500c:	b096      	sub	sp, #88	; 0x58
 801500e:	4614      	mov	r4, r2
 8015010:	461d      	mov	r5, r3
 8015012:	da08      	bge.n	8015026 <__swhatbuf_r+0x24>
 8015014:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8015018:	2200      	movs	r2, #0
 801501a:	602a      	str	r2, [r5, #0]
 801501c:	061a      	lsls	r2, r3, #24
 801501e:	d410      	bmi.n	8015042 <__swhatbuf_r+0x40>
 8015020:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015024:	e00e      	b.n	8015044 <__swhatbuf_r+0x42>
 8015026:	466a      	mov	r2, sp
 8015028:	f000 f8fa 	bl	8015220 <_fstat_r>
 801502c:	2800      	cmp	r0, #0
 801502e:	dbf1      	blt.n	8015014 <__swhatbuf_r+0x12>
 8015030:	9a01      	ldr	r2, [sp, #4]
 8015032:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8015036:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801503a:	425a      	negs	r2, r3
 801503c:	415a      	adcs	r2, r3
 801503e:	602a      	str	r2, [r5, #0]
 8015040:	e7ee      	b.n	8015020 <__swhatbuf_r+0x1e>
 8015042:	2340      	movs	r3, #64	; 0x40
 8015044:	2000      	movs	r0, #0
 8015046:	6023      	str	r3, [r4, #0]
 8015048:	b016      	add	sp, #88	; 0x58
 801504a:	bd70      	pop	{r4, r5, r6, pc}

0801504c <__smakebuf_r>:
 801504c:	898b      	ldrh	r3, [r1, #12]
 801504e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8015050:	079d      	lsls	r5, r3, #30
 8015052:	4606      	mov	r6, r0
 8015054:	460c      	mov	r4, r1
 8015056:	d507      	bpl.n	8015068 <__smakebuf_r+0x1c>
 8015058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801505c:	6023      	str	r3, [r4, #0]
 801505e:	6123      	str	r3, [r4, #16]
 8015060:	2301      	movs	r3, #1
 8015062:	6163      	str	r3, [r4, #20]
 8015064:	b002      	add	sp, #8
 8015066:	bd70      	pop	{r4, r5, r6, pc}
 8015068:	ab01      	add	r3, sp, #4
 801506a:	466a      	mov	r2, sp
 801506c:	f7ff ffc9 	bl	8015002 <__swhatbuf_r>
 8015070:	9900      	ldr	r1, [sp, #0]
 8015072:	4605      	mov	r5, r0
 8015074:	4630      	mov	r0, r6
 8015076:	f7fd fc79 	bl	801296c <_malloc_r>
 801507a:	b948      	cbnz	r0, 8015090 <__smakebuf_r+0x44>
 801507c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8015080:	059a      	lsls	r2, r3, #22
 8015082:	d4ef      	bmi.n	8015064 <__smakebuf_r+0x18>
 8015084:	f023 0303 	bic.w	r3, r3, #3
 8015088:	f043 0302 	orr.w	r3, r3, #2
 801508c:	81a3      	strh	r3, [r4, #12]
 801508e:	e7e3      	b.n	8015058 <__smakebuf_r+0xc>
 8015090:	4b0d      	ldr	r3, [pc, #52]	; (80150c8 <__smakebuf_r+0x7c>)
 8015092:	62b3      	str	r3, [r6, #40]	; 0x28
 8015094:	89a3      	ldrh	r3, [r4, #12]
 8015096:	6020      	str	r0, [r4, #0]
 8015098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801509c:	81a3      	strh	r3, [r4, #12]
 801509e:	9b00      	ldr	r3, [sp, #0]
 80150a0:	6163      	str	r3, [r4, #20]
 80150a2:	9b01      	ldr	r3, [sp, #4]
 80150a4:	6120      	str	r0, [r4, #16]
 80150a6:	b15b      	cbz	r3, 80150c0 <__smakebuf_r+0x74>
 80150a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80150ac:	4630      	mov	r0, r6
 80150ae:	f000 f8c9 	bl	8015244 <_isatty_r>
 80150b2:	b128      	cbz	r0, 80150c0 <__smakebuf_r+0x74>
 80150b4:	89a3      	ldrh	r3, [r4, #12]
 80150b6:	f023 0303 	bic.w	r3, r3, #3
 80150ba:	f043 0301 	orr.w	r3, r3, #1
 80150be:	81a3      	strh	r3, [r4, #12]
 80150c0:	89a0      	ldrh	r0, [r4, #12]
 80150c2:	4305      	orrs	r5, r0
 80150c4:	81a5      	strh	r5, [r4, #12]
 80150c6:	e7cd      	b.n	8015064 <__smakebuf_r+0x18>
 80150c8:	08014e61 	.word	0x08014e61

080150cc <_raise_r>:
 80150cc:	291f      	cmp	r1, #31
 80150ce:	b538      	push	{r3, r4, r5, lr}
 80150d0:	4604      	mov	r4, r0
 80150d2:	460d      	mov	r5, r1
 80150d4:	d904      	bls.n	80150e0 <_raise_r+0x14>
 80150d6:	2316      	movs	r3, #22
 80150d8:	6003      	str	r3, [r0, #0]
 80150da:	f04f 30ff 	mov.w	r0, #4294967295
 80150de:	bd38      	pop	{r3, r4, r5, pc}
 80150e0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80150e2:	b112      	cbz	r2, 80150ea <_raise_r+0x1e>
 80150e4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80150e8:	b94b      	cbnz	r3, 80150fe <_raise_r+0x32>
 80150ea:	4620      	mov	r0, r4
 80150ec:	f000 f830 	bl	8015150 <_getpid_r>
 80150f0:	462a      	mov	r2, r5
 80150f2:	4601      	mov	r1, r0
 80150f4:	4620      	mov	r0, r4
 80150f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80150fa:	f000 b817 	b.w	801512c <_kill_r>
 80150fe:	2b01      	cmp	r3, #1
 8015100:	d00a      	beq.n	8015118 <_raise_r+0x4c>
 8015102:	1c59      	adds	r1, r3, #1
 8015104:	d103      	bne.n	801510e <_raise_r+0x42>
 8015106:	2316      	movs	r3, #22
 8015108:	6003      	str	r3, [r0, #0]
 801510a:	2001      	movs	r0, #1
 801510c:	e7e7      	b.n	80150de <_raise_r+0x12>
 801510e:	2400      	movs	r4, #0
 8015110:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015114:	4628      	mov	r0, r5
 8015116:	4798      	blx	r3
 8015118:	2000      	movs	r0, #0
 801511a:	e7e0      	b.n	80150de <_raise_r+0x12>

0801511c <raise>:
 801511c:	4b02      	ldr	r3, [pc, #8]	; (8015128 <raise+0xc>)
 801511e:	4601      	mov	r1, r0
 8015120:	6818      	ldr	r0, [r3, #0]
 8015122:	f7ff bfd3 	b.w	80150cc <_raise_r>
 8015126:	bf00      	nop
 8015128:	2000012c 	.word	0x2000012c

0801512c <_kill_r>:
 801512c:	b538      	push	{r3, r4, r5, lr}
 801512e:	4d07      	ldr	r5, [pc, #28]	; (801514c <_kill_r+0x20>)
 8015130:	2300      	movs	r3, #0
 8015132:	4604      	mov	r4, r0
 8015134:	4608      	mov	r0, r1
 8015136:	4611      	mov	r1, r2
 8015138:	602b      	str	r3, [r5, #0]
 801513a:	f7ec fe75 	bl	8001e28 <_kill>
 801513e:	1c43      	adds	r3, r0, #1
 8015140:	d102      	bne.n	8015148 <_kill_r+0x1c>
 8015142:	682b      	ldr	r3, [r5, #0]
 8015144:	b103      	cbz	r3, 8015148 <_kill_r+0x1c>
 8015146:	6023      	str	r3, [r4, #0]
 8015148:	bd38      	pop	{r3, r4, r5, pc}
 801514a:	bf00      	nop
 801514c:	200039cc 	.word	0x200039cc

08015150 <_getpid_r>:
 8015150:	f7ec be62 	b.w	8001e18 <_getpid>

08015154 <__sread>:
 8015154:	b510      	push	{r4, lr}
 8015156:	460c      	mov	r4, r1
 8015158:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801515c:	f000 f894 	bl	8015288 <_read_r>
 8015160:	2800      	cmp	r0, #0
 8015162:	bfab      	itete	ge
 8015164:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8015166:	89a3      	ldrhlt	r3, [r4, #12]
 8015168:	181b      	addge	r3, r3, r0
 801516a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801516e:	bfac      	ite	ge
 8015170:	6563      	strge	r3, [r4, #84]	; 0x54
 8015172:	81a3      	strhlt	r3, [r4, #12]
 8015174:	bd10      	pop	{r4, pc}

08015176 <__swrite>:
 8015176:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801517a:	461f      	mov	r7, r3
 801517c:	898b      	ldrh	r3, [r1, #12]
 801517e:	05db      	lsls	r3, r3, #23
 8015180:	4605      	mov	r5, r0
 8015182:	460c      	mov	r4, r1
 8015184:	4616      	mov	r6, r2
 8015186:	d505      	bpl.n	8015194 <__swrite+0x1e>
 8015188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801518c:	2302      	movs	r3, #2
 801518e:	2200      	movs	r2, #0
 8015190:	f000 f868 	bl	8015264 <_lseek_r>
 8015194:	89a3      	ldrh	r3, [r4, #12]
 8015196:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801519a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801519e:	81a3      	strh	r3, [r4, #12]
 80151a0:	4632      	mov	r2, r6
 80151a2:	463b      	mov	r3, r7
 80151a4:	4628      	mov	r0, r5
 80151a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80151aa:	f000 b817 	b.w	80151dc <_write_r>

080151ae <__sseek>:
 80151ae:	b510      	push	{r4, lr}
 80151b0:	460c      	mov	r4, r1
 80151b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151b6:	f000 f855 	bl	8015264 <_lseek_r>
 80151ba:	1c43      	adds	r3, r0, #1
 80151bc:	89a3      	ldrh	r3, [r4, #12]
 80151be:	bf15      	itete	ne
 80151c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80151c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80151c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80151ca:	81a3      	strheq	r3, [r4, #12]
 80151cc:	bf18      	it	ne
 80151ce:	81a3      	strhne	r3, [r4, #12]
 80151d0:	bd10      	pop	{r4, pc}

080151d2 <__sclose>:
 80151d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80151d6:	f000 b813 	b.w	8015200 <_close_r>
	...

080151dc <_write_r>:
 80151dc:	b538      	push	{r3, r4, r5, lr}
 80151de:	4d07      	ldr	r5, [pc, #28]	; (80151fc <_write_r+0x20>)
 80151e0:	4604      	mov	r4, r0
 80151e2:	4608      	mov	r0, r1
 80151e4:	4611      	mov	r1, r2
 80151e6:	2200      	movs	r2, #0
 80151e8:	602a      	str	r2, [r5, #0]
 80151ea:	461a      	mov	r2, r3
 80151ec:	f7ec fe53 	bl	8001e96 <_write>
 80151f0:	1c43      	adds	r3, r0, #1
 80151f2:	d102      	bne.n	80151fa <_write_r+0x1e>
 80151f4:	682b      	ldr	r3, [r5, #0]
 80151f6:	b103      	cbz	r3, 80151fa <_write_r+0x1e>
 80151f8:	6023      	str	r3, [r4, #0]
 80151fa:	bd38      	pop	{r3, r4, r5, pc}
 80151fc:	200039cc 	.word	0x200039cc

08015200 <_close_r>:
 8015200:	b538      	push	{r3, r4, r5, lr}
 8015202:	4d06      	ldr	r5, [pc, #24]	; (801521c <_close_r+0x1c>)
 8015204:	2300      	movs	r3, #0
 8015206:	4604      	mov	r4, r0
 8015208:	4608      	mov	r0, r1
 801520a:	602b      	str	r3, [r5, #0]
 801520c:	f7ec fe5f 	bl	8001ece <_close>
 8015210:	1c43      	adds	r3, r0, #1
 8015212:	d102      	bne.n	801521a <_close_r+0x1a>
 8015214:	682b      	ldr	r3, [r5, #0]
 8015216:	b103      	cbz	r3, 801521a <_close_r+0x1a>
 8015218:	6023      	str	r3, [r4, #0]
 801521a:	bd38      	pop	{r3, r4, r5, pc}
 801521c:	200039cc 	.word	0x200039cc

08015220 <_fstat_r>:
 8015220:	b538      	push	{r3, r4, r5, lr}
 8015222:	4d07      	ldr	r5, [pc, #28]	; (8015240 <_fstat_r+0x20>)
 8015224:	2300      	movs	r3, #0
 8015226:	4604      	mov	r4, r0
 8015228:	4608      	mov	r0, r1
 801522a:	4611      	mov	r1, r2
 801522c:	602b      	str	r3, [r5, #0]
 801522e:	f7ec fe5a 	bl	8001ee6 <_fstat>
 8015232:	1c43      	adds	r3, r0, #1
 8015234:	d102      	bne.n	801523c <_fstat_r+0x1c>
 8015236:	682b      	ldr	r3, [r5, #0]
 8015238:	b103      	cbz	r3, 801523c <_fstat_r+0x1c>
 801523a:	6023      	str	r3, [r4, #0]
 801523c:	bd38      	pop	{r3, r4, r5, pc}
 801523e:	bf00      	nop
 8015240:	200039cc 	.word	0x200039cc

08015244 <_isatty_r>:
 8015244:	b538      	push	{r3, r4, r5, lr}
 8015246:	4d06      	ldr	r5, [pc, #24]	; (8015260 <_isatty_r+0x1c>)
 8015248:	2300      	movs	r3, #0
 801524a:	4604      	mov	r4, r0
 801524c:	4608      	mov	r0, r1
 801524e:	602b      	str	r3, [r5, #0]
 8015250:	f7ec fe59 	bl	8001f06 <_isatty>
 8015254:	1c43      	adds	r3, r0, #1
 8015256:	d102      	bne.n	801525e <_isatty_r+0x1a>
 8015258:	682b      	ldr	r3, [r5, #0]
 801525a:	b103      	cbz	r3, 801525e <_isatty_r+0x1a>
 801525c:	6023      	str	r3, [r4, #0]
 801525e:	bd38      	pop	{r3, r4, r5, pc}
 8015260:	200039cc 	.word	0x200039cc

08015264 <_lseek_r>:
 8015264:	b538      	push	{r3, r4, r5, lr}
 8015266:	4d07      	ldr	r5, [pc, #28]	; (8015284 <_lseek_r+0x20>)
 8015268:	4604      	mov	r4, r0
 801526a:	4608      	mov	r0, r1
 801526c:	4611      	mov	r1, r2
 801526e:	2200      	movs	r2, #0
 8015270:	602a      	str	r2, [r5, #0]
 8015272:	461a      	mov	r2, r3
 8015274:	f7ec fe52 	bl	8001f1c <_lseek>
 8015278:	1c43      	adds	r3, r0, #1
 801527a:	d102      	bne.n	8015282 <_lseek_r+0x1e>
 801527c:	682b      	ldr	r3, [r5, #0]
 801527e:	b103      	cbz	r3, 8015282 <_lseek_r+0x1e>
 8015280:	6023      	str	r3, [r4, #0]
 8015282:	bd38      	pop	{r3, r4, r5, pc}
 8015284:	200039cc 	.word	0x200039cc

08015288 <_read_r>:
 8015288:	b538      	push	{r3, r4, r5, lr}
 801528a:	4d07      	ldr	r5, [pc, #28]	; (80152a8 <_read_r+0x20>)
 801528c:	4604      	mov	r4, r0
 801528e:	4608      	mov	r0, r1
 8015290:	4611      	mov	r1, r2
 8015292:	2200      	movs	r2, #0
 8015294:	602a      	str	r2, [r5, #0]
 8015296:	461a      	mov	r2, r3
 8015298:	f7ec fde0 	bl	8001e5c <_read>
 801529c:	1c43      	adds	r3, r0, #1
 801529e:	d102      	bne.n	80152a6 <_read_r+0x1e>
 80152a0:	682b      	ldr	r3, [r5, #0]
 80152a2:	b103      	cbz	r3, 80152a6 <_read_r+0x1e>
 80152a4:	6023      	str	r3, [r4, #0]
 80152a6:	bd38      	pop	{r3, r4, r5, pc}
 80152a8:	200039cc 	.word	0x200039cc

080152ac <_init>:
 80152ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ae:	bf00      	nop
 80152b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152b2:	bc08      	pop	{r3}
 80152b4:	469e      	mov	lr, r3
 80152b6:	4770      	bx	lr

080152b8 <_fini>:
 80152b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152ba:	bf00      	nop
 80152bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152be:	bc08      	pop	{r3}
 80152c0:	469e      	mov	lr, r3
 80152c2:	4770      	bx	lr
