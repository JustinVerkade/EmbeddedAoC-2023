
FOX-PDA-v1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014bac  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08014d80  08014d80  00024d80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080151dc  080151dc  000302fc  2**0
                  CONTENTS
  4 .ARM          00000008  080151dc  080151dc  000251dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080151e4  080151e4  000302fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080151e4  080151e4  000251e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080151e8  080151e8  000251e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002fc  20000000  080151ec  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002480  200002fc  080154e8  000302fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000277c  080154e8  0003277c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000302fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002cf65  00000000  00000000  0003032c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006648  00000000  00000000  0005d291  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002208  00000000  00000000  000638e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001f40  00000000  00000000  00065ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002fc15  00000000  00000000  00067a28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e0b0  00000000  00000000  0009763d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106057  00000000  00000000  000c56ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001cb744  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009d38  00000000  00000000  001cb794  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002fc 	.word	0x200002fc
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08014d64 	.word	0x08014d64

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000300 	.word	0x20000300
 800020c:	08014d64 	.word	0x08014d64

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <HAL_ADC_ConvCpltCallback>:
/* USER CODE BEGIN 0 */
uint8_t adc_ready = 0;
uint32_t adc_buffer[2];
uint32_t adc_dma_buffer[2];
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *AdcHandle)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b083      	sub	sp, #12
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
	adc_ready = 1;
 8000ef4:	4b07      	ldr	r3, [pc, #28]	; (8000f14 <HAL_ADC_ConvCpltCallback+0x28>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	701a      	strb	r2, [r3, #0]
	memcpy(adc_buffer, adc_dma_buffer, 2 * sizeof(uint32_t));
 8000efa:	4b07      	ldr	r3, [pc, #28]	; (8000f18 <HAL_ADC_ConvCpltCallback+0x2c>)
 8000efc:	4a07      	ldr	r2, [pc, #28]	; (8000f1c <HAL_ADC_ConvCpltCallback+0x30>)
 8000efe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f02:	e883 0003 	stmia.w	r3, {r0, r1}
}
 8000f06:	bf00      	nop
 8000f08:	370c      	adds	r7, #12
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20000670 	.word	0x20000670
 8000f18:	20000674 	.word	0x20000674
 8000f1c:	2000067c 	.word	0x2000067c

08000f20 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000f26:	f001 f826 	bl	8001f76 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000f2a:	f000 f847 	bl	8000fbc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000f2e:	f000 fa97 	bl	8001460 <MX_GPIO_Init>
	MX_DMA_Init();
 8000f32:	f000 fa05 	bl	8001340 <MX_DMA_Init>
	MX_SDMMC1_SD_Init();
 8000f36:	f000 f90f 	bl	8001158 <MX_SDMMC1_SD_Init>
	MX_FATFS_Init();
 8000f3a:	f00b ff6b 	bl	800ce14 <MX_FATFS_Init>
	MX_USB_DEVICE_Init();
 8000f3e:	f010 f929 	bl	8011194 <MX_USB_DEVICE_Init>
	MX_USB_HOST_Init();
 8000f42:	f010 fea9 	bl	8011c98 <MX_USB_HOST_Init>
	MX_USART1_UART_Init();
 8000f46:	f000 f9cb 	bl	80012e0 <MX_USART1_UART_Init>
	MX_TIM1_Init();
 8000f4a:	f000 f927 	bl	800119c <MX_TIM1_Init>
	MX_TIM11_Init();
 8000f4e:	f000 f979 	bl	8001244 <MX_TIM11_Init>
	MX_ADC1_Init();
 8000f52:	f000 f8a1 	bl	8001098 <MX_ADC1_Init>
	MX_FMC_Init();
 8000f56:	f000 fa21 	bl	800139c <MX_FMC_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(1000);
 8000f5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f5e:	f001 f867 	bl	8002030 <HAL_Delay>
	//	f_gets(buffer, 256, &file);
	//	fr = f_close(&file);
	//
	//	CDC_Transmit_HS((uint8_t*)buffer, strlen(buffer));

	HAL_ADC_Start_DMA(&hadc1, adc_dma_buffer, 2);
 8000f62:	2202      	movs	r2, #2
 8000f64:	4912      	ldr	r1, [pc, #72]	; (8000fb0 <main+0x90>)
 8000f66:	4813      	ldr	r0, [pc, #76]	; (8000fb4 <main+0x94>)
 8000f68:	f001 f8ca 	bl	8002100 <HAL_ADC_Start_DMA>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
	{
		int16_t axis_x = (int16_t)adc_buffer[0] - 2048;
 8000f6c:	4b12      	ldr	r3, [pc, #72]	; (8000fb8 <main+0x98>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	b29b      	uxth	r3, r3
 8000f72:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f76:	b29b      	uxth	r3, r3
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	80fb      	strh	r3, [r7, #6]
		int16_t axis_y = (int16_t)adc_buffer[1] - 2048;
 8000f7c:	4b0e      	ldr	r3, [pc, #56]	; (8000fb8 <main+0x98>)
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	b29b      	uxth	r3, r3
 8000f82:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	b21b      	sxth	r3, r3
 8000f8a:	80bb      	strh	r3, [r7, #4]
 8000f8c:	88fb      	ldrh	r3, [r7, #6]
		uint8_t buffer[4];
		memcpy(buffer, &axis_x, 2);
 8000f8e:	803b      	strh	r3, [r7, #0]
		memcpy(buffer + 2, &axis_y, 2);
 8000f90:	463b      	mov	r3, r7
 8000f92:	3302      	adds	r3, #2
 8000f94:	88ba      	ldrh	r2, [r7, #4]
 8000f96:	801a      	strh	r2, [r3, #0]
		CDC_Transmit_HS(buffer, 4);
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f010 f9b7 	bl	8011310 <CDC_Transmit_HS>

		HAL_Delay(1000 / 200);
 8000fa2:	2005      	movs	r0, #5
 8000fa4:	f001 f844 	bl	8002030 <HAL_Delay>

		/* USER CODE END WHILE */
		MX_USB_HOST_Process();
 8000fa8:	f010 fe9c 	bl	8011ce4 <MX_USB_HOST_Process>
	{
 8000fac:	e7de      	b.n	8000f6c <main+0x4c>
 8000fae:	bf00      	nop
 8000fb0:	2000067c 	.word	0x2000067c
 8000fb4:	20000318 	.word	0x20000318
 8000fb8:	20000674 	.word	0x20000674

08000fbc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b094      	sub	sp, #80	; 0x50
 8000fc0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc2:	f107 0320 	add.w	r3, r7, #32
 8000fc6:	2230      	movs	r2, #48	; 0x30
 8000fc8:	2100      	movs	r1, #0
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f011 f9b6 	bl	801233c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8000fe0:	f005 fae2 	bl	80065a8 <HAL_PWR_EnableBkUpAccess>

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000fe4:	4b2a      	ldr	r3, [pc, #168]	; (8001090 <SystemClock_Config+0xd4>)
 8000fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe8:	4a29      	ldr	r2, [pc, #164]	; (8001090 <SystemClock_Config+0xd4>)
 8000fea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fee:	6413      	str	r3, [r2, #64]	; 0x40
 8000ff0:	4b27      	ldr	r3, [pc, #156]	; (8001090 <SystemClock_Config+0xd4>)
 8000ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	60bb      	str	r3, [r7, #8]
 8000ffa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ffc:	4b25      	ldr	r3, [pc, #148]	; (8001094 <SystemClock_Config+0xd8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a24      	ldr	r2, [pc, #144]	; (8001094 <SystemClock_Config+0xd8>)
 8001002:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b22      	ldr	r3, [pc, #136]	; (8001094 <SystemClock_Config+0xd8>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001014:	2301      	movs	r3, #1
 8001016:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001018:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800101e:	2302      	movs	r3, #2
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001022:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001026:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001028:	2308      	movs	r3, #8
 800102a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 216;
 800102c:	23d8      	movs	r3, #216	; 0xd8
 800102e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001030:	2302      	movs	r3, #2
 8001032:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 9;
 8001034:	2309      	movs	r3, #9
 8001036:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001038:	f107 0320 	add.w	r3, r7, #32
 800103c:	4618      	mov	r0, r3
 800103e:	f005 fb13 	bl	8006668 <HAL_RCC_OscConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d001      	beq.n	800104c <SystemClock_Config+0x90>
	{
		Error_Handler();
 8001048:	f000 fb3c 	bl	80016c4 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800104c:	f005 fabc 	bl	80065c8 <HAL_PWREx_EnableOverDrive>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d001      	beq.n	800105a <SystemClock_Config+0x9e>
	{
		Error_Handler();
 8001056:	f000 fb35 	bl	80016c4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800105a:	230f      	movs	r3, #15
 800105c:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800105e:	2302      	movs	r3, #2
 8001060:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001062:	2300      	movs	r3, #0
 8001064:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001066:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800106a:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800106c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001070:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001072:	f107 030c 	add.w	r3, r7, #12
 8001076:	2107      	movs	r1, #7
 8001078:	4618      	mov	r0, r3
 800107a:	f005 fd99 	bl	8006bb0 <HAL_RCC_ClockConfig>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <SystemClock_Config+0xcc>
	{
		Error_Handler();
 8001084:	f000 fb1e 	bl	80016c4 <Error_Handler>
	}
}
 8001088:	bf00      	nop
 800108a:	3750      	adds	r7, #80	; 0x50
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000

08001098 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	b084      	sub	sp, #16
 800109c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800109e:	463b      	mov	r3, r7
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
 80010a4:	605a      	str	r2, [r3, #4]
 80010a6:	609a      	str	r2, [r3, #8]
 80010a8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80010aa:	4b28      	ldr	r3, [pc, #160]	; (800114c <MX_ADC1_Init+0xb4>)
 80010ac:	4a28      	ldr	r2, [pc, #160]	; (8001150 <MX_ADC1_Init+0xb8>)
 80010ae:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80010b0:	4b26      	ldr	r3, [pc, #152]	; (800114c <MX_ADC1_Init+0xb4>)
 80010b2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010b6:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010b8:	4b24      	ldr	r3, [pc, #144]	; (800114c <MX_ADC1_Init+0xb4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010be:	4b23      	ldr	r3, [pc, #140]	; (800114c <MX_ADC1_Init+0xb4>)
 80010c0:	2201      	movs	r2, #1
 80010c2:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_ADC1_Init+0xb4>)
 80010c6:	2201      	movs	r2, #1
 80010c8:	619a      	str	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010ca:	4b20      	ldr	r3, [pc, #128]	; (800114c <MX_ADC1_Init+0xb4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010d2:	4b1e      	ldr	r3, [pc, #120]	; (800114c <MX_ADC1_Init+0xb4>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010d8:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_ADC1_Init+0xb4>)
 80010da:	4a1e      	ldr	r2, [pc, #120]	; (8001154 <MX_ADC1_Init+0xbc>)
 80010dc:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_ADC1_Init+0xb4>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 2;
 80010e4:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_ADC1_Init+0xb4>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = ENABLE;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <MX_ADC1_Init+0xb4>)
 80010ec:	2201      	movs	r2, #1
 80010ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_ADC1_Init+0xb4>)
 80010f4:	2201      	movs	r2, #1
 80010f6:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010f8:	4814      	ldr	r0, [pc, #80]	; (800114c <MX_ADC1_Init+0xb4>)
 80010fa:	f000 ffbd 	bl	8002078 <HAL_ADC_Init>
 80010fe:	4603      	mov	r3, r0
 8001100:	2b00      	cmp	r3, #0
 8001102:	d001      	beq.n	8001108 <MX_ADC1_Init+0x70>
	{
		Error_Handler();
 8001104:	f000 fade 	bl	80016c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8001108:	2300      	movs	r3, #0
 800110a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800110c:	2301      	movs	r3, #1
 800110e:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 8001110:	2306      	movs	r3, #6
 8001112:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001114:	463b      	mov	r3, r7
 8001116:	4619      	mov	r1, r3
 8001118:	480c      	ldr	r0, [pc, #48]	; (800114c <MX_ADC1_Init+0xb4>)
 800111a:	f001 f8ff 	bl	800231c <HAL_ADC_ConfigChannel>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_ADC1_Init+0x90>
	{
		Error_Handler();
 8001124:	f000 face 	bl	80016c4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 8001128:	2302      	movs	r3, #2
 800112a:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 800112c:	2302      	movs	r3, #2
 800112e:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001130:	463b      	mov	r3, r7
 8001132:	4619      	mov	r1, r3
 8001134:	4805      	ldr	r0, [pc, #20]	; (800114c <MX_ADC1_Init+0xb4>)
 8001136:	f001 f8f1 	bl	800231c <HAL_ADC_ConfigChannel>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	d001      	beq.n	8001144 <MX_ADC1_Init+0xac>
	{
		Error_Handler();
 8001140:	f000 fac0 	bl	80016c4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	20000318 	.word	0x20000318
 8001150:	40012000 	.word	0x40012000
 8001154:	0f000001 	.word	0x0f000001

08001158 <MX_SDMMC1_SD_Init>:
 * @brief SDMMC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SDMMC1_SD_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	/* USER CODE END SDMMC1_Init 0 */

	/* USER CODE BEGIN SDMMC1_Init 1 */

	/* USER CODE END SDMMC1_Init 1 */
	hsd1.Instance = SDMMC1;
 800115c:	4b0d      	ldr	r3, [pc, #52]	; (8001194 <MX_SDMMC1_SD_Init+0x3c>)
 800115e:	4a0e      	ldr	r2, [pc, #56]	; (8001198 <MX_SDMMC1_SD_Init+0x40>)
 8001160:	601a      	str	r2, [r3, #0]
	hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_SDMMC1_SD_Init+0x3c>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
	hsd1.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8001168:	4b0a      	ldr	r3, [pc, #40]	; (8001194 <MX_SDMMC1_SD_Init+0x3c>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
	hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800116e:	4b09      	ldr	r3, [pc, #36]	; (8001194 <MX_SDMMC1_SD_Init+0x3c>)
 8001170:	2200      	movs	r2, #0
 8001172:	60da      	str	r2, [r3, #12]
	hsd1.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8001174:	4b07      	ldr	r3, [pc, #28]	; (8001194 <MX_SDMMC1_SD_Init+0x3c>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
	hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_ENABLE;
 800117a:	4b06      	ldr	r3, [pc, #24]	; (8001194 <MX_SDMMC1_SD_Init+0x3c>)
 800117c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001180:	615a      	str	r2, [r3, #20]
	hsd1.Init.ClockDiv = 4;
 8001182:	4b04      	ldr	r3, [pc, #16]	; (8001194 <MX_SDMMC1_SD_Init+0x3c>)
 8001184:	2204      	movs	r2, #4
 8001186:	619a      	str	r2, [r3, #24]
	/* USER CODE BEGIN SDMMC1_Init 2 */
	HAL_SD_Init(&hsd1);
 8001188:	4802      	ldr	r0, [pc, #8]	; (8001194 <MX_SDMMC1_SD_Init+0x3c>)
 800118a:	f006 faed 	bl	8007768 <HAL_SD_Init>
	/* USER CODE END SDMMC1_Init 2 */

}
 800118e:	bf00      	nop
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	200003c0 	.word	0x200003c0
 8001198:	40012c00 	.word	0x40012c00

0800119c <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b088      	sub	sp, #32
 80011a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011a2:	f107 0310 	add.w	r3, r7, #16
 80011a6:	2200      	movs	r2, #0
 80011a8:	601a      	str	r2, [r3, #0]
 80011aa:	605a      	str	r2, [r3, #4]
 80011ac:	609a      	str	r2, [r3, #8]
 80011ae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80011ba:	4b20      	ldr	r3, [pc, #128]	; (800123c <MX_TIM1_Init+0xa0>)
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <MX_TIM1_Init+0xa4>)
 80011be:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80011c0:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_TIM1_Init+0xa0>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM1_Init+0xa0>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80011cc:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_TIM1_Init+0xa0>)
 80011ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011d2:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_TIM1_Init+0xa0>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_TIM1_Init+0xa0>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_TIM1_Init+0xa0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80011e6:	4815      	ldr	r0, [pc, #84]	; (800123c <MX_TIM1_Init+0xa0>)
 80011e8:	f007 fa96 	bl	8008718 <HAL_TIM_Base_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <MX_TIM1_Init+0x5a>
	{
		Error_Handler();
 80011f2:	f000 fa67 	bl	80016c4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011fa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80011fc:	f107 0310 	add.w	r3, r7, #16
 8001200:	4619      	mov	r1, r3
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <MX_TIM1_Init+0xa0>)
 8001204:	f007 fc54 	bl	8008ab0 <HAL_TIM_ConfigClockSource>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_TIM1_Init+0x76>
	{
		Error_Handler();
 800120e:	f000 fa59 	bl	80016c4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001212:	2300      	movs	r3, #0
 8001214:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001216:	2300      	movs	r3, #0
 8001218:	60bb      	str	r3, [r7, #8]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_TIM1_Init+0xa0>)
 8001224:	f008 f8a6 	bl	8009374 <HAL_TIMEx_MasterConfigSynchronization>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 800122e:	f000 fa49 	bl	80016c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3720      	adds	r7, #32
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000504 	.word	0x20000504
 8001240:	40010000 	.word	0x40010000

08001244 <MX_TIM11_Init>:
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b088      	sub	sp, #32
 8001248:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = {0};
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
 8001258:	615a      	str	r2, [r3, #20]
 800125a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800125c:	4b1e      	ldr	r3, [pc, #120]	; (80012d8 <MX_TIM11_Init+0x94>)
 800125e:	4a1f      	ldr	r2, [pc, #124]	; (80012dc <MX_TIM11_Init+0x98>)
 8001260:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 8001262:	4b1d      	ldr	r3, [pc, #116]	; (80012d8 <MX_TIM11_Init+0x94>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b1b      	ldr	r3, [pc, #108]	; (80012d8 <MX_TIM11_Init+0x94>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 800126e:	4b1a      	ldr	r3, [pc, #104]	; (80012d8 <MX_TIM11_Init+0x94>)
 8001270:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001274:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b18      	ldr	r3, [pc, #96]	; (80012d8 <MX_TIM11_Init+0x94>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800127c:	4b16      	ldr	r3, [pc, #88]	; (80012d8 <MX_TIM11_Init+0x94>)
 800127e:	2200      	movs	r2, #0
 8001280:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001282:	4815      	ldr	r0, [pc, #84]	; (80012d8 <MX_TIM11_Init+0x94>)
 8001284:	f007 fa48 	bl	8008718 <HAL_TIM_Base_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM11_Init+0x4e>
	{
		Error_Handler();
 800128e:	f000 fa19 	bl	80016c4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK)
 8001292:	4811      	ldr	r0, [pc, #68]	; (80012d8 <MX_TIM11_Init+0x94>)
 8001294:	f007 fa97 	bl	80087c6 <HAL_TIM_PWM_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM11_Init+0x5e>
	{
		Error_Handler();
 800129e:	f000 fa11 	bl	80016c4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012a2:	2360      	movs	r3, #96	; 0x60
 80012a4:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80012a6:	2300      	movs	r3, #0
 80012a8:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	2200      	movs	r2, #0
 80012b6:	4619      	mov	r1, r3
 80012b8:	4807      	ldr	r0, [pc, #28]	; (80012d8 <MX_TIM11_Init+0x94>)
 80012ba:	f007 fae5 	bl	8008888 <HAL_TIM_PWM_ConfigChannel>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM11_Init+0x84>
	{
		Error_Handler();
 80012c4:	f000 f9fe 	bl	80016c4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 80012c8:	4803      	ldr	r0, [pc, #12]	; (80012d8 <MX_TIM11_Init+0x94>)
 80012ca:	f000 fbe9 	bl	8001aa0 <HAL_TIM_MspPostInit>

}
 80012ce:	bf00      	nop
 80012d0:	3720      	adds	r7, #32
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000550 	.word	0x20000550
 80012dc:	40014800 	.word	0x40014800

080012e0 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80012e4:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012e6:	4a15      	ldr	r2, [pc, #84]	; (800133c <MX_USART1_UART_Init+0x5c>)
 80012e8:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80012ea:	4b13      	ldr	r3, [pc, #76]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012f0:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_USART1_UART_Init+0x58>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8001304:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001306:	220c      	movs	r2, #12
 8001308:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <MX_USART1_UART_Init+0x58>)
 800130c:	2200      	movs	r2, #0
 800130e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001310:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001312:	2200      	movs	r2, #0
 8001314:	61da      	str	r2, [r3, #28]
	huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001316:	4b08      	ldr	r3, [pc, #32]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001318:	2200      	movs	r2, #0
 800131a:	621a      	str	r2, [r3, #32]
	huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800131c:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_USART1_UART_Init+0x58>)
 800131e:	2200      	movs	r2, #0
 8001320:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <MX_USART1_UART_Init+0x58>)
 8001324:	f008 f8b4 	bl	8009490 <HAL_UART_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d001      	beq.n	8001332 <MX_USART1_UART_Init+0x52>
	{
		Error_Handler();
 800132e:	f000 f9c9 	bl	80016c4 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	2000059c 	.word	0x2000059c
 800133c:	40011000 	.word	0x40011000

08001340 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001346:	4b14      	ldr	r3, [pc, #80]	; (8001398 <MX_DMA_Init+0x58>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	4a13      	ldr	r2, [pc, #76]	; (8001398 <MX_DMA_Init+0x58>)
 800134c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001350:	6313      	str	r3, [r2, #48]	; 0x30
 8001352:	4b11      	ldr	r3, [pc, #68]	; (8001398 <MX_DMA_Init+0x58>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800135a:	607b      	str	r3, [r7, #4]
 800135c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800135e:	2200      	movs	r2, #0
 8001360:	2100      	movs	r1, #0
 8001362:	2038      	movs	r0, #56	; 0x38
 8001364:	f001 fb87 	bl	8002a76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001368:	2038      	movs	r0, #56	; 0x38
 800136a:	f001 fba0 	bl	8002aae <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800136e:	2200      	movs	r2, #0
 8001370:	2100      	movs	r1, #0
 8001372:	203b      	movs	r0, #59	; 0x3b
 8001374:	f001 fb7f 	bl	8002a76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8001378:	203b      	movs	r0, #59	; 0x3b
 800137a:	f001 fb98 	bl	8002aae <HAL_NVIC_EnableIRQ>
	/* DMA2_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 0, 0);
 800137e:	2200      	movs	r2, #0
 8001380:	2100      	movs	r1, #0
 8001382:	2045      	movs	r0, #69	; 0x45
 8001384:	f001 fb77 	bl	8002a76 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8001388:	2045      	movs	r0, #69	; 0x45
 800138a:	f001 fb90 	bl	8002aae <HAL_NVIC_EnableIRQ>

}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}
 8001396:	bf00      	nop
 8001398:	40023800 	.word	0x40023800

0800139c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b088      	sub	sp, #32
 80013a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN FMC_Init 0 */

	/* USER CODE END FMC_Init 0 */

	FMC_NORSRAM_TimingTypeDef Timing = {0};
 80013a2:	1d3b      	adds	r3, r7, #4
 80013a4:	2200      	movs	r2, #0
 80013a6:	601a      	str	r2, [r3, #0]
 80013a8:	605a      	str	r2, [r3, #4]
 80013aa:	609a      	str	r2, [r3, #8]
 80013ac:	60da      	str	r2, [r3, #12]
 80013ae:	611a      	str	r2, [r3, #16]
 80013b0:	615a      	str	r2, [r3, #20]
 80013b2:	619a      	str	r2, [r3, #24]

	/* USER CODE END FMC_Init 1 */

	/** Perform the SRAM1 memory initialization sequence
	 */
	hsram1.Instance = FMC_NORSRAM_DEVICE;
 80013b4:	4b28      	ldr	r3, [pc, #160]	; (8001458 <MX_FMC_Init+0xbc>)
 80013b6:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 80013ba:	601a      	str	r2, [r3, #0]
	hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <MX_FMC_Init+0xbc>)
 80013be:	4a27      	ldr	r2, [pc, #156]	; (800145c <MX_FMC_Init+0xc0>)
 80013c0:	605a      	str	r2, [r3, #4]
	/* hsram1.Init */
	hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 80013c2:	4b25      	ldr	r3, [pc, #148]	; (8001458 <MX_FMC_Init+0xbc>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	609a      	str	r2, [r3, #8]
	hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 80013c8:	4b23      	ldr	r3, [pc, #140]	; (8001458 <MX_FMC_Init+0xbc>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	60da      	str	r2, [r3, #12]
	hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 80013ce:	4b22      	ldr	r3, [pc, #136]	; (8001458 <MX_FMC_Init+0xbc>)
 80013d0:	2204      	movs	r2, #4
 80013d2:	611a      	str	r2, [r3, #16]
	hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 80013d4:	4b20      	ldr	r3, [pc, #128]	; (8001458 <MX_FMC_Init+0xbc>)
 80013d6:	2210      	movs	r2, #16
 80013d8:	615a      	str	r2, [r3, #20]
	hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 80013da:	4b1f      	ldr	r3, [pc, #124]	; (8001458 <MX_FMC_Init+0xbc>)
 80013dc:	2200      	movs	r2, #0
 80013de:	619a      	str	r2, [r3, #24]
	hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_FMC_Init+0xbc>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	61da      	str	r2, [r3, #28]
	hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <MX_FMC_Init+0xbc>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	621a      	str	r2, [r3, #32]
	hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_FMC_Init+0xbc>)
 80013ee:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80013f2:	625a      	str	r2, [r3, #36]	; 0x24
	hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_FMC_Init+0xbc>)
 80013f6:	2200      	movs	r2, #0
 80013f8:	629a      	str	r2, [r3, #40]	; 0x28
	hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	; (8001458 <MX_FMC_Init+0xbc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	; 0x2c
	hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_FMC_Init+0xbc>)
 8001402:	2200      	movs	r2, #0
 8001404:	631a      	str	r2, [r3, #48]	; 0x30
	hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001406:	4b14      	ldr	r3, [pc, #80]	; (8001458 <MX_FMC_Init+0xbc>)
 8001408:	2200      	movs	r2, #0
 800140a:	635a      	str	r2, [r3, #52]	; 0x34
	hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 800140c:	4b12      	ldr	r3, [pc, #72]	; (8001458 <MX_FMC_Init+0xbc>)
 800140e:	2200      	movs	r2, #0
 8001410:	639a      	str	r2, [r3, #56]	; 0x38
	hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <MX_FMC_Init+0xbc>)
 8001414:	2200      	movs	r2, #0
 8001416:	63da      	str	r2, [r3, #60]	; 0x3c
	hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001418:	4b0f      	ldr	r3, [pc, #60]	; (8001458 <MX_FMC_Init+0xbc>)
 800141a:	2200      	movs	r2, #0
 800141c:	641a      	str	r2, [r3, #64]	; 0x40
	/* Timing */
	Timing.AddressSetupTime = 5;
 800141e:	2305      	movs	r3, #5
 8001420:	607b      	str	r3, [r7, #4]
	Timing.AddressHoldTime = 15;
 8001422:	230f      	movs	r3, #15
 8001424:	60bb      	str	r3, [r7, #8]
	Timing.DataSetupTime = 8;
 8001426:	2308      	movs	r3, #8
 8001428:	60fb      	str	r3, [r7, #12]
	Timing.BusTurnAroundDuration = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	613b      	str	r3, [r7, #16]
	Timing.CLKDivision = 16;
 800142e:	2310      	movs	r3, #16
 8001430:	617b      	str	r3, [r7, #20]
	Timing.DataLatency = 17;
 8001432:	2311      	movs	r3, #17
 8001434:	61bb      	str	r3, [r7, #24]
	Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001436:	2300      	movs	r3, #0
 8001438:	61fb      	str	r3, [r7, #28]
	/* ExtTiming */

	if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 800143a:	1d3b      	adds	r3, r7, #4
 800143c:	2200      	movs	r2, #0
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_FMC_Init+0xbc>)
 8001442:	f007 f921 	bl	8008688 <HAL_SRAM_Init>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_FMC_Init+0xb4>
	{
		Error_Handler( );
 800144c:	f000 f93a 	bl	80016c4 <Error_Handler>
	}

	/* USER CODE BEGIN FMC_Init 2 */

	/* USER CODE END FMC_Init 2 */
}
 8001450:	bf00      	nop
 8001452:	3720      	adds	r7, #32
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000624 	.word	0x20000624
 800145c:	a0000104 	.word	0xa0000104

08001460 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b08e      	sub	sp, #56	; 0x38
 8001464:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001466:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146a:	2200      	movs	r2, #0
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	605a      	str	r2, [r3, #4]
 8001470:	609a      	str	r2, [r3, #8]
 8001472:	60da      	str	r2, [r3, #12]
 8001474:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001476:	4b8b      	ldr	r3, [pc, #556]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a8a      	ldr	r2, [pc, #552]	; (80016a4 <MX_GPIO_Init+0x244>)
 800147c:	f043 0310 	orr.w	r3, r3, #16
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b88      	ldr	r3, [pc, #544]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0310 	and.w	r3, r3, #16
 800148a:	623b      	str	r3, [r7, #32]
 800148c:	6a3b      	ldr	r3, [r7, #32]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800148e:	4b85      	ldr	r3, [pc, #532]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a84      	ldr	r2, [pc, #528]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001494:	f043 0302 	orr.w	r3, r3, #2
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b82      	ldr	r3, [pc, #520]	; (80016a4 <MX_GPIO_Init+0x244>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	61fb      	str	r3, [r7, #28]
 80014a4:	69fb      	ldr	r3, [r7, #28]
	__HAL_RCC_GPIOG_CLK_ENABLE();
 80014a6:	4b7f      	ldr	r3, [pc, #508]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014aa:	4a7e      	ldr	r2, [pc, #504]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014b0:	6313      	str	r3, [r2, #48]	; 0x30
 80014b2:	4b7c      	ldr	r3, [pc, #496]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014ba:	61bb      	str	r3, [r7, #24]
 80014bc:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80014be:	4b79      	ldr	r3, [pc, #484]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a78      	ldr	r2, [pc, #480]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014c4:	f043 0308 	orr.w	r3, r3, #8
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b76      	ldr	r3, [pc, #472]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0308 	and.w	r3, r3, #8
 80014d2:	617b      	str	r3, [r7, #20]
 80014d4:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014d6:	4b73      	ldr	r3, [pc, #460]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014da:	4a72      	ldr	r2, [pc, #456]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014dc:	f043 0304 	orr.w	r3, r3, #4
 80014e0:	6313      	str	r3, [r2, #48]	; 0x30
 80014e2:	4b70      	ldr	r3, [pc, #448]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014e6:	f003 0304 	and.w	r3, r3, #4
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b6d      	ldr	r3, [pc, #436]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f2:	4a6c      	ldr	r2, [pc, #432]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	6313      	str	r3, [r2, #48]	; 0x30
 80014fa:	4b6a      	ldr	r3, [pc, #424]	; (80016a4 <MX_GPIO_Init+0x244>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOI_CLK_ENABLE();
 8001506:	4b67      	ldr	r3, [pc, #412]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	4a66      	ldr	r2, [pc, #408]	; (80016a4 <MX_GPIO_Init+0x244>)
 800150c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001510:	6313      	str	r3, [r2, #48]	; 0x30
 8001512:	4b64      	ldr	r3, [pc, #400]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800151a:	60bb      	str	r3, [r7, #8]
 800151c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOF_CLK_ENABLE();
 800151e:	4b61      	ldr	r3, [pc, #388]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001522:	4a60      	ldr	r2, [pc, #384]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001524:	f043 0320 	orr.w	r3, r3, #32
 8001528:	6313      	str	r3, [r2, #48]	; 0x30
 800152a:	4b5e      	ldr	r3, [pc, #376]	; (80016a4 <MX_GPIO_Init+0x244>)
 800152c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152e:	f003 0320 	and.w	r3, r3, #32
 8001532:	607b      	str	r3, [r7, #4]
 8001534:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001536:	4b5b      	ldr	r3, [pc, #364]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a5a      	ldr	r2, [pc, #360]	; (80016a4 <MX_GPIO_Init+0x244>)
 800153c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b58      	ldr	r3, [pc, #352]	; (80016a4 <MX_GPIO_Init+0x244>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800154a:	603b      	str	r3, [r7, #0]
 800154c:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(WIFI_ENABLE_GPIO_Port, WIFI_ENABLE_Pin, GPIO_PIN_RESET);
 800154e:	2200      	movs	r2, #0
 8001550:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001554:	4854      	ldr	r0, [pc, #336]	; (80016a8 <MX_GPIO_Init+0x248>)
 8001556:	f002 f801 	bl	800355c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(USB_HOST_VBUF_GPIO_Port, USB_HOST_VBUF_Pin, GPIO_PIN_RESET);
 800155a:	2200      	movs	r2, #0
 800155c:	2104      	movs	r1, #4
 800155e:	4853      	ldr	r0, [pc, #332]	; (80016ac <MX_GPIO_Init+0x24c>)
 8001560:	f001 fffc 	bl	800355c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001564:	2200      	movs	r2, #0
 8001566:	2140      	movs	r1, #64	; 0x40
 8001568:	4851      	ldr	r0, [pc, #324]	; (80016b0 <MX_GPIO_Init+0x250>)
 800156a:	f001 fff7 	bl	800355c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOG, LED2_Pin|LED1_Pin, GPIO_PIN_RESET);
 800156e:	2200      	movs	r2, #0
 8001570:	21c0      	movs	r1, #192	; 0xc0
 8001572:	4850      	ldr	r0, [pc, #320]	; (80016b4 <MX_GPIO_Init+0x254>)
 8001574:	f001 fff2 	bl	800355c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : WIFI_ENABLE_Pin */
	GPIO_InitStruct.Pin = WIFI_ENABLE_Pin;
 8001578:	f44f 7380 	mov.w	r3, #256	; 0x100
 800157c:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800157e:	2301      	movs	r3, #1
 8001580:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(WIFI_ENABLE_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800158e:	4619      	mov	r1, r3
 8001590:	4845      	ldr	r0, [pc, #276]	; (80016a8 <MX_GPIO_Init+0x248>)
 8001592:	f001 fe1f 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB5 PB4 PB12 PB13
                           PB1 PB0 PB10 PB11 */
	GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_12|GPIO_PIN_13
 8001596:	f643 4333 	movw	r3, #15411	; 0x3c33
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_11;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a8:	4619      	mov	r1, r3
 80015aa:	483f      	ldr	r0, [pc, #252]	; (80016a8 <MX_GPIO_Init+0x248>)
 80015ac:	f001 fe12 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PG14 PG13 PG15 PG12
                           PG11 PG10 PG8 */
	GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_12
 80015b0:	f44f 437d 	mov.w	r3, #64768	; 0xfd00
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_8;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015b6:	2300      	movs	r3, #0
 80015b8:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	4619      	mov	r1, r3
 80015c4:	483b      	ldr	r0, [pc, #236]	; (80016b4 <MX_GPIO_Init+0x254>)
 80015c6:	f001 fe05 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : SDMMC_SW_Pin PA10 PA9 PA6
                           PA5 PA3 PA7 */
	GPIO_InitStruct.Pin = SDMMC_SW_Pin|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_6
 80015ca:	f248 63e8 	movw	r3, #34536	; 0x86e8
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
			|GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_7;
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015dc:	4619      	mov	r1, r3
 80015de:	4836      	ldr	r0, [pc, #216]	; (80016b8 <MX_GPIO_Init+0x258>)
 80015e0:	f001 fdf8 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD6 */
	GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015e4:	2340      	movs	r3, #64	; 0x40
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e8:	2300      	movs	r3, #0
 80015ea:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f4:	4619      	mov	r1, r3
 80015f6:	4831      	ldr	r0, [pc, #196]	; (80016bc <MX_GPIO_Init+0x25c>)
 80015f8:	f001 fdec 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PI3 PI1 PI0 */
	GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0;
 80015fc:	230b      	movs	r3, #11
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001604:	2300      	movs	r3, #0
 8001606:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800160c:	4619      	mov	r1, r3
 800160e:	4827      	ldr	r0, [pc, #156]	; (80016ac <MX_GPIO_Init+0x24c>)
 8001610:	f001 fde0 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : USB_HOST_VBUF_Pin */
	GPIO_InitStruct.Pin = USB_HOST_VBUF_Pin;
 8001614:	2304      	movs	r3, #4
 8001616:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001618:	2301      	movs	r3, #1
 800161a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800161c:	2300      	movs	r3, #0
 800161e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001620:	2300      	movs	r3, #0
 8001622:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(USB_HOST_VBUF_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001628:	4619      	mov	r1, r3
 800162a:	4820      	ldr	r0, [pc, #128]	; (80016ac <MX_GPIO_Init+0x24c>)
 800162c:	f001 fdd2 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PC7 PC5 */
	GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_5;
 8001630:	23a0      	movs	r3, #160	; 0xa0
 8001632:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800163c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001640:	4619      	mov	r1, r3
 8001642:	481b      	ldr	r0, [pc, #108]	; (80016b0 <MX_GPIO_Init+0x250>)
 8001644:	f001 fdc6 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LED3_Pin */
	GPIO_InitStruct.Pin = LED3_Pin;
 8001648:	2340      	movs	r3, #64	; 0x40
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800164c:	2301      	movs	r3, #1
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001650:	2300      	movs	r3, #0
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001654:	2300      	movs	r3, #0
 8001656:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800165c:	4619      	mov	r1, r3
 800165e:	4814      	ldr	r0, [pc, #80]	; (80016b0 <MX_GPIO_Init+0x250>)
 8001660:	f001 fdb8 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED2_Pin LED1_Pin */
	GPIO_InitStruct.Pin = LED2_Pin|LED1_Pin;
 8001664:	23c0      	movs	r3, #192	; 0xc0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
	HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001674:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001678:	4619      	mov	r1, r3
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <MX_GPIO_Init+0x254>)
 800167c:	f001 fdaa 	bl	80031d4 <HAL_GPIO_Init>

	/*Configure GPIO pin : PF11 */
	GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001680:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001684:	627b      	str	r3, [r7, #36]	; 0x24
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001686:	2300      	movs	r3, #0
 8001688:	62bb      	str	r3, [r7, #40]	; 0x28
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168a:	2300      	movs	r3, #0
 800168c:	62fb      	str	r3, [r7, #44]	; 0x2c
	HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800168e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001692:	4619      	mov	r1, r3
 8001694:	480a      	ldr	r0, [pc, #40]	; (80016c0 <MX_GPIO_Init+0x260>)
 8001696:	f001 fd9d 	bl	80031d4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800169a:	bf00      	nop
 800169c:	3738      	adds	r7, #56	; 0x38
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400
 80016ac:	40022000 	.word	0x40022000
 80016b0:	40020800 	.word	0x40020800
 80016b4:	40021800 	.word	0x40021800
 80016b8:	40020000 	.word	0x40020000
 80016bc:	40020c00 	.word	0x40020c00
 80016c0:	40021400 	.word	0x40021400

080016c4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	//__disable_irq();
	while (1)
	{
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80016c8:	2140      	movs	r1, #64	; 0x40
 80016ca:	480a      	ldr	r0, [pc, #40]	; (80016f4 <Error_Handler+0x30>)
 80016cc:	f001 ff5f 	bl	800358e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80016d0:	2064      	movs	r0, #100	; 0x64
 80016d2:	f000 fcad 	bl	8002030 <HAL_Delay>
		HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80016d6:	2180      	movs	r1, #128	; 0x80
 80016d8:	4806      	ldr	r0, [pc, #24]	; (80016f4 <Error_Handler+0x30>)
 80016da:	f001 ff58 	bl	800358e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80016de:	2064      	movs	r0, #100	; 0x64
 80016e0:	f000 fca6 	bl	8002030 <HAL_Delay>
		HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 80016e4:	2140      	movs	r1, #64	; 0x40
 80016e6:	4804      	ldr	r0, [pc, #16]	; (80016f8 <Error_Handler+0x34>)
 80016e8:	f001 ff51 	bl	800358e <HAL_GPIO_TogglePin>
		HAL_Delay(100);
 80016ec:	2064      	movs	r0, #100	; 0x64
 80016ee:	f000 fc9f 	bl	8002030 <HAL_Delay>
		HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80016f2:	e7e9      	b.n	80016c8 <Error_Handler+0x4>
 80016f4:	40021800 	.word	0x40021800
 80016f8:	40020800 	.word	0x40020800

080016fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_MspInit+0x44>)
 8001704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_MspInit+0x44>)
 8001708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170c:	6413      	str	r3, [r2, #64]	; 0x40
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_MspInit+0x44>)
 8001710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001716:	607b      	str	r3, [r7, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <HAL_MspInit+0x44>)
 800171c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171e:	4a08      	ldr	r2, [pc, #32]	; (8001740 <HAL_MspInit+0x44>)
 8001720:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001724:	6453      	str	r3, [r2, #68]	; 0x44
 8001726:	4b06      	ldr	r3, [pc, #24]	; (8001740 <HAL_MspInit+0x44>)
 8001728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40023800 	.word	0x40023800

08001744 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b08a      	sub	sp, #40	; 0x28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174c:	f107 0314 	add.w	r3, r7, #20
 8001750:	2200      	movs	r2, #0
 8001752:	601a      	str	r2, [r3, #0]
 8001754:	605a      	str	r2, [r3, #4]
 8001756:	609a      	str	r2, [r3, #8]
 8001758:	60da      	str	r2, [r3, #12]
 800175a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4a2d      	ldr	r2, [pc, #180]	; (8001818 <HAL_ADC_MspInit+0xd4>)
 8001762:	4293      	cmp	r3, r2
 8001764:	d153      	bne.n	800180e <HAL_ADC_MspInit+0xca>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001766:	4b2d      	ldr	r3, [pc, #180]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800176a:	4a2c      	ldr	r2, [pc, #176]	; (800181c <HAL_ADC_MspInit+0xd8>)
 800176c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001770:	6453      	str	r3, [r2, #68]	; 0x44
 8001772:	4b2a      	ldr	r3, [pc, #168]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001776:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800177a:	613b      	str	r3, [r7, #16]
 800177c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800177e:	4b27      	ldr	r3, [pc, #156]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a26      	ldr	r2, [pc, #152]	; (800181c <HAL_ADC_MspInit+0xd8>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b24      	ldr	r3, [pc, #144]	; (800181c <HAL_ADC_MspInit+0xd8>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    PA2     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2;
 8001796:	2305      	movs	r3, #5
 8001798:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800179a:	2303      	movs	r3, #3
 800179c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017a2:	f107 0314 	add.w	r3, r7, #20
 80017a6:	4619      	mov	r1, r3
 80017a8:	481d      	ldr	r0, [pc, #116]	; (8001820 <HAL_ADC_MspInit+0xdc>)
 80017aa:	f001 fd13 	bl	80031d4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80017ae:	4b1d      	ldr	r3, [pc, #116]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017b0:	4a1d      	ldr	r2, [pc, #116]	; (8001828 <HAL_ADC_MspInit+0xe4>)
 80017b2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80017ba:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80017c0:	4b18      	ldr	r3, [pc, #96]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80017c6:	4b17      	ldr	r3, [pc, #92]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017cc:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80017ce:	4b15      	ldr	r3, [pc, #84]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017d0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80017d4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80017d6:	4b13      	ldr	r3, [pc, #76]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017d8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80017dc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80017de:	4b11      	ldr	r3, [pc, #68]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80017e6:	4b0f      	ldr	r3, [pc, #60]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017ec:	4b0d      	ldr	r3, [pc, #52]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 80017f4:	f001 f976 	bl	8002ae4 <HAL_DMA_Init>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_ADC_MspInit+0xbe>
    {
      Error_Handler();
 80017fe:	f7ff ff61 	bl	80016c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a07      	ldr	r2, [pc, #28]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 8001806:	639a      	str	r2, [r3, #56]	; 0x38
 8001808:	4a06      	ldr	r2, [pc, #24]	; (8001824 <HAL_ADC_MspInit+0xe0>)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800180e:	bf00      	nop
 8001810:	3728      	adds	r7, #40	; 0x28
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop
 8001818:	40012000 	.word	0x40012000
 800181c:	40023800 	.word	0x40023800
 8001820:	40020000 	.word	0x40020000
 8001824:	20000360 	.word	0x20000360
 8001828:	40026410 	.word	0x40026410

0800182c <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0ac      	sub	sp, #176	; 0xb0
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001834:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001838:	2200      	movs	r2, #0
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	605a      	str	r2, [r3, #4]
 800183e:	609a      	str	r2, [r3, #8]
 8001840:	60da      	str	r2, [r3, #12]
 8001842:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	f107 0318 	add.w	r3, r7, #24
 8001848:	2284      	movs	r2, #132	; 0x84
 800184a:	2100      	movs	r1, #0
 800184c:	4618      	mov	r0, r3
 800184e:	f010 fd75 	bl	801233c <memset>
  if(hsd->Instance==SDMMC1)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a70      	ldr	r2, [pc, #448]	; (8001a18 <HAL_SD_MspInit+0x1ec>)
 8001858:	4293      	cmp	r3, r2
 800185a:	f040 80d8 	bne.w	8001a0e <HAL_SD_MspInit+0x1e2>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1|RCC_PERIPHCLK_CLK48;
 800185e:	f44f 0320 	mov.w	r3, #10485760	; 0xa00000
 8001862:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001864:	2300      	movs	r3, #0
 8001866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    PeriphClkInitStruct.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_CLK48;
 800186a:	2300      	movs	r3, #0
 800186c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001870:	f107 0318 	add.w	r3, r7, #24
 8001874:	4618      	mov	r0, r3
 8001876:	f005 fbbf 	bl	8006ff8 <HAL_RCCEx_PeriphCLKConfig>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <HAL_SD_MspInit+0x58>
    {
      Error_Handler();
 8001880:	f7ff ff20 	bl	80016c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8001884:	4b65      	ldr	r3, [pc, #404]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 8001886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001888:	4a64      	ldr	r2, [pc, #400]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 800188a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800188e:	6453      	str	r3, [r2, #68]	; 0x44
 8001890:	4b62      	ldr	r3, [pc, #392]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 8001892:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001898:	617b      	str	r3, [r7, #20]
 800189a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800189c:	4b5f      	ldr	r3, [pc, #380]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 800189e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a0:	4a5e      	ldr	r2, [pc, #376]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 80018a2:	f043 0304 	orr.w	r3, r3, #4
 80018a6:	6313      	str	r3, [r2, #48]	; 0x30
 80018a8:	4b5c      	ldr	r3, [pc, #368]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 80018aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	613b      	str	r3, [r7, #16]
 80018b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018b4:	4b59      	ldr	r3, [pc, #356]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 80018b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b8:	4a58      	ldr	r2, [pc, #352]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 80018ba:	f043 0308 	orr.w	r3, r3, #8
 80018be:	6313      	str	r3, [r2, #48]	; 0x30
 80018c0:	4b56      	ldr	r3, [pc, #344]	; (8001a1c <HAL_SD_MspInit+0x1f0>)
 80018c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c4:	f003 0308 	and.w	r3, r3, #8
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
    PC10     ------> SDMMC1_D2
    PD2     ------> SDMMC1_CMD
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
 80018cc:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80018d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d4:	2302      	movs	r3, #2
 80018d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018da:	2300      	movs	r3, #0
 80018dc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80018e6:	230c      	movs	r3, #12
 80018e8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018f0:	4619      	mov	r1, r3
 80018f2:	484b      	ldr	r0, [pc, #300]	; (8001a20 <HAL_SD_MspInit+0x1f4>)
 80018f4:	f001 fc6e 	bl	80031d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80018f8:	2304      	movs	r3, #4
 80018fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001910:	230c      	movs	r3, #12
 8001912:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001916:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800191a:	4619      	mov	r1, r3
 800191c:	4841      	ldr	r0, [pc, #260]	; (8001a24 <HAL_SD_MspInit+0x1f8>)
 800191e:	f001 fc59 	bl	80031d4 <HAL_GPIO_Init>

    /* SDMMC1 DMA Init */
    /* SDMMC1_RX Init */
    hdma_sdmmc1_rx.Instance = DMA2_Stream3;
 8001922:	4b41      	ldr	r3, [pc, #260]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001924:	4a41      	ldr	r2, [pc, #260]	; (8001a2c <HAL_SD_MspInit+0x200>)
 8001926:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_rx.Init.Channel = DMA_CHANNEL_4;
 8001928:	4b3f      	ldr	r3, [pc, #252]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 800192a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800192e:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001930:	4b3d      	ldr	r3, [pc, #244]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001936:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001938:	2200      	movs	r2, #0
 800193a:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800193c:	4b3a      	ldr	r3, [pc, #232]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 800193e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001942:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001944:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001946:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800194a:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800194c:	4b36      	ldr	r3, [pc, #216]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 800194e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001952:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_rx.Init.Mode = DMA_PFCTRL;
 8001954:	4b34      	ldr	r3, [pc, #208]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001956:	2220      	movs	r2, #32
 8001958:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800195a:	4b33      	ldr	r3, [pc, #204]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 800195c:	2200      	movs	r2, #0
 800195e:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001962:	2204      	movs	r2, #4
 8001964:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8001966:	4b30      	ldr	r3, [pc, #192]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001968:	2203      	movs	r2, #3
 800196a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_rx.Init.MemBurst = DMA_MBURST_INC4;
 800196c:	4b2e      	ldr	r3, [pc, #184]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 800196e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001972:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8001974:	4b2c      	ldr	r3, [pc, #176]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001976:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800197a:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_rx) != HAL_OK)
 800197c:	482a      	ldr	r0, [pc, #168]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 800197e:	f001 f8b1 	bl	8002ae4 <HAL_DMA_Init>
 8001982:	4603      	mov	r3, r0
 8001984:	2b00      	cmp	r3, #0
 8001986:	d001      	beq.n	800198c <HAL_SD_MspInit+0x160>
    {
      Error_Handler();
 8001988:	f7ff fe9c 	bl	80016c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc1_rx);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	4a26      	ldr	r2, [pc, #152]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001990:	641a      	str	r2, [r3, #64]	; 0x40
 8001992:	4a25      	ldr	r2, [pc, #148]	; (8001a28 <HAL_SD_MspInit+0x1fc>)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC1_TX Init */
    hdma_sdmmc1_tx.Instance = DMA2_Stream6;
 8001998:	4b25      	ldr	r3, [pc, #148]	; (8001a30 <HAL_SD_MspInit+0x204>)
 800199a:	4a26      	ldr	r2, [pc, #152]	; (8001a34 <HAL_SD_MspInit+0x208>)
 800199c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc1_tx.Init.Channel = DMA_CHANNEL_4;
 800199e:	4b24      	ldr	r3, [pc, #144]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019a4:	605a      	str	r2, [r3, #4]
    hdma_sdmmc1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	609a      	str	r2, [r3, #8]
    hdma_sdmmc1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019ae:	2200      	movs	r2, #0
 80019b0:	60da      	str	r2, [r3, #12]
    hdma_sdmmc1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80019b2:	4b1f      	ldr	r3, [pc, #124]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019b8:	611a      	str	r2, [r3, #16]
    hdma_sdmmc1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80019ba:	4b1d      	ldr	r3, [pc, #116]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019bc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80019c0:	615a      	str	r2, [r3, #20]
    hdma_sdmmc1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80019c2:	4b1b      	ldr	r3, [pc, #108]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019c4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80019c8:	619a      	str	r2, [r3, #24]
    hdma_sdmmc1_tx.Init.Mode = DMA_PFCTRL;
 80019ca:	4b19      	ldr	r3, [pc, #100]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019cc:	2220      	movs	r2, #32
 80019ce:	61da      	str	r2, [r3, #28]
    hdma_sdmmc1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80019d0:	4b17      	ldr	r3, [pc, #92]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	621a      	str	r2, [r3, #32]
    hdma_sdmmc1_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80019d6:	4b16      	ldr	r3, [pc, #88]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019d8:	2204      	movs	r2, #4
 80019da:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc1_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80019dc:	4b14      	ldr	r3, [pc, #80]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019de:	2203      	movs	r2, #3
 80019e0:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc1_tx.Init.MemBurst = DMA_MBURST_INC4;
 80019e2:	4b13      	ldr	r3, [pc, #76]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019e4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80019e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc1_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019ec:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80019f0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc1_tx) != HAL_OK)
 80019f2:	480f      	ldr	r0, [pc, #60]	; (8001a30 <HAL_SD_MspInit+0x204>)
 80019f4:	f001 f876 	bl	8002ae4 <HAL_DMA_Init>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <HAL_SD_MspInit+0x1d6>
    {
      Error_Handler();
 80019fe:	f7ff fe61 	bl	80016c4 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc1_tx);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a0a      	ldr	r2, [pc, #40]	; (8001a30 <HAL_SD_MspInit+0x204>)
 8001a06:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a08:	4a09      	ldr	r2, [pc, #36]	; (8001a30 <HAL_SD_MspInit+0x204>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	37b0      	adds	r7, #176	; 0xb0
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40012c00 	.word	0x40012c00
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020800 	.word	0x40020800
 8001a24:	40020c00 	.word	0x40020c00
 8001a28:	20000444 	.word	0x20000444
 8001a2c:	40026458 	.word	0x40026458
 8001a30:	200004a4 	.word	0x200004a4
 8001a34:	400264a0 	.word	0x400264a0

08001a38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a13      	ldr	r2, [pc, #76]	; (8001a94 <HAL_TIM_Base_MspInit+0x5c>)
 8001a46:	4293      	cmp	r3, r2
 8001a48:	d10c      	bne.n	8001a64 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a4a:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a4e:	4a12      	ldr	r2, [pc, #72]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a50:	f043 0301 	orr.w	r3, r3, #1
 8001a54:	6453      	str	r3, [r2, #68]	; 0x44
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5a:	f003 0301 	and.w	r3, r3, #1
 8001a5e:	60fb      	str	r3, [r7, #12]
 8001a60:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001a62:	e010      	b.n	8001a86 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM11)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a0c      	ldr	r2, [pc, #48]	; (8001a9c <HAL_TIM_Base_MspInit+0x64>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d10b      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001a6e:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a72:	4a09      	ldr	r2, [pc, #36]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a78:	6453      	str	r3, [r2, #68]	; 0x44
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_TIM_Base_MspInit+0x60>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40010000 	.word	0x40010000
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40014800 	.word	0x40014800

08001aa0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b088      	sub	sp, #32
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001aa8:	f107 030c 	add.w	r3, r7, #12
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]
 8001ab0:	605a      	str	r2, [r3, #4]
 8001ab2:	609a      	str	r2, [r3, #8]
 8001ab4:	60da      	str	r2, [r3, #12]
 8001ab6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM11)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a11      	ldr	r2, [pc, #68]	; (8001b04 <HAL_TIM_MspPostInit+0x64>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d11b      	bne.n	8001afa <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM11_MspPostInit 0 */

  /* USER CODE END TIM11_MspPostInit 0 */

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ac2:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <HAL_TIM_MspPostInit+0x68>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a10      	ldr	r2, [pc, #64]	; (8001b08 <HAL_TIM_MspPostInit+0x68>)
 8001ac8:	f043 0320 	orr.w	r3, r3, #32
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <HAL_TIM_MspPostInit+0x68>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0320 	and.w	r3, r3, #32
 8001ad6:	60bb      	str	r3, [r7, #8]
 8001ad8:	68bb      	ldr	r3, [r7, #8]
    /**TIM11 GPIO Configuration
    PF7     ------> TIM11_CH1
    */
    GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ade:	2302      	movs	r3, #2
 8001ae0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001aea:	2303      	movs	r3, #3
 8001aec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8001aee:	f107 030c 	add.w	r3, r7, #12
 8001af2:	4619      	mov	r1, r3
 8001af4:	4805      	ldr	r0, [pc, #20]	; (8001b0c <HAL_TIM_MspPostInit+0x6c>)
 8001af6:	f001 fb6d 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 8001afa:	bf00      	nop
 8001afc:	3720      	adds	r7, #32
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
 8001b02:	bf00      	nop
 8001b04:	40014800 	.word	0x40014800
 8001b08:	40023800 	.word	0x40023800
 8001b0c:	40021400 	.word	0x40021400

08001b10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b0aa      	sub	sp, #168	; 0xa8
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b18:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001b28:	f107 0310 	add.w	r3, r7, #16
 8001b2c:	2284      	movs	r2, #132	; 0x84
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f010 fc03 	bl	801233c <memset>
  if(huart->Instance==USART1)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	4a21      	ldr	r2, [pc, #132]	; (8001bc0 <HAL_UART_MspInit+0xb0>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d13a      	bne.n	8001bb6 <HAL_UART_MspInit+0xa6>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001b40:	2340      	movs	r3, #64	; 0x40
 8001b42:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001b44:	2300      	movs	r3, #0
 8001b46:	657b      	str	r3, [r7, #84]	; 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001b48:	f107 0310 	add.w	r3, r7, #16
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f005 fa53 	bl	8006ff8 <HAL_RCCEx_PeriphCLKConfig>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001b58:	f7ff fdb4 	bl	80016c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001b5c:	4b19      	ldr	r3, [pc, #100]	; (8001bc4 <HAL_UART_MspInit+0xb4>)
 8001b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b60:	4a18      	ldr	r2, [pc, #96]	; (8001bc4 <HAL_UART_MspInit+0xb4>)
 8001b62:	f043 0310 	orr.w	r3, r3, #16
 8001b66:	6453      	str	r3, [r2, #68]	; 0x44
 8001b68:	4b16      	ldr	r3, [pc, #88]	; (8001bc4 <HAL_UART_MspInit+0xb4>)
 8001b6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6c:	f003 0310 	and.w	r3, r3, #16
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b74:	4b13      	ldr	r3, [pc, #76]	; (8001bc4 <HAL_UART_MspInit+0xb4>)
 8001b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b78:	4a12      	ldr	r2, [pc, #72]	; (8001bc4 <HAL_UART_MspInit+0xb4>)
 8001b7a:	f043 0302 	orr.w	r3, r3, #2
 8001b7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b80:	4b10      	ldr	r3, [pc, #64]	; (8001bc4 <HAL_UART_MspInit+0xb4>)
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	f003 0302 	and.w	r3, r3, #2
 8001b88:	60bb      	str	r3, [r7, #8]
 8001b8a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB7     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = WIFI_UART_RX_Pin|WIFI_UART_TX_Pin;
 8001b8c:	23c0      	movs	r3, #192	; 0xc0
 8001b8e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b92:	2302      	movs	r3, #2
 8001b94:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ba4:	2307      	movs	r3, #7
 8001ba6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001baa:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001bae:	4619      	mov	r1, r3
 8001bb0:	4805      	ldr	r0, [pc, #20]	; (8001bc8 <HAL_UART_MspInit+0xb8>)
 8001bb2:	f001 fb0f 	bl	80031d4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001bb6:	bf00      	nop
 8001bb8:	37a8      	adds	r7, #168	; 0xa8
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40011000 	.word	0x40011000
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40020400 	.word	0x40020400

08001bcc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b086      	sub	sp, #24
 8001bd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001bd2:	1d3b      	adds	r3, r7, #4
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]
 8001bd8:	605a      	str	r2, [r3, #4]
 8001bda:	609a      	str	r2, [r3, #8]
 8001bdc:	60da      	str	r2, [r3, #12]
 8001bde:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001be0:	4b2b      	ldr	r3, [pc, #172]	; (8001c90 <HAL_FMC_MspInit+0xc4>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d14e      	bne.n	8001c86 <HAL_FMC_MspInit+0xba>
    return;
  }
  FMC_Initialized = 1;
 8001be8:	4b29      	ldr	r3, [pc, #164]	; (8001c90 <HAL_FMC_MspInit+0xc4>)
 8001bea:	2201      	movs	r2, #1
 8001bec:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001bee:	4b29      	ldr	r3, [pc, #164]	; (8001c94 <HAL_FMC_MspInit+0xc8>)
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	4a28      	ldr	r2, [pc, #160]	; (8001c94 <HAL_FMC_MspInit+0xc8>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6393      	str	r3, [r2, #56]	; 0x38
 8001bfa:	4b26      	ldr	r3, [pc, #152]	; (8001c94 <HAL_FMC_MspInit+0xc8>)
 8001bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bfe:	f003 0301 	and.w	r3, r3, #1
 8001c02:	603b      	str	r3, [r7, #0]
 8001c04:	683b      	ldr	r3, [r7, #0]
  PE7   ------> FMC_D4
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_4
 8001c06:	f64f 73bb 	movw	r3, #65467	; 0xffbb
 8001c0a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_8|GPIO_PIN_9
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c14:	2303      	movs	r3, #3
 8001c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c18:	230c      	movs	r3, #12
 8001c1a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c1c:	1d3b      	adds	r3, r7, #4
 8001c1e:	4619      	mov	r1, r3
 8001c20:	481d      	ldr	r0, [pc, #116]	; (8001c98 <HAL_FMC_MspInit+0xcc>)
 8001c22:	f001 fad7 	bl	80031d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_1
 8001c26:	f64f 73b3 	movw	r3, #65459	; 0xffb3
 8001c2a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13
                          |GPIO_PIN_12|GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c38:	230c      	movs	r3, #12
 8001c3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	4619      	mov	r1, r3
 8001c40:	4816      	ldr	r0, [pc, #88]	; (8001c9c <HAL_FMC_MspInit+0xd0>)
 8001c42:	f001 fac7 	bl	80031d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_3
 8001c46:	f24f 033f 	movw	r3, #61503	; 0xf03f
 8001c4a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_13|GPIO_PIN_12
                          |GPIO_PIN_15|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c58:	230c      	movs	r3, #12
 8001c5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001c5c:	1d3b      	adds	r3, r7, #4
 8001c5e:	4619      	mov	r1, r3
 8001c60:	480f      	ldr	r0, [pc, #60]	; (8001ca0 <HAL_FMC_MspInit+0xd4>)
 8001c62:	f001 fab7 	bl	80031d4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_3|GPIO_PIN_2
 8001c66:	233f      	movs	r3, #63	; 0x3f
 8001c68:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1|GPIO_PIN_0;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c72:	2303      	movs	r3, #3
 8001c74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001c76:	230c      	movs	r3, #12
 8001c78:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c7a:	1d3b      	adds	r3, r7, #4
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4809      	ldr	r0, [pc, #36]	; (8001ca4 <HAL_FMC_MspInit+0xd8>)
 8001c80:	f001 faa8 	bl	80031d4 <HAL_GPIO_Init>
 8001c84:	e000      	b.n	8001c88 <HAL_FMC_MspInit+0xbc>
    return;
 8001c86:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001c88:	3718      	adds	r7, #24
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	20000684 	.word	0x20000684
 8001c94:	40023800 	.word	0x40023800
 8001c98:	40021000 	.word	0x40021000
 8001c9c:	40020c00 	.word	0x40020c00
 8001ca0:	40021400 	.word	0x40021400
 8001ca4:	40021800 	.word	0x40021800

08001ca8 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001cb0:	f7ff ff8c 	bl	8001bcc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001cb4:	bf00      	nop
 8001cb6:	3708      	adds	r7, #8
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	bd80      	pop	{r7, pc}

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f972 	bl	8001ff0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <DMA2_Stream0_IRQHandler+0x10>)
 8001d16:	f000 fff3 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20000360 	.word	0x20000360

08001d24 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_rx);
 8001d28:	4802      	ldr	r0, [pc, #8]	; (8001d34 <DMA2_Stream3_IRQHandler+0x10>)
 8001d2a:	f000 ffe9 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001d2e:	bf00      	nop
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000444 	.word	0x20000444

08001d38 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001d3c:	4802      	ldr	r0, [pc, #8]	; (8001d48 <OTG_FS_IRQHandler+0x10>)
 8001d3e:	f001 feab 	bl	8003a98 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20002468 	.word	0x20002468

08001d4c <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc1_tx);
 8001d50:	4802      	ldr	r0, [pc, #8]	; (8001d5c <DMA2_Stream6_IRQHandler+0x10>)
 8001d52:	f000 ffd5 	bl	8002d00 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200004a4 	.word	0x200004a4

08001d60 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <OTG_HS_IRQHandler+0x10>)
 8001d66:	f003 faad 	bl	80052c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20001b84 	.word	0x20001b84

08001d74 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  return 1;
 8001d78:	2301      	movs	r3, #1
}
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <_kill>:

int _kill(int pid, int sig)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d8e:	f010 fa9b 	bl	80122c8 <__errno>
 8001d92:	4603      	mov	r3, r0
 8001d94:	2216      	movs	r2, #22
 8001d96:	601a      	str	r2, [r3, #0]
  return -1;
 8001d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <_exit>:

void _exit (int status)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b082      	sub	sp, #8
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001dac:	f04f 31ff 	mov.w	r1, #4294967295
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7ff ffe7 	bl	8001d84 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001db6:	e7fe      	b.n	8001db6 <_exit+0x12>

08001db8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	617b      	str	r3, [r7, #20]
 8001dc8:	e00a      	b.n	8001de0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001dca:	f3af 8000 	nop.w
 8001dce:	4601      	mov	r1, r0
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	60ba      	str	r2, [r7, #8]
 8001dd6:	b2ca      	uxtb	r2, r1
 8001dd8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	3301      	adds	r3, #1
 8001dde:	617b      	str	r3, [r7, #20]
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	429a      	cmp	r2, r3
 8001de6:	dbf0      	blt.n	8001dca <_read+0x12>
  }

  return len;
 8001de8:	687b      	ldr	r3, [r7, #4]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3718      	adds	r7, #24
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b086      	sub	sp, #24
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	60f8      	str	r0, [r7, #12]
 8001dfa:	60b9      	str	r1, [r7, #8]
 8001dfc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
 8001e02:	e009      	b.n	8001e18 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	60ba      	str	r2, [r7, #8]
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	3301      	adds	r3, #1
 8001e16:	617b      	str	r3, [r7, #20]
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	dbf1      	blt.n	8001e04 <_write+0x12>
  }
  return len;
 8001e20:	687b      	ldr	r3, [r7, #4]
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3718      	adds	r7, #24
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <_close>:

int _close(int file)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	b083      	sub	sp, #12
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001e32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e42:	b480      	push	{r7}
 8001e44:	b083      	sub	sp, #12
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e52:	605a      	str	r2, [r3, #4]
  return 0;
 8001e54:	2300      	movs	r3, #0
}
 8001e56:	4618      	mov	r0, r3
 8001e58:	370c      	adds	r7, #12
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e60:	4770      	bx	lr

08001e62 <_isatty>:

int _isatty(int file)
{
 8001e62:	b480      	push	{r7}
 8001e64:	b083      	sub	sp, #12
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001e6a:	2301      	movs	r3, #1
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr

08001e78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b085      	sub	sp, #20
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	60f8      	str	r0, [r7, #12]
 8001e80:	60b9      	str	r1, [r7, #8]
 8001e82:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001e84:	2300      	movs	r3, #0
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
	...

08001e94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b086      	sub	sp, #24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e9c:	4a14      	ldr	r2, [pc, #80]	; (8001ef0 <_sbrk+0x5c>)
 8001e9e:	4b15      	ldr	r3, [pc, #84]	; (8001ef4 <_sbrk+0x60>)
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ea8:	4b13      	ldr	r3, [pc, #76]	; (8001ef8 <_sbrk+0x64>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d102      	bne.n	8001eb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001eb0:	4b11      	ldr	r3, [pc, #68]	; (8001ef8 <_sbrk+0x64>)
 8001eb2:	4a12      	ldr	r2, [pc, #72]	; (8001efc <_sbrk+0x68>)
 8001eb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001eb6:	4b10      	ldr	r3, [pc, #64]	; (8001ef8 <_sbrk+0x64>)
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4413      	add	r3, r2
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	429a      	cmp	r2, r3
 8001ec2:	d207      	bcs.n	8001ed4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ec4:	f010 fa00 	bl	80122c8 <__errno>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	220c      	movs	r2, #12
 8001ecc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ece:	f04f 33ff 	mov.w	r3, #4294967295
 8001ed2:	e009      	b.n	8001ee8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <_sbrk+0x64>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eda:	4b07      	ldr	r3, [pc, #28]	; (8001ef8 <_sbrk+0x64>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a05      	ldr	r2, [pc, #20]	; (8001ef8 <_sbrk+0x64>)
 8001ee4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20050000 	.word	0x20050000
 8001ef4:	00000400 	.word	0x00000400
 8001ef8:	20000688 	.word	0x20000688
 8001efc:	20002780 	.word	0x20002780

08001f00 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f04:	4b06      	ldr	r3, [pc, #24]	; (8001f20 <SystemInit+0x20>)
 8001f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0a:	4a05      	ldr	r2, [pc, #20]	; (8001f20 <SystemInit+0x20>)
 8001f0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001f10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f14:	bf00      	nop
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop
 8001f20:	e000ed00 	.word	0xe000ed00

08001f24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f5c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f40:	4c0b      	ldr	r4, [pc, #44]	; (8001f70 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f4e:	f7ff ffd7 	bl	8001f00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f52:	f010 f9bf 	bl	80122d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f56:	f7fe ffe3 	bl	8000f20 <main>
  bx  lr    
 8001f5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	200002fc 	.word	0x200002fc
  ldr r2, =_sidata
 8001f68:	080151ec 	.word	0x080151ec
  ldr r2, =_sbss
 8001f6c:	200002fc 	.word	0x200002fc
  ldr r4, =_ebss
 8001f70:	2000277c 	.word	0x2000277c

08001f74 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC_IRQHandler>

08001f76 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f7a:	2003      	movs	r0, #3
 8001f7c:	f000 fd70 	bl	8002a60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f80:	200f      	movs	r0, #15
 8001f82:	f000 f805 	bl	8001f90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f86:	f7ff fbb9 	bl	80016fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f98:	4b12      	ldr	r3, [pc, #72]	; (8001fe4 <HAL_InitTick+0x54>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4b12      	ldr	r3, [pc, #72]	; (8001fe8 <HAL_InitTick+0x58>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	4619      	mov	r1, r3
 8001fa2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001fa6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f000 fd8b 	bl	8002aca <HAL_SYSTICK_Config>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d001      	beq.n	8001fbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e00e      	b.n	8001fdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2b0f      	cmp	r3, #15
 8001fc2:	d80a      	bhi.n	8001fda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001fcc:	f000 fd53 	bl	8002a76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <HAL_InitTick+0x5c>)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	e000      	b.n	8001fdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	20000008 	.word	0x20000008
 8001fec:	20000004 	.word	0x20000004

08001ff0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ff4:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_IncTick+0x20>)
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	461a      	mov	r2, r3
 8001ffa:	4b06      	ldr	r3, [pc, #24]	; (8002014 <HAL_IncTick+0x24>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4413      	add	r3, r2
 8002000:	4a04      	ldr	r2, [pc, #16]	; (8002014 <HAL_IncTick+0x24>)
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	20000008 	.word	0x20000008
 8002014:	2000068c 	.word	0x2000068c

08002018 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return uwTick;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_GetTick+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	2000068c 	.word	0x2000068c

08002030 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b084      	sub	sp, #16
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002038:	f7ff ffee 	bl	8002018 <HAL_GetTick>
 800203c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002048:	d005      	beq.n	8002056 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800204a:	4b0a      	ldr	r3, [pc, #40]	; (8002074 <HAL_Delay+0x44>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461a      	mov	r2, r3
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	4413      	add	r3, r2
 8002054:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002056:	bf00      	nop
 8002058:	f7ff ffde 	bl	8002018 <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	68fa      	ldr	r2, [r7, #12]
 8002064:	429a      	cmp	r2, r3
 8002066:	d8f7      	bhi.n	8002058 <HAL_Delay+0x28>
  {
  }
}
 8002068:	bf00      	nop
 800206a:	bf00      	nop
 800206c:	3710      	adds	r7, #16
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	20000008 	.word	0x20000008

08002078 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002080:	2300      	movs	r3, #0
 8002082:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d101      	bne.n	800208e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e031      	b.n	80020f2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	2b00      	cmp	r3, #0
 8002094:	d109      	bne.n	80020aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002096:	6878      	ldr	r0, [r7, #4]
 8002098:	f7ff fb54 	bl	8001744 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d116      	bne.n	80020e4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020ba:	4b10      	ldr	r3, [pc, #64]	; (80020fc <HAL_ADC_Init+0x84>)
 80020bc:	4013      	ands	r3, r2
 80020be:	f043 0202 	orr.w	r2, r3, #2
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fa7e 	bl	80025c8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f023 0303 	bic.w	r3, r3, #3
 80020da:	f043 0201 	orr.w	r2, r3, #1
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	641a      	str	r2, [r3, #64]	; 0x40
 80020e2:	e001      	b.n	80020e8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	ffffeefd 	.word	0xffffeefd

08002100 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_ADC_Start_DMA+0x1e>
 800211a:	2302      	movs	r3, #2
 800211c:	e0d4      	b.n	80022c8 <HAL_ADC_Start_DMA+0x1c8>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	2b01      	cmp	r3, #1
 8002132:	d018      	beq.n	8002166 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0201 	orr.w	r2, r2, #1
 8002142:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002144:	4b62      	ldr	r3, [pc, #392]	; (80022d0 <HAL_ADC_Start_DMA+0x1d0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a62      	ldr	r2, [pc, #392]	; (80022d4 <HAL_ADC_Start_DMA+0x1d4>)
 800214a:	fba2 2303 	umull	r2, r3, r2, r3
 800214e:	0c9a      	lsrs	r2, r3, #18
 8002150:	4613      	mov	r3, r2
 8002152:	005b      	lsls	r3, r3, #1
 8002154:	4413      	add	r3, r2
 8002156:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002158:	e002      	b.n	8002160 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	3b01      	subs	r3, #1
 800215e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f9      	bne.n	800215a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	689b      	ldr	r3, [r3, #8]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b01      	cmp	r3, #1
 8002172:	f040 809c 	bne.w	80022ae <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800217a:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_ADC_Start_DMA+0x1d8>)
 800217c:	4013      	ands	r3, r2
 800217e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002190:	2b00      	cmp	r3, #0
 8002192:	d007      	beq.n	80021a4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800219c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021b0:	d106      	bne.n	80021c0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b6:	f023 0206 	bic.w	r2, r3, #6
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	645a      	str	r2, [r3, #68]	; 0x44
 80021be:	e002      	b.n	80021c6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2200      	movs	r2, #0
 80021c4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	2200      	movs	r2, #0
 80021ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d2:	4a42      	ldr	r2, [pc, #264]	; (80022dc <HAL_ADC_Start_DMA+0x1dc>)
 80021d4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021da:	4a41      	ldr	r2, [pc, #260]	; (80022e0 <HAL_ADC_Start_DMA+0x1e0>)
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021e2:	4a40      	ldr	r2, [pc, #256]	; (80022e4 <HAL_ADC_Start_DMA+0x1e4>)
 80021e4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80021ee:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	685a      	ldr	r2, [r3, #4]
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80021fe:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800220e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	334c      	adds	r3, #76	; 0x4c
 800221a:	4619      	mov	r1, r3
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f000 fd0e 	bl	8002c40 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8002224:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_ADC_Start_DMA+0x1e8>)
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	2b00      	cmp	r3, #0
 800222e:	d10f      	bne.n	8002250 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800223a:	2b00      	cmp	r3, #0
 800223c:	d143      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	689a      	ldr	r2, [r3, #8]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	e03a      	b.n	80022c6 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a25      	ldr	r2, [pc, #148]	; (80022ec <HAL_ADC_Start_DMA+0x1ec>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10e      	bne.n	8002278 <HAL_ADC_Start_DMA+0x178>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d107      	bne.n	8002278 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	689a      	ldr	r2, [r3, #8]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002276:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <HAL_ADC_Start_DMA+0x1e8>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f003 0310 	and.w	r3, r3, #16
 8002280:	2b00      	cmp	r3, #0
 8002282:	d120      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	4a19      	ldr	r2, [pc, #100]	; (80022f0 <HAL_ADC_Start_DMA+0x1f0>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d11b      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x1c6>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002298:	2b00      	cmp	r3, #0
 800229a:	d114      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	689a      	ldr	r2, [r3, #8]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022aa:	609a      	str	r2, [r3, #8]
 80022ac:	e00b      	b.n	80022c6 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	f043 0210 	orr.w	r2, r3, #16
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022be:	f043 0201 	orr.w	r2, r3, #1
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80022c6:	2300      	movs	r3, #0
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3718      	adds	r7, #24
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}
 80022d0:	20000000 	.word	0x20000000
 80022d4:	431bde83 	.word	0x431bde83
 80022d8:	fffff8fe 	.word	0xfffff8fe
 80022dc:	080027bd 	.word	0x080027bd
 80022e0:	08002877 	.word	0x08002877
 80022e4:	08002893 	.word	0x08002893
 80022e8:	40012300 	.word	0x40012300
 80022ec:	40012000 	.word	0x40012000
 80022f0:	40012200 	.word	0x40012200

080022f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80022fc:	bf00      	nop
 80022fe:	370c      	adds	r7, #12
 8002300:	46bd      	mov	sp, r7
 8002302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002306:	4770      	bx	lr

08002308 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002310:	bf00      	nop
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800231c:	b480      	push	{r7}
 800231e:	b085      	sub	sp, #20
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8002326:	2300      	movs	r3, #0
 8002328:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d101      	bne.n	8002338 <HAL_ADC_ConfigChannel+0x1c>
 8002334:	2302      	movs	r3, #2
 8002336:	e136      	b.n	80025a6 <HAL_ADC_ConfigChannel+0x28a>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b09      	cmp	r3, #9
 8002346:	d93a      	bls.n	80023be <HAL_ADC_ConfigChannel+0xa2>
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002350:	d035      	beq.n	80023be <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	68d9      	ldr	r1, [r3, #12]
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	b29b      	uxth	r3, r3
 800235e:	461a      	mov	r2, r3
 8002360:	4613      	mov	r3, r2
 8002362:	005b      	lsls	r3, r3, #1
 8002364:	4413      	add	r3, r2
 8002366:	3b1e      	subs	r3, #30
 8002368:	2207      	movs	r2, #7
 800236a:	fa02 f303 	lsl.w	r3, r2, r3
 800236e:	43da      	mvns	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	400a      	ands	r2, r1
 8002376:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a8d      	ldr	r2, [pc, #564]	; (80025b4 <HAL_ADC_ConfigChannel+0x298>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10a      	bne.n	8002398 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68d9      	ldr	r1, [r3, #12]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	061a      	lsls	r2, r3, #24
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	430a      	orrs	r2, r1
 8002394:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002396:	e035      	b.n	8002404 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68d9      	ldr	r1, [r3, #12]
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	689a      	ldr	r2, [r3, #8]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	4618      	mov	r0, r3
 80023aa:	4603      	mov	r3, r0
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4403      	add	r3, r0
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	409a      	lsls	r2, r3
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023bc:	e022      	b.n	8002404 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	6919      	ldr	r1, [r3, #16]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	461a      	mov	r2, r3
 80023cc:	4613      	mov	r3, r2
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	4413      	add	r3, r2
 80023d2:	2207      	movs	r2, #7
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43da      	mvns	r2, r3
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	400a      	ands	r2, r1
 80023e0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	6919      	ldr	r1, [r3, #16]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	689a      	ldr	r2, [r3, #8]
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	b29b      	uxth	r3, r3
 80023f2:	4618      	mov	r0, r3
 80023f4:	4603      	mov	r3, r0
 80023f6:	005b      	lsls	r3, r3, #1
 80023f8:	4403      	add	r3, r0
 80023fa:	409a      	lsls	r2, r3
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	430a      	orrs	r2, r1
 8002402:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	2b06      	cmp	r3, #6
 800240a:	d824      	bhi.n	8002456 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	4413      	add	r3, r2
 800241c:	3b05      	subs	r3, #5
 800241e:	221f      	movs	r2, #31
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43da      	mvns	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	400a      	ands	r2, r1
 800242c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	b29b      	uxth	r3, r3
 800243a:	4618      	mov	r0, r3
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b05      	subs	r3, #5
 8002448:	fa00 f203 	lsl.w	r2, r0, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	430a      	orrs	r2, r1
 8002452:	635a      	str	r2, [r3, #52]	; 0x34
 8002454:	e04c      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	2b0c      	cmp	r3, #12
 800245c:	d824      	bhi.n	80024a8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	4613      	mov	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	4413      	add	r3, r2
 800246e:	3b23      	subs	r3, #35	; 0x23
 8002470:	221f      	movs	r2, #31
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	b29b      	uxth	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b23      	subs	r3, #35	; 0x23
 800249a:	fa00 f203 	lsl.w	r2, r0, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	430a      	orrs	r2, r1
 80024a4:	631a      	str	r2, [r3, #48]	; 0x30
 80024a6:	e023      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	3b41      	subs	r3, #65	; 0x41
 80024ba:	221f      	movs	r2, #31
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	43da      	mvns	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	400a      	ands	r2, r1
 80024c8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	b29b      	uxth	r3, r3
 80024d6:	4618      	mov	r0, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b41      	subs	r3, #65	; 0x41
 80024e4:	fa00 f203 	lsl.w	r2, r0, r3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	430a      	orrs	r2, r1
 80024ee:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a30      	ldr	r2, [pc, #192]	; (80025b8 <HAL_ADC_ConfigChannel+0x29c>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d10a      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1f4>
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002502:	d105      	bne.n	8002510 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8002504:	4b2d      	ldr	r3, [pc, #180]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	4a2c      	ldr	r2, [pc, #176]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 800250a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800250e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a28      	ldr	r2, [pc, #160]	; (80025b8 <HAL_ADC_ConfigChannel+0x29c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10f      	bne.n	800253a <HAL_ADC_ConfigChannel+0x21e>
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	2b12      	cmp	r3, #18
 8002520:	d10b      	bne.n	800253a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8002522:	4b26      	ldr	r3, [pc, #152]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4a25      	ldr	r2, [pc, #148]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002528:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800252c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800252e:	4b23      	ldr	r3, [pc, #140]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4a22      	ldr	r2, [pc, #136]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002534:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002538:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a1e      	ldr	r2, [pc, #120]	; (80025b8 <HAL_ADC_ConfigChannel+0x29c>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d12b      	bne.n	800259c <HAL_ADC_ConfigChannel+0x280>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a1a      	ldr	r2, [pc, #104]	; (80025b4 <HAL_ADC_ConfigChannel+0x298>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d003      	beq.n	8002556 <HAL_ADC_ConfigChannel+0x23a>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	2b11      	cmp	r3, #17
 8002554:	d122      	bne.n	800259c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8002556:	4b19      	ldr	r3, [pc, #100]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	4a18      	ldr	r2, [pc, #96]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 800255c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002560:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8002562:	4b16      	ldr	r3, [pc, #88]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	4a15      	ldr	r2, [pc, #84]	; (80025bc <HAL_ADC_ConfigChannel+0x2a0>)
 8002568:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800256c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a10      	ldr	r2, [pc, #64]	; (80025b4 <HAL_ADC_ConfigChannel+0x298>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d111      	bne.n	800259c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002578:	4b11      	ldr	r3, [pc, #68]	; (80025c0 <HAL_ADC_ConfigChannel+0x2a4>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a11      	ldr	r2, [pc, #68]	; (80025c4 <HAL_ADC_ConfigChannel+0x2a8>)
 800257e:	fba2 2303 	umull	r2, r3, r2, r3
 8002582:	0c9a      	lsrs	r2, r3, #18
 8002584:	4613      	mov	r3, r2
 8002586:	009b      	lsls	r3, r3, #2
 8002588:	4413      	add	r3, r2
 800258a:	005b      	lsls	r3, r3, #1
 800258c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800258e:	e002      	b.n	8002596 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	3b01      	subs	r3, #1
 8002594:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1f9      	bne.n	8002590 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025a4:	2300      	movs	r3, #0
}
 80025a6:	4618      	mov	r0, r3
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	10000012 	.word	0x10000012
 80025b8:	40012000 	.word	0x40012000
 80025bc:	40012300 	.word	0x40012300
 80025c0:	20000000 	.word	0x20000000
 80025c4:	431bde83 	.word	0x431bde83

080025c8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80025d0:	4b78      	ldr	r3, [pc, #480]	; (80027b4 <ADC_Init+0x1ec>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	4a77      	ldr	r2, [pc, #476]	; (80027b4 <ADC_Init+0x1ec>)
 80025d6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80025da:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80025dc:	4b75      	ldr	r3, [pc, #468]	; (80027b4 <ADC_Init+0x1ec>)
 80025de:	685a      	ldr	r2, [r3, #4]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	4973      	ldr	r1, [pc, #460]	; (80027b4 <ADC_Init+0x1ec>)
 80025e6:	4313      	orrs	r3, r2
 80025e8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025f8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	6859      	ldr	r1, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	021a      	lsls	r2, r3, #8
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	430a      	orrs	r2, r1
 800260c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	685a      	ldr	r2, [r3, #4]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800261c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6859      	ldr	r1, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	689a      	ldr	r2, [r3, #8]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	430a      	orrs	r2, r1
 800262e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	689a      	ldr	r2, [r3, #8]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800263e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	6899      	ldr	r1, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	430a      	orrs	r2, r1
 8002650:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002656:	4a58      	ldr	r2, [pc, #352]	; (80027b8 <ADC_Init+0x1f0>)
 8002658:	4293      	cmp	r3, r2
 800265a:	d022      	beq.n	80026a2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	689a      	ldr	r2, [r3, #8]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800266a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	6899      	ldr	r1, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	430a      	orrs	r2, r1
 800267c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800268c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	6899      	ldr	r1, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	430a      	orrs	r2, r1
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	e00f      	b.n	80026c2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026c0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 0202 	bic.w	r2, r2, #2
 80026d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	6899      	ldr	r1, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	005a      	lsls	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01b      	beq.n	8002728 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	685a      	ldr	r2, [r3, #4]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026fe:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800270e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271a:	3b01      	subs	r3, #1
 800271c:	035a      	lsls	r2, r3, #13
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	430a      	orrs	r2, r1
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	e007      	b.n	8002738 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	685a      	ldr	r2, [r3, #4]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002736:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002746:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	69db      	ldr	r3, [r3, #28]
 8002752:	3b01      	subs	r3, #1
 8002754:	051a      	lsls	r2, r3, #20
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	689a      	ldr	r2, [r3, #8]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800276c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	6899      	ldr	r1, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800277a:	025a      	lsls	r2, r3, #9
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	430a      	orrs	r2, r1
 8002782:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	689a      	ldr	r2, [r3, #8]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002792:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	6899      	ldr	r1, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	029a      	lsls	r2, r3, #10
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	430a      	orrs	r2, r1
 80027a6:	609a      	str	r2, [r3, #8]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	40012300 	.word	0x40012300
 80027b8:	0f000001 	.word	0x0f000001

080027bc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027c8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d13c      	bne.n	8002850 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d12b      	bne.n	8002848 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d127      	bne.n	8002848 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002802:	2b00      	cmp	r3, #0
 8002804:	d006      	beq.n	8002814 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002810:	2b00      	cmp	r3, #0
 8002812:	d119      	bne.n	8002848 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f022 0220 	bic.w	r2, r2, #32
 8002822:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d105      	bne.n	8002848 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002840:	f043 0201 	orr.w	r2, r3, #1
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f7fe fb4f 	bl	8000eec <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800284e:	e00e      	b.n	800286e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	f003 0310 	and.w	r3, r3, #16
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f7ff fd53 	bl	8002308 <HAL_ADC_ErrorCallback>
}
 8002862:	e004      	b.n	800286e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	4798      	blx	r3
}
 800286e:	bf00      	nop
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}

08002876 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002882:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002884:	68f8      	ldr	r0, [r7, #12]
 8002886:	f7ff fd35 	bl	80022f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800288a:	bf00      	nop
 800288c:	3710      	adds	r7, #16
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b084      	sub	sp, #16
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800289e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2240      	movs	r2, #64	; 0x40
 80028a4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028aa:	f043 0204 	orr.w	r2, r3, #4
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028b2:	68f8      	ldr	r0, [r7, #12]
 80028b4:	f7ff fd28 	bl	8002308 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028b8:	bf00      	nop
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028d0:	4b0b      	ldr	r3, [pc, #44]	; (8002900 <__NVIC_SetPriorityGrouping+0x40>)
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028d6:	68ba      	ldr	r2, [r7, #8]
 80028d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <__NVIC_SetPriorityGrouping+0x44>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028ee:	4a04      	ldr	r2, [pc, #16]	; (8002900 <__NVIC_SetPriorityGrouping+0x40>)
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	60d3      	str	r3, [r2, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	e000ed00 	.word	0xe000ed00
 8002904:	05fa0000 	.word	0x05fa0000

08002908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800290c:	4b04      	ldr	r3, [pc, #16]	; (8002920 <__NVIC_GetPriorityGrouping+0x18>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	0a1b      	lsrs	r3, r3, #8
 8002912:	f003 0307 	and.w	r3, r3, #7
}
 8002916:	4618      	mov	r0, r3
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr
 8002920:	e000ed00 	.word	0xe000ed00

08002924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800292e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002932:	2b00      	cmp	r3, #0
 8002934:	db0b      	blt.n	800294e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002936:	79fb      	ldrb	r3, [r7, #7]
 8002938:	f003 021f 	and.w	r2, r3, #31
 800293c:	4907      	ldr	r1, [pc, #28]	; (800295c <__NVIC_EnableIRQ+0x38>)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	2001      	movs	r0, #1
 8002946:	fa00 f202 	lsl.w	r2, r0, r2
 800294a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	e000e100 	.word	0xe000e100

08002960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	4603      	mov	r3, r0
 8002968:	6039      	str	r1, [r7, #0]
 800296a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800296c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002970:	2b00      	cmp	r3, #0
 8002972:	db0a      	blt.n	800298a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	b2da      	uxtb	r2, r3
 8002978:	490c      	ldr	r1, [pc, #48]	; (80029ac <__NVIC_SetPriority+0x4c>)
 800297a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297e:	0112      	lsls	r2, r2, #4
 8002980:	b2d2      	uxtb	r2, r2
 8002982:	440b      	add	r3, r1
 8002984:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002988:	e00a      	b.n	80029a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4908      	ldr	r1, [pc, #32]	; (80029b0 <__NVIC_SetPriority+0x50>)
 8002990:	79fb      	ldrb	r3, [r7, #7]
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	3b04      	subs	r3, #4
 8002998:	0112      	lsls	r2, r2, #4
 800299a:	b2d2      	uxtb	r2, r2
 800299c:	440b      	add	r3, r1
 800299e:	761a      	strb	r2, [r3, #24]
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	e000e100 	.word	0xe000e100
 80029b0:	e000ed00 	.word	0xe000ed00

080029b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b089      	sub	sp, #36	; 0x24
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f003 0307 	and.w	r3, r3, #7
 80029c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029c8:	69fb      	ldr	r3, [r7, #28]
 80029ca:	f1c3 0307 	rsb	r3, r3, #7
 80029ce:	2b04      	cmp	r3, #4
 80029d0:	bf28      	it	cs
 80029d2:	2304      	movcs	r3, #4
 80029d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	3304      	adds	r3, #4
 80029da:	2b06      	cmp	r3, #6
 80029dc:	d902      	bls.n	80029e4 <NVIC_EncodePriority+0x30>
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3b03      	subs	r3, #3
 80029e2:	e000      	b.n	80029e6 <NVIC_EncodePriority+0x32>
 80029e4:	2300      	movs	r3, #0
 80029e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029e8:	f04f 32ff 	mov.w	r2, #4294967295
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43da      	mvns	r2, r3
 80029f4:	68bb      	ldr	r3, [r7, #8]
 80029f6:	401a      	ands	r2, r3
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029fc:	f04f 31ff 	mov.w	r1, #4294967295
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	fa01 f303 	lsl.w	r3, r1, r3
 8002a06:	43d9      	mvns	r1, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a0c:	4313      	orrs	r3, r2
         );
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3724      	adds	r7, #36	; 0x24
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b082      	sub	sp, #8
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	3b01      	subs	r3, #1
 8002a28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a2c:	d301      	bcc.n	8002a32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e00f      	b.n	8002a52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a32:	4a0a      	ldr	r2, [pc, #40]	; (8002a5c <SysTick_Config+0x40>)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a40:	f7ff ff8e 	bl	8002960 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <SysTick_Config+0x40>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a4a:	4b04      	ldr	r3, [pc, #16]	; (8002a5c <SysTick_Config+0x40>)
 8002a4c:	2207      	movs	r2, #7
 8002a4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
 8002a5a:	bf00      	nop
 8002a5c:	e000e010 	.word	0xe000e010

08002a60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff ff29 	bl	80028c0 <__NVIC_SetPriorityGrouping>
}
 8002a6e:	bf00      	nop
 8002a70:	3708      	adds	r7, #8
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}

08002a76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a76:	b580      	push	{r7, lr}
 8002a78:	b086      	sub	sp, #24
 8002a7a:	af00      	add	r7, sp, #0
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	60b9      	str	r1, [r7, #8]
 8002a80:	607a      	str	r2, [r7, #4]
 8002a82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002a84:	2300      	movs	r3, #0
 8002a86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a88:	f7ff ff3e 	bl	8002908 <__NVIC_GetPriorityGrouping>
 8002a8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6978      	ldr	r0, [r7, #20]
 8002a94:	f7ff ff8e 	bl	80029b4 <NVIC_EncodePriority>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ff5d 	bl	8002960 <__NVIC_SetPriority>
}
 8002aa6:	bf00      	nop
 8002aa8:	3718      	adds	r7, #24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bd80      	pop	{r7, pc}

08002aae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aae:	b580      	push	{r7, lr}
 8002ab0:	b082      	sub	sp, #8
 8002ab2:	af00      	add	r7, sp, #0
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ab8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff31 	bl	8002924 <__NVIC_EnableIRQ>
}
 8002ac2:	bf00      	nop
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}

08002aca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002aca:	b580      	push	{r7, lr}
 8002acc:	b082      	sub	sp, #8
 8002ace:	af00      	add	r7, sp, #0
 8002ad0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff ffa2 	bl	8002a1c <SysTick_Config>
 8002ad8:	4603      	mov	r3, r0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}
	...

08002ae4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b086      	sub	sp, #24
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002aec:	2300      	movs	r3, #0
 8002aee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002af0:	f7ff fa92 	bl	8002018 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d101      	bne.n	8002b00 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002afc:	2301      	movs	r3, #1
 8002afe:	e099      	b.n	8002c34 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2202      	movs	r2, #2
 8002b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f022 0201 	bic.w	r2, r2, #1
 8002b1e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b20:	e00f      	b.n	8002b42 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b22:	f7ff fa79 	bl	8002018 <HAL_GetTick>
 8002b26:	4602      	mov	r2, r0
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	2b05      	cmp	r3, #5
 8002b2e:	d908      	bls.n	8002b42 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2220      	movs	r2, #32
 8002b34:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2203      	movs	r2, #3
 8002b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e078      	b.n	8002c34 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0301 	and.w	r3, r3, #1
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d1e8      	bne.n	8002b22 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	4b38      	ldr	r3, [pc, #224]	; (8002c3c <HAL_DMA_Init+0x158>)
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	685a      	ldr	r2, [r3, #4]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	689b      	ldr	r3, [r3, #8]
 8002b68:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b6e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	691b      	ldr	r3, [r3, #16]
 8002b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699b      	ldr	r3, [r3, #24]
 8002b80:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b86:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a1b      	ldr	r3, [r3, #32]
 8002b8c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b8e:	697a      	ldr	r2, [r7, #20]
 8002b90:	4313      	orrs	r3, r2
 8002b92:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b98:	2b04      	cmp	r3, #4
 8002b9a:	d107      	bne.n	8002bac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	697a      	ldr	r2, [r7, #20]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	f023 0307 	bic.w	r3, r3, #7
 8002bc2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd2:	2b04      	cmp	r3, #4
 8002bd4:	d117      	bne.n	8002c06 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00e      	beq.n	8002c06 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fa77 	bl	80030dc <DMA_CheckFifoParam>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d008      	beq.n	8002c06 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2240      	movs	r2, #64	; 0x40
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c02:	2301      	movs	r3, #1
 8002c04:	e016      	b.n	8002c34 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 fa2e 	bl	8003070 <DMA_CalcBaseAndBitshift>
 8002c14:	4603      	mov	r3, r0
 8002c16:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c1c:	223f      	movs	r2, #63	; 0x3f
 8002c1e:	409a      	lsls	r2, r3
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2200      	movs	r2, #0
 8002c28:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	f010803f 	.word	0xf010803f

08002c40 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b086      	sub	sp, #24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
 8002c4c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c56:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d101      	bne.n	8002c66 <HAL_DMA_Start_IT+0x26>
 8002c62:	2302      	movs	r3, #2
 8002c64:	e048      	b.n	8002cf8 <HAL_DMA_Start_IT+0xb8>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d137      	bne.n	8002cea <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	2200      	movs	r2, #0
 8002c86:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	68b9      	ldr	r1, [r7, #8]
 8002c8e:	68f8      	ldr	r0, [r7, #12]
 8002c90:	f000 f9c0 	bl	8003014 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c98:	223f      	movs	r2, #63	; 0x3f
 8002c9a:	409a      	lsls	r2, r3
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f042 0216 	orr.w	r2, r2, #22
 8002cae:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	695a      	ldr	r2, [r3, #20]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cbe:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e005      	b.n	8002cf6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002d0c:	4b8e      	ldr	r3, [pc, #568]	; (8002f48 <HAL_DMA_IRQHandler+0x248>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a8e      	ldr	r2, [pc, #568]	; (8002f4c <HAL_DMA_IRQHandler+0x24c>)
 8002d12:	fba2 2303 	umull	r2, r3, r2, r3
 8002d16:	0a9b      	lsrs	r3, r3, #10
 8002d18:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d1e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d2a:	2208      	movs	r2, #8
 8002d2c:	409a      	lsls	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d01a      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0304 	and.w	r3, r3, #4
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0204 	bic.w	r2, r2, #4
 8002d52:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d58:	2208      	movs	r2, #8
 8002d5a:	409a      	lsls	r2, r3
 8002d5c:	693b      	ldr	r3, [r7, #16]
 8002d5e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d64:	f043 0201 	orr.w	r2, r3, #1
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d70:	2201      	movs	r2, #1
 8002d72:	409a      	lsls	r2, r3
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d012      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	695b      	ldr	r3, [r3, #20]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d00b      	beq.n	8002da2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d8e:	2201      	movs	r2, #1
 8002d90:	409a      	lsls	r2, r3
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	f043 0202 	orr.w	r2, r3, #2
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002da6:	2204      	movs	r2, #4
 8002da8:	409a      	lsls	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4013      	ands	r3, r2
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d012      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d00b      	beq.n	8002dd8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	409a      	lsls	r2, r3
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd0:	f043 0204 	orr.w	r2, r3, #4
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ddc:	2210      	movs	r2, #16
 8002dde:	409a      	lsls	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	4013      	ands	r3, r2
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d043      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f003 0308 	and.w	r3, r3, #8
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d03c      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dfa:	2210      	movs	r2, #16
 8002dfc:	409a      	lsls	r2, r3
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d018      	beq.n	8002e42 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d108      	bne.n	8002e30 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d024      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	4798      	blx	r3
 8002e2e:	e01f      	b.n	8002e70 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d01b      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4798      	blx	r3
 8002e40:	e016      	b.n	8002e70 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d107      	bne.n	8002e60 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f022 0208 	bic.w	r2, r2, #8
 8002e5e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e74:	2220      	movs	r2, #32
 8002e76:	409a      	lsls	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	f000 808f 	beq.w	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0310 	and.w	r3, r3, #16
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	f000 8087 	beq.w	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e96:	2220      	movs	r2, #32
 8002e98:	409a      	lsls	r2, r3
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	2b05      	cmp	r3, #5
 8002ea8:	d136      	bne.n	8002f18 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0216 	bic.w	r2, r2, #22
 8002eb8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002ec8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <HAL_DMA_IRQHandler+0x1da>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0208 	bic.w	r2, r2, #8
 8002ee8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eee:	223f      	movs	r2, #63	; 0x3f
 8002ef0:	409a      	lsls	r2, r3
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2201      	movs	r2, #1
 8002efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d07e      	beq.n	800300c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	4798      	blx	r3
        }
        return;
 8002f16:	e079      	b.n	800300c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01d      	beq.n	8002f62 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d10d      	bne.n	8002f50 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d031      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	4798      	blx	r3
 8002f44:	e02c      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
 8002f46:	bf00      	nop
 8002f48:	20000000 	.word	0x20000000
 8002f4c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d023      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f5c:	6878      	ldr	r0, [r7, #4]
 8002f5e:	4798      	blx	r3
 8002f60:	e01e      	b.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10f      	bne.n	8002f90 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f022 0210 	bic.w	r2, r2, #16
 8002f7e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d003      	beq.n	8002fa0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d032      	beq.n	800300e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	f003 0301 	and.w	r3, r3, #1
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d022      	beq.n	8002ffa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2205      	movs	r2, #5
 8002fb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f022 0201 	bic.w	r2, r2, #1
 8002fca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	3301      	adds	r3, #1
 8002fd0:	60bb      	str	r3, [r7, #8]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d307      	bcc.n	8002fe8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d1f2      	bne.n	8002fcc <HAL_DMA_IRQHandler+0x2cc>
 8002fe6:	e000      	b.n	8002fea <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002fe8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d005      	beq.n	800300e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003006:	6878      	ldr	r0, [r7, #4]
 8003008:	4798      	blx	r3
 800300a:	e000      	b.n	800300e <HAL_DMA_IRQHandler+0x30e>
        return;
 800300c:	bf00      	nop
    }
  }
}
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003014:	b480      	push	{r7}
 8003016:	b085      	sub	sp, #20
 8003018:	af00      	add	r7, sp, #0
 800301a:	60f8      	str	r0, [r7, #12]
 800301c:	60b9      	str	r1, [r7, #8]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003030:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b40      	cmp	r3, #64	; 0x40
 8003040:	d108      	bne.n	8003054 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	687a      	ldr	r2, [r7, #4]
 8003048:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68ba      	ldr	r2, [r7, #8]
 8003050:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003052:	e007      	b.n	8003064 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	60da      	str	r2, [r3, #12]
}
 8003064:	bf00      	nop
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr

08003070 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	b2db      	uxtb	r3, r3
 800307e:	3b10      	subs	r3, #16
 8003080:	4a13      	ldr	r2, [pc, #76]	; (80030d0 <DMA_CalcBaseAndBitshift+0x60>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800308a:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <DMA_CalcBaseAndBitshift+0x64>)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	4413      	add	r3, r2
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2b03      	cmp	r3, #3
 800309c:	d908      	bls.n	80030b0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	461a      	mov	r2, r3
 80030a4:	4b0c      	ldr	r3, [pc, #48]	; (80030d8 <DMA_CalcBaseAndBitshift+0x68>)
 80030a6:	4013      	ands	r3, r2
 80030a8:	1d1a      	adds	r2, r3, #4
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	659a      	str	r2, [r3, #88]	; 0x58
 80030ae:	e006      	b.n	80030be <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	461a      	mov	r2, r3
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <DMA_CalcBaseAndBitshift+0x68>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80030c2:	4618      	mov	r0, r3
 80030c4:	3714      	adds	r7, #20
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	aaaaaaab 	.word	0xaaaaaaab
 80030d4:	08014de4 	.word	0x08014de4
 80030d8:	fffffc00 	.word	0xfffffc00

080030dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030e4:	2300      	movs	r3, #0
 80030e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d11f      	bne.n	8003136 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	2b03      	cmp	r3, #3
 80030fa:	d856      	bhi.n	80031aa <DMA_CheckFifoParam+0xce>
 80030fc:	a201      	add	r2, pc, #4	; (adr r2, 8003104 <DMA_CheckFifoParam+0x28>)
 80030fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003102:	bf00      	nop
 8003104:	08003115 	.word	0x08003115
 8003108:	08003127 	.word	0x08003127
 800310c:	08003115 	.word	0x08003115
 8003110:	080031ab 	.word	0x080031ab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003118:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d046      	beq.n	80031ae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003124:	e043      	b.n	80031ae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800312a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800312e:	d140      	bne.n	80031b2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003130:	2301      	movs	r3, #1
 8003132:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003134:	e03d      	b.n	80031b2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	699b      	ldr	r3, [r3, #24]
 800313a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800313e:	d121      	bne.n	8003184 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	2b03      	cmp	r3, #3
 8003144:	d837      	bhi.n	80031b6 <DMA_CheckFifoParam+0xda>
 8003146:	a201      	add	r2, pc, #4	; (adr r2, 800314c <DMA_CheckFifoParam+0x70>)
 8003148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800314c:	0800315d 	.word	0x0800315d
 8003150:	08003163 	.word	0x08003163
 8003154:	0800315d 	.word	0x0800315d
 8003158:	08003175 	.word	0x08003175
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      break;
 8003160:	e030      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003166:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d025      	beq.n	80031ba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800316e:	2301      	movs	r3, #1
 8003170:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003172:	e022      	b.n	80031ba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003178:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800317c:	d11f      	bne.n	80031be <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003182:	e01c      	b.n	80031be <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	2b02      	cmp	r3, #2
 8003188:	d903      	bls.n	8003192 <DMA_CheckFifoParam+0xb6>
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	2b03      	cmp	r3, #3
 800318e:	d003      	beq.n	8003198 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003190:	e018      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	73fb      	strb	r3, [r7, #15]
      break;
 8003196:	e015      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800319c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00e      	beq.n	80031c2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
      break;
 80031a8:	e00b      	b.n	80031c2 <DMA_CheckFifoParam+0xe6>
      break;
 80031aa:	bf00      	nop
 80031ac:	e00a      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031ae:	bf00      	nop
 80031b0:	e008      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031b2:	bf00      	nop
 80031b4:	e006      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031b6:	bf00      	nop
 80031b8:	e004      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031ba:	bf00      	nop
 80031bc:	e002      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;   
 80031be:	bf00      	nop
 80031c0:	e000      	b.n	80031c4 <DMA_CheckFifoParam+0xe8>
      break;
 80031c2:	bf00      	nop
    }
  } 
  
  return status; 
 80031c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr
 80031d2:	bf00      	nop

080031d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80031de:	2300      	movs	r3, #0
 80031e0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80031e2:	2300      	movs	r3, #0
 80031e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80031e6:	2300      	movs	r3, #0
 80031e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80031ea:	2300      	movs	r3, #0
 80031ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	e175      	b.n	80034e0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80031f4:	2201      	movs	r2, #1
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	fa02 f303 	lsl.w	r3, r2, r3
 80031fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	4013      	ands	r3, r2
 8003206:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003208:	693a      	ldr	r2, [r7, #16]
 800320a:	697b      	ldr	r3, [r7, #20]
 800320c:	429a      	cmp	r2, r3
 800320e:	f040 8164 	bne.w	80034da <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	f003 0303 	and.w	r3, r3, #3
 800321a:	2b01      	cmp	r3, #1
 800321c:	d005      	beq.n	800322a <HAL_GPIO_Init+0x56>
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b02      	cmp	r3, #2
 8003228:	d130      	bne.n	800328c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8003230:	69fb      	ldr	r3, [r7, #28]
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	2203      	movs	r2, #3
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	4013      	ands	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	68da      	ldr	r2, [r3, #12]
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	005b      	lsls	r3, r3, #1
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4313      	orrs	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003260:	2201      	movs	r2, #1
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	091b      	lsrs	r3, r3, #4
 8003276:	f003 0201 	and.w	r2, r3, #1
 800327a:	69fb      	ldr	r3, [r7, #28]
 800327c:	fa02 f303 	lsl.w	r3, r2, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4313      	orrs	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	69ba      	ldr	r2, [r7, #24]
 800328a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 0303 	and.w	r3, r3, #3
 8003294:	2b03      	cmp	r3, #3
 8003296:	d017      	beq.n	80032c8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68db      	ldr	r3, [r3, #12]
 800329c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	2203      	movs	r2, #3
 80032a4:	fa02 f303 	lsl.w	r3, r2, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	69fb      	ldr	r3, [r7, #28]
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	4313      	orrs	r3, r2
 80032c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	69ba      	ldr	r2, [r7, #24]
 80032c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 0303 	and.w	r3, r3, #3
 80032d0:	2b02      	cmp	r3, #2
 80032d2:	d123      	bne.n	800331c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80032d4:	69fb      	ldr	r3, [r7, #28]
 80032d6:	08da      	lsrs	r2, r3, #3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	3208      	adds	r2, #8
 80032dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	009b      	lsls	r3, r3, #2
 80032ea:	220f      	movs	r2, #15
 80032ec:	fa02 f303 	lsl.w	r3, r2, r3
 80032f0:	43db      	mvns	r3, r3
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	4013      	ands	r3, r2
 80032f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	691a      	ldr	r2, [r3, #16]
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0307 	and.w	r3, r3, #7
 8003302:	009b      	lsls	r3, r3, #2
 8003304:	fa02 f303 	lsl.w	r3, r2, r3
 8003308:	69ba      	ldr	r2, [r7, #24]
 800330a:	4313      	orrs	r3, r2
 800330c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800330e:	69fb      	ldr	r3, [r7, #28]
 8003310:	08da      	lsrs	r2, r3, #3
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	3208      	adds	r2, #8
 8003316:	69b9      	ldr	r1, [r7, #24]
 8003318:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	2203      	movs	r2, #3
 8003328:	fa02 f303 	lsl.w	r3, r2, r3
 800332c:	43db      	mvns	r3, r3
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	4013      	ands	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	f003 0203 	and.w	r2, r3, #3
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	005b      	lsls	r3, r3, #1
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	69ba      	ldr	r2, [r7, #24]
 8003346:	4313      	orrs	r3, r2
 8003348:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 80be 	beq.w	80034da <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800335e:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <HAL_GPIO_Init+0x324>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4a65      	ldr	r2, [pc, #404]	; (80034f8 <HAL_GPIO_Init+0x324>)
 8003364:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003368:	6453      	str	r3, [r2, #68]	; 0x44
 800336a:	4b63      	ldr	r3, [pc, #396]	; (80034f8 <HAL_GPIO_Init+0x324>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003376:	4a61      	ldr	r2, [pc, #388]	; (80034fc <HAL_GPIO_Init+0x328>)
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	089b      	lsrs	r3, r3, #2
 800337c:	3302      	adds	r3, #2
 800337e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003382:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	009b      	lsls	r3, r3, #2
 800338c:	220f      	movs	r2, #15
 800338e:	fa02 f303 	lsl.w	r3, r2, r3
 8003392:	43db      	mvns	r3, r3
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	4013      	ands	r3, r2
 8003398:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	4a58      	ldr	r2, [pc, #352]	; (8003500 <HAL_GPIO_Init+0x32c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d037      	beq.n	8003412 <HAL_GPIO_Init+0x23e>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4a57      	ldr	r2, [pc, #348]	; (8003504 <HAL_GPIO_Init+0x330>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d031      	beq.n	800340e <HAL_GPIO_Init+0x23a>
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	4a56      	ldr	r2, [pc, #344]	; (8003508 <HAL_GPIO_Init+0x334>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d02b      	beq.n	800340a <HAL_GPIO_Init+0x236>
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a55      	ldr	r2, [pc, #340]	; (800350c <HAL_GPIO_Init+0x338>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d025      	beq.n	8003406 <HAL_GPIO_Init+0x232>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a54      	ldr	r2, [pc, #336]	; (8003510 <HAL_GPIO_Init+0x33c>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d01f      	beq.n	8003402 <HAL_GPIO_Init+0x22e>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a53      	ldr	r2, [pc, #332]	; (8003514 <HAL_GPIO_Init+0x340>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d019      	beq.n	80033fe <HAL_GPIO_Init+0x22a>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a52      	ldr	r2, [pc, #328]	; (8003518 <HAL_GPIO_Init+0x344>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d013      	beq.n	80033fa <HAL_GPIO_Init+0x226>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a51      	ldr	r2, [pc, #324]	; (800351c <HAL_GPIO_Init+0x348>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d00d      	beq.n	80033f6 <HAL_GPIO_Init+0x222>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a50      	ldr	r2, [pc, #320]	; (8003520 <HAL_GPIO_Init+0x34c>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d007      	beq.n	80033f2 <HAL_GPIO_Init+0x21e>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4f      	ldr	r2, [pc, #316]	; (8003524 <HAL_GPIO_Init+0x350>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d101      	bne.n	80033ee <HAL_GPIO_Init+0x21a>
 80033ea:	2309      	movs	r3, #9
 80033ec:	e012      	b.n	8003414 <HAL_GPIO_Init+0x240>
 80033ee:	230a      	movs	r3, #10
 80033f0:	e010      	b.n	8003414 <HAL_GPIO_Init+0x240>
 80033f2:	2308      	movs	r3, #8
 80033f4:	e00e      	b.n	8003414 <HAL_GPIO_Init+0x240>
 80033f6:	2307      	movs	r3, #7
 80033f8:	e00c      	b.n	8003414 <HAL_GPIO_Init+0x240>
 80033fa:	2306      	movs	r3, #6
 80033fc:	e00a      	b.n	8003414 <HAL_GPIO_Init+0x240>
 80033fe:	2305      	movs	r3, #5
 8003400:	e008      	b.n	8003414 <HAL_GPIO_Init+0x240>
 8003402:	2304      	movs	r3, #4
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x240>
 8003406:	2303      	movs	r3, #3
 8003408:	e004      	b.n	8003414 <HAL_GPIO_Init+0x240>
 800340a:	2302      	movs	r3, #2
 800340c:	e002      	b.n	8003414 <HAL_GPIO_Init+0x240>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x240>
 8003412:	2300      	movs	r3, #0
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f002 0203 	and.w	r2, r2, #3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	4093      	lsls	r3, r2
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003424:	4935      	ldr	r1, [pc, #212]	; (80034fc <HAL_GPIO_Init+0x328>)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003432:	4b3d      	ldr	r3, [pc, #244]	; (8003528 <HAL_GPIO_Init+0x354>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003456:	4a34      	ldr	r2, [pc, #208]	; (8003528 <HAL_GPIO_Init+0x354>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800345c:	4b32      	ldr	r3, [pc, #200]	; (8003528 <HAL_GPIO_Init+0x354>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003480:	4a29      	ldr	r2, [pc, #164]	; (8003528 <HAL_GPIO_Init+0x354>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003486:	4b28      	ldr	r3, [pc, #160]	; (8003528 <HAL_GPIO_Init+0x354>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034aa:	4a1f      	ldr	r2, [pc, #124]	; (8003528 <HAL_GPIO_Init+0x354>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b0:	4b1d      	ldr	r3, [pc, #116]	; (8003528 <HAL_GPIO_Init+0x354>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d4:	4a14      	ldr	r2, [pc, #80]	; (8003528 <HAL_GPIO_Init+0x354>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3301      	adds	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	f67f ae86 	bls.w	80031f4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3724      	adds	r7, #36	; 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40013800 	.word	0x40013800
 8003500:	40020000 	.word	0x40020000
 8003504:	40020400 	.word	0x40020400
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021000 	.word	0x40021000
 8003514:	40021400 	.word	0x40021400
 8003518:	40021800 	.word	0x40021800
 800351c:	40021c00 	.word	0x40021c00
 8003520:	40022000 	.word	0x40022000
 8003524:	40022400 	.word	0x40022400
 8003528:	40013c00 	.word	0x40013c00

0800352c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800352c:	b480      	push	{r7}
 800352e:	b085      	sub	sp, #20
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	691a      	ldr	r2, [r3, #16]
 800353c:	887b      	ldrh	r3, [r7, #2]
 800353e:	4013      	ands	r3, r2
 8003540:	2b00      	cmp	r3, #0
 8003542:	d002      	beq.n	800354a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003544:	2301      	movs	r3, #1
 8003546:	73fb      	strb	r3, [r7, #15]
 8003548:	e001      	b.n	800354e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800354e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003550:	4618      	mov	r0, r3
 8003552:	3714      	adds	r7, #20
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
 8003564:	460b      	mov	r3, r1
 8003566:	807b      	strh	r3, [r7, #2]
 8003568:	4613      	mov	r3, r2
 800356a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800356c:	787b      	ldrb	r3, [r7, #1]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003572:	887a      	ldrh	r2, [r7, #2]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003578:	e003      	b.n	8003582 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800357a:	887b      	ldrh	r3, [r7, #2]
 800357c:	041a      	lsls	r2, r3, #16
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	619a      	str	r2, [r3, #24]
}
 8003582:	bf00      	nop
 8003584:	370c      	adds	r7, #12
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800358e:	b480      	push	{r7}
 8003590:	b085      	sub	sp, #20
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	460b      	mov	r3, r1
 8003598:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80035a0:	887a      	ldrh	r2, [r7, #2]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	4013      	ands	r3, r2
 80035a6:	041a      	lsls	r2, r3, #16
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	43d9      	mvns	r1, r3
 80035ac:	887b      	ldrh	r3, [r7, #2]
 80035ae:	400b      	ands	r3, r1
 80035b0:	431a      	orrs	r2, r3
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	619a      	str	r2, [r3, #24]
}
 80035b6:	bf00      	nop
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr

080035c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80035c2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035c4:	b08f      	sub	sp, #60	; 0x3c
 80035c6:	af0a      	add	r7, sp, #40	; 0x28
 80035c8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d101      	bne.n	80035d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e054      	b.n	800367e <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f00e fbb0 	bl	8011d54 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2203      	movs	r2, #3
 80035f8:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003600:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003604:	2b00      	cmp	r3, #0
 8003606:	d102      	bne.n	800360e <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2200      	movs	r2, #0
 800360c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f007 fae3 	bl	800abde <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	687e      	ldr	r6, [r7, #4]
 8003620:	466d      	mov	r5, sp
 8003622:	f106 0410 	add.w	r4, r6, #16
 8003626:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003628:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800362a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800362c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800362e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003632:	e885 0003 	stmia.w	r5, {r0, r1}
 8003636:	1d33      	adds	r3, r6, #4
 8003638:	cb0e      	ldmia	r3, {r1, r2, r3}
 800363a:	6838      	ldr	r0, [r7, #0]
 800363c:	f007 f9c4 	bl	800a9c8 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2101      	movs	r1, #1
 8003646:	4618      	mov	r0, r3
 8003648:	f007 fada 	bl	800ac00 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	603b      	str	r3, [r7, #0]
 8003652:	687e      	ldr	r6, [r7, #4]
 8003654:	466d      	mov	r5, sp
 8003656:	f106 0410 	add.w	r4, r6, #16
 800365a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800365c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800365e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003662:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003666:	e885 0003 	stmia.w	r5, {r0, r1}
 800366a:	1d33      	adds	r3, r6, #4
 800366c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800366e:	6838      	ldr	r0, [r7, #0]
 8003670:	f008 fe16 	bl	800c2a0 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 800367c:	2300      	movs	r3, #0
}
 800367e:	4618      	mov	r0, r3
 8003680:	3714      	adds	r7, #20
 8003682:	46bd      	mov	sp, r7
 8003684:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003686 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8003686:	b590      	push	{r4, r7, lr}
 8003688:	b089      	sub	sp, #36	; 0x24
 800368a:	af04      	add	r7, sp, #16
 800368c:	6078      	str	r0, [r7, #4]
 800368e:	4608      	mov	r0, r1
 8003690:	4611      	mov	r1, r2
 8003692:	461a      	mov	r2, r3
 8003694:	4603      	mov	r3, r0
 8003696:	70fb      	strb	r3, [r7, #3]
 8003698:	460b      	mov	r3, r1
 800369a:	70bb      	strb	r3, [r7, #2]
 800369c:	4613      	mov	r3, r2
 800369e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d101      	bne.n	80036ae <HAL_HCD_HC_Init+0x28>
 80036aa:	2302      	movs	r3, #2
 80036ac:	e076      	b.n	800379c <HAL_HCD_HC_Init+0x116>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2201      	movs	r2, #1
 80036b2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	212c      	movs	r1, #44	; 0x2c
 80036bc:	fb01 f303 	mul.w	r3, r1, r3
 80036c0:	4413      	add	r3, r2
 80036c2:	333d      	adds	r3, #61	; 0x3d
 80036c4:	2200      	movs	r2, #0
 80036c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80036c8:	78fb      	ldrb	r3, [r7, #3]
 80036ca:	687a      	ldr	r2, [r7, #4]
 80036cc:	212c      	movs	r1, #44	; 0x2c
 80036ce:	fb01 f303 	mul.w	r3, r1, r3
 80036d2:	4413      	add	r3, r2
 80036d4:	3338      	adds	r3, #56	; 0x38
 80036d6:	787a      	ldrb	r2, [r7, #1]
 80036d8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80036da:	78fb      	ldrb	r3, [r7, #3]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	212c      	movs	r1, #44	; 0x2c
 80036e0:	fb01 f303 	mul.w	r3, r1, r3
 80036e4:	4413      	add	r3, r2
 80036e6:	3340      	adds	r3, #64	; 0x40
 80036e8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80036ea:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80036ec:	78fb      	ldrb	r3, [r7, #3]
 80036ee:	687a      	ldr	r2, [r7, #4]
 80036f0:	212c      	movs	r1, #44	; 0x2c
 80036f2:	fb01 f303 	mul.w	r3, r1, r3
 80036f6:	4413      	add	r3, r2
 80036f8:	3339      	adds	r3, #57	; 0x39
 80036fa:	78fa      	ldrb	r2, [r7, #3]
 80036fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80036fe:	78fb      	ldrb	r3, [r7, #3]
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	212c      	movs	r1, #44	; 0x2c
 8003704:	fb01 f303 	mul.w	r3, r1, r3
 8003708:	4413      	add	r3, r2
 800370a:	333f      	adds	r3, #63	; 0x3f
 800370c:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003710:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	78ba      	ldrb	r2, [r7, #2]
 8003716:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800371a:	b2d0      	uxtb	r0, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	212c      	movs	r1, #44	; 0x2c
 8003720:	fb01 f303 	mul.w	r3, r1, r3
 8003724:	4413      	add	r3, r2
 8003726:	333a      	adds	r3, #58	; 0x3a
 8003728:	4602      	mov	r2, r0
 800372a:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 800372c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003730:	2b00      	cmp	r3, #0
 8003732:	da09      	bge.n	8003748 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8003734:	78fb      	ldrb	r3, [r7, #3]
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	212c      	movs	r1, #44	; 0x2c
 800373a:	fb01 f303 	mul.w	r3, r1, r3
 800373e:	4413      	add	r3, r2
 8003740:	333b      	adds	r3, #59	; 0x3b
 8003742:	2201      	movs	r2, #1
 8003744:	701a      	strb	r2, [r3, #0]
 8003746:	e008      	b.n	800375a <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	212c      	movs	r1, #44	; 0x2c
 800374e:	fb01 f303 	mul.w	r3, r1, r3
 8003752:	4413      	add	r3, r2
 8003754:	333b      	adds	r3, #59	; 0x3b
 8003756:	2200      	movs	r2, #0
 8003758:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 800375a:	78fb      	ldrb	r3, [r7, #3]
 800375c:	687a      	ldr	r2, [r7, #4]
 800375e:	212c      	movs	r1, #44	; 0x2c
 8003760:	fb01 f303 	mul.w	r3, r1, r3
 8003764:	4413      	add	r3, r2
 8003766:	333c      	adds	r3, #60	; 0x3c
 8003768:	f897 2020 	ldrb.w	r2, [r7, #32]
 800376c:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6818      	ldr	r0, [r3, #0]
 8003772:	787c      	ldrb	r4, [r7, #1]
 8003774:	78ba      	ldrb	r2, [r7, #2]
 8003776:	78f9      	ldrb	r1, [r7, #3]
 8003778:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800377a:	9302      	str	r3, [sp, #8]
 800377c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	f897 3020 	ldrb.w	r3, [r7, #32]
 8003786:	9300      	str	r3, [sp, #0]
 8003788:	4623      	mov	r3, r4
 800378a:	f008 ff03 	bl	800c594 <USB_HC_Init>
 800378e:	4603      	mov	r3, r0
 8003790:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, mps);

  __HAL_UNLOCK(hhcd);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800379a:	7bfb      	ldrb	r3, [r7, #15]
}
 800379c:	4618      	mov	r0, r3
 800379e:	3714      	adds	r7, #20
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd90      	pop	{r4, r7, pc}

080037a4 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b084      	sub	sp, #16
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80037b0:	2300      	movs	r3, #0
 80037b2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d101      	bne.n	80037c2 <HAL_HCD_HC_Halt+0x1e>
 80037be:	2302      	movs	r3, #2
 80037c0:	e00f      	b.n	80037e2 <HAL_HCD_HC_Halt+0x3e>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	78fa      	ldrb	r2, [r7, #3]
 80037d0:	4611      	mov	r1, r2
 80037d2:	4618      	mov	r0, r3
 80037d4:	f009 f953 	bl	800ca7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
	...

080037ec <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	70fb      	strb	r3, [r7, #3]
 80037fe:	460b      	mov	r3, r1
 8003800:	70bb      	strb	r3, [r7, #2]
 8003802:	4613      	mov	r3, r2
 8003804:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8003806:	78fb      	ldrb	r3, [r7, #3]
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	212c      	movs	r1, #44	; 0x2c
 800380c:	fb01 f303 	mul.w	r3, r1, r3
 8003810:	4413      	add	r3, r2
 8003812:	333b      	adds	r3, #59	; 0x3b
 8003814:	78ba      	ldrb	r2, [r7, #2]
 8003816:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003818:	78fb      	ldrb	r3, [r7, #3]
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	212c      	movs	r1, #44	; 0x2c
 800381e:	fb01 f303 	mul.w	r3, r1, r3
 8003822:	4413      	add	r3, r2
 8003824:	333f      	adds	r3, #63	; 0x3f
 8003826:	787a      	ldrb	r2, [r7, #1]
 8003828:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800382a:	7c3b      	ldrb	r3, [r7, #16]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d112      	bne.n	8003856 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003830:	78fb      	ldrb	r3, [r7, #3]
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	212c      	movs	r1, #44	; 0x2c
 8003836:	fb01 f303 	mul.w	r3, r1, r3
 800383a:	4413      	add	r3, r2
 800383c:	3342      	adds	r3, #66	; 0x42
 800383e:	2203      	movs	r2, #3
 8003840:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8003842:	78fb      	ldrb	r3, [r7, #3]
 8003844:	687a      	ldr	r2, [r7, #4]
 8003846:	212c      	movs	r1, #44	; 0x2c
 8003848:	fb01 f303 	mul.w	r3, r1, r3
 800384c:	4413      	add	r3, r2
 800384e:	333d      	adds	r3, #61	; 0x3d
 8003850:	7f3a      	ldrb	r2, [r7, #28]
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e008      	b.n	8003868 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003856:	78fb      	ldrb	r3, [r7, #3]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	212c      	movs	r1, #44	; 0x2c
 800385c:	fb01 f303 	mul.w	r3, r1, r3
 8003860:	4413      	add	r3, r2
 8003862:	3342      	adds	r3, #66	; 0x42
 8003864:	2202      	movs	r2, #2
 8003866:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8003868:	787b      	ldrb	r3, [r7, #1]
 800386a:	2b03      	cmp	r3, #3
 800386c:	f200 80c6 	bhi.w	80039fc <HAL_HCD_HC_SubmitRequest+0x210>
 8003870:	a201      	add	r2, pc, #4	; (adr r2, 8003878 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8003872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003876:	bf00      	nop
 8003878:	08003889 	.word	0x08003889
 800387c:	080039e9 	.word	0x080039e9
 8003880:	080038ed 	.word	0x080038ed
 8003884:	0800396b 	.word	0x0800396b
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8003888:	7c3b      	ldrb	r3, [r7, #16]
 800388a:	2b01      	cmp	r3, #1
 800388c:	f040 80b8 	bne.w	8003a00 <HAL_HCD_HC_SubmitRequest+0x214>
 8003890:	78bb      	ldrb	r3, [r7, #2]
 8003892:	2b00      	cmp	r3, #0
 8003894:	f040 80b4 	bne.w	8003a00 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8003898:	8b3b      	ldrh	r3, [r7, #24]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d108      	bne.n	80038b0 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	687a      	ldr	r2, [r7, #4]
 80038a2:	212c      	movs	r1, #44	; 0x2c
 80038a4:	fb01 f303 	mul.w	r3, r1, r3
 80038a8:	4413      	add	r3, r2
 80038aa:	3355      	adds	r3, #85	; 0x55
 80038ac:	2201      	movs	r2, #1
 80038ae:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	212c      	movs	r1, #44	; 0x2c
 80038b6:	fb01 f303 	mul.w	r3, r1, r3
 80038ba:	4413      	add	r3, r2
 80038bc:	3355      	adds	r3, #85	; 0x55
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d109      	bne.n	80038d8 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80038c4:	78fb      	ldrb	r3, [r7, #3]
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	212c      	movs	r1, #44	; 0x2c
 80038ca:	fb01 f303 	mul.w	r3, r1, r3
 80038ce:	4413      	add	r3, r2
 80038d0:	3342      	adds	r3, #66	; 0x42
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80038d6:	e093      	b.n	8003a00 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80038d8:	78fb      	ldrb	r3, [r7, #3]
 80038da:	687a      	ldr	r2, [r7, #4]
 80038dc:	212c      	movs	r1, #44	; 0x2c
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	4413      	add	r3, r2
 80038e4:	3342      	adds	r3, #66	; 0x42
 80038e6:	2202      	movs	r2, #2
 80038e8:	701a      	strb	r2, [r3, #0]
      break;
 80038ea:	e089      	b.n	8003a00 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80038ec:	78bb      	ldrb	r3, [r7, #2]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d11d      	bne.n	800392e <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80038f2:	78fb      	ldrb	r3, [r7, #3]
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	212c      	movs	r1, #44	; 0x2c
 80038f8:	fb01 f303 	mul.w	r3, r1, r3
 80038fc:	4413      	add	r3, r2
 80038fe:	3355      	adds	r3, #85	; 0x55
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003906:	78fb      	ldrb	r3, [r7, #3]
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	212c      	movs	r1, #44	; 0x2c
 800390c:	fb01 f303 	mul.w	r3, r1, r3
 8003910:	4413      	add	r3, r2
 8003912:	3342      	adds	r3, #66	; 0x42
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003918:	e073      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800391a:	78fb      	ldrb	r3, [r7, #3]
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	3342      	adds	r3, #66	; 0x42
 8003928:	2202      	movs	r2, #2
 800392a:	701a      	strb	r2, [r3, #0]
      break;
 800392c:	e069      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800392e:	78fb      	ldrb	r3, [r7, #3]
 8003930:	687a      	ldr	r2, [r7, #4]
 8003932:	212c      	movs	r1, #44	; 0x2c
 8003934:	fb01 f303 	mul.w	r3, r1, r3
 8003938:	4413      	add	r3, r2
 800393a:	3354      	adds	r3, #84	; 0x54
 800393c:	781b      	ldrb	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d109      	bne.n	8003956 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003942:	78fb      	ldrb	r3, [r7, #3]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	3342      	adds	r3, #66	; 0x42
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
      break;
 8003954:	e055      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003956:	78fb      	ldrb	r3, [r7, #3]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	212c      	movs	r1, #44	; 0x2c
 800395c:	fb01 f303 	mul.w	r3, r1, r3
 8003960:	4413      	add	r3, r2
 8003962:	3342      	adds	r3, #66	; 0x42
 8003964:	2202      	movs	r2, #2
 8003966:	701a      	strb	r2, [r3, #0]
      break;
 8003968:	e04b      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800396a:	78bb      	ldrb	r3, [r7, #2]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d11d      	bne.n	80039ac <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8003970:	78fb      	ldrb	r3, [r7, #3]
 8003972:	687a      	ldr	r2, [r7, #4]
 8003974:	212c      	movs	r1, #44	; 0x2c
 8003976:	fb01 f303 	mul.w	r3, r1, r3
 800397a:	4413      	add	r3, r2
 800397c:	3355      	adds	r3, #85	; 0x55
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d109      	bne.n	8003998 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003984:	78fb      	ldrb	r3, [r7, #3]
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	212c      	movs	r1, #44	; 0x2c
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	4413      	add	r3, r2
 8003990:	3342      	adds	r3, #66	; 0x42
 8003992:	2200      	movs	r2, #0
 8003994:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8003996:	e034      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003998:	78fb      	ldrb	r3, [r7, #3]
 800399a:	687a      	ldr	r2, [r7, #4]
 800399c:	212c      	movs	r1, #44	; 0x2c
 800399e:	fb01 f303 	mul.w	r3, r1, r3
 80039a2:	4413      	add	r3, r2
 80039a4:	3342      	adds	r3, #66	; 0x42
 80039a6:	2202      	movs	r2, #2
 80039a8:	701a      	strb	r2, [r3, #0]
      break;
 80039aa:	e02a      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80039ac:	78fb      	ldrb	r3, [r7, #3]
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	212c      	movs	r1, #44	; 0x2c
 80039b2:	fb01 f303 	mul.w	r3, r1, r3
 80039b6:	4413      	add	r3, r2
 80039b8:	3354      	adds	r3, #84	; 0x54
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d109      	bne.n	80039d4 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039c0:	78fb      	ldrb	r3, [r7, #3]
 80039c2:	687a      	ldr	r2, [r7, #4]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	3342      	adds	r3, #66	; 0x42
 80039ce:	2200      	movs	r2, #0
 80039d0:	701a      	strb	r2, [r3, #0]
      break;
 80039d2:	e016      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80039d4:	78fb      	ldrb	r3, [r7, #3]
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	212c      	movs	r1, #44	; 0x2c
 80039da:	fb01 f303 	mul.w	r3, r1, r3
 80039de:	4413      	add	r3, r2
 80039e0:	3342      	adds	r3, #66	; 0x42
 80039e2:	2202      	movs	r2, #2
 80039e4:	701a      	strb	r2, [r3, #0]
      break;
 80039e6:	e00c      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80039e8:	78fb      	ldrb	r3, [r7, #3]
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	212c      	movs	r1, #44	; 0x2c
 80039ee:	fb01 f303 	mul.w	r3, r1, r3
 80039f2:	4413      	add	r3, r2
 80039f4:	3342      	adds	r3, #66	; 0x42
 80039f6:	2200      	movs	r2, #0
 80039f8:	701a      	strb	r2, [r3, #0]
      break;
 80039fa:	e002      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003a00:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8003a02:	78fb      	ldrb	r3, [r7, #3]
 8003a04:	687a      	ldr	r2, [r7, #4]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3344      	adds	r3, #68	; 0x44
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8003a14:	78fb      	ldrb	r3, [r7, #3]
 8003a16:	8b3a      	ldrh	r2, [r7, #24]
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	202c      	movs	r0, #44	; 0x2c
 8003a1c:	fb00 f303 	mul.w	r3, r0, r3
 8003a20:	440b      	add	r3, r1
 8003a22:	334c      	adds	r3, #76	; 0x4c
 8003a24:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8003a26:	78fb      	ldrb	r3, [r7, #3]
 8003a28:	687a      	ldr	r2, [r7, #4]
 8003a2a:	212c      	movs	r1, #44	; 0x2c
 8003a2c:	fb01 f303 	mul.w	r3, r1, r3
 8003a30:	4413      	add	r3, r2
 8003a32:	3360      	adds	r3, #96	; 0x60
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003a38:	78fb      	ldrb	r3, [r7, #3]
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	212c      	movs	r1, #44	; 0x2c
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3350      	adds	r3, #80	; 0x50
 8003a46:	2200      	movs	r2, #0
 8003a48:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	212c      	movs	r1, #44	; 0x2c
 8003a50:	fb01 f303 	mul.w	r3, r1, r3
 8003a54:	4413      	add	r3, r2
 8003a56:	3339      	adds	r3, #57	; 0x39
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8003a5c:	78fb      	ldrb	r3, [r7, #3]
 8003a5e:	687a      	ldr	r2, [r7, #4]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	3361      	adds	r3, #97	; 0x61
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6818      	ldr	r0, [r3, #0]
 8003a72:	78fb      	ldrb	r3, [r7, #3]
 8003a74:	222c      	movs	r2, #44	; 0x2c
 8003a76:	fb02 f303 	mul.w	r3, r2, r3
 8003a7a:	3338      	adds	r3, #56	; 0x38
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	18d1      	adds	r1, r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
 8003a88:	f008 fea6 	bl	800c7d8 <USB_HC_StartXfer>
 8003a8c:	4603      	mov	r3, r0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3708      	adds	r7, #8
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop

08003a98 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4618      	mov	r0, r3
 8003ab0:	f008 fb32 	bl	800c118 <USB_GetMode>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	f040 80f6 	bne.w	8003ca8 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f008 fa75 	bl	800bfb0 <USB_ReadInterrupts>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	f000 80ec 	beq.w	8003ca6 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f008 fa6c 	bl	800bfb0 <USB_ReadInterrupts>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ae2:	d104      	bne.n	8003aee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003aec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f008 fa5c 	bl	800bfb0 <USB_ReadInterrupts>
 8003af8:	4603      	mov	r3, r0
 8003afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003afe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b02:	d104      	bne.n	8003b0e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003b0c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	4618      	mov	r0, r3
 8003b14:	f008 fa4c 	bl	800bfb0 <USB_ReadInterrupts>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b1e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003b22:	d104      	bne.n	8003b2e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4618      	mov	r0, r3
 8003b34:	f008 fa3c 	bl	800bfb0 <USB_ReadInterrupts>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d103      	bne.n	8003b4a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2202      	movs	r2, #2
 8003b48:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f008 fa2e 	bl	800bfb0 <USB_ReadInterrupts>
 8003b54:	4603      	mov	r3, r0
 8003b56:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003b5a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b5e:	d11c      	bne.n	8003b9a <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8003b68:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0301 	and.w	r3, r3, #1
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d10f      	bne.n	8003b9a <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003b7a:	2110      	movs	r1, #16
 8003b7c:	6938      	ldr	r0, [r7, #16]
 8003b7e:	f007 f9e9 	bl	800af54 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003b82:	6938      	ldr	r0, [r7, #16]
 8003b84:	f007 fa1a 	bl	800afbc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2101      	movs	r1, #1
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f008 fc3a 	bl	800c408 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f00e f96b 	bl	8011e70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f008 fa06 	bl	800bfb0 <USB_ReadInterrupts>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003baa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003bae:	d102      	bne.n	8003bb6 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8003bb0:	6878      	ldr	r0, [r7, #4]
 8003bb2:	f001 f9ce 	bl	8004f52 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4618      	mov	r0, r3
 8003bbc:	f008 f9f8 	bl	800bfb0 <USB_ReadInterrupts>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b08      	cmp	r3, #8
 8003bc8:	d106      	bne.n	8003bd8 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003bca:	6878      	ldr	r0, [r7, #4]
 8003bcc:	f00e f934 	bl	8011e38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f008 f9e7 	bl	800bfb0 <USB_ReadInterrupts>
 8003be2:	4603      	mov	r3, r0
 8003be4:	f003 0310 	and.w	r3, r3, #16
 8003be8:	2b10      	cmp	r3, #16
 8003bea:	d101      	bne.n	8003bf0 <HAL_HCD_IRQHandler+0x158>
 8003bec:	2301      	movs	r3, #1
 8003bee:	e000      	b.n	8003bf2 <HAL_HCD_IRQHandler+0x15a>
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699a      	ldr	r2, [r3, #24]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f022 0210 	bic.w	r2, r2, #16
 8003c04:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f001 f8d1 	bl	8004dae <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	699a      	ldr	r2, [r3, #24]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0210 	orr.w	r2, r2, #16
 8003c1a:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4618      	mov	r0, r3
 8003c22:	f008 f9c5 	bl	800bfb0 <USB_ReadInterrupts>
 8003c26:	4603      	mov	r3, r0
 8003c28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003c2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003c30:	d13a      	bne.n	8003ca8 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f008 ff10 	bl	800ca5c <USB_HC_ReadInterrupt>
 8003c3c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c3e:	2300      	movs	r3, #0
 8003c40:	617b      	str	r3, [r7, #20]
 8003c42:	e025      	b.n	8003c90 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	f003 030f 	and.w	r3, r3, #15
 8003c4a:	68ba      	ldr	r2, [r7, #8]
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c50:	f003 0301 	and.w	r3, r3, #1
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d018      	beq.n	8003c8a <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	015a      	lsls	r2, r3, #5
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4413      	add	r3, r2
 8003c60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c6e:	d106      	bne.n	8003c7e <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	4619      	mov	r1, r3
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f8ab 	bl	8003dd2 <HCD_HC_IN_IRQHandler>
 8003c7c:	e005      	b.n	8003c8a <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	b2db      	uxtb	r3, r3
 8003c82:	4619      	mov	r1, r3
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 fcc6 	bl	8004616 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003c8a:	697b      	ldr	r3, [r7, #20]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	617b      	str	r3, [r7, #20]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	697a      	ldr	r2, [r7, #20]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d3d4      	bcc.n	8003c44 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003ca2:	615a      	str	r2, [r3, #20]
 8003ca4:	e000      	b.n	8003ca8 <HAL_HCD_IRQHandler+0x210>
      return;
 8003ca6:	bf00      	nop
    }
  }
}
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}

08003cae <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003cae:	b580      	push	{r7, lr}
 8003cb0:	b082      	sub	sp, #8
 8003cb2:	af00      	add	r7, sp, #0
 8003cb4:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_HCD_Start+0x16>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e013      	b.n	8003cec <HAL_HCD_Start+0x3e>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	2101      	movs	r1, #1
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f008 fbfc 	bl	800c4d0 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4618      	mov	r0, r3
 8003cde:	f006 ff6d 	bl	800abbc <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003cea:	2300      	movs	r3, #0
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3708      	adds	r7, #8
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_HCD_Stop+0x16>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e00d      	b.n	8003d26 <HAL_HCD_Stop+0x32>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4618      	mov	r0, r3
 8003d18:	f008 ffea 	bl	800ccf0 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003d24:	2300      	movs	r3, #0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f008 fb9e 	bl	800c47c <USB_ResetPort>
 8003d40:	4603      	mov	r3, r0
}
 8003d42:	4618      	mov	r0, r3
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	b083      	sub	sp, #12
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
 8003d52:	460b      	mov	r3, r1
 8003d54:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003d56:	78fb      	ldrb	r3, [r7, #3]
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	212c      	movs	r1, #44	; 0x2c
 8003d5c:	fb01 f303 	mul.w	r3, r1, r3
 8003d60:	4413      	add	r3, r2
 8003d62:	3360      	adds	r3, #96	; 0x60
 8003d64:	781b      	ldrb	r3, [r3, #0]
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	370c      	adds	r7, #12
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b083      	sub	sp, #12
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	460b      	mov	r3, r1
 8003d7c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	212c      	movs	r1, #44	; 0x2c
 8003d84:	fb01 f303 	mul.w	r3, r1, r3
 8003d88:	4413      	add	r3, r2
 8003d8a:	3350      	adds	r3, #80	; 0x50
 8003d8c:	681b      	ldr	r3, [r3, #0]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	370c      	adds	r7, #12
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003d9a:	b580      	push	{r7, lr}
 8003d9c:	b082      	sub	sp, #8
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4618      	mov	r0, r3
 8003da8:	f008 fbe2 	bl	800c570 <USB_GetCurrentFrame>
 8003dac:	4603      	mov	r3, r0
}
 8003dae:	4618      	mov	r0, r3
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}

08003db6 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8003db6:	b580      	push	{r7, lr}
 8003db8:	b082      	sub	sp, #8
 8003dba:	af00      	add	r7, sp, #0
 8003dbc:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f008 fbbd 	bl	800c542 <USB_GetHostSpeed>
 8003dc8:	4603      	mov	r3, r0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3708      	adds	r7, #8
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b086      	sub	sp, #24
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003de8:	78fb      	ldrb	r3, [r7, #3]
 8003dea:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68fa      	ldr	r2, [r7, #12]
 8003df2:	b2d2      	uxtb	r2, r2
 8003df4:	4611      	mov	r1, r2
 8003df6:	4618      	mov	r0, r3
 8003df8:	f008 f8ed 	bl	800bfd6 <USB_ReadChInterrupts>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	f003 0304 	and.w	r3, r3, #4
 8003e02:	2b04      	cmp	r3, #4
 8003e04:	d11a      	bne.n	8003e3c <HCD_HC_IN_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	015a      	lsls	r2, r3, #5
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e12:	461a      	mov	r2, r3
 8003e14:	2304      	movs	r3, #4
 8003e16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	212c      	movs	r1, #44	; 0x2c
 8003e1e:	fb01 f303 	mul.w	r3, r1, r3
 8003e22:	4413      	add	r3, r2
 8003e24:	3361      	adds	r3, #97	; 0x61
 8003e26:	2207      	movs	r2, #7
 8003e28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	68fa      	ldr	r2, [r7, #12]
 8003e30:	b2d2      	uxtb	r2, r2
 8003e32:	4611      	mov	r1, r2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f008 fe22 	bl	800ca7e <USB_HC_Halt>
 8003e3a:	e0a2      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_BBERR))
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	b2d2      	uxtb	r2, r2
 8003e44:	4611      	mov	r1, r2
 8003e46:	4618      	mov	r0, r3
 8003e48:	f008 f8c5 	bl	800bfd6 <USB_ReadChInterrupts>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e56:	d11b      	bne.n	8003e90 <HCD_HC_IN_IRQHandler+0xbe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	015a      	lsls	r2, r3, #5
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	4413      	add	r3, r2
 8003e60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e64:	461a      	mov	r2, r3
 8003e66:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003e6c:	687a      	ldr	r2, [r7, #4]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	212c      	movs	r1, #44	; 0x2c
 8003e72:	fb01 f303 	mul.w	r3, r1, r3
 8003e76:	4413      	add	r3, r2
 8003e78:	3361      	adds	r3, #97	; 0x61
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	68fa      	ldr	r2, [r7, #12]
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	4611      	mov	r1, r2
 8003e88:	4618      	mov	r0, r3
 8003e8a:	f008 fdf8 	bl	800ca7e <USB_HC_Halt>
 8003e8e:	e078      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	b2d2      	uxtb	r2, r2
 8003e98:	4611      	mov	r1, r2
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f008 f89b 	bl	800bfd6 <USB_ReadChInterrupts>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	f003 0308 	and.w	r3, r3, #8
 8003ea6:	2b08      	cmp	r3, #8
 8003ea8:	d11a      	bne.n	8003ee0 <HCD_HC_IN_IRQHandler+0x10e>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	2308      	movs	r3, #8
 8003eba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003ebc:	687a      	ldr	r2, [r7, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	212c      	movs	r1, #44	; 0x2c
 8003ec2:	fb01 f303 	mul.w	r3, r1, r3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	3361      	adds	r3, #97	; 0x61
 8003eca:	2206      	movs	r2, #6
 8003ecc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	b2d2      	uxtb	r2, r2
 8003ed6:	4611      	mov	r1, r2
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f008 fdd0 	bl	800ca7e <USB_HC_Halt>
 8003ede:	e050      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68fa      	ldr	r2, [r7, #12]
 8003ee6:	b2d2      	uxtb	r2, r2
 8003ee8:	4611      	mov	r1, r2
 8003eea:	4618      	mov	r0, r3
 8003eec:	f008 f873 	bl	800bfd6 <USB_ReadChInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ef6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003efa:	d11b      	bne.n	8003f34 <HCD_HC_IN_IRQHandler+0x162>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	015a      	lsls	r2, r3, #5
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	4413      	add	r3, r2
 8003f04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f08:	461a      	mov	r2, r3
 8003f0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	212c      	movs	r1, #44	; 0x2c
 8003f16:	fb01 f303 	mul.w	r3, r1, r3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	3361      	adds	r3, #97	; 0x61
 8003f1e:	2209      	movs	r2, #9
 8003f20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	b2d2      	uxtb	r2, r2
 8003f2a:	4611      	mov	r1, r2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f008 fda6 	bl	800ca7e <USB_HC_Halt>
 8003f32:	e026      	b.n	8003f82 <HCD_HC_IN_IRQHandler+0x1b0>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	b2d2      	uxtb	r2, r2
 8003f3c:	4611      	mov	r1, r2
 8003f3e:	4618      	mov	r0, r3
 8003f40:	f008 f849 	bl	800bfd6 <USB_ReadChInterrupts>
 8003f44:	4603      	mov	r3, r0
 8003f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f4a:	2b80      	cmp	r3, #128	; 0x80
 8003f4c:	d119      	bne.n	8003f82 <HCD_HC_IN_IRQHandler+0x1b0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	015a      	lsls	r2, r3, #5
 8003f52:	693b      	ldr	r3, [r7, #16]
 8003f54:	4413      	add	r3, r2
 8003f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	2380      	movs	r3, #128	; 0x80
 8003f5e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	212c      	movs	r1, #44	; 0x2c
 8003f66:	fb01 f303 	mul.w	r3, r1, r3
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3361      	adds	r3, #97	; 0x61
 8003f6e:	2207      	movs	r2, #7
 8003f70:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	68fa      	ldr	r2, [r7, #12]
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	4611      	mov	r1, r2
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f008 fd7e 	bl	800ca7e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68fa      	ldr	r2, [r7, #12]
 8003f88:	b2d2      	uxtb	r2, r2
 8003f8a:	4611      	mov	r1, r2
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f008 f822 	bl	800bfd6 <USB_ReadChInterrupts>
 8003f92:	4603      	mov	r3, r0
 8003f94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f9c:	d112      	bne.n	8003fc4 <HCD_HC_IN_IRQHandler+0x1f2>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68fa      	ldr	r2, [r7, #12]
 8003fa4:	b2d2      	uxtb	r2, r2
 8003fa6:	4611      	mov	r1, r2
 8003fa8:	4618      	mov	r0, r3
 8003faa:	f008 fd68 	bl	800ca7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	015a      	lsls	r2, r3, #5
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	4413      	add	r3, r2
 8003fb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fc0:	6093      	str	r3, [r2, #8]
 8003fc2:	e325      	b.n	8004610 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68fa      	ldr	r2, [r7, #12]
 8003fca:	b2d2      	uxtb	r2, r2
 8003fcc:	4611      	mov	r1, r2
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f008 f801 	bl	800bfd6 <USB_ReadChInterrupts>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	f003 0301 	and.w	r3, r3, #1
 8003fda:	2b01      	cmp	r3, #1
 8003fdc:	f040 80e8 	bne.w	80041b0 <HCD_HC_IN_IRQHandler+0x3de>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	015a      	lsls	r2, r3, #5
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	4413      	add	r3, r2
 8003fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fec:	461a      	mov	r2, r3
 8003fee:	2320      	movs	r3, #32
 8003ff0:	6093      	str	r3, [r2, #8]

    if (hhcd->Init.dma_enable != 0U)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	691b      	ldr	r3, [r3, #16]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d019      	beq.n	800402e <HCD_HC_IN_IRQHandler+0x25c>
    {
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	212c      	movs	r1, #44	; 0x2c
 8004000:	fb01 f303 	mul.w	r3, r1, r3
 8004004:	4413      	add	r3, r2
 8004006:	3348      	adds	r3, #72	; 0x48
 8004008:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	0159      	lsls	r1, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	440b      	add	r3, r1
 8004012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800401c:	1ad2      	subs	r2, r2, r3
 800401e:	6879      	ldr	r1, [r7, #4]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	202c      	movs	r0, #44	; 0x2c
 8004024:	fb00 f303 	mul.w	r3, r0, r3
 8004028:	440b      	add	r3, r1
 800402a:	3350      	adds	r3, #80	; 0x50
 800402c:	601a      	str	r2, [r3, #0]
    }

    hhcd->hc[ch_num].state = HC_XFRC;
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	212c      	movs	r1, #44	; 0x2c
 8004034:	fb01 f303 	mul.w	r3, r1, r3
 8004038:	4413      	add	r3, r2
 800403a:	3361      	adds	r3, #97	; 0x61
 800403c:	2201      	movs	r2, #1
 800403e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	335c      	adds	r3, #92	; 0x5c
 800404e:	2200      	movs	r2, #0
 8004050:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	015a      	lsls	r2, r3, #5
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	4413      	add	r3, r2
 800405a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800405e:	461a      	mov	r2, r3
 8004060:	2301      	movs	r3, #1
 8004062:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	212c      	movs	r1, #44	; 0x2c
 800406a:	fb01 f303 	mul.w	r3, r1, r3
 800406e:	4413      	add	r3, r2
 8004070:	333f      	adds	r3, #63	; 0x3f
 8004072:	781b      	ldrb	r3, [r3, #0]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d009      	beq.n	800408c <HCD_HC_IN_IRQHandler+0x2ba>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	333f      	adds	r3, #63	; 0x3f
 8004086:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004088:	2b02      	cmp	r3, #2
 800408a:	d111      	bne.n	80040b0 <HCD_HC_IN_IRQHandler+0x2de>
    {
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	68fa      	ldr	r2, [r7, #12]
 8004092:	b2d2      	uxtb	r2, r2
 8004094:	4611      	mov	r1, r2
 8004096:	4618      	mov	r0, r3
 8004098:	f008 fcf1 	bl	800ca7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	015a      	lsls	r2, r3, #5
 80040a0:	693b      	ldr	r3, [r7, #16]
 80040a2:	4413      	add	r3, r2
 80040a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040a8:	461a      	mov	r2, r3
 80040aa:	2310      	movs	r3, #16
 80040ac:	6093      	str	r3, [r2, #8]
 80040ae:	e03a      	b.n	8004126 <HCD_HC_IN_IRQHandler+0x354>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80040b0:	687a      	ldr	r2, [r7, #4]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	212c      	movs	r1, #44	; 0x2c
 80040b6:	fb01 f303 	mul.w	r3, r1, r3
 80040ba:	4413      	add	r3, r2
 80040bc:	333f      	adds	r3, #63	; 0x3f
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b03      	cmp	r3, #3
 80040c2:	d009      	beq.n	80040d8 <HCD_HC_IN_IRQHandler+0x306>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80040c4:	687a      	ldr	r2, [r7, #4]
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	212c      	movs	r1, #44	; 0x2c
 80040ca:	fb01 f303 	mul.w	r3, r1, r3
 80040ce:	4413      	add	r3, r2
 80040d0:	333f      	adds	r3, #63	; 0x3f
 80040d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d126      	bne.n	8004126 <HCD_HC_IN_IRQHandler+0x354>
    {
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	015a      	lsls	r2, r3, #5
 80040dc:	693b      	ldr	r3, [r7, #16]
 80040de:	4413      	add	r3, r2
 80040e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	68fa      	ldr	r2, [r7, #12]
 80040e8:	0151      	lsls	r1, r2, #5
 80040ea:	693a      	ldr	r2, [r7, #16]
 80040ec:	440a      	add	r2, r1
 80040ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80040f2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80040f6:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80040f8:	687a      	ldr	r2, [r7, #4]
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	212c      	movs	r1, #44	; 0x2c
 80040fe:	fb01 f303 	mul.w	r3, r1, r3
 8004102:	4413      	add	r3, r2
 8004104:	3360      	adds	r3, #96	; 0x60
 8004106:	2201      	movs	r2, #1
 8004108:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	b2d9      	uxtb	r1, r3
 800410e:	687a      	ldr	r2, [r7, #4]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	202c      	movs	r0, #44	; 0x2c
 8004114:	fb00 f303 	mul.w	r3, r0, r3
 8004118:	4413      	add	r3, r2
 800411a:	3360      	adds	r3, #96	; 0x60
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f00d feb3 	bl	8011e8c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	691b      	ldr	r3, [r3, #16]
 800412a:	2b01      	cmp	r3, #1
 800412c:	d12b      	bne.n	8004186 <HCD_HC_IN_IRQHandler+0x3b4>
    {
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800412e:	687a      	ldr	r2, [r7, #4]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	212c      	movs	r1, #44	; 0x2c
 8004134:	fb01 f303 	mul.w	r3, r1, r3
 8004138:	4413      	add	r3, r2
 800413a:	3348      	adds	r3, #72	; 0x48
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	68fa      	ldr	r2, [r7, #12]
 8004142:	202c      	movs	r0, #44	; 0x2c
 8004144:	fb00 f202 	mul.w	r2, r0, r2
 8004148:	440a      	add	r2, r1
 800414a:	3240      	adds	r2, #64	; 0x40
 800414c:	8812      	ldrh	r2, [r2, #0]
 800414e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	f000 825a 	beq.w	8004610 <HCD_HC_IN_IRQHandler+0x83e>
      {
        hhcd->hc[ch_num].toggle_in ^= 1U;
 800415c:	687a      	ldr	r2, [r7, #4]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	212c      	movs	r1, #44	; 0x2c
 8004162:	fb01 f303 	mul.w	r3, r1, r3
 8004166:	4413      	add	r3, r2
 8004168:	3354      	adds	r3, #84	; 0x54
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	f083 0301 	eor.w	r3, r3, #1
 8004170:	b2d8      	uxtb	r0, r3
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	212c      	movs	r1, #44	; 0x2c
 8004178:	fb01 f303 	mul.w	r3, r1, r3
 800417c:	4413      	add	r3, r2
 800417e:	3354      	adds	r3, #84	; 0x54
 8004180:	4602      	mov	r2, r0
 8004182:	701a      	strb	r2, [r3, #0]
 8004184:	e244      	b.n	8004610 <HCD_HC_IN_IRQHandler+0x83e>
      }
    }
    else
    {
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	212c      	movs	r1, #44	; 0x2c
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	4413      	add	r3, r2
 8004192:	3354      	adds	r3, #84	; 0x54
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	f083 0301 	eor.w	r3, r3, #1
 800419a:	b2d8      	uxtb	r0, r3
 800419c:	687a      	ldr	r2, [r7, #4]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	212c      	movs	r1, #44	; 0x2c
 80041a2:	fb01 f303 	mul.w	r3, r1, r3
 80041a6:	4413      	add	r3, r2
 80041a8:	3354      	adds	r3, #84	; 0x54
 80041aa:	4602      	mov	r2, r0
 80041ac:	701a      	strb	r2, [r3, #0]
 80041ae:	e22f      	b.n	8004610 <HCD_HC_IN_IRQHandler+0x83e>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	4611      	mov	r1, r2
 80041ba:	4618      	mov	r0, r3
 80041bc:	f007 ff0b 	bl	800bfd6 <USB_ReadChInterrupts>
 80041c0:	4603      	mov	r3, r0
 80041c2:	f003 0320 	and.w	r3, r3, #32
 80041c6:	2b20      	cmp	r3, #32
 80041c8:	d109      	bne.n	80041de <HCD_HC_IN_IRQHandler+0x40c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	015a      	lsls	r2, r3, #5
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	4413      	add	r3, r2
 80041d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041d6:	461a      	mov	r2, r3
 80041d8:	2320      	movs	r3, #32
 80041da:	6093      	str	r3, [r2, #8]
 80041dc:	e218      	b.n	8004610 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	b2d2      	uxtb	r2, r2
 80041e6:	4611      	mov	r1, r2
 80041e8:	4618      	mov	r0, r3
 80041ea:	f007 fef4 	bl	800bfd6 <USB_ReadChInterrupts>
 80041ee:	4603      	mov	r3, r0
 80041f0:	f003 0302 	and.w	r3, r3, #2
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	f040 816b 	bne.w	80044d0 <HCD_HC_IN_IRQHandler+0x6fe>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	015a      	lsls	r2, r3, #5
 80041fe:	693b      	ldr	r3, [r7, #16]
 8004200:	4413      	add	r3, r2
 8004202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004206:	461a      	mov	r2, r3
 8004208:	2302      	movs	r3, #2
 800420a:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800420c:	687a      	ldr	r2, [r7, #4]
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	212c      	movs	r1, #44	; 0x2c
 8004212:	fb01 f303 	mul.w	r3, r1, r3
 8004216:	4413      	add	r3, r2
 8004218:	3361      	adds	r3, #97	; 0x61
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	2b01      	cmp	r3, #1
 800421e:	d112      	bne.n	8004246 <HCD_HC_IN_IRQHandler+0x474>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	212c      	movs	r1, #44	; 0x2c
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	4413      	add	r3, r2
 800422c:	3361      	adds	r3, #97	; 0x61
 800422e:	2202      	movs	r2, #2
 8004230:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	3360      	adds	r3, #96	; 0x60
 8004240:	2201      	movs	r2, #1
 8004242:	701a      	strb	r2, [r3, #0]
 8004244:	e135      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	3361      	adds	r3, #97	; 0x61
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d112      	bne.n	8004280 <HCD_HC_IN_IRQHandler+0x4ae>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	3361      	adds	r3, #97	; 0x61
 8004268:	2202      	movs	r2, #2
 800426a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_STALL;
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	212c      	movs	r1, #44	; 0x2c
 8004272:	fb01 f303 	mul.w	r3, r1, r3
 8004276:	4413      	add	r3, r2
 8004278:	3360      	adds	r3, #96	; 0x60
 800427a:	2205      	movs	r2, #5
 800427c:	701a      	strb	r2, [r3, #0]
 800427e:	e118      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	212c      	movs	r1, #44	; 0x2c
 8004286:	fb01 f303 	mul.w	r3, r1, r3
 800428a:	4413      	add	r3, r2
 800428c:	3361      	adds	r3, #97	; 0x61
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	2b07      	cmp	r3, #7
 8004292:	d009      	beq.n	80042a8 <HCD_HC_IN_IRQHandler+0x4d6>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	212c      	movs	r1, #44	; 0x2c
 800429a:	fb01 f303 	mul.w	r3, r1, r3
 800429e:	4413      	add	r3, r2
 80042a0:	3361      	adds	r3, #97	; 0x61
 80042a2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80042a4:	2b09      	cmp	r3, #9
 80042a6:	d159      	bne.n	800435c <HCD_HC_IN_IRQHandler+0x58a>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	212c      	movs	r1, #44	; 0x2c
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	4413      	add	r3, r2
 80042b4:	3361      	adds	r3, #97	; 0x61
 80042b6:	2202      	movs	r2, #2
 80042b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	212c      	movs	r1, #44	; 0x2c
 80042c0:	fb01 f303 	mul.w	r3, r1, r3
 80042c4:	4413      	add	r3, r2
 80042c6:	335c      	adds	r3, #92	; 0x5c
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	1c5a      	adds	r2, r3, #1
 80042cc:	6879      	ldr	r1, [r7, #4]
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	202c      	movs	r0, #44	; 0x2c
 80042d2:	fb00 f303 	mul.w	r3, r0, r3
 80042d6:	440b      	add	r3, r1
 80042d8:	335c      	adds	r3, #92	; 0x5c
 80042da:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	212c      	movs	r1, #44	; 0x2c
 80042e2:	fb01 f303 	mul.w	r3, r1, r3
 80042e6:	4413      	add	r3, r2
 80042e8:	335c      	adds	r3, #92	; 0x5c
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d912      	bls.n	8004316 <HCD_HC_IN_IRQHandler+0x544>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	212c      	movs	r1, #44	; 0x2c
 80042f6:	fb01 f303 	mul.w	r3, r1, r3
 80042fa:	4413      	add	r3, r2
 80042fc:	335c      	adds	r3, #92	; 0x5c
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	212c      	movs	r1, #44	; 0x2c
 8004308:	fb01 f303 	mul.w	r3, r1, r3
 800430c:	4413      	add	r3, r2
 800430e:	3360      	adds	r3, #96	; 0x60
 8004310:	2204      	movs	r2, #4
 8004312:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004314:	e0cd      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	212c      	movs	r1, #44	; 0x2c
 800431c:	fb01 f303 	mul.w	r3, r1, r3
 8004320:	4413      	add	r3, r2
 8004322:	3360      	adds	r3, #96	; 0x60
 8004324:	2202      	movs	r2, #2
 8004326:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	015a      	lsls	r2, r3, #5
 800432c:	693b      	ldr	r3, [r7, #16]
 800432e:	4413      	add	r3, r2
 8004330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800433e:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004346:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	015a      	lsls	r2, r3, #5
 800434c:	693b      	ldr	r3, [r7, #16]
 800434e:	4413      	add	r3, r2
 8004350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004354:	461a      	mov	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800435a:	e0aa      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800435c:	687a      	ldr	r2, [r7, #4]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	212c      	movs	r1, #44	; 0x2c
 8004362:	fb01 f303 	mul.w	r3, r1, r3
 8004366:	4413      	add	r3, r2
 8004368:	3361      	adds	r3, #97	; 0x61
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	2b05      	cmp	r3, #5
 800436e:	d109      	bne.n	8004384 <HCD_HC_IN_IRQHandler+0x5b2>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004370:	687a      	ldr	r2, [r7, #4]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	212c      	movs	r1, #44	; 0x2c
 8004376:	fb01 f303 	mul.w	r3, r1, r3
 800437a:	4413      	add	r3, r2
 800437c:	3361      	adds	r3, #97	; 0x61
 800437e:	2202      	movs	r2, #2
 8004380:	701a      	strb	r2, [r3, #0]
 8004382:	e096      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	212c      	movs	r1, #44	; 0x2c
 800438a:	fb01 f303 	mul.w	r3, r1, r3
 800438e:	4413      	add	r3, r2
 8004390:	3361      	adds	r3, #97	; 0x61
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b03      	cmp	r3, #3
 8004396:	d109      	bne.n	80043ac <HCD_HC_IN_IRQHandler+0x5da>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004398:	687a      	ldr	r2, [r7, #4]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	212c      	movs	r1, #44	; 0x2c
 800439e:	fb01 f303 	mul.w	r3, r1, r3
 80043a2:	4413      	add	r3, r2
 80043a4:	3361      	adds	r3, #97	; 0x61
 80043a6:	2202      	movs	r2, #2
 80043a8:	701a      	strb	r2, [r3, #0]
 80043aa:	e082      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80043ac:	687a      	ldr	r2, [r7, #4]
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	212c      	movs	r1, #44	; 0x2c
 80043b2:	fb01 f303 	mul.w	r3, r1, r3
 80043b6:	4413      	add	r3, r2
 80043b8:	3361      	adds	r3, #97	; 0x61
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	2b04      	cmp	r3, #4
 80043be:	d13f      	bne.n	8004440 <HCD_HC_IN_IRQHandler+0x66e>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 80043c0:	687a      	ldr	r2, [r7, #4]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	212c      	movs	r1, #44	; 0x2c
 80043c6:	fb01 f303 	mul.w	r3, r1, r3
 80043ca:	4413      	add	r3, r2
 80043cc:	3361      	adds	r3, #97	; 0x61
 80043ce:	2202      	movs	r2, #2
 80043d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	212c      	movs	r1, #44	; 0x2c
 80043d8:	fb01 f303 	mul.w	r3, r1, r3
 80043dc:	4413      	add	r3, r2
 80043de:	3360      	adds	r3, #96	; 0x60
 80043e0:	2202      	movs	r2, #2
 80043e2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80043e4:	687a      	ldr	r2, [r7, #4]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	212c      	movs	r1, #44	; 0x2c
 80043ea:	fb01 f303 	mul.w	r3, r1, r3
 80043ee:	4413      	add	r3, r2
 80043f0:	333f      	adds	r3, #63	; 0x3f
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <HCD_HC_IN_IRQHandler+0x63a>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	212c      	movs	r1, #44	; 0x2c
 80043fe:	fb01 f303 	mul.w	r3, r1, r3
 8004402:	4413      	add	r3, r2
 8004404:	333f      	adds	r3, #63	; 0x3f
 8004406:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004408:	2b02      	cmp	r3, #2
 800440a:	d152      	bne.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	015a      	lsls	r2, r3, #5
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	4413      	add	r3, r2
 8004414:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004422:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800442a:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	4413      	add	r3, r2
 8004434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004438:	461a      	mov	r2, r3
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	6013      	str	r3, [r2, #0]
 800443e:	e038      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
      }
    }
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	212c      	movs	r1, #44	; 0x2c
 8004446:	fb01 f303 	mul.w	r3, r1, r3
 800444a:	4413      	add	r3, r2
 800444c:	3361      	adds	r3, #97	; 0x61
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b08      	cmp	r3, #8
 8004452:	d123      	bne.n	800449c <HCD_HC_IN_IRQHandler+0x6ca>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	212c      	movs	r1, #44	; 0x2c
 800445a:	fb01 f303 	mul.w	r3, r1, r3
 800445e:	4413      	add	r3, r2
 8004460:	3361      	adds	r3, #97	; 0x61
 8004462:	2202      	movs	r2, #2
 8004464:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	212c      	movs	r1, #44	; 0x2c
 800446c:	fb01 f303 	mul.w	r3, r1, r3
 8004470:	4413      	add	r3, r2
 8004472:	335c      	adds	r3, #92	; 0x5c
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	1c5a      	adds	r2, r3, #1
 8004478:	6879      	ldr	r1, [r7, #4]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	202c      	movs	r0, #44	; 0x2c
 800447e:	fb00 f303 	mul.w	r3, r0, r3
 8004482:	440b      	add	r3, r1
 8004484:	335c      	adds	r3, #92	; 0x5c
 8004486:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004488:	687a      	ldr	r2, [r7, #4]
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	212c      	movs	r1, #44	; 0x2c
 800448e:	fb01 f303 	mul.w	r3, r1, r3
 8004492:	4413      	add	r3, r2
 8004494:	3360      	adds	r3, #96	; 0x60
 8004496:	2204      	movs	r2, #4
 8004498:	701a      	strb	r2, [r3, #0]
 800449a:	e00a      	b.n	80044b2 <HCD_HC_IN_IRQHandler+0x6e0>
    }
    else
    {
      if (hhcd->hc[ch_num].state == HC_HALTED)
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	212c      	movs	r1, #44	; 0x2c
 80044a2:	fb01 f303 	mul.w	r3, r1, r3
 80044a6:	4413      	add	r3, r2
 80044a8:	3361      	adds	r3, #97	; 0x61
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	f000 80ae 	beq.w	800460e <HCD_HC_IN_IRQHandler+0x83c>
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	b2d9      	uxtb	r1, r3
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	202c      	movs	r0, #44	; 0x2c
 80044bc:	fb00 f303 	mul.w	r3, r0, r3
 80044c0:	4413      	add	r3, r2
 80044c2:	3360      	adds	r3, #96	; 0x60
 80044c4:	781b      	ldrb	r3, [r3, #0]
 80044c6:	461a      	mov	r2, r3
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f00d fcdf 	bl	8011e8c <HAL_HCD_HC_NotifyURBChange_Callback>
 80044ce:	e09f      	b.n	8004610 <HCD_HC_IN_IRQHandler+0x83e>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	4611      	mov	r1, r2
 80044da:	4618      	mov	r0, r3
 80044dc:	f007 fd7b 	bl	800bfd6 <USB_ReadChInterrupts>
 80044e0:	4603      	mov	r3, r0
 80044e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e6:	2b40      	cmp	r3, #64	; 0x40
 80044e8:	d123      	bne.n	8004532 <HCD_HC_IN_IRQHandler+0x760>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	015a      	lsls	r2, r3, #5
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	4413      	add	r3, r2
 80044f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80044f6:	461a      	mov	r2, r3
 80044f8:	2340      	movs	r3, #64	; 0x40
 80044fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_NYET;
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	3361      	adds	r3, #97	; 0x61
 800450a:	2205      	movs	r2, #5
 800450c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	212c      	movs	r1, #44	; 0x2c
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	4413      	add	r3, r2
 800451a:	335c      	adds	r3, #92	; 0x5c
 800451c:	2200      	movs	r2, #0
 800451e:	601a      	str	r2, [r3, #0]

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	4611      	mov	r1, r2
 800452a:	4618      	mov	r0, r3
 800452c:	f008 faa7 	bl	800ca7e <USB_HC_Halt>
 8004530:	e06e      	b.n	8004610 <HCD_HC_IN_IRQHandler+0x83e>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68fa      	ldr	r2, [r7, #12]
 8004538:	b2d2      	uxtb	r2, r2
 800453a:	4611      	mov	r1, r2
 800453c:	4618      	mov	r0, r3
 800453e:	f007 fd4a 	bl	800bfd6 <USB_ReadChInterrupts>
 8004542:	4603      	mov	r3, r0
 8004544:	f003 0310 	and.w	r3, r3, #16
 8004548:	2b10      	cmp	r3, #16
 800454a:	d161      	bne.n	8004610 <HCD_HC_IN_IRQHandler+0x83e>
  {
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	333f      	adds	r3, #63	; 0x3f
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b03      	cmp	r3, #3
 800455e:	d11a      	bne.n	8004596 <HCD_HC_IN_IRQHandler+0x7c4>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	335c      	adds	r3, #92	; 0x5c
 800456e:	2200      	movs	r2, #0
 8004570:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8004572:	687a      	ldr	r2, [r7, #4]
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	212c      	movs	r1, #44	; 0x2c
 8004578:	fb01 f303 	mul.w	r3, r1, r3
 800457c:	4413      	add	r3, r2
 800457e:	3361      	adds	r3, #97	; 0x61
 8004580:	2204      	movs	r2, #4
 8004582:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	68fa      	ldr	r2, [r7, #12]
 800458a:	b2d2      	uxtb	r2, r2
 800458c:	4611      	mov	r1, r2
 800458e:	4618      	mov	r0, r3
 8004590:	f008 fa75 	bl	800ca7e <USB_HC_Halt>
 8004594:	e031      	b.n	80045fa <HCD_HC_IN_IRQHandler+0x828>
    }
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8004596:	687a      	ldr	r2, [r7, #4]
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	212c      	movs	r1, #44	; 0x2c
 800459c:	fb01 f303 	mul.w	r3, r1, r3
 80045a0:	4413      	add	r3, r2
 80045a2:	333f      	adds	r3, #63	; 0x3f
 80045a4:	781b      	ldrb	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HCD_HC_IN_IRQHandler+0x7ec>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	333f      	adds	r3, #63	; 0x3f
 80045b8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d11d      	bne.n	80045fa <HCD_HC_IN_IRQHandler+0x828>
    {
      hhcd->hc[ch_num].ErrCnt = 0U;
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	335c      	adds	r3, #92	; 0x5c
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

      if (hhcd->Init.dma_enable == 0U)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d110      	bne.n	80045fa <HCD_HC_IN_IRQHandler+0x828>
      {
        hhcd->hc[ch_num].state = HC_NAK;
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	212c      	movs	r1, #44	; 0x2c
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	4413      	add	r3, r2
 80045e4:	3361      	adds	r3, #97	; 0x61
 80045e6:	2204      	movs	r2, #4
 80045e8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	4611      	mov	r1, r2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f008 fa42 	bl	800ca7e <USB_HC_Halt>
    }
    else
    {
      /* ... */
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	4413      	add	r3, r2
 8004602:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004606:	461a      	mov	r2, r3
 8004608:	2310      	movs	r3, #16
 800460a:	6093      	str	r3, [r2, #8]
 800460c:	e000      	b.n	8004610 <HCD_HC_IN_IRQHandler+0x83e>
        return;
 800460e:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004610:	3718      	adds	r7, #24
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004616:	b580      	push	{r7, lr}
 8004618:	b088      	sub	sp, #32
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	460b      	mov	r3, r1
 8004620:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004628:	69fb      	ldr	r3, [r7, #28]
 800462a:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 800462c:	78fb      	ldrb	r3, [r7, #3]
 800462e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_AHBERR))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	4611      	mov	r1, r2
 800463a:	4618      	mov	r0, r3
 800463c:	f007 fccb 	bl	800bfd6 <USB_ReadChInterrupts>
 8004640:	4603      	mov	r3, r0
 8004642:	f003 0304 	and.w	r3, r3, #4
 8004646:	2b04      	cmp	r3, #4
 8004648:	d11a      	bne.n	8004680 <HCD_HC_OUT_IRQHandler+0x6a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	69bb      	ldr	r3, [r7, #24]
 8004650:	4413      	add	r3, r2
 8004652:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004656:	461a      	mov	r2, r3
 8004658:	2304      	movs	r3, #4
 800465a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800465c:	687a      	ldr	r2, [r7, #4]
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	212c      	movs	r1, #44	; 0x2c
 8004662:	fb01 f303 	mul.w	r3, r1, r3
 8004666:	4413      	add	r3, r2
 8004668:	3361      	adds	r3, #97	; 0x61
 800466a:	2207      	movs	r2, #7
 800466c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	b2d2      	uxtb	r2, r2
 8004676:	4611      	mov	r1, r2
 8004678:	4618      	mov	r0, r3
 800467a:	f008 fa00 	bl	800ca7e <USB_HC_Halt>
 800467e:	e393      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_ACK))
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	697a      	ldr	r2, [r7, #20]
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	4611      	mov	r1, r2
 800468a:	4618      	mov	r0, r3
 800468c:	f007 fca3 	bl	800bfd6 <USB_ReadChInterrupts>
 8004690:	4603      	mov	r3, r0
 8004692:	f003 0320 	and.w	r3, r3, #32
 8004696:	2b20      	cmp	r3, #32
 8004698:	d137      	bne.n	800470a <HCD_HC_OUT_IRQHandler+0xf4>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	69bb      	ldr	r3, [r7, #24]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80046a6:	461a      	mov	r2, r3
 80046a8:	2320      	movs	r3, #32
 80046aa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[ch_num].do_ping == 1U)
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	333d      	adds	r3, #61	; 0x3d
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b01      	cmp	r3, #1
 80046be:	f040 8373 	bne.w	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
    {
      hhcd->hc[ch_num].do_ping = 0U;
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	212c      	movs	r1, #44	; 0x2c
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	333d      	adds	r3, #61	; 0x3d
 80046d0:	2200      	movs	r2, #0
 80046d2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80046d4:	687a      	ldr	r2, [r7, #4]
 80046d6:	697b      	ldr	r3, [r7, #20]
 80046d8:	212c      	movs	r1, #44	; 0x2c
 80046da:	fb01 f303 	mul.w	r3, r1, r3
 80046de:	4413      	add	r3, r2
 80046e0:	3360      	adds	r3, #96	; 0x60
 80046e2:	2202      	movs	r2, #2
 80046e4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_ACK;
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	212c      	movs	r1, #44	; 0x2c
 80046ec:	fb01 f303 	mul.w	r3, r1, r3
 80046f0:	4413      	add	r3, r2
 80046f2:	3361      	adds	r3, #97	; 0x61
 80046f4:	2203      	movs	r2, #3
 80046f6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	4611      	mov	r1, r2
 8004702:	4618      	mov	r0, r3
 8004704:	f008 f9bb 	bl	800ca7e <USB_HC_Halt>
 8004708:	e34e      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_FRMOR))
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	697a      	ldr	r2, [r7, #20]
 8004710:	b2d2      	uxtb	r2, r2
 8004712:	4611      	mov	r1, r2
 8004714:	4618      	mov	r0, r3
 8004716:	f007 fc5e 	bl	800bfd6 <USB_ReadChInterrupts>
 800471a:	4603      	mov	r3, r0
 800471c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004724:	d112      	bne.n	800474c <HCD_HC_OUT_IRQHandler+0x136>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	015a      	lsls	r2, r3, #5
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	4413      	add	r3, r2
 800472e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004732:	461a      	mov	r2, r3
 8004734:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004738:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	4611      	mov	r1, r2
 8004744:	4618      	mov	r0, r3
 8004746:	f008 f99a 	bl	800ca7e <USB_HC_Halt>
 800474a:	e32d      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_XFRC))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	697a      	ldr	r2, [r7, #20]
 8004752:	b2d2      	uxtb	r2, r2
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f007 fc3d 	bl	800bfd6 <USB_ReadChInterrupts>
 800475c:	4603      	mov	r3, r0
 800475e:	f003 0301 	and.w	r3, r3, #1
 8004762:	2b01      	cmp	r3, #1
 8004764:	d142      	bne.n	80047ec <HCD_HC_OUT_IRQHandler+0x1d6>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	335c      	adds	r3, #92	; 0x5c
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	b2d2      	uxtb	r2, r2
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f007 fc27 	bl	800bfd6 <USB_ReadChInterrupts>
 8004788:	4603      	mov	r3, r0
 800478a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800478e:	2b40      	cmp	r3, #64	; 0x40
 8004790:	d111      	bne.n	80047b6 <HCD_HC_OUT_IRQHandler+0x1a0>
    {
      hhcd->hc[ch_num].do_ping = 1U;
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	212c      	movs	r1, #44	; 0x2c
 8004798:	fb01 f303 	mul.w	r3, r1, r3
 800479c:	4413      	add	r3, r2
 800479e:	333d      	adds	r3, #61	; 0x3d
 80047a0:	2201      	movs	r2, #1
 80047a2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	69bb      	ldr	r3, [r7, #24]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b0:	461a      	mov	r2, r3
 80047b2:	2340      	movs	r3, #64	; 0x40
 80047b4:	6093      	str	r3, [r2, #8]
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	69bb      	ldr	r3, [r7, #24]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047c2:	461a      	mov	r2, r3
 80047c4:	2301      	movs	r3, #1
 80047c6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	212c      	movs	r1, #44	; 0x2c
 80047ce:	fb01 f303 	mul.w	r3, r1, r3
 80047d2:	4413      	add	r3, r2
 80047d4:	3361      	adds	r3, #97	; 0x61
 80047d6:	2201      	movs	r2, #1
 80047d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	697a      	ldr	r2, [r7, #20]
 80047e0:	b2d2      	uxtb	r2, r2
 80047e2:	4611      	mov	r1, r2
 80047e4:	4618      	mov	r0, r3
 80047e6:	f008 f94a 	bl	800ca7e <USB_HC_Halt>
 80047ea:	e2dd      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NYET))
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	b2d2      	uxtb	r2, r2
 80047f4:	4611      	mov	r1, r2
 80047f6:	4618      	mov	r0, r3
 80047f8:	f007 fbed 	bl	800bfd6 <USB_ReadChInterrupts>
 80047fc:	4603      	mov	r3, r0
 80047fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004802:	2b40      	cmp	r3, #64	; 0x40
 8004804:	d12c      	bne.n	8004860 <HCD_HC_OUT_IRQHandler+0x24a>
  {
    hhcd->hc[ch_num].state = HC_NYET;
 8004806:	687a      	ldr	r2, [r7, #4]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	212c      	movs	r1, #44	; 0x2c
 800480c:	fb01 f303 	mul.w	r3, r1, r3
 8004810:	4413      	add	r3, r2
 8004812:	3361      	adds	r3, #97	; 0x61
 8004814:	2205      	movs	r2, #5
 8004816:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004818:	687a      	ldr	r2, [r7, #4]
 800481a:	697b      	ldr	r3, [r7, #20]
 800481c:	212c      	movs	r1, #44	; 0x2c
 800481e:	fb01 f303 	mul.w	r3, r1, r3
 8004822:	4413      	add	r3, r2
 8004824:	333d      	adds	r3, #61	; 0x3d
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	212c      	movs	r1, #44	; 0x2c
 8004830:	fb01 f303 	mul.w	r3, r1, r3
 8004834:	4413      	add	r3, r2
 8004836:	335c      	adds	r3, #92	; 0x5c
 8004838:	2200      	movs	r2, #0
 800483a:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	697a      	ldr	r2, [r7, #20]
 8004842:	b2d2      	uxtb	r2, r2
 8004844:	4611      	mov	r1, r2
 8004846:	4618      	mov	r0, r3
 8004848:	f008 f919 	bl	800ca7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800484c:	697b      	ldr	r3, [r7, #20]
 800484e:	015a      	lsls	r2, r3, #5
 8004850:	69bb      	ldr	r3, [r7, #24]
 8004852:	4413      	add	r3, r2
 8004854:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004858:	461a      	mov	r2, r3
 800485a:	2340      	movs	r3, #64	; 0x40
 800485c:	6093      	str	r3, [r2, #8]
 800485e:	e2a3      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_STALL))
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	b2d2      	uxtb	r2, r2
 8004868:	4611      	mov	r1, r2
 800486a:	4618      	mov	r0, r3
 800486c:	f007 fbb3 	bl	800bfd6 <USB_ReadChInterrupts>
 8004870:	4603      	mov	r3, r0
 8004872:	f003 0308 	and.w	r3, r3, #8
 8004876:	2b08      	cmp	r3, #8
 8004878:	d11a      	bne.n	80048b0 <HCD_HC_OUT_IRQHandler+0x29a>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	015a      	lsls	r2, r3, #5
 800487e:	69bb      	ldr	r3, [r7, #24]
 8004880:	4413      	add	r3, r2
 8004882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004886:	461a      	mov	r2, r3
 8004888:	2308      	movs	r3, #8
 800488a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	212c      	movs	r1, #44	; 0x2c
 8004892:	fb01 f303 	mul.w	r3, r1, r3
 8004896:	4413      	add	r3, r2
 8004898:	3361      	adds	r3, #97	; 0x61
 800489a:	2206      	movs	r2, #6
 800489c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	b2d2      	uxtb	r2, r2
 80048a6:	4611      	mov	r1, r2
 80048a8:	4618      	mov	r0, r3
 80048aa:	f008 f8e8 	bl	800ca7e <USB_HC_Halt>
 80048ae:	e27b      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_NAK))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	b2d2      	uxtb	r2, r2
 80048b8:	4611      	mov	r1, r2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f007 fb8b 	bl	800bfd6 <USB_ReadChInterrupts>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f003 0310 	and.w	r3, r3, #16
 80048c6:	2b10      	cmp	r3, #16
 80048c8:	d140      	bne.n	800494c <HCD_HC_OUT_IRQHandler+0x336>
  {
    hhcd->hc[ch_num].ErrCnt = 0U;
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	212c      	movs	r1, #44	; 0x2c
 80048d0:	fb01 f303 	mul.w	r3, r1, r3
 80048d4:	4413      	add	r3, r2
 80048d6:	335c      	adds	r3, #92	; 0x5c
 80048d8:	2200      	movs	r2, #0
 80048da:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 80048dc:	687a      	ldr	r2, [r7, #4]
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	212c      	movs	r1, #44	; 0x2c
 80048e2:	fb01 f303 	mul.w	r3, r1, r3
 80048e6:	4413      	add	r3, r2
 80048e8:	3361      	adds	r3, #97	; 0x61
 80048ea:	2204      	movs	r2, #4
 80048ec:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[ch_num].do_ping == 0U)
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	697b      	ldr	r3, [r7, #20]
 80048f2:	212c      	movs	r1, #44	; 0x2c
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	4413      	add	r3, r2
 80048fa:	333d      	adds	r3, #61	; 0x3d
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d112      	bne.n	8004928 <HCD_HC_OUT_IRQHandler+0x312>
    {
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	212c      	movs	r1, #44	; 0x2c
 8004908:	fb01 f303 	mul.w	r3, r1, r3
 800490c:	4413      	add	r3, r2
 800490e:	333c      	adds	r3, #60	; 0x3c
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d108      	bne.n	8004928 <HCD_HC_OUT_IRQHandler+0x312>
      {
        hhcd->hc[ch_num].do_ping = 1U;
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	212c      	movs	r1, #44	; 0x2c
 800491c:	fb01 f303 	mul.w	r3, r1, r3
 8004920:	4413      	add	r3, r2
 8004922:	333d      	adds	r3, #61	; 0x3d
 8004924:	2201      	movs	r2, #1
 8004926:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	b2d2      	uxtb	r2, r2
 8004930:	4611      	mov	r1, r2
 8004932:	4618      	mov	r0, r3
 8004934:	f008 f8a3 	bl	800ca7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8004938:	697b      	ldr	r3, [r7, #20]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	69bb      	ldr	r3, [r7, #24]
 800493e:	4413      	add	r3, r2
 8004940:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004944:	461a      	mov	r2, r3
 8004946:	2310      	movs	r3, #16
 8004948:	6093      	str	r3, [r2, #8]
 800494a:	e22d      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_TXERR))
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	b2d2      	uxtb	r2, r2
 8004954:	4611      	mov	r1, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f007 fb3d 	bl	800bfd6 <USB_ReadChInterrupts>
 800495c:	4603      	mov	r3, r0
 800495e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004962:	2b80      	cmp	r3, #128	; 0x80
 8004964:	d164      	bne.n	8004a30 <HCD_HC_OUT_IRQHandler+0x41a>
  {
    if (hhcd->Init.dma_enable == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	691b      	ldr	r3, [r3, #16]
 800496a:	2b00      	cmp	r3, #0
 800496c:	d111      	bne.n	8004992 <HCD_HC_OUT_IRQHandler+0x37c>
    {
      hhcd->hc[ch_num].state = HC_XACTERR;
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	212c      	movs	r1, #44	; 0x2c
 8004974:	fb01 f303 	mul.w	r3, r1, r3
 8004978:	4413      	add	r3, r2
 800497a:	3361      	adds	r3, #97	; 0x61
 800497c:	2207      	movs	r2, #7
 800497e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	b2d2      	uxtb	r2, r2
 8004988:	4611      	mov	r1, r2
 800498a:	4618      	mov	r0, r3
 800498c:	f008 f877 	bl	800ca7e <USB_HC_Halt>
 8004990:	e044      	b.n	8004a1c <HCD_HC_OUT_IRQHandler+0x406>
    }
    else
    {
      hhcd->hc[ch_num].ErrCnt++;
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	212c      	movs	r1, #44	; 0x2c
 8004998:	fb01 f303 	mul.w	r3, r1, r3
 800499c:	4413      	add	r3, r2
 800499e:	335c      	adds	r3, #92	; 0x5c
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	1c5a      	adds	r2, r3, #1
 80049a4:	6879      	ldr	r1, [r7, #4]
 80049a6:	697b      	ldr	r3, [r7, #20]
 80049a8:	202c      	movs	r0, #44	; 0x2c
 80049aa:	fb00 f303 	mul.w	r3, r0, r3
 80049ae:	440b      	add	r3, r1
 80049b0:	335c      	adds	r3, #92	; 0x5c
 80049b2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	212c      	movs	r1, #44	; 0x2c
 80049ba:	fb01 f303 	mul.w	r3, r1, r3
 80049be:	4413      	add	r3, r2
 80049c0:	335c      	adds	r3, #92	; 0x5c
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d920      	bls.n	8004a0a <HCD_HC_OUT_IRQHandler+0x3f4>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	697b      	ldr	r3, [r7, #20]
 80049cc:	212c      	movs	r1, #44	; 0x2c
 80049ce:	fb01 f303 	mul.w	r3, r1, r3
 80049d2:	4413      	add	r3, r2
 80049d4:	335c      	adds	r3, #92	; 0x5c
 80049d6:	2200      	movs	r2, #0
 80049d8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80049da:	687a      	ldr	r2, [r7, #4]
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	212c      	movs	r1, #44	; 0x2c
 80049e0:	fb01 f303 	mul.w	r3, r1, r3
 80049e4:	4413      	add	r3, r2
 80049e6:	3360      	adds	r3, #96	; 0x60
 80049e8:	2204      	movs	r2, #4
 80049ea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	b2d9      	uxtb	r1, r3
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	202c      	movs	r0, #44	; 0x2c
 80049f6:	fb00 f303 	mul.w	r3, r0, r3
 80049fa:	4413      	add	r3, r2
 80049fc:	3360      	adds	r3, #96	; 0x60
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	461a      	mov	r2, r3
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f00d fa42 	bl	8011e8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004a08:	e008      	b.n	8004a1c <HCD_HC_OUT_IRQHandler+0x406>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004a0a:	687a      	ldr	r2, [r7, #4]
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	212c      	movs	r1, #44	; 0x2c
 8004a10:	fb01 f303 	mul.w	r3, r1, r3
 8004a14:	4413      	add	r3, r2
 8004a16:	3360      	adds	r3, #96	; 0x60
 8004a18:	2202      	movs	r2, #2
 8004a1a:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a28:	461a      	mov	r2, r3
 8004a2a:	2380      	movs	r3, #128	; 0x80
 8004a2c:	6093      	str	r3, [r2, #8]
 8004a2e:	e1bb      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_DTERR))
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	697a      	ldr	r2, [r7, #20]
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	4611      	mov	r1, r2
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	f007 facb 	bl	800bfd6 <USB_ReadChInterrupts>
 8004a40:	4603      	mov	r3, r0
 8004a42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a4a:	d11b      	bne.n	8004a84 <HCD_HC_OUT_IRQHandler+0x46e>
  {
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	212c      	movs	r1, #44	; 0x2c
 8004a52:	fb01 f303 	mul.w	r3, r1, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	3361      	adds	r3, #97	; 0x61
 8004a5a:	2209      	movs	r2, #9
 8004a5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	b2d2      	uxtb	r2, r2
 8004a66:	4611      	mov	r1, r2
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f008 f808 	bl	800ca7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	015a      	lsls	r2, r3, #5
 8004a72:	69bb      	ldr	r3, [r7, #24]
 8004a74:	4413      	add	r3, r2
 8004a76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a80:	6093      	str	r3, [r2, #8]
 8004a82:	e191      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, ch_num, USB_OTG_HCINT_CHH))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	697a      	ldr	r2, [r7, #20]
 8004a8a:	b2d2      	uxtb	r2, r2
 8004a8c:	4611      	mov	r1, r2
 8004a8e:	4618      	mov	r0, r3
 8004a90:	f007 faa1 	bl	800bfd6 <USB_ReadChInterrupts>
 8004a94:	4603      	mov	r3, r0
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	f040 8184 	bne.w	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004aa0:	697b      	ldr	r3, [r7, #20]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69bb      	ldr	r3, [r7, #24]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004aac:	461a      	mov	r2, r3
 8004aae:	2302      	movs	r3, #2
 8004ab0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	212c      	movs	r1, #44	; 0x2c
 8004ab8:	fb01 f303 	mul.w	r3, r1, r3
 8004abc:	4413      	add	r3, r2
 8004abe:	3361      	adds	r3, #97	; 0x61
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	f040 8087 	bne.w	8004bd6 <HCD_HC_OUT_IRQHandler+0x5c0>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	212c      	movs	r1, #44	; 0x2c
 8004ace:	fb01 f303 	mul.w	r3, r1, r3
 8004ad2:	4413      	add	r3, r2
 8004ad4:	3361      	adds	r3, #97	; 0x61
 8004ad6:	2202      	movs	r2, #2
 8004ad8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	697b      	ldr	r3, [r7, #20]
 8004ade:	212c      	movs	r1, #44	; 0x2c
 8004ae0:	fb01 f303 	mul.w	r3, r1, r3
 8004ae4:	4413      	add	r3, r2
 8004ae6:	3360      	adds	r3, #96	; 0x60
 8004ae8:	2201      	movs	r2, #1
 8004aea:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004aec:	687a      	ldr	r2, [r7, #4]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	212c      	movs	r1, #44	; 0x2c
 8004af2:	fb01 f303 	mul.w	r3, r1, r3
 8004af6:	4413      	add	r3, r2
 8004af8:	333f      	adds	r3, #63	; 0x3f
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d00a      	beq.n	8004b16 <HCD_HC_OUT_IRQHandler+0x500>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	212c      	movs	r1, #44	; 0x2c
 8004b06:	fb01 f303 	mul.w	r3, r1, r3
 8004b0a:	4413      	add	r3, r2
 8004b0c:	333f      	adds	r3, #63	; 0x3f
 8004b0e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004b10:	2b03      	cmp	r3, #3
 8004b12:	f040 8139 	bne.w	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
      {
        if (hhcd->Init.dma_enable == 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d113      	bne.n	8004b46 <HCD_HC_OUT_IRQHandler+0x530>
        {
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	212c      	movs	r1, #44	; 0x2c
 8004b24:	fb01 f303 	mul.w	r3, r1, r3
 8004b28:	4413      	add	r3, r2
 8004b2a:	3355      	adds	r3, #85	; 0x55
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	f083 0301 	eor.w	r3, r3, #1
 8004b32:	b2d8      	uxtb	r0, r3
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	212c      	movs	r1, #44	; 0x2c
 8004b3a:	fb01 f303 	mul.w	r3, r1, r3
 8004b3e:	4413      	add	r3, r2
 8004b40:	3355      	adds	r3, #85	; 0x55
 8004b42:	4602      	mov	r2, r0
 8004b44:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	691b      	ldr	r3, [r3, #16]
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	f040 811c 	bne.w	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
 8004b50:	687a      	ldr	r2, [r7, #4]
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	212c      	movs	r1, #44	; 0x2c
 8004b56:	fb01 f303 	mul.w	r3, r1, r3
 8004b5a:	4413      	add	r3, r2
 8004b5c:	334c      	adds	r3, #76	; 0x4c
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	f000 8111 	beq.w	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
        {
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004b66:	687a      	ldr	r2, [r7, #4]
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	212c      	movs	r1, #44	; 0x2c
 8004b6c:	fb01 f303 	mul.w	r3, r1, r3
 8004b70:	4413      	add	r3, r2
 8004b72:	334c      	adds	r3, #76	; 0x4c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	6879      	ldr	r1, [r7, #4]
 8004b78:	697a      	ldr	r2, [r7, #20]
 8004b7a:	202c      	movs	r0, #44	; 0x2c
 8004b7c:	fb00 f202 	mul.w	r2, r0, r2
 8004b80:	440a      	add	r2, r1
 8004b82:	3240      	adds	r2, #64	; 0x40
 8004b84:	8812      	ldrh	r2, [r2, #0]
 8004b86:	4413      	add	r3, r2
 8004b88:	3b01      	subs	r3, #1
 8004b8a:	6879      	ldr	r1, [r7, #4]
 8004b8c:	697a      	ldr	r2, [r7, #20]
 8004b8e:	202c      	movs	r0, #44	; 0x2c
 8004b90:	fb00 f202 	mul.w	r2, r0, r2
 8004b94:	440a      	add	r2, r1
 8004b96:	3240      	adds	r2, #64	; 0x40
 8004b98:	8812      	ldrh	r2, [r2, #0]
 8004b9a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b9e:	60fb      	str	r3, [r7, #12]

          if ((num_packets & 1U) != 0U)
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	f000 80ee 	beq.w	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
          {
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	697b      	ldr	r3, [r7, #20]
 8004bb0:	212c      	movs	r1, #44	; 0x2c
 8004bb2:	fb01 f303 	mul.w	r3, r1, r3
 8004bb6:	4413      	add	r3, r2
 8004bb8:	3355      	adds	r3, #85	; 0x55
 8004bba:	781b      	ldrb	r3, [r3, #0]
 8004bbc:	f083 0301 	eor.w	r3, r3, #1
 8004bc0:	b2d8      	uxtb	r0, r3
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	212c      	movs	r1, #44	; 0x2c
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	4413      	add	r3, r2
 8004bce:	3355      	adds	r3, #85	; 0x55
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e0d8      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
          }
        }
      }
    }
    else if (hhcd->hc[ch_num].state == HC_ACK)
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	212c      	movs	r1, #44	; 0x2c
 8004bdc:	fb01 f303 	mul.w	r3, r1, r3
 8004be0:	4413      	add	r3, r2
 8004be2:	3361      	adds	r3, #97	; 0x61
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d109      	bne.n	8004bfe <HCD_HC_OUT_IRQHandler+0x5e8>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004bea:	687a      	ldr	r2, [r7, #4]
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	212c      	movs	r1, #44	; 0x2c
 8004bf0:	fb01 f303 	mul.w	r3, r1, r3
 8004bf4:	4413      	add	r3, r2
 8004bf6:	3361      	adds	r3, #97	; 0x61
 8004bf8:	2202      	movs	r2, #2
 8004bfa:	701a      	strb	r2, [r3, #0]
 8004bfc:	e0c4      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	212c      	movs	r1, #44	; 0x2c
 8004c04:	fb01 f303 	mul.w	r3, r1, r3
 8004c08:	4413      	add	r3, r2
 8004c0a:	3361      	adds	r3, #97	; 0x61
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d112      	bne.n	8004c38 <HCD_HC_OUT_IRQHandler+0x622>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	697b      	ldr	r3, [r7, #20]
 8004c16:	212c      	movs	r1, #44	; 0x2c
 8004c18:	fb01 f303 	mul.w	r3, r1, r3
 8004c1c:	4413      	add	r3, r2
 8004c1e:	3361      	adds	r3, #97	; 0x61
 8004c20:	2202      	movs	r2, #2
 8004c22:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004c24:	687a      	ldr	r2, [r7, #4]
 8004c26:	697b      	ldr	r3, [r7, #20]
 8004c28:	212c      	movs	r1, #44	; 0x2c
 8004c2a:	fb01 f303 	mul.w	r3, r1, r3
 8004c2e:	4413      	add	r3, r2
 8004c30:	3360      	adds	r3, #96	; 0x60
 8004c32:	2202      	movs	r2, #2
 8004c34:	701a      	strb	r2, [r3, #0]
 8004c36:	e0a7      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	212c      	movs	r1, #44	; 0x2c
 8004c3e:	fb01 f303 	mul.w	r3, r1, r3
 8004c42:	4413      	add	r3, r2
 8004c44:	3361      	adds	r3, #97	; 0x61
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	2b05      	cmp	r3, #5
 8004c4a:	d112      	bne.n	8004c72 <HCD_HC_OUT_IRQHandler+0x65c>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004c4c:	687a      	ldr	r2, [r7, #4]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	212c      	movs	r1, #44	; 0x2c
 8004c52:	fb01 f303 	mul.w	r3, r1, r3
 8004c56:	4413      	add	r3, r2
 8004c58:	3361      	adds	r3, #97	; 0x61
 8004c5a:	2202      	movs	r2, #2
 8004c5c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	212c      	movs	r1, #44	; 0x2c
 8004c64:	fb01 f303 	mul.w	r3, r1, r3
 8004c68:	4413      	add	r3, r2
 8004c6a:	3360      	adds	r3, #96	; 0x60
 8004c6c:	2202      	movs	r2, #2
 8004c6e:	701a      	strb	r2, [r3, #0]
 8004c70:	e08a      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004c72:	687a      	ldr	r2, [r7, #4]
 8004c74:	697b      	ldr	r3, [r7, #20]
 8004c76:	212c      	movs	r1, #44	; 0x2c
 8004c78:	fb01 f303 	mul.w	r3, r1, r3
 8004c7c:	4413      	add	r3, r2
 8004c7e:	3361      	adds	r3, #97	; 0x61
 8004c80:	781b      	ldrb	r3, [r3, #0]
 8004c82:	2b06      	cmp	r3, #6
 8004c84:	d112      	bne.n	8004cac <HCD_HC_OUT_IRQHandler+0x696>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	212c      	movs	r1, #44	; 0x2c
 8004c8c:	fb01 f303 	mul.w	r3, r1, r3
 8004c90:	4413      	add	r3, r2
 8004c92:	3361      	adds	r3, #97	; 0x61
 8004c94:	2202      	movs	r2, #2
 8004c96:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	212c      	movs	r1, #44	; 0x2c
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	4413      	add	r3, r2
 8004ca4:	3360      	adds	r3, #96	; 0x60
 8004ca6:	2205      	movs	r2, #5
 8004ca8:	701a      	strb	r2, [r3, #0]
 8004caa:	e06d      	b.n	8004d88 <HCD_HC_OUT_IRQHandler+0x772>
    }
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	212c      	movs	r1, #44	; 0x2c
 8004cb2:	fb01 f303 	mul.w	r3, r1, r3
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3361      	adds	r3, #97	; 0x61
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b07      	cmp	r3, #7
 8004cbe:	d009      	beq.n	8004cd4 <HCD_HC_OUT_IRQHandler+0x6be>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004cc0:	687a      	ldr	r2, [r7, #4]
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	212c      	movs	r1, #44	; 0x2c
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	4413      	add	r3, r2
 8004ccc:	3361      	adds	r3, #97	; 0x61
 8004cce:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004cd0:	2b09      	cmp	r3, #9
 8004cd2:	d168      	bne.n	8004da6 <HCD_HC_OUT_IRQHandler+0x790>
    {
      hhcd->hc[ch_num].state = HC_HALTED;
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	212c      	movs	r1, #44	; 0x2c
 8004cda:	fb01 f303 	mul.w	r3, r1, r3
 8004cde:	4413      	add	r3, r2
 8004ce0:	3361      	adds	r3, #97	; 0x61
 8004ce2:	2202      	movs	r2, #2
 8004ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].ErrCnt++;
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	212c      	movs	r1, #44	; 0x2c
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	4413      	add	r3, r2
 8004cf2:	335c      	adds	r3, #92	; 0x5c
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	1c5a      	adds	r2, r3, #1
 8004cf8:	6879      	ldr	r1, [r7, #4]
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	202c      	movs	r0, #44	; 0x2c
 8004cfe:	fb00 f303 	mul.w	r3, r0, r3
 8004d02:	440b      	add	r3, r1
 8004d04:	335c      	adds	r3, #92	; 0x5c
 8004d06:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	212c      	movs	r1, #44	; 0x2c
 8004d0e:	fb01 f303 	mul.w	r3, r1, r3
 8004d12:	4413      	add	r3, r2
 8004d14:	335c      	adds	r3, #92	; 0x5c
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d912      	bls.n	8004d42 <HCD_HC_OUT_IRQHandler+0x72c>
      {
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004d1c:	687a      	ldr	r2, [r7, #4]
 8004d1e:	697b      	ldr	r3, [r7, #20]
 8004d20:	212c      	movs	r1, #44	; 0x2c
 8004d22:	fb01 f303 	mul.w	r3, r1, r3
 8004d26:	4413      	add	r3, r2
 8004d28:	335c      	adds	r3, #92	; 0x5c
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	697b      	ldr	r3, [r7, #20]
 8004d32:	212c      	movs	r1, #44	; 0x2c
 8004d34:	fb01 f303 	mul.w	r3, r1, r3
 8004d38:	4413      	add	r3, r2
 8004d3a:	3360      	adds	r3, #96	; 0x60
 8004d3c:	2204      	movs	r2, #4
 8004d3e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d40:	e021      	b.n	8004d86 <HCD_HC_OUT_IRQHandler+0x770>
      }
      else
      {
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	212c      	movs	r1, #44	; 0x2c
 8004d48:	fb01 f303 	mul.w	r3, r1, r3
 8004d4c:	4413      	add	r3, r2
 8004d4e:	3360      	adds	r3, #96	; 0x60
 8004d50:	2202      	movs	r2, #2
 8004d52:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	015a      	lsls	r2, r3, #5
 8004d58:	69bb      	ldr	r3, [r7, #24]
 8004d5a:	4413      	add	r3, r2
 8004d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004d6a:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004d6c:	693b      	ldr	r3, [r7, #16]
 8004d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004d72:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004d80:	461a      	mov	r2, r3
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8004d86:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	b2d9      	uxtb	r1, r3
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	202c      	movs	r0, #44	; 0x2c
 8004d92:	fb00 f303 	mul.w	r3, r0, r3
 8004d96:	4413      	add	r3, r2
 8004d98:	3360      	adds	r3, #96	; 0x60
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f00d f874 	bl	8011e8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004da4:	e000      	b.n	8004da8 <HCD_HC_OUT_IRQHandler+0x792>
      return;
 8004da6:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08a      	sub	sp, #40	; 0x28
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbe:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	6a1b      	ldr	r3, [r3, #32]
 8004dc6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004dc8:	69fb      	ldr	r3, [r7, #28]
 8004dca:	f003 030f 	and.w	r3, r3, #15
 8004dce:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	0c5b      	lsrs	r3, r3, #17
 8004dd4:	f003 030f 	and.w	r3, r3, #15
 8004dd8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	091b      	lsrs	r3, r3, #4
 8004dde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004de2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	2b02      	cmp	r3, #2
 8004de8:	d004      	beq.n	8004df4 <HCD_RXQLVL_IRQHandler+0x46>
 8004dea:	697b      	ldr	r3, [r7, #20]
 8004dec:	2b05      	cmp	r3, #5
 8004dee:	f000 80a9 	beq.w	8004f44 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004df2:	e0aa      	b.n	8004f4a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8004df4:	693b      	ldr	r3, [r7, #16]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	f000 80a6 	beq.w	8004f48 <HCD_RXQLVL_IRQHandler+0x19a>
 8004dfc:	687a      	ldr	r2, [r7, #4]
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	212c      	movs	r1, #44	; 0x2c
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	4413      	add	r3, r2
 8004e08:	3344      	adds	r3, #68	; 0x44
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 809b 	beq.w	8004f48 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	69bb      	ldr	r3, [r7, #24]
 8004e16:	212c      	movs	r1, #44	; 0x2c
 8004e18:	fb01 f303 	mul.w	r3, r1, r3
 8004e1c:	4413      	add	r3, r2
 8004e1e:	3350      	adds	r3, #80	; 0x50
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	441a      	add	r2, r3
 8004e26:	6879      	ldr	r1, [r7, #4]
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	202c      	movs	r0, #44	; 0x2c
 8004e2c:	fb00 f303 	mul.w	r3, r0, r3
 8004e30:	440b      	add	r3, r1
 8004e32:	334c      	adds	r3, #76	; 0x4c
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d87a      	bhi.n	8004f30 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6818      	ldr	r0, [r3, #0]
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	212c      	movs	r1, #44	; 0x2c
 8004e44:	fb01 f303 	mul.w	r3, r1, r3
 8004e48:	4413      	add	r3, r2
 8004e4a:	3344      	adds	r3, #68	; 0x44
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	693a      	ldr	r2, [r7, #16]
 8004e50:	b292      	uxth	r2, r2
 8004e52:	4619      	mov	r1, r3
 8004e54:	f006 ff18 	bl	800bc88 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004e58:	687a      	ldr	r2, [r7, #4]
 8004e5a:	69bb      	ldr	r3, [r7, #24]
 8004e5c:	212c      	movs	r1, #44	; 0x2c
 8004e5e:	fb01 f303 	mul.w	r3, r1, r3
 8004e62:	4413      	add	r3, r2
 8004e64:	3344      	adds	r3, #68	; 0x44
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	441a      	add	r2, r3
 8004e6c:	6879      	ldr	r1, [r7, #4]
 8004e6e:	69bb      	ldr	r3, [r7, #24]
 8004e70:	202c      	movs	r0, #44	; 0x2c
 8004e72:	fb00 f303 	mul.w	r3, r0, r3
 8004e76:	440b      	add	r3, r1
 8004e78:	3344      	adds	r3, #68	; 0x44
 8004e7a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	69bb      	ldr	r3, [r7, #24]
 8004e80:	212c      	movs	r1, #44	; 0x2c
 8004e82:	fb01 f303 	mul.w	r3, r1, r3
 8004e86:	4413      	add	r3, r2
 8004e88:	3350      	adds	r3, #80	; 0x50
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	693b      	ldr	r3, [r7, #16]
 8004e8e:	441a      	add	r2, r3
 8004e90:	6879      	ldr	r1, [r7, #4]
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	202c      	movs	r0, #44	; 0x2c
 8004e96:	fb00 f303 	mul.w	r3, r0, r3
 8004e9a:	440b      	add	r3, r1
 8004e9c:	3350      	adds	r3, #80	; 0x50
 8004e9e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	015a      	lsls	r2, r3, #5
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	4413      	add	r3, r2
 8004ea8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	0cdb      	lsrs	r3, r3, #19
 8004eb0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004eb4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	69bb      	ldr	r3, [r7, #24]
 8004eba:	212c      	movs	r1, #44	; 0x2c
 8004ebc:	fb01 f303 	mul.w	r3, r1, r3
 8004ec0:	4413      	add	r3, r2
 8004ec2:	3340      	adds	r3, #64	; 0x40
 8004ec4:	881b      	ldrh	r3, [r3, #0]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	693b      	ldr	r3, [r7, #16]
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d13c      	bne.n	8004f48 <HCD_RXQLVL_IRQHandler+0x19a>
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d039      	beq.n	8004f48 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	015a      	lsls	r2, r3, #5
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	4413      	add	r3, r2
 8004edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004ee4:	68bb      	ldr	r3, [r7, #8]
 8004ee6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004eea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004eec:	68bb      	ldr	r3, [r7, #8]
 8004eee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004ef2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	015a      	lsls	r2, r3, #5
 8004ef8:	6a3b      	ldr	r3, [r7, #32]
 8004efa:	4413      	add	r3, r2
 8004efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f00:	461a      	mov	r2, r3
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	212c      	movs	r1, #44	; 0x2c
 8004f0c:	fb01 f303 	mul.w	r3, r1, r3
 8004f10:	4413      	add	r3, r2
 8004f12:	3354      	adds	r3, #84	; 0x54
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	f083 0301 	eor.w	r3, r3, #1
 8004f1a:	b2d8      	uxtb	r0, r3
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	212c      	movs	r1, #44	; 0x2c
 8004f22:	fb01 f303 	mul.w	r3, r1, r3
 8004f26:	4413      	add	r3, r2
 8004f28:	3354      	adds	r3, #84	; 0x54
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	701a      	strb	r2, [r3, #0]
      break;
 8004f2e:	e00b      	b.n	8004f48 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	212c      	movs	r1, #44	; 0x2c
 8004f36:	fb01 f303 	mul.w	r3, r1, r3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	3360      	adds	r3, #96	; 0x60
 8004f3e:	2204      	movs	r2, #4
 8004f40:	701a      	strb	r2, [r3, #0]
      break;
 8004f42:	e001      	b.n	8004f48 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004f44:	bf00      	nop
 8004f46:	e000      	b.n	8004f4a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004f48:	bf00      	nop
  }
}
 8004f4a:	bf00      	nop
 8004f4c:	3728      	adds	r7, #40	; 0x28
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004f52:	b580      	push	{r7, lr}
 8004f54:	b086      	sub	sp, #24
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004f7e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f003 0302 	and.w	r3, r3, #2
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d10b      	bne.n	8004fa2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d102      	bne.n	8004f9a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f00c ff5d 	bl	8011e54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	f043 0302 	orr.w	r3, r3, #2
 8004fa0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d132      	bne.n	8005012 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f043 0308 	orr.w	r3, r3, #8
 8004fb2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	f003 0304 	and.w	r3, r3, #4
 8004fba:	2b04      	cmp	r3, #4
 8004fbc:	d126      	bne.n	800500c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	699b      	ldr	r3, [r3, #24]
 8004fc2:	2b02      	cmp	r3, #2
 8004fc4:	d113      	bne.n	8004fee <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8004fcc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004fd0:	d106      	bne.n	8004fe0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	2102      	movs	r1, #2
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f007 fa15 	bl	800c408 <USB_InitFSLSPClkSel>
 8004fde:	e011      	b.n	8005004 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f007 fa0e 	bl	800c408 <USB_InitFSLSPClkSel>
 8004fec:	e00a      	b.n	8005004 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d106      	bne.n	8005004 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f64e 2360 	movw	r3, #60000	; 0xea60
 8005002:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005004:	6878      	ldr	r0, [r7, #4]
 8005006:	f00c ff4f 	bl	8011ea8 <HAL_HCD_PortEnabled_Callback>
 800500a:	e002      	b.n	8005012 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800500c:	6878      	ldr	r0, [r7, #4]
 800500e:	f00c ff59 	bl	8011ec4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f003 0320 	and.w	r3, r3, #32
 8005018:	2b20      	cmp	r3, #32
 800501a:	d103      	bne.n	8005024 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f043 0320 	orr.w	r3, r3, #32
 8005022:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800502a:	461a      	mov	r2, r3
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	6013      	str	r3, [r2, #0]
}
 8005030:	bf00      	nop
 8005032:	3718      	adds	r7, #24
 8005034:	46bd      	mov	sp, r7
 8005036:	bd80      	pop	{r7, pc}

08005038 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005038:	b5f0      	push	{r4, r5, r6, r7, lr}
 800503a:	b08f      	sub	sp, #60	; 0x3c
 800503c:	af0a      	add	r7, sp, #40	; 0x28
 800503e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e116      	b.n	8005278 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005056:	b2db      	uxtb	r3, r3
 8005058:	2b00      	cmp	r3, #0
 800505a:	d106      	bne.n	800506a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	f00c faad 	bl	80115c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2203      	movs	r2, #3
 800506e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800507a:	2b00      	cmp	r3, #0
 800507c:	d102      	bne.n	8005084 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4618      	mov	r0, r3
 800508a:	f005 fda8 	bl	800abde <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	603b      	str	r3, [r7, #0]
 8005094:	687e      	ldr	r6, [r7, #4]
 8005096:	466d      	mov	r5, sp
 8005098:	f106 0410 	add.w	r4, r6, #16
 800509c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800509e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80050a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80050a4:	e894 0003 	ldmia.w	r4, {r0, r1}
 80050a8:	e885 0003 	stmia.w	r5, {r0, r1}
 80050ac:	1d33      	adds	r3, r6, #4
 80050ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80050b0:	6838      	ldr	r0, [r7, #0]
 80050b2:	f005 fc89 	bl	800a9c8 <USB_CoreInit>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d005      	beq.n	80050c8 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2202      	movs	r2, #2
 80050c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80050c4:	2301      	movs	r3, #1
 80050c6:	e0d7      	b.n	8005278 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2100      	movs	r1, #0
 80050ce:	4618      	mov	r0, r3
 80050d0:	f005 fd96 	bl	800ac00 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80050d4:	2300      	movs	r3, #0
 80050d6:	73fb      	strb	r3, [r7, #15]
 80050d8:	e04a      	b.n	8005170 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80050da:	7bfa      	ldrb	r2, [r7, #15]
 80050dc:	6879      	ldr	r1, [r7, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	00db      	lsls	r3, r3, #3
 80050e2:	4413      	add	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	440b      	add	r3, r1
 80050e8:	333d      	adds	r3, #61	; 0x3d
 80050ea:	2201      	movs	r2, #1
 80050ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80050ee:	7bfa      	ldrb	r2, [r7, #15]
 80050f0:	6879      	ldr	r1, [r7, #4]
 80050f2:	4613      	mov	r3, r2
 80050f4:	00db      	lsls	r3, r3, #3
 80050f6:	4413      	add	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	440b      	add	r3, r1
 80050fc:	333c      	adds	r3, #60	; 0x3c
 80050fe:	7bfa      	ldrb	r2, [r7, #15]
 8005100:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005102:	7bfa      	ldrb	r2, [r7, #15]
 8005104:	7bfb      	ldrb	r3, [r7, #15]
 8005106:	b298      	uxth	r0, r3
 8005108:	6879      	ldr	r1, [r7, #4]
 800510a:	4613      	mov	r3, r2
 800510c:	00db      	lsls	r3, r3, #3
 800510e:	4413      	add	r3, r2
 8005110:	009b      	lsls	r3, r3, #2
 8005112:	440b      	add	r3, r1
 8005114:	3344      	adds	r3, #68	; 0x44
 8005116:	4602      	mov	r2, r0
 8005118:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800511a:	7bfa      	ldrb	r2, [r7, #15]
 800511c:	6879      	ldr	r1, [r7, #4]
 800511e:	4613      	mov	r3, r2
 8005120:	00db      	lsls	r3, r3, #3
 8005122:	4413      	add	r3, r2
 8005124:	009b      	lsls	r3, r3, #2
 8005126:	440b      	add	r3, r1
 8005128:	3340      	adds	r3, #64	; 0x40
 800512a:	2200      	movs	r2, #0
 800512c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800512e:	7bfa      	ldrb	r2, [r7, #15]
 8005130:	6879      	ldr	r1, [r7, #4]
 8005132:	4613      	mov	r3, r2
 8005134:	00db      	lsls	r3, r3, #3
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	3348      	adds	r3, #72	; 0x48
 800513e:	2200      	movs	r2, #0
 8005140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005142:	7bfa      	ldrb	r2, [r7, #15]
 8005144:	6879      	ldr	r1, [r7, #4]
 8005146:	4613      	mov	r3, r2
 8005148:	00db      	lsls	r3, r3, #3
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	440b      	add	r3, r1
 8005150:	334c      	adds	r3, #76	; 0x4c
 8005152:	2200      	movs	r2, #0
 8005154:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005156:	7bfa      	ldrb	r2, [r7, #15]
 8005158:	6879      	ldr	r1, [r7, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	00db      	lsls	r3, r3, #3
 800515e:	4413      	add	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	440b      	add	r3, r1
 8005164:	3354      	adds	r3, #84	; 0x54
 8005166:	2200      	movs	r2, #0
 8005168:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800516a:	7bfb      	ldrb	r3, [r7, #15]
 800516c:	3301      	adds	r3, #1
 800516e:	73fb      	strb	r3, [r7, #15]
 8005170:	7bfa      	ldrb	r2, [r7, #15]
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	685b      	ldr	r3, [r3, #4]
 8005176:	429a      	cmp	r2, r3
 8005178:	d3af      	bcc.n	80050da <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800517a:	2300      	movs	r3, #0
 800517c:	73fb      	strb	r3, [r7, #15]
 800517e:	e044      	b.n	800520a <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005180:	7bfa      	ldrb	r2, [r7, #15]
 8005182:	6879      	ldr	r1, [r7, #4]
 8005184:	4613      	mov	r3, r2
 8005186:	00db      	lsls	r3, r3, #3
 8005188:	4413      	add	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	440b      	add	r3, r1
 800518e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8005192:	2200      	movs	r2, #0
 8005194:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005196:	7bfa      	ldrb	r2, [r7, #15]
 8005198:	6879      	ldr	r1, [r7, #4]
 800519a:	4613      	mov	r3, r2
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	009b      	lsls	r3, r3, #2
 80051a2:	440b      	add	r3, r1
 80051a4:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80051ac:	7bfa      	ldrb	r2, [r7, #15]
 80051ae:	6879      	ldr	r1, [r7, #4]
 80051b0:	4613      	mov	r3, r2
 80051b2:	00db      	lsls	r3, r3, #3
 80051b4:	4413      	add	r3, r2
 80051b6:	009b      	lsls	r3, r3, #2
 80051b8:	440b      	add	r3, r1
 80051ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80051be:	2200      	movs	r2, #0
 80051c0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80051c2:	7bfa      	ldrb	r2, [r7, #15]
 80051c4:	6879      	ldr	r1, [r7, #4]
 80051c6:	4613      	mov	r3, r2
 80051c8:	00db      	lsls	r3, r3, #3
 80051ca:	4413      	add	r3, r2
 80051cc:	009b      	lsls	r3, r3, #2
 80051ce:	440b      	add	r3, r1
 80051d0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80051d4:	2200      	movs	r2, #0
 80051d6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80051d8:	7bfa      	ldrb	r2, [r7, #15]
 80051da:	6879      	ldr	r1, [r7, #4]
 80051dc:	4613      	mov	r3, r2
 80051de:	00db      	lsls	r3, r3, #3
 80051e0:	4413      	add	r3, r2
 80051e2:	009b      	lsls	r3, r3, #2
 80051e4:	440b      	add	r3, r1
 80051e6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80051ea:	2200      	movs	r2, #0
 80051ec:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80051ee:	7bfa      	ldrb	r2, [r7, #15]
 80051f0:	6879      	ldr	r1, [r7, #4]
 80051f2:	4613      	mov	r3, r2
 80051f4:	00db      	lsls	r3, r3, #3
 80051f6:	4413      	add	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	440b      	add	r3, r1
 80051fc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005204:	7bfb      	ldrb	r3, [r7, #15]
 8005206:	3301      	adds	r3, #1
 8005208:	73fb      	strb	r3, [r7, #15]
 800520a:	7bfa      	ldrb	r2, [r7, #15]
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	685b      	ldr	r3, [r3, #4]
 8005210:	429a      	cmp	r2, r3
 8005212:	d3b5      	bcc.n	8005180 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	603b      	str	r3, [r7, #0]
 800521a:	687e      	ldr	r6, [r7, #4]
 800521c:	466d      	mov	r5, sp
 800521e:	f106 0410 	add.w	r4, r6, #16
 8005222:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005224:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800522a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800522e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005232:	1d33      	adds	r3, r6, #4
 8005234:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005236:	6838      	ldr	r0, [r7, #0]
 8005238:	f005 fd2e 	bl	800ac98 <USB_DevInit>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d005      	beq.n	800524e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2202      	movs	r2, #2
 8005246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e014      	b.n	8005278 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005262:	2b01      	cmp	r3, #1
 8005264:	d102      	bne.n	800526c <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f001 f97a 	bl	8006560 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4618      	mov	r0, r3
 8005272:	f006 fe7c 	bl	800bf6e <USB_DevDisconnect>

  return HAL_OK;
 8005276:	2300      	movs	r3, #0
}
 8005278:	4618      	mov	r0, r3
 800527a:	3714      	adds	r7, #20
 800527c:	46bd      	mov	sp, r7
 800527e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005280 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005280:	b580      	push	{r7, lr}
 8005282:	b082      	sub	sp, #8
 8005284:	af00      	add	r7, sp, #0
 8005286:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800528e:	2b01      	cmp	r3, #1
 8005290:	d101      	bne.n	8005296 <HAL_PCD_Start+0x16>
 8005292:	2302      	movs	r3, #2
 8005294:	e012      	b.n	80052bc <HAL_PCD_Start+0x3c>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2201      	movs	r2, #1
 800529a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  __HAL_PCD_ENABLE(hpcd);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4618      	mov	r0, r3
 80052a4:	f005 fc8a 	bl	800abbc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4618      	mov	r0, r3
 80052ae:	f006 fe3d 	bl	800bf2c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3708      	adds	r7, #8
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80052c4:	b590      	push	{r4, r7, lr}
 80052c6:	b08d      	sub	sp, #52	; 0x34
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4618      	mov	r0, r3
 80052dc:	f006 ff1c 	bl	800c118 <USB_GetMode>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	f040 84b7 	bne.w	8005c56 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4618      	mov	r0, r3
 80052ee:	f006 fe5f 	bl	800bfb0 <USB_ReadInterrupts>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	f000 84ad 	beq.w	8005c54 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0a1b      	lsrs	r3, r3, #8
 8005304:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4618      	mov	r0, r3
 8005314:	f006 fe4c 	bl	800bfb0 <USB_ReadInterrupts>
 8005318:	4603      	mov	r3, r0
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d107      	bne.n	8005332 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f002 0202 	and.w	r2, r2, #2
 8005330:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4618      	mov	r0, r3
 8005338:	f006 fe3a 	bl	800bfb0 <USB_ReadInterrupts>
 800533c:	4603      	mov	r3, r0
 800533e:	f003 0310 	and.w	r3, r3, #16
 8005342:	2b10      	cmp	r3, #16
 8005344:	d161      	bne.n	800540a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	699a      	ldr	r2, [r3, #24]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f022 0210 	bic.w	r2, r2, #16
 8005354:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	6a1b      	ldr	r3, [r3, #32]
 800535a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800535c:	69bb      	ldr	r3, [r7, #24]
 800535e:	f003 020f 	and.w	r2, r3, #15
 8005362:	4613      	mov	r3, r2
 8005364:	00db      	lsls	r3, r3, #3
 8005366:	4413      	add	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	3304      	adds	r3, #4
 8005374:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005376:	69bb      	ldr	r3, [r7, #24]
 8005378:	0c5b      	lsrs	r3, r3, #17
 800537a:	f003 030f 	and.w	r3, r3, #15
 800537e:	2b02      	cmp	r3, #2
 8005380:	d124      	bne.n	80053cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005388:	4013      	ands	r3, r2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d035      	beq.n	80053fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005392:	69bb      	ldr	r3, [r7, #24]
 8005394:	091b      	lsrs	r3, r3, #4
 8005396:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800539c:	b29b      	uxth	r3, r3
 800539e:	461a      	mov	r2, r3
 80053a0:	6a38      	ldr	r0, [r7, #32]
 80053a2:	f006 fc71 	bl	800bc88 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	691a      	ldr	r2, [r3, #16]
 80053aa:	69bb      	ldr	r3, [r7, #24]
 80053ac:	091b      	lsrs	r3, r3, #4
 80053ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053b2:	441a      	add	r2, r3
 80053b4:	697b      	ldr	r3, [r7, #20]
 80053b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	6a1a      	ldr	r2, [r3, #32]
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	091b      	lsrs	r3, r3, #4
 80053c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053c4:	441a      	add	r2, r3
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	621a      	str	r2, [r3, #32]
 80053ca:	e016      	b.n	80053fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80053cc:	69bb      	ldr	r3, [r7, #24]
 80053ce:	0c5b      	lsrs	r3, r3, #17
 80053d0:	f003 030f 	and.w	r3, r3, #15
 80053d4:	2b06      	cmp	r3, #6
 80053d6:	d110      	bne.n	80053fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80053de:	2208      	movs	r2, #8
 80053e0:	4619      	mov	r1, r3
 80053e2:	6a38      	ldr	r0, [r7, #32]
 80053e4:	f006 fc50 	bl	800bc88 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	6a1a      	ldr	r2, [r3, #32]
 80053ec:	69bb      	ldr	r3, [r7, #24]
 80053ee:	091b      	lsrs	r3, r3, #4
 80053f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80053f4:	441a      	add	r2, r3
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	699a      	ldr	r2, [r3, #24]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f042 0210 	orr.w	r2, r2, #16
 8005408:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4618      	mov	r0, r3
 8005410:	f006 fdce 	bl	800bfb0 <USB_ReadInterrupts>
 8005414:	4603      	mov	r3, r0
 8005416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800541a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800541e:	f040 80a7 	bne.w	8005570 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4618      	mov	r0, r3
 800542c:	f006 fdf4 	bl	800c018 <USB_ReadDevAllOutEpInterrupt>
 8005430:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005432:	e099      	b.n	8005568 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	f003 0301 	and.w	r3, r3, #1
 800543a:	2b00      	cmp	r3, #0
 800543c:	f000 808e 	beq.w	800555c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	4611      	mov	r1, r2
 800544a:	4618      	mov	r0, r3
 800544c:	f006 fe18 	bl	800c080 <USB_ReadDevOutEPInterrupt>
 8005450:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005452:	693b      	ldr	r3, [r7, #16]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d00c      	beq.n	8005476 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800545c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800545e:	015a      	lsls	r2, r3, #5
 8005460:	69fb      	ldr	r3, [r7, #28]
 8005462:	4413      	add	r3, r2
 8005464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005468:	461a      	mov	r2, r3
 800546a:	2301      	movs	r3, #1
 800546c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800546e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005470:	6878      	ldr	r0, [r7, #4]
 8005472:	f000 feef 	bl	8006254 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	f003 0308 	and.w	r3, r3, #8
 800547c:	2b00      	cmp	r3, #0
 800547e:	d00c      	beq.n	800549a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	015a      	lsls	r2, r3, #5
 8005484:	69fb      	ldr	r3, [r7, #28]
 8005486:	4413      	add	r3, r2
 8005488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548c:	461a      	mov	r2, r3
 800548e:	2308      	movs	r3, #8
 8005490:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005494:	6878      	ldr	r0, [r7, #4]
 8005496:	f000 ffc5 	bl	8006424 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	f003 0310 	and.w	r3, r3, #16
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d008      	beq.n	80054b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80054a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a6:	015a      	lsls	r2, r3, #5
 80054a8:	69fb      	ldr	r3, [r7, #28]
 80054aa:	4413      	add	r3, r2
 80054ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054b0:	461a      	mov	r2, r3
 80054b2:	2310      	movs	r3, #16
 80054b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f003 0302 	and.w	r3, r3, #2
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d030      	beq.n	8005522 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80054c0:	6a3b      	ldr	r3, [r7, #32]
 80054c2:	695b      	ldr	r3, [r3, #20]
 80054c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c8:	2b80      	cmp	r3, #128	; 0x80
 80054ca:	d109      	bne.n	80054e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d2:	685b      	ldr	r3, [r3, #4]
 80054d4:	69fa      	ldr	r2, [r7, #28]
 80054d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80054e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e2:	4613      	mov	r3, r2
 80054e4:	00db      	lsls	r3, r3, #3
 80054e6:	4413      	add	r3, r2
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80054ee:	687a      	ldr	r2, [r7, #4]
 80054f0:	4413      	add	r3, r2
 80054f2:	3304      	adds	r3, #4
 80054f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	78db      	ldrb	r3, [r3, #3]
 80054fa:	2b01      	cmp	r3, #1
 80054fc:	d108      	bne.n	8005510 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80054fe:	697b      	ldr	r3, [r7, #20]
 8005500:	2200      	movs	r2, #0
 8005502:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	b2db      	uxtb	r3, r3
 8005508:	4619      	mov	r1, r3
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f00c f974 	bl	80117f8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005512:	015a      	lsls	r2, r3, #5
 8005514:	69fb      	ldr	r3, [r7, #28]
 8005516:	4413      	add	r3, r2
 8005518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800551c:	461a      	mov	r2, r3
 800551e:	2302      	movs	r3, #2
 8005520:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f003 0320 	and.w	r3, r3, #32
 8005528:	2b00      	cmp	r3, #0
 800552a:	d008      	beq.n	800553e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800552c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005538:	461a      	mov	r2, r3
 800553a:	2320      	movs	r3, #32
 800553c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d009      	beq.n	800555c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	015a      	lsls	r2, r3, #5
 800554c:	69fb      	ldr	r3, [r7, #28]
 800554e:	4413      	add	r3, r2
 8005550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005554:	461a      	mov	r2, r3
 8005556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800555a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800555c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800555e:	3301      	adds	r3, #1
 8005560:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005564:	085b      	lsrs	r3, r3, #1
 8005566:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800556a:	2b00      	cmp	r3, #0
 800556c:	f47f af62 	bne.w	8005434 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4618      	mov	r0, r3
 8005576:	f006 fd1b 	bl	800bfb0 <USB_ReadInterrupts>
 800557a:	4603      	mov	r3, r0
 800557c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005584:	f040 80db 	bne.w	800573e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4618      	mov	r0, r3
 800558e:	f006 fd5d 	bl	800c04c <USB_ReadDevAllInEpInterrupt>
 8005592:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005594:	2300      	movs	r3, #0
 8005596:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005598:	e0cd      	b.n	8005736 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800559a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	f000 80c2 	beq.w	800572a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055ac:	b2d2      	uxtb	r2, r2
 80055ae:	4611      	mov	r1, r2
 80055b0:	4618      	mov	r0, r3
 80055b2:	f006 fd83 	bl	800c0bc <USB_ReadDevInEPInterrupt>
 80055b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f003 0301 	and.w	r3, r3, #1
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d057      	beq.n	8005672 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	f003 030f 	and.w	r3, r3, #15
 80055c8:	2201      	movs	r2, #1
 80055ca:	fa02 f303 	lsl.w	r3, r2, r3
 80055ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80055d0:	69fb      	ldr	r3, [r7, #28]
 80055d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	43db      	mvns	r3, r3
 80055dc:	69f9      	ldr	r1, [r7, #28]
 80055de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80055e2:	4013      	ands	r3, r2
 80055e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80055e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e8:	015a      	lsls	r2, r3, #5
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	4413      	add	r3, r2
 80055ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f2:	461a      	mov	r2, r3
 80055f4:	2301      	movs	r3, #1
 80055f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	691b      	ldr	r3, [r3, #16]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d132      	bne.n	8005666 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005600:	6879      	ldr	r1, [r7, #4]
 8005602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	440b      	add	r3, r1
 800560e:	334c      	adds	r3, #76	; 0x4c
 8005610:	6819      	ldr	r1, [r3, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005616:	4613      	mov	r3, r2
 8005618:	00db      	lsls	r3, r3, #3
 800561a:	4413      	add	r3, r2
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4403      	add	r3, r0
 8005620:	3348      	adds	r3, #72	; 0x48
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4419      	add	r1, r3
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800562a:	4613      	mov	r3, r2
 800562c:	00db      	lsls	r3, r3, #3
 800562e:	4413      	add	r3, r2
 8005630:	009b      	lsls	r3, r3, #2
 8005632:	4403      	add	r3, r0
 8005634:	334c      	adds	r3, #76	; 0x4c
 8005636:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800563a:	2b00      	cmp	r3, #0
 800563c:	d113      	bne.n	8005666 <HAL_PCD_IRQHandler+0x3a2>
 800563e:	6879      	ldr	r1, [r7, #4]
 8005640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005642:	4613      	mov	r3, r2
 8005644:	00db      	lsls	r3, r3, #3
 8005646:	4413      	add	r3, r2
 8005648:	009b      	lsls	r3, r3, #2
 800564a:	440b      	add	r3, r1
 800564c:	3354      	adds	r3, #84	; 0x54
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d108      	bne.n	8005666 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800565e:	461a      	mov	r2, r3
 8005660:	2101      	movs	r1, #1
 8005662:	f006 fd8b 	bl	800c17c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	b2db      	uxtb	r3, r3
 800566a:	4619      	mov	r1, r3
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f00c f83e 	bl	80116ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	f003 0308 	and.w	r3, r3, #8
 8005678:	2b00      	cmp	r3, #0
 800567a:	d008      	beq.n	800568e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800567c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	461a      	mov	r2, r3
 800568a:	2308      	movs	r3, #8
 800568c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	f003 0310 	and.w	r3, r3, #16
 8005694:	2b00      	cmp	r3, #0
 8005696:	d008      	beq.n	80056aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569a:	015a      	lsls	r2, r3, #5
 800569c:	69fb      	ldr	r3, [r7, #28]
 800569e:	4413      	add	r3, r2
 80056a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a4:	461a      	mov	r2, r3
 80056a6:	2310      	movs	r3, #16
 80056a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d008      	beq.n	80056c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80056b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056b6:	015a      	lsls	r2, r3, #5
 80056b8:	69fb      	ldr	r3, [r7, #28]
 80056ba:	4413      	add	r3, r2
 80056bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c0:	461a      	mov	r2, r3
 80056c2:	2340      	movs	r3, #64	; 0x40
 80056c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80056c6:	693b      	ldr	r3, [r7, #16]
 80056c8:	f003 0302 	and.w	r3, r3, #2
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d023      	beq.n	8005718 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80056d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80056d2:	6a38      	ldr	r0, [r7, #32]
 80056d4:	f005 fc3e 	bl	800af54 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80056d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056da:	4613      	mov	r3, r2
 80056dc:	00db      	lsls	r3, r3, #3
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	3338      	adds	r3, #56	; 0x38
 80056e4:	687a      	ldr	r2, [r7, #4]
 80056e6:	4413      	add	r3, r2
 80056e8:	3304      	adds	r3, #4
 80056ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80056ec:	697b      	ldr	r3, [r7, #20]
 80056ee:	78db      	ldrb	r3, [r3, #3]
 80056f0:	2b01      	cmp	r3, #1
 80056f2:	d108      	bne.n	8005706 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2200      	movs	r2, #0
 80056f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	4619      	mov	r1, r3
 8005700:	6878      	ldr	r0, [r7, #4]
 8005702:	f00c f88b 	bl	801181c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	461a      	mov	r2, r3
 8005714:	2302      	movs	r3, #2
 8005716:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800571e:	2b00      	cmp	r3, #0
 8005720:	d003      	beq.n	800572a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fd08 	bl	800613a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800572a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572c:	3301      	adds	r3, #1
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005732:	085b      	lsrs	r3, r3, #1
 8005734:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005738:	2b00      	cmp	r3, #0
 800573a:	f47f af2e 	bne.w	800559a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	4618      	mov	r0, r3
 8005744:	f006 fc34 	bl	800bfb0 <USB_ReadInterrupts>
 8005748:	4603      	mov	r3, r0
 800574a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800574e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005752:	d122      	bne.n	800579a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	69fa      	ldr	r2, [r7, #28]
 800575e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005762:	f023 0301 	bic.w	r3, r3, #1
 8005766:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800576e:	2b01      	cmp	r3, #1
 8005770:	d108      	bne.n	8005784 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2200      	movs	r2, #0
 8005776:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800577a:	2100      	movs	r1, #0
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f00c fa0b 	bl	8011b98 <HAL_PCDEx_LPM_Callback>
 8005782:	e002      	b.n	800578a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f00c f829 	bl	80117dc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	695a      	ldr	r2, [r3, #20]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f006 fc06 	bl	800bfb0 <USB_ReadInterrupts>
 80057a4:	4603      	mov	r3, r0
 80057a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80057ae:	d112      	bne.n	80057d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	f003 0301 	and.w	r3, r3, #1
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d102      	bne.n	80057c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f00b ffe5 	bl	8011790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	695a      	ldr	r2, [r3, #20]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80057d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4618      	mov	r0, r3
 80057dc:	f006 fbe8 	bl	800bfb0 <USB_ReadInterrupts>
 80057e0:	4603      	mov	r3, r0
 80057e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057ea:	d121      	bne.n	8005830 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	695a      	ldr	r2, [r3, #20]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 80057fa:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005802:	2b00      	cmp	r3, #0
 8005804:	d111      	bne.n	800582a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005814:	089b      	lsrs	r3, r3, #2
 8005816:	f003 020f 	and.w	r2, r3, #15
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8005820:	2101      	movs	r1, #1
 8005822:	6878      	ldr	r0, [r7, #4]
 8005824:	f00c f9b8 	bl	8011b98 <HAL_PCDEx_LPM_Callback>
 8005828:	e002      	b.n	8005830 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f00b ffb0 	bl	8011790 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4618      	mov	r0, r3
 8005836:	f006 fbbb 	bl	800bfb0 <USB_ReadInterrupts>
 800583a:	4603      	mov	r3, r0
 800583c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005840:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005844:	f040 80b7 	bne.w	80059b6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	69fa      	ldr	r2, [r7, #28]
 8005852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005856:	f023 0301 	bic.w	r3, r3, #1
 800585a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2110      	movs	r1, #16
 8005862:	4618      	mov	r0, r3
 8005864:	f005 fb76 	bl	800af54 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005868:	2300      	movs	r3, #0
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800586c:	e046      	b.n	80058fc <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800586e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005870:	015a      	lsls	r2, r3, #5
 8005872:	69fb      	ldr	r3, [r7, #28]
 8005874:	4413      	add	r3, r2
 8005876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800587a:	461a      	mov	r2, r3
 800587c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005880:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005884:	015a      	lsls	r2, r3, #5
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	4413      	add	r3, r2
 800588a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005892:	0151      	lsls	r1, r2, #5
 8005894:	69fa      	ldr	r2, [r7, #28]
 8005896:	440a      	add	r2, r1
 8005898:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800589c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058a0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	015a      	lsls	r2, r3, #5
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	4413      	add	r3, r2
 80058aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ae:	461a      	mov	r2, r3
 80058b0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80058b4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058c6:	0151      	lsls	r1, r2, #5
 80058c8:	69fa      	ldr	r2, [r7, #28]
 80058ca:	440a      	add	r2, r1
 80058cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058d4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80058d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d8:	015a      	lsls	r2, r3, #5
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	4413      	add	r3, r2
 80058de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058e6:	0151      	lsls	r1, r2, #5
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	440a      	add	r2, r1
 80058ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058f0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80058f4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f8:	3301      	adds	r3, #1
 80058fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005902:	429a      	cmp	r2, r3
 8005904:	d3b3      	bcc.n	800586e <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	69fa      	ldr	r2, [r7, #28]
 8005910:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005914:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005918:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800591e:	2b00      	cmp	r3, #0
 8005920:	d016      	beq.n	8005950 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005928:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800592c:	69fa      	ldr	r2, [r7, #28]
 800592e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005932:	f043 030b 	orr.w	r3, r3, #11
 8005936:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005942:	69fa      	ldr	r2, [r7, #28]
 8005944:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005948:	f043 030b 	orr.w	r3, r3, #11
 800594c:	6453      	str	r3, [r2, #68]	; 0x44
 800594e:	e015      	b.n	800597c <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595e:	4619      	mov	r1, r3
 8005960:	f242 032b 	movw	r3, #8235	; 0x202b
 8005964:	4313      	orrs	r3, r2
 8005966:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800596e:	691b      	ldr	r3, [r3, #16]
 8005970:	69fa      	ldr	r2, [r7, #28]
 8005972:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005976:	f043 030b 	orr.w	r3, r3, #11
 800597a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800597c:	69fb      	ldr	r3, [r7, #28]
 800597e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800598a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800598e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6818      	ldr	r0, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	691b      	ldr	r3, [r3, #16]
 8005998:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80059a0:	461a      	mov	r2, r3
 80059a2:	f006 fbeb 	bl	800c17c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	695a      	ldr	r2, [r3, #20]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80059b4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4618      	mov	r0, r3
 80059bc:	f006 faf8 	bl	800bfb0 <USB_ReadInterrupts>
 80059c0:	4603      	mov	r3, r0
 80059c2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ca:	d124      	bne.n	8005a16 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f006 fbaf 	bl	800c134 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	4618      	mov	r0, r3
 80059dc:	f005 fb37 	bl	800b04e <USB_GetDevSpeed>
 80059e0:	4603      	mov	r3, r0
 80059e2:	461a      	mov	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681c      	ldr	r4, [r3, #0]
 80059ec:	f001 fad0 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 80059f0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80059f6:	b2db      	uxtb	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	4620      	mov	r0, r4
 80059fc:	f005 f83c 	bl	800aa78 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f00b fe9c 	bl	801173e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	695a      	ldr	r2, [r3, #20]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005a14:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	f006 fac8 	bl	800bfb0 <USB_ReadInterrupts>
 8005a20:	4603      	mov	r3, r0
 8005a22:	f003 0308 	and.w	r3, r3, #8
 8005a26:	2b08      	cmp	r3, #8
 8005a28:	d10a      	bne.n	8005a40 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f00b fe79 	bl	8011722 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	695a      	ldr	r2, [r3, #20]
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f002 0208 	and.w	r2, r2, #8
 8005a3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	4618      	mov	r0, r3
 8005a46:	f006 fab3 	bl	800bfb0 <USB_ReadInterrupts>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a50:	2b80      	cmp	r3, #128	; 0x80
 8005a52:	d122      	bne.n	8005a9a <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005a54:	6a3b      	ldr	r3, [r7, #32]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005a5c:	6a3b      	ldr	r3, [r7, #32]
 8005a5e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a60:	2301      	movs	r3, #1
 8005a62:	627b      	str	r3, [r7, #36]	; 0x24
 8005a64:	e014      	b.n	8005a90 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005a66:	6879      	ldr	r1, [r7, #4]
 8005a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	00db      	lsls	r3, r3, #3
 8005a6e:	4413      	add	r3, r2
 8005a70:	009b      	lsls	r3, r3, #2
 8005a72:	440b      	add	r3, r1
 8005a74:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d105      	bne.n	8005a8a <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a80:	b2db      	uxtb	r3, r3
 8005a82:	4619      	mov	r1, r3
 8005a84:	6878      	ldr	r0, [r7, #4]
 8005a86:	f000 fb27 	bl	80060d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	627b      	str	r3, [r7, #36]	; 0x24
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d3e5      	bcc.n	8005a66 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f006 fa86 	bl	800bfb0 <USB_ReadInterrupts>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aae:	d13b      	bne.n	8005b28 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8005ab4:	e02b      	b.n	8005b0e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab8:	015a      	lsls	r2, r3, #5
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	4413      	add	r3, r2
 8005abe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ac6:	6879      	ldr	r1, [r7, #4]
 8005ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aca:	4613      	mov	r3, r2
 8005acc:	00db      	lsls	r3, r3, #3
 8005ace:	4413      	add	r3, r2
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	440b      	add	r3, r1
 8005ad4:	3340      	adds	r3, #64	; 0x40
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	2b01      	cmp	r3, #1
 8005ada:	d115      	bne.n	8005b08 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005adc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	da12      	bge.n	8005b08 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005ae2:	6879      	ldr	r1, [r7, #4]
 8005ae4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	00db      	lsls	r3, r3, #3
 8005aea:	4413      	add	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	440b      	add	r3, r1
 8005af0:	333f      	adds	r3, #63	; 0x3f
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005afe:	b2db      	uxtb	r3, r3
 8005b00:	4619      	mov	r1, r3
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fae8 	bl	80060d8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b0a:	3301      	adds	r3, #1
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b14:	429a      	cmp	r2, r3
 8005b16:	d3ce      	bcc.n	8005ab6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	695a      	ldr	r2, [r3, #20]
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005b26:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f006 fa3f 	bl	800bfb0 <USB_ReadInterrupts>
 8005b32:	4603      	mov	r3, r0
 8005b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b3c:	d155      	bne.n	8005bea <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b3e:	2301      	movs	r3, #1
 8005b40:	627b      	str	r3, [r7, #36]	; 0x24
 8005b42:	e045      	b.n	8005bd0 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	015a      	lsls	r2, r3, #5
 8005b48:	69fb      	ldr	r3, [r7, #28]
 8005b4a:	4413      	add	r3, r2
 8005b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b54:	6879      	ldr	r1, [r7, #4]
 8005b56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b58:	4613      	mov	r3, r2
 8005b5a:	00db      	lsls	r3, r3, #3
 8005b5c:	4413      	add	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	440b      	add	r3, r1
 8005b62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d12e      	bne.n	8005bca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b6c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	da2b      	bge.n	8005bca <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005b72:	69bb      	ldr	r3, [r7, #24]
 8005b74:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005b7e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d121      	bne.n	8005bca <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005b8a:	4613      	mov	r3, r2
 8005b8c:	00db      	lsls	r3, r3, #3
 8005b8e:	4413      	add	r3, r2
 8005b90:	009b      	lsls	r3, r3, #2
 8005b92:	440b      	add	r3, r1
 8005b94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005b98:	2201      	movs	r2, #1
 8005b9a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005b9c:	6a3b      	ldr	r3, [r7, #32]
 8005b9e:	699b      	ldr	r3, [r3, #24]
 8005ba0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005ba4:	6a3b      	ldr	r3, [r7, #32]
 8005ba6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	695b      	ldr	r3, [r3, #20]
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d10a      	bne.n	8005bca <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005bb4:	69fb      	ldr	r3, [r7, #28]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	685b      	ldr	r3, [r3, #4]
 8005bbc:	69fa      	ldr	r2, [r7, #28]
 8005bbe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bc2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bc6:	6053      	str	r3, [r2, #4]
            break;
 8005bc8:	e007      	b.n	8005bda <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	3301      	adds	r3, #1
 8005bce:	627b      	str	r3, [r7, #36]	; 0x24
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d3b4      	bcc.n	8005b44 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	695a      	ldr	r2, [r3, #20]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005be8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f006 f9de 	bl	800bfb0 <USB_ReadInterrupts>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005bfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bfe:	d10a      	bne.n	8005c16 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f00b fe1d 	bl	8011840 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695a      	ldr	r2, [r3, #20]
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005c14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f006 f9c8 	bl	800bfb0 <USB_ReadInterrupts>
 8005c20:	4603      	mov	r3, r0
 8005c22:	f003 0304 	and.w	r3, r3, #4
 8005c26:	2b04      	cmp	r3, #4
 8005c28:	d115      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005c32:	69bb      	ldr	r3, [r7, #24]
 8005c34:	f003 0304 	and.w	r3, r3, #4
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d002      	beq.n	8005c42 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f00b fe0d 	bl	801185c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	6859      	ldr	r1, [r3, #4]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	430a      	orrs	r2, r1
 8005c50:	605a      	str	r2, [r3, #4]
 8005c52:	e000      	b.n	8005c56 <HAL_PCD_IRQHandler+0x992>
      return;
 8005c54:	bf00      	nop
    }
  }
}
 8005c56:	3734      	adds	r7, #52	; 0x34
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd90      	pop	{r4, r7, pc}

08005c5c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b082      	sub	sp, #8
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	460b      	mov	r3, r1
 8005c66:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d101      	bne.n	8005c76 <HAL_PCD_SetAddress+0x1a>
 8005c72:	2302      	movs	r3, #2
 8005c74:	e013      	b.n	8005c9e <HAL_PCD_SetAddress+0x42>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2201      	movs	r2, #1
 8005c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	78fa      	ldrb	r2, [r7, #3]
 8005c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	78fa      	ldrb	r2, [r7, #3]
 8005c8c:	4611      	mov	r1, r2
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f006 f926 	bl	800bee0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2200      	movs	r2, #0
 8005c98:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005c9c:	2300      	movs	r3, #0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b084      	sub	sp, #16
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
 8005cae:	4608      	mov	r0, r1
 8005cb0:	4611      	mov	r1, r2
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	70fb      	strb	r3, [r7, #3]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	803b      	strh	r3, [r7, #0]
 8005cbc:	4613      	mov	r3, r2
 8005cbe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005cc4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	da0f      	bge.n	8005cec <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	f003 020f 	and.w	r2, r3, #15
 8005cd2:	4613      	mov	r3, r2
 8005cd4:	00db      	lsls	r3, r3, #3
 8005cd6:	4413      	add	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	3338      	adds	r3, #56	; 0x38
 8005cdc:	687a      	ldr	r2, [r7, #4]
 8005cde:	4413      	add	r3, r2
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2201      	movs	r2, #1
 8005ce8:	705a      	strb	r2, [r3, #1]
 8005cea:	e00f      	b.n	8005d0c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	f003 020f 	and.w	r2, r3, #15
 8005cf2:	4613      	mov	r3, r2
 8005cf4:	00db      	lsls	r3, r3, #3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005cfe:	687a      	ldr	r2, [r7, #4]
 8005d00:	4413      	add	r3, r2
 8005d02:	3304      	adds	r3, #4
 8005d04:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d0c:	78fb      	ldrb	r3, [r7, #3]
 8005d0e:	f003 030f 	and.w	r3, r3, #15
 8005d12:	b2da      	uxtb	r2, r3
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005d18:	883a      	ldrh	r2, [r7, #0]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	78ba      	ldrb	r2, [r7, #2]
 8005d22:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	785b      	ldrb	r3, [r3, #1]
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d004      	beq.n	8005d36 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005d36:	78bb      	ldrb	r3, [r7, #2]
 8005d38:	2b02      	cmp	r3, #2
 8005d3a:	d102      	bne.n	8005d42 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005d48:	2b01      	cmp	r3, #1
 8005d4a:	d101      	bne.n	8005d50 <HAL_PCD_EP_Open+0xaa>
 8005d4c:	2302      	movs	r3, #2
 8005d4e:	e00e      	b.n	8005d6e <HAL_PCD_EP_Open+0xc8>
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68f9      	ldr	r1, [r7, #12]
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f005 f99a 	bl	800b098 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005d6c:	7afb      	ldrb	r3, [r7, #11]
}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3710      	adds	r7, #16
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b084      	sub	sp, #16
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	6078      	str	r0, [r7, #4]
 8005d7e:	460b      	mov	r3, r1
 8005d80:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	da0f      	bge.n	8005daa <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d8a:	78fb      	ldrb	r3, [r7, #3]
 8005d8c:	f003 020f 	and.w	r2, r3, #15
 8005d90:	4613      	mov	r3, r2
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	4413      	add	r3, r2
 8005d96:	009b      	lsls	r3, r3, #2
 8005d98:	3338      	adds	r3, #56	; 0x38
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	4413      	add	r3, r2
 8005d9e:	3304      	adds	r3, #4
 8005da0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2201      	movs	r2, #1
 8005da6:	705a      	strb	r2, [r3, #1]
 8005da8:	e00f      	b.n	8005dca <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005daa:	78fb      	ldrb	r3, [r7, #3]
 8005dac:	f003 020f 	and.w	r2, r3, #15
 8005db0:	4613      	mov	r3, r2
 8005db2:	00db      	lsls	r3, r3, #3
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005dca:	78fb      	ldrb	r3, [r7, #3]
 8005dcc:	f003 030f 	and.w	r3, r3, #15
 8005dd0:	b2da      	uxtb	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_PCD_EP_Close+0x6e>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e00e      	b.n	8005e02 <HAL_PCD_EP_Close+0x8c>
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	68f9      	ldr	r1, [r7, #12]
 8005df2:	4618      	mov	r0, r3
 8005df4:	f005 f9d8 	bl	800b1a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8005e00:	2300      	movs	r3, #0
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e0a:	b580      	push	{r7, lr}
 8005e0c:	b086      	sub	sp, #24
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	60f8      	str	r0, [r7, #12]
 8005e12:	607a      	str	r2, [r7, #4]
 8005e14:	603b      	str	r3, [r7, #0]
 8005e16:	460b      	mov	r3, r1
 8005e18:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e1a:	7afb      	ldrb	r3, [r7, #11]
 8005e1c:	f003 020f 	and.w	r2, r3, #15
 8005e20:	4613      	mov	r3, r2
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	4413      	add	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	4413      	add	r3, r2
 8005e30:	3304      	adds	r3, #4
 8005e32:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	687a      	ldr	r2, [r7, #4]
 8005e38:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005e3a:	697b      	ldr	r3, [r7, #20]
 8005e3c:	683a      	ldr	r2, [r7, #0]
 8005e3e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	2200      	movs	r2, #0
 8005e44:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005e46:	697b      	ldr	r3, [r7, #20]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e4c:	7afb      	ldrb	r3, [r7, #11]
 8005e4e:	f003 030f 	and.w	r3, r3, #15
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	691b      	ldr	r3, [r3, #16]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d102      	bne.n	8005e66 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005e60:	687a      	ldr	r2, [r7, #4]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005e66:	7afb      	ldrb	r3, [r7, #11]
 8005e68:	f003 030f 	and.w	r3, r3, #15
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d109      	bne.n	8005e84 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6818      	ldr	r0, [r3, #0]
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	691b      	ldr	r3, [r3, #16]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	461a      	mov	r2, r3
 8005e7c:	6979      	ldr	r1, [r7, #20]
 8005e7e:	f005 fcbf 	bl	800b800 <USB_EP0StartXfer>
 8005e82:	e008      	b.n	8005e96 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6818      	ldr	r0, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	691b      	ldr	r3, [r3, #16]
 8005e8c:	b2db      	uxtb	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	6979      	ldr	r1, [r7, #20]
 8005e92:	f005 fa65 	bl	800b360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	3718      	adds	r7, #24
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}

08005ea0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005eac:	78fb      	ldrb	r3, [r7, #3]
 8005eae:	f003 020f 	and.w	r2, r3, #15
 8005eb2:	6879      	ldr	r1, [r7, #4]
 8005eb4:	4613      	mov	r3, r2
 8005eb6:	00db      	lsls	r3, r3, #3
 8005eb8:	4413      	add	r3, r2
 8005eba:	009b      	lsls	r3, r3, #2
 8005ebc:	440b      	add	r3, r1
 8005ebe:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8005ec2:	681b      	ldr	r3, [r3, #0]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b086      	sub	sp, #24
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	60f8      	str	r0, [r7, #12]
 8005ed8:	607a      	str	r2, [r7, #4]
 8005eda:	603b      	str	r3, [r7, #0]
 8005edc:	460b      	mov	r3, r1
 8005ede:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ee0:	7afb      	ldrb	r3, [r7, #11]
 8005ee2:	f003 020f 	and.w	r2, r3, #15
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	00db      	lsls	r3, r3, #3
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	3338      	adds	r3, #56	; 0x38
 8005ef0:	68fa      	ldr	r2, [r7, #12]
 8005ef2:	4413      	add	r3, r2
 8005ef4:	3304      	adds	r3, #4
 8005ef6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005ef8:	697b      	ldr	r3, [r7, #20]
 8005efa:	687a      	ldr	r2, [r7, #4]
 8005efc:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005efe:	697b      	ldr	r3, [r7, #20]
 8005f00:	683a      	ldr	r2, [r7, #0]
 8005f02:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005f04:	697b      	ldr	r3, [r7, #20]
 8005f06:	2200      	movs	r2, #0
 8005f08:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005f0a:	697b      	ldr	r3, [r7, #20]
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f10:	7afb      	ldrb	r3, [r7, #11]
 8005f12:	f003 030f 	and.w	r3, r3, #15
 8005f16:	b2da      	uxtb	r2, r3
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	691b      	ldr	r3, [r3, #16]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d102      	bne.n	8005f2a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005f2a:	7afb      	ldrb	r3, [r7, #11]
 8005f2c:	f003 030f 	and.w	r3, r3, #15
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d109      	bne.n	8005f48 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	6818      	ldr	r0, [r3, #0]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	691b      	ldr	r3, [r3, #16]
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	461a      	mov	r2, r3
 8005f40:	6979      	ldr	r1, [r7, #20]
 8005f42:	f005 fc5d 	bl	800b800 <USB_EP0StartXfer>
 8005f46:	e008      	b.n	8005f5a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	6818      	ldr	r0, [r3, #0]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	691b      	ldr	r3, [r3, #16]
 8005f50:	b2db      	uxtb	r3, r3
 8005f52:	461a      	mov	r2, r3
 8005f54:	6979      	ldr	r1, [r7, #20]
 8005f56:	f005 fa03 	bl	800b360 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3718      	adds	r7, #24
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005f70:	78fb      	ldrb	r3, [r7, #3]
 8005f72:	f003 020f 	and.w	r2, r3, #15
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d901      	bls.n	8005f82 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e050      	b.n	8006024 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005f82:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	da0f      	bge.n	8005faa <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f8a:	78fb      	ldrb	r3, [r7, #3]
 8005f8c:	f003 020f 	and.w	r2, r3, #15
 8005f90:	4613      	mov	r3, r2
 8005f92:	00db      	lsls	r3, r3, #3
 8005f94:	4413      	add	r3, r2
 8005f96:	009b      	lsls	r3, r3, #2
 8005f98:	3338      	adds	r3, #56	; 0x38
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	4413      	add	r3, r2
 8005f9e:	3304      	adds	r3, #4
 8005fa0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	705a      	strb	r2, [r3, #1]
 8005fa8:	e00d      	b.n	8005fc6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005faa:	78fa      	ldrb	r2, [r7, #3]
 8005fac:	4613      	mov	r3, r2
 8005fae:	00db      	lsls	r3, r3, #3
 8005fb0:	4413      	add	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	4413      	add	r3, r2
 8005fbc:	3304      	adds	r3, #4
 8005fbe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fcc:	78fb      	ldrb	r3, [r7, #3]
 8005fce:	f003 030f 	and.w	r3, r3, #15
 8005fd2:	b2da      	uxtb	r2, r3
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d101      	bne.n	8005fe6 <HAL_PCD_EP_SetStall+0x82>
 8005fe2:	2302      	movs	r3, #2
 8005fe4:	e01e      	b.n	8006024 <HAL_PCD_EP_SetStall+0xc0>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	2201      	movs	r2, #1
 8005fea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68f9      	ldr	r1, [r7, #12]
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	f005 fe9f 	bl	800bd38 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005ffa:	78fb      	ldrb	r3, [r7, #3]
 8005ffc:	f003 030f 	and.w	r3, r3, #15
 8006000:	2b00      	cmp	r3, #0
 8006002:	d10a      	bne.n	800601a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6818      	ldr	r0, [r3, #0]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	691b      	ldr	r3, [r3, #16]
 800600c:	b2d9      	uxtb	r1, r3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006014:	461a      	mov	r2, r3
 8006016:	f006 f8b1 	bl	800c17c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006022:	2300      	movs	r3, #0
}
 8006024:	4618      	mov	r0, r3
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
 8006034:	460b      	mov	r3, r1
 8006036:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006038:	78fb      	ldrb	r3, [r7, #3]
 800603a:	f003 020f 	and.w	r2, r3, #15
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	429a      	cmp	r2, r3
 8006044:	d901      	bls.n	800604a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e042      	b.n	80060d0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800604a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800604e:	2b00      	cmp	r3, #0
 8006050:	da0f      	bge.n	8006072 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006052:	78fb      	ldrb	r3, [r7, #3]
 8006054:	f003 020f 	and.w	r2, r3, #15
 8006058:	4613      	mov	r3, r2
 800605a:	00db      	lsls	r3, r3, #3
 800605c:	4413      	add	r3, r2
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	3338      	adds	r3, #56	; 0x38
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	4413      	add	r3, r2
 8006066:	3304      	adds	r3, #4
 8006068:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2201      	movs	r2, #1
 800606e:	705a      	strb	r2, [r3, #1]
 8006070:	e00f      	b.n	8006092 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	f003 020f 	and.w	r2, r3, #15
 8006078:	4613      	mov	r3, r2
 800607a:	00db      	lsls	r3, r3, #3
 800607c:	4413      	add	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006084:	687a      	ldr	r2, [r7, #4]
 8006086:	4413      	add	r3, r2
 8006088:	3304      	adds	r3, #4
 800608a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	2200      	movs	r2, #0
 8006090:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006098:	78fb      	ldrb	r3, [r7, #3]
 800609a:	f003 030f 	and.w	r3, r3, #15
 800609e:	b2da      	uxtb	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80060aa:	2b01      	cmp	r3, #1
 80060ac:	d101      	bne.n	80060b2 <HAL_PCD_EP_ClrStall+0x86>
 80060ae:	2302      	movs	r3, #2
 80060b0:	e00e      	b.n	80060d0 <HAL_PCD_EP_ClrStall+0xa4>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2201      	movs	r2, #1
 80060b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	68f9      	ldr	r1, [r7, #12]
 80060c0:	4618      	mov	r0, r3
 80060c2:	f005 fea7 	bl	800be14 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80060ce:	2300      	movs	r3, #0
}
 80060d0:	4618      	mov	r0, r3
 80060d2:	3710      	adds	r7, #16
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}

080060d8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b084      	sub	sp, #16
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	460b      	mov	r3, r1
 80060e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80060e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	da0c      	bge.n	8006106 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80060ec:	78fb      	ldrb	r3, [r7, #3]
 80060ee:	f003 020f 	and.w	r2, r3, #15
 80060f2:	4613      	mov	r3, r2
 80060f4:	00db      	lsls	r3, r3, #3
 80060f6:	4413      	add	r3, r2
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	3338      	adds	r3, #56	; 0x38
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	4413      	add	r3, r2
 8006100:	3304      	adds	r3, #4
 8006102:	60fb      	str	r3, [r7, #12]
 8006104:	e00c      	b.n	8006120 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006106:	78fb      	ldrb	r3, [r7, #3]
 8006108:	f003 020f 	and.w	r2, r3, #15
 800610c:	4613      	mov	r3, r2
 800610e:	00db      	lsls	r3, r3, #3
 8006110:	4413      	add	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006118:	687a      	ldr	r2, [r7, #4]
 800611a:	4413      	add	r3, r2
 800611c:	3304      	adds	r3, #4
 800611e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	68f9      	ldr	r1, [r7, #12]
 8006126:	4618      	mov	r0, r3
 8006128:	f005 fcc6 	bl	800bab8 <USB_EPStopXfer>
 800612c:	4603      	mov	r3, r0
 800612e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006130:	7afb      	ldrb	r3, [r7, #11]
}
 8006132:	4618      	mov	r0, r3
 8006134:	3710      	adds	r7, #16
 8006136:	46bd      	mov	sp, r7
 8006138:	bd80      	pop	{r7, pc}

0800613a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800613a:	b580      	push	{r7, lr}
 800613c:	b08a      	sub	sp, #40	; 0x28
 800613e:	af02      	add	r7, sp, #8
 8006140:	6078      	str	r0, [r7, #4]
 8006142:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800614e:	683a      	ldr	r2, [r7, #0]
 8006150:	4613      	mov	r3, r2
 8006152:	00db      	lsls	r3, r3, #3
 8006154:	4413      	add	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	3338      	adds	r3, #56	; 0x38
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4413      	add	r3, r2
 800615e:	3304      	adds	r3, #4
 8006160:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	6a1a      	ldr	r2, [r3, #32]
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	699b      	ldr	r3, [r3, #24]
 800616a:	429a      	cmp	r2, r3
 800616c:	d901      	bls.n	8006172 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800616e:	2301      	movs	r3, #1
 8006170:	e06c      	b.n	800624c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	699a      	ldr	r2, [r3, #24]
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6a1b      	ldr	r3, [r3, #32]
 800617a:	1ad3      	subs	r3, r2, r3
 800617c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	69fa      	ldr	r2, [r7, #28]
 8006184:	429a      	cmp	r2, r3
 8006186:	d902      	bls.n	800618e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800618e:	69fb      	ldr	r3, [r7, #28]
 8006190:	3303      	adds	r3, #3
 8006192:	089b      	lsrs	r3, r3, #2
 8006194:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006196:	e02b      	b.n	80061f0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	699a      	ldr	r2, [r3, #24]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6a1b      	ldr	r3, [r3, #32]
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	69fa      	ldr	r2, [r7, #28]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	d902      	bls.n	80061b4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	68db      	ldr	r3, [r3, #12]
 80061b2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	3303      	adds	r3, #3
 80061b8:	089b      	lsrs	r3, r3, #2
 80061ba:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6919      	ldr	r1, [r3, #16]
 80061c0:	683b      	ldr	r3, [r7, #0]
 80061c2:	b2da      	uxtb	r2, r3
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	9300      	str	r3, [sp, #0]
 80061d0:	4603      	mov	r3, r0
 80061d2:	6978      	ldr	r0, [r7, #20]
 80061d4:	f005 fd1a 	bl	800bc0c <USB_WritePacket>

    ep->xfer_buff  += len;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	691a      	ldr	r2, [r3, #16]
 80061dc:	69fb      	ldr	r3, [r7, #28]
 80061de:	441a      	add	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	6a1a      	ldr	r2, [r3, #32]
 80061e8:	69fb      	ldr	r3, [r7, #28]
 80061ea:	441a      	add	r2, r3
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	015a      	lsls	r2, r3, #5
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	4413      	add	r3, r2
 80061f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061fc:	699b      	ldr	r3, [r3, #24]
 80061fe:	b29b      	uxth	r3, r3
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	429a      	cmp	r2, r3
 8006204:	d809      	bhi.n	800621a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	6a1a      	ldr	r2, [r3, #32]
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800620e:	429a      	cmp	r2, r3
 8006210:	d203      	bcs.n	800621a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	699b      	ldr	r3, [r3, #24]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d1be      	bne.n	8006198 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	699a      	ldr	r2, [r3, #24]
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	6a1b      	ldr	r3, [r3, #32]
 8006222:	429a      	cmp	r2, r3
 8006224:	d811      	bhi.n	800624a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	f003 030f 	and.w	r3, r3, #15
 800622c:	2201      	movs	r2, #1
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800623a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800623c:	68bb      	ldr	r3, [r7, #8]
 800623e:	43db      	mvns	r3, r3
 8006240:	6939      	ldr	r1, [r7, #16]
 8006242:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006246:	4013      	ands	r3, r2
 8006248:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800624a:	2300      	movs	r3, #0
}
 800624c:	4618      	mov	r0, r3
 800624e:	3720      	adds	r7, #32
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006264:	69fb      	ldr	r3, [r7, #28]
 8006266:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	333c      	adds	r3, #60	; 0x3c
 800626c:	3304      	adds	r3, #4
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	015a      	lsls	r2, r3, #5
 8006276:	69bb      	ldr	r3, [r7, #24]
 8006278:	4413      	add	r3, r2
 800627a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800627e:	689b      	ldr	r3, [r3, #8]
 8006280:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	2b01      	cmp	r3, #1
 8006288:	d17b      	bne.n	8006382 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f003 0308 	and.w	r3, r3, #8
 8006290:	2b00      	cmp	r3, #0
 8006292:	d015      	beq.n	80062c0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006294:	697b      	ldr	r3, [r7, #20]
 8006296:	4a61      	ldr	r2, [pc, #388]	; (800641c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006298:	4293      	cmp	r3, r2
 800629a:	f240 80b9 	bls.w	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800629e:	693b      	ldr	r3, [r7, #16]
 80062a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	f000 80b3 	beq.w	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062b6:	461a      	mov	r2, r3
 80062b8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80062bc:	6093      	str	r3, [r2, #8]
 80062be:	e0a7      	b.n	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f003 0320 	and.w	r3, r3, #32
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d009      	beq.n	80062de <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	015a      	lsls	r2, r3, #5
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	4413      	add	r3, r2
 80062d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80062d6:	461a      	mov	r2, r3
 80062d8:	2320      	movs	r3, #32
 80062da:	6093      	str	r3, [r2, #8]
 80062dc:	e098      	b.n	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	f040 8093 	bne.w	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	4a4b      	ldr	r2, [pc, #300]	; (800641c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d90f      	bls.n	8006312 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d00a      	beq.n	8006312 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062fc:	683b      	ldr	r3, [r7, #0]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006308:	461a      	mov	r2, r3
 800630a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800630e:	6093      	str	r3, [r2, #8]
 8006310:	e07e      	b.n	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006312:	683a      	ldr	r2, [r7, #0]
 8006314:	4613      	mov	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	4413      	add	r3, r2
 8006324:	3304      	adds	r3, #4
 8006326:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	69da      	ldr	r2, [r3, #28]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	0159      	lsls	r1, r3, #5
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	440b      	add	r3, r1
 8006334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800633e:	1ad2      	subs	r2, r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	2b00      	cmp	r3, #0
 8006348:	d114      	bne.n	8006374 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	699b      	ldr	r3, [r3, #24]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d109      	bne.n	8006366 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6818      	ldr	r0, [r3, #0]
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800635c:	461a      	mov	r2, r3
 800635e:	2101      	movs	r1, #1
 8006360:	f005 ff0c 	bl	800c17c <USB_EP0_OutStart>
 8006364:	e006      	b.n	8006374 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	691a      	ldr	r2, [r3, #16]
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	6a1b      	ldr	r3, [r3, #32]
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	b2db      	uxtb	r3, r3
 8006378:	4619      	mov	r1, r3
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f00b f99c 	bl	80116b8 <HAL_PCD_DataOutStageCallback>
 8006380:	e046      	b.n	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006382:	697b      	ldr	r3, [r7, #20]
 8006384:	4a26      	ldr	r2, [pc, #152]	; (8006420 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006386:	4293      	cmp	r3, r2
 8006388:	d124      	bne.n	80063d4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006390:	2b00      	cmp	r3, #0
 8006392:	d00a      	beq.n	80063aa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69bb      	ldr	r3, [r7, #24]
 800639a:	4413      	add	r3, r2
 800639c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a0:	461a      	mov	r2, r3
 80063a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063a6:	6093      	str	r3, [r2, #8]
 80063a8:	e032      	b.n	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063aa:	693b      	ldr	r3, [r7, #16]
 80063ac:	f003 0320 	and.w	r3, r3, #32
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d008      	beq.n	80063c6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	015a      	lsls	r2, r3, #5
 80063b8:	69bb      	ldr	r3, [r7, #24]
 80063ba:	4413      	add	r3, r2
 80063bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063c0:	461a      	mov	r2, r3
 80063c2:	2320      	movs	r3, #32
 80063c4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	4619      	mov	r1, r3
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f00b f973 	bl	80116b8 <HAL_PCD_DataOutStageCallback>
 80063d2:	e01d      	b.n	8006410 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80063d4:	683b      	ldr	r3, [r7, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d114      	bne.n	8006404 <PCD_EP_OutXfrComplete_int+0x1b0>
 80063da:	6879      	ldr	r1, [r7, #4]
 80063dc:	683a      	ldr	r2, [r7, #0]
 80063de:	4613      	mov	r3, r2
 80063e0:	00db      	lsls	r3, r3, #3
 80063e2:	4413      	add	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	440b      	add	r3, r1
 80063e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d108      	bne.n	8006404 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6818      	ldr	r0, [r3, #0]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80063fc:	461a      	mov	r2, r3
 80063fe:	2100      	movs	r1, #0
 8006400:	f005 febc 	bl	800c17c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006404:	683b      	ldr	r3, [r7, #0]
 8006406:	b2db      	uxtb	r3, r3
 8006408:	4619      	mov	r1, r3
 800640a:	6878      	ldr	r0, [r7, #4]
 800640c:	f00b f954 	bl	80116b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006410:	2300      	movs	r3, #0
}
 8006412:	4618      	mov	r0, r3
 8006414:	3720      	adds	r7, #32
 8006416:	46bd      	mov	sp, r7
 8006418:	bd80      	pop	{r7, pc}
 800641a:	bf00      	nop
 800641c:	4f54300a 	.word	0x4f54300a
 8006420:	4f54310a 	.word	0x4f54310a

08006424 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006434:	697b      	ldr	r3, [r7, #20]
 8006436:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	333c      	adds	r3, #60	; 0x3c
 800643c:	3304      	adds	r3, #4
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	015a      	lsls	r2, r3, #5
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	4413      	add	r3, r2
 800644a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800644e:	689b      	ldr	r3, [r3, #8]
 8006450:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	4a15      	ldr	r2, [pc, #84]	; (80064ac <PCD_EP_OutSetupPacket_int+0x88>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d90e      	bls.n	8006478 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006460:	2b00      	cmp	r3, #0
 8006462:	d009      	beq.n	8006478 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006464:	683b      	ldr	r3, [r7, #0]
 8006466:	015a      	lsls	r2, r3, #5
 8006468:	693b      	ldr	r3, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006470:	461a      	mov	r2, r3
 8006472:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006476:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f00b f90b 	bl	8011694 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	4a0a      	ldr	r2, [pc, #40]	; (80064ac <PCD_EP_OutSetupPacket_int+0x88>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d90c      	bls.n	80064a0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	2b01      	cmp	r3, #1
 800648c:	d108      	bne.n	80064a0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006498:	461a      	mov	r2, r3
 800649a:	2101      	movs	r1, #1
 800649c:	f005 fe6e 	bl	800c17c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3718      	adds	r7, #24
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}
 80064aa:	bf00      	nop
 80064ac:	4f54300a 	.word	0x4f54300a

080064b0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	460b      	mov	r3, r1
 80064ba:	70fb      	strb	r3, [r7, #3]
 80064bc:	4613      	mov	r3, r2
 80064be:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80064c8:	78fb      	ldrb	r3, [r7, #3]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d107      	bne.n	80064de <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80064ce:	883b      	ldrh	r3, [r7, #0]
 80064d0:	0419      	lsls	r1, r3, #16
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	68ba      	ldr	r2, [r7, #8]
 80064d8:	430a      	orrs	r2, r1
 80064da:	629a      	str	r2, [r3, #40]	; 0x28
 80064dc:	e028      	b.n	8006530 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80064e4:	0c1b      	lsrs	r3, r3, #16
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	4413      	add	r3, r2
 80064ea:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80064ec:	2300      	movs	r3, #0
 80064ee:	73fb      	strb	r3, [r7, #15]
 80064f0:	e00d      	b.n	800650e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681a      	ldr	r2, [r3, #0]
 80064f6:	7bfb      	ldrb	r3, [r7, #15]
 80064f8:	3340      	adds	r3, #64	; 0x40
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	0c1b      	lsrs	r3, r3, #16
 8006502:	68ba      	ldr	r2, [r7, #8]
 8006504:	4413      	add	r3, r2
 8006506:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006508:	7bfb      	ldrb	r3, [r7, #15]
 800650a:	3301      	adds	r3, #1
 800650c:	73fb      	strb	r3, [r7, #15]
 800650e:	7bfa      	ldrb	r2, [r7, #15]
 8006510:	78fb      	ldrb	r3, [r7, #3]
 8006512:	3b01      	subs	r3, #1
 8006514:	429a      	cmp	r2, r3
 8006516:	d3ec      	bcc.n	80064f2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006518:	883b      	ldrh	r3, [r7, #0]
 800651a:	0418      	lsls	r0, r3, #16
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	6819      	ldr	r1, [r3, #0]
 8006520:	78fb      	ldrb	r3, [r7, #3]
 8006522:	3b01      	subs	r3, #1
 8006524:	68ba      	ldr	r2, [r7, #8]
 8006526:	4302      	orrs	r2, r0
 8006528:	3340      	adds	r3, #64	; 0x40
 800652a:	009b      	lsls	r3, r3, #2
 800652c:	440b      	add	r3, r1
 800652e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3714      	adds	r7, #20
 8006536:	46bd      	mov	sp, r7
 8006538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653c:	4770      	bx	lr

0800653e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800653e:	b480      	push	{r7}
 8006540:	b083      	sub	sp, #12
 8006542:	af00      	add	r7, sp, #0
 8006544:	6078      	str	r0, [r7, #4]
 8006546:	460b      	mov	r3, r1
 8006548:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	887a      	ldrh	r2, [r7, #2]
 8006550:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8006552:	2300      	movs	r3, #0
}
 8006554:	4618      	mov	r0, r3
 8006556:	370c      	adds	r7, #12
 8006558:	46bd      	mov	sp, r7
 800655a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655e:	4770      	bx	lr

08006560 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8006560:	b480      	push	{r7}
 8006562:	b085      	sub	sp, #20
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2201      	movs	r2, #1
 8006572:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	699b      	ldr	r3, [r3, #24]
 8006582:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658e:	4b05      	ldr	r3, [pc, #20]	; (80065a4 <HAL_PCDEx_ActivateLPM+0x44>)
 8006590:	4313      	orrs	r3, r2
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr
 80065a4:	10000003 	.word	0x10000003

080065a8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80065a8:	b480      	push	{r7}
 80065aa:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065ac:	4b05      	ldr	r3, [pc, #20]	; (80065c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	4a04      	ldr	r2, [pc, #16]	; (80065c4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80065b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065b6:	6013      	str	r3, [r2, #0]
}
 80065b8:	bf00      	nop
 80065ba:	46bd      	mov	sp, r7
 80065bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c0:	4770      	bx	lr
 80065c2:	bf00      	nop
 80065c4:	40007000 	.word	0x40007000

080065c8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80065ce:	2300      	movs	r3, #0
 80065d0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80065d2:	4b23      	ldr	r3, [pc, #140]	; (8006660 <HAL_PWREx_EnableOverDrive+0x98>)
 80065d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065d6:	4a22      	ldr	r2, [pc, #136]	; (8006660 <HAL_PWREx_EnableOverDrive+0x98>)
 80065d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065dc:	6413      	str	r3, [r2, #64]	; 0x40
 80065de:	4b20      	ldr	r3, [pc, #128]	; (8006660 <HAL_PWREx_EnableOverDrive+0x98>)
 80065e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065e6:	603b      	str	r3, [r7, #0]
 80065e8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80065ea:	4b1e      	ldr	r3, [pc, #120]	; (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a1d      	ldr	r2, [pc, #116]	; (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 80065f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80065f4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80065f6:	f7fb fd0f 	bl	8002018 <HAL_GetTick>
 80065fa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80065fc:	e009      	b.n	8006612 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80065fe:	f7fb fd0b 	bl	8002018 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800660c:	d901      	bls.n	8006612 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800660e:	2303      	movs	r3, #3
 8006610:	e022      	b.n	8006658 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006612:	4b14      	ldr	r3, [pc, #80]	; (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006614:	685b      	ldr	r3, [r3, #4]
 8006616:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800661a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800661e:	d1ee      	bne.n	80065fe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006620:	4b10      	ldr	r3, [pc, #64]	; (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a0f      	ldr	r2, [pc, #60]	; (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 8006626:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800662a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800662c:	f7fb fcf4 	bl	8002018 <HAL_GetTick>
 8006630:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006632:	e009      	b.n	8006648 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006634:	f7fb fcf0 	bl	8002018 <HAL_GetTick>
 8006638:	4602      	mov	r2, r0
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006642:	d901      	bls.n	8006648 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8006644:	2303      	movs	r3, #3
 8006646:	e007      	b.n	8006658 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006648:	4b06      	ldr	r3, [pc, #24]	; (8006664 <HAL_PWREx_EnableOverDrive+0x9c>)
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006650:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006654:	d1ee      	bne.n	8006634 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8006656:	2300      	movs	r3, #0
}
 8006658:	4618      	mov	r0, r3
 800665a:	3708      	adds	r7, #8
 800665c:	46bd      	mov	sp, r7
 800665e:	bd80      	pop	{r7, pc}
 8006660:	40023800 	.word	0x40023800
 8006664:	40007000 	.word	0x40007000

08006668 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8006670:	2300      	movs	r3, #0
 8006672:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e291      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	f000 8087 	beq.w	800679a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800668c:	4b96      	ldr	r3, [pc, #600]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 030c 	and.w	r3, r3, #12
 8006694:	2b04      	cmp	r3, #4
 8006696:	d00c      	beq.n	80066b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006698:	4b93      	ldr	r3, [pc, #588]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f003 030c 	and.w	r3, r3, #12
 80066a0:	2b08      	cmp	r3, #8
 80066a2:	d112      	bne.n	80066ca <HAL_RCC_OscConfig+0x62>
 80066a4:	4b90      	ldr	r3, [pc, #576]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066a6:	685b      	ldr	r3, [r3, #4]
 80066a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066b0:	d10b      	bne.n	80066ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b2:	4b8d      	ldr	r3, [pc, #564]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d06c      	beq.n	8006798 <HAL_RCC_OscConfig+0x130>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d168      	bne.n	8006798 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80066c6:	2301      	movs	r3, #1
 80066c8:	e26b      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80066d2:	d106      	bne.n	80066e2 <HAL_RCC_OscConfig+0x7a>
 80066d4:	4b84      	ldr	r3, [pc, #528]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4a83      	ldr	r2, [pc, #524]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80066de:	6013      	str	r3, [r2, #0]
 80066e0:	e02e      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x9c>
 80066ea:	4b7f      	ldr	r3, [pc, #508]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a7e      	ldr	r2, [pc, #504]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b7c      	ldr	r3, [pc, #496]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a7b      	ldr	r2, [pc, #492]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80066fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e01d      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800670c:	d10c      	bne.n	8006728 <HAL_RCC_OscConfig+0xc0>
 800670e:	4b76      	ldr	r3, [pc, #472]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	4a75      	ldr	r2, [pc, #468]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006714:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006718:	6013      	str	r3, [r2, #0]
 800671a:	4b73      	ldr	r3, [pc, #460]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4a72      	ldr	r2, [pc, #456]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006724:	6013      	str	r3, [r2, #0]
 8006726:	e00b      	b.n	8006740 <HAL_RCC_OscConfig+0xd8>
 8006728:	4b6f      	ldr	r3, [pc, #444]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4a6e      	ldr	r2, [pc, #440]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800672e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006732:	6013      	str	r3, [r2, #0]
 8006734:	4b6c      	ldr	r3, [pc, #432]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4a6b      	ldr	r2, [pc, #428]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800673a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800673e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d013      	beq.n	8006770 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006748:	f7fb fc66 	bl	8002018 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800674e:	e008      	b.n	8006762 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006750:	f7fb fc62 	bl	8002018 <HAL_GetTick>
 8006754:	4602      	mov	r2, r0
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	1ad3      	subs	r3, r2, r3
 800675a:	2b64      	cmp	r3, #100	; 0x64
 800675c:	d901      	bls.n	8006762 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800675e:	2303      	movs	r3, #3
 8006760:	e21f      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006762:	4b61      	ldr	r3, [pc, #388]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800676a:	2b00      	cmp	r3, #0
 800676c:	d0f0      	beq.n	8006750 <HAL_RCC_OscConfig+0xe8>
 800676e:	e014      	b.n	800679a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006770:	f7fb fc52 	bl	8002018 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006778:	f7fb fc4e 	bl	8002018 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b64      	cmp	r3, #100	; 0x64
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e20b      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800678a:	4b57      	ldr	r3, [pc, #348]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x110>
 8006796:	e000      	b.n	800679a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006798:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f003 0302 	and.w	r3, r3, #2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d069      	beq.n	800687a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80067a6:	4b50      	ldr	r3, [pc, #320]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067a8:	689b      	ldr	r3, [r3, #8]
 80067aa:	f003 030c 	and.w	r3, r3, #12
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d00b      	beq.n	80067ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b2:	4b4d      	ldr	r3, [pc, #308]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	f003 030c 	and.w	r3, r3, #12
 80067ba:	2b08      	cmp	r3, #8
 80067bc:	d11c      	bne.n	80067f8 <HAL_RCC_OscConfig+0x190>
 80067be:	4b4a      	ldr	r3, [pc, #296]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d116      	bne.n	80067f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ca:	4b47      	ldr	r3, [pc, #284]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f003 0302 	and.w	r3, r3, #2
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_RCC_OscConfig+0x17a>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68db      	ldr	r3, [r3, #12]
 80067da:	2b01      	cmp	r3, #1
 80067dc:	d001      	beq.n	80067e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e1df      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067e2:	4b41      	ldr	r3, [pc, #260]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	691b      	ldr	r3, [r3, #16]
 80067ee:	00db      	lsls	r3, r3, #3
 80067f0:	493d      	ldr	r1, [pc, #244]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80067f2:	4313      	orrs	r3, r2
 80067f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f6:	e040      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d023      	beq.n	8006848 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006800:	4b39      	ldr	r3, [pc, #228]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a38      	ldr	r2, [pc, #224]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006806:	f043 0301 	orr.w	r3, r3, #1
 800680a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800680c:	f7fb fc04 	bl	8002018 <HAL_GetTick>
 8006810:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006812:	e008      	b.n	8006826 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006814:	f7fb fc00 	bl	8002018 <HAL_GetTick>
 8006818:	4602      	mov	r2, r0
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	1ad3      	subs	r3, r2, r3
 800681e:	2b02      	cmp	r3, #2
 8006820:	d901      	bls.n	8006826 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8006822:	2303      	movs	r3, #3
 8006824:	e1bd      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006826:	4b30      	ldr	r3, [pc, #192]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0302 	and.w	r3, r3, #2
 800682e:	2b00      	cmp	r3, #0
 8006830:	d0f0      	beq.n	8006814 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006832:	4b2d      	ldr	r3, [pc, #180]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	00db      	lsls	r3, r3, #3
 8006840:	4929      	ldr	r1, [pc, #164]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006842:	4313      	orrs	r3, r2
 8006844:	600b      	str	r3, [r1, #0]
 8006846:	e018      	b.n	800687a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006848:	4b27      	ldr	r3, [pc, #156]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	4a26      	ldr	r2, [pc, #152]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 800684e:	f023 0301 	bic.w	r3, r3, #1
 8006852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006854:	f7fb fbe0 	bl	8002018 <HAL_GetTick>
 8006858:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800685a:	e008      	b.n	800686e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800685c:	f7fb fbdc 	bl	8002018 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	693b      	ldr	r3, [r7, #16]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	2b02      	cmp	r3, #2
 8006868:	d901      	bls.n	800686e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800686a:	2303      	movs	r3, #3
 800686c:	e199      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800686e:	4b1e      	ldr	r3, [pc, #120]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f003 0302 	and.w	r3, r3, #2
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1f0      	bne.n	800685c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f003 0308 	and.w	r3, r3, #8
 8006882:	2b00      	cmp	r3, #0
 8006884:	d038      	beq.n	80068f8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	695b      	ldr	r3, [r3, #20]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d019      	beq.n	80068c2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800688e:	4b16      	ldr	r3, [pc, #88]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 8006894:	f043 0301 	orr.w	r3, r3, #1
 8006898:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800689a:	f7fb fbbd 	bl	8002018 <HAL_GetTick>
 800689e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068a0:	e008      	b.n	80068b4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068a2:	f7fb fbb9 	bl	8002018 <HAL_GetTick>
 80068a6:	4602      	mov	r2, r0
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	1ad3      	subs	r3, r2, r3
 80068ac:	2b02      	cmp	r3, #2
 80068ae:	d901      	bls.n	80068b4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e176      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068b4:	4b0c      	ldr	r3, [pc, #48]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068b8:	f003 0302 	and.w	r3, r3, #2
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d0f0      	beq.n	80068a2 <HAL_RCC_OscConfig+0x23a>
 80068c0:	e01a      	b.n	80068f8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068c2:	4b09      	ldr	r3, [pc, #36]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068c6:	4a08      	ldr	r2, [pc, #32]	; (80068e8 <HAL_RCC_OscConfig+0x280>)
 80068c8:	f023 0301 	bic.w	r3, r3, #1
 80068cc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068ce:	f7fb fba3 	bl	8002018 <HAL_GetTick>
 80068d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d4:	e00a      	b.n	80068ec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068d6:	f7fb fb9f 	bl	8002018 <HAL_GetTick>
 80068da:	4602      	mov	r2, r0
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	1ad3      	subs	r3, r2, r3
 80068e0:	2b02      	cmp	r3, #2
 80068e2:	d903      	bls.n	80068ec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80068e4:	2303      	movs	r3, #3
 80068e6:	e15c      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
 80068e8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068ec:	4b91      	ldr	r3, [pc, #580]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80068ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068f0:	f003 0302 	and.w	r3, r3, #2
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d1ee      	bne.n	80068d6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0304 	and.w	r3, r3, #4
 8006900:	2b00      	cmp	r3, #0
 8006902:	f000 80a4 	beq.w	8006a4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006906:	4b8b      	ldr	r3, [pc, #556]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10d      	bne.n	800692e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8006912:	4b88      	ldr	r3, [pc, #544]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006916:	4a87      	ldr	r2, [pc, #540]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006918:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800691c:	6413      	str	r3, [r2, #64]	; 0x40
 800691e:	4b85      	ldr	r3, [pc, #532]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006922:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006926:	60bb      	str	r3, [r7, #8]
 8006928:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800692a:	2301      	movs	r3, #1
 800692c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800692e:	4b82      	ldr	r3, [pc, #520]	; (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006936:	2b00      	cmp	r3, #0
 8006938:	d118      	bne.n	800696c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800693a:	4b7f      	ldr	r3, [pc, #508]	; (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	4a7e      	ldr	r2, [pc, #504]	; (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006946:	f7fb fb67 	bl	8002018 <HAL_GetTick>
 800694a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800694c:	e008      	b.n	8006960 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800694e:	f7fb fb63 	bl	8002018 <HAL_GetTick>
 8006952:	4602      	mov	r2, r0
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	1ad3      	subs	r3, r2, r3
 8006958:	2b64      	cmp	r3, #100	; 0x64
 800695a:	d901      	bls.n	8006960 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800695c:	2303      	movs	r3, #3
 800695e:	e120      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006960:	4b75      	ldr	r3, [pc, #468]	; (8006b38 <HAL_RCC_OscConfig+0x4d0>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006968:	2b00      	cmp	r3, #0
 800696a:	d0f0      	beq.n	800694e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	689b      	ldr	r3, [r3, #8]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d106      	bne.n	8006982 <HAL_RCC_OscConfig+0x31a>
 8006974:	4b6f      	ldr	r3, [pc, #444]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006976:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006978:	4a6e      	ldr	r2, [pc, #440]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800697a:	f043 0301 	orr.w	r3, r3, #1
 800697e:	6713      	str	r3, [r2, #112]	; 0x70
 8006980:	e02d      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d10c      	bne.n	80069a4 <HAL_RCC_OscConfig+0x33c>
 800698a:	4b6a      	ldr	r3, [pc, #424]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800698c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800698e:	4a69      	ldr	r2, [pc, #420]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006990:	f023 0301 	bic.w	r3, r3, #1
 8006994:	6713      	str	r3, [r2, #112]	; 0x70
 8006996:	4b67      	ldr	r3, [pc, #412]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006998:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699a:	4a66      	ldr	r2, [pc, #408]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 800699c:	f023 0304 	bic.w	r3, r3, #4
 80069a0:	6713      	str	r3, [r2, #112]	; 0x70
 80069a2:	e01c      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	689b      	ldr	r3, [r3, #8]
 80069a8:	2b05      	cmp	r3, #5
 80069aa:	d10c      	bne.n	80069c6 <HAL_RCC_OscConfig+0x35e>
 80069ac:	4b61      	ldr	r3, [pc, #388]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b0:	4a60      	ldr	r2, [pc, #384]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069b2:	f043 0304 	orr.w	r3, r3, #4
 80069b6:	6713      	str	r3, [r2, #112]	; 0x70
 80069b8:	4b5e      	ldr	r3, [pc, #376]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069bc:	4a5d      	ldr	r2, [pc, #372]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069be:	f043 0301 	orr.w	r3, r3, #1
 80069c2:	6713      	str	r3, [r2, #112]	; 0x70
 80069c4:	e00b      	b.n	80069de <HAL_RCC_OscConfig+0x376>
 80069c6:	4b5b      	ldr	r3, [pc, #364]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ca:	4a5a      	ldr	r2, [pc, #360]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069cc:	f023 0301 	bic.w	r3, r3, #1
 80069d0:	6713      	str	r3, [r2, #112]	; 0x70
 80069d2:	4b58      	ldr	r3, [pc, #352]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d6:	4a57      	ldr	r2, [pc, #348]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 80069d8:	f023 0304 	bic.w	r3, r3, #4
 80069dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d015      	beq.n	8006a12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069e6:	f7fb fb17 	bl	8002018 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ec:	e00a      	b.n	8006a04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069ee:	f7fb fb13 	bl	8002018 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80069fc:	4293      	cmp	r3, r2
 80069fe:	d901      	bls.n	8006a04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8006a00:	2303      	movs	r3, #3
 8006a02:	e0ce      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a04:	4b4b      	ldr	r3, [pc, #300]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a08:	f003 0302 	and.w	r3, r3, #2
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d0ee      	beq.n	80069ee <HAL_RCC_OscConfig+0x386>
 8006a10:	e014      	b.n	8006a3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a12:	f7fb fb01 	bl	8002018 <HAL_GetTick>
 8006a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a18:	e00a      	b.n	8006a30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006a1a:	f7fb fafd 	bl	8002018 <HAL_GetTick>
 8006a1e:	4602      	mov	r2, r0
 8006a20:	693b      	ldr	r3, [r7, #16]
 8006a22:	1ad3      	subs	r3, r2, r3
 8006a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d901      	bls.n	8006a30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8006a2c:	2303      	movs	r3, #3
 8006a2e:	e0b8      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a30:	4b40      	ldr	r3, [pc, #256]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d1ee      	bne.n	8006a1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a3c:	7dfb      	ldrb	r3, [r7, #23]
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d105      	bne.n	8006a4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a42:	4b3c      	ldr	r3, [pc, #240]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	4a3b      	ldr	r2, [pc, #236]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	f000 80a4 	beq.w	8006ba0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006a58:	4b36      	ldr	r3, [pc, #216]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	f003 030c 	and.w	r3, r3, #12
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d06b      	beq.n	8006b3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	699b      	ldr	r3, [r3, #24]
 8006a68:	2b02      	cmp	r3, #2
 8006a6a:	d149      	bne.n	8006b00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a6c:	4b31      	ldr	r3, [pc, #196]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a30      	ldr	r2, [pc, #192]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fb face 	bl	8002018 <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a80:	f7fb faca 	bl	8002018 <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e087      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a92:	4b28      	ldr	r3, [pc, #160]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	69da      	ldr	r2, [r3, #28]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a1b      	ldr	r3, [r3, #32]
 8006aa6:	431a      	orrs	r2, r3
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aac:	019b      	lsls	r3, r3, #6
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab4:	085b      	lsrs	r3, r3, #1
 8006ab6:	3b01      	subs	r3, #1
 8006ab8:	041b      	lsls	r3, r3, #16
 8006aba:	431a      	orrs	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac0:	061b      	lsls	r3, r3, #24
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	4a1b      	ldr	r2, [pc, #108]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ac6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006aca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006acc:	4b19      	ldr	r3, [pc, #100]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4a18      	ldr	r2, [pc, #96]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006ad2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006ad6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ad8:	f7fb fa9e 	bl	8002018 <HAL_GetTick>
 8006adc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ade:	e008      	b.n	8006af2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ae0:	f7fb fa9a 	bl	8002018 <HAL_GetTick>
 8006ae4:	4602      	mov	r2, r0
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	1ad3      	subs	r3, r2, r3
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d901      	bls.n	8006af2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8006aee:	2303      	movs	r3, #3
 8006af0:	e057      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006af2:	4b10      	ldr	r3, [pc, #64]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d0f0      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x478>
 8006afe:	e04f      	b.n	8006ba0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b00:	4b0c      	ldr	r3, [pc, #48]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a0b      	ldr	r2, [pc, #44]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006b0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0c:	f7fb fa84 	bl	8002018 <HAL_GetTick>
 8006b10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b12:	e008      	b.n	8006b26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b14:	f7fb fa80 	bl	8002018 <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	693b      	ldr	r3, [r7, #16]
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d901      	bls.n	8006b26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e03d      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b26:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <HAL_RCC_OscConfig+0x4cc>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d1f0      	bne.n	8006b14 <HAL_RCC_OscConfig+0x4ac>
 8006b32:	e035      	b.n	8006ba0 <HAL_RCC_OscConfig+0x538>
 8006b34:	40023800 	.word	0x40023800
 8006b38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8006b3c:	4b1b      	ldr	r3, [pc, #108]	; (8006bac <HAL_RCC_OscConfig+0x544>)
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	699b      	ldr	r3, [r3, #24]
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d028      	beq.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d121      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d11a      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b66:	68fa      	ldr	r2, [r7, #12]
 8006b68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b6c:	4013      	ands	r3, r2
 8006b6e:	687a      	ldr	r2, [r7, #4]
 8006b70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d111      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	085b      	lsrs	r3, r3, #1
 8006b84:	3b01      	subs	r3, #1
 8006b86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d107      	bne.n	8006b9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8006b98:	429a      	cmp	r2, r3
 8006b9a:	d001      	beq.n	8006ba0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	e000      	b.n	8006ba2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8006ba0:	2300      	movs	r3, #0
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	3718      	adds	r7, #24
 8006ba6:	46bd      	mov	sp, r7
 8006ba8:	bd80      	pop	{r7, pc}
 8006baa:	bf00      	nop
 8006bac:	40023800 	.word	0x40023800

08006bb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	e0d0      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006bc8:	4b6a      	ldr	r3, [pc, #424]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f003 030f 	and.w	r3, r3, #15
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	429a      	cmp	r2, r3
 8006bd4:	d910      	bls.n	8006bf8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bd6:	4b67      	ldr	r3, [pc, #412]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 020f 	bic.w	r2, r3, #15
 8006bde:	4965      	ldr	r1, [pc, #404]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	4313      	orrs	r3, r2
 8006be4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006be6:	4b63      	ldr	r3, [pc, #396]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 030f 	and.w	r3, r3, #15
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d001      	beq.n	8006bf8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e0b8      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	f003 0302 	and.w	r3, r3, #2
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d020      	beq.n	8006c46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	f003 0304 	and.w	r3, r3, #4
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d005      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c10:	4b59      	ldr	r3, [pc, #356]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	4a58      	ldr	r2, [pc, #352]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0308 	and.w	r3, r3, #8
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d005      	beq.n	8006c34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c28:	4b53      	ldr	r3, [pc, #332]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	4a52      	ldr	r2, [pc, #328]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c34:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	689b      	ldr	r3, [r3, #8]
 8006c40:	494d      	ldr	r1, [pc, #308]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c42:	4313      	orrs	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0301 	and.w	r3, r3, #1
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d040      	beq.n	8006cd4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	2b01      	cmp	r3, #1
 8006c58:	d107      	bne.n	8006c6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5a:	4b47      	ldr	r3, [pc, #284]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d115      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c66:	2301      	movs	r3, #1
 8006c68:	e07f      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b02      	cmp	r3, #2
 8006c70:	d107      	bne.n	8006c82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c72:	4b41      	ldr	r3, [pc, #260]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d109      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	e073      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c82:	4b3d      	ldr	r3, [pc, #244]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f003 0302 	and.w	r3, r3, #2
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e06b      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c92:	4b39      	ldr	r3, [pc, #228]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006c94:	689b      	ldr	r3, [r3, #8]
 8006c96:	f023 0203 	bic.w	r2, r3, #3
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	4936      	ldr	r1, [pc, #216]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ca4:	f7fb f9b8 	bl	8002018 <HAL_GetTick>
 8006ca8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006caa:	e00a      	b.n	8006cc2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006cac:	f7fb f9b4 	bl	8002018 <HAL_GetTick>
 8006cb0:	4602      	mov	r2, r0
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d901      	bls.n	8006cc2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	e053      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cc2:	4b2d      	ldr	r3, [pc, #180]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 020c 	and.w	r2, r3, #12
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	685b      	ldr	r3, [r3, #4]
 8006cce:	009b      	lsls	r3, r3, #2
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d1eb      	bne.n	8006cac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006cd4:	4b27      	ldr	r3, [pc, #156]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 030f 	and.w	r3, r3, #15
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d210      	bcs.n	8006d04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ce2:	4b24      	ldr	r3, [pc, #144]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f023 020f 	bic.w	r2, r3, #15
 8006cea:	4922      	ldr	r1, [pc, #136]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	4313      	orrs	r3, r2
 8006cf0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	4b20      	ldr	r3, [pc, #128]	; (8006d74 <HAL_RCC_ClockConfig+0x1c4>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 030f 	and.w	r3, r3, #15
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e032      	b.n	8006d6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0304 	and.w	r3, r3, #4
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d008      	beq.n	8006d22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d10:	4b19      	ldr	r3, [pc, #100]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d12:	689b      	ldr	r3, [r3, #8]
 8006d14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	68db      	ldr	r3, [r3, #12]
 8006d1c:	4916      	ldr	r1, [pc, #88]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	f003 0308 	and.w	r3, r3, #8
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d009      	beq.n	8006d42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006d2e:	4b12      	ldr	r3, [pc, #72]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d30:	689b      	ldr	r3, [r3, #8]
 8006d32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	691b      	ldr	r3, [r3, #16]
 8006d3a:	00db      	lsls	r3, r3, #3
 8006d3c:	490e      	ldr	r1, [pc, #56]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d3e:	4313      	orrs	r3, r2
 8006d40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006d42:	f000 f821 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 8006d46:	4602      	mov	r2, r0
 8006d48:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <HAL_RCC_ClockConfig+0x1c8>)
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	091b      	lsrs	r3, r3, #4
 8006d4e:	f003 030f 	and.w	r3, r3, #15
 8006d52:	490a      	ldr	r1, [pc, #40]	; (8006d7c <HAL_RCC_ClockConfig+0x1cc>)
 8006d54:	5ccb      	ldrb	r3, [r1, r3]
 8006d56:	fa22 f303 	lsr.w	r3, r2, r3
 8006d5a:	4a09      	ldr	r2, [pc, #36]	; (8006d80 <HAL_RCC_ClockConfig+0x1d0>)
 8006d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8006d5e:	4b09      	ldr	r3, [pc, #36]	; (8006d84 <HAL_RCC_ClockConfig+0x1d4>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	4618      	mov	r0, r3
 8006d64:	f7fb f914 	bl	8001f90 <HAL_InitTick>

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3710      	adds	r7, #16
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}
 8006d72:	bf00      	nop
 8006d74:	40023c00 	.word	0x40023c00
 8006d78:	40023800 	.word	0x40023800
 8006d7c:	08014dcc 	.word	0x08014dcc
 8006d80:	20000000 	.word	0x20000000
 8006d84:	20000004 	.word	0x20000004

08006d88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d8c:	b094      	sub	sp, #80	; 0x50
 8006d8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8006d90:	2300      	movs	r3, #0
 8006d92:	647b      	str	r3, [r7, #68]	; 0x44
 8006d94:	2300      	movs	r3, #0
 8006d96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006d98:	2300      	movs	r3, #0
 8006d9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006da0:	4b79      	ldr	r3, [pc, #484]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	f003 030c 	and.w	r3, r3, #12
 8006da8:	2b08      	cmp	r3, #8
 8006daa:	d00d      	beq.n	8006dc8 <HAL_RCC_GetSysClockFreq+0x40>
 8006dac:	2b08      	cmp	r3, #8
 8006dae:	f200 80e1 	bhi.w	8006f74 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_RCC_GetSysClockFreq+0x34>
 8006db6:	2b04      	cmp	r3, #4
 8006db8:	d003      	beq.n	8006dc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006dba:	e0db      	b.n	8006f74 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dbc:	4b73      	ldr	r3, [pc, #460]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8006dbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dc0:	e0db      	b.n	8006f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006dc2:	4b72      	ldr	r3, [pc, #456]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8006dc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006dc6:	e0d8      	b.n	8006f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006dc8:	4b6f      	ldr	r3, [pc, #444]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dd0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8006dd2:	4b6d      	ldr	r3, [pc, #436]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dd4:	685b      	ldr	r3, [r3, #4]
 8006dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d063      	beq.n	8006ea6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dde:	4b6a      	ldr	r3, [pc, #424]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	099b      	lsrs	r3, r3, #6
 8006de4:	2200      	movs	r2, #0
 8006de6:	63bb      	str	r3, [r7, #56]	; 0x38
 8006de8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006dea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006df0:	633b      	str	r3, [r7, #48]	; 0x30
 8006df2:	2300      	movs	r3, #0
 8006df4:	637b      	str	r3, [r7, #52]	; 0x34
 8006df6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006dfa:	4622      	mov	r2, r4
 8006dfc:	462b      	mov	r3, r5
 8006dfe:	f04f 0000 	mov.w	r0, #0
 8006e02:	f04f 0100 	mov.w	r1, #0
 8006e06:	0159      	lsls	r1, r3, #5
 8006e08:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e0c:	0150      	lsls	r0, r2, #5
 8006e0e:	4602      	mov	r2, r0
 8006e10:	460b      	mov	r3, r1
 8006e12:	4621      	mov	r1, r4
 8006e14:	1a51      	subs	r1, r2, r1
 8006e16:	6139      	str	r1, [r7, #16]
 8006e18:	4629      	mov	r1, r5
 8006e1a:	eb63 0301 	sbc.w	r3, r3, r1
 8006e1e:	617b      	str	r3, [r7, #20]
 8006e20:	f04f 0200 	mov.w	r2, #0
 8006e24:	f04f 0300 	mov.w	r3, #0
 8006e28:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006e2c:	4659      	mov	r1, fp
 8006e2e:	018b      	lsls	r3, r1, #6
 8006e30:	4651      	mov	r1, sl
 8006e32:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006e36:	4651      	mov	r1, sl
 8006e38:	018a      	lsls	r2, r1, #6
 8006e3a:	4651      	mov	r1, sl
 8006e3c:	ebb2 0801 	subs.w	r8, r2, r1
 8006e40:	4659      	mov	r1, fp
 8006e42:	eb63 0901 	sbc.w	r9, r3, r1
 8006e46:	f04f 0200 	mov.w	r2, #0
 8006e4a:	f04f 0300 	mov.w	r3, #0
 8006e4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006e52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006e56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006e5a:	4690      	mov	r8, r2
 8006e5c:	4699      	mov	r9, r3
 8006e5e:	4623      	mov	r3, r4
 8006e60:	eb18 0303 	adds.w	r3, r8, r3
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	462b      	mov	r3, r5
 8006e68:	eb49 0303 	adc.w	r3, r9, r3
 8006e6c:	60fb      	str	r3, [r7, #12]
 8006e6e:	f04f 0200 	mov.w	r2, #0
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006e7a:	4629      	mov	r1, r5
 8006e7c:	028b      	lsls	r3, r1, #10
 8006e7e:	4621      	mov	r1, r4
 8006e80:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e84:	4621      	mov	r1, r4
 8006e86:	028a      	lsls	r2, r1, #10
 8006e88:	4610      	mov	r0, r2
 8006e8a:	4619      	mov	r1, r3
 8006e8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e8e:	2200      	movs	r2, #0
 8006e90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006e92:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e94:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e98:	f7f9 fea6 	bl	8000be8 <__aeabi_uldivmod>
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	4613      	mov	r3, r2
 8006ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006ea4:	e058      	b.n	8006f58 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ea6:	4b38      	ldr	r3, [pc, #224]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	099b      	lsrs	r3, r3, #6
 8006eac:	2200      	movs	r2, #0
 8006eae:	4618      	mov	r0, r3
 8006eb0:	4611      	mov	r1, r2
 8006eb2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006eb6:	623b      	str	r3, [r7, #32]
 8006eb8:	2300      	movs	r3, #0
 8006eba:	627b      	str	r3, [r7, #36]	; 0x24
 8006ebc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006ec0:	4642      	mov	r2, r8
 8006ec2:	464b      	mov	r3, r9
 8006ec4:	f04f 0000 	mov.w	r0, #0
 8006ec8:	f04f 0100 	mov.w	r1, #0
 8006ecc:	0159      	lsls	r1, r3, #5
 8006ece:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ed2:	0150      	lsls	r0, r2, #5
 8006ed4:	4602      	mov	r2, r0
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	4641      	mov	r1, r8
 8006eda:	ebb2 0a01 	subs.w	sl, r2, r1
 8006ede:	4649      	mov	r1, r9
 8006ee0:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ee4:	f04f 0200 	mov.w	r2, #0
 8006ee8:	f04f 0300 	mov.w	r3, #0
 8006eec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ef0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006ef4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006ef8:	ebb2 040a 	subs.w	r4, r2, sl
 8006efc:	eb63 050b 	sbc.w	r5, r3, fp
 8006f00:	f04f 0200 	mov.w	r2, #0
 8006f04:	f04f 0300 	mov.w	r3, #0
 8006f08:	00eb      	lsls	r3, r5, #3
 8006f0a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f0e:	00e2      	lsls	r2, r4, #3
 8006f10:	4614      	mov	r4, r2
 8006f12:	461d      	mov	r5, r3
 8006f14:	4643      	mov	r3, r8
 8006f16:	18e3      	adds	r3, r4, r3
 8006f18:	603b      	str	r3, [r7, #0]
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	eb45 0303 	adc.w	r3, r5, r3
 8006f20:	607b      	str	r3, [r7, #4]
 8006f22:	f04f 0200 	mov.w	r2, #0
 8006f26:	f04f 0300 	mov.w	r3, #0
 8006f2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f2e:	4629      	mov	r1, r5
 8006f30:	028b      	lsls	r3, r1, #10
 8006f32:	4621      	mov	r1, r4
 8006f34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f38:	4621      	mov	r1, r4
 8006f3a:	028a      	lsls	r2, r1, #10
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	4619      	mov	r1, r3
 8006f40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f42:	2200      	movs	r2, #0
 8006f44:	61bb      	str	r3, [r7, #24]
 8006f46:	61fa      	str	r2, [r7, #28]
 8006f48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f4c:	f7f9 fe4c 	bl	8000be8 <__aeabi_uldivmod>
 8006f50:	4602      	mov	r2, r0
 8006f52:	460b      	mov	r3, r1
 8006f54:	4613      	mov	r3, r2
 8006f56:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8006f58:	4b0b      	ldr	r3, [pc, #44]	; (8006f88 <HAL_RCC_GetSysClockFreq+0x200>)
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	0c1b      	lsrs	r3, r3, #16
 8006f5e:	f003 0303 	and.w	r3, r3, #3
 8006f62:	3301      	adds	r3, #1
 8006f64:	005b      	lsls	r3, r3, #1
 8006f66:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8006f68:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006f6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006f6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f70:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f72:	e002      	b.n	8006f7a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f74:	4b05      	ldr	r3, [pc, #20]	; (8006f8c <HAL_RCC_GetSysClockFreq+0x204>)
 8006f76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006f78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	3750      	adds	r7, #80	; 0x50
 8006f80:	46bd      	mov	sp, r7
 8006f82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f86:	bf00      	nop
 8006f88:	40023800 	.word	0x40023800
 8006f8c:	00f42400 	.word	0x00f42400

08006f90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f90:	b480      	push	{r7}
 8006f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f94:	4b03      	ldr	r3, [pc, #12]	; (8006fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f96:	681b      	ldr	r3, [r3, #0]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	46bd      	mov	sp, r7
 8006f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa0:	4770      	bx	lr
 8006fa2:	bf00      	nop
 8006fa4:	20000000 	.word	0x20000000

08006fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006fa8:	b580      	push	{r7, lr}
 8006faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006fac:	f7ff fff0 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006fb4:	689b      	ldr	r3, [r3, #8]
 8006fb6:	0a9b      	lsrs	r3, r3, #10
 8006fb8:	f003 0307 	and.w	r3, r3, #7
 8006fbc:	4903      	ldr	r1, [pc, #12]	; (8006fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8006fbe:	5ccb      	ldrb	r3, [r1, r3]
 8006fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	bd80      	pop	{r7, pc}
 8006fc8:	40023800 	.word	0x40023800
 8006fcc:	08014ddc 	.word	0x08014ddc

08006fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006fd4:	f7ff ffdc 	bl	8006f90 <HAL_RCC_GetHCLKFreq>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	4b05      	ldr	r3, [pc, #20]	; (8006ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	0b5b      	lsrs	r3, r3, #13
 8006fe0:	f003 0307 	and.w	r3, r3, #7
 8006fe4:	4903      	ldr	r1, [pc, #12]	; (8006ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fe6:	5ccb      	ldrb	r3, [r1, r3]
 8006fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	08014ddc 	.word	0x08014ddc

08006ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b088      	sub	sp, #32
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007000:	2300      	movs	r3, #0
 8007002:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007004:	2300      	movs	r3, #0
 8007006:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007008:	2300      	movs	r3, #0
 800700a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800700c:	2300      	movs	r3, #0
 800700e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007010:	2300      	movs	r3, #0
 8007012:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f003 0301 	and.w	r3, r3, #1
 800701c:	2b00      	cmp	r3, #0
 800701e:	d012      	beq.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007020:	4b69      	ldr	r3, [pc, #420]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007022:	689b      	ldr	r3, [r3, #8]
 8007024:	4a68      	ldr	r2, [pc, #416]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007026:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800702a:	6093      	str	r3, [r2, #8]
 800702c:	4b66      	ldr	r3, [pc, #408]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800702e:	689a      	ldr	r2, [r3, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007034:	4964      	ldr	r1, [pc, #400]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007036:	4313      	orrs	r3, r2
 8007038:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800703e:	2b00      	cmp	r3, #0
 8007040:	d101      	bne.n	8007046 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007042:	2301      	movs	r3, #1
 8007044:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d017      	beq.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007052:	4b5d      	ldr	r3, [pc, #372]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007054:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007058:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007060:	4959      	ldr	r1, [pc, #356]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007062:	4313      	orrs	r3, r2
 8007064:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800706c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007070:	d101      	bne.n	8007076 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8007072:	2301      	movs	r3, #1
 8007074:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800707a:	2b00      	cmp	r3, #0
 800707c:	d101      	bne.n	8007082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800707e:	2301      	movs	r3, #1
 8007080:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800708a:	2b00      	cmp	r3, #0
 800708c:	d017      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800708e:	4b4e      	ldr	r3, [pc, #312]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007090:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007094:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800709c:	494a      	ldr	r1, [pc, #296]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800709e:	4313      	orrs	r3, r2
 80070a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ac:	d101      	bne.n	80070b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80070ae:	2301      	movs	r3, #1
 80070b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80070ba:	2301      	movs	r3, #1
 80070bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d001      	beq.n	80070ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80070ca:	2301      	movs	r3, #1
 80070cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f003 0320 	and.w	r3, r3, #32
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f000 808b 	beq.w	80071f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80070dc:	4b3a      	ldr	r3, [pc, #232]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070e0:	4a39      	ldr	r2, [pc, #228]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80070e6:	6413      	str	r3, [r2, #64]	; 0x40
 80070e8:	4b37      	ldr	r3, [pc, #220]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80070ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80070f0:	60bb      	str	r3, [r7, #8]
 80070f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80070f4:	4b35      	ldr	r3, [pc, #212]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	4a34      	ldr	r2, [pc, #208]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80070fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007100:	f7fa ff8a 	bl	8002018 <HAL_GetTick>
 8007104:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8007106:	e008      	b.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007108:	f7fa ff86 	bl	8002018 <HAL_GetTick>
 800710c:	4602      	mov	r2, r0
 800710e:	697b      	ldr	r3, [r7, #20]
 8007110:	1ad3      	subs	r3, r2, r3
 8007112:	2b64      	cmp	r3, #100	; 0x64
 8007114:	d901      	bls.n	800711a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8007116:	2303      	movs	r3, #3
 8007118:	e31f      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800711a:	4b2c      	ldr	r3, [pc, #176]	; (80071cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0f0      	beq.n	8007108 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007126:	4b28      	ldr	r3, [pc, #160]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800712a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800712e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007130:	693b      	ldr	r3, [r7, #16]
 8007132:	2b00      	cmp	r3, #0
 8007134:	d035      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800713a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800713e:	693a      	ldr	r2, [r7, #16]
 8007140:	429a      	cmp	r2, r3
 8007142:	d02e      	beq.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007144:	4b20      	ldr	r3, [pc, #128]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007148:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800714c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800714e:	4b1e      	ldr	r3, [pc, #120]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007152:	4a1d      	ldr	r2, [pc, #116]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007154:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007158:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800715a:	4b1b      	ldr	r3, [pc, #108]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800715c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800715e:	4a1a      	ldr	r2, [pc, #104]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007164:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8007166:	4a18      	ldr	r2, [pc, #96]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800716c:	4b16      	ldr	r3, [pc, #88]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800716e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007170:	f003 0301 	and.w	r3, r3, #1
 8007174:	2b01      	cmp	r3, #1
 8007176:	d114      	bne.n	80071a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007178:	f7fa ff4e 	bl	8002018 <HAL_GetTick>
 800717c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800717e:	e00a      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007180:	f7fa ff4a 	bl	8002018 <HAL_GetTick>
 8007184:	4602      	mov	r2, r0
 8007186:	697b      	ldr	r3, [r7, #20]
 8007188:	1ad3      	subs	r3, r2, r3
 800718a:	f241 3288 	movw	r2, #5000	; 0x1388
 800718e:	4293      	cmp	r3, r2
 8007190:	d901      	bls.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e2e1      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x762>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007198:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800719a:	f003 0302 	and.w	r3, r3, #2
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0ee      	beq.n	8007180 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80071ae:	d111      	bne.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80071b0:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80071bc:	4b04      	ldr	r3, [pc, #16]	; (80071d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80071be:	400b      	ands	r3, r1
 80071c0:	4901      	ldr	r1, [pc, #4]	; (80071c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071c2:	4313      	orrs	r3, r2
 80071c4:	608b      	str	r3, [r1, #8]
 80071c6:	e00b      	b.n	80071e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80071c8:	40023800 	.word	0x40023800
 80071cc:	40007000 	.word	0x40007000
 80071d0:	0ffffcff 	.word	0x0ffffcff
 80071d4:	4ba8      	ldr	r3, [pc, #672]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	4aa7      	ldr	r2, [pc, #668]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80071da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80071de:	6093      	str	r3, [r2, #8]
 80071e0:	4ba5      	ldr	r3, [pc, #660]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80071e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80071e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80071ec:	49a2      	ldr	r1, [pc, #648]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80071ee:	4313      	orrs	r3, r2
 80071f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	f003 0310 	and.w	r3, r3, #16
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d010      	beq.n	8007220 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80071fe:	4b9e      	ldr	r3, [pc, #632]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007204:	4a9c      	ldr	r2, [pc, #624]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800720a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800720e:	4b9a      	ldr	r3, [pc, #616]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007210:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007218:	4997      	ldr	r1, [pc, #604]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800721a:	4313      	orrs	r3, r2
 800721c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007228:	2b00      	cmp	r3, #0
 800722a:	d00a      	beq.n	8007242 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800722c:	4b92      	ldr	r3, [pc, #584]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007232:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800723a:	498f      	ldr	r1, [pc, #572]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800723c:	4313      	orrs	r3, r2
 800723e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800724a:	2b00      	cmp	r3, #0
 800724c:	d00a      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800724e:	4b8a      	ldr	r3, [pc, #552]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007250:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007254:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800725c:	4986      	ldr	r1, [pc, #536]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800725e:	4313      	orrs	r3, r2
 8007260:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800726c:	2b00      	cmp	r3, #0
 800726e:	d00a      	beq.n	8007286 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007270:	4b81      	ldr	r3, [pc, #516]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007276:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800727e:	497e      	ldr	r1, [pc, #504]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007280:	4313      	orrs	r3, r2
 8007282:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00a      	beq.n	80072a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8007292:	4b79      	ldr	r3, [pc, #484]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007294:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072a0:	4975      	ldr	r1, [pc, #468]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80072a2:	4313      	orrs	r3, r2
 80072a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d00a      	beq.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80072b4:	4b70      	ldr	r3, [pc, #448]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80072b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072ba:	f023 0203 	bic.w	r2, r3, #3
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072c2:	496d      	ldr	r1, [pc, #436]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d00a      	beq.n	80072ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80072d6:	4b68      	ldr	r3, [pc, #416]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80072d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072dc:	f023 020c 	bic.w	r2, r3, #12
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072e4:	4964      	ldr	r1, [pc, #400]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80072e6:	4313      	orrs	r3, r2
 80072e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00a      	beq.n	800730e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80072f8:	4b5f      	ldr	r3, [pc, #380]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007306:	495c      	ldr	r1, [pc, #368]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007308:	4313      	orrs	r3, r2
 800730a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007316:	2b00      	cmp	r3, #0
 8007318:	d00a      	beq.n	8007330 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800731a:	4b57      	ldr	r3, [pc, #348]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800731c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007320:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007328:	4953      	ldr	r1, [pc, #332]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800732a:	4313      	orrs	r3, r2
 800732c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00a      	beq.n	8007352 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800733c:	4b4e      	ldr	r3, [pc, #312]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800733e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007342:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734a:	494b      	ldr	r1, [pc, #300]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800734c:	4313      	orrs	r3, r2
 800734e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800735e:	4b46      	ldr	r3, [pc, #280]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007364:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800736c:	4942      	ldr	r1, [pc, #264]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800736e:	4313      	orrs	r3, r2
 8007370:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00a      	beq.n	8007396 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8007380:	4b3d      	ldr	r3, [pc, #244]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007386:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800738e:	493a      	ldr	r1, [pc, #232]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007390:	4313      	orrs	r3, r2
 8007392:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d00a      	beq.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80073a2:	4b35      	ldr	r3, [pc, #212]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073b0:	4931      	ldr	r1, [pc, #196]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073b2:	4313      	orrs	r3, r2
 80073b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d00a      	beq.n	80073da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80073c4:	4b2c      	ldr	r3, [pc, #176]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80073d2:	4929      	ldr	r1, [pc, #164]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073d4:	4313      	orrs	r3, r2
 80073d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d011      	beq.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80073e6:	4b24      	ldr	r3, [pc, #144]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80073f4:	4920      	ldr	r1, [pc, #128]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 80073f6:	4313      	orrs	r3, r2
 80073f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007400:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007404:	d101      	bne.n	800740a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8007406:	2301      	movs	r3, #1
 8007408:	61bb      	str	r3, [r7, #24]
    pllsaiused = 1;
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007412:	2b00      	cmp	r3, #0
 8007414:	d00a      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x434>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007416:	4b18      	ldr	r3, [pc, #96]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800741c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007424:	4914      	ldr	r1, [pc, #80]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <HAL_RCCEx_PeriphCLKConfig+0x458>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8007438:	4b0f      	ldr	r3, [pc, #60]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800743a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007448:	490b      	ldr	r1, [pc, #44]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800744a:	4313      	orrs	r3, r2
 800744c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007450:	69fb      	ldr	r3, [r7, #28]
 8007452:	2b01      	cmp	r3, #1
 8007454:	d006      	beq.n	8007464 <HAL_RCCEx_PeriphCLKConfig+0x46c>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800745e:	2b00      	cmp	r3, #0
 8007460:	f000 80d8 	beq.w	8007614 <HAL_RCCEx_PeriphCLKConfig+0x61c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007464:	4b04      	ldr	r3, [pc, #16]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	4a03      	ldr	r2, [pc, #12]	; (8007478 <HAL_RCCEx_PeriphCLKConfig+0x480>)
 800746a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800746e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007470:	f7fa fdd2 	bl	8002018 <HAL_GetTick>
 8007474:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007476:	e00a      	b.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x496>
 8007478:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800747c:	f7fa fdcc 	bl	8002018 <HAL_GetTick>
 8007480:	4602      	mov	r2, r0
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	1ad3      	subs	r3, r2, r3
 8007486:	2b64      	cmp	r3, #100	; 0x64
 8007488:	d901      	bls.n	800748e <HAL_RCCEx_PeriphCLKConfig+0x496>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800748a:	2303      	movs	r3, #3
 800748c:	e165      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800748e:	4ba9      	ldr	r3, [pc, #676]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007496:	2b00      	cmp	r3, #0
 8007498:	d1f0      	bne.n	800747c <HAL_RCCEx_PeriphCLKConfig+0x484>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f003 0301 	and.w	r3, r3, #1
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d021      	beq.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d11d      	bne.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x4f2>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80074ae:	4ba1      	ldr	r3, [pc, #644]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80074b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074b4:	0c1b      	lsrs	r3, r3, #16
 80074b6:	f003 0303 	and.w	r3, r3, #3
 80074ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80074bc:	4b9d      	ldr	r3, [pc, #628]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80074be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074c2:	0e1b      	lsrs	r3, r3, #24
 80074c4:	f003 030f 	and.w	r3, r3, #15
 80074c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	685b      	ldr	r3, [r3, #4]
 80074ce:	019a      	lsls	r2, r3, #6
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	041b      	lsls	r3, r3, #16
 80074d4:	431a      	orrs	r2, r3
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	061b      	lsls	r3, r3, #24
 80074da:	431a      	orrs	r2, r3
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	689b      	ldr	r3, [r3, #8]
 80074e0:	071b      	lsls	r3, r3, #28
 80074e2:	4994      	ldr	r1, [pc, #592]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80074e4:	4313      	orrs	r3, r2
 80074e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d004      	beq.n	8007500 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80074fe:	d00a      	beq.n	8007516 <HAL_RCCEx_PeriphCLKConfig+0x51e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007508:	2b00      	cmp	r3, #0
 800750a:	d02e      	beq.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x572>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007514:	d129      	bne.n	800756a <HAL_RCCEx_PeriphCLKConfig+0x572>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8007516:	4b87      	ldr	r3, [pc, #540]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007518:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800751c:	0c1b      	lsrs	r3, r3, #16
 800751e:	f003 0303 	and.w	r3, r3, #3
 8007522:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007524:	4b83      	ldr	r3, [pc, #524]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007526:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800752a:	0f1b      	lsrs	r3, r3, #28
 800752c:	f003 0307 	and.w	r3, r3, #7
 8007530:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	685b      	ldr	r3, [r3, #4]
 8007536:	019a      	lsls	r2, r3, #6
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	041b      	lsls	r3, r3, #16
 800753c:	431a      	orrs	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	061b      	lsls	r3, r3, #24
 8007544:	431a      	orrs	r2, r3
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	071b      	lsls	r3, r3, #28
 800754a:	497a      	ldr	r1, [pc, #488]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800754c:	4313      	orrs	r3, r2
 800754e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007552:	4b78      	ldr	r3, [pc, #480]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007554:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007558:	f023 021f 	bic.w	r2, r3, #31
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007560:	3b01      	subs	r3, #1
 8007562:	4974      	ldr	r1, [pc, #464]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007564:	4313      	orrs	r3, r2
 8007566:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007572:	2b00      	cmp	r3, #0
 8007574:	d01d      	beq.n	80075b2 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007576:	4b6f      	ldr	r3, [pc, #444]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007578:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800757c:	0e1b      	lsrs	r3, r3, #24
 800757e:	f003 030f 	and.w	r3, r3, #15
 8007582:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007584:	4b6b      	ldr	r3, [pc, #428]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800758a:	0f1b      	lsrs	r3, r3, #28
 800758c:	f003 0307 	and.w	r3, r3, #7
 8007590:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	019a      	lsls	r2, r3, #6
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	041b      	lsls	r3, r3, #16
 800759e:	431a      	orrs	r2, r3
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	061b      	lsls	r3, r3, #24
 80075a4:	431a      	orrs	r2, r3
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	071b      	lsls	r3, r3, #28
 80075aa:	4962      	ldr	r1, [pc, #392]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80075ac:	4313      	orrs	r3, r2
 80075ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d011      	beq.n	80075e2 <HAL_RCCEx_PeriphCLKConfig+0x5ea>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	019a      	lsls	r2, r3, #6
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	691b      	ldr	r3, [r3, #16]
 80075c8:	041b      	lsls	r3, r3, #16
 80075ca:	431a      	orrs	r2, r3
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	061b      	lsls	r3, r3, #24
 80075d2:	431a      	orrs	r2, r3
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	689b      	ldr	r3, [r3, #8]
 80075d8:	071b      	lsls	r3, r3, #28
 80075da:	4956      	ldr	r1, [pc, #344]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80075e2:	4b54      	ldr	r3, [pc, #336]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4a53      	ldr	r2, [pc, #332]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80075e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80075ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075ee:	f7fa fd13 	bl	8002018 <HAL_GetTick>
 80075f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80075f4:	e008      	b.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x610>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80075f6:	f7fa fd0f 	bl	8002018 <HAL_GetTick>
 80075fa:	4602      	mov	r2, r0
 80075fc:	697b      	ldr	r3, [r7, #20]
 80075fe:	1ad3      	subs	r3, r2, r3
 8007600:	2b64      	cmp	r3, #100	; 0x64
 8007602:	d901      	bls.n	8007608 <HAL_RCCEx_PeriphCLKConfig+0x610>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007604:	2303      	movs	r3, #3
 8007606:	e0a8      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007608:	4b4a      	ldr	r3, [pc, #296]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007610:	2b00      	cmp	r3, #0
 8007612:	d0f0      	beq.n	80075f6 <HAL_RCCEx_PeriphCLKConfig+0x5fe>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8007614:	69bb      	ldr	r3, [r7, #24]
 8007616:	2b01      	cmp	r3, #1
 8007618:	f040 809e 	bne.w	8007758 <HAL_RCCEx_PeriphCLKConfig+0x760>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800761c:	4b45      	ldr	r3, [pc, #276]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	4a44      	ldr	r2, [pc, #272]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007622:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007626:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007628:	f7fa fcf6 	bl	8002018 <HAL_GetTick>
 800762c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800762e:	e008      	b.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x64a>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007630:	f7fa fcf2 	bl	8002018 <HAL_GetTick>
 8007634:	4602      	mov	r2, r0
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	1ad3      	subs	r3, r2, r3
 800763a:	2b64      	cmp	r3, #100	; 0x64
 800763c:	d901      	bls.n	8007642 <HAL_RCCEx_PeriphCLKConfig+0x64a>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800763e:	2303      	movs	r3, #3
 8007640:	e08b      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8007642:	4b3c      	ldr	r3, [pc, #240]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800764a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800764e:	d0ef      	beq.n	8007630 <HAL_RCCEx_PeriphCLKConfig+0x638>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007660:	2b00      	cmp	r3, #0
 8007662:	d009      	beq.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x680>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800766c:	2b00      	cmp	r3, #0
 800766e:	d02e      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x6d6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007674:	2b00      	cmp	r3, #0
 8007676:	d12a      	bne.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8007678:	4b2e      	ldr	r3, [pc, #184]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800767a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800767e:	0c1b      	lsrs	r3, r3, #16
 8007680:	f003 0303 	and.w	r3, r3, #3
 8007684:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8007686:	4b2b      	ldr	r3, [pc, #172]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800768c:	0f1b      	lsrs	r3, r3, #28
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	695b      	ldr	r3, [r3, #20]
 8007698:	019a      	lsls	r2, r3, #6
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	041b      	lsls	r3, r3, #16
 800769e:	431a      	orrs	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	699b      	ldr	r3, [r3, #24]
 80076a4:	061b      	lsls	r3, r3, #24
 80076a6:	431a      	orrs	r2, r3
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	071b      	lsls	r3, r3, #28
 80076ac:	4921      	ldr	r1, [pc, #132]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80076ae:	4313      	orrs	r3, r2
 80076b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80076b4:	4b1f      	ldr	r3, [pc, #124]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80076b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80076ba:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c2:	3b01      	subs	r3, #1
 80076c4:	021b      	lsls	r3, r3, #8
 80076c6:	491b      	ldr	r1, [pc, #108]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d022      	beq.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80076de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80076e2:	d11d      	bne.n	8007720 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80076e4:	4b13      	ldr	r3, [pc, #76]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80076e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076ea:	0e1b      	lsrs	r3, r3, #24
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80076f2:	4b10      	ldr	r3, [pc, #64]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80076f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076f8:	0f1b      	lsrs	r3, r3, #28
 80076fa:	f003 0307 	and.w	r3, r3, #7
 80076fe:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	695b      	ldr	r3, [r3, #20]
 8007704:	019a      	lsls	r2, r3, #6
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6a1b      	ldr	r3, [r3, #32]
 800770a:	041b      	lsls	r3, r3, #16
 800770c:	431a      	orrs	r2, r3
 800770e:	693b      	ldr	r3, [r7, #16]
 8007710:	061b      	lsls	r3, r3, #24
 8007712:	431a      	orrs	r2, r3
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	071b      	lsls	r3, r3, #28
 8007718:	4906      	ldr	r1, [pc, #24]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800771a:	4313      	orrs	r3, r2
 800771c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007720:	4b04      	ldr	r3, [pc, #16]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	4a03      	ldr	r2, [pc, #12]	; (8007734 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8007726:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800772a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800772c:	f7fa fc74 	bl	8002018 <HAL_GetTick>
 8007730:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007732:	e00a      	b.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x752>
 8007734:	40023800 	.word	0x40023800
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007738:	f7fa fc6e 	bl	8002018 <HAL_GetTick>
 800773c:	4602      	mov	r2, r0
 800773e:	697b      	ldr	r3, [r7, #20]
 8007740:	1ad3      	subs	r3, r2, r3
 8007742:	2b64      	cmp	r3, #100	; 0x64
 8007744:	d901      	bls.n	800774a <HAL_RCCEx_PeriphCLKConfig+0x752>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007746:	2303      	movs	r3, #3
 8007748:	e007      	b.n	800775a <HAL_RCCEx_PeriphCLKConfig+0x762>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800774a:	4b06      	ldr	r3, [pc, #24]	; (8007764 <HAL_RCCEx_PeriphCLKConfig+0x76c>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007752:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007756:	d1ef      	bne.n	8007738 <HAL_RCCEx_PeriphCLKConfig+0x740>
      }
    }
  }
  return HAL_OK;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3720      	adds	r7, #32
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	40023800 	.word	0x40023800

08007768 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b082      	sub	sp, #8
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d101      	bne.n	800777a <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8007776:	2301      	movs	r3, #1
 8007778:	e022      	b.n	80077c0 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007780:	b2db      	uxtb	r3, r3
 8007782:	2b00      	cmp	r3, #0
 8007784:	d105      	bne.n	8007792 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7fa f84d 	bl	800182c <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2203      	movs	r2, #3
 8007796:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f000 f814 	bl	80077c8 <HAL_SD_InitCard>
 80077a0:	4603      	mov	r3, r0
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d001      	beq.n	80077aa <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80077a6:	2301      	movs	r3, #1
 80077a8:	e00a      	b.n	80077c0 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2200      	movs	r2, #0
 80077ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2201      	movs	r2, #1
 80077ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80077be:	2300      	movs	r3, #0
}
 80077c0:	4618      	mov	r0, r3
 80077c2:	3708      	adds	r7, #8
 80077c4:	46bd      	mov	sp, r7
 80077c6:	bd80      	pop	{r7, pc}

080077c8 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 80077c8:	b5b0      	push	{r4, r5, r7, lr}
 80077ca:	b08e      	sub	sp, #56	; 0x38
 80077cc:	af04      	add	r7, sp, #16
 80077ce:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80077d0:	2300      	movs	r3, #0
 80077d2:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 80077d4:	2300      	movs	r3, #0
 80077d6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80077d8:	2300      	movs	r3, #0
 80077da:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80077e0:	2300      	movs	r3, #0
 80077e2:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 80077e4:	2376      	movs	r3, #118	; 0x76
 80077e6:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681d      	ldr	r5, [r3, #0]
 80077ec:	466c      	mov	r4, sp
 80077ee:	f107 0314 	add.w	r3, r7, #20
 80077f2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80077f6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80077fa:	f107 0308 	add.w	r3, r7, #8
 80077fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8007800:	4628      	mov	r0, r5
 8007802:	f002 fbaf 	bl	8009f64 <SDMMC_Init>
 8007806:	4603      	mov	r3, r0
 8007808:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 800780c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007810:	2b00      	cmp	r3, #0
 8007812:	d001      	beq.n	8007818 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e059      	b.n	80078cc <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	685a      	ldr	r2, [r3, #4]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007826:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4618      	mov	r0, r3
 800782e:	f002 fbe3 	bl	8009ff8 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	685a      	ldr	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007840:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8007842:	2002      	movs	r0, #2
 8007844:	f7fa fbf4 	bl	8002030 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 fe67 	bl	800851c <SD_PowerON>
 800784e:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007850:	6a3b      	ldr	r3, [r7, #32]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d00b      	beq.n	800786e <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	2201      	movs	r2, #1
 800785a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007862:	6a3b      	ldr	r3, [r7, #32]
 8007864:	431a      	orrs	r2, r3
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800786a:	2301      	movs	r3, #1
 800786c:	e02e      	b.n	80078cc <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fd86 	bl	8008380 <SD_InitCard>
 8007874:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00b      	beq.n	8007894 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2201      	movs	r2, #1
 8007880:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	431a      	orrs	r2, r3
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007890:	2301      	movs	r3, #1
 8007892:	e01b      	b.n	80078cc <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f44f 7100 	mov.w	r1, #512	; 0x200
 800789c:	4618      	mov	r0, r3
 800789e:	f002 fc3d 	bl	800a11c <SDMMC_CmdBlockLength>
 80078a2:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80078a4:	6a3b      	ldr	r3, [r7, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d00f      	beq.n	80078ca <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	4a09      	ldr	r2, [pc, #36]	; (80078d4 <HAL_SD_InitCard+0x10c>)
 80078b0:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	431a      	orrs	r2, r3
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80078c6:	2301      	movs	r3, #1
 80078c8:	e000      	b.n	80078cc <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 80078ca:	2300      	movs	r3, #0
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3728      	adds	r7, #40	; 0x28
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bdb0      	pop	{r4, r5, r7, pc}
 80078d4:	004005ff 	.word	0x004005ff

080078d8 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b092      	sub	sp, #72	; 0x48
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	607a      	str	r2, [r7, #4]
 80078e4:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80078e6:	f7fa fb97 	bl	8002018 <HAL_GetTick>
 80078ea:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 80078f4:	68bb      	ldr	r3, [r7, #8]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d107      	bne.n	800790a <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078fe:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007906:	2301      	movs	r3, #1
 8007908:	e1bd      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b01      	cmp	r3, #1
 8007914:	f040 81b0 	bne.w	8007c78 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	2200      	movs	r2, #0
 800791c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800791e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007920:	683b      	ldr	r3, [r7, #0]
 8007922:	441a      	add	r2, r3
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007928:	429a      	cmp	r2, r3
 800792a:	d907      	bls.n	800793c <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007930:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007938:	2301      	movs	r3, #1
 800793a:	e1a4      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	2203      	movs	r2, #3
 8007940:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2200      	movs	r2, #0
 800794a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007950:	2b01      	cmp	r3, #1
 8007952:	d002      	beq.n	800795a <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8007954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007956:	025b      	lsls	r3, r3, #9
 8007958:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800795a:	f04f 33ff 	mov.w	r3, #4294967295
 800795e:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007960:	683b      	ldr	r3, [r7, #0]
 8007962:	025b      	lsls	r3, r3, #9
 8007964:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007966:	2390      	movs	r3, #144	; 0x90
 8007968:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 800796a:	2302      	movs	r3, #2
 800796c:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 800796e:	2300      	movs	r3, #0
 8007970:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007972:	2301      	movs	r3, #1
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f107 0214 	add.w	r2, r7, #20
 800797e:	4611      	mov	r1, r2
 8007980:	4618      	mov	r0, r3
 8007982:	f002 fb9f 	bl	800a0c4 <SDMMC_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 8007986:	683b      	ldr	r3, [r7, #0]
 8007988:	2b01      	cmp	r3, #1
 800798a:	d90a      	bls.n	80079a2 <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	2202      	movs	r2, #2
 8007990:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007998:	4618      	mov	r0, r3
 800799a:	f002 fc03 	bl	800a1a4 <SDMMC_CmdReadMultiBlock>
 800799e:	6478      	str	r0, [r7, #68]	; 0x44
 80079a0:	e009      	b.n	80079b6 <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2201      	movs	r2, #1
 80079a6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80079ae:	4618      	mov	r0, r3
 80079b0:	f002 fbd6 	bl	800a160 <SDMMC_CmdReadSingleBlock>
 80079b4:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 80079b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d012      	beq.n	80079e2 <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	4a7a      	ldr	r2, [pc, #488]	; (8007bac <HAL_SD_ReadBlocks+0x2d4>)
 80079c2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80079c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079ca:	431a      	orrs	r2, r3
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2200      	movs	r2, #0
 80079dc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 80079de:	2301      	movs	r3, #1
 80079e0:	e151      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80079e6:	e061      	b.n	8007aac <HAL_SD_ReadBlocks+0x1d4>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining > 0U))
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d03c      	beq.n	8007a70 <HAL_SD_ReadBlocks+0x198>
 80079f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d039      	beq.n	8007a70 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDMMC Rx FIFO */
        for(count = 0U; count < 8U; count++)
 80079fc:	2300      	movs	r3, #0
 80079fe:	643b      	str	r3, [r7, #64]	; 0x40
 8007a00:	e033      	b.n	8007a6a <HAL_SD_ReadBlocks+0x192>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	4618      	mov	r0, r3
 8007a08:	f002 fad8 	bl	8009fbc <SDMMC_ReadFIFO>
 8007a0c:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8007a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a10:	b2da      	uxtb	r2, r3
 8007a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a14:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a18:	3301      	adds	r3, #1
 8007a1a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1e:	3b01      	subs	r3, #1
 8007a20:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a24:	0a1b      	lsrs	r3, r3, #8
 8007a26:	b2da      	uxtb	r2, r3
 8007a28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2a:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a2e:	3301      	adds	r3, #1
 8007a30:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a34:	3b01      	subs	r3, #1
 8007a36:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007a38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a3a:	0c1b      	lsrs	r3, r3, #16
 8007a3c:	b2da      	uxtb	r2, r3
 8007a3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a40:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a44:	3301      	adds	r3, #1
 8007a46:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a4a:	3b01      	subs	r3, #1
 8007a4c:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a50:	0e1b      	lsrs	r3, r3, #24
 8007a52:	b2da      	uxtb	r2, r3
 8007a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a56:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8007a58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a5a:	3301      	adds	r3, #1
 8007a5c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007a5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a60:	3b01      	subs	r3, #1
 8007a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 8007a64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a66:	3301      	adds	r3, #1
 8007a68:	643b      	str	r3, [r7, #64]	; 0x40
 8007a6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007a6c:	2b07      	cmp	r3, #7
 8007a6e:	d9c8      	bls.n	8007a02 <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007a70:	f7fa fad2 	bl	8002018 <HAL_GetTick>
 8007a74:	4602      	mov	r2, r0
 8007a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a78:	1ad3      	subs	r3, r2, r3
 8007a7a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007a7c:	429a      	cmp	r2, r3
 8007a7e:	d902      	bls.n	8007a86 <HAL_SD_ReadBlocks+0x1ae>
 8007a80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d112      	bne.n	8007aac <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	4a48      	ldr	r2, [pc, #288]	; (8007bac <HAL_SD_ReadBlocks+0x2d4>)
 8007a8c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a92:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007aa8:	2303      	movs	r3, #3
 8007aaa:	e0ec      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d096      	beq.n	80079e8 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ac0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d022      	beq.n	8007b0e <HAL_SD_ReadBlocks+0x236>
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	2b01      	cmp	r3, #1
 8007acc:	d91f      	bls.n	8007b0e <HAL_SD_ReadBlocks+0x236>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ad2:	2b03      	cmp	r3, #3
 8007ad4:	d01b      	beq.n	8007b0e <HAL_SD_ReadBlocks+0x236>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4618      	mov	r0, r3
 8007adc:	f002 fbc8 	bl	800a270 <SDMMC_CmdStopTransfer>
 8007ae0:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ae2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d012      	beq.n	8007b0e <HAL_SD_ReadBlocks+0x236>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a2f      	ldr	r2, [pc, #188]	; (8007bac <HAL_SD_ReadBlocks+0x2d4>)
 8007aee:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007af4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007af6:	431a      	orrs	r2, r3
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	2200      	movs	r2, #0
 8007b08:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	e0bb      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d012      	beq.n	8007b42 <HAL_SD_ReadBlocks+0x26a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a22      	ldr	r2, [pc, #136]	; (8007bac <HAL_SD_ReadBlocks+0x2d4>)
 8007b22:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b28:	f043 0208 	orr.w	r2, r3, #8
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2201      	movs	r2, #1
 8007b34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e0a1      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	f003 0302 	and.w	r3, r3, #2
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d012      	beq.n	8007b76 <HAL_SD_ReadBlocks+0x29e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	4a15      	ldr	r2, [pc, #84]	; (8007bac <HAL_SD_ReadBlocks+0x2d4>)
 8007b56:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b5c:	f043 0202 	orr.w	r2, r3, #2
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2200      	movs	r2, #0
 8007b70:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007b72:	2301      	movs	r3, #1
 8007b74:	e087      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7c:	f003 0320 	and.w	r3, r3, #32
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d064      	beq.n	8007c4e <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a08      	ldr	r2, [pc, #32]	; (8007bac <HAL_SD_ReadBlocks+0x2d4>)
 8007b8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b90:	f043 0220 	orr.w	r2, r3, #32
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2201      	movs	r2, #1
 8007b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2200      	movs	r2, #0
 8007ba4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e06d      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
 8007baa:	bf00      	nop
 8007bac:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f002 fa01 	bl	8009fbc <SDMMC_ReadFIFO>
 8007bba:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8007bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bbe:	b2da      	uxtb	r2, r3
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc2:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007bc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc6:	3301      	adds	r3, #1
 8007bc8:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007bca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bcc:	3b01      	subs	r3, #1
 8007bce:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8007bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bd2:	0a1b      	lsrs	r3, r3, #8
 8007bd4:	b2da      	uxtb	r2, r3
 8007bd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bd8:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007bda:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bdc:	3301      	adds	r3, #1
 8007bde:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be2:	3b01      	subs	r3, #1
 8007be4:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8007be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007be8:	0c1b      	lsrs	r3, r3, #16
 8007bea:	b2da      	uxtb	r2, r3
 8007bec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bee:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007bf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf8:	3b01      	subs	r3, #1
 8007bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8007bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007bfe:	0e1b      	lsrs	r3, r3, #24
 8007c00:	b2da      	uxtb	r2, r3
 8007c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c04:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8007c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c08:	3301      	adds	r3, #1
 8007c0a:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8007c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c0e:	3b01      	subs	r3, #1
 8007c10:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007c12:	f7fa fa01 	bl	8002018 <HAL_GetTick>
 8007c16:	4602      	mov	r2, r0
 8007c18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1a:	1ad3      	subs	r3, r2, r3
 8007c1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d902      	bls.n	8007c28 <HAL_SD_ReadBlocks+0x350>
 8007c22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d112      	bne.n	8007c4e <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	4a18      	ldr	r2, [pc, #96]	; (8007c90 <HAL_SD_ReadBlocks+0x3b8>)
 8007c2e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c34:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2200      	movs	r2, #0
 8007c48:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8007c4a:	2301      	movs	r3, #1
 8007c4c:	e01b      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL)) && (dataremaining > 0U))
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d002      	beq.n	8007c62 <HAL_SD_ReadBlocks+0x38a>
 8007c5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1a6      	bne.n	8007bb0 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f240 523a 	movw	r2, #1338	; 0x53a
 8007c6a:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	e006      	b.n	8007c86 <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c7c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007c84:	2301      	movs	r3, #1
  }
}
 8007c86:	4618      	mov	r0, r3
 8007c88:	3748      	adds	r7, #72	; 0x48
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	004005ff 	.word	0x004005ff

08007c94 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	b092      	sub	sp, #72	; 0x48
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	60f8      	str	r0, [r7, #12]
 8007c9c:	60b9      	str	r1, [r7, #8]
 8007c9e:	607a      	str	r2, [r7, #4]
 8007ca0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8007ca2:	f7fa f9b9 	bl	8002018 <HAL_GetTick>
 8007ca6:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8007cac:	68bb      	ldr	r3, [r7, #8]
 8007cae:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d107      	bne.n	8007cc6 <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	e165      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007ccc:	b2db      	uxtb	r3, r3
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	f040 8158 	bne.w	8007f84 <HAL_SD_WriteBlocks+0x2f0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8007cda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	441a      	add	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d907      	bls.n	8007cf8 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8007cf4:	2301      	movs	r3, #1
 8007cf6:	e14c      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2203      	movs	r2, #3
 8007cfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	2200      	movs	r2, #0
 8007d06:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d002      	beq.n	8007d16 <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8007d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d12:	025b      	lsls	r3, r3, #9
 8007d14:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8007d16:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1a:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	025b      	lsls	r3, r3, #9
 8007d20:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8007d22:	2390      	movs	r3, #144	; 0x90
 8007d24:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 8007d26:	2300      	movs	r3, #0
 8007d28:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8007d2a:	2300      	movs	r3, #0
 8007d2c:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDMMC_DPSM_ENABLE;
 8007d2e:	2301      	movs	r3, #1
 8007d30:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f107 0218 	add.w	r2, r7, #24
 8007d3a:	4611      	mov	r1, r2
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	f002 f9c1 	bl	800a0c4 <SDMMC_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8007d42:	683b      	ldr	r3, [r7, #0]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d90a      	bls.n	8007d5e <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d54:	4618      	mov	r0, r3
 8007d56:	f002 fa69 	bl	800a22c <SDMMC_CmdWriteMultiBlock>
 8007d5a:	6478      	str	r0, [r7, #68]	; 0x44
 8007d5c:	e009      	b.n	8007d72 <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	2210      	movs	r2, #16
 8007d62:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	f002 fa3c 	bl	800a1e8 <SDMMC_CmdWriteSingleBlock>
 8007d70:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8007d72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d012      	beq.n	8007d9e <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a87      	ldr	r2, [pc, #540]	; (8007f9c <HAL_SD_WriteBlocks+0x308>)
 8007d7e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8007d80:	68fb      	ldr	r3, [r7, #12]
 8007d82:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007d84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007d86:	431a      	orrs	r2, r3
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2200      	movs	r2, #0
 8007d98:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e0f9      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8007d9e:	69fb      	ldr	r3, [r7, #28]
 8007da0:	63fb      	str	r3, [r7, #60]	; 0x3c
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007da2:	e065      	b.n	8007e70 <HAL_SD_WriteBlocks+0x1dc>
    {
      if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007daa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d040      	beq.n	8007e34 <HAL_SD_WriteBlocks+0x1a0>
 8007db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d03d      	beq.n	8007e34 <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDMMC Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8007db8:	2300      	movs	r3, #0
 8007dba:	643b      	str	r3, [r7, #64]	; 0x40
 8007dbc:	e037      	b.n	8007e2e <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8007dbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007dca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8007dd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dd2:	781b      	ldrb	r3, [r3, #0]
 8007dd4:	021a      	lsls	r2, r3, #8
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dde:	3301      	adds	r3, #1
 8007de0:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007de2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007de4:	3b01      	subs	r3, #1
 8007de6:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8007de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007dea:	781b      	ldrb	r3, [r3, #0]
 8007dec:	041a      	lsls	r2, r3, #16
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	4313      	orrs	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007df4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df6:	3301      	adds	r3, #1
 8007df8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007dfa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dfc:	3b01      	subs	r3, #1
 8007dfe:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8007e00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	061a      	lsls	r2, r3, #24
 8007e06:	697b      	ldr	r3, [r7, #20]
 8007e08:	4313      	orrs	r3, r2
 8007e0a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8007e0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e0e:	3301      	adds	r3, #1
 8007e10:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8007e12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e14:	3b01      	subs	r3, #1
 8007e16:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f107 0214 	add.w	r2, r7, #20
 8007e20:	4611      	mov	r1, r2
 8007e22:	4618      	mov	r0, r3
 8007e24:	f002 f8d7 	bl	8009fd6 <SDMMC_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8007e28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e2a:	3301      	adds	r3, #1
 8007e2c:	643b      	str	r3, [r7, #64]	; 0x40
 8007e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007e30:	2b07      	cmp	r3, #7
 8007e32:	d9c4      	bls.n	8007dbe <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8007e34:	f7fa f8f0 	bl	8002018 <HAL_GetTick>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e3c:	1ad3      	subs	r3, r2, r3
 8007e3e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007e40:	429a      	cmp	r2, r3
 8007e42:	d902      	bls.n	8007e4a <HAL_SD_WriteBlocks+0x1b6>
 8007e44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d112      	bne.n	8007e70 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	4a53      	ldr	r2, [pc, #332]	; (8007f9c <HAL_SD_WriteBlocks+0x308>)
 8007e50:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e56:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e58:	431a      	orrs	r2, r3
 8007e5a:	68fb      	ldr	r3, [r7, #12]
 8007e5c:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2201      	movs	r2, #1
 8007e62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e090      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
    while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e76:	f403 738d 	and.w	r3, r3, #282	; 0x11a
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d092      	beq.n	8007da4 <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d022      	beq.n	8007ed2 <HAL_SD_WriteBlocks+0x23e>
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d91f      	bls.n	8007ed2 <HAL_SD_WriteBlocks+0x23e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d01b      	beq.n	8007ed2 <HAL_SD_WriteBlocks+0x23e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	f002 f9e6 	bl	800a270 <SDMMC_CmdStopTransfer>
 8007ea4:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8007ea6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d012      	beq.n	8007ed2 <HAL_SD_WriteBlocks+0x23e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	4a3a      	ldr	r2, [pc, #232]	; (8007f9c <HAL_SD_WriteBlocks+0x308>)
 8007eb2:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eb8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2201      	movs	r2, #1
 8007ec4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	2200      	movs	r2, #0
 8007ecc:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8007ece:	2301      	movs	r3, #1
 8007ed0:	e05f      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed8:	f003 0308 	and.w	r3, r3, #8
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d012      	beq.n	8007f06 <HAL_SD_WriteBlocks+0x272>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	4a2d      	ldr	r2, [pc, #180]	; (8007f9c <HAL_SD_WriteBlocks+0x308>)
 8007ee6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007eec:	f043 0208 	orr.w	r2, r3, #8
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	2201      	movs	r2, #1
 8007ef8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	2200      	movs	r2, #0
 8007f00:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f02:	2301      	movs	r3, #1
 8007f04:	e045      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d012      	beq.n	8007f3a <HAL_SD_WriteBlocks+0x2a6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a20      	ldr	r2, [pc, #128]	; (8007f9c <HAL_SD_WriteBlocks+0x308>)
 8007f1a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f20:	f043 0202 	orr.w	r2, r3, #2
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e02b      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f40:	f003 0310 	and.w	r3, r3, #16
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d012      	beq.n	8007f6e <HAL_SD_WriteBlocks+0x2da>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	4a13      	ldr	r2, [pc, #76]	; (8007f9c <HAL_SD_WriteBlocks+0x308>)
 8007f4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f54:	f043 0210 	orr.w	r2, r3, #16
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	2201      	movs	r2, #1
 8007f60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2200      	movs	r2, #0
 8007f68:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	e011      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f240 523a 	movw	r2, #1338	; 0x53a
 8007f76:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	2201      	movs	r2, #1
 8007f7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8007f80:	2300      	movs	r3, #0
 8007f82:	e006      	b.n	8007f92 <HAL_SD_WriteBlocks+0x2fe>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f88:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8007f90:	2301      	movs	r3, #1
  }
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3748      	adds	r7, #72	; 0x48
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	004005ff 	.word	0x004005ff

08007fa0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fae:	0f9b      	lsrs	r3, r3, #30
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fba:	0e9b      	lsrs	r3, r3, #26
 8007fbc:	b2db      	uxtb	r3, r3
 8007fbe:	f003 030f 	and.w	r3, r3, #15
 8007fc2:	b2da      	uxtb	r2, r3
 8007fc4:	683b      	ldr	r3, [r7, #0]
 8007fc6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fcc:	0e1b      	lsrs	r3, r3, #24
 8007fce:	b2db      	uxtb	r3, r3
 8007fd0:	f003 0303 	and.w	r3, r3, #3
 8007fd4:	b2da      	uxtb	r2, r3
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fde:	0c1b      	lsrs	r3, r3, #16
 8007fe0:	b2da      	uxtb	r2, r3
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007fea:	0a1b      	lsrs	r3, r3, #8
 8007fec:	b2da      	uxtb	r2, r3
 8007fee:	683b      	ldr	r3, [r7, #0]
 8007ff0:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ff6:	b2da      	uxtb	r2, r3
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008000:	0d1b      	lsrs	r3, r3, #20
 8008002:	b29a      	uxth	r2, r3
 8008004:	683b      	ldr	r3, [r7, #0]
 8008006:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800800c:	0c1b      	lsrs	r3, r3, #16
 800800e:	b2db      	uxtb	r3, r3
 8008010:	f003 030f 	and.w	r3, r3, #15
 8008014:	b2da      	uxtb	r2, r3
 8008016:	683b      	ldr	r3, [r7, #0]
 8008018:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800801e:	0bdb      	lsrs	r3, r3, #15
 8008020:	b2db      	uxtb	r3, r3
 8008022:	f003 0301 	and.w	r3, r3, #1
 8008026:	b2da      	uxtb	r2, r3
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008030:	0b9b      	lsrs	r3, r3, #14
 8008032:	b2db      	uxtb	r3, r3
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	b2da      	uxtb	r2, r3
 800803a:	683b      	ldr	r3, [r7, #0]
 800803c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008042:	0b5b      	lsrs	r3, r3, #13
 8008044:	b2db      	uxtb	r3, r3
 8008046:	f003 0301 	and.w	r3, r3, #1
 800804a:	b2da      	uxtb	r2, r3
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008054:	0b1b      	lsrs	r3, r3, #12
 8008056:	b2db      	uxtb	r3, r3
 8008058:	f003 0301 	and.w	r3, r3, #1
 800805c:	b2da      	uxtb	r2, r3
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	2200      	movs	r2, #0
 8008066:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800806c:	2b00      	cmp	r3, #0
 800806e:	d163      	bne.n	8008138 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008074:	009a      	lsls	r2, r3, #2
 8008076:	f640 73fc 	movw	r3, #4092	; 0xffc
 800807a:	4013      	ands	r3, r2
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8008080:	0f92      	lsrs	r2, r2, #30
 8008082:	431a      	orrs	r2, r3
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800808c:	0edb      	lsrs	r3, r3, #27
 800808e:	b2db      	uxtb	r3, r3
 8008090:	f003 0307 	and.w	r3, r3, #7
 8008094:	b2da      	uxtb	r2, r3
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800809e:	0e1b      	lsrs	r3, r3, #24
 80080a0:	b2db      	uxtb	r3, r3
 80080a2:	f003 0307 	and.w	r3, r3, #7
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	683b      	ldr	r3, [r7, #0]
 80080aa:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080b0:	0d5b      	lsrs	r3, r3, #21
 80080b2:	b2db      	uxtb	r3, r3
 80080b4:	f003 0307 	and.w	r3, r3, #7
 80080b8:	b2da      	uxtb	r2, r3
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080c2:	0c9b      	lsrs	r3, r3, #18
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	f003 0307 	and.w	r3, r3, #7
 80080ca:	b2da      	uxtb	r2, r3
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80080d4:	0bdb      	lsrs	r3, r3, #15
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	f003 0307 	and.w	r3, r3, #7
 80080dc:	b2da      	uxtb	r2, r3
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 80080ec:	683b      	ldr	r3, [r7, #0]
 80080ee:	7e1b      	ldrb	r3, [r3, #24]
 80080f0:	b2db      	uxtb	r3, r3
 80080f2:	f003 0307 	and.w	r3, r3, #7
 80080f6:	3302      	adds	r3, #2
 80080f8:	2201      	movs	r2, #1
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	687a      	ldr	r2, [r7, #4]
 8008100:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8008102:	fb03 f202 	mul.w	r2, r3, r2
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	7a1b      	ldrb	r3, [r3, #8]
 800810e:	b2db      	uxtb	r3, r3
 8008110:	f003 030f 	and.w	r3, r3, #15
 8008114:	2201      	movs	r2, #1
 8008116:	409a      	lsls	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8008124:	0a52      	lsrs	r2, r2, #9
 8008126:	fb03 f202 	mul.w	r2, r3, r2
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008134:	661a      	str	r2, [r3, #96]	; 0x60
 8008136:	e031      	b.n	800819c <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800813c:	2b01      	cmp	r3, #1
 800813e:	d11d      	bne.n	800817c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008144:	041b      	lsls	r3, r3, #16
 8008146:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800814e:	0c1b      	lsrs	r3, r3, #16
 8008150:	431a      	orrs	r2, r3
 8008152:	683b      	ldr	r3, [r7, #0]
 8008154:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	691b      	ldr	r3, [r3, #16]
 800815a:	3301      	adds	r3, #1
 800815c:	029a      	lsls	r2, r3, #10
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008170:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	661a      	str	r2, [r3, #96]	; 0x60
 800817a:	e00f      	b.n	800819c <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	4a58      	ldr	r2, [pc, #352]	; (80082e4 <HAL_SD_GetCardCSD+0x344>)
 8008182:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008188:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e09d      	b.n	80082d8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081a0:	0b9b      	lsrs	r3, r3, #14
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	f003 0301 	and.w	r3, r3, #1
 80081a8:	b2da      	uxtb	r2, r3
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081b2:	09db      	lsrs	r3, r3, #7
 80081b4:	b2db      	uxtb	r3, r3
 80081b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ba:	b2da      	uxtb	r2, r3
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80081ca:	b2da      	uxtb	r2, r3
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081d4:	0fdb      	lsrs	r3, r3, #31
 80081d6:	b2da      	uxtb	r2, r3
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081e0:	0f5b      	lsrs	r3, r3, #29
 80081e2:	b2db      	uxtb	r3, r3
 80081e4:	f003 0303 	and.w	r3, r3, #3
 80081e8:	b2da      	uxtb	r2, r3
 80081ea:	683b      	ldr	r3, [r7, #0]
 80081ec:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80081f2:	0e9b      	lsrs	r3, r3, #26
 80081f4:	b2db      	uxtb	r3, r3
 80081f6:	f003 0307 	and.w	r3, r3, #7
 80081fa:	b2da      	uxtb	r2, r3
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008204:	0d9b      	lsrs	r3, r3, #22
 8008206:	b2db      	uxtb	r3, r3
 8008208:	f003 030f 	and.w	r3, r3, #15
 800820c:	b2da      	uxtb	r2, r3
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008216:	0d5b      	lsrs	r3, r3, #21
 8008218:	b2db      	uxtb	r3, r3
 800821a:	f003 0301 	and.w	r3, r3, #1
 800821e:	b2da      	uxtb	r2, r3
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	2200      	movs	r2, #0
 800822a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008232:	0c1b      	lsrs	r3, r3, #16
 8008234:	b2db      	uxtb	r3, r3
 8008236:	f003 0301 	and.w	r3, r3, #1
 800823a:	b2da      	uxtb	r2, r3
 800823c:	683b      	ldr	r3, [r7, #0]
 800823e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008246:	0bdb      	lsrs	r3, r3, #15
 8008248:	b2db      	uxtb	r3, r3
 800824a:	f003 0301 	and.w	r3, r3, #1
 800824e:	b2da      	uxtb	r2, r3
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800825a:	0b9b      	lsrs	r3, r3, #14
 800825c:	b2db      	uxtb	r3, r3
 800825e:	f003 0301 	and.w	r3, r3, #1
 8008262:	b2da      	uxtb	r2, r3
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800826e:	0b5b      	lsrs	r3, r3, #13
 8008270:	b2db      	uxtb	r3, r3
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	b2da      	uxtb	r2, r3
 8008278:	683b      	ldr	r3, [r7, #0]
 800827a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008282:	0b1b      	lsrs	r3, r3, #12
 8008284:	b2db      	uxtb	r3, r3
 8008286:	f003 0301 	and.w	r3, r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008296:	0a9b      	lsrs	r3, r3, #10
 8008298:	b2db      	uxtb	r3, r3
 800829a:	f003 0303 	and.w	r3, r3, #3
 800829e:	b2da      	uxtb	r2, r3
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082aa:	0a1b      	lsrs	r3, r3, #8
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	f003 0303 	and.w	r3, r3, #3
 80082b2:	b2da      	uxtb	r2, r3
 80082b4:	683b      	ldr	r3, [r7, #0]
 80082b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082be:	085b      	lsrs	r3, r3, #1
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80082c6:	b2da      	uxtb	r2, r3
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	2201      	movs	r2, #1
 80082d2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 80082d6:	2300      	movs	r3, #0
}
 80082d8:	4618      	mov	r0, r3
 80082da:	370c      	adds	r7, #12
 80082dc:	46bd      	mov	sp, r7
 80082de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e2:	4770      	bx	lr
 80082e4:	004005ff 	.word	0x004005ff

080082e8 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80082fe:	683b      	ldr	r3, [r7, #0]
 8008300:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800830e:	683b      	ldr	r3, [r7, #0]
 8008310:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800831e:	683b      	ldr	r3, [r7, #0]
 8008320:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 8008332:	2300      	movs	r3, #0
}
 8008334:	4618      	mov	r0, r3
 8008336:	370c      	adds	r7, #12
 8008338:	46bd      	mov	sp, r7
 800833a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833e:	4770      	bx	lr

08008340 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b086      	sub	sp, #24
 8008344:	af00      	add	r7, sp, #0
 8008346:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8008348:	2300      	movs	r3, #0
 800834a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	4619      	mov	r1, r3
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 f970 	bl	8008638 <SD_SendStatus>
 8008358:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d005      	beq.n	800836c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	431a      	orrs	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	0a5b      	lsrs	r3, r3, #9
 8008370:	f003 030f 	and.w	r3, r3, #15
 8008374:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8008376:	693b      	ldr	r3, [r7, #16]
}
 8008378:	4618      	mov	r0, r3
 800837a:	3718      	adds	r7, #24
 800837c:	46bd      	mov	sp, r7
 800837e:	bd80      	pop	{r7, pc}

08008380 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8008380:	b5b0      	push	{r4, r5, r7, lr}
 8008382:	b094      	sub	sp, #80	; 0x50
 8008384:	af04      	add	r7, sp, #16
 8008386:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8008388:	2301      	movs	r3, #1
 800838a:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4618      	mov	r0, r3
 8008392:	f001 fe3f 	bl	800a014 <SDMMC_GetPowerState>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d102      	bne.n	80083a2 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800839c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80083a0:	e0b8      	b.n	8008514 <SD_InitCard+0x194>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083a6:	2b03      	cmp	r3, #3
 80083a8:	d02f      	beq.n	800840a <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4618      	mov	r0, r3
 80083b0:	f002 f826 	bl	800a400 <SDMMC_CmdSendCID>
 80083b4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80083b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d001      	beq.n	80083c0 <SD_InitCard+0x40>
    {
      return errorstate;
 80083bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083be:	e0a9      	b.n	8008514 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	2100      	movs	r1, #0
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 fe69 	bl	800a09e <SDMMC_GetResponse>
 80083cc:	4602      	mov	r2, r0
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	2104      	movs	r1, #4
 80083d8:	4618      	mov	r0, r3
 80083da:	f001 fe60 	bl	800a09e <SDMMC_GetResponse>
 80083de:	4602      	mov	r2, r0
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	2108      	movs	r1, #8
 80083ea:	4618      	mov	r0, r3
 80083ec:	f001 fe57 	bl	800a09e <SDMMC_GetResponse>
 80083f0:	4602      	mov	r2, r0
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	210c      	movs	r1, #12
 80083fc:	4618      	mov	r0, r3
 80083fe:	f001 fe4e 	bl	800a09e <SDMMC_GetResponse>
 8008402:	4602      	mov	r2, r0
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800840e:	2b03      	cmp	r3, #3
 8008410:	d00d      	beq.n	800842e <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f107 020e 	add.w	r2, r7, #14
 800841a:	4611      	mov	r1, r2
 800841c:	4618      	mov	r0, r3
 800841e:	f002 f82c 	bl	800a47a <SDMMC_CmdSetRelAdd>
 8008422:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008426:	2b00      	cmp	r3, #0
 8008428:	d001      	beq.n	800842e <SD_InitCard+0xae>
    {
      return errorstate;
 800842a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800842c:	e072      	b.n	8008514 <SD_InitCard+0x194>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008432:	2b03      	cmp	r3, #3
 8008434:	d036      	beq.n	80084a4 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8008436:	89fb      	ldrh	r3, [r7, #14]
 8008438:	461a      	mov	r2, r3
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681a      	ldr	r2, [r3, #0]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008446:	041b      	lsls	r3, r3, #16
 8008448:	4619      	mov	r1, r3
 800844a:	4610      	mov	r0, r2
 800844c:	f001 fff6 	bl	800a43c <SDMMC_CmdSendCSD>
 8008450:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8008452:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008454:	2b00      	cmp	r3, #0
 8008456:	d001      	beq.n	800845c <SD_InitCard+0xdc>
    {
      return errorstate;
 8008458:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845a:	e05b      	b.n	8008514 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	2100      	movs	r1, #0
 8008462:	4618      	mov	r0, r3
 8008464:	f001 fe1b 	bl	800a09e <SDMMC_GetResponse>
 8008468:	4602      	mov	r2, r0
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	2104      	movs	r1, #4
 8008474:	4618      	mov	r0, r3
 8008476:	f001 fe12 	bl	800a09e <SDMMC_GetResponse>
 800847a:	4602      	mov	r2, r0
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	2108      	movs	r1, #8
 8008486:	4618      	mov	r0, r3
 8008488:	f001 fe09 	bl	800a09e <SDMMC_GetResponse>
 800848c:	4602      	mov	r2, r0
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	210c      	movs	r1, #12
 8008498:	4618      	mov	r0, r3
 800849a:	f001 fe00 	bl	800a09e <SDMMC_GetResponse>
 800849e:	4602      	mov	r2, r0
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	2104      	movs	r1, #4
 80084aa:	4618      	mov	r0, r3
 80084ac:	f001 fdf7 	bl	800a09e <SDMMC_GetResponse>
 80084b0:	4603      	mov	r3, r0
 80084b2:	0d1a      	lsrs	r2, r3, #20
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80084b8:	f107 0310 	add.w	r3, r7, #16
 80084bc:	4619      	mov	r1, r3
 80084be:	6878      	ldr	r0, [r7, #4]
 80084c0:	f7ff fd6e 	bl	8007fa0 <HAL_SD_GetCardCSD>
 80084c4:	4603      	mov	r3, r0
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d002      	beq.n	80084d0 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80084ca:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80084ce:	e021      	b.n	8008514 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6819      	ldr	r1, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084d8:	041b      	lsls	r3, r3, #16
 80084da:	2200      	movs	r2, #0
 80084dc:	461c      	mov	r4, r3
 80084de:	4615      	mov	r5, r2
 80084e0:	4622      	mov	r2, r4
 80084e2:	462b      	mov	r3, r5
 80084e4:	4608      	mov	r0, r1
 80084e6:	f001 fee5 	bl	800a2b4 <SDMMC_CmdSelDesel>
 80084ea:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 80084ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d001      	beq.n	80084f6 <SD_InitCard+0x176>
  {
    return errorstate;
 80084f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084f4:	e00e      	b.n	8008514 <SD_InitCard+0x194>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681d      	ldr	r5, [r3, #0]
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	466c      	mov	r4, sp
 80084fe:	f103 0210 	add.w	r2, r3, #16
 8008502:	ca07      	ldmia	r2, {r0, r1, r2}
 8008504:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8008508:	3304      	adds	r3, #4
 800850a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800850c:	4628      	mov	r0, r5
 800850e:	f001 fd29 	bl	8009f64 <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3740      	adds	r7, #64	; 0x40
 8008518:	46bd      	mov	sp, r7
 800851a:	bdb0      	pop	{r4, r5, r7, pc}

0800851c <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b086      	sub	sp, #24
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008524:	2300      	movs	r3, #0
 8008526:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8008528:	2300      	movs	r3, #0
 800852a:	617b      	str	r3, [r7, #20]
 800852c:	2300      	movs	r3, #0
 800852e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	4618      	mov	r0, r3
 8008536:	f001 fee0 	bl	800a2fa <SDMMC_CmdGoIdleState>
 800853a:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d001      	beq.n	8008546 <SD_PowerON+0x2a>
  {
    return errorstate;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	e072      	b.n	800862c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4618      	mov	r0, r3
 800854c:	f001 fef3 	bl	800a336 <SDMMC_CmdOperCond>
 8008550:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	2b00      	cmp	r3, #0
 8008556:	d00d      	beq.n	8008574 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4618      	mov	r0, r3
 8008564:	f001 fec9 	bl	800a2fa <SDMMC_CmdGoIdleState>
 8008568:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d004      	beq.n	800857a <SD_PowerON+0x5e>
    {
      return errorstate;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	e05b      	b.n	800862c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800857e:	2b01      	cmp	r3, #1
 8008580:	d137      	bne.n	80085f2 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	2100      	movs	r1, #0
 8008588:	4618      	mov	r0, r3
 800858a:	f001 fef3 	bl	800a374 <SDMMC_CmdAppCommand>
 800858e:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	2b00      	cmp	r3, #0
 8008594:	d02d      	beq.n	80085f2 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8008596:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800859a:	e047      	b.n	800862c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	2100      	movs	r1, #0
 80085a2:	4618      	mov	r0, r3
 80085a4:	f001 fee6 	bl	800a374 <SDMMC_CmdAppCommand>
 80085a8:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <SD_PowerON+0x98>
    {
      return errorstate;
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	e03b      	b.n	800862c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	491e      	ldr	r1, [pc, #120]	; (8008634 <SD_PowerON+0x118>)
 80085ba:	4618      	mov	r0, r3
 80085bc:	f001 fefc 	bl	800a3b8 <SDMMC_CmdAppOperCommand>
 80085c0:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d002      	beq.n	80085ce <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80085c8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80085cc:	e02e      	b.n	800862c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	2100      	movs	r1, #0
 80085d4:	4618      	mov	r0, r3
 80085d6:	f001 fd62 	bl	800a09e <SDMMC_GetResponse>
 80085da:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	0fdb      	lsrs	r3, r3, #31
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <SD_PowerON+0xcc>
 80085e4:	2301      	movs	r3, #1
 80085e6:	e000      	b.n	80085ea <SD_PowerON+0xce>
 80085e8:	2300      	movs	r3, #0
 80085ea:	613b      	str	r3, [r7, #16]

    count++;
 80085ec:	68bb      	ldr	r3, [r7, #8]
 80085ee:	3301      	adds	r3, #1
 80085f0:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80085f8:	4293      	cmp	r3, r2
 80085fa:	d802      	bhi.n	8008602 <SD_PowerON+0xe6>
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d0cc      	beq.n	800859c <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8008608:	4293      	cmp	r3, r2
 800860a:	d902      	bls.n	8008612 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 800860c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008610:	e00c      	b.n	800862c <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8008612:	697b      	ldr	r3, [r7, #20]
 8008614:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8008618:	2b00      	cmp	r3, #0
 800861a:	d003      	beq.n	8008624 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2201      	movs	r2, #1
 8008620:	645a      	str	r2, [r3, #68]	; 0x44
 8008622:	e002      	b.n	800862a <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 800862a:	2300      	movs	r3, #0
}
 800862c:	4618      	mov	r0, r3
 800862e:	3718      	adds	r7, #24
 8008630:	46bd      	mov	sp, r7
 8008632:	bd80      	pop	{r7, pc}
 8008634:	c1100000 	.word	0xc1100000

08008638 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b084      	sub	sp, #16
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
 8008640:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8008642:	683b      	ldr	r3, [r7, #0]
 8008644:	2b00      	cmp	r3, #0
 8008646:	d102      	bne.n	800864e <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8008648:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800864c:	e018      	b.n	8008680 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681a      	ldr	r2, [r3, #0]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008656:	041b      	lsls	r3, r3, #16
 8008658:	4619      	mov	r1, r3
 800865a:	4610      	mov	r0, r2
 800865c:	f001 ff2e 	bl	800a4bc <SDMMC_CmdSendStatus>
 8008660:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d001      	beq.n	800866c <SD_SendStatus+0x34>
  {
    return errorstate;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	e009      	b.n	8008680 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	2100      	movs	r1, #0
 8008672:	4618      	mov	r0, r3
 8008674:	f001 fd13 	bl	800a09e <SDMMC_GetResponse>
 8008678:	4602      	mov	r2, r0
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3710      	adds	r7, #16
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2b00      	cmp	r3, #0
 8008698:	d101      	bne.n	800869e <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800869a:	2301      	movs	r3, #1
 800869c:	e038      	b.n	8008710 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80086a4:	b2db      	uxtb	r3, r3
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2200      	movs	r2, #0
 80086ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f7f9 faf8 	bl	8001ca8 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	681a      	ldr	r2, [r3, #0]
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	3308      	adds	r3, #8
 80086c0:	4619      	mov	r1, r3
 80086c2:	4610      	mov	r0, r2
 80086c4:	f001 fb36 	bl	8009d34 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	6818      	ldr	r0, [r3, #0]
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	461a      	mov	r2, r3
 80086d2:	68b9      	ldr	r1, [r7, #8]
 80086d4:	f001 fbbe 	bl	8009e54 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	6858      	ldr	r0, [r3, #4]
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	689a      	ldr	r2, [r3, #8]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e4:	6879      	ldr	r1, [r7, #4]
 80086e6:	f001 fc05 	bl	8009ef4 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	68fa      	ldr	r2, [r7, #12]
 80086f0:	6892      	ldr	r2, [r2, #8]
 80086f2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	68fa      	ldr	r2, [r7, #12]
 80086fc:	6892      	ldr	r2, [r2, #8]
 80086fe:	f041 0101 	orr.w	r1, r1, #1
 8008702:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	2201      	movs	r2, #1
 800870a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800870e:	2300      	movs	r3, #0
}
 8008710:	4618      	mov	r0, r3
 8008712:	3710      	adds	r7, #16
 8008714:	46bd      	mov	sp, r7
 8008716:	bd80      	pop	{r7, pc}

08008718 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2b00      	cmp	r3, #0
 8008724:	d101      	bne.n	800872a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008726:	2301      	movs	r3, #1
 8008728:	e049      	b.n	80087be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008730:	b2db      	uxtb	r3, r3
 8008732:	2b00      	cmp	r3, #0
 8008734:	d106      	bne.n	8008744 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800873e:	6878      	ldr	r0, [r7, #4]
 8008740:	f7f9 f97a 	bl	8001a38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681a      	ldr	r2, [r3, #0]
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	3304      	adds	r3, #4
 8008754:	4619      	mov	r1, r3
 8008756:	4610      	mov	r0, r2
 8008758:	f000 fa74 	bl	8008c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2201      	movs	r2, #1
 8008778:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	2201      	movs	r2, #1
 8008780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2201      	movs	r2, #1
 8008788:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2201      	movs	r2, #1
 8008790:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2201      	movs	r2, #1
 80087a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2201      	movs	r2, #1
 80087a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2201      	movs	r2, #1
 80087b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	2201      	movs	r2, #1
 80087b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80087bc:	2300      	movs	r3, #0
}
 80087be:	4618      	mov	r0, r3
 80087c0:	3708      	adds	r7, #8
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}

080087c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80087c6:	b580      	push	{r7, lr}
 80087c8:	b082      	sub	sp, #8
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d101      	bne.n	80087d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80087d4:	2301      	movs	r3, #1
 80087d6:	e049      	b.n	800886c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087de:	b2db      	uxtb	r3, r3
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d106      	bne.n	80087f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2200      	movs	r2, #0
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 f841 	bl	8008874 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	2202      	movs	r2, #2
 80087f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681a      	ldr	r2, [r3, #0]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	3304      	adds	r3, #4
 8008802:	4619      	mov	r1, r3
 8008804:	4610      	mov	r0, r2
 8008806:	f000 fa1d 	bl	8008c44 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	2201      	movs	r2, #1
 800880e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2201      	movs	r2, #1
 8008816:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	2201      	movs	r2, #1
 800881e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	2201      	movs	r2, #1
 8008826:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	2201      	movs	r2, #1
 800882e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	2201      	movs	r2, #1
 8008836:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	2201      	movs	r2, #1
 800883e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	2201      	movs	r2, #1
 8008846:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	2201      	movs	r2, #1
 800884e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2201      	movs	r2, #1
 8008856:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	2201      	movs	r2, #1
 8008866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800886a:	2300      	movs	r3, #0
}
 800886c:	4618      	mov	r0, r3
 800886e:	3708      	adds	r7, #8
 8008870:	46bd      	mov	sp, r7
 8008872:	bd80      	pop	{r7, pc}

08008874 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008874:	b480      	push	{r7}
 8008876:	b083      	sub	sp, #12
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800887c:	bf00      	nop
 800887e:	370c      	adds	r7, #12
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr

08008888 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b086      	sub	sp, #24
 800888c:	af00      	add	r7, sp, #0
 800888e:	60f8      	str	r0, [r7, #12]
 8008890:	60b9      	str	r1, [r7, #8]
 8008892:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008894:	2300      	movs	r3, #0
 8008896:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d101      	bne.n	80088a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80088a2:	2302      	movs	r3, #2
 80088a4:	e0ff      	b.n	8008aa6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2201      	movs	r2, #1
 80088aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	2b14      	cmp	r3, #20
 80088b2:	f200 80f0 	bhi.w	8008a96 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80088b6:	a201      	add	r2, pc, #4	; (adr r2, 80088bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088bc:	08008911 	.word	0x08008911
 80088c0:	08008a97 	.word	0x08008a97
 80088c4:	08008a97 	.word	0x08008a97
 80088c8:	08008a97 	.word	0x08008a97
 80088cc:	08008951 	.word	0x08008951
 80088d0:	08008a97 	.word	0x08008a97
 80088d4:	08008a97 	.word	0x08008a97
 80088d8:	08008a97 	.word	0x08008a97
 80088dc:	08008993 	.word	0x08008993
 80088e0:	08008a97 	.word	0x08008a97
 80088e4:	08008a97 	.word	0x08008a97
 80088e8:	08008a97 	.word	0x08008a97
 80088ec:	080089d3 	.word	0x080089d3
 80088f0:	08008a97 	.word	0x08008a97
 80088f4:	08008a97 	.word	0x08008a97
 80088f8:	08008a97 	.word	0x08008a97
 80088fc:	08008a15 	.word	0x08008a15
 8008900:	08008a97 	.word	0x08008a97
 8008904:	08008a97 	.word	0x08008a97
 8008908:	08008a97 	.word	0x08008a97
 800890c:	08008a55 	.word	0x08008a55
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	4618      	mov	r0, r3
 8008918:	f000 fa34 	bl	8008d84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	699a      	ldr	r2, [r3, #24]
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f042 0208 	orr.w	r2, r2, #8
 800892a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	699a      	ldr	r2, [r3, #24]
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f022 0204 	bic.w	r2, r2, #4
 800893a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	6999      	ldr	r1, [r3, #24]
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	691a      	ldr	r2, [r3, #16]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	430a      	orrs	r2, r1
 800894c:	619a      	str	r2, [r3, #24]
      break;
 800894e:	e0a5      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	68b9      	ldr	r1, [r7, #8]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 fa86 	bl	8008e68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800895c:	68fb      	ldr	r3, [r7, #12]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	699a      	ldr	r2, [r3, #24]
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800896a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	699a      	ldr	r2, [r3, #24]
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800897a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	6999      	ldr	r1, [r3, #24]
 8008982:	68bb      	ldr	r3, [r7, #8]
 8008984:	691b      	ldr	r3, [r3, #16]
 8008986:	021a      	lsls	r2, r3, #8
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	430a      	orrs	r2, r1
 800898e:	619a      	str	r2, [r3, #24]
      break;
 8008990:	e084      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	68b9      	ldr	r1, [r7, #8]
 8008998:	4618      	mov	r0, r3
 800899a:	f000 fadd 	bl	8008f58 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	69da      	ldr	r2, [r3, #28]
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f042 0208 	orr.w	r2, r2, #8
 80089ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	69da      	ldr	r2, [r3, #28]
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f022 0204 	bic.w	r2, r2, #4
 80089bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	69d9      	ldr	r1, [r3, #28]
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	691a      	ldr	r2, [r3, #16]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	430a      	orrs	r2, r1
 80089ce:	61da      	str	r2, [r3, #28]
      break;
 80089d0:	e064      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	4618      	mov	r0, r3
 80089da:	f000 fb33 	bl	8009044 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69da      	ldr	r2, [r3, #28]
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80089ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	69da      	ldr	r2, [r3, #28]
 80089f4:	68fb      	ldr	r3, [r7, #12]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80089fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	69d9      	ldr	r1, [r3, #28]
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	691b      	ldr	r3, [r3, #16]
 8008a08:	021a      	lsls	r2, r3, #8
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	430a      	orrs	r2, r1
 8008a10:	61da      	str	r2, [r3, #28]
      break;
 8008a12:	e043      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	681b      	ldr	r3, [r3, #0]
 8008a18:	68b9      	ldr	r1, [r7, #8]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 fb6a 	bl	80090f4 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	f042 0208 	orr.w	r2, r2, #8
 8008a2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	f022 0204 	bic.w	r2, r2, #4
 8008a3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	691a      	ldr	r2, [r3, #16]
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	430a      	orrs	r2, r1
 8008a50:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a52:	e023      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68b9      	ldr	r1, [r7, #8]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	f000 fb9c 	bl	8009198 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008a6e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008a7e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	691b      	ldr	r3, [r3, #16]
 8008a8a:	021a      	lsls	r2, r3, #8
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	430a      	orrs	r2, r1
 8008a92:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8008a94:	e002      	b.n	8008a9c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008a96:	2301      	movs	r3, #1
 8008a98:	75fb      	strb	r3, [r7, #23]
      break;
 8008a9a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008aa4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008aa6:	4618      	mov	r0, r3
 8008aa8:	3718      	adds	r7, #24
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop

08008ab0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	6078      	str	r0, [r7, #4]
 8008ab8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008aba:	2300      	movs	r3, #0
 8008abc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ac4:	2b01      	cmp	r3, #1
 8008ac6:	d101      	bne.n	8008acc <HAL_TIM_ConfigClockSource+0x1c>
 8008ac8:	2302      	movs	r3, #2
 8008aca:	e0b4      	b.n	8008c36 <HAL_TIM_ConfigClockSource+0x186>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	2201      	movs	r2, #1
 8008ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2202      	movs	r2, #2
 8008ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689b      	ldr	r3, [r3, #8]
 8008ae2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008ae4:	68ba      	ldr	r2, [r7, #8]
 8008ae6:	4b56      	ldr	r3, [pc, #344]	; (8008c40 <HAL_TIM_ConfigClockSource+0x190>)
 8008ae8:	4013      	ands	r3, r2
 8008aea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008af2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	68ba      	ldr	r2, [r7, #8]
 8008afa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008afc:	683b      	ldr	r3, [r7, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b04:	d03e      	beq.n	8008b84 <HAL_TIM_ConfigClockSource+0xd4>
 8008b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008b0a:	f200 8087 	bhi.w	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
 8008b0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b12:	f000 8086 	beq.w	8008c22 <HAL_TIM_ConfigClockSource+0x172>
 8008b16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b1a:	d87f      	bhi.n	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
 8008b1c:	2b70      	cmp	r3, #112	; 0x70
 8008b1e:	d01a      	beq.n	8008b56 <HAL_TIM_ConfigClockSource+0xa6>
 8008b20:	2b70      	cmp	r3, #112	; 0x70
 8008b22:	d87b      	bhi.n	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
 8008b24:	2b60      	cmp	r3, #96	; 0x60
 8008b26:	d050      	beq.n	8008bca <HAL_TIM_ConfigClockSource+0x11a>
 8008b28:	2b60      	cmp	r3, #96	; 0x60
 8008b2a:	d877      	bhi.n	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
 8008b2c:	2b50      	cmp	r3, #80	; 0x50
 8008b2e:	d03c      	beq.n	8008baa <HAL_TIM_ConfigClockSource+0xfa>
 8008b30:	2b50      	cmp	r3, #80	; 0x50
 8008b32:	d873      	bhi.n	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
 8008b34:	2b40      	cmp	r3, #64	; 0x40
 8008b36:	d058      	beq.n	8008bea <HAL_TIM_ConfigClockSource+0x13a>
 8008b38:	2b40      	cmp	r3, #64	; 0x40
 8008b3a:	d86f      	bhi.n	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
 8008b3c:	2b30      	cmp	r3, #48	; 0x30
 8008b3e:	d064      	beq.n	8008c0a <HAL_TIM_ConfigClockSource+0x15a>
 8008b40:	2b30      	cmp	r3, #48	; 0x30
 8008b42:	d86b      	bhi.n	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
 8008b44:	2b20      	cmp	r3, #32
 8008b46:	d060      	beq.n	8008c0a <HAL_TIM_ConfigClockSource+0x15a>
 8008b48:	2b20      	cmp	r3, #32
 8008b4a:	d867      	bhi.n	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d05c      	beq.n	8008c0a <HAL_TIM_ConfigClockSource+0x15a>
 8008b50:	2b10      	cmp	r3, #16
 8008b52:	d05a      	beq.n	8008c0a <HAL_TIM_ConfigClockSource+0x15a>
 8008b54:	e062      	b.n	8008c1c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	6818      	ldr	r0, [r3, #0]
 8008b5a:	683b      	ldr	r3, [r7, #0]
 8008b5c:	6899      	ldr	r1, [r3, #8]
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	685a      	ldr	r2, [r3, #4]
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	68db      	ldr	r3, [r3, #12]
 8008b66:	f000 fbe5 	bl	8009334 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	689b      	ldr	r3, [r3, #8]
 8008b70:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008b72:	68bb      	ldr	r3, [r7, #8]
 8008b74:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008b78:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68ba      	ldr	r2, [r7, #8]
 8008b80:	609a      	str	r2, [r3, #8]
      break;
 8008b82:	e04f      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6818      	ldr	r0, [r3, #0]
 8008b88:	683b      	ldr	r3, [r7, #0]
 8008b8a:	6899      	ldr	r1, [r3, #8]
 8008b8c:	683b      	ldr	r3, [r7, #0]
 8008b8e:	685a      	ldr	r2, [r3, #4]
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	68db      	ldr	r3, [r3, #12]
 8008b94:	f000 fbce 	bl	8009334 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	689a      	ldr	r2, [r3, #8]
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008ba6:	609a      	str	r2, [r3, #8]
      break;
 8008ba8:	e03c      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	6818      	ldr	r0, [r3, #0]
 8008bae:	683b      	ldr	r3, [r7, #0]
 8008bb0:	6859      	ldr	r1, [r3, #4]
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	461a      	mov	r2, r3
 8008bb8:	f000 fb42 	bl	8009240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	681b      	ldr	r3, [r3, #0]
 8008bc0:	2150      	movs	r1, #80	; 0x50
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	f000 fb9b 	bl	80092fe <TIM_ITRx_SetConfig>
      break;
 8008bc8:	e02c      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	6818      	ldr	r0, [r3, #0]
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	6859      	ldr	r1, [r3, #4]
 8008bd2:	683b      	ldr	r3, [r7, #0]
 8008bd4:	68db      	ldr	r3, [r3, #12]
 8008bd6:	461a      	mov	r2, r3
 8008bd8:	f000 fb61 	bl	800929e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2160      	movs	r1, #96	; 0x60
 8008be2:	4618      	mov	r0, r3
 8008be4:	f000 fb8b 	bl	80092fe <TIM_ITRx_SetConfig>
      break;
 8008be8:	e01c      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	6818      	ldr	r0, [r3, #0]
 8008bee:	683b      	ldr	r3, [r7, #0]
 8008bf0:	6859      	ldr	r1, [r3, #4]
 8008bf2:	683b      	ldr	r3, [r7, #0]
 8008bf4:	68db      	ldr	r3, [r3, #12]
 8008bf6:	461a      	mov	r2, r3
 8008bf8:	f000 fb22 	bl	8009240 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	2140      	movs	r1, #64	; 0x40
 8008c02:	4618      	mov	r0, r3
 8008c04:	f000 fb7b 	bl	80092fe <TIM_ITRx_SetConfig>
      break;
 8008c08:	e00c      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681a      	ldr	r2, [r3, #0]
 8008c0e:	683b      	ldr	r3, [r7, #0]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	4619      	mov	r1, r3
 8008c14:	4610      	mov	r0, r2
 8008c16:	f000 fb72 	bl	80092fe <TIM_ITRx_SetConfig>
      break;
 8008c1a:	e003      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008c1c:	2301      	movs	r3, #1
 8008c1e:	73fb      	strb	r3, [r7, #15]
      break;
 8008c20:	e000      	b.n	8008c24 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008c22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2201      	movs	r2, #1
 8008c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	2200      	movs	r2, #0
 8008c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008c34:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c36:	4618      	mov	r0, r3
 8008c38:	3710      	adds	r7, #16
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	bd80      	pop	{r7, pc}
 8008c3e:	bf00      	nop
 8008c40:	fffeff88 	.word	0xfffeff88

08008c44 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
 8008c4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a40      	ldr	r2, [pc, #256]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d013      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c62:	d00f      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	4a3d      	ldr	r2, [pc, #244]	; (8008d5c <TIM_Base_SetConfig+0x118>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d00b      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	4a3c      	ldr	r2, [pc, #240]	; (8008d60 <TIM_Base_SetConfig+0x11c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d007      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	4a3b      	ldr	r2, [pc, #236]	; (8008d64 <TIM_Base_SetConfig+0x120>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d003      	beq.n	8008c84 <TIM_Base_SetConfig+0x40>
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	4a3a      	ldr	r2, [pc, #232]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d108      	bne.n	8008c96 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c8c:	683b      	ldr	r3, [r7, #0]
 8008c8e:	685b      	ldr	r3, [r3, #4]
 8008c90:	68fa      	ldr	r2, [r7, #12]
 8008c92:	4313      	orrs	r3, r2
 8008c94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a2f      	ldr	r2, [pc, #188]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d02b      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ca4:	d027      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a2c      	ldr	r2, [pc, #176]	; (8008d5c <TIM_Base_SetConfig+0x118>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d023      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a2b      	ldr	r2, [pc, #172]	; (8008d60 <TIM_Base_SetConfig+0x11c>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d01f      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	4a2a      	ldr	r2, [pc, #168]	; (8008d64 <TIM_Base_SetConfig+0x120>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d01b      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	4a29      	ldr	r2, [pc, #164]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d017      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	4a28      	ldr	r2, [pc, #160]	; (8008d6c <TIM_Base_SetConfig+0x128>)
 8008cca:	4293      	cmp	r3, r2
 8008ccc:	d013      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	4a27      	ldr	r2, [pc, #156]	; (8008d70 <TIM_Base_SetConfig+0x12c>)
 8008cd2:	4293      	cmp	r3, r2
 8008cd4:	d00f      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	4a26      	ldr	r2, [pc, #152]	; (8008d74 <TIM_Base_SetConfig+0x130>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d00b      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	4a25      	ldr	r2, [pc, #148]	; (8008d78 <TIM_Base_SetConfig+0x134>)
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d007      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	4a24      	ldr	r2, [pc, #144]	; (8008d7c <TIM_Base_SetConfig+0x138>)
 8008cea:	4293      	cmp	r3, r2
 8008cec:	d003      	beq.n	8008cf6 <TIM_Base_SetConfig+0xb2>
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	4a23      	ldr	r2, [pc, #140]	; (8008d80 <TIM_Base_SetConfig+0x13c>)
 8008cf2:	4293      	cmp	r3, r2
 8008cf4:	d108      	bne.n	8008d08 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	68fa      	ldr	r2, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	695b      	ldr	r3, [r3, #20]
 8008d12:	4313      	orrs	r3, r2
 8008d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	68fa      	ldr	r2, [r7, #12]
 8008d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008d1c:	683b      	ldr	r3, [r7, #0]
 8008d1e:	689a      	ldr	r2, [r3, #8]
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008d24:	683b      	ldr	r3, [r7, #0]
 8008d26:	681a      	ldr	r2, [r3, #0]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	4a0a      	ldr	r2, [pc, #40]	; (8008d58 <TIM_Base_SetConfig+0x114>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d003      	beq.n	8008d3c <TIM_Base_SetConfig+0xf8>
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	4a0c      	ldr	r2, [pc, #48]	; (8008d68 <TIM_Base_SetConfig+0x124>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d103      	bne.n	8008d44 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	2201      	movs	r2, #1
 8008d48:	615a      	str	r2, [r3, #20]
}
 8008d4a:	bf00      	nop
 8008d4c:	3714      	adds	r7, #20
 8008d4e:	46bd      	mov	sp, r7
 8008d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d54:	4770      	bx	lr
 8008d56:	bf00      	nop
 8008d58:	40010000 	.word	0x40010000
 8008d5c:	40000400 	.word	0x40000400
 8008d60:	40000800 	.word	0x40000800
 8008d64:	40000c00 	.word	0x40000c00
 8008d68:	40010400 	.word	0x40010400
 8008d6c:	40014000 	.word	0x40014000
 8008d70:	40014400 	.word	0x40014400
 8008d74:	40014800 	.word	0x40014800
 8008d78:	40001800 	.word	0x40001800
 8008d7c:	40001c00 	.word	0x40001c00
 8008d80:	40002000 	.word	0x40002000

08008d84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b087      	sub	sp, #28
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
 8008d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6a1b      	ldr	r3, [r3, #32]
 8008d92:	f023 0201 	bic.w	r2, r3, #1
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6a1b      	ldr	r3, [r3, #32]
 8008d9e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	685b      	ldr	r3, [r3, #4]
 8008da4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	699b      	ldr	r3, [r3, #24]
 8008daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008dac:	68fa      	ldr	r2, [r7, #12]
 8008dae:	4b2b      	ldr	r3, [pc, #172]	; (8008e5c <TIM_OC1_SetConfig+0xd8>)
 8008db0:	4013      	ands	r3, r2
 8008db2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f023 0303 	bic.w	r3, r3, #3
 8008dba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008dbc:	683b      	ldr	r3, [r7, #0]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	68fa      	ldr	r2, [r7, #12]
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008dc6:	697b      	ldr	r3, [r7, #20]
 8008dc8:	f023 0302 	bic.w	r3, r3, #2
 8008dcc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	689b      	ldr	r3, [r3, #8]
 8008dd2:	697a      	ldr	r2, [r7, #20]
 8008dd4:	4313      	orrs	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	4a21      	ldr	r2, [pc, #132]	; (8008e60 <TIM_OC1_SetConfig+0xdc>)
 8008ddc:	4293      	cmp	r3, r2
 8008dde:	d003      	beq.n	8008de8 <TIM_OC1_SetConfig+0x64>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	4a20      	ldr	r2, [pc, #128]	; (8008e64 <TIM_OC1_SetConfig+0xe0>)
 8008de4:	4293      	cmp	r3, r2
 8008de6:	d10c      	bne.n	8008e02 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008de8:	697b      	ldr	r3, [r7, #20]
 8008dea:	f023 0308 	bic.w	r3, r3, #8
 8008dee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	697a      	ldr	r2, [r7, #20]
 8008df6:	4313      	orrs	r3, r2
 8008df8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	f023 0304 	bic.w	r3, r3, #4
 8008e00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	4a16      	ldr	r2, [pc, #88]	; (8008e60 <TIM_OC1_SetConfig+0xdc>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d003      	beq.n	8008e12 <TIM_OC1_SetConfig+0x8e>
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	4a15      	ldr	r2, [pc, #84]	; (8008e64 <TIM_OC1_SetConfig+0xe0>)
 8008e0e:	4293      	cmp	r3, r2
 8008e10:	d111      	bne.n	8008e36 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008e12:	693b      	ldr	r3, [r7, #16]
 8008e14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e18:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008e1a:	693b      	ldr	r3, [r7, #16]
 8008e1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e20:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008e22:	683b      	ldr	r3, [r7, #0]
 8008e24:	695b      	ldr	r3, [r3, #20]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	4313      	orrs	r3, r2
 8008e2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008e2c:	683b      	ldr	r3, [r7, #0]
 8008e2e:	699b      	ldr	r3, [r3, #24]
 8008e30:	693a      	ldr	r2, [r7, #16]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	693a      	ldr	r2, [r7, #16]
 8008e3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	68fa      	ldr	r2, [r7, #12]
 8008e40:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008e42:	683b      	ldr	r3, [r7, #0]
 8008e44:	685a      	ldr	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	697a      	ldr	r2, [r7, #20]
 8008e4e:	621a      	str	r2, [r3, #32]
}
 8008e50:	bf00      	nop
 8008e52:	371c      	adds	r7, #28
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	fffeff8f 	.word	0xfffeff8f
 8008e60:	40010000 	.word	0x40010000
 8008e64:	40010400 	.word	0x40010400

08008e68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b087      	sub	sp, #28
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]
 8008e70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6a1b      	ldr	r3, [r3, #32]
 8008e76:	f023 0210 	bic.w	r2, r3, #16
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	6a1b      	ldr	r3, [r3, #32]
 8008e82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	685b      	ldr	r3, [r3, #4]
 8008e88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	699b      	ldr	r3, [r3, #24]
 8008e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4b2e      	ldr	r3, [pc, #184]	; (8008f4c <TIM_OC2_SetConfig+0xe4>)
 8008e94:	4013      	ands	r3, r2
 8008e96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ea0:	683b      	ldr	r3, [r7, #0]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	021b      	lsls	r3, r3, #8
 8008ea6:	68fa      	ldr	r2, [r7, #12]
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008eac:	697b      	ldr	r3, [r7, #20]
 8008eae:	f023 0320 	bic.w	r3, r3, #32
 8008eb2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	689b      	ldr	r3, [r3, #8]
 8008eb8:	011b      	lsls	r3, r3, #4
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	4a23      	ldr	r2, [pc, #140]	; (8008f50 <TIM_OC2_SetConfig+0xe8>)
 8008ec4:	4293      	cmp	r3, r2
 8008ec6:	d003      	beq.n	8008ed0 <TIM_OC2_SetConfig+0x68>
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	4a22      	ldr	r2, [pc, #136]	; (8008f54 <TIM_OC2_SetConfig+0xec>)
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d10d      	bne.n	8008eec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008ed6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008ed8:	683b      	ldr	r3, [r7, #0]
 8008eda:	68db      	ldr	r3, [r3, #12]
 8008edc:	011b      	lsls	r3, r3, #4
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	4313      	orrs	r3, r2
 8008ee2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008ee4:	697b      	ldr	r3, [r7, #20]
 8008ee6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008eea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	4a18      	ldr	r2, [pc, #96]	; (8008f50 <TIM_OC2_SetConfig+0xe8>)
 8008ef0:	4293      	cmp	r3, r2
 8008ef2:	d003      	beq.n	8008efc <TIM_OC2_SetConfig+0x94>
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	4a17      	ldr	r2, [pc, #92]	; (8008f54 <TIM_OC2_SetConfig+0xec>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d113      	bne.n	8008f24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008efc:	693b      	ldr	r3, [r7, #16]
 8008efe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008f02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008f0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	009b      	lsls	r3, r3, #2
 8008f12:	693a      	ldr	r2, [r7, #16]
 8008f14:	4313      	orrs	r3, r2
 8008f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008f18:	683b      	ldr	r3, [r7, #0]
 8008f1a:	699b      	ldr	r3, [r3, #24]
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	693a      	ldr	r2, [r7, #16]
 8008f20:	4313      	orrs	r3, r2
 8008f22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	693a      	ldr	r2, [r7, #16]
 8008f28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68fa      	ldr	r2, [r7, #12]
 8008f2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008f30:	683b      	ldr	r3, [r7, #0]
 8008f32:	685a      	ldr	r2, [r3, #4]
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	697a      	ldr	r2, [r7, #20]
 8008f3c:	621a      	str	r2, [r3, #32]
}
 8008f3e:	bf00      	nop
 8008f40:	371c      	adds	r7, #28
 8008f42:	46bd      	mov	sp, r7
 8008f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f48:	4770      	bx	lr
 8008f4a:	bf00      	nop
 8008f4c:	feff8fff 	.word	0xfeff8fff
 8008f50:	40010000 	.word	0x40010000
 8008f54:	40010400 	.word	0x40010400

08008f58 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	69db      	ldr	r3, [r3, #28]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f80:	68fa      	ldr	r2, [r7, #12]
 8008f82:	4b2d      	ldr	r3, [pc, #180]	; (8009038 <TIM_OC3_SetConfig+0xe0>)
 8008f84:	4013      	ands	r3, r2
 8008f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0303 	bic.w	r3, r3, #3
 8008f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	021b      	lsls	r3, r3, #8
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	4313      	orrs	r3, r2
 8008fac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	4a22      	ldr	r2, [pc, #136]	; (800903c <TIM_OC3_SetConfig+0xe4>)
 8008fb2:	4293      	cmp	r3, r2
 8008fb4:	d003      	beq.n	8008fbe <TIM_OC3_SetConfig+0x66>
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	4a21      	ldr	r2, [pc, #132]	; (8009040 <TIM_OC3_SetConfig+0xe8>)
 8008fba:	4293      	cmp	r3, r2
 8008fbc:	d10d      	bne.n	8008fda <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008fbe:	697b      	ldr	r3, [r7, #20]
 8008fc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008fc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008fc6:	683b      	ldr	r3, [r7, #0]
 8008fc8:	68db      	ldr	r3, [r3, #12]
 8008fca:	021b      	lsls	r3, r3, #8
 8008fcc:	697a      	ldr	r2, [r7, #20]
 8008fce:	4313      	orrs	r3, r2
 8008fd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008fd2:	697b      	ldr	r3, [r7, #20]
 8008fd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008fd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	4a17      	ldr	r2, [pc, #92]	; (800903c <TIM_OC3_SetConfig+0xe4>)
 8008fde:	4293      	cmp	r3, r2
 8008fe0:	d003      	beq.n	8008fea <TIM_OC3_SetConfig+0x92>
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	4a16      	ldr	r2, [pc, #88]	; (8009040 <TIM_OC3_SetConfig+0xe8>)
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d113      	bne.n	8009012 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ff0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008ff8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008ffa:	683b      	ldr	r3, [r7, #0]
 8008ffc:	695b      	ldr	r3, [r3, #20]
 8008ffe:	011b      	lsls	r3, r3, #4
 8009000:	693a      	ldr	r2, [r7, #16]
 8009002:	4313      	orrs	r3, r2
 8009004:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009006:	683b      	ldr	r3, [r7, #0]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	693a      	ldr	r2, [r7, #16]
 800900e:	4313      	orrs	r3, r2
 8009010:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	693a      	ldr	r2, [r7, #16]
 8009016:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	68fa      	ldr	r2, [r7, #12]
 800901c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	697a      	ldr	r2, [r7, #20]
 800902a:	621a      	str	r2, [r3, #32]
}
 800902c:	bf00      	nop
 800902e:	371c      	adds	r7, #28
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr
 8009038:	fffeff8f 	.word	0xfffeff8f
 800903c:	40010000 	.word	0x40010000
 8009040:	40010400 	.word	0x40010400

08009044 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009044:	b480      	push	{r7}
 8009046:	b087      	sub	sp, #28
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
 800904c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6a1b      	ldr	r3, [r3, #32]
 800905e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	69db      	ldr	r3, [r3, #28]
 800906a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	4b1e      	ldr	r3, [pc, #120]	; (80090e8 <TIM_OC4_SetConfig+0xa4>)
 8009070:	4013      	ands	r3, r2
 8009072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800907a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800907c:	683b      	ldr	r3, [r7, #0]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	021b      	lsls	r3, r3, #8
 8009082:	68fa      	ldr	r2, [r7, #12]
 8009084:	4313      	orrs	r3, r2
 8009086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800908e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009090:	683b      	ldr	r3, [r7, #0]
 8009092:	689b      	ldr	r3, [r3, #8]
 8009094:	031b      	lsls	r3, r3, #12
 8009096:	693a      	ldr	r2, [r7, #16]
 8009098:	4313      	orrs	r3, r2
 800909a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	4a13      	ldr	r2, [pc, #76]	; (80090ec <TIM_OC4_SetConfig+0xa8>)
 80090a0:	4293      	cmp	r3, r2
 80090a2:	d003      	beq.n	80090ac <TIM_OC4_SetConfig+0x68>
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	4a12      	ldr	r2, [pc, #72]	; (80090f0 <TIM_OC4_SetConfig+0xac>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d109      	bne.n	80090c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80090ac:	697b      	ldr	r3, [r7, #20]
 80090ae:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80090b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80090b4:	683b      	ldr	r3, [r7, #0]
 80090b6:	695b      	ldr	r3, [r3, #20]
 80090b8:	019b      	lsls	r3, r3, #6
 80090ba:	697a      	ldr	r2, [r7, #20]
 80090bc:	4313      	orrs	r3, r2
 80090be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	697a      	ldr	r2, [r7, #20]
 80090c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80090cc:	683b      	ldr	r3, [r7, #0]
 80090ce:	685a      	ldr	r2, [r3, #4]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	693a      	ldr	r2, [r7, #16]
 80090d8:	621a      	str	r2, [r3, #32]
}
 80090da:	bf00      	nop
 80090dc:	371c      	adds	r7, #28
 80090de:	46bd      	mov	sp, r7
 80090e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e4:	4770      	bx	lr
 80090e6:	bf00      	nop
 80090e8:	feff8fff 	.word	0xfeff8fff
 80090ec:	40010000 	.word	0x40010000
 80090f0:	40010400 	.word	0x40010400

080090f4 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b087      	sub	sp, #28
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6a1b      	ldr	r3, [r3, #32]
 8009102:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	6a1b      	ldr	r3, [r3, #32]
 800910e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	685b      	ldr	r3, [r3, #4]
 8009114:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800911a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800911c:	68fa      	ldr	r2, [r7, #12]
 800911e:	4b1b      	ldr	r3, [pc, #108]	; (800918c <TIM_OC5_SetConfig+0x98>)
 8009120:	4013      	ands	r3, r2
 8009122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800912e:	693b      	ldr	r3, [r7, #16]
 8009130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009134:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009136:	683b      	ldr	r3, [r7, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	041b      	lsls	r3, r3, #16
 800913c:	693a      	ldr	r2, [r7, #16]
 800913e:	4313      	orrs	r3, r2
 8009140:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	4a12      	ldr	r2, [pc, #72]	; (8009190 <TIM_OC5_SetConfig+0x9c>)
 8009146:	4293      	cmp	r3, r2
 8009148:	d003      	beq.n	8009152 <TIM_OC5_SetConfig+0x5e>
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	4a11      	ldr	r2, [pc, #68]	; (8009194 <TIM_OC5_SetConfig+0xa0>)
 800914e:	4293      	cmp	r3, r2
 8009150:	d109      	bne.n	8009166 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009152:	697b      	ldr	r3, [r7, #20]
 8009154:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009158:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800915a:	683b      	ldr	r3, [r7, #0]
 800915c:	695b      	ldr	r3, [r3, #20]
 800915e:	021b      	lsls	r3, r3, #8
 8009160:	697a      	ldr	r2, [r7, #20]
 8009162:	4313      	orrs	r3, r2
 8009164:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	697a      	ldr	r2, [r7, #20]
 800916a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	68fa      	ldr	r2, [r7, #12]
 8009170:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	693a      	ldr	r2, [r7, #16]
 800917e:	621a      	str	r2, [r3, #32]
}
 8009180:	bf00      	nop
 8009182:	371c      	adds	r7, #28
 8009184:	46bd      	mov	sp, r7
 8009186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918a:	4770      	bx	lr
 800918c:	fffeff8f 	.word	0xfffeff8f
 8009190:	40010000 	.word	0x40010000
 8009194:	40010400 	.word	0x40010400

08009198 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009198:	b480      	push	{r7}
 800919a:	b087      	sub	sp, #28
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
 80091a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	685b      	ldr	r3, [r3, #4]
 80091b8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80091c0:	68fa      	ldr	r2, [r7, #12]
 80091c2:	4b1c      	ldr	r3, [pc, #112]	; (8009234 <TIM_OC6_SetConfig+0x9c>)
 80091c4:	4013      	ands	r3, r2
 80091c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	021b      	lsls	r3, r3, #8
 80091ce:	68fa      	ldr	r2, [r7, #12]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80091da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	051b      	lsls	r3, r3, #20
 80091e2:	693a      	ldr	r2, [r7, #16]
 80091e4:	4313      	orrs	r3, r2
 80091e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	4a13      	ldr	r2, [pc, #76]	; (8009238 <TIM_OC6_SetConfig+0xa0>)
 80091ec:	4293      	cmp	r3, r2
 80091ee:	d003      	beq.n	80091f8 <TIM_OC6_SetConfig+0x60>
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	4a12      	ldr	r2, [pc, #72]	; (800923c <TIM_OC6_SetConfig+0xa4>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d109      	bne.n	800920c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80091fe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	695b      	ldr	r3, [r3, #20]
 8009204:	029b      	lsls	r3, r3, #10
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	697a      	ldr	r2, [r7, #20]
 8009210:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	621a      	str	r2, [r3, #32]
}
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr
 8009232:	bf00      	nop
 8009234:	feff8fff 	.word	0xfeff8fff
 8009238:	40010000 	.word	0x40010000
 800923c:	40010400 	.word	0x40010400

08009240 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009240:	b480      	push	{r7}
 8009242:	b087      	sub	sp, #28
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	6a1b      	ldr	r3, [r3, #32]
 8009250:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	6a1b      	ldr	r3, [r3, #32]
 8009256:	f023 0201 	bic.w	r2, r3, #1
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	699b      	ldr	r3, [r3, #24]
 8009262:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800926a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	011b      	lsls	r3, r3, #4
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	4313      	orrs	r3, r2
 8009274:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009276:	697b      	ldr	r3, [r7, #20]
 8009278:	f023 030a 	bic.w	r3, r3, #10
 800927c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800927e:	697a      	ldr	r2, [r7, #20]
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	4313      	orrs	r3, r2
 8009284:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	693a      	ldr	r2, [r7, #16]
 800928a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	697a      	ldr	r2, [r7, #20]
 8009290:	621a      	str	r2, [r3, #32]
}
 8009292:	bf00      	nop
 8009294:	371c      	adds	r7, #28
 8009296:	46bd      	mov	sp, r7
 8009298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800929c:	4770      	bx	lr

0800929e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800929e:	b480      	push	{r7}
 80092a0:	b087      	sub	sp, #28
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	60f8      	str	r0, [r7, #12]
 80092a6:	60b9      	str	r1, [r7, #8]
 80092a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6a1b      	ldr	r3, [r3, #32]
 80092ae:	f023 0210 	bic.w	r2, r3, #16
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	699b      	ldr	r3, [r3, #24]
 80092ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6a1b      	ldr	r3, [r3, #32]
 80092c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092c2:	697b      	ldr	r3, [r7, #20]
 80092c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	031b      	lsls	r3, r3, #12
 80092ce:	697a      	ldr	r2, [r7, #20]
 80092d0:	4313      	orrs	r3, r2
 80092d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092d4:	693b      	ldr	r3, [r7, #16]
 80092d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	011b      	lsls	r3, r3, #4
 80092e0:	693a      	ldr	r2, [r7, #16]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	697a      	ldr	r2, [r7, #20]
 80092ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	693a      	ldr	r2, [r7, #16]
 80092f0:	621a      	str	r2, [r3, #32]
}
 80092f2:	bf00      	nop
 80092f4:	371c      	adds	r7, #28
 80092f6:	46bd      	mov	sp, r7
 80092f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092fc:	4770      	bx	lr

080092fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80092fe:	b480      	push	{r7}
 8009300:	b085      	sub	sp, #20
 8009302:	af00      	add	r7, sp, #0
 8009304:	6078      	str	r0, [r7, #4]
 8009306:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	689b      	ldr	r3, [r3, #8]
 800930c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009314:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009316:	683a      	ldr	r2, [r7, #0]
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	4313      	orrs	r3, r2
 800931c:	f043 0307 	orr.w	r3, r3, #7
 8009320:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	68fa      	ldr	r2, [r7, #12]
 8009326:	609a      	str	r2, [r3, #8]
}
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009334:	b480      	push	{r7}
 8009336:	b087      	sub	sp, #28
 8009338:	af00      	add	r7, sp, #0
 800933a:	60f8      	str	r0, [r7, #12]
 800933c:	60b9      	str	r1, [r7, #8]
 800933e:	607a      	str	r2, [r7, #4]
 8009340:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	689b      	ldr	r3, [r3, #8]
 8009346:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009348:	697b      	ldr	r3, [r7, #20]
 800934a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800934e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009350:	683b      	ldr	r3, [r7, #0]
 8009352:	021a      	lsls	r2, r3, #8
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	431a      	orrs	r2, r3
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	4313      	orrs	r3, r2
 800935c:	697a      	ldr	r2, [r7, #20]
 800935e:	4313      	orrs	r3, r2
 8009360:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	609a      	str	r2, [r3, #8]
}
 8009368:	bf00      	nop
 800936a:	371c      	adds	r7, #28
 800936c:	46bd      	mov	sp, r7
 800936e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009372:	4770      	bx	lr

08009374 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
 800937c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009384:	2b01      	cmp	r3, #1
 8009386:	d101      	bne.n	800938c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009388:	2302      	movs	r3, #2
 800938a:	e06d      	b.n	8009468 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800938c:	687b      	ldr	r3, [r7, #4]
 800938e:	2201      	movs	r2, #1
 8009390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2202      	movs	r2, #2
 8009398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	685b      	ldr	r3, [r3, #4]
 80093a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	689b      	ldr	r3, [r3, #8]
 80093aa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	4a30      	ldr	r2, [pc, #192]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093b2:	4293      	cmp	r3, r2
 80093b4:	d004      	beq.n	80093c0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a2f      	ldr	r2, [pc, #188]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d108      	bne.n	80093d2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093c6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093c8:	683b      	ldr	r3, [r7, #0]
 80093ca:	685b      	ldr	r3, [r3, #4]
 80093cc:	68fa      	ldr	r2, [r7, #12]
 80093ce:	4313      	orrs	r3, r2
 80093d0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093da:	683b      	ldr	r3, [r7, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68fa      	ldr	r2, [r7, #12]
 80093ea:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	4a20      	ldr	r2, [pc, #128]	; (8009474 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80093f2:	4293      	cmp	r3, r2
 80093f4:	d022      	beq.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fe:	d01d      	beq.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	4a1d      	ldr	r2, [pc, #116]	; (800947c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d018      	beq.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	4a1c      	ldr	r2, [pc, #112]	; (8009480 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009410:	4293      	cmp	r3, r2
 8009412:	d013      	beq.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	4a1a      	ldr	r2, [pc, #104]	; (8009484 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800941a:	4293      	cmp	r3, r2
 800941c:	d00e      	beq.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4a15      	ldr	r2, [pc, #84]	; (8009478 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d009      	beq.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	4a16      	ldr	r2, [pc, #88]	; (8009488 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800942e:	4293      	cmp	r3, r2
 8009430:	d004      	beq.n	800943c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	4a15      	ldr	r2, [pc, #84]	; (800948c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8009438:	4293      	cmp	r3, r2
 800943a:	d10c      	bne.n	8009456 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009442:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	689b      	ldr	r3, [r3, #8]
 8009448:	68ba      	ldr	r2, [r7, #8]
 800944a:	4313      	orrs	r3, r2
 800944c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	68ba      	ldr	r2, [r7, #8]
 8009454:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	2200      	movs	r2, #0
 8009462:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009466:	2300      	movs	r3, #0
}
 8009468:	4618      	mov	r0, r3
 800946a:	3714      	adds	r7, #20
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	40010000 	.word	0x40010000
 8009478:	40010400 	.word	0x40010400
 800947c:	40000400 	.word	0x40000400
 8009480:	40000800 	.word	0x40000800
 8009484:	40000c00 	.word	0x40000c00
 8009488:	40014000 	.word	0x40014000
 800948c:	40001800 	.word	0x40001800

08009490 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	b082      	sub	sp, #8
 8009494:	af00      	add	r7, sp, #0
 8009496:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d101      	bne.n	80094a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800949e:	2301      	movs	r3, #1
 80094a0:	e040      	b.n	8009524 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d106      	bne.n	80094b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2200      	movs	r2, #0
 80094ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7f8 fb2c 	bl	8001b10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2224      	movs	r2, #36	; 0x24
 80094bc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	681a      	ldr	r2, [r3, #0]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f022 0201 	bic.w	r2, r2, #1
 80094cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094ce:	6878      	ldr	r0, [r7, #4]
 80094d0:	f000 f82c 	bl	800952c <UART_SetConfig>
 80094d4:	4603      	mov	r3, r0
 80094d6:	2b01      	cmp	r3, #1
 80094d8:	d101      	bne.n	80094de <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e022      	b.n	8009524 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d002      	beq.n	80094ec <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f000 fa84 	bl	80099f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	685a      	ldr	r2, [r3, #4]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	689a      	ldr	r2, [r3, #8]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800950a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	681a      	ldr	r2, [r3, #0]
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	f042 0201 	orr.w	r2, r2, #1
 800951a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 fb0b 	bl	8009b38 <UART_CheckIdleState>
 8009522:	4603      	mov	r3, r0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b088      	sub	sp, #32
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009534:	2300      	movs	r3, #0
 8009536:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	689a      	ldr	r2, [r3, #8]
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	691b      	ldr	r3, [r3, #16]
 8009540:	431a      	orrs	r2, r3
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	695b      	ldr	r3, [r3, #20]
 8009546:	431a      	orrs	r2, r3
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	69db      	ldr	r3, [r3, #28]
 800954c:	4313      	orrs	r3, r2
 800954e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	4ba6      	ldr	r3, [pc, #664]	; (80097f0 <UART_SetConfig+0x2c4>)
 8009558:	4013      	ands	r3, r2
 800955a:	687a      	ldr	r2, [r7, #4]
 800955c:	6812      	ldr	r2, [r2, #0]
 800955e:	6979      	ldr	r1, [r7, #20]
 8009560:	430b      	orrs	r3, r1
 8009562:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	68da      	ldr	r2, [r3, #12]
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	430a      	orrs	r2, r1
 8009578:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	699b      	ldr	r3, [r3, #24]
 800957e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	697a      	ldr	r2, [r7, #20]
 8009586:	4313      	orrs	r3, r2
 8009588:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	689b      	ldr	r3, [r3, #8]
 8009590:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	697a      	ldr	r2, [r7, #20]
 800959a:	430a      	orrs	r2, r1
 800959c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	4a94      	ldr	r2, [pc, #592]	; (80097f4 <UART_SetConfig+0x2c8>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d120      	bne.n	80095ea <UART_SetConfig+0xbe>
 80095a8:	4b93      	ldr	r3, [pc, #588]	; (80097f8 <UART_SetConfig+0x2cc>)
 80095aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ae:	f003 0303 	and.w	r3, r3, #3
 80095b2:	2b03      	cmp	r3, #3
 80095b4:	d816      	bhi.n	80095e4 <UART_SetConfig+0xb8>
 80095b6:	a201      	add	r2, pc, #4	; (adr r2, 80095bc <UART_SetConfig+0x90>)
 80095b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095bc:	080095cd 	.word	0x080095cd
 80095c0:	080095d9 	.word	0x080095d9
 80095c4:	080095d3 	.word	0x080095d3
 80095c8:	080095df 	.word	0x080095df
 80095cc:	2301      	movs	r3, #1
 80095ce:	77fb      	strb	r3, [r7, #31]
 80095d0:	e150      	b.n	8009874 <UART_SetConfig+0x348>
 80095d2:	2302      	movs	r3, #2
 80095d4:	77fb      	strb	r3, [r7, #31]
 80095d6:	e14d      	b.n	8009874 <UART_SetConfig+0x348>
 80095d8:	2304      	movs	r3, #4
 80095da:	77fb      	strb	r3, [r7, #31]
 80095dc:	e14a      	b.n	8009874 <UART_SetConfig+0x348>
 80095de:	2308      	movs	r3, #8
 80095e0:	77fb      	strb	r3, [r7, #31]
 80095e2:	e147      	b.n	8009874 <UART_SetConfig+0x348>
 80095e4:	2310      	movs	r3, #16
 80095e6:	77fb      	strb	r3, [r7, #31]
 80095e8:	e144      	b.n	8009874 <UART_SetConfig+0x348>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	4a83      	ldr	r2, [pc, #524]	; (80097fc <UART_SetConfig+0x2d0>)
 80095f0:	4293      	cmp	r3, r2
 80095f2:	d132      	bne.n	800965a <UART_SetConfig+0x12e>
 80095f4:	4b80      	ldr	r3, [pc, #512]	; (80097f8 <UART_SetConfig+0x2cc>)
 80095f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095fa:	f003 030c 	and.w	r3, r3, #12
 80095fe:	2b0c      	cmp	r3, #12
 8009600:	d828      	bhi.n	8009654 <UART_SetConfig+0x128>
 8009602:	a201      	add	r2, pc, #4	; (adr r2, 8009608 <UART_SetConfig+0xdc>)
 8009604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009608:	0800963d 	.word	0x0800963d
 800960c:	08009655 	.word	0x08009655
 8009610:	08009655 	.word	0x08009655
 8009614:	08009655 	.word	0x08009655
 8009618:	08009649 	.word	0x08009649
 800961c:	08009655 	.word	0x08009655
 8009620:	08009655 	.word	0x08009655
 8009624:	08009655 	.word	0x08009655
 8009628:	08009643 	.word	0x08009643
 800962c:	08009655 	.word	0x08009655
 8009630:	08009655 	.word	0x08009655
 8009634:	08009655 	.word	0x08009655
 8009638:	0800964f 	.word	0x0800964f
 800963c:	2300      	movs	r3, #0
 800963e:	77fb      	strb	r3, [r7, #31]
 8009640:	e118      	b.n	8009874 <UART_SetConfig+0x348>
 8009642:	2302      	movs	r3, #2
 8009644:	77fb      	strb	r3, [r7, #31]
 8009646:	e115      	b.n	8009874 <UART_SetConfig+0x348>
 8009648:	2304      	movs	r3, #4
 800964a:	77fb      	strb	r3, [r7, #31]
 800964c:	e112      	b.n	8009874 <UART_SetConfig+0x348>
 800964e:	2308      	movs	r3, #8
 8009650:	77fb      	strb	r3, [r7, #31]
 8009652:	e10f      	b.n	8009874 <UART_SetConfig+0x348>
 8009654:	2310      	movs	r3, #16
 8009656:	77fb      	strb	r3, [r7, #31]
 8009658:	e10c      	b.n	8009874 <UART_SetConfig+0x348>
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4a68      	ldr	r2, [pc, #416]	; (8009800 <UART_SetConfig+0x2d4>)
 8009660:	4293      	cmp	r3, r2
 8009662:	d120      	bne.n	80096a6 <UART_SetConfig+0x17a>
 8009664:	4b64      	ldr	r3, [pc, #400]	; (80097f8 <UART_SetConfig+0x2cc>)
 8009666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800966a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800966e:	2b30      	cmp	r3, #48	; 0x30
 8009670:	d013      	beq.n	800969a <UART_SetConfig+0x16e>
 8009672:	2b30      	cmp	r3, #48	; 0x30
 8009674:	d814      	bhi.n	80096a0 <UART_SetConfig+0x174>
 8009676:	2b20      	cmp	r3, #32
 8009678:	d009      	beq.n	800968e <UART_SetConfig+0x162>
 800967a:	2b20      	cmp	r3, #32
 800967c:	d810      	bhi.n	80096a0 <UART_SetConfig+0x174>
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <UART_SetConfig+0x15c>
 8009682:	2b10      	cmp	r3, #16
 8009684:	d006      	beq.n	8009694 <UART_SetConfig+0x168>
 8009686:	e00b      	b.n	80096a0 <UART_SetConfig+0x174>
 8009688:	2300      	movs	r3, #0
 800968a:	77fb      	strb	r3, [r7, #31]
 800968c:	e0f2      	b.n	8009874 <UART_SetConfig+0x348>
 800968e:	2302      	movs	r3, #2
 8009690:	77fb      	strb	r3, [r7, #31]
 8009692:	e0ef      	b.n	8009874 <UART_SetConfig+0x348>
 8009694:	2304      	movs	r3, #4
 8009696:	77fb      	strb	r3, [r7, #31]
 8009698:	e0ec      	b.n	8009874 <UART_SetConfig+0x348>
 800969a:	2308      	movs	r3, #8
 800969c:	77fb      	strb	r3, [r7, #31]
 800969e:	e0e9      	b.n	8009874 <UART_SetConfig+0x348>
 80096a0:	2310      	movs	r3, #16
 80096a2:	77fb      	strb	r3, [r7, #31]
 80096a4:	e0e6      	b.n	8009874 <UART_SetConfig+0x348>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a56      	ldr	r2, [pc, #344]	; (8009804 <UART_SetConfig+0x2d8>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d120      	bne.n	80096f2 <UART_SetConfig+0x1c6>
 80096b0:	4b51      	ldr	r3, [pc, #324]	; (80097f8 <UART_SetConfig+0x2cc>)
 80096b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80096b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80096ba:	2bc0      	cmp	r3, #192	; 0xc0
 80096bc:	d013      	beq.n	80096e6 <UART_SetConfig+0x1ba>
 80096be:	2bc0      	cmp	r3, #192	; 0xc0
 80096c0:	d814      	bhi.n	80096ec <UART_SetConfig+0x1c0>
 80096c2:	2b80      	cmp	r3, #128	; 0x80
 80096c4:	d009      	beq.n	80096da <UART_SetConfig+0x1ae>
 80096c6:	2b80      	cmp	r3, #128	; 0x80
 80096c8:	d810      	bhi.n	80096ec <UART_SetConfig+0x1c0>
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d002      	beq.n	80096d4 <UART_SetConfig+0x1a8>
 80096ce:	2b40      	cmp	r3, #64	; 0x40
 80096d0:	d006      	beq.n	80096e0 <UART_SetConfig+0x1b4>
 80096d2:	e00b      	b.n	80096ec <UART_SetConfig+0x1c0>
 80096d4:	2300      	movs	r3, #0
 80096d6:	77fb      	strb	r3, [r7, #31]
 80096d8:	e0cc      	b.n	8009874 <UART_SetConfig+0x348>
 80096da:	2302      	movs	r3, #2
 80096dc:	77fb      	strb	r3, [r7, #31]
 80096de:	e0c9      	b.n	8009874 <UART_SetConfig+0x348>
 80096e0:	2304      	movs	r3, #4
 80096e2:	77fb      	strb	r3, [r7, #31]
 80096e4:	e0c6      	b.n	8009874 <UART_SetConfig+0x348>
 80096e6:	2308      	movs	r3, #8
 80096e8:	77fb      	strb	r3, [r7, #31]
 80096ea:	e0c3      	b.n	8009874 <UART_SetConfig+0x348>
 80096ec:	2310      	movs	r3, #16
 80096ee:	77fb      	strb	r3, [r7, #31]
 80096f0:	e0c0      	b.n	8009874 <UART_SetConfig+0x348>
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	4a44      	ldr	r2, [pc, #272]	; (8009808 <UART_SetConfig+0x2dc>)
 80096f8:	4293      	cmp	r3, r2
 80096fa:	d125      	bne.n	8009748 <UART_SetConfig+0x21c>
 80096fc:	4b3e      	ldr	r3, [pc, #248]	; (80097f8 <UART_SetConfig+0x2cc>)
 80096fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009706:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800970a:	d017      	beq.n	800973c <UART_SetConfig+0x210>
 800970c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009710:	d817      	bhi.n	8009742 <UART_SetConfig+0x216>
 8009712:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009716:	d00b      	beq.n	8009730 <UART_SetConfig+0x204>
 8009718:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800971c:	d811      	bhi.n	8009742 <UART_SetConfig+0x216>
 800971e:	2b00      	cmp	r3, #0
 8009720:	d003      	beq.n	800972a <UART_SetConfig+0x1fe>
 8009722:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009726:	d006      	beq.n	8009736 <UART_SetConfig+0x20a>
 8009728:	e00b      	b.n	8009742 <UART_SetConfig+0x216>
 800972a:	2300      	movs	r3, #0
 800972c:	77fb      	strb	r3, [r7, #31]
 800972e:	e0a1      	b.n	8009874 <UART_SetConfig+0x348>
 8009730:	2302      	movs	r3, #2
 8009732:	77fb      	strb	r3, [r7, #31]
 8009734:	e09e      	b.n	8009874 <UART_SetConfig+0x348>
 8009736:	2304      	movs	r3, #4
 8009738:	77fb      	strb	r3, [r7, #31]
 800973a:	e09b      	b.n	8009874 <UART_SetConfig+0x348>
 800973c:	2308      	movs	r3, #8
 800973e:	77fb      	strb	r3, [r7, #31]
 8009740:	e098      	b.n	8009874 <UART_SetConfig+0x348>
 8009742:	2310      	movs	r3, #16
 8009744:	77fb      	strb	r3, [r7, #31]
 8009746:	e095      	b.n	8009874 <UART_SetConfig+0x348>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	4a2f      	ldr	r2, [pc, #188]	; (800980c <UART_SetConfig+0x2e0>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d125      	bne.n	800979e <UART_SetConfig+0x272>
 8009752:	4b29      	ldr	r3, [pc, #164]	; (80097f8 <UART_SetConfig+0x2cc>)
 8009754:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009758:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800975c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009760:	d017      	beq.n	8009792 <UART_SetConfig+0x266>
 8009762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009766:	d817      	bhi.n	8009798 <UART_SetConfig+0x26c>
 8009768:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800976c:	d00b      	beq.n	8009786 <UART_SetConfig+0x25a>
 800976e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009772:	d811      	bhi.n	8009798 <UART_SetConfig+0x26c>
 8009774:	2b00      	cmp	r3, #0
 8009776:	d003      	beq.n	8009780 <UART_SetConfig+0x254>
 8009778:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800977c:	d006      	beq.n	800978c <UART_SetConfig+0x260>
 800977e:	e00b      	b.n	8009798 <UART_SetConfig+0x26c>
 8009780:	2301      	movs	r3, #1
 8009782:	77fb      	strb	r3, [r7, #31]
 8009784:	e076      	b.n	8009874 <UART_SetConfig+0x348>
 8009786:	2302      	movs	r3, #2
 8009788:	77fb      	strb	r3, [r7, #31]
 800978a:	e073      	b.n	8009874 <UART_SetConfig+0x348>
 800978c:	2304      	movs	r3, #4
 800978e:	77fb      	strb	r3, [r7, #31]
 8009790:	e070      	b.n	8009874 <UART_SetConfig+0x348>
 8009792:	2308      	movs	r3, #8
 8009794:	77fb      	strb	r3, [r7, #31]
 8009796:	e06d      	b.n	8009874 <UART_SetConfig+0x348>
 8009798:	2310      	movs	r3, #16
 800979a:	77fb      	strb	r3, [r7, #31]
 800979c:	e06a      	b.n	8009874 <UART_SetConfig+0x348>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a1b      	ldr	r2, [pc, #108]	; (8009810 <UART_SetConfig+0x2e4>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d138      	bne.n	800981a <UART_SetConfig+0x2ee>
 80097a8:	4b13      	ldr	r3, [pc, #76]	; (80097f8 <UART_SetConfig+0x2cc>)
 80097aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097ae:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80097b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097b6:	d017      	beq.n	80097e8 <UART_SetConfig+0x2bc>
 80097b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80097bc:	d82a      	bhi.n	8009814 <UART_SetConfig+0x2e8>
 80097be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097c2:	d00b      	beq.n	80097dc <UART_SetConfig+0x2b0>
 80097c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097c8:	d824      	bhi.n	8009814 <UART_SetConfig+0x2e8>
 80097ca:	2b00      	cmp	r3, #0
 80097cc:	d003      	beq.n	80097d6 <UART_SetConfig+0x2aa>
 80097ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097d2:	d006      	beq.n	80097e2 <UART_SetConfig+0x2b6>
 80097d4:	e01e      	b.n	8009814 <UART_SetConfig+0x2e8>
 80097d6:	2300      	movs	r3, #0
 80097d8:	77fb      	strb	r3, [r7, #31]
 80097da:	e04b      	b.n	8009874 <UART_SetConfig+0x348>
 80097dc:	2302      	movs	r3, #2
 80097de:	77fb      	strb	r3, [r7, #31]
 80097e0:	e048      	b.n	8009874 <UART_SetConfig+0x348>
 80097e2:	2304      	movs	r3, #4
 80097e4:	77fb      	strb	r3, [r7, #31]
 80097e6:	e045      	b.n	8009874 <UART_SetConfig+0x348>
 80097e8:	2308      	movs	r3, #8
 80097ea:	77fb      	strb	r3, [r7, #31]
 80097ec:	e042      	b.n	8009874 <UART_SetConfig+0x348>
 80097ee:	bf00      	nop
 80097f0:	efff69f3 	.word	0xefff69f3
 80097f4:	40011000 	.word	0x40011000
 80097f8:	40023800 	.word	0x40023800
 80097fc:	40004400 	.word	0x40004400
 8009800:	40004800 	.word	0x40004800
 8009804:	40004c00 	.word	0x40004c00
 8009808:	40005000 	.word	0x40005000
 800980c:	40011400 	.word	0x40011400
 8009810:	40007800 	.word	0x40007800
 8009814:	2310      	movs	r3, #16
 8009816:	77fb      	strb	r3, [r7, #31]
 8009818:	e02c      	b.n	8009874 <UART_SetConfig+0x348>
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	4a72      	ldr	r2, [pc, #456]	; (80099e8 <UART_SetConfig+0x4bc>)
 8009820:	4293      	cmp	r3, r2
 8009822:	d125      	bne.n	8009870 <UART_SetConfig+0x344>
 8009824:	4b71      	ldr	r3, [pc, #452]	; (80099ec <UART_SetConfig+0x4c0>)
 8009826:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800982a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800982e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009832:	d017      	beq.n	8009864 <UART_SetConfig+0x338>
 8009834:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009838:	d817      	bhi.n	800986a <UART_SetConfig+0x33e>
 800983a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800983e:	d00b      	beq.n	8009858 <UART_SetConfig+0x32c>
 8009840:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009844:	d811      	bhi.n	800986a <UART_SetConfig+0x33e>
 8009846:	2b00      	cmp	r3, #0
 8009848:	d003      	beq.n	8009852 <UART_SetConfig+0x326>
 800984a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800984e:	d006      	beq.n	800985e <UART_SetConfig+0x332>
 8009850:	e00b      	b.n	800986a <UART_SetConfig+0x33e>
 8009852:	2300      	movs	r3, #0
 8009854:	77fb      	strb	r3, [r7, #31]
 8009856:	e00d      	b.n	8009874 <UART_SetConfig+0x348>
 8009858:	2302      	movs	r3, #2
 800985a:	77fb      	strb	r3, [r7, #31]
 800985c:	e00a      	b.n	8009874 <UART_SetConfig+0x348>
 800985e:	2304      	movs	r3, #4
 8009860:	77fb      	strb	r3, [r7, #31]
 8009862:	e007      	b.n	8009874 <UART_SetConfig+0x348>
 8009864:	2308      	movs	r3, #8
 8009866:	77fb      	strb	r3, [r7, #31]
 8009868:	e004      	b.n	8009874 <UART_SetConfig+0x348>
 800986a:	2310      	movs	r3, #16
 800986c:	77fb      	strb	r3, [r7, #31]
 800986e:	e001      	b.n	8009874 <UART_SetConfig+0x348>
 8009870:	2310      	movs	r3, #16
 8009872:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	69db      	ldr	r3, [r3, #28]
 8009878:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800987c:	d15b      	bne.n	8009936 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800987e:	7ffb      	ldrb	r3, [r7, #31]
 8009880:	2b08      	cmp	r3, #8
 8009882:	d828      	bhi.n	80098d6 <UART_SetConfig+0x3aa>
 8009884:	a201      	add	r2, pc, #4	; (adr r2, 800988c <UART_SetConfig+0x360>)
 8009886:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800988a:	bf00      	nop
 800988c:	080098b1 	.word	0x080098b1
 8009890:	080098b9 	.word	0x080098b9
 8009894:	080098c1 	.word	0x080098c1
 8009898:	080098d7 	.word	0x080098d7
 800989c:	080098c7 	.word	0x080098c7
 80098a0:	080098d7 	.word	0x080098d7
 80098a4:	080098d7 	.word	0x080098d7
 80098a8:	080098d7 	.word	0x080098d7
 80098ac:	080098cf 	.word	0x080098cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80098b0:	f7fd fb7a 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
 80098b4:	61b8      	str	r0, [r7, #24]
        break;
 80098b6:	e013      	b.n	80098e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80098b8:	f7fd fb8a 	bl	8006fd0 <HAL_RCC_GetPCLK2Freq>
 80098bc:	61b8      	str	r0, [r7, #24]
        break;
 80098be:	e00f      	b.n	80098e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80098c0:	4b4b      	ldr	r3, [pc, #300]	; (80099f0 <UART_SetConfig+0x4c4>)
 80098c2:	61bb      	str	r3, [r7, #24]
        break;
 80098c4:	e00c      	b.n	80098e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80098c6:	f7fd fa5f 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 80098ca:	61b8      	str	r0, [r7, #24]
        break;
 80098cc:	e008      	b.n	80098e0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80098ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80098d2:	61bb      	str	r3, [r7, #24]
        break;
 80098d4:	e004      	b.n	80098e0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80098d6:	2300      	movs	r3, #0
 80098d8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	77bb      	strb	r3, [r7, #30]
        break;
 80098de:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d074      	beq.n	80099d0 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80098e6:	69bb      	ldr	r3, [r7, #24]
 80098e8:	005a      	lsls	r2, r3, #1
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	085b      	lsrs	r3, r3, #1
 80098f0:	441a      	add	r2, r3
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	685b      	ldr	r3, [r3, #4]
 80098f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80098fa:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2b0f      	cmp	r3, #15
 8009900:	d916      	bls.n	8009930 <UART_SetConfig+0x404>
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009908:	d212      	bcs.n	8009930 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	b29b      	uxth	r3, r3
 800990e:	f023 030f 	bic.w	r3, r3, #15
 8009912:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8009914:	693b      	ldr	r3, [r7, #16]
 8009916:	085b      	lsrs	r3, r3, #1
 8009918:	b29b      	uxth	r3, r3
 800991a:	f003 0307 	and.w	r3, r3, #7
 800991e:	b29a      	uxth	r2, r3
 8009920:	89fb      	ldrh	r3, [r7, #14]
 8009922:	4313      	orrs	r3, r2
 8009924:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	89fa      	ldrh	r2, [r7, #14]
 800992c:	60da      	str	r2, [r3, #12]
 800992e:	e04f      	b.n	80099d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8009930:	2301      	movs	r3, #1
 8009932:	77bb      	strb	r3, [r7, #30]
 8009934:	e04c      	b.n	80099d0 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8009936:	7ffb      	ldrb	r3, [r7, #31]
 8009938:	2b08      	cmp	r3, #8
 800993a:	d828      	bhi.n	800998e <UART_SetConfig+0x462>
 800993c:	a201      	add	r2, pc, #4	; (adr r2, 8009944 <UART_SetConfig+0x418>)
 800993e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009942:	bf00      	nop
 8009944:	08009969 	.word	0x08009969
 8009948:	08009971 	.word	0x08009971
 800994c:	08009979 	.word	0x08009979
 8009950:	0800998f 	.word	0x0800998f
 8009954:	0800997f 	.word	0x0800997f
 8009958:	0800998f 	.word	0x0800998f
 800995c:	0800998f 	.word	0x0800998f
 8009960:	0800998f 	.word	0x0800998f
 8009964:	08009987 	.word	0x08009987
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009968:	f7fd fb1e 	bl	8006fa8 <HAL_RCC_GetPCLK1Freq>
 800996c:	61b8      	str	r0, [r7, #24]
        break;
 800996e:	e013      	b.n	8009998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009970:	f7fd fb2e 	bl	8006fd0 <HAL_RCC_GetPCLK2Freq>
 8009974:	61b8      	str	r0, [r7, #24]
        break;
 8009976:	e00f      	b.n	8009998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009978:	4b1d      	ldr	r3, [pc, #116]	; (80099f0 <UART_SetConfig+0x4c4>)
 800997a:	61bb      	str	r3, [r7, #24]
        break;
 800997c:	e00c      	b.n	8009998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800997e:	f7fd fa03 	bl	8006d88 <HAL_RCC_GetSysClockFreq>
 8009982:	61b8      	str	r0, [r7, #24]
        break;
 8009984:	e008      	b.n	8009998 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009986:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800998a:	61bb      	str	r3, [r7, #24]
        break;
 800998c:	e004      	b.n	8009998 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800998e:	2300      	movs	r3, #0
 8009990:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	77bb      	strb	r3, [r7, #30]
        break;
 8009996:	bf00      	nop
    }

    if (pclk != 0U)
 8009998:	69bb      	ldr	r3, [r7, #24]
 800999a:	2b00      	cmp	r3, #0
 800999c:	d018      	beq.n	80099d0 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	085a      	lsrs	r2, r3, #1
 80099a4:	69bb      	ldr	r3, [r7, #24]
 80099a6:	441a      	add	r2, r3
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	685b      	ldr	r3, [r3, #4]
 80099ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80099b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	2b0f      	cmp	r3, #15
 80099b6:	d909      	bls.n	80099cc <UART_SetConfig+0x4a0>
 80099b8:	693b      	ldr	r3, [r7, #16]
 80099ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099be:	d205      	bcs.n	80099cc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80099c0:	693b      	ldr	r3, [r7, #16]
 80099c2:	b29a      	uxth	r2, r3
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	60da      	str	r2, [r3, #12]
 80099ca:	e001      	b.n	80099d0 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80099cc:	2301      	movs	r3, #1
 80099ce:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	2200      	movs	r2, #0
 80099da:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80099dc:	7fbb      	ldrb	r3, [r7, #30]
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3720      	adds	r7, #32
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}
 80099e6:	bf00      	nop
 80099e8:	40007c00 	.word	0x40007c00
 80099ec:	40023800 	.word	0x40023800
 80099f0:	00f42400 	.word	0x00f42400

080099f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a00:	f003 0301 	and.w	r3, r3, #1
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d00a      	beq.n	8009a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	685b      	ldr	r3, [r3, #4]
 8009a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	430a      	orrs	r2, r1
 8009a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a22:	f003 0302 	and.w	r3, r3, #2
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d00a      	beq.n	8009a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	685b      	ldr	r3, [r3, #4]
 8009a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a38:	687b      	ldr	r3, [r7, #4]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	430a      	orrs	r2, r1
 8009a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a44:	f003 0304 	and.w	r3, r3, #4
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d00a      	beq.n	8009a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	685b      	ldr	r3, [r3, #4]
 8009a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	430a      	orrs	r2, r1
 8009a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a66:	f003 0308 	and.w	r3, r3, #8
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d00a      	beq.n	8009a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	685b      	ldr	r3, [r3, #4]
 8009a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a88:	f003 0310 	and.w	r3, r3, #16
 8009a8c:	2b00      	cmp	r3, #0
 8009a8e:	d00a      	beq.n	8009aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	681b      	ldr	r3, [r3, #0]
 8009a94:	689b      	ldr	r3, [r3, #8]
 8009a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	430a      	orrs	r2, r1
 8009aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	f003 0320 	and.w	r3, r3, #32
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d00a      	beq.n	8009ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	689b      	ldr	r3, [r3, #8]
 8009ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	430a      	orrs	r2, r1
 8009ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ad0:	2b00      	cmp	r3, #0
 8009ad2:	d01a      	beq.n	8009b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	685b      	ldr	r3, [r3, #4]
 8009ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	430a      	orrs	r2, r1
 8009ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009af2:	d10a      	bne.n	8009b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	685b      	ldr	r3, [r3, #4]
 8009afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	430a      	orrs	r2, r1
 8009b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d00a      	beq.n	8009b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	685b      	ldr	r3, [r3, #4]
 8009b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	430a      	orrs	r2, r1
 8009b2a:	605a      	str	r2, [r3, #4]
  }
}
 8009b2c:	bf00      	nop
 8009b2e:	370c      	adds	r7, #12
 8009b30:	46bd      	mov	sp, r7
 8009b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b36:	4770      	bx	lr

08009b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af02      	add	r7, sp, #8
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009b48:	f7f8 fa66 	bl	8002018 <HAL_GetTick>
 8009b4c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	f003 0308 	and.w	r3, r3, #8
 8009b58:	2b08      	cmp	r3, #8
 8009b5a:	d10e      	bne.n	8009b7a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009b5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009b60:	9300      	str	r3, [sp, #0]
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	2200      	movs	r2, #0
 8009b66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009b6a:	6878      	ldr	r0, [r7, #4]
 8009b6c:	f000 f81b 	bl	8009ba6 <UART_WaitOnFlagUntilTimeout>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009b76:	2303      	movs	r3, #3
 8009b78:	e011      	b.n	8009b9e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2220      	movs	r2, #32
 8009b7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2220      	movs	r2, #32
 8009b84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2200      	movs	r2, #0
 8009b92:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2200      	movs	r2, #0
 8009b98:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8009b9c:	2300      	movs	r3, #0
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3710      	adds	r7, #16
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}

08009ba6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009ba6:	b580      	push	{r7, lr}
 8009ba8:	b09c      	sub	sp, #112	; 0x70
 8009baa:	af00      	add	r7, sp, #0
 8009bac:	60f8      	str	r0, [r7, #12]
 8009bae:	60b9      	str	r1, [r7, #8]
 8009bb0:	603b      	str	r3, [r7, #0]
 8009bb2:	4613      	mov	r3, r2
 8009bb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009bb6:	e0a7      	b.n	8009d08 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009bbe:	f000 80a3 	beq.w	8009d08 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009bc2:	f7f8 fa29 	bl	8002018 <HAL_GetTick>
 8009bc6:	4602      	mov	r2, r0
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	1ad3      	subs	r3, r2, r3
 8009bcc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009bce:	429a      	cmp	r2, r3
 8009bd0:	d302      	bcc.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009bd2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d13f      	bne.n	8009c58 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009bde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009be0:	e853 3f00 	ldrex	r3, [r3]
 8009be4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009be6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009be8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009bec:	667b      	str	r3, [r7, #100]	; 0x64
 8009bee:	68fb      	ldr	r3, [r7, #12]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009bfa:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009bfc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009bfe:	e841 2300 	strex	r3, r2, [r1]
 8009c02:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d1e6      	bne.n	8009bd8 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	3308      	adds	r3, #8
 8009c10:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009c14:	e853 3f00 	ldrex	r3, [r3]
 8009c18:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009c1c:	f023 0301 	bic.w	r3, r3, #1
 8009c20:	663b      	str	r3, [r7, #96]	; 0x60
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	3308      	adds	r3, #8
 8009c28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009c2a:	64ba      	str	r2, [r7, #72]	; 0x48
 8009c2c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009c2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009c30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009c32:	e841 2300 	strex	r3, r2, [r1]
 8009c36:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009c38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d1e5      	bne.n	8009c0a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2220      	movs	r2, #32
 8009c42:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	2220      	movs	r2, #32
 8009c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	2200      	movs	r2, #0
 8009c50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8009c54:	2303      	movs	r3, #3
 8009c56:	e068      	b.n	8009d2a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	f003 0304 	and.w	r3, r3, #4
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d050      	beq.n	8009d08 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009c70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009c74:	d148      	bne.n	8009d08 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c7e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c88:	e853 3f00 	ldrex	r3, [r3]
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009c90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009c94:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	461a      	mov	r2, r3
 8009c9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c9e:	637b      	str	r3, [r7, #52]	; 0x34
 8009ca0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ca2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009ca6:	e841 2300 	strex	r3, r2, [r1]
 8009caa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009cac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d1e6      	bne.n	8009c80 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	3308      	adds	r3, #8
 8009cb8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cba:	697b      	ldr	r3, [r7, #20]
 8009cbc:	e853 3f00 	ldrex	r3, [r3]
 8009cc0:	613b      	str	r3, [r7, #16]
   return(result);
 8009cc2:	693b      	ldr	r3, [r7, #16]
 8009cc4:	f023 0301 	bic.w	r3, r3, #1
 8009cc8:	66bb      	str	r3, [r7, #104]	; 0x68
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	3308      	adds	r3, #8
 8009cd0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009cd2:	623a      	str	r2, [r7, #32]
 8009cd4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cd6:	69f9      	ldr	r1, [r7, #28]
 8009cd8:	6a3a      	ldr	r2, [r7, #32]
 8009cda:	e841 2300 	strex	r3, r2, [r1]
 8009cde:	61bb      	str	r3, [r7, #24]
   return(result);
 8009ce0:	69bb      	ldr	r3, [r7, #24]
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	d1e5      	bne.n	8009cb2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2220      	movs	r2, #32
 8009cea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	2220      	movs	r2, #32
 8009cf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	2220      	movs	r2, #32
 8009cf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	2200      	movs	r2, #0
 8009d00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8009d04:	2303      	movs	r3, #3
 8009d06:	e010      	b.n	8009d2a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	69da      	ldr	r2, [r3, #28]
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	4013      	ands	r3, r2
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	bf0c      	ite	eq
 8009d18:	2301      	moveq	r3, #1
 8009d1a:	2300      	movne	r3, #0
 8009d1c:	b2db      	uxtb	r3, r3
 8009d1e:	461a      	mov	r2, r3
 8009d20:	79fb      	ldrb	r3, [r7, #7]
 8009d22:	429a      	cmp	r2, r3
 8009d24:	f43f af48 	beq.w	8009bb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009d28:	2300      	movs	r3, #0
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3770      	adds	r7, #112	; 0x70
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
	...

08009d34 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8009d34:	b480      	push	{r7}
 8009d36:	b087      	sub	sp, #28
 8009d38:	af00      	add	r7, sp, #0
 8009d3a:	6078      	str	r0, [r7, #4]
 8009d3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8009d3e:	683b      	ldr	r3, [r7, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d48:	683a      	ldr	r2, [r7, #0]
 8009d4a:	6812      	ldr	r2, [r2, #0]
 8009d4c:	f023 0101 	bic.w	r1, r3, #1
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8009d56:	683b      	ldr	r3, [r7, #0]
 8009d58:	689b      	ldr	r3, [r3, #8]
 8009d5a:	2b08      	cmp	r3, #8
 8009d5c:	d102      	bne.n	8009d64 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8009d5e:	2340      	movs	r3, #64	; 0x40
 8009d60:	617b      	str	r3, [r7, #20]
 8009d62:	e001      	b.n	8009d68 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8009d64:	2300      	movs	r3, #0
 8009d66:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8009d68:	683b      	ldr	r3, [r7, #0]
 8009d6a:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8009d6c:	697b      	ldr	r3, [r7, #20]
 8009d6e:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8009d74:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8009d76:	683b      	ldr	r3, [r7, #0]
 8009d78:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8009d7a:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8009d7c:	683b      	ldr	r3, [r7, #0]
 8009d7e:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8009d80:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8009d86:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8009d8c:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8009d92:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8009d94:	683b      	ldr	r3, [r7, #0]
 8009d96:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8009d98:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8009d9e:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8009da0:	683b      	ldr	r3, [r7, #0]
 8009da2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8009da4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8009daa:	4313      	orrs	r3, r2
 8009dac:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8009dae:	683b      	ldr	r3, [r7, #0]
 8009db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	4313      	orrs	r3, r2
 8009db6:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8009db8:	683b      	ldr	r3, [r7, #0]
 8009dba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	4313      	orrs	r3, r2
 8009dc0:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8009dc2:	683b      	ldr	r3, [r7, #0]
 8009dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009dc6:	693a      	ldr	r2, [r7, #16]
 8009dc8:	4313      	orrs	r3, r2
 8009dca:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8009dcc:	4b20      	ldr	r3, [pc, #128]	; (8009e50 <FMC_NORSRAM_Init+0x11c>)
 8009dce:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009dd6:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009dde:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8009de0:	68fb      	ldr	r3, [r7, #12]
 8009de2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8009de6:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8009de8:	683b      	ldr	r3, [r7, #0]
 8009dea:	681a      	ldr	r2, [r3, #0]
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	43db      	mvns	r3, r3
 8009df6:	ea02 0103 	and.w	r1, r2, r3
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	681a      	ldr	r2, [r3, #0]
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	4319      	orrs	r1, r3
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009e10:	d10c      	bne.n	8009e2c <FMC_NORSRAM_Init+0xf8>
 8009e12:	683b      	ldr	r3, [r7, #0]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d008      	beq.n	8009e2c <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e22:	683b      	ldr	r3, [r7, #0]
 8009e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d006      	beq.n	8009e42 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	683b      	ldr	r3, [r7, #0]
 8009e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009e3c:	431a      	orrs	r2, r3
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	371c      	adds	r7, #28
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr
 8009e50:	0008fb7f 	.word	0x0008fb7f

08009e54 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	60f8      	str	r0, [r7, #12]
 8009e5c:	60b9      	str	r1, [r7, #8]
 8009e5e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	1c5a      	adds	r2, r3, #1
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009e6a:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	685b      	ldr	r3, [r3, #4]
 8009e76:	011b      	lsls	r3, r3, #4
 8009e78:	431a      	orrs	r2, r3
 8009e7a:	68bb      	ldr	r3, [r7, #8]
 8009e7c:	689b      	ldr	r3, [r3, #8]
 8009e7e:	021b      	lsls	r3, r3, #8
 8009e80:	431a      	orrs	r2, r3
 8009e82:	68bb      	ldr	r3, [r7, #8]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	041b      	lsls	r3, r3, #16
 8009e88:	431a      	orrs	r2, r3
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	3b01      	subs	r3, #1
 8009e90:	051b      	lsls	r3, r3, #20
 8009e92:	431a      	orrs	r2, r3
 8009e94:	68bb      	ldr	r3, [r7, #8]
 8009e96:	695b      	ldr	r3, [r3, #20]
 8009e98:	3b02      	subs	r3, #2
 8009e9a:	061b      	lsls	r3, r3, #24
 8009e9c:	431a      	orrs	r2, r3
 8009e9e:	68bb      	ldr	r3, [r7, #8]
 8009ea0:	699b      	ldr	r3, [r3, #24]
 8009ea2:	4313      	orrs	r3, r2
 8009ea4:	687a      	ldr	r2, [r7, #4]
 8009ea6:	3201      	adds	r2, #1
 8009ea8:	4319      	orrs	r1, r3
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009eb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ebc:	d113      	bne.n	8009ee6 <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	685b      	ldr	r3, [r3, #4]
 8009ec2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8009ec6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8009ec8:	68bb      	ldr	r3, [r7, #8]
 8009eca:	691b      	ldr	r3, [r3, #16]
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	051b      	lsls	r3, r3, #20
 8009ed0:	697a      	ldr	r2, [r7, #20]
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	431a      	orrs	r2, r3
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	371c      	adds	r7, #28
 8009eec:	46bd      	mov	sp, r7
 8009eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef2:	4770      	bx	lr

08009ef4 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8009ef4:	b480      	push	{r7}
 8009ef6:	b085      	sub	sp, #20
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	60f8      	str	r0, [r7, #12]
 8009efc:	60b9      	str	r1, [r7, #8]
 8009efe:	607a      	str	r2, [r7, #4]
 8009f00:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8009f02:	683b      	ldr	r3, [r7, #0]
 8009f04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009f08:	d11d      	bne.n	8009f46 <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009f12:	4b13      	ldr	r3, [pc, #76]	; (8009f60 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8009f14:	4013      	ands	r3, r2
 8009f16:	68ba      	ldr	r2, [r7, #8]
 8009f18:	6811      	ldr	r1, [r2, #0]
 8009f1a:	68ba      	ldr	r2, [r7, #8]
 8009f1c:	6852      	ldr	r2, [r2, #4]
 8009f1e:	0112      	lsls	r2, r2, #4
 8009f20:	4311      	orrs	r1, r2
 8009f22:	68ba      	ldr	r2, [r7, #8]
 8009f24:	6892      	ldr	r2, [r2, #8]
 8009f26:	0212      	lsls	r2, r2, #8
 8009f28:	4311      	orrs	r1, r2
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	6992      	ldr	r2, [r2, #24]
 8009f2e:	4311      	orrs	r1, r2
 8009f30:	68ba      	ldr	r2, [r7, #8]
 8009f32:	68d2      	ldr	r2, [r2, #12]
 8009f34:	0412      	lsls	r2, r2, #16
 8009f36:	430a      	orrs	r2, r1
 8009f38:	ea43 0102 	orr.w	r1, r3, r2
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	687a      	ldr	r2, [r7, #4]
 8009f40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8009f44:	e005      	b.n	8009f52 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8009f4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8009f52:	2300      	movs	r3, #0
}
 8009f54:	4618      	mov	r0, r3
 8009f56:	3714      	adds	r7, #20
 8009f58:	46bd      	mov	sp, r7
 8009f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5e:	4770      	bx	lr
 8009f60:	cff00000 	.word	0xcff00000

08009f64 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 8009f64:	b084      	sub	sp, #16
 8009f66:	b480      	push	{r7}
 8009f68:	b085      	sub	sp, #20
 8009f6a:	af00      	add	r7, sp, #0
 8009f6c:	6078      	str	r0, [r7, #4]
 8009f6e:	f107 001c 	add.w	r0, r7, #28
 8009f72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8009f76:	2300      	movs	r3, #0
 8009f78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8009f7a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8009f7c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8009f7e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8009f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8009f82:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8009f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8009f86:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8009f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8009f8a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8009f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8009f8e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8009f90:	68fa      	ldr	r2, [r7, #12]
 8009f92:	4313      	orrs	r3, r2
 8009f94:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	685a      	ldr	r2, [r3, #4]
 8009f9a:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <SDMMC_Init+0x54>)
 8009f9c:	4013      	ands	r3, r2
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	431a      	orrs	r2, r3
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8009fa6:	2300      	movs	r3, #0
}
 8009fa8:	4618      	mov	r0, r3
 8009faa:	3714      	adds	r7, #20
 8009fac:	46bd      	mov	sp, r7
 8009fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fb2:	b004      	add	sp, #16
 8009fb4:	4770      	bx	lr
 8009fb6:	bf00      	nop
 8009fb8:	ffff8100 	.word	0xffff8100

08009fbc <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8009fca:	4618      	mov	r0, r3
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr

08009fd6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 8009fd6:	b480      	push	{r7}
 8009fd8:	b083      	sub	sp, #12
 8009fda:	af00      	add	r7, sp, #0
 8009fdc:	6078      	str	r0, [r7, #4]
 8009fde:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8009fe0:	683b      	ldr	r3, [r7, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009fea:	2300      	movs	r3, #0
}
 8009fec:	4618      	mov	r0, r3
 8009fee:	370c      	adds	r7, #12
 8009ff0:	46bd      	mov	sp, r7
 8009ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ff6:	4770      	bx	lr

08009ff8 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8009ff8:	b480      	push	{r7}
 8009ffa:	b083      	sub	sp, #12
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	2203      	movs	r2, #3
 800a004:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800a006:	2300      	movs	r3, #0
}
 800a008:	4618      	mov	r0, r3
 800a00a:	370c      	adds	r7, #12
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 800a014:	b480      	push	{r7}
 800a016:	b083      	sub	sp, #12
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	f003 0303 	and.w	r3, r3, #3
}
 800a024:	4618      	mov	r0, r3
 800a026:	370c      	adds	r7, #12
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a03a:	2300      	movs	r3, #0
 800a03c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	681a      	ldr	r2, [r3, #0]
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a04e:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 800a054:	431a      	orrs	r2, r3
                       Command->CPSM);
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 800a05a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 800a05c:	68fa      	ldr	r2, [r7, #12]
 800a05e:	4313      	orrs	r3, r2
 800a060:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	68da      	ldr	r2, [r3, #12]
 800a066:	4b06      	ldr	r3, [pc, #24]	; (800a080 <SDMMC_SendCommand+0x50>)
 800a068:	4013      	ands	r3, r2
 800a06a:	68fa      	ldr	r2, [r7, #12]
 800a06c:	431a      	orrs	r2, r3
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800a072:	2300      	movs	r3, #0
}
 800a074:	4618      	mov	r0, r3
 800a076:	3714      	adds	r7, #20
 800a078:	46bd      	mov	sp, r7
 800a07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07e:	4770      	bx	lr
 800a080:	fffff000 	.word	0xfffff000

0800a084 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800a084:	b480      	push	{r7}
 800a086:	b083      	sub	sp, #12
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	691b      	ldr	r3, [r3, #16]
 800a090:	b2db      	uxtb	r3, r3
}
 800a092:	4618      	mov	r0, r3
 800a094:	370c      	adds	r7, #12
 800a096:	46bd      	mov	sp, r7
 800a098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a09c:	4770      	bx	lr

0800a09e <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 800a09e:	b480      	push	{r7}
 800a0a0:	b085      	sub	sp, #20
 800a0a2:	af00      	add	r7, sp, #0
 800a0a4:	6078      	str	r0, [r7, #4]
 800a0a6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	3314      	adds	r3, #20
 800a0ac:	461a      	mov	r2, r3
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	681b      	ldr	r3, [r3, #0]
}  
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3714      	adds	r7, #20
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c2:	4770      	bx	lr

0800a0c4 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b085      	sub	sp, #20
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 800a0ce:	2300      	movs	r3, #0
 800a0d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800a0d2:	683b      	ldr	r3, [r7, #0]
 800a0d4:	681a      	ldr	r2, [r3, #0]
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 800a0da:	683b      	ldr	r3, [r7, #0]
 800a0dc:	685a      	ldr	r2, [r3, #4]
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800a0e6:	683b      	ldr	r3, [r7, #0]
 800a0e8:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0ea:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 800a0ec:	683b      	ldr	r3, [r7, #0]
 800a0ee:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 800a0f0:	431a      	orrs	r2, r3
                       Data->DPSM);
 800a0f2:	683b      	ldr	r3, [r7, #0]
 800a0f4:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800a0f6:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800a0f8:	68fa      	ldr	r2, [r7, #12]
 800a0fa:	4313      	orrs	r3, r2
 800a0fc:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a102:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	431a      	orrs	r2, r3
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 800a10e:	2300      	movs	r3, #0

}
 800a110:	4618      	mov	r0, r3
 800a112:	3714      	adds	r7, #20
 800a114:	46bd      	mov	sp, r7
 800a116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a11a:	4770      	bx	lr

0800a11c <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 800a11c:	b580      	push	{r7, lr}
 800a11e:	b088      	sub	sp, #32
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 800a12a:	2310      	movs	r3, #16
 800a12c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a12e:	2340      	movs	r3, #64	; 0x40
 800a130:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a132:	2300      	movs	r3, #0
 800a134:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a136:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a13a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a13c:	f107 0308 	add.w	r3, r7, #8
 800a140:	4619      	mov	r1, r3
 800a142:	6878      	ldr	r0, [r7, #4]
 800a144:	f7ff ff74 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 800a148:	f241 3288 	movw	r2, #5000	; 0x1388
 800a14c:	2110      	movs	r1, #16
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f000 f9d6 	bl	800a500 <SDMMC_GetCmdResp1>
 800a154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a156:	69fb      	ldr	r3, [r7, #28]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3720      	adds	r7, #32
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b088      	sub	sp, #32
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 800a16e:	2311      	movs	r3, #17
 800a170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a172:	2340      	movs	r3, #64	; 0x40
 800a174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a176:	2300      	movs	r3, #0
 800a178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a17a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a17e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a180:	f107 0308 	add.w	r3, r7, #8
 800a184:	4619      	mov	r1, r3
 800a186:	6878      	ldr	r0, [r7, #4]
 800a188:	f7ff ff52 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a18c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a190:	2111      	movs	r1, #17
 800a192:	6878      	ldr	r0, [r7, #4]
 800a194:	f000 f9b4 	bl	800a500 <SDMMC_GetCmdResp1>
 800a198:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a19a:	69fb      	ldr	r3, [r7, #28]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	3720      	adds	r7, #32
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
 800a1ac:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 800a1ae:	683b      	ldr	r3, [r7, #0]
 800a1b0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800a1b2:	2312      	movs	r3, #18
 800a1b4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1b6:	2340      	movs	r3, #64	; 0x40
 800a1b8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1ba:	2300      	movs	r3, #0
 800a1bc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a1be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a1c2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a1c4:	f107 0308 	add.w	r3, r7, #8
 800a1c8:	4619      	mov	r1, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	f7ff ff30 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a1d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a1d4:	2112      	movs	r1, #18
 800a1d6:	6878      	ldr	r0, [r7, #4]
 800a1d8:	f000 f992 	bl	800a500 <SDMMC_GetCmdResp1>
 800a1dc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a1de:	69fb      	ldr	r3, [r7, #28]
}
 800a1e0:	4618      	mov	r0, r3
 800a1e2:	3720      	adds	r7, #32
 800a1e4:	46bd      	mov	sp, r7
 800a1e6:	bd80      	pop	{r7, pc}

0800a1e8 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a1e8:	b580      	push	{r7, lr}
 800a1ea:	b088      	sub	sp, #32
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	6078      	str	r0, [r7, #4]
 800a1f0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a1f2:	683b      	ldr	r3, [r7, #0]
 800a1f4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800a1f6:	2318      	movs	r3, #24
 800a1f8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a1fa:	2340      	movs	r3, #64	; 0x40
 800a1fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a1fe:	2300      	movs	r3, #0
 800a200:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a202:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a206:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a208:	f107 0308 	add.w	r3, r7, #8
 800a20c:	4619      	mov	r1, r3
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f7ff ff0e 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 800a214:	f241 3288 	movw	r2, #5000	; 0x1388
 800a218:	2118      	movs	r1, #24
 800a21a:	6878      	ldr	r0, [r7, #4]
 800a21c:	f000 f970 	bl	800a500 <SDMMC_GetCmdResp1>
 800a220:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a222:	69fb      	ldr	r3, [r7, #28]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3720      	adds	r7, #32
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b088      	sub	sp, #32
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
 800a234:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 800a23a:	2319      	movs	r3, #25
 800a23c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a23e:	2340      	movs	r3, #64	; 0x40
 800a240:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a242:	2300      	movs	r3, #0
 800a244:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a246:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a24a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a24c:	f107 0308 	add.w	r3, r7, #8
 800a250:	4619      	mov	r1, r3
 800a252:	6878      	ldr	r0, [r7, #4]
 800a254:	f7ff feec 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 800a258:	f241 3288 	movw	r2, #5000	; 0x1388
 800a25c:	2119      	movs	r1, #25
 800a25e:	6878      	ldr	r0, [r7, #4]
 800a260:	f000 f94e 	bl	800a500 <SDMMC_GetCmdResp1>
 800a264:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a266:	69fb      	ldr	r3, [r7, #28]
}
 800a268:	4618      	mov	r0, r3
 800a26a:	3720      	adds	r7, #32
 800a26c:	46bd      	mov	sp, r7
 800a26e:	bd80      	pop	{r7, pc}

0800a270 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 800a270:	b580      	push	{r7, lr}
 800a272:	b088      	sub	sp, #32
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 800a278:	2300      	movs	r3, #0
 800a27a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 800a27c:	230c      	movs	r3, #12
 800a27e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a280:	2340      	movs	r3, #64	; 0x40
 800a282:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a284:	2300      	movs	r3, #0
 800a286:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a288:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a28c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a28e:	f107 0308 	add.w	r3, r7, #8
 800a292:	4619      	mov	r1, r3
 800a294:	6878      	ldr	r0, [r7, #4]
 800a296:	f7ff fecb 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 800a29a:	4a05      	ldr	r2, [pc, #20]	; (800a2b0 <SDMMC_CmdStopTransfer+0x40>)
 800a29c:	210c      	movs	r1, #12
 800a29e:	6878      	ldr	r0, [r7, #4]
 800a2a0:	f000 f92e 	bl	800a500 <SDMMC_GetCmdResp1>
 800a2a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a2a6:	69fb      	ldr	r3, [r7, #28]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3720      	adds	r7, #32
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	05f5e100 	.word	0x05f5e100

0800a2b4 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b08a      	sub	sp, #40	; 0x28
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800a2c4:	2307      	movs	r3, #7
 800a2c6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a2c8:	2340      	movs	r3, #64	; 0x40
 800a2ca:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a2d0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a2d4:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a2d6:	f107 0310 	add.w	r3, r7, #16
 800a2da:	4619      	mov	r1, r3
 800a2dc:	68f8      	ldr	r0, [r7, #12]
 800a2de:	f7ff fea7 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 800a2e2:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e6:	2107      	movs	r1, #7
 800a2e8:	68f8      	ldr	r0, [r7, #12]
 800a2ea:	f000 f909 	bl	800a500 <SDMMC_GetCmdResp1>
 800a2ee:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 800a2f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a2f2:	4618      	mov	r0, r3
 800a2f4:	3728      	adds	r7, #40	; 0x28
 800a2f6:	46bd      	mov	sp, r7
 800a2f8:	bd80      	pop	{r7, pc}

0800a2fa <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 800a2fa:	b580      	push	{r7, lr}
 800a2fc:	b088      	sub	sp, #32
 800a2fe:	af00      	add	r7, sp, #0
 800a300:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 800a302:	2300      	movs	r3, #0
 800a304:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 800a306:	2300      	movs	r3, #0
 800a308:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 800a30a:	2300      	movs	r3, #0
 800a30c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a30e:	2300      	movs	r3, #0
 800a310:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a312:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a316:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a318:	f107 0308 	add.w	r3, r7, #8
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f7ff fe86 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	f000 fb23 	bl	800a970 <SDMMC_GetCmdError>
 800a32a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a32c:	69fb      	ldr	r3, [r7, #28]
}
 800a32e:	4618      	mov	r0, r3
 800a330:	3720      	adds	r7, #32
 800a332:	46bd      	mov	sp, r7
 800a334:	bd80      	pop	{r7, pc}

0800a336 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 800a336:	b580      	push	{r7, lr}
 800a338:	b088      	sub	sp, #32
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 800a33e:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 800a342:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 800a344:	2308      	movs	r3, #8
 800a346:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a348:	2340      	movs	r3, #64	; 0x40
 800a34a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a34c:	2300      	movs	r3, #0
 800a34e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a350:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a354:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a356:	f107 0308 	add.w	r3, r7, #8
 800a35a:	4619      	mov	r1, r3
 800a35c:	6878      	ldr	r0, [r7, #4]
 800a35e:	f7ff fe67 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f000 fab6 	bl	800a8d4 <SDMMC_GetCmdResp7>
 800a368:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a36a:	69fb      	ldr	r3, [r7, #28]
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3720      	adds	r7, #32
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}

0800a374 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b088      	sub	sp, #32
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 800a382:	2337      	movs	r3, #55	; 0x37
 800a384:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a386:	2340      	movs	r3, #64	; 0x40
 800a388:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a38a:	2300      	movs	r3, #0
 800a38c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a38e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a392:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a394:	f107 0308 	add.w	r3, r7, #8
 800a398:	4619      	mov	r1, r3
 800a39a:	6878      	ldr	r0, [r7, #4]
 800a39c:	f7ff fe48 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 800a3a0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a3a4:	2137      	movs	r1, #55	; 0x37
 800a3a6:	6878      	ldr	r0, [r7, #4]
 800a3a8:	f000 f8aa 	bl	800a500 <SDMMC_GetCmdResp1>
 800a3ac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3ae:	69fb      	ldr	r3, [r7, #28]
}
 800a3b0:	4618      	mov	r0, r3
 800a3b2:	3720      	adds	r7, #32
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	bd80      	pop	{r7, pc}

0800a3b8 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a3b8:	b580      	push	{r7, lr}
 800a3ba:	b088      	sub	sp, #32
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 800a3c2:	683a      	ldr	r2, [r7, #0]
 800a3c4:	4b0d      	ldr	r3, [pc, #52]	; (800a3fc <SDMMC_CmdAppOperCommand+0x44>)
 800a3c6:	4313      	orrs	r3, r2
 800a3c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800a3ca:	2329      	movs	r3, #41	; 0x29
 800a3cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a3ce:	2340      	movs	r3, #64	; 0x40
 800a3d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a3d2:	2300      	movs	r3, #0
 800a3d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a3d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a3da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a3dc:	f107 0308 	add.w	r3, r7, #8
 800a3e0:	4619      	mov	r1, r3
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f7ff fe24 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 800a3e8:	6878      	ldr	r0, [r7, #4]
 800a3ea:	f000 f9bf 	bl	800a76c <SDMMC_GetCmdResp3>
 800a3ee:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a3f0:	69fb      	ldr	r3, [r7, #28]
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3720      	adds	r7, #32
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	80100000 	.word	0x80100000

0800a400 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 800a400:	b580      	push	{r7, lr}
 800a402:	b088      	sub	sp, #32
 800a404:	af00      	add	r7, sp, #0
 800a406:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 800a40c:	2302      	movs	r3, #2
 800a40e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a410:	23c0      	movs	r3, #192	; 0xc0
 800a412:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a414:	2300      	movs	r3, #0
 800a416:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a418:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a41c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a41e:	f107 0308 	add.w	r3, r7, #8
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f7ff fe03 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f956 	bl	800a6dc <SDMMC_GetCmdResp2>
 800a430:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a432:	69fb      	ldr	r3, [r7, #28]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3720      	adds	r7, #32
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b088      	sub	sp, #32
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
 800a444:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800a446:	683b      	ldr	r3, [r7, #0]
 800a448:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800a44a:	2309      	movs	r3, #9
 800a44c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 800a44e:	23c0      	movs	r3, #192	; 0xc0
 800a450:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a452:	2300      	movs	r3, #0
 800a454:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a456:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a45a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a45c:	f107 0308 	add.w	r3, r7, #8
 800a460:	4619      	mov	r1, r3
 800a462:	6878      	ldr	r0, [r7, #4]
 800a464:	f7ff fde4 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 800a468:	6878      	ldr	r0, [r7, #4]
 800a46a:	f000 f937 	bl	800a6dc <SDMMC_GetCmdResp2>
 800a46e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a470:	69fb      	ldr	r3, [r7, #28]
}
 800a472:	4618      	mov	r0, r3
 800a474:	3720      	adds	r7, #32
 800a476:	46bd      	mov	sp, r7
 800a478:	bd80      	pop	{r7, pc}

0800a47a <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 800a47a:	b580      	push	{r7, lr}
 800a47c:	b088      	sub	sp, #32
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
 800a482:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 800a484:	2300      	movs	r3, #0
 800a486:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 800a488:	2303      	movs	r3, #3
 800a48a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a48c:	2340      	movs	r3, #64	; 0x40
 800a48e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a490:	2300      	movs	r3, #0
 800a492:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a498:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a49a:	f107 0308 	add.w	r3, r7, #8
 800a49e:	4619      	mov	r1, r3
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	f7ff fdc5 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 800a4a6:	683a      	ldr	r2, [r7, #0]
 800a4a8:	2103      	movs	r1, #3
 800a4aa:	6878      	ldr	r0, [r7, #4]
 800a4ac:	f000 f99c 	bl	800a7e8 <SDMMC_GetCmdResp6>
 800a4b0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4b2:	69fb      	ldr	r3, [r7, #28]
}
 800a4b4:	4618      	mov	r0, r3
 800a4b6:	3720      	adds	r7, #32
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	bd80      	pop	{r7, pc}

0800a4bc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 800a4bc:	b580      	push	{r7, lr}
 800a4be:	b088      	sub	sp, #32
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	6078      	str	r0, [r7, #4]
 800a4c4:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 800a4c6:	683b      	ldr	r3, [r7, #0]
 800a4c8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 800a4ca:	230d      	movs	r3, #13
 800a4cc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 800a4ce:	2340      	movs	r3, #64	; 0x40
 800a4d0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 800a4d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a4da:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 800a4dc:	f107 0308 	add.w	r3, r7, #8
 800a4e0:	4619      	mov	r1, r3
 800a4e2:	6878      	ldr	r0, [r7, #4]
 800a4e4:	f7ff fda4 	bl	800a030 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 800a4e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ec:	210d      	movs	r1, #13
 800a4ee:	6878      	ldr	r0, [r7, #4]
 800a4f0:	f000 f806 	bl	800a500 <SDMMC_GetCmdResp1>
 800a4f4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800a4f6:	69fb      	ldr	r3, [r7, #28]
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3720      	adds	r7, #32
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}

0800a500 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 800a500:	b580      	push	{r7, lr}
 800a502:	b088      	sub	sp, #32
 800a504:	af00      	add	r7, sp, #0
 800a506:	60f8      	str	r0, [r7, #12]
 800a508:	460b      	mov	r3, r1
 800a50a:	607a      	str	r2, [r7, #4]
 800a50c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 800a50e:	4b70      	ldr	r3, [pc, #448]	; (800a6d0 <SDMMC_GetCmdResp1+0x1d0>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	4a70      	ldr	r2, [pc, #448]	; (800a6d4 <SDMMC_GetCmdResp1+0x1d4>)
 800a514:	fba2 2303 	umull	r2, r3, r2, r3
 800a518:	0a5a      	lsrs	r2, r3, #9
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	fb02 f303 	mul.w	r3, r2, r3
 800a520:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	1e5a      	subs	r2, r3, #1
 800a526:	61fa      	str	r2, [r7, #28]
 800a528:	2b00      	cmp	r3, #0
 800a52a:	d102      	bne.n	800a532 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a52c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a530:	e0c9      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a536:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a538:	69bb      	ldr	r3, [r7, #24]
 800a53a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d0ef      	beq.n	800a522 <SDMMC_GetCmdResp1+0x22>
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d1ea      	bne.n	800a522 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a550:	f003 0304 	and.w	r3, r3, #4
 800a554:	2b00      	cmp	r3, #0
 800a556:	d004      	beq.n	800a562 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	2204      	movs	r2, #4
 800a55c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a55e:	2304      	movs	r3, #4
 800a560:	e0b1      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a566:	f003 0301 	and.w	r3, r3, #1
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d004      	beq.n	800a578 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2201      	movs	r2, #1
 800a572:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a574:	2301      	movs	r3, #1
 800a576:	e0a6      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	22c5      	movs	r2, #197	; 0xc5
 800a57c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a57e:	68f8      	ldr	r0, [r7, #12]
 800a580:	f7ff fd80 	bl	800a084 <SDMMC_GetCommandResponse>
 800a584:	4603      	mov	r3, r0
 800a586:	461a      	mov	r2, r3
 800a588:	7afb      	ldrb	r3, [r7, #11]
 800a58a:	4293      	cmp	r3, r2
 800a58c:	d001      	beq.n	800a592 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a58e:	2301      	movs	r3, #1
 800a590:	e099      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a592:	2100      	movs	r1, #0
 800a594:	68f8      	ldr	r0, [r7, #12]
 800a596:	f7ff fd82 	bl	800a09e <SDMMC_GetResponse>
 800a59a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800a59c:	697a      	ldr	r2, [r7, #20]
 800a59e:	4b4e      	ldr	r3, [pc, #312]	; (800a6d8 <SDMMC_GetCmdResp1+0x1d8>)
 800a5a0:	4013      	ands	r3, r2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d101      	bne.n	800a5aa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 800a5a6:	2300      	movs	r3, #0
 800a5a8:	e08d      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800a5aa:	697b      	ldr	r3, [r7, #20]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	da02      	bge.n	800a5b6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 800a5b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800a5b4:	e087      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 800a5b6:	697b      	ldr	r3, [r7, #20]
 800a5b8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d001      	beq.n	800a5c4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 800a5c0:	2340      	movs	r3, #64	; 0x40
 800a5c2:	e080      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a5ca:	2b00      	cmp	r3, #0
 800a5cc:	d001      	beq.n	800a5d2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800a5ce:	2380      	movs	r3, #128	; 0x80
 800a5d0:	e079      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d002      	beq.n	800a5e2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800a5dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a5e0:	e071      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d002      	beq.n	800a5f2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800a5ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a5f0:	e069      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d002      	beq.n	800a602 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800a5fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a600:	e061      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d002      	beq.n	800a612 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800a60c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800a610:	e059      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 800a612:	697b      	ldr	r3, [r7, #20]
 800a614:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d002      	beq.n	800a622 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a61c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a620:	e051      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 800a622:	697b      	ldr	r3, [r7, #20]
 800a624:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d002      	beq.n	800a632 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a62c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a630:	e049      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 800a632:	697b      	ldr	r3, [r7, #20]
 800a634:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d002      	beq.n	800a642 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 800a63c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a640:	e041      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 800a642:	697b      	ldr	r3, [r7, #20]
 800a644:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d002      	beq.n	800a652 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 800a64c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a650:	e039      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d002      	beq.n	800a662 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 800a65c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800a660:	e031      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 800a662:	697b      	ldr	r3, [r7, #20]
 800a664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d002      	beq.n	800a672 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 800a66c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a670:	e029      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d002      	beq.n	800a682 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 800a67c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a680:	e021      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 800a682:	697b      	ldr	r3, [r7, #20]
 800a684:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d002      	beq.n	800a692 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 800a68c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800a690:	e019      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 800a692:	697b      	ldr	r3, [r7, #20]
 800a694:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d002      	beq.n	800a6a2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800a69c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6a0:	e011      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 800a6a2:	697b      	ldr	r3, [r7, #20]
 800a6a4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d002      	beq.n	800a6b2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800a6ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800a6b0:	e009      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 800a6b2:	697b      	ldr	r3, [r7, #20]
 800a6b4:	f003 0308 	and.w	r3, r3, #8
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d002      	beq.n	800a6c2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800a6bc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a6c0:	e001      	b.n	800a6c6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a6c2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	3720      	adds	r7, #32
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	bd80      	pop	{r7, pc}
 800a6ce:	bf00      	nop
 800a6d0:	20000000 	.word	0x20000000
 800a6d4:	10624dd3 	.word	0x10624dd3
 800a6d8:	fdffe008 	.word	0xfdffe008

0800a6dc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b085      	sub	sp, #20
 800a6e0:	af00      	add	r7, sp, #0
 800a6e2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a6e4:	4b1f      	ldr	r3, [pc, #124]	; (800a764 <SDMMC_GetCmdResp2+0x88>)
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a1f      	ldr	r2, [pc, #124]	; (800a768 <SDMMC_GetCmdResp2+0x8c>)
 800a6ea:	fba2 2303 	umull	r2, r3, r2, r3
 800a6ee:	0a5b      	lsrs	r3, r3, #9
 800a6f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a6f4:	fb02 f303 	mul.w	r3, r2, r3
 800a6f8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	1e5a      	subs	r2, r3, #1
 800a6fe:	60fa      	str	r2, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d102      	bne.n	800a70a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a704:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a708:	e026      	b.n	800a758 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a70e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a716:	2b00      	cmp	r3, #0
 800a718:	d0ef      	beq.n	800a6fa <SDMMC_GetCmdResp2+0x1e>
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a720:	2b00      	cmp	r3, #0
 800a722:	d1ea      	bne.n	800a6fa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a728:	f003 0304 	and.w	r3, r3, #4
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d004      	beq.n	800a73a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2204      	movs	r2, #4
 800a734:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a736:	2304      	movs	r3, #4
 800a738:	e00e      	b.n	800a758 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a73e:	f003 0301 	and.w	r3, r3, #1
 800a742:	2b00      	cmp	r3, #0
 800a744:	d004      	beq.n	800a750 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2201      	movs	r2, #1
 800a74a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a74c:	2301      	movs	r3, #1
 800a74e:	e003      	b.n	800a758 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	22c5      	movs	r2, #197	; 0xc5
 800a754:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 800a756:	2300      	movs	r3, #0
}
 800a758:	4618      	mov	r0, r3
 800a75a:	3714      	adds	r7, #20
 800a75c:	46bd      	mov	sp, r7
 800a75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a762:	4770      	bx	lr
 800a764:	20000000 	.word	0x20000000
 800a768:	10624dd3 	.word	0x10624dd3

0800a76c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800a76c:	b480      	push	{r7}
 800a76e:	b085      	sub	sp, #20
 800a770:	af00      	add	r7, sp, #0
 800a772:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a774:	4b1a      	ldr	r3, [pc, #104]	; (800a7e0 <SDMMC_GetCmdResp3+0x74>)
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	4a1a      	ldr	r2, [pc, #104]	; (800a7e4 <SDMMC_GetCmdResp3+0x78>)
 800a77a:	fba2 2303 	umull	r2, r3, r2, r3
 800a77e:	0a5b      	lsrs	r3, r3, #9
 800a780:	f241 3288 	movw	r2, #5000	; 0x1388
 800a784:	fb02 f303 	mul.w	r3, r2, r3
 800a788:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	1e5a      	subs	r2, r3, #1
 800a78e:	60fa      	str	r2, [r7, #12]
 800a790:	2b00      	cmp	r3, #0
 800a792:	d102      	bne.n	800a79a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a794:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a798:	e01b      	b.n	800a7d2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a79e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7a0:	68bb      	ldr	r3, [r7, #8]
 800a7a2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d0ef      	beq.n	800a78a <SDMMC_GetCmdResp3+0x1e>
 800a7aa:	68bb      	ldr	r3, [r7, #8]
 800a7ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d1ea      	bne.n	800a78a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7b8:	f003 0304 	and.w	r3, r3, #4
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a7c6:	2304      	movs	r3, #4
 800a7c8:	e003      	b.n	800a7d2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	22c5      	movs	r2, #197	; 0xc5
 800a7ce:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a7d0:	2300      	movs	r3, #0
}
 800a7d2:	4618      	mov	r0, r3
 800a7d4:	3714      	adds	r7, #20
 800a7d6:	46bd      	mov	sp, r7
 800a7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7dc:	4770      	bx	lr
 800a7de:	bf00      	nop
 800a7e0:	20000000 	.word	0x20000000
 800a7e4:	10624dd3 	.word	0x10624dd3

0800a7e8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b088      	sub	sp, #32
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	607a      	str	r2, [r7, #4]
 800a7f4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a7f6:	4b35      	ldr	r3, [pc, #212]	; (800a8cc <SDMMC_GetCmdResp6+0xe4>)
 800a7f8:	681b      	ldr	r3, [r3, #0]
 800a7fa:	4a35      	ldr	r2, [pc, #212]	; (800a8d0 <SDMMC_GetCmdResp6+0xe8>)
 800a7fc:	fba2 2303 	umull	r2, r3, r2, r3
 800a800:	0a5b      	lsrs	r3, r3, #9
 800a802:	f241 3288 	movw	r2, #5000	; 0x1388
 800a806:	fb02 f303 	mul.w	r3, r2, r3
 800a80a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800a80c:	69fb      	ldr	r3, [r7, #28]
 800a80e:	1e5a      	subs	r2, r3, #1
 800a810:	61fa      	str	r2, [r7, #28]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d102      	bne.n	800a81c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a816:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a81a:	e052      	b.n	800a8c2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a820:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d0ef      	beq.n	800a80c <SDMMC_GetCmdResp6+0x24>
 800a82c:	69bb      	ldr	r3, [r7, #24]
 800a82e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a832:	2b00      	cmp	r3, #0
 800a834:	d1ea      	bne.n	800a80c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a83a:	f003 0304 	and.w	r3, r3, #4
 800a83e:	2b00      	cmp	r3, #0
 800a840:	d004      	beq.n	800a84c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	2204      	movs	r2, #4
 800a846:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a848:	2304      	movs	r3, #4
 800a84a:	e03a      	b.n	800a8c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a850:	f003 0301 	and.w	r3, r3, #1
 800a854:	2b00      	cmp	r3, #0
 800a856:	d004      	beq.n	800a862 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	2201      	movs	r2, #1
 800a85c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a85e:	2301      	movs	r3, #1
 800a860:	e02f      	b.n	800a8c2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 800a862:	68f8      	ldr	r0, [r7, #12]
 800a864:	f7ff fc0e 	bl	800a084 <SDMMC_GetCommandResponse>
 800a868:	4603      	mov	r3, r0
 800a86a:	461a      	mov	r2, r3
 800a86c:	7afb      	ldrb	r3, [r7, #11]
 800a86e:	4293      	cmp	r3, r2
 800a870:	d001      	beq.n	800a876 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a872:	2301      	movs	r3, #1
 800a874:	e025      	b.n	800a8c2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	22c5      	movs	r2, #197	; 0xc5
 800a87a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800a87c:	2100      	movs	r1, #0
 800a87e:	68f8      	ldr	r0, [r7, #12]
 800a880:	f7ff fc0d 	bl	800a09e <SDMMC_GetResponse>
 800a884:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 800a886:	697b      	ldr	r3, [r7, #20]
 800a888:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800a88c:	2b00      	cmp	r3, #0
 800a88e:	d106      	bne.n	800a89e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 800a890:	697b      	ldr	r3, [r7, #20]
 800a892:	0c1b      	lsrs	r3, r3, #16
 800a894:	b29a      	uxth	r2, r3
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	e011      	b.n	800a8c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 800a89e:	697b      	ldr	r3, [r7, #20]
 800a8a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d002      	beq.n	800a8ae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800a8a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a8ac:	e009      	b.n	800a8c2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800a8b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a8bc:	e001      	b.n	800a8c2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800a8be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	3720      	adds	r7, #32
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	bd80      	pop	{r7, pc}
 800a8ca:	bf00      	nop
 800a8cc:	20000000 	.word	0x20000000
 800a8d0:	10624dd3 	.word	0x10624dd3

0800a8d4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a8dc:	4b22      	ldr	r3, [pc, #136]	; (800a968 <SDMMC_GetCmdResp7+0x94>)
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	4a22      	ldr	r2, [pc, #136]	; (800a96c <SDMMC_GetCmdResp7+0x98>)
 800a8e2:	fba2 2303 	umull	r2, r3, r2, r3
 800a8e6:	0a5b      	lsrs	r3, r3, #9
 800a8e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a8ec:	fb02 f303 	mul.w	r3, r2, r3
 800a8f0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	1e5a      	subs	r2, r3, #1
 800a8f6:	60fa      	str	r2, [r7, #12]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d102      	bne.n	800a902 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a8fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a900:	e02c      	b.n	800a95c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a906:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a908:	68bb      	ldr	r3, [r7, #8]
 800a90a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d0ef      	beq.n	800a8f2 <SDMMC_GetCmdResp7+0x1e>
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d1ea      	bne.n	800a8f2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b00      	cmp	r3, #0
 800a926:	d004      	beq.n	800a932 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2204      	movs	r2, #4
 800a92c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800a92e:	2304      	movs	r3, #4
 800a930:	e014      	b.n	800a95c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a936:	f003 0301 	and.w	r3, r3, #1
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d004      	beq.n	800a948 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	2201      	movs	r2, #1
 800a942:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800a944:	2301      	movs	r3, #1
 800a946:	e009      	b.n	800a95c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a94c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a950:	2b00      	cmp	r3, #0
 800a952:	d002      	beq.n	800a95a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	2240      	movs	r2, #64	; 0x40
 800a958:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800a95a:	2300      	movs	r3, #0
  
}
 800a95c:	4618      	mov	r0, r3
 800a95e:	3714      	adds	r7, #20
 800a960:	46bd      	mov	sp, r7
 800a962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a966:	4770      	bx	lr
 800a968:	20000000 	.word	0x20000000
 800a96c:	10624dd3 	.word	0x10624dd3

0800a970 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 800a970:	b480      	push	{r7}
 800a972:	b085      	sub	sp, #20
 800a974:	af00      	add	r7, sp, #0
 800a976:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800a978:	4b11      	ldr	r3, [pc, #68]	; (800a9c0 <SDMMC_GetCmdError+0x50>)
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	4a11      	ldr	r2, [pc, #68]	; (800a9c4 <SDMMC_GetCmdError+0x54>)
 800a97e:	fba2 2303 	umull	r2, r3, r2, r3
 800a982:	0a5b      	lsrs	r3, r3, #9
 800a984:	f241 3288 	movw	r2, #5000	; 0x1388
 800a988:	fb02 f303 	mul.w	r3, r2, r3
 800a98c:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	1e5a      	subs	r2, r3, #1
 800a992:	60fa      	str	r2, [r7, #12]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d102      	bne.n	800a99e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800a998:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800a99c:	e009      	b.n	800a9b2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d0f1      	beq.n	800a98e <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	22c5      	movs	r2, #197	; 0xc5
 800a9ae:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 800a9b0:	2300      	movs	r3, #0
}
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	3714      	adds	r7, #20
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	20000000 	.word	0x20000000
 800a9c4:	10624dd3 	.word	0x10624dd3

0800a9c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800a9c8:	b084      	sub	sp, #16
 800a9ca:	b580      	push	{r7, lr}
 800a9cc:	b084      	sub	sp, #16
 800a9ce:	af00      	add	r7, sp, #0
 800a9d0:	6078      	str	r0, [r7, #4]
 800a9d2:	f107 001c 	add.w	r0, r7, #28
 800a9d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800a9da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9dc:	2b01      	cmp	r3, #1
 800a9de:	d120      	bne.n	800aa22 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	68da      	ldr	r2, [r3, #12]
 800a9f0:	4b20      	ldr	r3, [pc, #128]	; (800aa74 <USB_CoreInit+0xac>)
 800a9f2:	4013      	ands	r3, r2
 800a9f4:	687a      	ldr	r2, [r7, #4]
 800a9f6:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800aa04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aa06:	2b01      	cmp	r3, #1
 800aa08:	d105      	bne.n	800aa16 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	68db      	ldr	r3, [r3, #12]
 800aa0e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa16:	6878      	ldr	r0, [r7, #4]
 800aa18:	f001 fc0e 	bl	800c238 <USB_CoreReset>
 800aa1c:	4603      	mov	r3, r0
 800aa1e:	73fb      	strb	r3, [r7, #15]
 800aa20:	e010      	b.n	800aa44 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	68db      	ldr	r3, [r3, #12]
 800aa26:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f001 fc02 	bl	800c238 <USB_CoreReset>
 800aa34:	4603      	mov	r3, r0
 800aa36:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa3c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800aa44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa46:	2b01      	cmp	r3, #1
 800aa48:	d10b      	bne.n	800aa62 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	689b      	ldr	r3, [r3, #8]
 800aa4e:	f043 0206 	orr.w	r2, r3, #6
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	689b      	ldr	r3, [r3, #8]
 800aa5a:	f043 0220 	orr.w	r2, r3, #32
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa64:	4618      	mov	r0, r3
 800aa66:	3710      	adds	r7, #16
 800aa68:	46bd      	mov	sp, r7
 800aa6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800aa6e:	b004      	add	sp, #16
 800aa70:	4770      	bx	lr
 800aa72:	bf00      	nop
 800aa74:	ffbdffbf 	.word	0xffbdffbf

0800aa78 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b087      	sub	sp, #28
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	60f8      	str	r0, [r7, #12]
 800aa80:	60b9      	str	r1, [r7, #8]
 800aa82:	4613      	mov	r3, r2
 800aa84:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800aa86:	79fb      	ldrb	r3, [r7, #7]
 800aa88:	2b02      	cmp	r3, #2
 800aa8a:	d165      	bne.n	800ab58 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	4a41      	ldr	r2, [pc, #260]	; (800ab94 <USB_SetTurnaroundTime+0x11c>)
 800aa90:	4293      	cmp	r3, r2
 800aa92:	d906      	bls.n	800aaa2 <USB_SetTurnaroundTime+0x2a>
 800aa94:	68bb      	ldr	r3, [r7, #8]
 800aa96:	4a40      	ldr	r2, [pc, #256]	; (800ab98 <USB_SetTurnaroundTime+0x120>)
 800aa98:	4293      	cmp	r3, r2
 800aa9a:	d202      	bcs.n	800aaa2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800aa9c:	230f      	movs	r3, #15
 800aa9e:	617b      	str	r3, [r7, #20]
 800aaa0:	e062      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	4a3c      	ldr	r2, [pc, #240]	; (800ab98 <USB_SetTurnaroundTime+0x120>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d306      	bcc.n	800aab8 <USB_SetTurnaroundTime+0x40>
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	4a3b      	ldr	r2, [pc, #236]	; (800ab9c <USB_SetTurnaroundTime+0x124>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d202      	bcs.n	800aab8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800aab2:	230e      	movs	r3, #14
 800aab4:	617b      	str	r3, [r7, #20]
 800aab6:	e057      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	4a38      	ldr	r2, [pc, #224]	; (800ab9c <USB_SetTurnaroundTime+0x124>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d306      	bcc.n	800aace <USB_SetTurnaroundTime+0x56>
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	4a37      	ldr	r2, [pc, #220]	; (800aba0 <USB_SetTurnaroundTime+0x128>)
 800aac4:	4293      	cmp	r3, r2
 800aac6:	d202      	bcs.n	800aace <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800aac8:	230d      	movs	r3, #13
 800aaca:	617b      	str	r3, [r7, #20]
 800aacc:	e04c      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	4a33      	ldr	r2, [pc, #204]	; (800aba0 <USB_SetTurnaroundTime+0x128>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d306      	bcc.n	800aae4 <USB_SetTurnaroundTime+0x6c>
 800aad6:	68bb      	ldr	r3, [r7, #8]
 800aad8:	4a32      	ldr	r2, [pc, #200]	; (800aba4 <USB_SetTurnaroundTime+0x12c>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d802      	bhi.n	800aae4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800aade:	230c      	movs	r3, #12
 800aae0:	617b      	str	r3, [r7, #20]
 800aae2:	e041      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800aae4:	68bb      	ldr	r3, [r7, #8]
 800aae6:	4a2f      	ldr	r2, [pc, #188]	; (800aba4 <USB_SetTurnaroundTime+0x12c>)
 800aae8:	4293      	cmp	r3, r2
 800aaea:	d906      	bls.n	800aafa <USB_SetTurnaroundTime+0x82>
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	4a2e      	ldr	r2, [pc, #184]	; (800aba8 <USB_SetTurnaroundTime+0x130>)
 800aaf0:	4293      	cmp	r3, r2
 800aaf2:	d802      	bhi.n	800aafa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800aaf4:	230b      	movs	r3, #11
 800aaf6:	617b      	str	r3, [r7, #20]
 800aaf8:	e036      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800aafa:	68bb      	ldr	r3, [r7, #8]
 800aafc:	4a2a      	ldr	r2, [pc, #168]	; (800aba8 <USB_SetTurnaroundTime+0x130>)
 800aafe:	4293      	cmp	r3, r2
 800ab00:	d906      	bls.n	800ab10 <USB_SetTurnaroundTime+0x98>
 800ab02:	68bb      	ldr	r3, [r7, #8]
 800ab04:	4a29      	ldr	r2, [pc, #164]	; (800abac <USB_SetTurnaroundTime+0x134>)
 800ab06:	4293      	cmp	r3, r2
 800ab08:	d802      	bhi.n	800ab10 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ab0a:	230a      	movs	r3, #10
 800ab0c:	617b      	str	r3, [r7, #20]
 800ab0e:	e02b      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	4a26      	ldr	r2, [pc, #152]	; (800abac <USB_SetTurnaroundTime+0x134>)
 800ab14:	4293      	cmp	r3, r2
 800ab16:	d906      	bls.n	800ab26 <USB_SetTurnaroundTime+0xae>
 800ab18:	68bb      	ldr	r3, [r7, #8]
 800ab1a:	4a25      	ldr	r2, [pc, #148]	; (800abb0 <USB_SetTurnaroundTime+0x138>)
 800ab1c:	4293      	cmp	r3, r2
 800ab1e:	d202      	bcs.n	800ab26 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ab20:	2309      	movs	r3, #9
 800ab22:	617b      	str	r3, [r7, #20]
 800ab24:	e020      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	4a21      	ldr	r2, [pc, #132]	; (800abb0 <USB_SetTurnaroundTime+0x138>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d306      	bcc.n	800ab3c <USB_SetTurnaroundTime+0xc4>
 800ab2e:	68bb      	ldr	r3, [r7, #8]
 800ab30:	4a20      	ldr	r2, [pc, #128]	; (800abb4 <USB_SetTurnaroundTime+0x13c>)
 800ab32:	4293      	cmp	r3, r2
 800ab34:	d802      	bhi.n	800ab3c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ab36:	2308      	movs	r3, #8
 800ab38:	617b      	str	r3, [r7, #20]
 800ab3a:	e015      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	4a1d      	ldr	r2, [pc, #116]	; (800abb4 <USB_SetTurnaroundTime+0x13c>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d906      	bls.n	800ab52 <USB_SetTurnaroundTime+0xda>
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	4a1c      	ldr	r2, [pc, #112]	; (800abb8 <USB_SetTurnaroundTime+0x140>)
 800ab48:	4293      	cmp	r3, r2
 800ab4a:	d202      	bcs.n	800ab52 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ab4c:	2307      	movs	r3, #7
 800ab4e:	617b      	str	r3, [r7, #20]
 800ab50:	e00a      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ab52:	2306      	movs	r3, #6
 800ab54:	617b      	str	r3, [r7, #20]
 800ab56:	e007      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ab58:	79fb      	ldrb	r3, [r7, #7]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d102      	bne.n	800ab64 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ab5e:	2309      	movs	r3, #9
 800ab60:	617b      	str	r3, [r7, #20]
 800ab62:	e001      	b.n	800ab68 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ab64:	2309      	movs	r3, #9
 800ab66:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	68db      	ldr	r3, [r3, #12]
 800ab6c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	68da      	ldr	r2, [r3, #12]
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	029b      	lsls	r3, r3, #10
 800ab7c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ab80:	431a      	orrs	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	371c      	adds	r7, #28
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab92:	4770      	bx	lr
 800ab94:	00d8acbf 	.word	0x00d8acbf
 800ab98:	00e4e1c0 	.word	0x00e4e1c0
 800ab9c:	00f42400 	.word	0x00f42400
 800aba0:	01067380 	.word	0x01067380
 800aba4:	011a499f 	.word	0x011a499f
 800aba8:	01312cff 	.word	0x01312cff
 800abac:	014ca43f 	.word	0x014ca43f
 800abb0:	016e3600 	.word	0x016e3600
 800abb4:	01a6ab1f 	.word	0x01a6ab1f
 800abb8:	01e84800 	.word	0x01e84800

0800abbc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	689b      	ldr	r3, [r3, #8]
 800abc8:	f043 0201 	orr.w	r2, r3, #1
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	370c      	adds	r7, #12
 800abd6:	46bd      	mov	sp, r7
 800abd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abdc:	4770      	bx	lr

0800abde <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800abde:	b480      	push	{r7}
 800abe0:	b083      	sub	sp, #12
 800abe2:	af00      	add	r7, sp, #0
 800abe4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	689b      	ldr	r3, [r3, #8]
 800abea:	f023 0201 	bic.w	r2, r3, #1
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	370c      	adds	r7, #12
 800abf8:	46bd      	mov	sp, r7
 800abfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abfe:	4770      	bx	lr

0800ac00 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b084      	sub	sp, #16
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800ac1c:	78fb      	ldrb	r3, [r7, #3]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	d115      	bne.n	800ac4e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	68db      	ldr	r3, [r3, #12]
 800ac26:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac2e:	2001      	movs	r0, #1
 800ac30:	f7f7 f9fe 	bl	8002030 <HAL_Delay>
      ms++;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	3301      	adds	r3, #1
 800ac38:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800ac3a:	6878      	ldr	r0, [r7, #4]
 800ac3c:	f001 fa6c 	bl	800c118 <USB_GetMode>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b01      	cmp	r3, #1
 800ac44:	d01e      	beq.n	800ac84 <USB_SetCurrentMode+0x84>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b31      	cmp	r3, #49	; 0x31
 800ac4a:	d9f0      	bls.n	800ac2e <USB_SetCurrentMode+0x2e>
 800ac4c:	e01a      	b.n	800ac84 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800ac4e:	78fb      	ldrb	r3, [r7, #3]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d115      	bne.n	800ac80 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	68db      	ldr	r3, [r3, #12]
 800ac58:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800ac60:	2001      	movs	r0, #1
 800ac62:	f7f7 f9e5 	bl	8002030 <HAL_Delay>
      ms++;
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	3301      	adds	r3, #1
 800ac6a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800ac6c:	6878      	ldr	r0, [r7, #4]
 800ac6e:	f001 fa53 	bl	800c118 <USB_GetMode>
 800ac72:	4603      	mov	r3, r0
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	d005      	beq.n	800ac84 <USB_SetCurrentMode+0x84>
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	2b31      	cmp	r3, #49	; 0x31
 800ac7c:	d9f0      	bls.n	800ac60 <USB_SetCurrentMode+0x60>
 800ac7e:	e001      	b.n	800ac84 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800ac80:	2301      	movs	r3, #1
 800ac82:	e005      	b.n	800ac90 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	2b32      	cmp	r3, #50	; 0x32
 800ac88:	d101      	bne.n	800ac8e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e000      	b.n	800ac90 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800ac8e:	2300      	movs	r3, #0
}
 800ac90:	4618      	mov	r0, r3
 800ac92:	3710      	adds	r7, #16
 800ac94:	46bd      	mov	sp, r7
 800ac96:	bd80      	pop	{r7, pc}

0800ac98 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ac98:	b084      	sub	sp, #16
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b086      	sub	sp, #24
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	6078      	str	r0, [r7, #4]
 800aca2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800aca6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800acaa:	2300      	movs	r3, #0
 800acac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800acb2:	2300      	movs	r3, #0
 800acb4:	613b      	str	r3, [r7, #16]
 800acb6:	e009      	b.n	800accc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800acb8:	687a      	ldr	r2, [r7, #4]
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	3340      	adds	r3, #64	; 0x40
 800acbe:	009b      	lsls	r3, r3, #2
 800acc0:	4413      	add	r3, r2
 800acc2:	2200      	movs	r2, #0
 800acc4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800acc6:	693b      	ldr	r3, [r7, #16]
 800acc8:	3301      	adds	r3, #1
 800acca:	613b      	str	r3, [r7, #16]
 800accc:	693b      	ldr	r3, [r7, #16]
 800acce:	2b0e      	cmp	r3, #14
 800acd0:	d9f2      	bls.n	800acb8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800acd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d11c      	bne.n	800ad12 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800ace6:	f043 0302 	orr.w	r3, r3, #2
 800acea:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acf0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	601a      	str	r2, [r3, #0]
 800ad10:	e005      	b.n	800ad1e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad16:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800ad24:	461a      	mov	r2, r3
 800ad26:	2300      	movs	r3, #0
 800ad28:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad30:	4619      	mov	r1, r3
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad38:	461a      	mov	r2, r3
 800ad3a:	680b      	ldr	r3, [r1, #0]
 800ad3c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ad3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad40:	2b01      	cmp	r3, #1
 800ad42:	d10c      	bne.n	800ad5e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800ad44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad46:	2b00      	cmp	r3, #0
 800ad48:	d104      	bne.n	800ad54 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800ad4a:	2100      	movs	r1, #0
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f965 	bl	800b01c <USB_SetDevSpeed>
 800ad52:	e008      	b.n	800ad66 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800ad54:	2101      	movs	r1, #1
 800ad56:	6878      	ldr	r0, [r7, #4]
 800ad58:	f000 f960 	bl	800b01c <USB_SetDevSpeed>
 800ad5c:	e003      	b.n	800ad66 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800ad5e:	2103      	movs	r1, #3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 f95b 	bl	800b01c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800ad66:	2110      	movs	r1, #16
 800ad68:	6878      	ldr	r0, [r7, #4]
 800ad6a:	f000 f8f3 	bl	800af54 <USB_FlushTxFifo>
 800ad6e:	4603      	mov	r3, r0
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	d001      	beq.n	800ad78 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f91f 	bl	800afbc <USB_FlushRxFifo>
 800ad7e:	4603      	mov	r3, r0
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d001      	beq.n	800ad88 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800ad84:	2301      	movs	r3, #1
 800ad86:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad8e:	461a      	mov	r2, r3
 800ad90:	2300      	movs	r3, #0
 800ad92:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800ad94:	68fb      	ldr	r3, [r7, #12]
 800ad96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	2300      	movs	r3, #0
 800ad9e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800ada0:	68fb      	ldr	r3, [r7, #12]
 800ada2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ada6:	461a      	mov	r2, r3
 800ada8:	2300      	movs	r3, #0
 800adaa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800adac:	2300      	movs	r3, #0
 800adae:	613b      	str	r3, [r7, #16]
 800adb0:	e043      	b.n	800ae3a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800adb2:	693b      	ldr	r3, [r7, #16]
 800adb4:	015a      	lsls	r2, r3, #5
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	4413      	add	r3, r2
 800adba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800adc4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800adc8:	d118      	bne.n	800adfc <USB_DevInit+0x164>
    {
      if (i == 0U)
 800adca:	693b      	ldr	r3, [r7, #16]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d10a      	bne.n	800ade6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800add0:	693b      	ldr	r3, [r7, #16]
 800add2:	015a      	lsls	r2, r3, #5
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4413      	add	r3, r2
 800add8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800addc:	461a      	mov	r2, r3
 800adde:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ade2:	6013      	str	r3, [r2, #0]
 800ade4:	e013      	b.n	800ae0e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800ade6:	693b      	ldr	r3, [r7, #16]
 800ade8:	015a      	lsls	r2, r3, #5
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	4413      	add	r3, r2
 800adee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800adf2:	461a      	mov	r2, r3
 800adf4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800adf8:	6013      	str	r3, [r2, #0]
 800adfa:	e008      	b.n	800ae0e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800adfc:	693b      	ldr	r3, [r7, #16]
 800adfe:	015a      	lsls	r2, r3, #5
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	4413      	add	r3, r2
 800ae04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae08:	461a      	mov	r2, r3
 800ae0a:	2300      	movs	r3, #0
 800ae0c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	015a      	lsls	r2, r3, #5
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	4413      	add	r3, r2
 800ae16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae1a:	461a      	mov	r2, r3
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	015a      	lsls	r2, r3, #5
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	4413      	add	r3, r2
 800ae28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ae2c:	461a      	mov	r2, r3
 800ae2e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800ae32:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae34:	693b      	ldr	r3, [r7, #16]
 800ae36:	3301      	adds	r3, #1
 800ae38:	613b      	str	r3, [r7, #16]
 800ae3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ae3c:	693a      	ldr	r2, [r7, #16]
 800ae3e:	429a      	cmp	r2, r3
 800ae40:	d3b7      	bcc.n	800adb2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800ae42:	2300      	movs	r3, #0
 800ae44:	613b      	str	r3, [r7, #16]
 800ae46:	e043      	b.n	800aed0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	015a      	lsls	r2, r3, #5
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	4413      	add	r3, r2
 800ae50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800ae5a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800ae5e:	d118      	bne.n	800ae92 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800ae60:	693b      	ldr	r3, [r7, #16]
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d10a      	bne.n	800ae7c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800ae66:	693b      	ldr	r3, [r7, #16]
 800ae68:	015a      	lsls	r2, r3, #5
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	4413      	add	r3, r2
 800ae6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae72:	461a      	mov	r2, r3
 800ae74:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800ae78:	6013      	str	r3, [r2, #0]
 800ae7a:	e013      	b.n	800aea4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	015a      	lsls	r2, r3, #5
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	4413      	add	r3, r2
 800ae84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae88:	461a      	mov	r2, r3
 800ae8a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800ae8e:	6013      	str	r3, [r2, #0]
 800ae90:	e008      	b.n	800aea4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800ae92:	693b      	ldr	r3, [r7, #16]
 800ae94:	015a      	lsls	r2, r3, #5
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	4413      	add	r3, r2
 800ae9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ae9e:	461a      	mov	r2, r3
 800aea0:	2300      	movs	r3, #0
 800aea2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800aea4:	693b      	ldr	r3, [r7, #16]
 800aea6:	015a      	lsls	r2, r3, #5
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	4413      	add	r3, r2
 800aeac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aeb0:	461a      	mov	r2, r3
 800aeb2:	2300      	movs	r3, #0
 800aeb4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800aeb6:	693b      	ldr	r3, [r7, #16]
 800aeb8:	015a      	lsls	r2, r3, #5
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	4413      	add	r3, r2
 800aebe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aec2:	461a      	mov	r2, r3
 800aec4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800aec8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800aeca:	693b      	ldr	r3, [r7, #16]
 800aecc:	3301      	adds	r3, #1
 800aece:	613b      	str	r3, [r7, #16]
 800aed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aed2:	693a      	ldr	r2, [r7, #16]
 800aed4:	429a      	cmp	r2, r3
 800aed6:	d3b7      	bcc.n	800ae48 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aede:	691b      	ldr	r3, [r3, #16]
 800aee0:	68fa      	ldr	r2, [r7, #12]
 800aee2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800aee6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aeea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	2200      	movs	r2, #0
 800aef0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800aef8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800aefa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d105      	bne.n	800af0c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	699b      	ldr	r3, [r3, #24]
 800af04:	f043 0210 	orr.w	r2, r3, #16
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	699a      	ldr	r2, [r3, #24]
 800af10:	4b0e      	ldr	r3, [pc, #56]	; (800af4c <USB_DevInit+0x2b4>)
 800af12:	4313      	orrs	r3, r2
 800af14:	687a      	ldr	r2, [r7, #4]
 800af16:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800af18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d005      	beq.n	800af2a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	699b      	ldr	r3, [r3, #24]
 800af22:	f043 0208 	orr.w	r2, r3, #8
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800af2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800af2c:	2b01      	cmp	r3, #1
 800af2e:	d105      	bne.n	800af3c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	699a      	ldr	r2, [r3, #24]
 800af34:	4b06      	ldr	r3, [pc, #24]	; (800af50 <USB_DevInit+0x2b8>)
 800af36:	4313      	orrs	r3, r2
 800af38:	687a      	ldr	r2, [r7, #4]
 800af3a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800af3c:	7dfb      	ldrb	r3, [r7, #23]
}
 800af3e:	4618      	mov	r0, r3
 800af40:	3718      	adds	r7, #24
 800af42:	46bd      	mov	sp, r7
 800af44:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800af48:	b004      	add	sp, #16
 800af4a:	4770      	bx	lr
 800af4c:	803c3800 	.word	0x803c3800
 800af50:	40000004 	.word	0x40000004

0800af54 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800af54:	b480      	push	{r7}
 800af56:	b085      	sub	sp, #20
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800af5e:	2300      	movs	r3, #0
 800af60:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	3301      	adds	r3, #1
 800af66:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	4a13      	ldr	r2, [pc, #76]	; (800afb8 <USB_FlushTxFifo+0x64>)
 800af6c:	4293      	cmp	r3, r2
 800af6e:	d901      	bls.n	800af74 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e01b      	b.n	800afac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	daf2      	bge.n	800af62 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800af7c:	2300      	movs	r3, #0
 800af7e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800af80:	683b      	ldr	r3, [r7, #0]
 800af82:	019b      	lsls	r3, r3, #6
 800af84:	f043 0220 	orr.w	r2, r3, #32
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	3301      	adds	r3, #1
 800af90:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4a08      	ldr	r2, [pc, #32]	; (800afb8 <USB_FlushTxFifo+0x64>)
 800af96:	4293      	cmp	r3, r2
 800af98:	d901      	bls.n	800af9e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e006      	b.n	800afac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	f003 0320 	and.w	r3, r3, #32
 800afa6:	2b20      	cmp	r3, #32
 800afa8:	d0f0      	beq.n	800af8c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800afaa:	2300      	movs	r3, #0
}
 800afac:	4618      	mov	r0, r3
 800afae:	3714      	adds	r7, #20
 800afb0:	46bd      	mov	sp, r7
 800afb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb6:	4770      	bx	lr
 800afb8:	00030d40 	.word	0x00030d40

0800afbc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800afbc:	b480      	push	{r7}
 800afbe:	b085      	sub	sp, #20
 800afc0:	af00      	add	r7, sp, #0
 800afc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800afc4:	2300      	movs	r3, #0
 800afc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	3301      	adds	r3, #1
 800afcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	4a11      	ldr	r2, [pc, #68]	; (800b018 <USB_FlushRxFifo+0x5c>)
 800afd2:	4293      	cmp	r3, r2
 800afd4:	d901      	bls.n	800afda <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800afd6:	2303      	movs	r3, #3
 800afd8:	e018      	b.n	800b00c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	691b      	ldr	r3, [r3, #16]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	daf2      	bge.n	800afc8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800afe2:	2300      	movs	r3, #0
 800afe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2210      	movs	r2, #16
 800afea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	3301      	adds	r3, #1
 800aff0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	4a08      	ldr	r2, [pc, #32]	; (800b018 <USB_FlushRxFifo+0x5c>)
 800aff6:	4293      	cmp	r3, r2
 800aff8:	d901      	bls.n	800affe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800affa:	2303      	movs	r3, #3
 800affc:	e006      	b.n	800b00c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	691b      	ldr	r3, [r3, #16]
 800b002:	f003 0310 	and.w	r3, r3, #16
 800b006:	2b10      	cmp	r3, #16
 800b008:	d0f0      	beq.n	800afec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b00a:	2300      	movs	r3, #0
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3714      	adds	r7, #20
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr
 800b018:	00030d40 	.word	0x00030d40

0800b01c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b085      	sub	sp, #20
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
 800b024:	460b      	mov	r3, r1
 800b026:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b032:	681a      	ldr	r2, [r3, #0]
 800b034:	78fb      	ldrb	r3, [r7, #3]
 800b036:	68f9      	ldr	r1, [r7, #12]
 800b038:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b03c:	4313      	orrs	r3, r2
 800b03e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b040:	2300      	movs	r3, #0
}
 800b042:	4618      	mov	r0, r3
 800b044:	3714      	adds	r7, #20
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b04e:	b480      	push	{r7}
 800b050:	b087      	sub	sp, #28
 800b052:	af00      	add	r7, sp, #0
 800b054:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b060:	689b      	ldr	r3, [r3, #8]
 800b062:	f003 0306 	and.w	r3, r3, #6
 800b066:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d102      	bne.n	800b074 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b06e:	2300      	movs	r3, #0
 800b070:	75fb      	strb	r3, [r7, #23]
 800b072:	e00a      	b.n	800b08a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2b02      	cmp	r3, #2
 800b078:	d002      	beq.n	800b080 <USB_GetDevSpeed+0x32>
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2b06      	cmp	r3, #6
 800b07e:	d102      	bne.n	800b086 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b080:	2302      	movs	r3, #2
 800b082:	75fb      	strb	r3, [r7, #23]
 800b084:	e001      	b.n	800b08a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b086:	230f      	movs	r3, #15
 800b088:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b08a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b08c:	4618      	mov	r0, r3
 800b08e:	371c      	adds	r7, #28
 800b090:	46bd      	mov	sp, r7
 800b092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b096:	4770      	bx	lr

0800b098 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b098:	b480      	push	{r7}
 800b09a:	b085      	sub	sp, #20
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
 800b0a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b0a6:	683b      	ldr	r3, [r7, #0]
 800b0a8:	781b      	ldrb	r3, [r3, #0]
 800b0aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b0ac:	683b      	ldr	r3, [r7, #0]
 800b0ae:	785b      	ldrb	r3, [r3, #1]
 800b0b0:	2b01      	cmp	r3, #1
 800b0b2:	d139      	bne.n	800b128 <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ba:	69da      	ldr	r2, [r3, #28]
 800b0bc:	683b      	ldr	r3, [r7, #0]
 800b0be:	781b      	ldrb	r3, [r3, #0]
 800b0c0:	f003 030f 	and.w	r3, r3, #15
 800b0c4:	2101      	movs	r1, #1
 800b0c6:	fa01 f303 	lsl.w	r3, r1, r3
 800b0ca:	b29b      	uxth	r3, r3
 800b0cc:	68f9      	ldr	r1, [r7, #12]
 800b0ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b0d2:	4313      	orrs	r3, r2
 800b0d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b0d6:	68bb      	ldr	r3, [r7, #8]
 800b0d8:	015a      	lsls	r2, r3, #5
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	4413      	add	r3, r2
 800b0de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d153      	bne.n	800b194 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	015a      	lsls	r2, r3, #5
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	4413      	add	r3, r2
 800b0f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f8:	681a      	ldr	r2, [r3, #0]
 800b0fa:	683b      	ldr	r3, [r7, #0]
 800b0fc:	68db      	ldr	r3, [r3, #12]
 800b0fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b102:	683b      	ldr	r3, [r7, #0]
 800b104:	791b      	ldrb	r3, [r3, #4]
 800b106:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b108:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b10a:	68bb      	ldr	r3, [r7, #8]
 800b10c:	059b      	lsls	r3, r3, #22
 800b10e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b110:	431a      	orrs	r2, r3
 800b112:	68bb      	ldr	r3, [r7, #8]
 800b114:	0159      	lsls	r1, r3, #5
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	440b      	add	r3, r1
 800b11a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11e:	4619      	mov	r1, r3
 800b120:	4b20      	ldr	r3, [pc, #128]	; (800b1a4 <USB_ActivateEndpoint+0x10c>)
 800b122:	4313      	orrs	r3, r2
 800b124:	600b      	str	r3, [r1, #0]
 800b126:	e035      	b.n	800b194 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b12e:	69da      	ldr	r2, [r3, #28]
 800b130:	683b      	ldr	r3, [r7, #0]
 800b132:	781b      	ldrb	r3, [r3, #0]
 800b134:	f003 030f 	and.w	r3, r3, #15
 800b138:	2101      	movs	r1, #1
 800b13a:	fa01 f303 	lsl.w	r3, r1, r3
 800b13e:	041b      	lsls	r3, r3, #16
 800b140:	68f9      	ldr	r1, [r7, #12]
 800b142:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b146:	4313      	orrs	r3, r2
 800b148:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b14a:	68bb      	ldr	r3, [r7, #8]
 800b14c:	015a      	lsls	r2, r3, #5
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	4413      	add	r3, r2
 800b152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d119      	bne.n	800b194 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b160:	68bb      	ldr	r3, [r7, #8]
 800b162:	015a      	lsls	r2, r3, #5
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	4413      	add	r3, r2
 800b168:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b16c:	681a      	ldr	r2, [r3, #0]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b176:	683b      	ldr	r3, [r7, #0]
 800b178:	791b      	ldrb	r3, [r3, #4]
 800b17a:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b17c:	430b      	orrs	r3, r1
 800b17e:	431a      	orrs	r2, r3
 800b180:	68bb      	ldr	r3, [r7, #8]
 800b182:	0159      	lsls	r1, r3, #5
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	440b      	add	r3, r1
 800b188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b18c:	4619      	mov	r1, r3
 800b18e:	4b05      	ldr	r3, [pc, #20]	; (800b1a4 <USB_ActivateEndpoint+0x10c>)
 800b190:	4313      	orrs	r3, r2
 800b192:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr
 800b1a2:	bf00      	nop
 800b1a4:	10008000 	.word	0x10008000

0800b1a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b1b6:	683b      	ldr	r3, [r7, #0]
 800b1b8:	781b      	ldrb	r3, [r3, #0]
 800b1ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b1bc:	683b      	ldr	r3, [r7, #0]
 800b1be:	785b      	ldrb	r3, [r3, #1]
 800b1c0:	2b01      	cmp	r3, #1
 800b1c2:	d161      	bne.n	800b288 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b1c4:	68bb      	ldr	r3, [r7, #8]
 800b1c6:	015a      	lsls	r2, r3, #5
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	4413      	add	r3, r2
 800b1cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b1d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b1da:	d11f      	bne.n	800b21c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	015a      	lsls	r2, r3, #5
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	4413      	add	r3, r2
 800b1e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	0151      	lsls	r1, r2, #5
 800b1ee:	68fa      	ldr	r2, [r7, #12]
 800b1f0:	440a      	add	r2, r1
 800b1f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b1f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b1fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	015a      	lsls	r2, r3, #5
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	4413      	add	r3, r2
 800b204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	68ba      	ldr	r2, [r7, #8]
 800b20c:	0151      	lsls	r1, r2, #5
 800b20e:	68fa      	ldr	r2, [r7, #12]
 800b210:	440a      	add	r2, r1
 800b212:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b216:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b21a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b222:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b224:	683b      	ldr	r3, [r7, #0]
 800b226:	781b      	ldrb	r3, [r3, #0]
 800b228:	f003 030f 	and.w	r3, r3, #15
 800b22c:	2101      	movs	r1, #1
 800b22e:	fa01 f303 	lsl.w	r3, r1, r3
 800b232:	b29b      	uxth	r3, r3
 800b234:	43db      	mvns	r3, r3
 800b236:	68f9      	ldr	r1, [r7, #12]
 800b238:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b23c:	4013      	ands	r3, r2
 800b23e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b246:	69da      	ldr	r2, [r3, #28]
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	781b      	ldrb	r3, [r3, #0]
 800b24c:	f003 030f 	and.w	r3, r3, #15
 800b250:	2101      	movs	r1, #1
 800b252:	fa01 f303 	lsl.w	r3, r1, r3
 800b256:	b29b      	uxth	r3, r3
 800b258:	43db      	mvns	r3, r3
 800b25a:	68f9      	ldr	r1, [r7, #12]
 800b25c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b260:	4013      	ands	r3, r2
 800b262:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	015a      	lsls	r2, r3, #5
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	4413      	add	r3, r2
 800b26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b270:	681a      	ldr	r2, [r3, #0]
 800b272:	68bb      	ldr	r3, [r7, #8]
 800b274:	0159      	lsls	r1, r3, #5
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	440b      	add	r3, r1
 800b27a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b27e:	4619      	mov	r1, r3
 800b280:	4b35      	ldr	r3, [pc, #212]	; (800b358 <USB_DeactivateEndpoint+0x1b0>)
 800b282:	4013      	ands	r3, r2
 800b284:	600b      	str	r3, [r1, #0]
 800b286:	e060      	b.n	800b34a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b288:	68bb      	ldr	r3, [r7, #8]
 800b28a:	015a      	lsls	r2, r3, #5
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	4413      	add	r3, r2
 800b290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b29a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b29e:	d11f      	bne.n	800b2e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b2a0:	68bb      	ldr	r3, [r7, #8]
 800b2a2:	015a      	lsls	r2, r3, #5
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	68ba      	ldr	r2, [r7, #8]
 800b2b0:	0151      	lsls	r1, r2, #5
 800b2b2:	68fa      	ldr	r2, [r7, #12]
 800b2b4:	440a      	add	r2, r1
 800b2b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b2be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b2c0:	68bb      	ldr	r3, [r7, #8]
 800b2c2:	015a      	lsls	r2, r3, #5
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	4413      	add	r3, r2
 800b2c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	68ba      	ldr	r2, [r7, #8]
 800b2d0:	0151      	lsls	r1, r2, #5
 800b2d2:	68fa      	ldr	r2, [r7, #12]
 800b2d4:	440a      	add	r2, r1
 800b2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b2da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b2de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	781b      	ldrb	r3, [r3, #0]
 800b2ec:	f003 030f 	and.w	r3, r3, #15
 800b2f0:	2101      	movs	r1, #1
 800b2f2:	fa01 f303 	lsl.w	r3, r1, r3
 800b2f6:	041b      	lsls	r3, r3, #16
 800b2f8:	43db      	mvns	r3, r3
 800b2fa:	68f9      	ldr	r1, [r7, #12]
 800b2fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b300:	4013      	ands	r3, r2
 800b302:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b30a:	69da      	ldr	r2, [r3, #28]
 800b30c:	683b      	ldr	r3, [r7, #0]
 800b30e:	781b      	ldrb	r3, [r3, #0]
 800b310:	f003 030f 	and.w	r3, r3, #15
 800b314:	2101      	movs	r1, #1
 800b316:	fa01 f303 	lsl.w	r3, r1, r3
 800b31a:	041b      	lsls	r3, r3, #16
 800b31c:	43db      	mvns	r3, r3
 800b31e:	68f9      	ldr	r1, [r7, #12]
 800b320:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b324:	4013      	ands	r3, r2
 800b326:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b328:	68bb      	ldr	r3, [r7, #8]
 800b32a:	015a      	lsls	r2, r3, #5
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	4413      	add	r3, r2
 800b330:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b334:	681a      	ldr	r2, [r3, #0]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	0159      	lsls	r1, r3, #5
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	440b      	add	r3, r1
 800b33e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b342:	4619      	mov	r1, r3
 800b344:	4b05      	ldr	r3, [pc, #20]	; (800b35c <USB_DeactivateEndpoint+0x1b4>)
 800b346:	4013      	ands	r3, r2
 800b348:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b34a:	2300      	movs	r3, #0
}
 800b34c:	4618      	mov	r0, r3
 800b34e:	3714      	adds	r7, #20
 800b350:	46bd      	mov	sp, r7
 800b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b356:	4770      	bx	lr
 800b358:	ec337800 	.word	0xec337800
 800b35c:	eff37800 	.word	0xeff37800

0800b360 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b360:	b580      	push	{r7, lr}
 800b362:	b08a      	sub	sp, #40	; 0x28
 800b364:	af02      	add	r7, sp, #8
 800b366:	60f8      	str	r0, [r7, #12]
 800b368:	60b9      	str	r1, [r7, #8]
 800b36a:	4613      	mov	r3, r2
 800b36c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b372:	68bb      	ldr	r3, [r7, #8]
 800b374:	781b      	ldrb	r3, [r3, #0]
 800b376:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	785b      	ldrb	r3, [r3, #1]
 800b37c:	2b01      	cmp	r3, #1
 800b37e:	f040 8163 	bne.w	800b648 <USB_EPStartXfer+0x2e8>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	699b      	ldr	r3, [r3, #24]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d132      	bne.n	800b3f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	015a      	lsls	r2, r3, #5
 800b38e:	69fb      	ldr	r3, [r7, #28]
 800b390:	4413      	add	r3, r2
 800b392:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b396:	691a      	ldr	r2, [r3, #16]
 800b398:	69bb      	ldr	r3, [r7, #24]
 800b39a:	0159      	lsls	r1, r3, #5
 800b39c:	69fb      	ldr	r3, [r7, #28]
 800b39e:	440b      	add	r3, r1
 800b3a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3a4:	4619      	mov	r1, r3
 800b3a6:	4ba5      	ldr	r3, [pc, #660]	; (800b63c <USB_EPStartXfer+0x2dc>)
 800b3a8:	4013      	ands	r3, r2
 800b3aa:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b3ac:	69bb      	ldr	r3, [r7, #24]
 800b3ae:	015a      	lsls	r2, r3, #5
 800b3b0:	69fb      	ldr	r3, [r7, #28]
 800b3b2:	4413      	add	r3, r2
 800b3b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3b8:	691b      	ldr	r3, [r3, #16]
 800b3ba:	69ba      	ldr	r2, [r7, #24]
 800b3bc:	0151      	lsls	r1, r2, #5
 800b3be:	69fa      	ldr	r2, [r7, #28]
 800b3c0:	440a      	add	r2, r1
 800b3c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b3ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3cc:	69bb      	ldr	r3, [r7, #24]
 800b3ce:	015a      	lsls	r2, r3, #5
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	4413      	add	r3, r2
 800b3d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3d8:	691a      	ldr	r2, [r3, #16]
 800b3da:	69bb      	ldr	r3, [r7, #24]
 800b3dc:	0159      	lsls	r1, r3, #5
 800b3de:	69fb      	ldr	r3, [r7, #28]
 800b3e0:	440b      	add	r3, r1
 800b3e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3e6:	4619      	mov	r1, r3
 800b3e8:	4b95      	ldr	r3, [pc, #596]	; (800b640 <USB_EPStartXfer+0x2e0>)
 800b3ea:	4013      	ands	r3, r2
 800b3ec:	610b      	str	r3, [r1, #16]
 800b3ee:	e074      	b.n	800b4da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b3f0:	69bb      	ldr	r3, [r7, #24]
 800b3f2:	015a      	lsls	r2, r3, #5
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	4413      	add	r3, r2
 800b3f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3fc:	691a      	ldr	r2, [r3, #16]
 800b3fe:	69bb      	ldr	r3, [r7, #24]
 800b400:	0159      	lsls	r1, r3, #5
 800b402:	69fb      	ldr	r3, [r7, #28]
 800b404:	440b      	add	r3, r1
 800b406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40a:	4619      	mov	r1, r3
 800b40c:	4b8c      	ldr	r3, [pc, #560]	; (800b640 <USB_EPStartXfer+0x2e0>)
 800b40e:	4013      	ands	r3, r2
 800b410:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b412:	69bb      	ldr	r3, [r7, #24]
 800b414:	015a      	lsls	r2, r3, #5
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b41e:	691a      	ldr	r2, [r3, #16]
 800b420:	69bb      	ldr	r3, [r7, #24]
 800b422:	0159      	lsls	r1, r3, #5
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	440b      	add	r3, r1
 800b428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b42c:	4619      	mov	r1, r3
 800b42e:	4b83      	ldr	r3, [pc, #524]	; (800b63c <USB_EPStartXfer+0x2dc>)
 800b430:	4013      	ands	r3, r2
 800b432:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b434:	69bb      	ldr	r3, [r7, #24]
 800b436:	015a      	lsls	r2, r3, #5
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	4413      	add	r3, r2
 800b43c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b440:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	6999      	ldr	r1, [r3, #24]
 800b446:	68bb      	ldr	r3, [r7, #8]
 800b448:	68db      	ldr	r3, [r3, #12]
 800b44a:	440b      	add	r3, r1
 800b44c:	1e59      	subs	r1, r3, #1
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	fbb1 f3f3 	udiv	r3, r1, r3
 800b456:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b458:	4b7a      	ldr	r3, [pc, #488]	; (800b644 <USB_EPStartXfer+0x2e4>)
 800b45a:	400b      	ands	r3, r1
 800b45c:	69b9      	ldr	r1, [r7, #24]
 800b45e:	0148      	lsls	r0, r1, #5
 800b460:	69f9      	ldr	r1, [r7, #28]
 800b462:	4401      	add	r1, r0
 800b464:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b468:	4313      	orrs	r3, r2
 800b46a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b46c:	69bb      	ldr	r3, [r7, #24]
 800b46e:	015a      	lsls	r2, r3, #5
 800b470:	69fb      	ldr	r3, [r7, #28]
 800b472:	4413      	add	r3, r2
 800b474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b478:	691a      	ldr	r2, [r3, #16]
 800b47a:	68bb      	ldr	r3, [r7, #8]
 800b47c:	699b      	ldr	r3, [r3, #24]
 800b47e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b482:	69b9      	ldr	r1, [r7, #24]
 800b484:	0148      	lsls	r0, r1, #5
 800b486:	69f9      	ldr	r1, [r7, #28]
 800b488:	4401      	add	r1, r0
 800b48a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b48e:	4313      	orrs	r3, r2
 800b490:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b492:	68bb      	ldr	r3, [r7, #8]
 800b494:	791b      	ldrb	r3, [r3, #4]
 800b496:	2b01      	cmp	r3, #1
 800b498:	d11f      	bne.n	800b4da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b49a:	69bb      	ldr	r3, [r7, #24]
 800b49c:	015a      	lsls	r2, r3, #5
 800b49e:	69fb      	ldr	r3, [r7, #28]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4a6:	691b      	ldr	r3, [r3, #16]
 800b4a8:	69ba      	ldr	r2, [r7, #24]
 800b4aa:	0151      	lsls	r1, r2, #5
 800b4ac:	69fa      	ldr	r2, [r7, #28]
 800b4ae:	440a      	add	r2, r1
 800b4b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b4b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b4ba:	69bb      	ldr	r3, [r7, #24]
 800b4bc:	015a      	lsls	r2, r3, #5
 800b4be:	69fb      	ldr	r3, [r7, #28]
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4c6:	691b      	ldr	r3, [r3, #16]
 800b4c8:	69ba      	ldr	r2, [r7, #24]
 800b4ca:	0151      	lsls	r1, r2, #5
 800b4cc:	69fa      	ldr	r2, [r7, #28]
 800b4ce:	440a      	add	r2, r1
 800b4d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b4d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b4d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b4da:	79fb      	ldrb	r3, [r7, #7]
 800b4dc:	2b01      	cmp	r3, #1
 800b4de:	d14b      	bne.n	800b578 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b4e0:	68bb      	ldr	r3, [r7, #8]
 800b4e2:	695b      	ldr	r3, [r3, #20]
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	d009      	beq.n	800b4fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b4e8:	69bb      	ldr	r3, [r7, #24]
 800b4ea:	015a      	lsls	r2, r3, #5
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4f4:	461a      	mov	r2, r3
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	791b      	ldrb	r3, [r3, #4]
 800b500:	2b01      	cmp	r3, #1
 800b502:	d128      	bne.n	800b556 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b504:	69fb      	ldr	r3, [r7, #28]
 800b506:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b50a:	689b      	ldr	r3, [r3, #8]
 800b50c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b510:	2b00      	cmp	r3, #0
 800b512:	d110      	bne.n	800b536 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	015a      	lsls	r2, r3, #5
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	4413      	add	r3, r2
 800b51c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	69ba      	ldr	r2, [r7, #24]
 800b524:	0151      	lsls	r1, r2, #5
 800b526:	69fa      	ldr	r2, [r7, #28]
 800b528:	440a      	add	r2, r1
 800b52a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b52e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b532:	6013      	str	r3, [r2, #0]
 800b534:	e00f      	b.n	800b556 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	015a      	lsls	r2, r3, #5
 800b53a:	69fb      	ldr	r3, [r7, #28]
 800b53c:	4413      	add	r3, r2
 800b53e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	69ba      	ldr	r2, [r7, #24]
 800b546:	0151      	lsls	r1, r2, #5
 800b548:	69fa      	ldr	r2, [r7, #28]
 800b54a:	440a      	add	r2, r1
 800b54c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b554:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b556:	69bb      	ldr	r3, [r7, #24]
 800b558:	015a      	lsls	r2, r3, #5
 800b55a:	69fb      	ldr	r3, [r7, #28]
 800b55c:	4413      	add	r3, r2
 800b55e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	69ba      	ldr	r2, [r7, #24]
 800b566:	0151      	lsls	r1, r2, #5
 800b568:	69fa      	ldr	r2, [r7, #28]
 800b56a:	440a      	add	r2, r1
 800b56c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b570:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b574:	6013      	str	r3, [r2, #0]
 800b576:	e137      	b.n	800b7e8 <USB_EPStartXfer+0x488>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b578:	69bb      	ldr	r3, [r7, #24]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	69fb      	ldr	r3, [r7, #28]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	69ba      	ldr	r2, [r7, #24]
 800b588:	0151      	lsls	r1, r2, #5
 800b58a:	69fa      	ldr	r2, [r7, #28]
 800b58c:	440a      	add	r2, r1
 800b58e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b592:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b596:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b598:	68bb      	ldr	r3, [r7, #8]
 800b59a:	791b      	ldrb	r3, [r3, #4]
 800b59c:	2b01      	cmp	r3, #1
 800b59e:	d015      	beq.n	800b5cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b5a0:	68bb      	ldr	r3, [r7, #8]
 800b5a2:	699b      	ldr	r3, [r3, #24]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 811f 	beq.w	800b7e8 <USB_EPStartXfer+0x488>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b5aa:	69fb      	ldr	r3, [r7, #28]
 800b5ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b5b2:	68bb      	ldr	r3, [r7, #8]
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	f003 030f 	and.w	r3, r3, #15
 800b5ba:	2101      	movs	r1, #1
 800b5bc:	fa01 f303 	lsl.w	r3, r1, r3
 800b5c0:	69f9      	ldr	r1, [r7, #28]
 800b5c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b5c6:	4313      	orrs	r3, r2
 800b5c8:	634b      	str	r3, [r1, #52]	; 0x34
 800b5ca:	e10d      	b.n	800b7e8 <USB_EPStartXfer+0x488>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b5cc:	69fb      	ldr	r3, [r7, #28]
 800b5ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d110      	bne.n	800b5fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b5dc:	69bb      	ldr	r3, [r7, #24]
 800b5de:	015a      	lsls	r2, r3, #5
 800b5e0:	69fb      	ldr	r3, [r7, #28]
 800b5e2:	4413      	add	r3, r2
 800b5e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	69ba      	ldr	r2, [r7, #24]
 800b5ec:	0151      	lsls	r1, r2, #5
 800b5ee:	69fa      	ldr	r2, [r7, #28]
 800b5f0:	440a      	add	r2, r1
 800b5f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b5f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b5fa:	6013      	str	r3, [r2, #0]
 800b5fc:	e00f      	b.n	800b61e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b5fe:	69bb      	ldr	r3, [r7, #24]
 800b600:	015a      	lsls	r2, r3, #5
 800b602:	69fb      	ldr	r3, [r7, #28]
 800b604:	4413      	add	r3, r2
 800b606:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	69ba      	ldr	r2, [r7, #24]
 800b60e:	0151      	lsls	r1, r2, #5
 800b610:	69fa      	ldr	r2, [r7, #28]
 800b612:	440a      	add	r2, r1
 800b614:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b618:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b61c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b61e:	68bb      	ldr	r3, [r7, #8]
 800b620:	6919      	ldr	r1, [r3, #16]
 800b622:	68bb      	ldr	r3, [r7, #8]
 800b624:	781a      	ldrb	r2, [r3, #0]
 800b626:	68bb      	ldr	r3, [r7, #8]
 800b628:	699b      	ldr	r3, [r3, #24]
 800b62a:	b298      	uxth	r0, r3
 800b62c:	79fb      	ldrb	r3, [r7, #7]
 800b62e:	9300      	str	r3, [sp, #0]
 800b630:	4603      	mov	r3, r0
 800b632:	68f8      	ldr	r0, [r7, #12]
 800b634:	f000 faea 	bl	800bc0c <USB_WritePacket>
 800b638:	e0d6      	b.n	800b7e8 <USB_EPStartXfer+0x488>
 800b63a:	bf00      	nop
 800b63c:	e007ffff 	.word	0xe007ffff
 800b640:	fff80000 	.word	0xfff80000
 800b644:	1ff80000 	.word	0x1ff80000
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b648:	69bb      	ldr	r3, [r7, #24]
 800b64a:	015a      	lsls	r2, r3, #5
 800b64c:	69fb      	ldr	r3, [r7, #28]
 800b64e:	4413      	add	r3, r2
 800b650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b654:	691a      	ldr	r2, [r3, #16]
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	0159      	lsls	r1, r3, #5
 800b65a:	69fb      	ldr	r3, [r7, #28]
 800b65c:	440b      	add	r3, r1
 800b65e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b662:	4619      	mov	r1, r3
 800b664:	4b63      	ldr	r3, [pc, #396]	; (800b7f4 <USB_EPStartXfer+0x494>)
 800b666:	4013      	ands	r3, r2
 800b668:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b66a:	69bb      	ldr	r3, [r7, #24]
 800b66c:	015a      	lsls	r2, r3, #5
 800b66e:	69fb      	ldr	r3, [r7, #28]
 800b670:	4413      	add	r3, r2
 800b672:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b676:	691a      	ldr	r2, [r3, #16]
 800b678:	69bb      	ldr	r3, [r7, #24]
 800b67a:	0159      	lsls	r1, r3, #5
 800b67c:	69fb      	ldr	r3, [r7, #28]
 800b67e:	440b      	add	r3, r1
 800b680:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b684:	4619      	mov	r1, r3
 800b686:	4b5c      	ldr	r3, [pc, #368]	; (800b7f8 <USB_EPStartXfer+0x498>)
 800b688:	4013      	ands	r3, r2
 800b68a:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len == 0U)
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	699b      	ldr	r3, [r3, #24]
 800b690:	2b00      	cmp	r3, #0
 800b692:	d123      	bne.n	800b6dc <USB_EPStartXfer+0x37c>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800b694:	69bb      	ldr	r3, [r7, #24]
 800b696:	015a      	lsls	r2, r3, #5
 800b698:	69fb      	ldr	r3, [r7, #28]
 800b69a:	4413      	add	r3, r2
 800b69c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6a0:	691a      	ldr	r2, [r3, #16]
 800b6a2:	68bb      	ldr	r3, [r7, #8]
 800b6a4:	68db      	ldr	r3, [r3, #12]
 800b6a6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b6aa:	69b9      	ldr	r1, [r7, #24]
 800b6ac:	0148      	lsls	r0, r1, #5
 800b6ae:	69f9      	ldr	r1, [r7, #28]
 800b6b0:	4401      	add	r1, r0
 800b6b2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b6b6:	4313      	orrs	r3, r2
 800b6b8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	015a      	lsls	r2, r3, #5
 800b6be:	69fb      	ldr	r3, [r7, #28]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b6c6:	691b      	ldr	r3, [r3, #16]
 800b6c8:	69ba      	ldr	r2, [r7, #24]
 800b6ca:	0151      	lsls	r1, r2, #5
 800b6cc:	69fa      	ldr	r2, [r7, #28]
 800b6ce:	440a      	add	r2, r1
 800b6d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b6d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6d8:	6113      	str	r3, [r2, #16]
 800b6da:	e037      	b.n	800b74c <USB_EPStartXfer+0x3ec>
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	699a      	ldr	r2, [r3, #24]
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	1e5a      	subs	r2, r3, #1
 800b6e8:	68bb      	ldr	r3, [r7, #8]
 800b6ea:	68db      	ldr	r3, [r3, #12]
 800b6ec:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6f0:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800b6f2:	68bb      	ldr	r3, [r7, #8]
 800b6f4:	68db      	ldr	r3, [r3, #12]
 800b6f6:	8afa      	ldrh	r2, [r7, #22]
 800b6f8:	fb03 f202 	mul.w	r2, r3, r2
 800b6fc:	68bb      	ldr	r3, [r7, #8]
 800b6fe:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800b700:	69bb      	ldr	r3, [r7, #24]
 800b702:	015a      	lsls	r2, r3, #5
 800b704:	69fb      	ldr	r3, [r7, #28]
 800b706:	4413      	add	r3, r2
 800b708:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b70c:	691a      	ldr	r2, [r3, #16]
 800b70e:	8afb      	ldrh	r3, [r7, #22]
 800b710:	04d9      	lsls	r1, r3, #19
 800b712:	4b3a      	ldr	r3, [pc, #232]	; (800b7fc <USB_EPStartXfer+0x49c>)
 800b714:	400b      	ands	r3, r1
 800b716:	69b9      	ldr	r1, [r7, #24]
 800b718:	0148      	lsls	r0, r1, #5
 800b71a:	69f9      	ldr	r1, [r7, #28]
 800b71c:	4401      	add	r1, r0
 800b71e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b722:	4313      	orrs	r3, r2
 800b724:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	015a      	lsls	r2, r3, #5
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	4413      	add	r3, r2
 800b72e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b732:	691a      	ldr	r2, [r3, #16]
 800b734:	68bb      	ldr	r3, [r7, #8]
 800b736:	69db      	ldr	r3, [r3, #28]
 800b738:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b73c:	69b9      	ldr	r1, [r7, #24]
 800b73e:	0148      	lsls	r0, r1, #5
 800b740:	69f9      	ldr	r1, [r7, #28]
 800b742:	4401      	add	r1, r0
 800b744:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800b748:	4313      	orrs	r3, r2
 800b74a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b74c:	79fb      	ldrb	r3, [r7, #7]
 800b74e:	2b01      	cmp	r3, #1
 800b750:	d10d      	bne.n	800b76e <USB_EPStartXfer+0x40e>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	691b      	ldr	r3, [r3, #16]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d009      	beq.n	800b76e <USB_EPStartXfer+0x40e>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	6919      	ldr	r1, [r3, #16]
 800b75e:	69bb      	ldr	r3, [r7, #24]
 800b760:	015a      	lsls	r2, r3, #5
 800b762:	69fb      	ldr	r3, [r7, #28]
 800b764:	4413      	add	r3, r2
 800b766:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b76a:	460a      	mov	r2, r1
 800b76c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800b76e:	68bb      	ldr	r3, [r7, #8]
 800b770:	791b      	ldrb	r3, [r3, #4]
 800b772:	2b01      	cmp	r3, #1
 800b774:	d128      	bne.n	800b7c8 <USB_EPStartXfer+0x468>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b776:	69fb      	ldr	r3, [r7, #28]
 800b778:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b782:	2b00      	cmp	r3, #0
 800b784:	d110      	bne.n	800b7a8 <USB_EPStartXfer+0x448>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	015a      	lsls	r2, r3, #5
 800b78a:	69fb      	ldr	r3, [r7, #28]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	69ba      	ldr	r2, [r7, #24]
 800b796:	0151      	lsls	r1, r2, #5
 800b798:	69fa      	ldr	r2, [r7, #28]
 800b79a:	440a      	add	r2, r1
 800b79c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7a0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b7a4:	6013      	str	r3, [r2, #0]
 800b7a6:	e00f      	b.n	800b7c8 <USB_EPStartXfer+0x468>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800b7a8:	69bb      	ldr	r3, [r7, #24]
 800b7aa:	015a      	lsls	r2, r3, #5
 800b7ac:	69fb      	ldr	r3, [r7, #28]
 800b7ae:	4413      	add	r3, r2
 800b7b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	69ba      	ldr	r2, [r7, #24]
 800b7b8:	0151      	lsls	r1, r2, #5
 800b7ba:	69fa      	ldr	r2, [r7, #28]
 800b7bc:	440a      	add	r2, r1
 800b7be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7c6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	015a      	lsls	r2, r3, #5
 800b7cc:	69fb      	ldr	r3, [r7, #28]
 800b7ce:	4413      	add	r3, r2
 800b7d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b7d4:	681b      	ldr	r3, [r3, #0]
 800b7d6:	69ba      	ldr	r2, [r7, #24]
 800b7d8:	0151      	lsls	r1, r2, #5
 800b7da:	69fa      	ldr	r2, [r7, #28]
 800b7dc:	440a      	add	r2, r1
 800b7de:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b7e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b7e6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800b7e8:	2300      	movs	r3, #0
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3720      	adds	r7, #32
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
 800b7f2:	bf00      	nop
 800b7f4:	fff80000 	.word	0xfff80000
 800b7f8:	e007ffff 	.word	0xe007ffff
 800b7fc:	1ff80000 	.word	0x1ff80000

0800b800 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b800:	b480      	push	{r7}
 800b802:	b087      	sub	sp, #28
 800b804:	af00      	add	r7, sp, #0
 800b806:	60f8      	str	r0, [r7, #12]
 800b808:	60b9      	str	r1, [r7, #8]
 800b80a:	4613      	mov	r3, r2
 800b80c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800b812:	68bb      	ldr	r3, [r7, #8]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b818:	68bb      	ldr	r3, [r7, #8]
 800b81a:	785b      	ldrb	r3, [r3, #1]
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	f040 80ce 	bne.w	800b9be <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b822:	68bb      	ldr	r3, [r7, #8]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d132      	bne.n	800b890 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b82a:	693b      	ldr	r3, [r7, #16]
 800b82c:	015a      	lsls	r2, r3, #5
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	4413      	add	r3, r2
 800b832:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b836:	691a      	ldr	r2, [r3, #16]
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	0159      	lsls	r1, r3, #5
 800b83c:	697b      	ldr	r3, [r7, #20]
 800b83e:	440b      	add	r3, r1
 800b840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b844:	4619      	mov	r1, r3
 800b846:	4b9a      	ldr	r3, [pc, #616]	; (800bab0 <USB_EP0StartXfer+0x2b0>)
 800b848:	4013      	ands	r3, r2
 800b84a:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b84c:	693b      	ldr	r3, [r7, #16]
 800b84e:	015a      	lsls	r2, r3, #5
 800b850:	697b      	ldr	r3, [r7, #20]
 800b852:	4413      	add	r3, r2
 800b854:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b858:	691b      	ldr	r3, [r3, #16]
 800b85a:	693a      	ldr	r2, [r7, #16]
 800b85c:	0151      	lsls	r1, r2, #5
 800b85e:	697a      	ldr	r2, [r7, #20]
 800b860:	440a      	add	r2, r1
 800b862:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b866:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b86a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b86c:	693b      	ldr	r3, [r7, #16]
 800b86e:	015a      	lsls	r2, r3, #5
 800b870:	697b      	ldr	r3, [r7, #20]
 800b872:	4413      	add	r3, r2
 800b874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b878:	691a      	ldr	r2, [r3, #16]
 800b87a:	693b      	ldr	r3, [r7, #16]
 800b87c:	0159      	lsls	r1, r3, #5
 800b87e:	697b      	ldr	r3, [r7, #20]
 800b880:	440b      	add	r3, r1
 800b882:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b886:	4619      	mov	r1, r3
 800b888:	4b8a      	ldr	r3, [pc, #552]	; (800bab4 <USB_EP0StartXfer+0x2b4>)
 800b88a:	4013      	ands	r3, r2
 800b88c:	610b      	str	r3, [r1, #16]
 800b88e:	e04e      	b.n	800b92e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	015a      	lsls	r2, r3, #5
 800b894:	697b      	ldr	r3, [r7, #20]
 800b896:	4413      	add	r3, r2
 800b898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b89c:	691a      	ldr	r2, [r3, #16]
 800b89e:	693b      	ldr	r3, [r7, #16]
 800b8a0:	0159      	lsls	r1, r3, #5
 800b8a2:	697b      	ldr	r3, [r7, #20]
 800b8a4:	440b      	add	r3, r1
 800b8a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8aa:	4619      	mov	r1, r3
 800b8ac:	4b81      	ldr	r3, [pc, #516]	; (800bab4 <USB_EP0StartXfer+0x2b4>)
 800b8ae:	4013      	ands	r3, r2
 800b8b0:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	015a      	lsls	r2, r3, #5
 800b8b6:	697b      	ldr	r3, [r7, #20]
 800b8b8:	4413      	add	r3, r2
 800b8ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8be:	691a      	ldr	r2, [r3, #16]
 800b8c0:	693b      	ldr	r3, [r7, #16]
 800b8c2:	0159      	lsls	r1, r3, #5
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	440b      	add	r3, r1
 800b8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	4b78      	ldr	r3, [pc, #480]	; (800bab0 <USB_EP0StartXfer+0x2b0>)
 800b8d0:	4013      	ands	r3, r2
 800b8d2:	610b      	str	r3, [r1, #16]

      if (ep->xfer_len > ep->maxpacket)
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	699a      	ldr	r2, [r3, #24]
 800b8d8:	68bb      	ldr	r3, [r7, #8]
 800b8da:	68db      	ldr	r3, [r3, #12]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d903      	bls.n	800b8e8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800b8e0:	68bb      	ldr	r3, [r7, #8]
 800b8e2:	68da      	ldr	r2, [r3, #12]
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b8e8:	693b      	ldr	r3, [r7, #16]
 800b8ea:	015a      	lsls	r2, r3, #5
 800b8ec:	697b      	ldr	r3, [r7, #20]
 800b8ee:	4413      	add	r3, r2
 800b8f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8f4:	691b      	ldr	r3, [r3, #16]
 800b8f6:	693a      	ldr	r2, [r7, #16]
 800b8f8:	0151      	lsls	r1, r2, #5
 800b8fa:	697a      	ldr	r2, [r7, #20]
 800b8fc:	440a      	add	r2, r1
 800b8fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b902:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b908:	693b      	ldr	r3, [r7, #16]
 800b90a:	015a      	lsls	r2, r3, #5
 800b90c:	697b      	ldr	r3, [r7, #20]
 800b90e:	4413      	add	r3, r2
 800b910:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b914:	691a      	ldr	r2, [r3, #16]
 800b916:	68bb      	ldr	r3, [r7, #8]
 800b918:	699b      	ldr	r3, [r3, #24]
 800b91a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b91e:	6939      	ldr	r1, [r7, #16]
 800b920:	0148      	lsls	r0, r1, #5
 800b922:	6979      	ldr	r1, [r7, #20]
 800b924:	4401      	add	r1, r0
 800b926:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b92a:	4313      	orrs	r3, r2
 800b92c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800b92e:	79fb      	ldrb	r3, [r7, #7]
 800b930:	2b01      	cmp	r3, #1
 800b932:	d11e      	bne.n	800b972 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b934:	68bb      	ldr	r3, [r7, #8]
 800b936:	695b      	ldr	r3, [r3, #20]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d009      	beq.n	800b950 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b93c:	693b      	ldr	r3, [r7, #16]
 800b93e:	015a      	lsls	r2, r3, #5
 800b940:	697b      	ldr	r3, [r7, #20]
 800b942:	4413      	add	r3, r2
 800b944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b948:	461a      	mov	r2, r3
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	695b      	ldr	r3, [r3, #20]
 800b94e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b950:	693b      	ldr	r3, [r7, #16]
 800b952:	015a      	lsls	r2, r3, #5
 800b954:	697b      	ldr	r3, [r7, #20]
 800b956:	4413      	add	r3, r2
 800b958:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	693a      	ldr	r2, [r7, #16]
 800b960:	0151      	lsls	r1, r2, #5
 800b962:	697a      	ldr	r2, [r7, #20]
 800b964:	440a      	add	r2, r1
 800b966:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b96a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b96e:	6013      	str	r3, [r2, #0]
 800b970:	e097      	b.n	800baa2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	015a      	lsls	r2, r3, #5
 800b976:	697b      	ldr	r3, [r7, #20]
 800b978:	4413      	add	r3, r2
 800b97a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	693a      	ldr	r2, [r7, #16]
 800b982:	0151      	lsls	r1, r2, #5
 800b984:	697a      	ldr	r2, [r7, #20]
 800b986:	440a      	add	r2, r1
 800b988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b98c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b990:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	699b      	ldr	r3, [r3, #24]
 800b996:	2b00      	cmp	r3, #0
 800b998:	f000 8083 	beq.w	800baa2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b9a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b9a4:	68bb      	ldr	r3, [r7, #8]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	f003 030f 	and.w	r3, r3, #15
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	fa01 f303 	lsl.w	r3, r1, r3
 800b9b2:	6979      	ldr	r1, [r7, #20]
 800b9b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b9b8:	4313      	orrs	r3, r2
 800b9ba:	634b      	str	r3, [r1, #52]	; 0x34
 800b9bc:	e071      	b.n	800baa2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b9be:	693b      	ldr	r3, [r7, #16]
 800b9c0:	015a      	lsls	r2, r3, #5
 800b9c2:	697b      	ldr	r3, [r7, #20]
 800b9c4:	4413      	add	r3, r2
 800b9c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ca:	691a      	ldr	r2, [r3, #16]
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	0159      	lsls	r1, r3, #5
 800b9d0:	697b      	ldr	r3, [r7, #20]
 800b9d2:	440b      	add	r3, r1
 800b9d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d8:	4619      	mov	r1, r3
 800b9da:	4b36      	ldr	r3, [pc, #216]	; (800bab4 <USB_EP0StartXfer+0x2b4>)
 800b9dc:	4013      	ands	r3, r2
 800b9de:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b9e0:	693b      	ldr	r3, [r7, #16]
 800b9e2:	015a      	lsls	r2, r3, #5
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	4413      	add	r3, r2
 800b9e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9ec:	691a      	ldr	r2, [r3, #16]
 800b9ee:	693b      	ldr	r3, [r7, #16]
 800b9f0:	0159      	lsls	r1, r3, #5
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	440b      	add	r3, r1
 800b9f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9fa:	4619      	mov	r1, r3
 800b9fc:	4b2c      	ldr	r3, [pc, #176]	; (800bab0 <USB_EP0StartXfer+0x2b0>)
 800b9fe:	4013      	ands	r3, r2
 800ba00:	610b      	str	r3, [r1, #16]

    if (ep->xfer_len > 0U)
 800ba02:	68bb      	ldr	r3, [r7, #8]
 800ba04:	699b      	ldr	r3, [r3, #24]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d003      	beq.n	800ba12 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800ba0a:	68bb      	ldr	r3, [r7, #8]
 800ba0c:	68da      	ldr	r2, [r3, #12]
 800ba0e:	68bb      	ldr	r3, [r7, #8]
 800ba10:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800ba12:	68bb      	ldr	r3, [r7, #8]
 800ba14:	68da      	ldr	r2, [r3, #12]
 800ba16:	68bb      	ldr	r3, [r7, #8]
 800ba18:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba1a:	693b      	ldr	r3, [r7, #16]
 800ba1c:	015a      	lsls	r2, r3, #5
 800ba1e:	697b      	ldr	r3, [r7, #20]
 800ba20:	4413      	add	r3, r2
 800ba22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba26:	691b      	ldr	r3, [r3, #16]
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	0151      	lsls	r1, r2, #5
 800ba2c:	697a      	ldr	r2, [r7, #20]
 800ba2e:	440a      	add	r2, r1
 800ba30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba38:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	015a      	lsls	r2, r3, #5
 800ba3e:	697b      	ldr	r3, [r7, #20]
 800ba40:	4413      	add	r3, r2
 800ba42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba46:	691a      	ldr	r2, [r3, #16]
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	69db      	ldr	r3, [r3, #28]
 800ba4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba50:	6939      	ldr	r1, [r7, #16]
 800ba52:	0148      	lsls	r0, r1, #5
 800ba54:	6979      	ldr	r1, [r7, #20]
 800ba56:	4401      	add	r1, r0
 800ba58:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba5c:	4313      	orrs	r3, r2
 800ba5e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 800ba60:	79fb      	ldrb	r3, [r7, #7]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d10d      	bne.n	800ba82 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800ba66:	68bb      	ldr	r3, [r7, #8]
 800ba68:	691b      	ldr	r3, [r3, #16]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	d009      	beq.n	800ba82 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800ba6e:	68bb      	ldr	r3, [r7, #8]
 800ba70:	6919      	ldr	r1, [r3, #16]
 800ba72:	693b      	ldr	r3, [r7, #16]
 800ba74:	015a      	lsls	r2, r3, #5
 800ba76:	697b      	ldr	r3, [r7, #20]
 800ba78:	4413      	add	r3, r2
 800ba7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7e:	460a      	mov	r2, r1
 800ba80:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	015a      	lsls	r2, r3, #5
 800ba86:	697b      	ldr	r3, [r7, #20]
 800ba88:	4413      	add	r3, r2
 800ba8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	693a      	ldr	r2, [r7, #16]
 800ba92:	0151      	lsls	r1, r2, #5
 800ba94:	697a      	ldr	r2, [r7, #20]
 800ba96:	440a      	add	r2, r1
 800ba98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba9c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800baa0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800baa2:	2300      	movs	r3, #0
}
 800baa4:	4618      	mov	r0, r3
 800baa6:	371c      	adds	r7, #28
 800baa8:	46bd      	mov	sp, r7
 800baaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baae:	4770      	bx	lr
 800bab0:	e007ffff 	.word	0xe007ffff
 800bab4:	fff80000 	.word	0xfff80000

0800bab8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bab8:	b480      	push	{r7}
 800baba:	b087      	sub	sp, #28
 800babc:	af00      	add	r7, sp, #0
 800babe:	6078      	str	r0, [r7, #4]
 800bac0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bac2:	2300      	movs	r3, #0
 800bac4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bac6:	2300      	movs	r3, #0
 800bac8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bace:	683b      	ldr	r3, [r7, #0]
 800bad0:	785b      	ldrb	r3, [r3, #1]
 800bad2:	2b01      	cmp	r3, #1
 800bad4:	d14a      	bne.n	800bb6c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	781b      	ldrb	r3, [r3, #0]
 800bada:	015a      	lsls	r2, r3, #5
 800badc:	693b      	ldr	r3, [r7, #16]
 800bade:	4413      	add	r3, r2
 800bae0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800baea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800baee:	f040 8086 	bne.w	800bbfe <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	015a      	lsls	r2, r3, #5
 800baf8:	693b      	ldr	r3, [r7, #16]
 800bafa:	4413      	add	r3, r2
 800bafc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	683a      	ldr	r2, [r7, #0]
 800bb04:	7812      	ldrb	r2, [r2, #0]
 800bb06:	0151      	lsls	r1, r2, #5
 800bb08:	693a      	ldr	r2, [r7, #16]
 800bb0a:	440a      	add	r2, r1
 800bb0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb10:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bb14:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bb16:	683b      	ldr	r3, [r7, #0]
 800bb18:	781b      	ldrb	r3, [r3, #0]
 800bb1a:	015a      	lsls	r2, r3, #5
 800bb1c:	693b      	ldr	r3, [r7, #16]
 800bb1e:	4413      	add	r3, r2
 800bb20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	683a      	ldr	r2, [r7, #0]
 800bb28:	7812      	ldrb	r2, [r2, #0]
 800bb2a:	0151      	lsls	r1, r2, #5
 800bb2c:	693a      	ldr	r2, [r7, #16]
 800bb2e:	440a      	add	r2, r1
 800bb30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bb34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bb38:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bb3a:	68fb      	ldr	r3, [r7, #12]
 800bb3c:	3301      	adds	r3, #1
 800bb3e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	f242 7210 	movw	r2, #10000	; 0x2710
 800bb46:	4293      	cmp	r3, r2
 800bb48:	d902      	bls.n	800bb50 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	75fb      	strb	r3, [r7, #23]
          break;
 800bb4e:	e056      	b.n	800bbfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bb50:	683b      	ldr	r3, [r7, #0]
 800bb52:	781b      	ldrb	r3, [r3, #0]
 800bb54:	015a      	lsls	r2, r3, #5
 800bb56:	693b      	ldr	r3, [r7, #16]
 800bb58:	4413      	add	r3, r2
 800bb5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb68:	d0e7      	beq.n	800bb3a <USB_EPStopXfer+0x82>
 800bb6a:	e048      	b.n	800bbfe <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	781b      	ldrb	r3, [r3, #0]
 800bb70:	015a      	lsls	r2, r3, #5
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	4413      	add	r3, r2
 800bb76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bb80:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bb84:	d13b      	bne.n	800bbfe <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	015a      	lsls	r2, r3, #5
 800bb8c:	693b      	ldr	r3, [r7, #16]
 800bb8e:	4413      	add	r3, r2
 800bb90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	683a      	ldr	r2, [r7, #0]
 800bb98:	7812      	ldrb	r2, [r2, #0]
 800bb9a:	0151      	lsls	r1, r2, #5
 800bb9c:	693a      	ldr	r2, [r7, #16]
 800bb9e:	440a      	add	r2, r1
 800bba0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bba4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bba8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	015a      	lsls	r2, r3, #5
 800bbb0:	693b      	ldr	r3, [r7, #16]
 800bbb2:	4413      	add	r3, r2
 800bbb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	683a      	ldr	r2, [r7, #0]
 800bbbc:	7812      	ldrb	r2, [r2, #0]
 800bbbe:	0151      	lsls	r1, r2, #5
 800bbc0:	693a      	ldr	r2, [r7, #16]
 800bbc2:	440a      	add	r2, r1
 800bbc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bbc8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bbcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bbce:	68fb      	ldr	r3, [r7, #12]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	f242 7210 	movw	r2, #10000	; 0x2710
 800bbda:	4293      	cmp	r3, r2
 800bbdc:	d902      	bls.n	800bbe4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bbde:	2301      	movs	r3, #1
 800bbe0:	75fb      	strb	r3, [r7, #23]
          break;
 800bbe2:	e00c      	b.n	800bbfe <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	781b      	ldrb	r3, [r3, #0]
 800bbe8:	015a      	lsls	r2, r3, #5
 800bbea:	693b      	ldr	r3, [r7, #16]
 800bbec:	4413      	add	r3, r2
 800bbee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbf8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbfc:	d0e7      	beq.n	800bbce <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bbfe:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	371c      	adds	r7, #28
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bc0c:	b480      	push	{r7}
 800bc0e:	b089      	sub	sp, #36	; 0x24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	4611      	mov	r1, r2
 800bc18:	461a      	mov	r2, r3
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	71fb      	strb	r3, [r7, #7]
 800bc1e:	4613      	mov	r3, r2
 800bc20:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bc2a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d123      	bne.n	800bc7a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bc32:	88bb      	ldrh	r3, [r7, #4]
 800bc34:	3303      	adds	r3, #3
 800bc36:	089b      	lsrs	r3, r3, #2
 800bc38:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bc3a:	2300      	movs	r3, #0
 800bc3c:	61bb      	str	r3, [r7, #24]
 800bc3e:	e018      	b.n	800bc72 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc40:	79fb      	ldrb	r3, [r7, #7]
 800bc42:	031a      	lsls	r2, r3, #12
 800bc44:	697b      	ldr	r3, [r7, #20]
 800bc46:	4413      	add	r3, r2
 800bc48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bc4c:	461a      	mov	r2, r3
 800bc4e:	69fb      	ldr	r3, [r7, #28]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc54:	69fb      	ldr	r3, [r7, #28]
 800bc56:	3301      	adds	r3, #1
 800bc58:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc5a:	69fb      	ldr	r3, [r7, #28]
 800bc5c:	3301      	adds	r3, #1
 800bc5e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc60:	69fb      	ldr	r3, [r7, #28]
 800bc62:	3301      	adds	r3, #1
 800bc64:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc66:	69fb      	ldr	r3, [r7, #28]
 800bc68:	3301      	adds	r3, #1
 800bc6a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	61bb      	str	r3, [r7, #24]
 800bc72:	69ba      	ldr	r2, [r7, #24]
 800bc74:	693b      	ldr	r3, [r7, #16]
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d3e2      	bcc.n	800bc40 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc7a:	2300      	movs	r3, #0
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	3724      	adds	r7, #36	; 0x24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc86:	4770      	bx	lr

0800bc88 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc88:	b480      	push	{r7}
 800bc8a:	b08b      	sub	sp, #44	; 0x2c
 800bc8c:	af00      	add	r7, sp, #0
 800bc8e:	60f8      	str	r0, [r7, #12]
 800bc90:	60b9      	str	r1, [r7, #8]
 800bc92:	4613      	mov	r3, r2
 800bc94:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bc9a:	68bb      	ldr	r3, [r7, #8]
 800bc9c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bc9e:	88fb      	ldrh	r3, [r7, #6]
 800bca0:	089b      	lsrs	r3, r3, #2
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bca6:	88fb      	ldrh	r3, [r7, #6]
 800bca8:	f003 0303 	and.w	r3, r3, #3
 800bcac:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bcae:	2300      	movs	r3, #0
 800bcb0:	623b      	str	r3, [r7, #32]
 800bcb2:	e014      	b.n	800bcde <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bcb4:	69bb      	ldr	r3, [r7, #24]
 800bcb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcba:	681a      	ldr	r2, [r3, #0]
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcbe:	601a      	str	r2, [r3, #0]
    pDest++;
 800bcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc2:	3301      	adds	r3, #1
 800bcc4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	3301      	adds	r3, #1
 800bcca:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcce:	3301      	adds	r3, #1
 800bcd0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bcd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bcd8:	6a3b      	ldr	r3, [r7, #32]
 800bcda:	3301      	adds	r3, #1
 800bcdc:	623b      	str	r3, [r7, #32]
 800bcde:	6a3a      	ldr	r2, [r7, #32]
 800bce0:	697b      	ldr	r3, [r7, #20]
 800bce2:	429a      	cmp	r2, r3
 800bce4:	d3e6      	bcc.n	800bcb4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bce6:	8bfb      	ldrh	r3, [r7, #30]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d01e      	beq.n	800bd2a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bcec:	2300      	movs	r3, #0
 800bcee:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bcf6:	461a      	mov	r2, r3
 800bcf8:	f107 0310 	add.w	r3, r7, #16
 800bcfc:	6812      	ldr	r2, [r2, #0]
 800bcfe:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bd00:	693a      	ldr	r2, [r7, #16]
 800bd02:	6a3b      	ldr	r3, [r7, #32]
 800bd04:	b2db      	uxtb	r3, r3
 800bd06:	00db      	lsls	r3, r3, #3
 800bd08:	fa22 f303 	lsr.w	r3, r2, r3
 800bd0c:	b2da      	uxtb	r2, r3
 800bd0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd10:	701a      	strb	r2, [r3, #0]
      i++;
 800bd12:	6a3b      	ldr	r3, [r7, #32]
 800bd14:	3301      	adds	r3, #1
 800bd16:	623b      	str	r3, [r7, #32]
      pDest++;
 800bd18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd1a:	3301      	adds	r3, #1
 800bd1c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800bd1e:	8bfb      	ldrh	r3, [r7, #30]
 800bd20:	3b01      	subs	r3, #1
 800bd22:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bd24:	8bfb      	ldrh	r3, [r7, #30]
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d1ea      	bne.n	800bd00 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bd2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	372c      	adds	r7, #44	; 0x2c
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b085      	sub	sp, #20
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
 800bd40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bd4c:	683b      	ldr	r3, [r7, #0]
 800bd4e:	785b      	ldrb	r3, [r3, #1]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d12c      	bne.n	800bdae <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bd54:	68bb      	ldr	r3, [r7, #8]
 800bd56:	015a      	lsls	r2, r3, #5
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd60:	681b      	ldr	r3, [r3, #0]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	db12      	blt.n	800bd8c <USB_EPSetStall+0x54>
 800bd66:	68bb      	ldr	r3, [r7, #8]
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d00f      	beq.n	800bd8c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800bd6c:	68bb      	ldr	r3, [r7, #8]
 800bd6e:	015a      	lsls	r2, r3, #5
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	4413      	add	r3, r2
 800bd74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	68ba      	ldr	r2, [r7, #8]
 800bd7c:	0151      	lsls	r1, r2, #5
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	440a      	add	r2, r1
 800bd82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bd86:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bd8a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	015a      	lsls	r2, r3, #5
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	4413      	add	r3, r2
 800bd94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	0151      	lsls	r1, r2, #5
 800bd9e:	68fa      	ldr	r2, [r7, #12]
 800bda0:	440a      	add	r2, r1
 800bda2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bda6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bdaa:	6013      	str	r3, [r2, #0]
 800bdac:	e02b      	b.n	800be06 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800bdae:	68bb      	ldr	r3, [r7, #8]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	db12      	blt.n	800bde6 <USB_EPSetStall+0xae>
 800bdc0:	68bb      	ldr	r3, [r7, #8]
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d00f      	beq.n	800bde6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bdc6:	68bb      	ldr	r3, [r7, #8]
 800bdc8:	015a      	lsls	r2, r3, #5
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	4413      	add	r3, r2
 800bdce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	68ba      	ldr	r2, [r7, #8]
 800bdd6:	0151      	lsls	r1, r2, #5
 800bdd8:	68fa      	ldr	r2, [r7, #12]
 800bdda:	440a      	add	r2, r1
 800bddc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bde0:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bde4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bde6:	68bb      	ldr	r3, [r7, #8]
 800bde8:	015a      	lsls	r2, r3, #5
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	4413      	add	r3, r2
 800bdee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	68ba      	ldr	r2, [r7, #8]
 800bdf6:	0151      	lsls	r1, r2, #5
 800bdf8:	68fa      	ldr	r2, [r7, #12]
 800bdfa:	440a      	add	r2, r1
 800bdfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800be04:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800be06:	2300      	movs	r3, #0
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be14:	b480      	push	{r7}
 800be16:	b085      	sub	sp, #20
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be22:	683b      	ldr	r3, [r7, #0]
 800be24:	781b      	ldrb	r3, [r3, #0]
 800be26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be28:	683b      	ldr	r3, [r7, #0]
 800be2a:	785b      	ldrb	r3, [r3, #1]
 800be2c:	2b01      	cmp	r3, #1
 800be2e:	d128      	bne.n	800be82 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800be30:	68bb      	ldr	r3, [r7, #8]
 800be32:	015a      	lsls	r2, r3, #5
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	4413      	add	r3, r2
 800be38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	68ba      	ldr	r2, [r7, #8]
 800be40:	0151      	lsls	r1, r2, #5
 800be42:	68fa      	ldr	r2, [r7, #12]
 800be44:	440a      	add	r2, r1
 800be46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be4a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800be4e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800be50:	683b      	ldr	r3, [r7, #0]
 800be52:	791b      	ldrb	r3, [r3, #4]
 800be54:	2b03      	cmp	r3, #3
 800be56:	d003      	beq.n	800be60 <USB_EPClearStall+0x4c>
 800be58:	683b      	ldr	r3, [r7, #0]
 800be5a:	791b      	ldrb	r3, [r3, #4]
 800be5c:	2b02      	cmp	r3, #2
 800be5e:	d138      	bne.n	800bed2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800be60:	68bb      	ldr	r3, [r7, #8]
 800be62:	015a      	lsls	r2, r3, #5
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	4413      	add	r3, r2
 800be68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68ba      	ldr	r2, [r7, #8]
 800be70:	0151      	lsls	r1, r2, #5
 800be72:	68fa      	ldr	r2, [r7, #12]
 800be74:	440a      	add	r2, r1
 800be76:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800be7e:	6013      	str	r3, [r2, #0]
 800be80:	e027      	b.n	800bed2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	015a      	lsls	r2, r3, #5
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	4413      	add	r3, r2
 800be8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	68ba      	ldr	r2, [r7, #8]
 800be92:	0151      	lsls	r1, r2, #5
 800be94:	68fa      	ldr	r2, [r7, #12]
 800be96:	440a      	add	r2, r1
 800be98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800be9c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bea0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bea2:	683b      	ldr	r3, [r7, #0]
 800bea4:	791b      	ldrb	r3, [r3, #4]
 800bea6:	2b03      	cmp	r3, #3
 800bea8:	d003      	beq.n	800beb2 <USB_EPClearStall+0x9e>
 800beaa:	683b      	ldr	r3, [r7, #0]
 800beac:	791b      	ldrb	r3, [r3, #4]
 800beae:	2b02      	cmp	r3, #2
 800beb0:	d10f      	bne.n	800bed2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	015a      	lsls	r2, r3, #5
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	4413      	add	r3, r2
 800beba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68ba      	ldr	r2, [r7, #8]
 800bec2:	0151      	lsls	r1, r2, #5
 800bec4:	68fa      	ldr	r2, [r7, #12]
 800bec6:	440a      	add	r2, r1
 800bec8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800becc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bed0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bed2:	2300      	movs	r3, #0
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bee0:	b480      	push	{r7}
 800bee2:	b085      	sub	sp, #20
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bef0:	68fb      	ldr	r3, [r7, #12]
 800bef2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	68fa      	ldr	r2, [r7, #12]
 800befa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800befe:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bf02:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf0a:	681a      	ldr	r2, [r3, #0]
 800bf0c:	78fb      	ldrb	r3, [r7, #3]
 800bf0e:	011b      	lsls	r3, r3, #4
 800bf10:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800bf14:	68f9      	ldr	r1, [r7, #12]
 800bf16:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bf1a:	4313      	orrs	r3, r2
 800bf1c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800bf1e:	2300      	movs	r3, #0
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3714      	adds	r7, #20
 800bf24:	46bd      	mov	sp, r7
 800bf26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf2a:	4770      	bx	lr

0800bf2c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b085      	sub	sp, #20
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf46:	f023 0303 	bic.w	r3, r3, #3
 800bf4a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf52:	685b      	ldr	r3, [r3, #4]
 800bf54:	68fa      	ldr	r2, [r7, #12]
 800bf56:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf5a:	f023 0302 	bic.w	r3, r3, #2
 800bf5e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bf60:	2300      	movs	r3, #0
}
 800bf62:	4618      	mov	r0, r3
 800bf64:	3714      	adds	r7, #20
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr

0800bf6e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800bf6e:	b480      	push	{r7}
 800bf70:	b085      	sub	sp, #20
 800bf72:	af00      	add	r7, sp, #0
 800bf74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	68fa      	ldr	r2, [r7, #12]
 800bf84:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800bf88:	f023 0303 	bic.w	r3, r3, #3
 800bf8c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800bf8e:	68fb      	ldr	r3, [r7, #12]
 800bf90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bf94:	685b      	ldr	r3, [r3, #4]
 800bf96:	68fa      	ldr	r2, [r7, #12]
 800bf98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bf9c:	f043 0302 	orr.w	r3, r3, #2
 800bfa0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800bfa2:	2300      	movs	r3, #0
}
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	3714      	adds	r7, #20
 800bfa8:	46bd      	mov	sp, r7
 800bfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfae:	4770      	bx	lr

0800bfb0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b085      	sub	sp, #20
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	695b      	ldr	r3, [r3, #20]
 800bfbc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	699b      	ldr	r3, [r3, #24]
 800bfc2:	68fa      	ldr	r2, [r7, #12]
 800bfc4:	4013      	ands	r3, r2
 800bfc6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
}
 800bfca:	4618      	mov	r0, r3
 800bfcc:	3714      	adds	r7, #20
 800bfce:	46bd      	mov	sp, r7
 800bfd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfd4:	4770      	bx	lr

0800bfd6 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800bfd6:	b480      	push	{r7}
 800bfd8:	b085      	sub	sp, #20
 800bfda:	af00      	add	r7, sp, #0
 800bfdc:	6078      	str	r0, [r7, #4]
 800bfde:	460b      	mov	r3, r1
 800bfe0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800bfe6:	78fb      	ldrb	r3, [r7, #3]
 800bfe8:	015a      	lsls	r2, r3, #5
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	4413      	add	r3, r2
 800bfee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800bff2:	689b      	ldr	r3, [r3, #8]
 800bff4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bff6:	78fb      	ldrb	r3, [r7, #3]
 800bff8:	015a      	lsls	r2, r3, #5
 800bffa:	68fb      	ldr	r3, [r7, #12]
 800bffc:	4413      	add	r3, r2
 800bffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	68ba      	ldr	r2, [r7, #8]
 800c006:	4013      	ands	r3, r2
 800c008:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c00a:	68bb      	ldr	r3, [r7, #8]
}
 800c00c:	4618      	mov	r0, r3
 800c00e:	3714      	adds	r7, #20
 800c010:	46bd      	mov	sp, r7
 800c012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c016:	4770      	bx	lr

0800c018 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c018:	b480      	push	{r7}
 800c01a:	b085      	sub	sp, #20
 800c01c:	af00      	add	r7, sp, #0
 800c01e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c034:	69db      	ldr	r3, [r3, #28]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	4013      	ands	r3, r2
 800c03a:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	0c1b      	lsrs	r3, r3, #16
}
 800c040:	4618      	mov	r0, r3
 800c042:	3714      	adds	r7, #20
 800c044:	46bd      	mov	sp, r7
 800c046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c04a:	4770      	bx	lr

0800c04c <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c04c:	b480      	push	{r7}
 800c04e:	b085      	sub	sp, #20
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c05e:	699b      	ldr	r3, [r3, #24]
 800c060:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c068:	69db      	ldr	r3, [r3, #28]
 800c06a:	68ba      	ldr	r2, [r7, #8]
 800c06c:	4013      	ands	r3, r2
 800c06e:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	b29b      	uxth	r3, r3
}
 800c074:	4618      	mov	r0, r3
 800c076:	3714      	adds	r7, #20
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr

0800c080 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c080:	b480      	push	{r7}
 800c082:	b085      	sub	sp, #20
 800c084:	af00      	add	r7, sp, #0
 800c086:	6078      	str	r0, [r7, #4]
 800c088:	460b      	mov	r3, r1
 800c08a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c090:	78fb      	ldrb	r3, [r7, #3]
 800c092:	015a      	lsls	r2, r3, #5
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	4413      	add	r3, r2
 800c098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c09c:	689b      	ldr	r3, [r3, #8]
 800c09e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c0a0:	68fb      	ldr	r3, [r7, #12]
 800c0a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0a6:	695b      	ldr	r3, [r3, #20]
 800c0a8:	68ba      	ldr	r2, [r7, #8]
 800c0aa:	4013      	ands	r3, r2
 800c0ac:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c0ae:	68bb      	ldr	r3, [r7, #8]
}
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	3714      	adds	r7, #20
 800c0b4:	46bd      	mov	sp, r7
 800c0b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ba:	4770      	bx	lr

0800c0bc <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c0bc:	b480      	push	{r7}
 800c0be:	b087      	sub	sp, #28
 800c0c0:	af00      	add	r7, sp, #0
 800c0c2:	6078      	str	r0, [r7, #4]
 800c0c4:	460b      	mov	r3, r1
 800c0c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c0cc:	697b      	ldr	r3, [r7, #20]
 800c0ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0d2:	691b      	ldr	r3, [r3, #16]
 800c0d4:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c0d6:	697b      	ldr	r3, [r7, #20]
 800c0d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0de:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c0e0:	78fb      	ldrb	r3, [r7, #3]
 800c0e2:	f003 030f 	and.w	r3, r3, #15
 800c0e6:	68fa      	ldr	r2, [r7, #12]
 800c0e8:	fa22 f303 	lsr.w	r3, r2, r3
 800c0ec:	01db      	lsls	r3, r3, #7
 800c0ee:	b2db      	uxtb	r3, r3
 800c0f0:	693a      	ldr	r2, [r7, #16]
 800c0f2:	4313      	orrs	r3, r2
 800c0f4:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c0f6:	78fb      	ldrb	r3, [r7, #3]
 800c0f8:	015a      	lsls	r2, r3, #5
 800c0fa:	697b      	ldr	r3, [r7, #20]
 800c0fc:	4413      	add	r3, r2
 800c0fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c102:	689b      	ldr	r3, [r3, #8]
 800c104:	693a      	ldr	r2, [r7, #16]
 800c106:	4013      	ands	r3, r2
 800c108:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c10a:	68bb      	ldr	r3, [r7, #8]
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	371c      	adds	r7, #28
 800c110:	46bd      	mov	sp, r7
 800c112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c116:	4770      	bx	lr

0800c118 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c118:	b480      	push	{r7}
 800c11a:	b083      	sub	sp, #12
 800c11c:	af00      	add	r7, sp, #0
 800c11e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	695b      	ldr	r3, [r3, #20]
 800c124:	f003 0301 	and.w	r3, r3, #1
}
 800c128:	4618      	mov	r0, r3
 800c12a:	370c      	adds	r7, #12
 800c12c:	46bd      	mov	sp, r7
 800c12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c132:	4770      	bx	lr

0800c134 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
 800c13a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c146:	681a      	ldr	r2, [r3, #0]
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c14e:	4619      	mov	r1, r3
 800c150:	4b09      	ldr	r3, [pc, #36]	; (800c178 <USB_ActivateSetup+0x44>)
 800c152:	4013      	ands	r3, r2
 800c154:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c156:	68fb      	ldr	r3, [r7, #12]
 800c158:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	68fa      	ldr	r2, [r7, #12]
 800c160:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c164:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c168:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c16a:	2300      	movs	r3, #0
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3714      	adds	r7, #20
 800c170:	46bd      	mov	sp, r7
 800c172:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c176:	4770      	bx	lr
 800c178:	fffff800 	.word	0xfffff800

0800c17c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c17c:	b480      	push	{r7}
 800c17e:	b087      	sub	sp, #28
 800c180:	af00      	add	r7, sp, #0
 800c182:	60f8      	str	r0, [r7, #12]
 800c184:	460b      	mov	r3, r1
 800c186:	607a      	str	r2, [r7, #4]
 800c188:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	333c      	adds	r3, #60	; 0x3c
 800c192:	3304      	adds	r3, #4
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	4a26      	ldr	r2, [pc, #152]	; (800c234 <USB_EP0_OutStart+0xb8>)
 800c19c:	4293      	cmp	r3, r2
 800c19e:	d90a      	bls.n	800c1b6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1a6:	681b      	ldr	r3, [r3, #0]
 800c1a8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c1ac:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c1b0:	d101      	bne.n	800c1b6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	e037      	b.n	800c226 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c1b6:	697b      	ldr	r3, [r7, #20]
 800c1b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1bc:	461a      	mov	r2, r3
 800c1be:	2300      	movs	r3, #0
 800c1c0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c1c2:	697b      	ldr	r3, [r7, #20]
 800c1c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1c8:	691b      	ldr	r3, [r3, #16]
 800c1ca:	697a      	ldr	r2, [r7, #20]
 800c1cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1d0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c1d4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c1d6:	697b      	ldr	r3, [r7, #20]
 800c1d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1dc:	691b      	ldr	r3, [r3, #16]
 800c1de:	697a      	ldr	r2, [r7, #20]
 800c1e0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1e4:	f043 0318 	orr.w	r3, r3, #24
 800c1e8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c1ea:	697b      	ldr	r3, [r7, #20]
 800c1ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c1f0:	691b      	ldr	r3, [r3, #16]
 800c1f2:	697a      	ldr	r2, [r7, #20]
 800c1f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c1f8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c1fc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c1fe:	7afb      	ldrb	r3, [r7, #11]
 800c200:	2b01      	cmp	r3, #1
 800c202:	d10f      	bne.n	800c224 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c20a:	461a      	mov	r2, r3
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c210:	697b      	ldr	r3, [r7, #20]
 800c212:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c216:	681b      	ldr	r3, [r3, #0]
 800c218:	697a      	ldr	r2, [r7, #20]
 800c21a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c21e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c222:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c224:	2300      	movs	r3, #0
}
 800c226:	4618      	mov	r0, r3
 800c228:	371c      	adds	r7, #28
 800c22a:	46bd      	mov	sp, r7
 800c22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c230:	4770      	bx	lr
 800c232:	bf00      	nop
 800c234:	4f54300a 	.word	0x4f54300a

0800c238 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c238:	b480      	push	{r7}
 800c23a:	b085      	sub	sp, #20
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c240:	2300      	movs	r3, #0
 800c242:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	3301      	adds	r3, #1
 800c248:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	4a13      	ldr	r2, [pc, #76]	; (800c29c <USB_CoreReset+0x64>)
 800c24e:	4293      	cmp	r3, r2
 800c250:	d901      	bls.n	800c256 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c252:	2303      	movs	r3, #3
 800c254:	e01b      	b.n	800c28e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	691b      	ldr	r3, [r3, #16]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	daf2      	bge.n	800c244 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c25e:	2300      	movs	r3, #0
 800c260:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	691b      	ldr	r3, [r3, #16]
 800c266:	f043 0201 	orr.w	r2, r3, #1
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	3301      	adds	r3, #1
 800c272:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c274:	68fb      	ldr	r3, [r7, #12]
 800c276:	4a09      	ldr	r2, [pc, #36]	; (800c29c <USB_CoreReset+0x64>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d901      	bls.n	800c280 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c27c:	2303      	movs	r3, #3
 800c27e:	e006      	b.n	800c28e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	691b      	ldr	r3, [r3, #16]
 800c284:	f003 0301 	and.w	r3, r3, #1
 800c288:	2b01      	cmp	r3, #1
 800c28a:	d0f0      	beq.n	800c26e <USB_CoreReset+0x36>

  return HAL_OK;
 800c28c:	2300      	movs	r3, #0
}
 800c28e:	4618      	mov	r0, r3
 800c290:	3714      	adds	r7, #20
 800c292:	46bd      	mov	sp, r7
 800c294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c298:	4770      	bx	lr
 800c29a:	bf00      	nop
 800c29c:	00030d40 	.word	0x00030d40

0800c2a0 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800c2a0:	b084      	sub	sp, #16
 800c2a2:	b580      	push	{r7, lr}
 800c2a4:	b086      	sub	sp, #24
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
 800c2aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800c2ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800c2b2:	2300      	movs	r3, #0
 800c2b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2ca:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d018      	beq.n	800c310 <USB_HostInit+0x70>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800c2de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2e0:	2b01      	cmp	r3, #1
 800c2e2:	d10a      	bne.n	800c2fa <USB_HostInit+0x5a>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c2f2:	f043 0304 	orr.w	r3, r3, #4
 800c2f6:	6013      	str	r3, [r2, #0]
 800c2f8:	e014      	b.n	800c324 <USB_HostInit+0x84>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68fa      	ldr	r2, [r7, #12]
 800c304:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c308:	f023 0304 	bic.w	r3, r3, #4
 800c30c:	6013      	str	r3, [r2, #0]
 800c30e:	e009      	b.n	800c324 <USB_HostInit+0x84>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800c310:	68fb      	ldr	r3, [r7, #12]
 800c312:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	68fa      	ldr	r2, [r7, #12]
 800c31a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c31e:	f023 0304 	bic.w	r3, r3, #4
 800c322:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800c324:	2110      	movs	r1, #16
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f7fe fe14 	bl	800af54 <USB_FlushTxFifo>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d001      	beq.n	800c336 <USB_HostInit+0x96>
  {
    ret = HAL_ERROR;
 800c332:	2301      	movs	r3, #1
 800c334:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800c336:	6878      	ldr	r0, [r7, #4]
 800c338:	f7fe fe40 	bl	800afbc <USB_FlushRxFifo>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d001      	beq.n	800c346 <USB_HostInit+0xa6>
  {
    ret = HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800c346:	2300      	movs	r3, #0
 800c348:	613b      	str	r3, [r7, #16]
 800c34a:	e015      	b.n	800c378 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800c34c:	693b      	ldr	r3, [r7, #16]
 800c34e:	015a      	lsls	r2, r3, #5
 800c350:	68fb      	ldr	r3, [r7, #12]
 800c352:	4413      	add	r3, r2
 800c354:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c358:	461a      	mov	r2, r3
 800c35a:	f04f 33ff 	mov.w	r3, #4294967295
 800c35e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800c360:	693b      	ldr	r3, [r7, #16]
 800c362:	015a      	lsls	r2, r3, #5
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	4413      	add	r3, r2
 800c368:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c36c:	461a      	mov	r2, r3
 800c36e:	2300      	movs	r3, #0
 800c370:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800c372:	693b      	ldr	r3, [r7, #16]
 800c374:	3301      	adds	r3, #1
 800c376:	613b      	str	r3, [r7, #16]
 800c378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c37a:	693a      	ldr	r2, [r7, #16]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d3e5      	bcc.n	800c34c <USB_HostInit+0xac>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	f04f 32ff 	mov.w	r2, #4294967295
 800c38c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c392:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c396:	2b00      	cmp	r3, #0
 800c398:	d00b      	beq.n	800c3b2 <USB_HostInit+0x112>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c3a0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	4a13      	ldr	r2, [pc, #76]	; (800c3f4 <USB_HostInit+0x154>)
 800c3a6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	4a13      	ldr	r2, [pc, #76]	; (800c3f8 <USB_HostInit+0x158>)
 800c3ac:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800c3b0:	e009      	b.n	800c3c6 <USB_HostInit+0x126>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2280      	movs	r2, #128	; 0x80
 800c3b6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	4a10      	ldr	r2, [pc, #64]	; (800c3fc <USB_HostInit+0x15c>)
 800c3bc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	4a0f      	ldr	r2, [pc, #60]	; (800c400 <USB_HostInit+0x160>)
 800c3c2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800c3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d105      	bne.n	800c3d8 <USB_HostInit+0x138>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	f043 0210 	orr.w	r2, r3, #16
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	699a      	ldr	r2, [r3, #24]
 800c3dc:	4b09      	ldr	r3, [pc, #36]	; (800c404 <USB_HostInit+0x164>)
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800c3e4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3718      	adds	r7, #24
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800c3f0:	b004      	add	sp, #16
 800c3f2:	4770      	bx	lr
 800c3f4:	01000200 	.word	0x01000200
 800c3f8:	00e00300 	.word	0x00e00300
 800c3fc:	00600080 	.word	0x00600080
 800c400:	004000e0 	.word	0x004000e0
 800c404:	a3200008 	.word	0xa3200008

0800c408 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800c408:	b480      	push	{r7}
 800c40a:	b085      	sub	sp, #20
 800c40c:	af00      	add	r7, sp, #0
 800c40e:	6078      	str	r0, [r7, #4]
 800c410:	460b      	mov	r3, r1
 800c412:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	68fa      	ldr	r2, [r7, #12]
 800c422:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800c426:	f023 0303 	bic.w	r3, r3, #3
 800c42a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	78fb      	ldrb	r3, [r7, #3]
 800c436:	f003 0303 	and.w	r3, r3, #3
 800c43a:	68f9      	ldr	r1, [r7, #12]
 800c43c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c440:	4313      	orrs	r3, r2
 800c442:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800c444:	78fb      	ldrb	r3, [r7, #3]
 800c446:	2b01      	cmp	r3, #1
 800c448:	d107      	bne.n	800c45a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800c44a:	68fb      	ldr	r3, [r7, #12]
 800c44c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c450:	461a      	mov	r2, r3
 800c452:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800c456:	6053      	str	r3, [r2, #4]
 800c458:	e009      	b.n	800c46e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800c45a:	78fb      	ldrb	r3, [r7, #3]
 800c45c:	2b02      	cmp	r3, #2
 800c45e:	d106      	bne.n	800c46e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c466:	461a      	mov	r2, r3
 800c468:	f241 7370 	movw	r3, #6000	; 0x1770
 800c46c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800c46e:	2300      	movs	r3, #0
}
 800c470:	4618      	mov	r0, r3
 800c472:	3714      	adds	r7, #20
 800c474:	46bd      	mov	sp, r7
 800c476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47a:	4770      	bx	lr

0800c47c <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 800c47c:	b580      	push	{r7, lr}
 800c47e:	b084      	sub	sp, #16
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c488:	2300      	movs	r3, #0
 800c48a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c48c:	68fb      	ldr	r3, [r7, #12]
 800c48e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c496:	68bb      	ldr	r3, [r7, #8]
 800c498:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c49c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	68fa      	ldr	r2, [r7, #12]
 800c4a2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c4a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c4aa:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c4ac:	2064      	movs	r0, #100	; 0x64
 800c4ae:	f7f5 fdbf 	bl	8002030 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	68fa      	ldr	r2, [r7, #12]
 800c4b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c4ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4be:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c4c0:	200a      	movs	r0, #10
 800c4c2:	f7f5 fdb5 	bl	8002030 <HAL_Delay>

  return HAL_OK;
 800c4c6:	2300      	movs	r3, #0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3710      	adds	r7, #16
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b085      	sub	sp, #20
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	6078      	str	r0, [r7, #4]
 800c4d8:	460b      	mov	r3, r1
 800c4da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c4ee:	68bb      	ldr	r3, [r7, #8]
 800c4f0:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800c4f4:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d109      	bne.n	800c514 <USB_DriveVbus+0x44>
 800c500:	78fb      	ldrb	r3, [r7, #3]
 800c502:	2b01      	cmp	r3, #1
 800c504:	d106      	bne.n	800c514 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c506:	68bb      	ldr	r3, [r7, #8]
 800c508:	68fa      	ldr	r2, [r7, #12]
 800c50a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c50e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c512:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800c51a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c51e:	d109      	bne.n	800c534 <USB_DriveVbus+0x64>
 800c520:	78fb      	ldrb	r3, [r7, #3]
 800c522:	2b00      	cmp	r3, #0
 800c524:	d106      	bne.n	800c534 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c526:	68bb      	ldr	r3, [r7, #8]
 800c528:	68fa      	ldr	r2, [r7, #12]
 800c52a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800c52e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c532:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c540:	4770      	bx	lr

0800c542 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800c542:	b480      	push	{r7}
 800c544:	b085      	sub	sp, #20
 800c546:	af00      	add	r7, sp, #0
 800c548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c54e:	2300      	movs	r3, #0
 800c550:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c552:	68fb      	ldr	r3, [r7, #12]
 800c554:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c55c:	68bb      	ldr	r3, [r7, #8]
 800c55e:	0c5b      	lsrs	r3, r3, #17
 800c560:	f003 0303 	and.w	r3, r3, #3
}
 800c564:	4618      	mov	r0, r3
 800c566:	3714      	adds	r7, #20
 800c568:	46bd      	mov	sp, r7
 800c56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c56e:	4770      	bx	lr

0800c570 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800c570:	b480      	push	{r7}
 800c572:	b085      	sub	sp, #20
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c582:	689b      	ldr	r3, [r3, #8]
 800c584:	b29b      	uxth	r3, r3
}
 800c586:	4618      	mov	r0, r3
 800c588:	3714      	adds	r7, #20
 800c58a:	46bd      	mov	sp, r7
 800c58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c590:	4770      	bx	lr
	...

0800c594 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c594:	b580      	push	{r7, lr}
 800c596:	b088      	sub	sp, #32
 800c598:	af00      	add	r7, sp, #0
 800c59a:	6078      	str	r0, [r7, #4]
 800c59c:	4608      	mov	r0, r1
 800c59e:	4611      	mov	r1, r2
 800c5a0:	461a      	mov	r2, r3
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	70fb      	strb	r3, [r7, #3]
 800c5a6:	460b      	mov	r3, r1
 800c5a8:	70bb      	strb	r3, [r7, #2]
 800c5aa:	4613      	mov	r3, r2
 800c5ac:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800c5b6:	78fb      	ldrb	r3, [r7, #3]
 800c5b8:	015a      	lsls	r2, r3, #5
 800c5ba:	693b      	ldr	r3, [r7, #16]
 800c5bc:	4413      	add	r3, r2
 800c5be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5c2:	461a      	mov	r2, r3
 800c5c4:	f04f 33ff 	mov.w	r3, #4294967295
 800c5c8:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c5ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c5ce:	2b03      	cmp	r3, #3
 800c5d0:	d87e      	bhi.n	800c6d0 <USB_HC_Init+0x13c>
 800c5d2:	a201      	add	r2, pc, #4	; (adr r2, 800c5d8 <USB_HC_Init+0x44>)
 800c5d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5d8:	0800c5e9 	.word	0x0800c5e9
 800c5dc:	0800c693 	.word	0x0800c693
 800c5e0:	0800c5e9 	.word	0x0800c5e9
 800c5e4:	0800c655 	.word	0x0800c655
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c5e8:	78fb      	ldrb	r3, [r7, #3]
 800c5ea:	015a      	lsls	r2, r3, #5
 800c5ec:	693b      	ldr	r3, [r7, #16]
 800c5ee:	4413      	add	r3, r2
 800c5f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c5f4:	461a      	mov	r2, r3
 800c5f6:	f240 439d 	movw	r3, #1181	; 0x49d
 800c5fa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c5fc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c600:	2b00      	cmp	r3, #0
 800c602:	da10      	bge.n	800c626 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c604:	78fb      	ldrb	r3, [r7, #3]
 800c606:	015a      	lsls	r2, r3, #5
 800c608:	693b      	ldr	r3, [r7, #16]
 800c60a:	4413      	add	r3, r2
 800c60c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	78fa      	ldrb	r2, [r7, #3]
 800c614:	0151      	lsls	r1, r2, #5
 800c616:	693a      	ldr	r2, [r7, #16]
 800c618:	440a      	add	r2, r1
 800c61a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c61e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c622:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800c624:	e057      	b.n	800c6d6 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c62a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d051      	beq.n	800c6d6 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c632:	78fb      	ldrb	r3, [r7, #3]
 800c634:	015a      	lsls	r2, r3, #5
 800c636:	693b      	ldr	r3, [r7, #16]
 800c638:	4413      	add	r3, r2
 800c63a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c63e:	68db      	ldr	r3, [r3, #12]
 800c640:	78fa      	ldrb	r2, [r7, #3]
 800c642:	0151      	lsls	r1, r2, #5
 800c644:	693a      	ldr	r2, [r7, #16]
 800c646:	440a      	add	r2, r1
 800c648:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c64c:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800c650:	60d3      	str	r3, [r2, #12]
      break;
 800c652:	e040      	b.n	800c6d6 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	015a      	lsls	r2, r3, #5
 800c658:	693b      	ldr	r3, [r7, #16]
 800c65a:	4413      	add	r3, r2
 800c65c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c660:	461a      	mov	r2, r3
 800c662:	f240 639d 	movw	r3, #1693	; 0x69d
 800c666:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c668:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	da34      	bge.n	800c6da <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c670:	78fb      	ldrb	r3, [r7, #3]
 800c672:	015a      	lsls	r2, r3, #5
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	4413      	add	r3, r2
 800c678:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c67c:	68db      	ldr	r3, [r3, #12]
 800c67e:	78fa      	ldrb	r2, [r7, #3]
 800c680:	0151      	lsls	r1, r2, #5
 800c682:	693a      	ldr	r2, [r7, #16]
 800c684:	440a      	add	r2, r1
 800c686:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c68a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c68e:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c690:	e023      	b.n	800c6da <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c692:	78fb      	ldrb	r3, [r7, #3]
 800c694:	015a      	lsls	r2, r3, #5
 800c696:	693b      	ldr	r3, [r7, #16]
 800c698:	4413      	add	r3, r2
 800c69a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c69e:	461a      	mov	r2, r3
 800c6a0:	f240 2325 	movw	r3, #549	; 0x225
 800c6a4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c6a6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	da17      	bge.n	800c6de <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c6ae:	78fb      	ldrb	r3, [r7, #3]
 800c6b0:	015a      	lsls	r2, r3, #5
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	4413      	add	r3, r2
 800c6b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ba:	68db      	ldr	r3, [r3, #12]
 800c6bc:	78fa      	ldrb	r2, [r7, #3]
 800c6be:	0151      	lsls	r1, r2, #5
 800c6c0:	693a      	ldr	r2, [r7, #16]
 800c6c2:	440a      	add	r2, r1
 800c6c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6c8:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 800c6cc:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c6ce:	e006      	b.n	800c6de <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	77fb      	strb	r3, [r7, #31]
      break;
 800c6d4:	e004      	b.n	800c6e0 <USB_HC_Init+0x14c>
      break;
 800c6d6:	bf00      	nop
 800c6d8:	e002      	b.n	800c6e0 <USB_HC_Init+0x14c>
      break;
 800c6da:	bf00      	nop
 800c6dc:	e000      	b.n	800c6e0 <USB_HC_Init+0x14c>
      break;
 800c6de:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c6e0:	78fb      	ldrb	r3, [r7, #3]
 800c6e2:	015a      	lsls	r2, r3, #5
 800c6e4:	693b      	ldr	r3, [r7, #16]
 800c6e6:	4413      	add	r3, r2
 800c6e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c6ec:	68db      	ldr	r3, [r3, #12]
 800c6ee:	78fa      	ldrb	r2, [r7, #3]
 800c6f0:	0151      	lsls	r1, r2, #5
 800c6f2:	693a      	ldr	r2, [r7, #16]
 800c6f4:	440a      	add	r2, r1
 800c6f6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c6fa:	f043 0302 	orr.w	r3, r3, #2
 800c6fe:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c706:	699a      	ldr	r2, [r3, #24]
 800c708:	78fb      	ldrb	r3, [r7, #3]
 800c70a:	f003 030f 	and.w	r3, r3, #15
 800c70e:	2101      	movs	r1, #1
 800c710:	fa01 f303 	lsl.w	r3, r1, r3
 800c714:	6939      	ldr	r1, [r7, #16]
 800c716:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800c71a:	4313      	orrs	r3, r2
 800c71c:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	699b      	ldr	r3, [r3, #24]
 800c722:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c72a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c72e:	2b00      	cmp	r3, #0
 800c730:	da03      	bge.n	800c73a <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c732:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800c736:	61bb      	str	r3, [r7, #24]
 800c738:	e001      	b.n	800c73e <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 800c73a:	2300      	movs	r3, #0
 800c73c:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c73e:	6878      	ldr	r0, [r7, #4]
 800c740:	f7ff feff 	bl	800c542 <USB_GetHostSpeed>
 800c744:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c746:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800c74a:	2b02      	cmp	r3, #2
 800c74c:	d106      	bne.n	800c75c <USB_HC_Init+0x1c8>
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	2b02      	cmp	r3, #2
 800c752:	d003      	beq.n	800c75c <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c754:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800c758:	617b      	str	r3, [r7, #20]
 800c75a:	e001      	b.n	800c760 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c75c:	2300      	movs	r3, #0
 800c75e:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c760:	787b      	ldrb	r3, [r7, #1]
 800c762:	059b      	lsls	r3, r3, #22
 800c764:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c768:	78bb      	ldrb	r3, [r7, #2]
 800c76a:	02db      	lsls	r3, r3, #11
 800c76c:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c770:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c772:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c776:	049b      	lsls	r3, r3, #18
 800c778:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c77c:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c77e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800c780:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c784:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c786:	69bb      	ldr	r3, [r7, #24]
 800c788:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c78a:	78fb      	ldrb	r3, [r7, #3]
 800c78c:	0159      	lsls	r1, r3, #5
 800c78e:	693b      	ldr	r3, [r7, #16]
 800c790:	440b      	add	r3, r1
 800c792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c796:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c79c:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c79e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c7a2:	2b03      	cmp	r3, #3
 800c7a4:	d003      	beq.n	800c7ae <USB_HC_Init+0x21a>
 800c7a6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800c7aa:	2b01      	cmp	r3, #1
 800c7ac:	d10f      	bne.n	800c7ce <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c7ae:	78fb      	ldrb	r3, [r7, #3]
 800c7b0:	015a      	lsls	r2, r3, #5
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	4413      	add	r3, r2
 800c7b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	78fa      	ldrb	r2, [r7, #3]
 800c7be:	0151      	lsls	r1, r2, #5
 800c7c0:	693a      	ldr	r2, [r7, #16]
 800c7c2:	440a      	add	r2, r1
 800c7c4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c7c8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800c7cc:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c7ce:	7ffb      	ldrb	r3, [r7, #31]
}
 800c7d0:	4618      	mov	r0, r3
 800c7d2:	3720      	adds	r7, #32
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b08c      	sub	sp, #48	; 0x30
 800c7dc:	af02      	add	r7, sp, #8
 800c7de:	60f8      	str	r0, [r7, #12]
 800c7e0:	60b9      	str	r1, [r7, #8]
 800c7e2:	4613      	mov	r3, r2
 800c7e4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c7ea:	68bb      	ldr	r3, [r7, #8]
 800c7ec:	785b      	ldrb	r3, [r3, #1]
 800c7ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800c7f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 800c7f4:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c7fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d02d      	beq.n	800c85e <USB_HC_StartXfer+0x86>
 800c802:	68bb      	ldr	r3, [r7, #8]
 800c804:	791b      	ldrb	r3, [r3, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d129      	bne.n	800c85e <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 800c80a:	79fb      	ldrb	r3, [r7, #7]
 800c80c:	2b01      	cmp	r3, #1
 800c80e:	d117      	bne.n	800c840 <USB_HC_StartXfer+0x68>
 800c810:	68bb      	ldr	r3, [r7, #8]
 800c812:	79db      	ldrb	r3, [r3, #7]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d003      	beq.n	800c820 <USB_HC_StartXfer+0x48>
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	79db      	ldrb	r3, [r3, #7]
 800c81c:	2b02      	cmp	r3, #2
 800c81e:	d10f      	bne.n	800c840 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c820:	69fb      	ldr	r3, [r7, #28]
 800c822:	015a      	lsls	r2, r3, #5
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	4413      	add	r3, r2
 800c828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c82c:	68db      	ldr	r3, [r3, #12]
 800c82e:	69fa      	ldr	r2, [r7, #28]
 800c830:	0151      	lsls	r1, r2, #5
 800c832:	6a3a      	ldr	r2, [r7, #32]
 800c834:	440a      	add	r2, r1
 800c836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c83a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c83e:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800c840:	79fb      	ldrb	r3, [r7, #7]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d10b      	bne.n	800c85e <USB_HC_StartXfer+0x86>
 800c846:	68bb      	ldr	r3, [r7, #8]
 800c848:	795b      	ldrb	r3, [r3, #5]
 800c84a:	2b01      	cmp	r3, #1
 800c84c:	d107      	bne.n	800c85e <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	785b      	ldrb	r3, [r3, #1]
 800c852:	4619      	mov	r1, r3
 800c854:	68f8      	ldr	r0, [r7, #12]
 800c856:	f000 fa0f 	bl	800cc78 <USB_DoPing>
      return HAL_OK;
 800c85a:	2300      	movs	r3, #0
 800c85c:	e0f8      	b.n	800ca50 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800c85e:	68bb      	ldr	r3, [r7, #8]
 800c860:	695b      	ldr	r3, [r3, #20]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d018      	beq.n	800c898 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c866:	68bb      	ldr	r3, [r7, #8]
 800c868:	695b      	ldr	r3, [r3, #20]
 800c86a:	68ba      	ldr	r2, [r7, #8]
 800c86c:	8912      	ldrh	r2, [r2, #8]
 800c86e:	4413      	add	r3, r2
 800c870:	3b01      	subs	r3, #1
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	8912      	ldrh	r2, [r2, #8]
 800c876:	fbb3 f3f2 	udiv	r3, r3, r2
 800c87a:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 800c87c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800c87e:	8b7b      	ldrh	r3, [r7, #26]
 800c880:	429a      	cmp	r2, r3
 800c882:	d90b      	bls.n	800c89c <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 800c884:	8b7b      	ldrh	r3, [r7, #26]
 800c886:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c888:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c88a:	68ba      	ldr	r2, [r7, #8]
 800c88c:	8912      	ldrh	r2, [r2, #8]
 800c88e:	fb03 f202 	mul.w	r2, r3, r2
 800c892:	68bb      	ldr	r3, [r7, #8]
 800c894:	611a      	str	r2, [r3, #16]
 800c896:	e001      	b.n	800c89c <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 800c898:	2301      	movs	r3, #1
 800c89a:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 800c89c:	68bb      	ldr	r3, [r7, #8]
 800c89e:	78db      	ldrb	r3, [r3, #3]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d007      	beq.n	800c8b4 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c8a4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c8a6:	68ba      	ldr	r2, [r7, #8]
 800c8a8:	8912      	ldrh	r2, [r2, #8]
 800c8aa:	fb03 f202 	mul.w	r2, r3, r2
 800c8ae:	68bb      	ldr	r3, [r7, #8]
 800c8b0:	611a      	str	r2, [r3, #16]
 800c8b2:	e003      	b.n	800c8bc <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	695a      	ldr	r2, [r3, #20]
 800c8b8:	68bb      	ldr	r3, [r7, #8]
 800c8ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	691b      	ldr	r3, [r3, #16]
 800c8c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c8c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800c8c6:	04d9      	lsls	r1, r3, #19
 800c8c8:	4b63      	ldr	r3, [pc, #396]	; (800ca58 <USB_HC_StartXfer+0x280>)
 800c8ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c8ce:	68bb      	ldr	r3, [r7, #8]
 800c8d0:	7a9b      	ldrb	r3, [r3, #10]
 800c8d2:	075b      	lsls	r3, r3, #29
 800c8d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8d8:	69f9      	ldr	r1, [r7, #28]
 800c8da:	0148      	lsls	r0, r1, #5
 800c8dc:	6a39      	ldr	r1, [r7, #32]
 800c8de:	4401      	add	r1, r0
 800c8e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c8e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c8e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c8e8:	79fb      	ldrb	r3, [r7, #7]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d009      	beq.n	800c902 <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c8ee:	68bb      	ldr	r3, [r7, #8]
 800c8f0:	68d9      	ldr	r1, [r3, #12]
 800c8f2:	69fb      	ldr	r3, [r7, #28]
 800c8f4:	015a      	lsls	r2, r3, #5
 800c8f6:	6a3b      	ldr	r3, [r7, #32]
 800c8f8:	4413      	add	r3, r2
 800c8fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c8fe:	460a      	mov	r2, r1
 800c900:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c902:	6a3b      	ldr	r3, [r7, #32]
 800c904:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c908:	689b      	ldr	r3, [r3, #8]
 800c90a:	f003 0301 	and.w	r3, r3, #1
 800c90e:	2b00      	cmp	r3, #0
 800c910:	bf0c      	ite	eq
 800c912:	2301      	moveq	r3, #1
 800c914:	2300      	movne	r3, #0
 800c916:	b2db      	uxtb	r3, r3
 800c918:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c91a:	69fb      	ldr	r3, [r7, #28]
 800c91c:	015a      	lsls	r2, r3, #5
 800c91e:	6a3b      	ldr	r3, [r7, #32]
 800c920:	4413      	add	r3, r2
 800c922:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	69fa      	ldr	r2, [r7, #28]
 800c92a:	0151      	lsls	r1, r2, #5
 800c92c:	6a3a      	ldr	r2, [r7, #32]
 800c92e:	440a      	add	r2, r1
 800c930:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800c934:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c938:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	015a      	lsls	r2, r3, #5
 800c93e:	6a3b      	ldr	r3, [r7, #32]
 800c940:	4413      	add	r3, r2
 800c942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c946:	681a      	ldr	r2, [r3, #0]
 800c948:	7e7b      	ldrb	r3, [r7, #25]
 800c94a:	075b      	lsls	r3, r3, #29
 800c94c:	69f9      	ldr	r1, [r7, #28]
 800c94e:	0148      	lsls	r0, r1, #5
 800c950:	6a39      	ldr	r1, [r7, #32]
 800c952:	4401      	add	r1, r0
 800c954:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 800c958:	4313      	orrs	r3, r2
 800c95a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c95c:	69fb      	ldr	r3, [r7, #28]
 800c95e:	015a      	lsls	r2, r3, #5
 800c960:	6a3b      	ldr	r3, [r7, #32]
 800c962:	4413      	add	r3, r2
 800c964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c96c:	693b      	ldr	r3, [r7, #16]
 800c96e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800c972:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c974:	68bb      	ldr	r3, [r7, #8]
 800c976:	78db      	ldrb	r3, [r3, #3]
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d004      	beq.n	800c986 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c97c:	693b      	ldr	r3, [r7, #16]
 800c97e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800c982:	613b      	str	r3, [r7, #16]
 800c984:	e003      	b.n	800c98e <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c986:	693b      	ldr	r3, [r7, #16]
 800c988:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c98c:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c98e:	693b      	ldr	r3, [r7, #16]
 800c990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800c994:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c996:	69fb      	ldr	r3, [r7, #28]
 800c998:	015a      	lsls	r2, r3, #5
 800c99a:	6a3b      	ldr	r3, [r7, #32]
 800c99c:	4413      	add	r3, r2
 800c99e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800c9a2:	461a      	mov	r2, r3
 800c9a4:	693b      	ldr	r3, [r7, #16]
 800c9a6:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c9a8:	79fb      	ldrb	r3, [r7, #7]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d001      	beq.n	800c9b2 <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800c9ae:	2300      	movs	r3, #0
 800c9b0:	e04e      	b.n	800ca50 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	78db      	ldrb	r3, [r3, #3]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d149      	bne.n	800ca4e <USB_HC_StartXfer+0x276>
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	695b      	ldr	r3, [r3, #20]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d045      	beq.n	800ca4e <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	79db      	ldrb	r3, [r3, #7]
 800c9c6:	2b03      	cmp	r3, #3
 800c9c8:	d830      	bhi.n	800ca2c <USB_HC_StartXfer+0x254>
 800c9ca:	a201      	add	r2, pc, #4	; (adr r2, 800c9d0 <USB_HC_StartXfer+0x1f8>)
 800c9cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9d0:	0800c9e1 	.word	0x0800c9e1
 800c9d4:	0800ca05 	.word	0x0800ca05
 800c9d8:	0800c9e1 	.word	0x0800c9e1
 800c9dc:	0800ca05 	.word	0x0800ca05
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c9e0:	68bb      	ldr	r3, [r7, #8]
 800c9e2:	695b      	ldr	r3, [r3, #20]
 800c9e4:	3303      	adds	r3, #3
 800c9e6:	089b      	lsrs	r3, r3, #2
 800c9e8:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c9ea:	8afa      	ldrh	r2, [r7, #22]
 800c9ec:	68fb      	ldr	r3, [r7, #12]
 800c9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f0:	b29b      	uxth	r3, r3
 800c9f2:	429a      	cmp	r2, r3
 800c9f4:	d91c      	bls.n	800ca30 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	699b      	ldr	r3, [r3, #24]
 800c9fa:	f043 0220 	orr.w	r2, r3, #32
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	619a      	str	r2, [r3, #24]
        }
        break;
 800ca02:	e015      	b.n	800ca30 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	695b      	ldr	r3, [r3, #20]
 800ca08:	3303      	adds	r3, #3
 800ca0a:	089b      	lsrs	r3, r3, #2
 800ca0c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800ca0e:	8afa      	ldrh	r2, [r7, #22]
 800ca10:	6a3b      	ldr	r3, [r7, #32]
 800ca12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca16:	691b      	ldr	r3, [r3, #16]
 800ca18:	b29b      	uxth	r3, r3
 800ca1a:	429a      	cmp	r2, r3
 800ca1c:	d90a      	bls.n	800ca34 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800ca1e:	68fb      	ldr	r3, [r7, #12]
 800ca20:	699b      	ldr	r3, [r3, #24]
 800ca22:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	619a      	str	r2, [r3, #24]
        }
        break;
 800ca2a:	e003      	b.n	800ca34 <USB_HC_StartXfer+0x25c>

      default:
        break;
 800ca2c:	bf00      	nop
 800ca2e:	e002      	b.n	800ca36 <USB_HC_StartXfer+0x25e>
        break;
 800ca30:	bf00      	nop
 800ca32:	e000      	b.n	800ca36 <USB_HC_StartXfer+0x25e>
        break;
 800ca34:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	68d9      	ldr	r1, [r3, #12]
 800ca3a:	68bb      	ldr	r3, [r7, #8]
 800ca3c:	785a      	ldrb	r2, [r3, #1]
 800ca3e:	68bb      	ldr	r3, [r7, #8]
 800ca40:	695b      	ldr	r3, [r3, #20]
 800ca42:	b29b      	uxth	r3, r3
 800ca44:	2000      	movs	r0, #0
 800ca46:	9000      	str	r0, [sp, #0]
 800ca48:	68f8      	ldr	r0, [r7, #12]
 800ca4a:	f7ff f8df 	bl	800bc0c <USB_WritePacket>
  }

  return HAL_OK;
 800ca4e:	2300      	movs	r3, #0
}
 800ca50:	4618      	mov	r0, r3
 800ca52:	3728      	adds	r7, #40	; 0x28
 800ca54:	46bd      	mov	sp, r7
 800ca56:	bd80      	pop	{r7, pc}
 800ca58:	1ff80000 	.word	0x1ff80000

0800ca5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800ca5c:	b480      	push	{r7}
 800ca5e:	b085      	sub	sp, #20
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca64:	687b      	ldr	r3, [r7, #4]
 800ca66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800ca6e:	695b      	ldr	r3, [r3, #20]
 800ca70:	b29b      	uxth	r3, r3
}
 800ca72:	4618      	mov	r0, r3
 800ca74:	3714      	adds	r7, #20
 800ca76:	46bd      	mov	sp, r7
 800ca78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7c:	4770      	bx	lr

0800ca7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800ca7e:	b480      	push	{r7}
 800ca80:	b089      	sub	sp, #36	; 0x24
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	6078      	str	r0, [r7, #4]
 800ca86:	460b      	mov	r3, r1
 800ca88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800ca8e:	78fb      	ldrb	r3, [r7, #3]
 800ca90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800ca92:	2300      	movs	r3, #0
 800ca94:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800ca96:	69bb      	ldr	r3, [r7, #24]
 800ca98:	015a      	lsls	r2, r3, #5
 800ca9a:	69fb      	ldr	r3, [r7, #28]
 800ca9c:	4413      	add	r3, r2
 800ca9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caa2:	681b      	ldr	r3, [r3, #0]
 800caa4:	0c9b      	lsrs	r3, r3, #18
 800caa6:	f003 0303 	and.w	r3, r3, #3
 800caaa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	015a      	lsls	r2, r3, #5
 800cab0:	69fb      	ldr	r3, [r7, #28]
 800cab2:	4413      	add	r3, r2
 800cab4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	0fdb      	lsrs	r3, r3, #31
 800cabc:	f003 0301 	and.w	r3, r3, #1
 800cac0:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	689b      	ldr	r3, [r3, #8]
 800cac6:	f003 0320 	and.w	r3, r3, #32
 800caca:	2b20      	cmp	r3, #32
 800cacc:	d104      	bne.n	800cad8 <USB_HC_Halt+0x5a>
 800cace:	693b      	ldr	r3, [r7, #16]
 800cad0:	2b00      	cmp	r3, #0
 800cad2:	d101      	bne.n	800cad8 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 800cad4:	2300      	movs	r3, #0
 800cad6:	e0c8      	b.n	800cc6a <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800cad8:	697b      	ldr	r3, [r7, #20]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d002      	beq.n	800cae4 <USB_HC_Halt+0x66>
 800cade:	697b      	ldr	r3, [r7, #20]
 800cae0:	2b02      	cmp	r3, #2
 800cae2:	d163      	bne.n	800cbac <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cae4:	69bb      	ldr	r3, [r7, #24]
 800cae6:	015a      	lsls	r2, r3, #5
 800cae8:	69fb      	ldr	r3, [r7, #28]
 800caea:	4413      	add	r3, r2
 800caec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	69ba      	ldr	r2, [r7, #24]
 800caf4:	0151      	lsls	r1, r2, #5
 800caf6:	69fa      	ldr	r2, [r7, #28]
 800caf8:	440a      	add	r2, r1
 800cafa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cafe:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cb02:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	689b      	ldr	r3, [r3, #8]
 800cb08:	f003 0320 	and.w	r3, r3, #32
 800cb0c:	2b00      	cmp	r3, #0
 800cb0e:	f040 80ab 	bne.w	800cc68 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb16:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cb1a:	2b00      	cmp	r3, #0
 800cb1c:	d133      	bne.n	800cb86 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cb1e:	69bb      	ldr	r3, [r7, #24]
 800cb20:	015a      	lsls	r2, r3, #5
 800cb22:	69fb      	ldr	r3, [r7, #28]
 800cb24:	4413      	add	r3, r2
 800cb26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	69ba      	ldr	r2, [r7, #24]
 800cb2e:	0151      	lsls	r1, r2, #5
 800cb30:	69fa      	ldr	r2, [r7, #28]
 800cb32:	440a      	add	r2, r1
 800cb34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cb3c:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cb3e:	69bb      	ldr	r3, [r7, #24]
 800cb40:	015a      	lsls	r2, r3, #5
 800cb42:	69fb      	ldr	r3, [r7, #28]
 800cb44:	4413      	add	r3, r2
 800cb46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	69ba      	ldr	r2, [r7, #24]
 800cb4e:	0151      	lsls	r1, r2, #5
 800cb50:	69fa      	ldr	r2, [r7, #28]
 800cb52:	440a      	add	r2, r1
 800cb54:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cb58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cb5c:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	3301      	adds	r3, #1
 800cb62:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cb6a:	d81d      	bhi.n	800cba8 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cb6c:	69bb      	ldr	r3, [r7, #24]
 800cb6e:	015a      	lsls	r2, r3, #5
 800cb70:	69fb      	ldr	r3, [r7, #28]
 800cb72:	4413      	add	r3, r2
 800cb74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cb7e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cb82:	d0ec      	beq.n	800cb5e <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cb84:	e070      	b.n	800cc68 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cb86:	69bb      	ldr	r3, [r7, #24]
 800cb88:	015a      	lsls	r2, r3, #5
 800cb8a:	69fb      	ldr	r3, [r7, #28]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cb92:	681b      	ldr	r3, [r3, #0]
 800cb94:	69ba      	ldr	r2, [r7, #24]
 800cb96:	0151      	lsls	r1, r2, #5
 800cb98:	69fa      	ldr	r2, [r7, #28]
 800cb9a:	440a      	add	r2, r1
 800cb9c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cba0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cba4:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cba6:	e05f      	b.n	800cc68 <USB_HC_Halt+0x1ea>
            break;
 800cba8:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800cbaa:	e05d      	b.n	800cc68 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800cbac:	69bb      	ldr	r3, [r7, #24]
 800cbae:	015a      	lsls	r2, r3, #5
 800cbb0:	69fb      	ldr	r3, [r7, #28]
 800cbb2:	4413      	add	r3, r2
 800cbb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	69ba      	ldr	r2, [r7, #24]
 800cbbc:	0151      	lsls	r1, r2, #5
 800cbbe:	69fa      	ldr	r2, [r7, #28]
 800cbc0:	440a      	add	r2, r1
 800cbc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cbca:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800cbcc:	69fb      	ldr	r3, [r7, #28]
 800cbce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cbd2:	691b      	ldr	r3, [r3, #16]
 800cbd4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d133      	bne.n	800cc44 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800cbdc:	69bb      	ldr	r3, [r7, #24]
 800cbde:	015a      	lsls	r2, r3, #5
 800cbe0:	69fb      	ldr	r3, [r7, #28]
 800cbe2:	4413      	add	r3, r2
 800cbe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	69ba      	ldr	r2, [r7, #24]
 800cbec:	0151      	lsls	r1, r2, #5
 800cbee:	69fa      	ldr	r2, [r7, #28]
 800cbf0:	440a      	add	r2, r1
 800cbf2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cbf6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cbfa:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cbfc:	69bb      	ldr	r3, [r7, #24]
 800cbfe:	015a      	lsls	r2, r3, #5
 800cc00:	69fb      	ldr	r3, [r7, #28]
 800cc02:	4413      	add	r3, r2
 800cc04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	69ba      	ldr	r2, [r7, #24]
 800cc0c:	0151      	lsls	r1, r2, #5
 800cc0e:	69fa      	ldr	r2, [r7, #28]
 800cc10:	440a      	add	r2, r1
 800cc12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc1a:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	3301      	adds	r3, #1
 800cc20:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800cc22:	68fb      	ldr	r3, [r7, #12]
 800cc24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cc28:	d81d      	bhi.n	800cc66 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc2a:	69bb      	ldr	r3, [r7, #24]
 800cc2c:	015a      	lsls	r2, r3, #5
 800cc2e:	69fb      	ldr	r3, [r7, #28]
 800cc30:	4413      	add	r3, r2
 800cc32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc36:	681b      	ldr	r3, [r3, #0]
 800cc38:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cc3c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cc40:	d0ec      	beq.n	800cc1c <USB_HC_Halt+0x19e>
 800cc42:	e011      	b.n	800cc68 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800cc44:	69bb      	ldr	r3, [r7, #24]
 800cc46:	015a      	lsls	r2, r3, #5
 800cc48:	69fb      	ldr	r3, [r7, #28]
 800cc4a:	4413      	add	r3, r2
 800cc4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	69ba      	ldr	r2, [r7, #24]
 800cc54:	0151      	lsls	r1, r2, #5
 800cc56:	69fa      	ldr	r2, [r7, #28]
 800cc58:	440a      	add	r2, r1
 800cc5a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cc5e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cc62:	6013      	str	r3, [r2, #0]
 800cc64:	e000      	b.n	800cc68 <USB_HC_Halt+0x1ea>
          break;
 800cc66:	bf00      	nop
    }
  }

  return HAL_OK;
 800cc68:	2300      	movs	r3, #0
}
 800cc6a:	4618      	mov	r0, r3
 800cc6c:	3724      	adds	r7, #36	; 0x24
 800cc6e:	46bd      	mov	sp, r7
 800cc70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc74:	4770      	bx	lr
	...

0800cc78 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cc78:	b480      	push	{r7}
 800cc7a:	b087      	sub	sp, #28
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	460b      	mov	r3, r1
 800cc82:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cc88:	78fb      	ldrb	r3, [r7, #3]
 800cc8a:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cc8c:	2301      	movs	r3, #1
 800cc8e:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	04da      	lsls	r2, r3, #19
 800cc94:	4b15      	ldr	r3, [pc, #84]	; (800ccec <USB_DoPing+0x74>)
 800cc96:	4013      	ands	r3, r2
 800cc98:	693a      	ldr	r2, [r7, #16]
 800cc9a:	0151      	lsls	r1, r2, #5
 800cc9c:	697a      	ldr	r2, [r7, #20]
 800cc9e:	440a      	add	r2, r1
 800cca0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800cca4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cca8:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800ccaa:	693b      	ldr	r3, [r7, #16]
 800ccac:	015a      	lsls	r2, r3, #5
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	4413      	add	r3, r2
 800ccb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800ccba:	68bb      	ldr	r3, [r7, #8]
 800ccbc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800ccc0:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800ccc2:	68bb      	ldr	r3, [r7, #8]
 800ccc4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800ccc8:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	015a      	lsls	r2, r3, #5
 800ccce:	697b      	ldr	r3, [r7, #20]
 800ccd0:	4413      	add	r3, r2
 800ccd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	68bb      	ldr	r3, [r7, #8]
 800ccda:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800ccdc:	2300      	movs	r3, #0
}
 800ccde:	4618      	mov	r0, r3
 800cce0:	371c      	adds	r7, #28
 800cce2:	46bd      	mov	sp, r7
 800cce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cce8:	4770      	bx	lr
 800ccea:	bf00      	nop
 800ccec:	1ff80000 	.word	0x1ff80000

0800ccf0 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b088      	sub	sp, #32
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800cd00:	2300      	movs	r3, #0
 800cd02:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cd04:	6878      	ldr	r0, [r7, #4]
 800cd06:	f7fd ff6a 	bl	800abde <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cd0a:	2110      	movs	r1, #16
 800cd0c:	6878      	ldr	r0, [r7, #4]
 800cd0e:	f7fe f921 	bl	800af54 <USB_FlushTxFifo>
 800cd12:	4603      	mov	r3, r0
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d001      	beq.n	800cd1c <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800cd18:	2301      	movs	r3, #1
 800cd1a:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f7fe f94d 	bl	800afbc <USB_FlushRxFifo>
 800cd22:	4603      	mov	r3, r0
 800cd24:	2b00      	cmp	r3, #0
 800cd26:	d001      	beq.n	800cd2c <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800cd28:	2301      	movs	r3, #1
 800cd2a:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cd2c:	2300      	movs	r3, #0
 800cd2e:	61bb      	str	r3, [r7, #24]
 800cd30:	e01f      	b.n	800cd72 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800cd32:	69bb      	ldr	r3, [r7, #24]
 800cd34:	015a      	lsls	r2, r3, #5
 800cd36:	697b      	ldr	r3, [r7, #20]
 800cd38:	4413      	add	r3, r2
 800cd3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd48:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cd4a:	693b      	ldr	r3, [r7, #16]
 800cd4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800cd50:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cd52:	693b      	ldr	r3, [r7, #16]
 800cd54:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cd58:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	015a      	lsls	r2, r3, #5
 800cd5e:	697b      	ldr	r3, [r7, #20]
 800cd60:	4413      	add	r3, r2
 800cd62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd66:	461a      	mov	r2, r3
 800cd68:	693b      	ldr	r3, [r7, #16]
 800cd6a:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cd6c:	69bb      	ldr	r3, [r7, #24]
 800cd6e:	3301      	adds	r3, #1
 800cd70:	61bb      	str	r3, [r7, #24]
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	2b0f      	cmp	r3, #15
 800cd76:	d9dc      	bls.n	800cd32 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cd78:	2300      	movs	r3, #0
 800cd7a:	61bb      	str	r3, [r7, #24]
 800cd7c:	e034      	b.n	800cde8 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800cd7e:	69bb      	ldr	r3, [r7, #24]
 800cd80:	015a      	lsls	r2, r3, #5
 800cd82:	697b      	ldr	r3, [r7, #20]
 800cd84:	4413      	add	r3, r2
 800cd86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cd8e:	693b      	ldr	r3, [r7, #16]
 800cd90:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800cd94:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cd96:	693b      	ldr	r3, [r7, #16]
 800cd98:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800cd9c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cd9e:	693b      	ldr	r3, [r7, #16]
 800cda0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800cda4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cda6:	69bb      	ldr	r3, [r7, #24]
 800cda8:	015a      	lsls	r2, r3, #5
 800cdaa:	697b      	ldr	r3, [r7, #20]
 800cdac:	4413      	add	r3, r2
 800cdae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	693b      	ldr	r3, [r7, #16]
 800cdb6:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800cdb8:	68fb      	ldr	r3, [r7, #12]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800cdc4:	d80c      	bhi.n	800cde0 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	015a      	lsls	r2, r3, #5
 800cdca:	697b      	ldr	r3, [r7, #20]
 800cdcc:	4413      	add	r3, r2
 800cdce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800cdd2:	681b      	ldr	r3, [r3, #0]
 800cdd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800cdd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800cddc:	d0ec      	beq.n	800cdb8 <USB_StopHost+0xc8>
 800cdde:	e000      	b.n	800cde2 <USB_StopHost+0xf2>
        break;
 800cde0:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cde2:	69bb      	ldr	r3, [r7, #24]
 800cde4:	3301      	adds	r3, #1
 800cde6:	61bb      	str	r3, [r7, #24]
 800cde8:	69bb      	ldr	r3, [r7, #24]
 800cdea:	2b0f      	cmp	r3, #15
 800cdec:	d9c7      	bls.n	800cd7e <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800cdee:	697b      	ldr	r3, [r7, #20]
 800cdf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800cdf4:	461a      	mov	r2, r3
 800cdf6:	f04f 33ff 	mov.w	r3, #4294967295
 800cdfa:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	f04f 32ff 	mov.w	r2, #4294967295
 800ce02:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800ce04:	6878      	ldr	r0, [r7, #4]
 800ce06:	f7fd fed9 	bl	800abbc <USB_EnableGlobalInt>

  return ret;
 800ce0a:	7ffb      	ldrb	r3, [r7, #31]
}
 800ce0c:	4618      	mov	r0, r3
 800ce0e:	3720      	adds	r7, #32
 800ce10:	46bd      	mov	sp, r7
 800ce12:	bd80      	pop	{r7, pc}

0800ce14 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800ce14:	b580      	push	{r7, lr}
 800ce16:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 800ce18:	4904      	ldr	r1, [pc, #16]	; (800ce2c <MX_FATFS_Init+0x18>)
 800ce1a:	4805      	ldr	r0, [pc, #20]	; (800ce30 <MX_FATFS_Init+0x1c>)
 800ce1c:	f004 f9aa 	bl	8011174 <FATFS_LinkDriver>
 800ce20:	4603      	mov	r3, r0
 800ce22:	461a      	mov	r2, r3
 800ce24:	4b03      	ldr	r3, [pc, #12]	; (800ce34 <MX_FATFS_Init+0x20>)
 800ce26:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800ce28:	bf00      	nop
 800ce2a:	bd80      	pop	{r7, pc}
 800ce2c:	20000694 	.word	0x20000694
 800ce30:	08014dec 	.word	0x08014dec
 800ce34:	20000690 	.word	0x20000690

0800ce38 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800ce38:	b580      	push	{r7, lr}
 800ce3a:	b082      	sub	sp, #8
 800ce3c:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 800ce42:	f000 f86b 	bl	800cf1c <BSP_SD_IsDetected>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b01      	cmp	r3, #1
 800ce4a:	d001      	beq.n	800ce50 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 800ce4c:	2302      	movs	r3, #2
 800ce4e:	e005      	b.n	800ce5c <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd1);
 800ce50:	4804      	ldr	r0, [pc, #16]	; (800ce64 <BSP_SD_Init+0x2c>)
 800ce52:	f7fa fc89 	bl	8007768 <HAL_SD_Init>
 800ce56:	4603      	mov	r3, r0
 800ce58:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 800ce5a:	79fb      	ldrb	r3, [r7, #7]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3708      	adds	r7, #8
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}
 800ce64:	200003c0 	.word	0x200003c0

0800ce68 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800ce68:	b580      	push	{r7, lr}
 800ce6a:	b088      	sub	sp, #32
 800ce6c:	af02      	add	r7, sp, #8
 800ce6e:	60f8      	str	r0, [r7, #12]
 800ce70:	60b9      	str	r1, [r7, #8]
 800ce72:	607a      	str	r2, [r7, #4]
 800ce74:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ce76:	2300      	movs	r3, #0
 800ce78:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd1, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ce7a:	683b      	ldr	r3, [r7, #0]
 800ce7c:	9300      	str	r3, [sp, #0]
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	68f9      	ldr	r1, [r7, #12]
 800ce84:	4806      	ldr	r0, [pc, #24]	; (800cea0 <BSP_SD_ReadBlocks+0x38>)
 800ce86:	f7fa fd27 	bl	80078d8 <HAL_SD_ReadBlocks>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d001      	beq.n	800ce94 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800ce90:	2301      	movs	r3, #1
 800ce92:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ce94:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3718      	adds	r7, #24
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
 800ce9e:	bf00      	nop
 800cea0:	200003c0 	.word	0x200003c0

0800cea4 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800cea4:	b580      	push	{r7, lr}
 800cea6:	b088      	sub	sp, #32
 800cea8:	af02      	add	r7, sp, #8
 800ceaa:	60f8      	str	r0, [r7, #12]
 800ceac:	60b9      	str	r1, [r7, #8]
 800ceae:	607a      	str	r2, [r7, #4]
 800ceb0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800ceb2:	2300      	movs	r3, #0
 800ceb4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd1, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	9300      	str	r3, [sp, #0]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	68ba      	ldr	r2, [r7, #8]
 800cebe:	68f9      	ldr	r1, [r7, #12]
 800cec0:	4806      	ldr	r0, [pc, #24]	; (800cedc <BSP_SD_WriteBlocks+0x38>)
 800cec2:	f7fa fee7 	bl	8007c94 <HAL_SD_WriteBlocks>
 800cec6:	4603      	mov	r3, r0
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d001      	beq.n	800ced0 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 800cecc:	2301      	movs	r3, #1
 800cece:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800ced0:	7dfb      	ldrb	r3, [r7, #23]
}
 800ced2:	4618      	mov	r0, r3
 800ced4:	3718      	adds	r7, #24
 800ced6:	46bd      	mov	sp, r7
 800ced8:	bd80      	pop	{r7, pc}
 800ceda:	bf00      	nop
 800cedc:	200003c0 	.word	0x200003c0

0800cee0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd1) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 800cee4:	4805      	ldr	r0, [pc, #20]	; (800cefc <BSP_SD_GetCardState+0x1c>)
 800cee6:	f7fb fa2b 	bl	8008340 <HAL_SD_GetCardState>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b04      	cmp	r3, #4
 800ceee:	bf14      	ite	ne
 800cef0:	2301      	movne	r3, #1
 800cef2:	2300      	moveq	r3, #0
 800cef4:	b2db      	uxtb	r3, r3
}
 800cef6:	4618      	mov	r0, r3
 800cef8:	bd80      	pop	{r7, pc}
 800cefa:	bf00      	nop
 800cefc:	200003c0 	.word	0x200003c0

0800cf00 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b082      	sub	sp, #8
 800cf04:	af00      	add	r7, sp, #0
 800cf06:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd1, CardInfo);
 800cf08:	6879      	ldr	r1, [r7, #4]
 800cf0a:	4803      	ldr	r0, [pc, #12]	; (800cf18 <BSP_SD_GetCardInfo+0x18>)
 800cf0c:	f7fb f9ec 	bl	80082e8 <HAL_SD_GetCardInfo>
}
 800cf10:	bf00      	nop
 800cf12:	3708      	adds	r7, #8
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd80      	pop	{r7, pc}
 800cf18:	200003c0 	.word	0x200003c0

0800cf1c <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 800cf1c:	b580      	push	{r7, lr}
 800cf1e:	b082      	sub	sp, #8
 800cf20:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800cf22:	2301      	movs	r3, #1
 800cf24:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 800cf26:	f000 f80b 	bl	800cf40 <BSP_PlatformIsDetected>
 800cf2a:	4603      	mov	r3, r0
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d101      	bne.n	800cf34 <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800cf30:	2300      	movs	r3, #0
 800cf32:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800cf34:	79fb      	ldrb	r3, [r7, #7]
 800cf36:	b2db      	uxtb	r3, r3
}
 800cf38:	4618      	mov	r0, r3
 800cf3a:	3708      	adds	r7, #8
 800cf3c:	46bd      	mov	sp, r7
 800cf3e:	bd80      	pop	{r7, pc}

0800cf40 <BSP_PlatformIsDetected>:
  ******************************************************************************
*/
/* USER CODE END Header */
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b082      	sub	sp, #8
 800cf44:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 800cf46:	2301      	movs	r3, #1
 800cf48:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 800cf4a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800cf4e:	4806      	ldr	r0, [pc, #24]	; (800cf68 <BSP_PlatformIsDetected+0x28>)
 800cf50:	f7f6 faec 	bl	800352c <HAL_GPIO_ReadPin>
 800cf54:	4603      	mov	r3, r0
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	d001      	beq.n	800cf5e <BSP_PlatformIsDetected+0x1e>
    {
        status = SD_NOT_PRESENT;
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	71fb      	strb	r3, [r7, #7]
    }
    /* USER CODE BEGIN 1 */
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 800cf5e:	79fb      	ldrb	r3, [r7, #7]
}
 800cf60:	4618      	mov	r0, r3
 800cf62:	3708      	adds	r7, #8
 800cf64:	46bd      	mov	sp, r7
 800cf66:	bd80      	pop	{r7, pc}
 800cf68:	40020000 	.word	0x40020000

0800cf6c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800cf6c:	b580      	push	{r7, lr}
 800cf6e:	b082      	sub	sp, #8
 800cf70:	af00      	add	r7, sp, #0
 800cf72:	4603      	mov	r3, r0
 800cf74:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 800cf76:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <SD_CheckStatus+0x38>)
 800cf78:	2201      	movs	r2, #1
 800cf7a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800cf7c:	f7ff ffb0 	bl	800cee0 <BSP_SD_GetCardState>
 800cf80:	4603      	mov	r3, r0
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d107      	bne.n	800cf96 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 800cf86:	4b07      	ldr	r3, [pc, #28]	; (800cfa4 <SD_CheckStatus+0x38>)
 800cf88:	781b      	ldrb	r3, [r3, #0]
 800cf8a:	b2db      	uxtb	r3, r3
 800cf8c:	f023 0301 	bic.w	r3, r3, #1
 800cf90:	b2da      	uxtb	r2, r3
 800cf92:	4b04      	ldr	r3, [pc, #16]	; (800cfa4 <SD_CheckStatus+0x38>)
 800cf94:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800cf96:	4b03      	ldr	r3, [pc, #12]	; (800cfa4 <SD_CheckStatus+0x38>)
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	b2db      	uxtb	r3, r3
}
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	3708      	adds	r7, #8
 800cfa0:	46bd      	mov	sp, r7
 800cfa2:	bd80      	pop	{r7, pc}
 800cfa4:	20000009 	.word	0x20000009

0800cfa8 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	4603      	mov	r3, r0
 800cfb0:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 800cfb2:	4b0b      	ldr	r3, [pc, #44]	; (800cfe0 <SD_initialize+0x38>)
 800cfb4:	2201      	movs	r2, #1
 800cfb6:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800cfb8:	f7ff ff3e 	bl	800ce38 <BSP_SD_Init>
 800cfbc:	4603      	mov	r3, r0
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d107      	bne.n	800cfd2 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 800cfc2:	79fb      	ldrb	r3, [r7, #7]
 800cfc4:	4618      	mov	r0, r3
 800cfc6:	f7ff ffd1 	bl	800cf6c <SD_CheckStatus>
 800cfca:	4603      	mov	r3, r0
 800cfcc:	461a      	mov	r2, r3
 800cfce:	4b04      	ldr	r3, [pc, #16]	; (800cfe0 <SD_initialize+0x38>)
 800cfd0:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800cfd2:	4b03      	ldr	r3, [pc, #12]	; (800cfe0 <SD_initialize+0x38>)
 800cfd4:	781b      	ldrb	r3, [r3, #0]
 800cfd6:	b2db      	uxtb	r3, r3
}
 800cfd8:	4618      	mov	r0, r3
 800cfda:	3708      	adds	r7, #8
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	bd80      	pop	{r7, pc}
 800cfe0:	20000009 	.word	0x20000009

0800cfe4 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800cfe4:	b580      	push	{r7, lr}
 800cfe6:	b082      	sub	sp, #8
 800cfe8:	af00      	add	r7, sp, #0
 800cfea:	4603      	mov	r3, r0
 800cfec:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800cfee:	79fb      	ldrb	r3, [r7, #7]
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7ff ffbb 	bl	800cf6c <SD_CheckStatus>
 800cff6:	4603      	mov	r3, r0
}
 800cff8:	4618      	mov	r0, r3
 800cffa:	3708      	adds	r7, #8
 800cffc:	46bd      	mov	sp, r7
 800cffe:	bd80      	pop	{r7, pc}

0800d000 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b086      	sub	sp, #24
 800d004:	af00      	add	r7, sp, #0
 800d006:	60b9      	str	r1, [r7, #8]
 800d008:	607a      	str	r2, [r7, #4]
 800d00a:	603b      	str	r3, [r7, #0]
 800d00c:	4603      	mov	r3, r0
 800d00e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d010:	2301      	movs	r3, #1
 800d012:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800d014:	f04f 33ff 	mov.w	r3, #4294967295
 800d018:	683a      	ldr	r2, [r7, #0]
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	68b8      	ldr	r0, [r7, #8]
 800d01e:	f7ff ff23 	bl	800ce68 <BSP_SD_ReadBlocks>
 800d022:	4603      	mov	r3, r0
 800d024:	2b00      	cmp	r3, #0
 800d026:	d107      	bne.n	800d038 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 800d028:	bf00      	nop
 800d02a:	f7ff ff59 	bl	800cee0 <BSP_SD_GetCardState>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b00      	cmp	r3, #0
 800d032:	d1fa      	bne.n	800d02a <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800d034:	2300      	movs	r3, #0
 800d036:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d038:	7dfb      	ldrb	r3, [r7, #23]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3718      	adds	r7, #24
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}

0800d042 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800d042:	b580      	push	{r7, lr}
 800d044:	b086      	sub	sp, #24
 800d046:	af00      	add	r7, sp, #0
 800d048:	60b9      	str	r1, [r7, #8]
 800d04a:	607a      	str	r2, [r7, #4]
 800d04c:	603b      	str	r3, [r7, #0]
 800d04e:	4603      	mov	r3, r0
 800d050:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800d052:	2301      	movs	r3, #1
 800d054:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800d056:	f04f 33ff 	mov.w	r3, #4294967295
 800d05a:	683a      	ldr	r2, [r7, #0]
 800d05c:	6879      	ldr	r1, [r7, #4]
 800d05e:	68b8      	ldr	r0, [r7, #8]
 800d060:	f7ff ff20 	bl	800cea4 <BSP_SD_WriteBlocks>
 800d064:	4603      	mov	r3, r0
 800d066:	2b00      	cmp	r3, #0
 800d068:	d107      	bne.n	800d07a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800d06a:	bf00      	nop
 800d06c:	f7ff ff38 	bl	800cee0 <BSP_SD_GetCardState>
 800d070:	4603      	mov	r3, r0
 800d072:	2b00      	cmp	r3, #0
 800d074:	d1fa      	bne.n	800d06c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 800d076:	2300      	movs	r3, #0
 800d078:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800d07a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d07c:	4618      	mov	r0, r3
 800d07e:	3718      	adds	r7, #24
 800d080:	46bd      	mov	sp, r7
 800d082:	bd80      	pop	{r7, pc}

0800d084 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 800d084:	b580      	push	{r7, lr}
 800d086:	b08c      	sub	sp, #48	; 0x30
 800d088:	af00      	add	r7, sp, #0
 800d08a:	4603      	mov	r3, r0
 800d08c:	603a      	str	r2, [r7, #0]
 800d08e:	71fb      	strb	r3, [r7, #7]
 800d090:	460b      	mov	r3, r1
 800d092:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 800d094:	2301      	movs	r3, #1
 800d096:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800d09a:	4b25      	ldr	r3, [pc, #148]	; (800d130 <SD_ioctl+0xac>)
 800d09c:	781b      	ldrb	r3, [r3, #0]
 800d09e:	b2db      	uxtb	r3, r3
 800d0a0:	f003 0301 	and.w	r3, r3, #1
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d001      	beq.n	800d0ac <SD_ioctl+0x28>
 800d0a8:	2303      	movs	r3, #3
 800d0aa:	e03c      	b.n	800d126 <SD_ioctl+0xa2>

  switch (cmd)
 800d0ac:	79bb      	ldrb	r3, [r7, #6]
 800d0ae:	2b03      	cmp	r3, #3
 800d0b0:	d834      	bhi.n	800d11c <SD_ioctl+0x98>
 800d0b2:	a201      	add	r2, pc, #4	; (adr r2, 800d0b8 <SD_ioctl+0x34>)
 800d0b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b8:	0800d0c9 	.word	0x0800d0c9
 800d0bc:	0800d0d1 	.word	0x0800d0d1
 800d0c0:	0800d0e9 	.word	0x0800d0e9
 800d0c4:	0800d103 	.word	0x0800d103
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 800d0c8:	2300      	movs	r3, #0
 800d0ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d0ce:	e028      	b.n	800d122 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0d0:	f107 030c 	add.w	r3, r7, #12
 800d0d4:	4618      	mov	r0, r3
 800d0d6:	f7ff ff13 	bl	800cf00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800d0da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d0dc:	683b      	ldr	r3, [r7, #0]
 800d0de:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d0e0:	2300      	movs	r3, #0
 800d0e2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d0e6:	e01c      	b.n	800d122 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d0e8:	f107 030c 	add.w	r3, r7, #12
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f7ff ff07 	bl	800cf00 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800d0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0f4:	b29a      	uxth	r2, r3
 800d0f6:	683b      	ldr	r3, [r7, #0]
 800d0f8:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d100:	e00f      	b.n	800d122 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800d102:	f107 030c 	add.w	r3, r7, #12
 800d106:	4618      	mov	r0, r3
 800d108:	f7ff fefa 	bl	800cf00 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 800d10c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10e:	0a5a      	lsrs	r2, r3, #9
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800d114:	2300      	movs	r3, #0
 800d116:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800d11a:	e002      	b.n	800d122 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 800d11c:	2304      	movs	r3, #4
 800d11e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800d122:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800d126:	4618      	mov	r0, r3
 800d128:	3730      	adds	r7, #48	; 0x30
 800d12a:	46bd      	mov	sp, r7
 800d12c:	bd80      	pop	{r7, pc}
 800d12e:	bf00      	nop
 800d130:	20000009 	.word	0x20000009

0800d134 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d134:	b580      	push	{r7, lr}
 800d136:	b084      	sub	sp, #16
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
 800d13c:	460b      	mov	r3, r1
 800d13e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800d140:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800d144:	f005 f8ea 	bl	801231c <malloc>
 800d148:	4603      	mov	r3, r0
 800d14a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	2b00      	cmp	r3, #0
 800d150:	d109      	bne.n	800d166 <USBD_CDC_Init+0x32>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	32b0      	adds	r2, #176	; 0xb0
 800d15c:	2100      	movs	r1, #0
 800d15e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800d162:	2302      	movs	r3, #2
 800d164:	e0d4      	b.n	800d310 <USBD_CDC_Init+0x1dc>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800d166:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800d16a:	2100      	movs	r1, #0
 800d16c:	68f8      	ldr	r0, [r7, #12]
 800d16e:	f005 f8e5 	bl	801233c <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	32b0      	adds	r2, #176	; 0xb0
 800d17c:	68f9      	ldr	r1, [r7, #12]
 800d17e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	32b0      	adds	r2, #176	; 0xb0
 800d18c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	7c1b      	ldrb	r3, [r3, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d138      	bne.n	800d210 <USBD_CDC_Init+0xdc>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d19e:	4b5e      	ldr	r3, [pc, #376]	; (800d318 <USBD_CDC_Init+0x1e4>)
 800d1a0:	7819      	ldrb	r1, [r3, #0]
 800d1a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1a6:	2202      	movs	r2, #2
 800d1a8:	6878      	ldr	r0, [r7, #4]
 800d1aa:	f004 fbd2 	bl	8011952 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d1ae:	4b5a      	ldr	r3, [pc, #360]	; (800d318 <USBD_CDC_Init+0x1e4>)
 800d1b0:	781b      	ldrb	r3, [r3, #0]
 800d1b2:	f003 020f 	and.w	r2, r3, #15
 800d1b6:	6879      	ldr	r1, [r7, #4]
 800d1b8:	4613      	mov	r3, r2
 800d1ba:	009b      	lsls	r3, r3, #2
 800d1bc:	4413      	add	r3, r2
 800d1be:	009b      	lsls	r3, r3, #2
 800d1c0:	440b      	add	r3, r1
 800d1c2:	3324      	adds	r3, #36	; 0x24
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d1c8:	4b54      	ldr	r3, [pc, #336]	; (800d31c <USBD_CDC_Init+0x1e8>)
 800d1ca:	7819      	ldrb	r1, [r3, #0]
 800d1cc:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d1d0:	2202      	movs	r2, #2
 800d1d2:	6878      	ldr	r0, [r7, #4]
 800d1d4:	f004 fbbd 	bl	8011952 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d1d8:	4b50      	ldr	r3, [pc, #320]	; (800d31c <USBD_CDC_Init+0x1e8>)
 800d1da:	781b      	ldrb	r3, [r3, #0]
 800d1dc:	f003 020f 	and.w	r2, r3, #15
 800d1e0:	6879      	ldr	r1, [r7, #4]
 800d1e2:	4613      	mov	r3, r2
 800d1e4:	009b      	lsls	r3, r3, #2
 800d1e6:	4413      	add	r3, r2
 800d1e8:	009b      	lsls	r3, r3, #2
 800d1ea:	440b      	add	r3, r1
 800d1ec:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d1f0:	2201      	movs	r2, #1
 800d1f2:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800d1f4:	4b4a      	ldr	r3, [pc, #296]	; (800d320 <USBD_CDC_Init+0x1ec>)
 800d1f6:	781b      	ldrb	r3, [r3, #0]
 800d1f8:	f003 020f 	and.w	r2, r3, #15
 800d1fc:	6879      	ldr	r1, [r7, #4]
 800d1fe:	4613      	mov	r3, r2
 800d200:	009b      	lsls	r3, r3, #2
 800d202:	4413      	add	r3, r2
 800d204:	009b      	lsls	r3, r3, #2
 800d206:	440b      	add	r3, r1
 800d208:	3326      	adds	r3, #38	; 0x26
 800d20a:	2210      	movs	r2, #16
 800d20c:	801a      	strh	r2, [r3, #0]
 800d20e:	e035      	b.n	800d27c <USBD_CDC_Init+0x148>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800d210:	4b41      	ldr	r3, [pc, #260]	; (800d318 <USBD_CDC_Init+0x1e4>)
 800d212:	7819      	ldrb	r1, [r3, #0]
 800d214:	2340      	movs	r3, #64	; 0x40
 800d216:	2202      	movs	r2, #2
 800d218:	6878      	ldr	r0, [r7, #4]
 800d21a:	f004 fb9a 	bl	8011952 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800d21e:	4b3e      	ldr	r3, [pc, #248]	; (800d318 <USBD_CDC_Init+0x1e4>)
 800d220:	781b      	ldrb	r3, [r3, #0]
 800d222:	f003 020f 	and.w	r2, r3, #15
 800d226:	6879      	ldr	r1, [r7, #4]
 800d228:	4613      	mov	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	440b      	add	r3, r1
 800d232:	3324      	adds	r3, #36	; 0x24
 800d234:	2201      	movs	r2, #1
 800d236:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800d238:	4b38      	ldr	r3, [pc, #224]	; (800d31c <USBD_CDC_Init+0x1e8>)
 800d23a:	7819      	ldrb	r1, [r3, #0]
 800d23c:	2340      	movs	r3, #64	; 0x40
 800d23e:	2202      	movs	r2, #2
 800d240:	6878      	ldr	r0, [r7, #4]
 800d242:	f004 fb86 	bl	8011952 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800d246:	4b35      	ldr	r3, [pc, #212]	; (800d31c <USBD_CDC_Init+0x1e8>)
 800d248:	781b      	ldrb	r3, [r3, #0]
 800d24a:	f003 020f 	and.w	r2, r3, #15
 800d24e:	6879      	ldr	r1, [r7, #4]
 800d250:	4613      	mov	r3, r2
 800d252:	009b      	lsls	r3, r3, #2
 800d254:	4413      	add	r3, r2
 800d256:	009b      	lsls	r3, r3, #2
 800d258:	440b      	add	r3, r1
 800d25a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d25e:	2201      	movs	r2, #1
 800d260:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800d262:	4b2f      	ldr	r3, [pc, #188]	; (800d320 <USBD_CDC_Init+0x1ec>)
 800d264:	781b      	ldrb	r3, [r3, #0]
 800d266:	f003 020f 	and.w	r2, r3, #15
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	4613      	mov	r3, r2
 800d26e:	009b      	lsls	r3, r3, #2
 800d270:	4413      	add	r3, r2
 800d272:	009b      	lsls	r3, r3, #2
 800d274:	440b      	add	r3, r1
 800d276:	3326      	adds	r3, #38	; 0x26
 800d278:	2210      	movs	r2, #16
 800d27a:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800d27c:	4b28      	ldr	r3, [pc, #160]	; (800d320 <USBD_CDC_Init+0x1ec>)
 800d27e:	7819      	ldrb	r1, [r3, #0]
 800d280:	2308      	movs	r3, #8
 800d282:	2203      	movs	r2, #3
 800d284:	6878      	ldr	r0, [r7, #4]
 800d286:	f004 fb64 	bl	8011952 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800d28a:	4b25      	ldr	r3, [pc, #148]	; (800d320 <USBD_CDC_Init+0x1ec>)
 800d28c:	781b      	ldrb	r3, [r3, #0]
 800d28e:	f003 020f 	and.w	r2, r3, #15
 800d292:	6879      	ldr	r1, [r7, #4]
 800d294:	4613      	mov	r3, r2
 800d296:	009b      	lsls	r3, r3, #2
 800d298:	4413      	add	r3, r2
 800d29a:	009b      	lsls	r3, r3, #2
 800d29c:	440b      	add	r3, r1
 800d29e:	3324      	adds	r3, #36	; 0x24
 800d2a0:	2201      	movs	r2, #1
 800d2a2:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	2200      	movs	r2, #0
 800d2a8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d2b2:	687a      	ldr	r2, [r7, #4]
 800d2b4:	33b0      	adds	r3, #176	; 0xb0
 800d2b6:	009b      	lsls	r3, r3, #2
 800d2b8:	4413      	add	r3, r2
 800d2ba:	685b      	ldr	r3, [r3, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	2200      	movs	r2, #0
 800d2cc:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800d2d0:	68fb      	ldr	r3, [r7, #12]
 800d2d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d101      	bne.n	800d2de <USBD_CDC_Init+0x1aa>
  {
    return (uint8_t)USBD_EMEM;
 800d2da:	2302      	movs	r3, #2
 800d2dc:	e018      	b.n	800d310 <USBD_CDC_Init+0x1dc>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	7c1b      	ldrb	r3, [r3, #16]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10a      	bne.n	800d2fc <USBD_CDC_Init+0x1c8>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d2e6:	4b0d      	ldr	r3, [pc, #52]	; (800d31c <USBD_CDC_Init+0x1e8>)
 800d2e8:	7819      	ldrb	r1, [r3, #0]
 800d2ea:	68fb      	ldr	r3, [r7, #12]
 800d2ec:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d2f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d2f4:	6878      	ldr	r0, [r7, #4]
 800d2f6:	f004 fc1b 	bl	8011b30 <USBD_LL_PrepareReceive>
 800d2fa:	e008      	b.n	800d30e <USBD_CDC_Init+0x1da>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800d2fc:	4b07      	ldr	r3, [pc, #28]	; (800d31c <USBD_CDC_Init+0x1e8>)
 800d2fe:	7819      	ldrb	r1, [r3, #0]
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d306:	2340      	movs	r3, #64	; 0x40
 800d308:	6878      	ldr	r0, [r7, #4]
 800d30a:	f004 fc11 	bl	8011b30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800d30e:	2300      	movs	r3, #0
}
 800d310:	4618      	mov	r0, r3
 800d312:	3710      	adds	r7, #16
 800d314:	46bd      	mov	sp, r7
 800d316:	bd80      	pop	{r7, pc}
 800d318:	20000093 	.word	0x20000093
 800d31c:	20000094 	.word	0x20000094
 800d320:	20000095 	.word	0x20000095

0800d324 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800d324:	b580      	push	{r7, lr}
 800d326:	b082      	sub	sp, #8
 800d328:	af00      	add	r7, sp, #0
 800d32a:	6078      	str	r0, [r7, #4]
 800d32c:	460b      	mov	r3, r1
 800d32e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800d330:	4b3a      	ldr	r3, [pc, #232]	; (800d41c <USBD_CDC_DeInit+0xf8>)
 800d332:	781b      	ldrb	r3, [r3, #0]
 800d334:	4619      	mov	r1, r3
 800d336:	6878      	ldr	r0, [r7, #4]
 800d338:	f004 fb31 	bl	801199e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800d33c:	4b37      	ldr	r3, [pc, #220]	; (800d41c <USBD_CDC_DeInit+0xf8>)
 800d33e:	781b      	ldrb	r3, [r3, #0]
 800d340:	f003 020f 	and.w	r2, r3, #15
 800d344:	6879      	ldr	r1, [r7, #4]
 800d346:	4613      	mov	r3, r2
 800d348:	009b      	lsls	r3, r3, #2
 800d34a:	4413      	add	r3, r2
 800d34c:	009b      	lsls	r3, r3, #2
 800d34e:	440b      	add	r3, r1
 800d350:	3324      	adds	r3, #36	; 0x24
 800d352:	2200      	movs	r2, #0
 800d354:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800d356:	4b32      	ldr	r3, [pc, #200]	; (800d420 <USBD_CDC_DeInit+0xfc>)
 800d358:	781b      	ldrb	r3, [r3, #0]
 800d35a:	4619      	mov	r1, r3
 800d35c:	6878      	ldr	r0, [r7, #4]
 800d35e:	f004 fb1e 	bl	801199e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800d362:	4b2f      	ldr	r3, [pc, #188]	; (800d420 <USBD_CDC_DeInit+0xfc>)
 800d364:	781b      	ldrb	r3, [r3, #0]
 800d366:	f003 020f 	and.w	r2, r3, #15
 800d36a:	6879      	ldr	r1, [r7, #4]
 800d36c:	4613      	mov	r3, r2
 800d36e:	009b      	lsls	r3, r3, #2
 800d370:	4413      	add	r3, r2
 800d372:	009b      	lsls	r3, r3, #2
 800d374:	440b      	add	r3, r1
 800d376:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d37a:	2200      	movs	r2, #0
 800d37c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800d37e:	4b29      	ldr	r3, [pc, #164]	; (800d424 <USBD_CDC_DeInit+0x100>)
 800d380:	781b      	ldrb	r3, [r3, #0]
 800d382:	4619      	mov	r1, r3
 800d384:	6878      	ldr	r0, [r7, #4]
 800d386:	f004 fb0a 	bl	801199e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800d38a:	4b26      	ldr	r3, [pc, #152]	; (800d424 <USBD_CDC_DeInit+0x100>)
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	f003 020f 	and.w	r2, r3, #15
 800d392:	6879      	ldr	r1, [r7, #4]
 800d394:	4613      	mov	r3, r2
 800d396:	009b      	lsls	r3, r3, #2
 800d398:	4413      	add	r3, r2
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	440b      	add	r3, r1
 800d39e:	3324      	adds	r3, #36	; 0x24
 800d3a0:	2200      	movs	r2, #0
 800d3a2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800d3a4:	4b1f      	ldr	r3, [pc, #124]	; (800d424 <USBD_CDC_DeInit+0x100>)
 800d3a6:	781b      	ldrb	r3, [r3, #0]
 800d3a8:	f003 020f 	and.w	r2, r3, #15
 800d3ac:	6879      	ldr	r1, [r7, #4]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	009b      	lsls	r3, r3, #2
 800d3b2:	4413      	add	r3, r2
 800d3b4:	009b      	lsls	r3, r3, #2
 800d3b6:	440b      	add	r3, r1
 800d3b8:	3326      	adds	r3, #38	; 0x26
 800d3ba:	2200      	movs	r2, #0
 800d3bc:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	32b0      	adds	r2, #176	; 0xb0
 800d3c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d01f      	beq.n	800d410 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d3d6:	687a      	ldr	r2, [r7, #4]
 800d3d8:	33b0      	adds	r3, #176	; 0xb0
 800d3da:	009b      	lsls	r3, r3, #2
 800d3dc:	4413      	add	r3, r2
 800d3de:	685b      	ldr	r3, [r3, #4]
 800d3e0:	685b      	ldr	r3, [r3, #4]
 800d3e2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	32b0      	adds	r2, #176	; 0xb0
 800d3ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	f004 ff9a 	bl	801232c <free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3fe:	687b      	ldr	r3, [r7, #4]
 800d400:	32b0      	adds	r2, #176	; 0xb0
 800d402:	2100      	movs	r1, #0
 800d404:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	2200      	movs	r2, #0
 800d40c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800d410:	2300      	movs	r3, #0
}
 800d412:	4618      	mov	r0, r3
 800d414:	3708      	adds	r7, #8
 800d416:	46bd      	mov	sp, r7
 800d418:	bd80      	pop	{r7, pc}
 800d41a:	bf00      	nop
 800d41c:	20000093 	.word	0x20000093
 800d420:	20000094 	.word	0x20000094
 800d424:	20000095 	.word	0x20000095

0800d428 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800d428:	b580      	push	{r7, lr}
 800d42a:	b086      	sub	sp, #24
 800d42c:	af00      	add	r7, sp, #0
 800d42e:	6078      	str	r0, [r7, #4]
 800d430:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	32b0      	adds	r2, #176	; 0xb0
 800d43c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d440:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800d442:	2300      	movs	r3, #0
 800d444:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800d446:	2300      	movs	r3, #0
 800d448:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800d44a:	2300      	movs	r3, #0
 800d44c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800d44e:	693b      	ldr	r3, [r7, #16]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d101      	bne.n	800d458 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800d454:	2303      	movs	r3, #3
 800d456:	e0bf      	b.n	800d5d8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	781b      	ldrb	r3, [r3, #0]
 800d45c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d460:	2b00      	cmp	r3, #0
 800d462:	d050      	beq.n	800d506 <USBD_CDC_Setup+0xde>
 800d464:	2b20      	cmp	r3, #32
 800d466:	f040 80af 	bne.w	800d5c8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800d46a:	683b      	ldr	r3, [r7, #0]
 800d46c:	88db      	ldrh	r3, [r3, #6]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d03a      	beq.n	800d4e8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	781b      	ldrb	r3, [r3, #0]
 800d476:	b25b      	sxtb	r3, r3
 800d478:	2b00      	cmp	r3, #0
 800d47a:	da1b      	bge.n	800d4b4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d482:	687a      	ldr	r2, [r7, #4]
 800d484:	33b0      	adds	r3, #176	; 0xb0
 800d486:	009b      	lsls	r3, r3, #2
 800d488:	4413      	add	r3, r2
 800d48a:	685b      	ldr	r3, [r3, #4]
 800d48c:	689b      	ldr	r3, [r3, #8]
 800d48e:	683a      	ldr	r2, [r7, #0]
 800d490:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800d492:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d494:	683a      	ldr	r2, [r7, #0]
 800d496:	88d2      	ldrh	r2, [r2, #6]
 800d498:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800d49a:	683b      	ldr	r3, [r7, #0]
 800d49c:	88db      	ldrh	r3, [r3, #6]
 800d49e:	2b07      	cmp	r3, #7
 800d4a0:	bf28      	it	cs
 800d4a2:	2307      	movcs	r3, #7
 800d4a4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800d4a6:	693b      	ldr	r3, [r7, #16]
 800d4a8:	89fa      	ldrh	r2, [r7, #14]
 800d4aa:	4619      	mov	r1, r3
 800d4ac:	6878      	ldr	r0, [r7, #4]
 800d4ae:	f001 fdad 	bl	800f00c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800d4b2:	e090      	b.n	800d5d6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800d4b4:	683b      	ldr	r3, [r7, #0]
 800d4b6:	785a      	ldrb	r2, [r3, #1]
 800d4b8:	693b      	ldr	r3, [r7, #16]
 800d4ba:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800d4be:	683b      	ldr	r3, [r7, #0]
 800d4c0:	88db      	ldrh	r3, [r3, #6]
 800d4c2:	2b3f      	cmp	r3, #63	; 0x3f
 800d4c4:	d803      	bhi.n	800d4ce <USBD_CDC_Setup+0xa6>
 800d4c6:	683b      	ldr	r3, [r7, #0]
 800d4c8:	88db      	ldrh	r3, [r3, #6]
 800d4ca:	b2da      	uxtb	r2, r3
 800d4cc:	e000      	b.n	800d4d0 <USBD_CDC_Setup+0xa8>
 800d4ce:	2240      	movs	r2, #64	; 0x40
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800d4d6:	6939      	ldr	r1, [r7, #16]
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800d4de:	461a      	mov	r2, r3
 800d4e0:	6878      	ldr	r0, [r7, #4]
 800d4e2:	f001 fdbf 	bl	800f064 <USBD_CtlPrepareRx>
      break;
 800d4e6:	e076      	b.n	800d5d6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d4ee:	687a      	ldr	r2, [r7, #4]
 800d4f0:	33b0      	adds	r3, #176	; 0xb0
 800d4f2:	009b      	lsls	r3, r3, #2
 800d4f4:	4413      	add	r3, r2
 800d4f6:	685b      	ldr	r3, [r3, #4]
 800d4f8:	689b      	ldr	r3, [r3, #8]
 800d4fa:	683a      	ldr	r2, [r7, #0]
 800d4fc:	7850      	ldrb	r0, [r2, #1]
 800d4fe:	2200      	movs	r2, #0
 800d500:	6839      	ldr	r1, [r7, #0]
 800d502:	4798      	blx	r3
      break;
 800d504:	e067      	b.n	800d5d6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	785b      	ldrb	r3, [r3, #1]
 800d50a:	2b0b      	cmp	r3, #11
 800d50c:	d851      	bhi.n	800d5b2 <USBD_CDC_Setup+0x18a>
 800d50e:	a201      	add	r2, pc, #4	; (adr r2, 800d514 <USBD_CDC_Setup+0xec>)
 800d510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d514:	0800d545 	.word	0x0800d545
 800d518:	0800d5c1 	.word	0x0800d5c1
 800d51c:	0800d5b3 	.word	0x0800d5b3
 800d520:	0800d5b3 	.word	0x0800d5b3
 800d524:	0800d5b3 	.word	0x0800d5b3
 800d528:	0800d5b3 	.word	0x0800d5b3
 800d52c:	0800d5b3 	.word	0x0800d5b3
 800d530:	0800d5b3 	.word	0x0800d5b3
 800d534:	0800d5b3 	.word	0x0800d5b3
 800d538:	0800d5b3 	.word	0x0800d5b3
 800d53c:	0800d56f 	.word	0x0800d56f
 800d540:	0800d599 	.word	0x0800d599
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d54a:	b2db      	uxtb	r3, r3
 800d54c:	2b03      	cmp	r3, #3
 800d54e:	d107      	bne.n	800d560 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800d550:	f107 030a 	add.w	r3, r7, #10
 800d554:	2202      	movs	r2, #2
 800d556:	4619      	mov	r1, r3
 800d558:	6878      	ldr	r0, [r7, #4]
 800d55a:	f001 fd57 	bl	800f00c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d55e:	e032      	b.n	800d5c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d560:	6839      	ldr	r1, [r7, #0]
 800d562:	6878      	ldr	r0, [r7, #4]
 800d564:	f001 fce1 	bl	800ef2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d568:	2303      	movs	r3, #3
 800d56a:	75fb      	strb	r3, [r7, #23]
          break;
 800d56c:	e02b      	b.n	800d5c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d574:	b2db      	uxtb	r3, r3
 800d576:	2b03      	cmp	r3, #3
 800d578:	d107      	bne.n	800d58a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800d57a:	f107 030d 	add.w	r3, r7, #13
 800d57e:	2201      	movs	r2, #1
 800d580:	4619      	mov	r1, r3
 800d582:	6878      	ldr	r0, [r7, #4]
 800d584:	f001 fd42 	bl	800f00c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800d588:	e01d      	b.n	800d5c6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800d58a:	6839      	ldr	r1, [r7, #0]
 800d58c:	6878      	ldr	r0, [r7, #4]
 800d58e:	f001 fccc 	bl	800ef2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d592:	2303      	movs	r3, #3
 800d594:	75fb      	strb	r3, [r7, #23]
          break;
 800d596:	e016      	b.n	800d5c6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d59e:	b2db      	uxtb	r3, r3
 800d5a0:	2b03      	cmp	r3, #3
 800d5a2:	d00f      	beq.n	800d5c4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800d5a4:	6839      	ldr	r1, [r7, #0]
 800d5a6:	6878      	ldr	r0, [r7, #4]
 800d5a8:	f001 fcbf 	bl	800ef2a <USBD_CtlError>
            ret = USBD_FAIL;
 800d5ac:	2303      	movs	r3, #3
 800d5ae:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800d5b0:	e008      	b.n	800d5c4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800d5b2:	6839      	ldr	r1, [r7, #0]
 800d5b4:	6878      	ldr	r0, [r7, #4]
 800d5b6:	f001 fcb8 	bl	800ef2a <USBD_CtlError>
          ret = USBD_FAIL;
 800d5ba:	2303      	movs	r3, #3
 800d5bc:	75fb      	strb	r3, [r7, #23]
          break;
 800d5be:	e002      	b.n	800d5c6 <USBD_CDC_Setup+0x19e>
          break;
 800d5c0:	bf00      	nop
 800d5c2:	e008      	b.n	800d5d6 <USBD_CDC_Setup+0x1ae>
          break;
 800d5c4:	bf00      	nop
      }
      break;
 800d5c6:	e006      	b.n	800d5d6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800d5c8:	6839      	ldr	r1, [r7, #0]
 800d5ca:	6878      	ldr	r0, [r7, #4]
 800d5cc:	f001 fcad 	bl	800ef2a <USBD_CtlError>
      ret = USBD_FAIL;
 800d5d0:	2303      	movs	r3, #3
 800d5d2:	75fb      	strb	r3, [r7, #23]
      break;
 800d5d4:	bf00      	nop
  }

  return (uint8_t)ret;
 800d5d6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5d8:	4618      	mov	r0, r3
 800d5da:	3718      	adds	r7, #24
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	bd80      	pop	{r7, pc}

0800d5e0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d5e0:	b580      	push	{r7, lr}
 800d5e2:	b084      	sub	sp, #16
 800d5e4:	af00      	add	r7, sp, #0
 800d5e6:	6078      	str	r0, [r7, #4]
 800d5e8:	460b      	mov	r3, r1
 800d5ea:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800d5f2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	32b0      	adds	r2, #176	; 0xb0
 800d5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d602:	2b00      	cmp	r3, #0
 800d604:	d101      	bne.n	800d60a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800d606:	2303      	movs	r3, #3
 800d608:	e065      	b.n	800d6d6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	32b0      	adds	r2, #176	; 0xb0
 800d614:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d618:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d61a:	78fb      	ldrb	r3, [r7, #3]
 800d61c:	f003 020f 	and.w	r2, r3, #15
 800d620:	6879      	ldr	r1, [r7, #4]
 800d622:	4613      	mov	r3, r2
 800d624:	009b      	lsls	r3, r3, #2
 800d626:	4413      	add	r3, r2
 800d628:	009b      	lsls	r3, r3, #2
 800d62a:	440b      	add	r3, r1
 800d62c:	3318      	adds	r3, #24
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	2b00      	cmp	r3, #0
 800d632:	d02f      	beq.n	800d694 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800d634:	78fb      	ldrb	r3, [r7, #3]
 800d636:	f003 020f 	and.w	r2, r3, #15
 800d63a:	6879      	ldr	r1, [r7, #4]
 800d63c:	4613      	mov	r3, r2
 800d63e:	009b      	lsls	r3, r3, #2
 800d640:	4413      	add	r3, r2
 800d642:	009b      	lsls	r3, r3, #2
 800d644:	440b      	add	r3, r1
 800d646:	3318      	adds	r3, #24
 800d648:	681a      	ldr	r2, [r3, #0]
 800d64a:	78fb      	ldrb	r3, [r7, #3]
 800d64c:	f003 010f 	and.w	r1, r3, #15
 800d650:	68f8      	ldr	r0, [r7, #12]
 800d652:	460b      	mov	r3, r1
 800d654:	00db      	lsls	r3, r3, #3
 800d656:	440b      	add	r3, r1
 800d658:	009b      	lsls	r3, r3, #2
 800d65a:	4403      	add	r3, r0
 800d65c:	3348      	adds	r3, #72	; 0x48
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	fbb2 f1f3 	udiv	r1, r2, r3
 800d664:	fb01 f303 	mul.w	r3, r1, r3
 800d668:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d112      	bne.n	800d694 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800d66e:	78fb      	ldrb	r3, [r7, #3]
 800d670:	f003 020f 	and.w	r2, r3, #15
 800d674:	6879      	ldr	r1, [r7, #4]
 800d676:	4613      	mov	r3, r2
 800d678:	009b      	lsls	r3, r3, #2
 800d67a:	4413      	add	r3, r2
 800d67c:	009b      	lsls	r3, r3, #2
 800d67e:	440b      	add	r3, r1
 800d680:	3318      	adds	r3, #24
 800d682:	2200      	movs	r2, #0
 800d684:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800d686:	78f9      	ldrb	r1, [r7, #3]
 800d688:	2300      	movs	r3, #0
 800d68a:	2200      	movs	r2, #0
 800d68c:	6878      	ldr	r0, [r7, #4]
 800d68e:	f004 fa2e 	bl	8011aee <USBD_LL_Transmit>
 800d692:	e01f      	b.n	800d6d4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800d694:	68bb      	ldr	r3, [r7, #8]
 800d696:	2200      	movs	r2, #0
 800d698:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6a2:	687a      	ldr	r2, [r7, #4]
 800d6a4:	33b0      	adds	r3, #176	; 0xb0
 800d6a6:	009b      	lsls	r3, r3, #2
 800d6a8:	4413      	add	r3, r2
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	691b      	ldr	r3, [r3, #16]
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	d010      	beq.n	800d6d4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800d6b2:	687b      	ldr	r3, [r7, #4]
 800d6b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d6b8:	687a      	ldr	r2, [r7, #4]
 800d6ba:	33b0      	adds	r3, #176	; 0xb0
 800d6bc:	009b      	lsls	r3, r3, #2
 800d6be:	4413      	add	r3, r2
 800d6c0:	685b      	ldr	r3, [r3, #4]
 800d6c2:	691b      	ldr	r3, [r3, #16]
 800d6c4:	68ba      	ldr	r2, [r7, #8]
 800d6c6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800d6ca:	68ba      	ldr	r2, [r7, #8]
 800d6cc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800d6d0:	78fa      	ldrb	r2, [r7, #3]
 800d6d2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800d6d4:	2300      	movs	r3, #0
}
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b084      	sub	sp, #16
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
 800d6e6:	460b      	mov	r3, r1
 800d6e8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	32b0      	adds	r2, #176	; 0xb0
 800d6f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6f8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800d6fa:	687b      	ldr	r3, [r7, #4]
 800d6fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	32b0      	adds	r2, #176	; 0xb0
 800d704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d101      	bne.n	800d710 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800d70c:	2303      	movs	r3, #3
 800d70e:	e01a      	b.n	800d746 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800d710:	78fb      	ldrb	r3, [r7, #3]
 800d712:	4619      	mov	r1, r3
 800d714:	6878      	ldr	r0, [r7, #4]
 800d716:	f004 fa2c 	bl	8011b72 <USBD_LL_GetRxDataSize>
 800d71a:	4602      	mov	r2, r0
 800d71c:	68fb      	ldr	r3, [r7, #12]
 800d71e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d728:	687a      	ldr	r2, [r7, #4]
 800d72a:	33b0      	adds	r3, #176	; 0xb0
 800d72c:	009b      	lsls	r3, r3, #2
 800d72e:	4413      	add	r3, r2
 800d730:	685b      	ldr	r3, [r3, #4]
 800d732:	68db      	ldr	r3, [r3, #12]
 800d734:	68fa      	ldr	r2, [r7, #12]
 800d736:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800d73a:	68fa      	ldr	r2, [r7, #12]
 800d73c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800d740:	4611      	mov	r1, r2
 800d742:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800d744:	2300      	movs	r3, #0
}
 800d746:	4618      	mov	r0, r3
 800d748:	3710      	adds	r7, #16
 800d74a:	46bd      	mov	sp, r7
 800d74c:	bd80      	pop	{r7, pc}

0800d74e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800d74e:	b580      	push	{r7, lr}
 800d750:	b084      	sub	sp, #16
 800d752:	af00      	add	r7, sp, #0
 800d754:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	32b0      	adds	r2, #176	; 0xb0
 800d760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d764:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d766:	68fb      	ldr	r3, [r7, #12]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d101      	bne.n	800d770 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800d76c:	2303      	movs	r3, #3
 800d76e:	e025      	b.n	800d7bc <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800d770:	687b      	ldr	r3, [r7, #4]
 800d772:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d776:	687a      	ldr	r2, [r7, #4]
 800d778:	33b0      	adds	r3, #176	; 0xb0
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	685b      	ldr	r3, [r3, #4]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d01a      	beq.n	800d7ba <USBD_CDC_EP0_RxReady+0x6c>
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800d78a:	2bff      	cmp	r3, #255	; 0xff
 800d78c:	d015      	beq.n	800d7ba <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d78e:	687b      	ldr	r3, [r7, #4]
 800d790:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d794:	687a      	ldr	r2, [r7, #4]
 800d796:	33b0      	adds	r3, #176	; 0xb0
 800d798:	009b      	lsls	r3, r3, #2
 800d79a:	4413      	add	r3, r2
 800d79c:	685b      	ldr	r3, [r3, #4]
 800d79e:	689b      	ldr	r3, [r3, #8]
 800d7a0:	68fa      	ldr	r2, [r7, #12]
 800d7a2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800d7a6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800d7a8:	68fa      	ldr	r2, [r7, #12]
 800d7aa:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800d7ae:	b292      	uxth	r2, r2
 800d7b0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	22ff      	movs	r2, #255	; 0xff
 800d7b6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800d7ba:	2300      	movs	r3, #0
}
 800d7bc:	4618      	mov	r0, r3
 800d7be:	3710      	adds	r7, #16
 800d7c0:	46bd      	mov	sp, r7
 800d7c2:	bd80      	pop	{r7, pc}

0800d7c4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b086      	sub	sp, #24
 800d7c8:	af00      	add	r7, sp, #0
 800d7ca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d7cc:	2182      	movs	r1, #130	; 0x82
 800d7ce:	4818      	ldr	r0, [pc, #96]	; (800d830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7d0:	f000 fd49 	bl	800e266 <USBD_GetEpDesc>
 800d7d4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d7d6:	2101      	movs	r1, #1
 800d7d8:	4815      	ldr	r0, [pc, #84]	; (800d830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7da:	f000 fd44 	bl	800e266 <USBD_GetEpDesc>
 800d7de:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d7e0:	2181      	movs	r1, #129	; 0x81
 800d7e2:	4813      	ldr	r0, [pc, #76]	; (800d830 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800d7e4:	f000 fd3f 	bl	800e266 <USBD_GetEpDesc>
 800d7e8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d002      	beq.n	800d7f6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d7f0:	697b      	ldr	r3, [r7, #20]
 800d7f2:	2210      	movs	r2, #16
 800d7f4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d7f6:	693b      	ldr	r3, [r7, #16]
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d006      	beq.n	800d80a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d7fc:	693b      	ldr	r3, [r7, #16]
 800d7fe:	2200      	movs	r2, #0
 800d800:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d804:	711a      	strb	r2, [r3, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d006      	beq.n	800d81e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d818:	711a      	strb	r2, [r3, #4]
 800d81a:	2200      	movs	r2, #0
 800d81c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	2243      	movs	r2, #67	; 0x43
 800d822:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d824:	4b02      	ldr	r3, [pc, #8]	; (800d830 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800d826:	4618      	mov	r0, r3
 800d828:	3718      	adds	r7, #24
 800d82a:	46bd      	mov	sp, r7
 800d82c:	bd80      	pop	{r7, pc}
 800d82e:	bf00      	nop
 800d830:	20000050 	.word	0x20000050

0800d834 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800d834:	b580      	push	{r7, lr}
 800d836:	b086      	sub	sp, #24
 800d838:	af00      	add	r7, sp, #0
 800d83a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d83c:	2182      	movs	r1, #130	; 0x82
 800d83e:	4818      	ldr	r0, [pc, #96]	; (800d8a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d840:	f000 fd11 	bl	800e266 <USBD_GetEpDesc>
 800d844:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d846:	2101      	movs	r1, #1
 800d848:	4815      	ldr	r0, [pc, #84]	; (800d8a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d84a:	f000 fd0c 	bl	800e266 <USBD_GetEpDesc>
 800d84e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d850:	2181      	movs	r1, #129	; 0x81
 800d852:	4813      	ldr	r0, [pc, #76]	; (800d8a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800d854:	f000 fd07 	bl	800e266 <USBD_GetEpDesc>
 800d858:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d85a:	697b      	ldr	r3, [r7, #20]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d002      	beq.n	800d866 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800d860:	697b      	ldr	r3, [r7, #20]
 800d862:	2210      	movs	r2, #16
 800d864:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d006      	beq.n	800d87a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	2200      	movs	r2, #0
 800d870:	711a      	strb	r2, [r3, #4]
 800d872:	2200      	movs	r2, #0
 800d874:	f042 0202 	orr.w	r2, r2, #2
 800d878:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d006      	beq.n	800d88e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800d880:	68fb      	ldr	r3, [r7, #12]
 800d882:	2200      	movs	r2, #0
 800d884:	711a      	strb	r2, [r3, #4]
 800d886:	2200      	movs	r2, #0
 800d888:	f042 0202 	orr.w	r2, r2, #2
 800d88c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	2243      	movs	r2, #67	; 0x43
 800d892:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d894:	4b02      	ldr	r3, [pc, #8]	; (800d8a0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800d896:	4618      	mov	r0, r3
 800d898:	3718      	adds	r7, #24
 800d89a:	46bd      	mov	sp, r7
 800d89c:	bd80      	pop	{r7, pc}
 800d89e:	bf00      	nop
 800d8a0:	20000050 	.word	0x20000050

0800d8a4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800d8ac:	2182      	movs	r1, #130	; 0x82
 800d8ae:	4818      	ldr	r0, [pc, #96]	; (800d910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8b0:	f000 fcd9 	bl	800e266 <USBD_GetEpDesc>
 800d8b4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800d8b6:	2101      	movs	r1, #1
 800d8b8:	4815      	ldr	r0, [pc, #84]	; (800d910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8ba:	f000 fcd4 	bl	800e266 <USBD_GetEpDesc>
 800d8be:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800d8c0:	2181      	movs	r1, #129	; 0x81
 800d8c2:	4813      	ldr	r0, [pc, #76]	; (800d910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800d8c4:	f000 fccf 	bl	800e266 <USBD_GetEpDesc>
 800d8c8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800d8ca:	697b      	ldr	r3, [r7, #20]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d002      	beq.n	800d8d6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	2210      	movs	r2, #16
 800d8d4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d006      	beq.n	800d8ea <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8dc:	693b      	ldr	r3, [r7, #16]
 800d8de:	2200      	movs	r2, #0
 800d8e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8e4:	711a      	strb	r2, [r3, #4]
 800d8e6:	2200      	movs	r2, #0
 800d8e8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800d8ea:	68fb      	ldr	r3, [r7, #12]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d006      	beq.n	800d8fe <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800d8f0:	68fb      	ldr	r3, [r7, #12]
 800d8f2:	2200      	movs	r2, #0
 800d8f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800d8f8:	711a      	strb	r2, [r3, #4]
 800d8fa:	2200      	movs	r2, #0
 800d8fc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	2243      	movs	r2, #67	; 0x43
 800d902:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800d904:	4b02      	ldr	r3, [pc, #8]	; (800d910 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800d906:	4618      	mov	r0, r3
 800d908:	3718      	adds	r7, #24
 800d90a:	46bd      	mov	sp, r7
 800d90c:	bd80      	pop	{r7, pc}
 800d90e:	bf00      	nop
 800d910:	20000050 	.word	0x20000050

0800d914 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800d914:	b480      	push	{r7}
 800d916:	b083      	sub	sp, #12
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	220a      	movs	r2, #10
 800d920:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800d922:	4b03      	ldr	r3, [pc, #12]	; (800d930 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d924:	4618      	mov	r0, r3
 800d926:	370c      	adds	r7, #12
 800d928:	46bd      	mov	sp, r7
 800d92a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d92e:	4770      	bx	lr
 800d930:	2000000c 	.word	0x2000000c

0800d934 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800d934:	b480      	push	{r7}
 800d936:	b083      	sub	sp, #12
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800d93e:	683b      	ldr	r3, [r7, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800d944:	2303      	movs	r3, #3
 800d946:	e009      	b.n	800d95c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800d948:	687b      	ldr	r3, [r7, #4]
 800d94a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800d94e:	687a      	ldr	r2, [r7, #4]
 800d950:	33b0      	adds	r3, #176	; 0xb0
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4413      	add	r3, r2
 800d956:	683a      	ldr	r2, [r7, #0]
 800d958:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800d95a:	2300      	movs	r3, #0
}
 800d95c:	4618      	mov	r0, r3
 800d95e:	370c      	adds	r7, #12
 800d960:	46bd      	mov	sp, r7
 800d962:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d966:	4770      	bx	lr

0800d968 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800d968:	b480      	push	{r7}
 800d96a:	b087      	sub	sp, #28
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d974:	68fb      	ldr	r3, [r7, #12]
 800d976:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d97a:	68fb      	ldr	r3, [r7, #12]
 800d97c:	32b0      	adds	r2, #176	; 0xb0
 800d97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d982:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	2b00      	cmp	r3, #0
 800d988:	d101      	bne.n	800d98e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800d98a:	2303      	movs	r3, #3
 800d98c:	e008      	b.n	800d9a0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800d98e:	697b      	ldr	r3, [r7, #20]
 800d990:	68ba      	ldr	r2, [r7, #8]
 800d992:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d996:	697b      	ldr	r3, [r7, #20]
 800d998:	687a      	ldr	r2, [r7, #4]
 800d99a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800d99e:	2300      	movs	r3, #0
}
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	371c      	adds	r7, #28
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9aa:	4770      	bx	lr

0800d9ac <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800d9ac:	b480      	push	{r7}
 800d9ae:	b085      	sub	sp, #20
 800d9b0:	af00      	add	r7, sp, #0
 800d9b2:	6078      	str	r0, [r7, #4]
 800d9b4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	32b0      	adds	r2, #176	; 0xb0
 800d9c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9c4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d101      	bne.n	800d9d0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800d9cc:	2303      	movs	r3, #3
 800d9ce:	e004      	b.n	800d9da <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	683a      	ldr	r2, [r7, #0]
 800d9d4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800d9d8:	2300      	movs	r3, #0
}
 800d9da:	4618      	mov	r0, r3
 800d9dc:	3714      	adds	r7, #20
 800d9de:	46bd      	mov	sp, r7
 800d9e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e4:	4770      	bx	lr
	...

0800d9e8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d9e8:	b580      	push	{r7, lr}
 800d9ea:	b084      	sub	sp, #16
 800d9ec:	af00      	add	r7, sp, #0
 800d9ee:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800d9f0:	687b      	ldr	r3, [r7, #4]
 800d9f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d9f6:	687b      	ldr	r3, [r7, #4]
 800d9f8:	32b0      	adds	r2, #176	; 0xb0
 800d9fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9fe:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800da00:	2301      	movs	r3, #1
 800da02:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800da04:	68bb      	ldr	r3, [r7, #8]
 800da06:	2b00      	cmp	r3, #0
 800da08:	d101      	bne.n	800da0e <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800da0a:	2303      	movs	r3, #3
 800da0c:	e025      	b.n	800da5a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800da0e:	68bb      	ldr	r3, [r7, #8]
 800da10:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800da14:	2b00      	cmp	r3, #0
 800da16:	d11f      	bne.n	800da58 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	2201      	movs	r2, #1
 800da1c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800da20:	4b10      	ldr	r3, [pc, #64]	; (800da64 <USBD_CDC_TransmitPacket+0x7c>)
 800da22:	781b      	ldrb	r3, [r3, #0]
 800da24:	f003 020f 	and.w	r2, r3, #15
 800da28:	68bb      	ldr	r3, [r7, #8]
 800da2a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800da2e:	6878      	ldr	r0, [r7, #4]
 800da30:	4613      	mov	r3, r2
 800da32:	009b      	lsls	r3, r3, #2
 800da34:	4413      	add	r3, r2
 800da36:	009b      	lsls	r3, r3, #2
 800da38:	4403      	add	r3, r0
 800da3a:	3318      	adds	r3, #24
 800da3c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800da3e:	4b09      	ldr	r3, [pc, #36]	; (800da64 <USBD_CDC_TransmitPacket+0x7c>)
 800da40:	7819      	ldrb	r1, [r3, #0]
 800da42:	68bb      	ldr	r3, [r7, #8]
 800da44:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800da48:	68bb      	ldr	r3, [r7, #8]
 800da4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f004 f84d 	bl	8011aee <USBD_LL_Transmit>

    ret = USBD_OK;
 800da54:	2300      	movs	r3, #0
 800da56:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800da58:	7bfb      	ldrb	r3, [r7, #15]
}
 800da5a:	4618      	mov	r0, r3
 800da5c:	3710      	adds	r7, #16
 800da5e:	46bd      	mov	sp, r7
 800da60:	bd80      	pop	{r7, pc}
 800da62:	bf00      	nop
 800da64:	20000093 	.word	0x20000093

0800da68 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b084      	sub	sp, #16
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	32b0      	adds	r2, #176	; 0xb0
 800da7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da7e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	32b0      	adds	r2, #176	; 0xb0
 800da8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d101      	bne.n	800da96 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800da92:	2303      	movs	r3, #3
 800da94:	e018      	b.n	800dac8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800da96:	687b      	ldr	r3, [r7, #4]
 800da98:	7c1b      	ldrb	r3, [r3, #16]
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d10a      	bne.n	800dab4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800da9e:	4b0c      	ldr	r3, [pc, #48]	; (800dad0 <USBD_CDC_ReceivePacket+0x68>)
 800daa0:	7819      	ldrb	r1, [r3, #0]
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800daa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f004 f83f 	bl	8011b30 <USBD_LL_PrepareReceive>
 800dab2:	e008      	b.n	800dac6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800dab4:	4b06      	ldr	r3, [pc, #24]	; (800dad0 <USBD_CDC_ReceivePacket+0x68>)
 800dab6:	7819      	ldrb	r1, [r3, #0]
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800dabe:	2340      	movs	r3, #64	; 0x40
 800dac0:	6878      	ldr	r0, [r7, #4]
 800dac2:	f004 f835 	bl	8011b30 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800dac6:	2300      	movs	r3, #0
}
 800dac8:	4618      	mov	r0, r3
 800daca:	3710      	adds	r7, #16
 800dacc:	46bd      	mov	sp, r7
 800dace:	bd80      	pop	{r7, pc}
 800dad0:	20000094 	.word	0x20000094

0800dad4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	4613      	mov	r3, r2
 800dae0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d101      	bne.n	800daec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800dae8:	2303      	movs	r3, #3
 800daea:	e01f      	b.n	800db2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800daec:	68fb      	ldr	r3, [r7, #12]
 800daee:	2200      	movs	r2, #0
 800daf0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2200      	movs	r2, #0
 800daf8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	2200      	movs	r2, #0
 800db00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800db04:	68bb      	ldr	r3, [r7, #8]
 800db06:	2b00      	cmp	r3, #0
 800db08:	d003      	beq.n	800db12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800db0a:	68fb      	ldr	r3, [r7, #12]
 800db0c:	68ba      	ldr	r2, [r7, #8]
 800db0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800db12:	68fb      	ldr	r3, [r7, #12]
 800db14:	2201      	movs	r2, #1
 800db16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	79fa      	ldrb	r2, [r7, #7]
 800db1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800db20:	68f8      	ldr	r0, [r7, #12]
 800db22:	f003 fea9 	bl	8011878 <USBD_LL_Init>
 800db26:	4603      	mov	r3, r0
 800db28:	75fb      	strb	r3, [r7, #23]

  return ret;
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3718      	adds	r7, #24
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
 800db3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800db3e:	2300      	movs	r3, #0
 800db40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800db42:	683b      	ldr	r3, [r7, #0]
 800db44:	2b00      	cmp	r3, #0
 800db46:	d101      	bne.n	800db4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800db48:	2303      	movs	r3, #3
 800db4a:	e025      	b.n	800db98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	683a      	ldr	r2, [r7, #0]
 800db50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	32ae      	adds	r2, #174	; 0xae
 800db5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db64:	2b00      	cmp	r3, #0
 800db66:	d00f      	beq.n	800db88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	32ae      	adds	r2, #174	; 0xae
 800db72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db78:	f107 020e 	add.w	r2, r7, #14
 800db7c:	4610      	mov	r0, r2
 800db7e:	4798      	blx	r3
 800db80:	4602      	mov	r2, r0
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800db8e:	1c5a      	adds	r2, r3, #1
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800db96:	2300      	movs	r3, #0
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3710      	adds	r7, #16
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b082      	sub	sp, #8
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800dba8:	6878      	ldr	r0, [r7, #4]
 800dbaa:	f003 feb7 	bl	801191c <USBD_LL_Start>
 800dbae:	4603      	mov	r3, r0
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3708      	adds	r7, #8
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800dbb8:	b480      	push	{r7}
 800dbba:	b083      	sub	sp, #12
 800dbbc:	af00      	add	r7, sp, #0
 800dbbe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800dbc0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800dbc2:	4618      	mov	r0, r3
 800dbc4:	370c      	adds	r7, #12
 800dbc6:	46bd      	mov	sp, r7
 800dbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbcc:	4770      	bx	lr

0800dbce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dbce:	b580      	push	{r7, lr}
 800dbd0:	b084      	sub	sp, #16
 800dbd2:	af00      	add	r7, sp, #0
 800dbd4:	6078      	str	r0, [r7, #4]
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dbda:	2300      	movs	r3, #0
 800dbdc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d009      	beq.n	800dbfc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	78fa      	ldrb	r2, [r7, #3]
 800dbf2:	4611      	mov	r1, r2
 800dbf4:	6878      	ldr	r0, [r7, #4]
 800dbf6:	4798      	blx	r3
 800dbf8:	4603      	mov	r3, r0
 800dbfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dbfc:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfe:	4618      	mov	r0, r3
 800dc00:	3710      	adds	r7, #16
 800dc02:	46bd      	mov	sp, r7
 800dc04:	bd80      	pop	{r7, pc}

0800dc06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800dc06:	b580      	push	{r7, lr}
 800dc08:	b084      	sub	sp, #16
 800dc0a:	af00      	add	r7, sp, #0
 800dc0c:	6078      	str	r0, [r7, #4]
 800dc0e:	460b      	mov	r3, r1
 800dc10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800dc12:	2300      	movs	r3, #0
 800dc14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800dc16:	687b      	ldr	r3, [r7, #4]
 800dc18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dc1c:	685b      	ldr	r3, [r3, #4]
 800dc1e:	78fa      	ldrb	r2, [r7, #3]
 800dc20:	4611      	mov	r1, r2
 800dc22:	6878      	ldr	r0, [r7, #4]
 800dc24:	4798      	blx	r3
 800dc26:	4603      	mov	r3, r0
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d001      	beq.n	800dc30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800dc30:	7bfb      	ldrb	r3, [r7, #15]
}
 800dc32:	4618      	mov	r0, r3
 800dc34:	3710      	adds	r7, #16
 800dc36:	46bd      	mov	sp, r7
 800dc38:	bd80      	pop	{r7, pc}

0800dc3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800dc3a:	b580      	push	{r7, lr}
 800dc3c:	b084      	sub	sp, #16
 800dc3e:	af00      	add	r7, sp, #0
 800dc40:	6078      	str	r0, [r7, #4]
 800dc42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc4a:	6839      	ldr	r1, [r7, #0]
 800dc4c:	4618      	mov	r0, r3
 800dc4e:	f001 f932 	bl	800eeb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2201      	movs	r2, #1
 800dc56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800dc60:	461a      	mov	r2, r3
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dc6e:	f003 031f 	and.w	r3, r3, #31
 800dc72:	2b02      	cmp	r3, #2
 800dc74:	d01a      	beq.n	800dcac <USBD_LL_SetupStage+0x72>
 800dc76:	2b02      	cmp	r3, #2
 800dc78:	d822      	bhi.n	800dcc0 <USBD_LL_SetupStage+0x86>
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d002      	beq.n	800dc84 <USBD_LL_SetupStage+0x4a>
 800dc7e:	2b01      	cmp	r3, #1
 800dc80:	d00a      	beq.n	800dc98 <USBD_LL_SetupStage+0x5e>
 800dc82:	e01d      	b.n	800dcc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc8a:	4619      	mov	r1, r3
 800dc8c:	6878      	ldr	r0, [r7, #4]
 800dc8e:	f000 fb5f 	bl	800e350 <USBD_StdDevReq>
 800dc92:	4603      	mov	r3, r0
 800dc94:	73fb      	strb	r3, [r7, #15]
      break;
 800dc96:	e020      	b.n	800dcda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dc9e:	4619      	mov	r1, r3
 800dca0:	6878      	ldr	r0, [r7, #4]
 800dca2:	f000 fbc7 	bl	800e434 <USBD_StdItfReq>
 800dca6:	4603      	mov	r3, r0
 800dca8:	73fb      	strb	r3, [r7, #15]
      break;
 800dcaa:	e016      	b.n	800dcda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800dcb2:	4619      	mov	r1, r3
 800dcb4:	6878      	ldr	r0, [r7, #4]
 800dcb6:	f000 fc29 	bl	800e50c <USBD_StdEPReq>
 800dcba:	4603      	mov	r3, r0
 800dcbc:	73fb      	strb	r3, [r7, #15]
      break;
 800dcbe:	e00c      	b.n	800dcda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dcc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800dcca:	b2db      	uxtb	r3, r3
 800dccc:	4619      	mov	r1, r3
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f003 fe84 	bl	80119dc <USBD_LL_StallEP>
 800dcd4:	4603      	mov	r3, r0
 800dcd6:	73fb      	strb	r3, [r7, #15]
      break;
 800dcd8:	bf00      	nop
  }

  return ret;
 800dcda:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcdc:	4618      	mov	r0, r3
 800dcde:	3710      	adds	r7, #16
 800dce0:	46bd      	mov	sp, r7
 800dce2:	bd80      	pop	{r7, pc}

0800dce4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800dce4:	b580      	push	{r7, lr}
 800dce6:	b086      	sub	sp, #24
 800dce8:	af00      	add	r7, sp, #0
 800dcea:	60f8      	str	r0, [r7, #12]
 800dcec:	460b      	mov	r3, r1
 800dcee:	607a      	str	r2, [r7, #4]
 800dcf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800dcf6:	7afb      	ldrb	r3, [r7, #11]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d16e      	bne.n	800ddda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800dd02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800dd04:	68fb      	ldr	r3, [r7, #12]
 800dd06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800dd0a:	2b03      	cmp	r3, #3
 800dd0c:	f040 8098 	bne.w	800de40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800dd10:	693b      	ldr	r3, [r7, #16]
 800dd12:	689a      	ldr	r2, [r3, #8]
 800dd14:	693b      	ldr	r3, [r7, #16]
 800dd16:	68db      	ldr	r3, [r3, #12]
 800dd18:	429a      	cmp	r2, r3
 800dd1a:	d913      	bls.n	800dd44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800dd1c:	693b      	ldr	r3, [r7, #16]
 800dd1e:	689a      	ldr	r2, [r3, #8]
 800dd20:	693b      	ldr	r3, [r7, #16]
 800dd22:	68db      	ldr	r3, [r3, #12]
 800dd24:	1ad2      	subs	r2, r2, r3
 800dd26:	693b      	ldr	r3, [r7, #16]
 800dd28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800dd2a:	693b      	ldr	r3, [r7, #16]
 800dd2c:	68da      	ldr	r2, [r3, #12]
 800dd2e:	693b      	ldr	r3, [r7, #16]
 800dd30:	689b      	ldr	r3, [r3, #8]
 800dd32:	4293      	cmp	r3, r2
 800dd34:	bf28      	it	cs
 800dd36:	4613      	movcs	r3, r2
 800dd38:	461a      	mov	r2, r3
 800dd3a:	6879      	ldr	r1, [r7, #4]
 800dd3c:	68f8      	ldr	r0, [r7, #12]
 800dd3e:	f001 f9ae 	bl	800f09e <USBD_CtlContinueRx>
 800dd42:	e07d      	b.n	800de40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800dd44:	68fb      	ldr	r3, [r7, #12]
 800dd46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800dd4a:	f003 031f 	and.w	r3, r3, #31
 800dd4e:	2b02      	cmp	r3, #2
 800dd50:	d014      	beq.n	800dd7c <USBD_LL_DataOutStage+0x98>
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d81d      	bhi.n	800dd92 <USBD_LL_DataOutStage+0xae>
 800dd56:	2b00      	cmp	r3, #0
 800dd58:	d002      	beq.n	800dd60 <USBD_LL_DataOutStage+0x7c>
 800dd5a:	2b01      	cmp	r3, #1
 800dd5c:	d003      	beq.n	800dd66 <USBD_LL_DataOutStage+0x82>
 800dd5e:	e018      	b.n	800dd92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800dd60:	2300      	movs	r3, #0
 800dd62:	75bb      	strb	r3, [r7, #22]
            break;
 800dd64:	e018      	b.n	800dd98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800dd66:	68fb      	ldr	r3, [r7, #12]
 800dd68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dd6c:	b2db      	uxtb	r3, r3
 800dd6e:	4619      	mov	r1, r3
 800dd70:	68f8      	ldr	r0, [r7, #12]
 800dd72:	f000 fa5e 	bl	800e232 <USBD_CoreFindIF>
 800dd76:	4603      	mov	r3, r0
 800dd78:	75bb      	strb	r3, [r7, #22]
            break;
 800dd7a:	e00d      	b.n	800dd98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800dd7c:	68fb      	ldr	r3, [r7, #12]
 800dd7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800dd82:	b2db      	uxtb	r3, r3
 800dd84:	4619      	mov	r1, r3
 800dd86:	68f8      	ldr	r0, [r7, #12]
 800dd88:	f000 fa60 	bl	800e24c <USBD_CoreFindEP>
 800dd8c:	4603      	mov	r3, r0
 800dd8e:	75bb      	strb	r3, [r7, #22]
            break;
 800dd90:	e002      	b.n	800dd98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800dd92:	2300      	movs	r3, #0
 800dd94:	75bb      	strb	r3, [r7, #22]
            break;
 800dd96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800dd98:	7dbb      	ldrb	r3, [r7, #22]
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d119      	bne.n	800ddd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dda4:	b2db      	uxtb	r3, r3
 800dda6:	2b03      	cmp	r3, #3
 800dda8:	d113      	bne.n	800ddd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ddaa:	7dba      	ldrb	r2, [r7, #22]
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	32ae      	adds	r2, #174	; 0xae
 800ddb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddb4:	691b      	ldr	r3, [r3, #16]
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d00b      	beq.n	800ddd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800ddba:	7dba      	ldrb	r2, [r7, #22]
 800ddbc:	68fb      	ldr	r3, [r7, #12]
 800ddbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ddc2:	7dba      	ldrb	r2, [r7, #22]
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	32ae      	adds	r2, #174	; 0xae
 800ddc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ddcc:	691b      	ldr	r3, [r3, #16]
 800ddce:	68f8      	ldr	r0, [r7, #12]
 800ddd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ddd2:	68f8      	ldr	r0, [r7, #12]
 800ddd4:	f001 f974 	bl	800f0c0 <USBD_CtlSendStatus>
 800ddd8:	e032      	b.n	800de40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ddda:	7afb      	ldrb	r3, [r7, #11]
 800dddc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dde0:	b2db      	uxtb	r3, r3
 800dde2:	4619      	mov	r1, r3
 800dde4:	68f8      	ldr	r0, [r7, #12]
 800dde6:	f000 fa31 	bl	800e24c <USBD_CoreFindEP>
 800ddea:	4603      	mov	r3, r0
 800ddec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ddee:	7dbb      	ldrb	r3, [r7, #22]
 800ddf0:	2bff      	cmp	r3, #255	; 0xff
 800ddf2:	d025      	beq.n	800de40 <USBD_LL_DataOutStage+0x15c>
 800ddf4:	7dbb      	ldrb	r3, [r7, #22]
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d122      	bne.n	800de40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddfa:	68fb      	ldr	r3, [r7, #12]
 800ddfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de00:	b2db      	uxtb	r3, r3
 800de02:	2b03      	cmp	r3, #3
 800de04:	d117      	bne.n	800de36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800de06:	7dba      	ldrb	r2, [r7, #22]
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	32ae      	adds	r2, #174	; 0xae
 800de0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de10:	699b      	ldr	r3, [r3, #24]
 800de12:	2b00      	cmp	r3, #0
 800de14:	d00f      	beq.n	800de36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800de16:	7dba      	ldrb	r2, [r7, #22]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800de1e:	7dba      	ldrb	r2, [r7, #22]
 800de20:	68fb      	ldr	r3, [r7, #12]
 800de22:	32ae      	adds	r2, #174	; 0xae
 800de24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800de28:	699b      	ldr	r3, [r3, #24]
 800de2a:	7afa      	ldrb	r2, [r7, #11]
 800de2c:	4611      	mov	r1, r2
 800de2e:	68f8      	ldr	r0, [r7, #12]
 800de30:	4798      	blx	r3
 800de32:	4603      	mov	r3, r0
 800de34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800de36:	7dfb      	ldrb	r3, [r7, #23]
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d001      	beq.n	800de40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800de3c:	7dfb      	ldrb	r3, [r7, #23]
 800de3e:	e000      	b.n	800de42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800de40:	2300      	movs	r3, #0
}
 800de42:	4618      	mov	r0, r3
 800de44:	3718      	adds	r7, #24
 800de46:	46bd      	mov	sp, r7
 800de48:	bd80      	pop	{r7, pc}

0800de4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800de4a:	b580      	push	{r7, lr}
 800de4c:	b086      	sub	sp, #24
 800de4e:	af00      	add	r7, sp, #0
 800de50:	60f8      	str	r0, [r7, #12]
 800de52:	460b      	mov	r3, r1
 800de54:	607a      	str	r2, [r7, #4]
 800de56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800de58:	7afb      	ldrb	r3, [r7, #11]
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d16f      	bne.n	800df3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	3314      	adds	r3, #20
 800de62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800de6a:	2b02      	cmp	r3, #2
 800de6c:	d15a      	bne.n	800df24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800de6e:	693b      	ldr	r3, [r7, #16]
 800de70:	689a      	ldr	r2, [r3, #8]
 800de72:	693b      	ldr	r3, [r7, #16]
 800de74:	68db      	ldr	r3, [r3, #12]
 800de76:	429a      	cmp	r2, r3
 800de78:	d914      	bls.n	800dea4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800de7a:	693b      	ldr	r3, [r7, #16]
 800de7c:	689a      	ldr	r2, [r3, #8]
 800de7e:	693b      	ldr	r3, [r7, #16]
 800de80:	68db      	ldr	r3, [r3, #12]
 800de82:	1ad2      	subs	r2, r2, r3
 800de84:	693b      	ldr	r3, [r7, #16]
 800de86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800de88:	693b      	ldr	r3, [r7, #16]
 800de8a:	689b      	ldr	r3, [r3, #8]
 800de8c:	461a      	mov	r2, r3
 800de8e:	6879      	ldr	r1, [r7, #4]
 800de90:	68f8      	ldr	r0, [r7, #12]
 800de92:	f001 f8d6 	bl	800f042 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800de96:	2300      	movs	r3, #0
 800de98:	2200      	movs	r2, #0
 800de9a:	2100      	movs	r1, #0
 800de9c:	68f8      	ldr	r0, [r7, #12]
 800de9e:	f003 fe47 	bl	8011b30 <USBD_LL_PrepareReceive>
 800dea2:	e03f      	b.n	800df24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	68da      	ldr	r2, [r3, #12]
 800dea8:	693b      	ldr	r3, [r7, #16]
 800deaa:	689b      	ldr	r3, [r3, #8]
 800deac:	429a      	cmp	r2, r3
 800deae:	d11c      	bne.n	800deea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800deb0:	693b      	ldr	r3, [r7, #16]
 800deb2:	685a      	ldr	r2, [r3, #4]
 800deb4:	693b      	ldr	r3, [r7, #16]
 800deb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800deb8:	429a      	cmp	r2, r3
 800deba:	d316      	bcc.n	800deea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800debc:	693b      	ldr	r3, [r7, #16]
 800debe:	685a      	ldr	r2, [r3, #4]
 800dec0:	68fb      	ldr	r3, [r7, #12]
 800dec2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800dec6:	429a      	cmp	r2, r3
 800dec8:	d20f      	bcs.n	800deea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800deca:	2200      	movs	r2, #0
 800decc:	2100      	movs	r1, #0
 800dece:	68f8      	ldr	r0, [r7, #12]
 800ded0:	f001 f8b7 	bl	800f042 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ded4:	68fb      	ldr	r3, [r7, #12]
 800ded6:	2200      	movs	r2, #0
 800ded8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800dedc:	2300      	movs	r3, #0
 800dede:	2200      	movs	r2, #0
 800dee0:	2100      	movs	r1, #0
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f003 fe24 	bl	8011b30 <USBD_LL_PrepareReceive>
 800dee8:	e01c      	b.n	800df24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800def0:	b2db      	uxtb	r3, r3
 800def2:	2b03      	cmp	r3, #3
 800def4:	d10f      	bne.n	800df16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800def6:	68fb      	ldr	r3, [r7, #12]
 800def8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800defc:	68db      	ldr	r3, [r3, #12]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d009      	beq.n	800df16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2200      	movs	r2, #0
 800df06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800df0a:	68fb      	ldr	r3, [r7, #12]
 800df0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800df10:	68db      	ldr	r3, [r3, #12]
 800df12:	68f8      	ldr	r0, [r7, #12]
 800df14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800df16:	2180      	movs	r1, #128	; 0x80
 800df18:	68f8      	ldr	r0, [r7, #12]
 800df1a:	f003 fd5f 	bl	80119dc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800df1e:	68f8      	ldr	r0, [r7, #12]
 800df20:	f001 f8e1 	bl	800f0e6 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d03a      	beq.n	800dfa4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800df2e:	68f8      	ldr	r0, [r7, #12]
 800df30:	f7ff fe42 	bl	800dbb8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	2200      	movs	r2, #0
 800df38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800df3c:	e032      	b.n	800dfa4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800df3e:	7afb      	ldrb	r3, [r7, #11]
 800df40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800df44:	b2db      	uxtb	r3, r3
 800df46:	4619      	mov	r1, r3
 800df48:	68f8      	ldr	r0, [r7, #12]
 800df4a:	f000 f97f 	bl	800e24c <USBD_CoreFindEP>
 800df4e:	4603      	mov	r3, r0
 800df50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800df52:	7dfb      	ldrb	r3, [r7, #23]
 800df54:	2bff      	cmp	r3, #255	; 0xff
 800df56:	d025      	beq.n	800dfa4 <USBD_LL_DataInStage+0x15a>
 800df58:	7dfb      	ldrb	r3, [r7, #23]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d122      	bne.n	800dfa4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800df5e:	68fb      	ldr	r3, [r7, #12]
 800df60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800df64:	b2db      	uxtb	r3, r3
 800df66:	2b03      	cmp	r3, #3
 800df68:	d11c      	bne.n	800dfa4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800df6a:	7dfa      	ldrb	r2, [r7, #23]
 800df6c:	68fb      	ldr	r3, [r7, #12]
 800df6e:	32ae      	adds	r2, #174	; 0xae
 800df70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df74:	695b      	ldr	r3, [r3, #20]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d014      	beq.n	800dfa4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800df7a:	7dfa      	ldrb	r2, [r7, #23]
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800df82:	7dfa      	ldrb	r2, [r7, #23]
 800df84:	68fb      	ldr	r3, [r7, #12]
 800df86:	32ae      	adds	r2, #174	; 0xae
 800df88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800df8c:	695b      	ldr	r3, [r3, #20]
 800df8e:	7afa      	ldrb	r2, [r7, #11]
 800df90:	4611      	mov	r1, r2
 800df92:	68f8      	ldr	r0, [r7, #12]
 800df94:	4798      	blx	r3
 800df96:	4603      	mov	r3, r0
 800df98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800df9a:	7dbb      	ldrb	r3, [r7, #22]
 800df9c:	2b00      	cmp	r3, #0
 800df9e:	d001      	beq.n	800dfa4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800dfa0:	7dbb      	ldrb	r3, [r7, #22]
 800dfa2:	e000      	b.n	800dfa6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800dfa4:	2300      	movs	r3, #0
}
 800dfa6:	4618      	mov	r0, r3
 800dfa8:	3718      	adds	r7, #24
 800dfaa:	46bd      	mov	sp, r7
 800dfac:	bd80      	pop	{r7, pc}

0800dfae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800dfae:	b580      	push	{r7, lr}
 800dfb0:	b084      	sub	sp, #16
 800dfb2:	af00      	add	r7, sp, #0
 800dfb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	2201      	movs	r2, #1
 800dfbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	2200      	movs	r2, #0
 800dfce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	2200      	movs	r2, #0
 800dfdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d014      	beq.n	800e014 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	2b00      	cmp	r3, #0
 800dff4:	d00e      	beq.n	800e014 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	687a      	ldr	r2, [r7, #4]
 800e000:	6852      	ldr	r2, [r2, #4]
 800e002:	b2d2      	uxtb	r2, r2
 800e004:	4611      	mov	r1, r2
 800e006:	6878      	ldr	r0, [r7, #4]
 800e008:	4798      	blx	r3
 800e00a:	4603      	mov	r3, r0
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d001      	beq.n	800e014 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800e010:	2303      	movs	r3, #3
 800e012:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e014:	2340      	movs	r3, #64	; 0x40
 800e016:	2200      	movs	r2, #0
 800e018:	2100      	movs	r1, #0
 800e01a:	6878      	ldr	r0, [r7, #4]
 800e01c:	f003 fc99 	bl	8011952 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2240      	movs	r2, #64	; 0x40
 800e02c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800e030:	2340      	movs	r3, #64	; 0x40
 800e032:	2200      	movs	r2, #0
 800e034:	2180      	movs	r1, #128	; 0x80
 800e036:	6878      	ldr	r0, [r7, #4]
 800e038:	f003 fc8b 	bl	8011952 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	2201      	movs	r2, #1
 800e040:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	2240      	movs	r2, #64	; 0x40
 800e046:	621a      	str	r2, [r3, #32]

  return ret;
 800e048:	7bfb      	ldrb	r3, [r7, #15]
}
 800e04a:	4618      	mov	r0, r3
 800e04c:	3710      	adds	r7, #16
 800e04e:	46bd      	mov	sp, r7
 800e050:	bd80      	pop	{r7, pc}

0800e052 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800e052:	b480      	push	{r7}
 800e054:	b083      	sub	sp, #12
 800e056:	af00      	add	r7, sp, #0
 800e058:	6078      	str	r0, [r7, #4]
 800e05a:	460b      	mov	r3, r1
 800e05c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	78fa      	ldrb	r2, [r7, #3]
 800e062:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	4618      	mov	r0, r3
 800e068:	370c      	adds	r7, #12
 800e06a:	46bd      	mov	sp, r7
 800e06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e070:	4770      	bx	lr

0800e072 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800e072:	b480      	push	{r7}
 800e074:	b083      	sub	sp, #12
 800e076:	af00      	add	r7, sp, #0
 800e078:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e080:	b2da      	uxtb	r2, r3
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	2204      	movs	r2, #4
 800e08c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800e090:	2300      	movs	r3, #0
}
 800e092:	4618      	mov	r0, r3
 800e094:	370c      	adds	r7, #12
 800e096:	46bd      	mov	sp, r7
 800e098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09c:	4770      	bx	lr

0800e09e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800e09e:	b480      	push	{r7}
 800e0a0:	b083      	sub	sp, #12
 800e0a2:	af00      	add	r7, sp, #0
 800e0a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0ac:	b2db      	uxtb	r3, r3
 800e0ae:	2b04      	cmp	r3, #4
 800e0b0:	d106      	bne.n	800e0c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800e0b8:	b2da      	uxtb	r2, r3
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800e0c0:	2300      	movs	r3, #0
}
 800e0c2:	4618      	mov	r0, r3
 800e0c4:	370c      	adds	r7, #12
 800e0c6:	46bd      	mov	sp, r7
 800e0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0cc:	4770      	bx	lr

0800e0ce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b082      	sub	sp, #8
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0dc:	b2db      	uxtb	r3, r3
 800e0de:	2b03      	cmp	r3, #3
 800e0e0:	d110      	bne.n	800e104 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d00b      	beq.n	800e104 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0f2:	69db      	ldr	r3, [r3, #28]
 800e0f4:	2b00      	cmp	r3, #0
 800e0f6:	d005      	beq.n	800e104 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e0fe:	69db      	ldr	r3, [r3, #28]
 800e100:	6878      	ldr	r0, [r7, #4]
 800e102:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800e104:	2300      	movs	r3, #0
}
 800e106:	4618      	mov	r0, r3
 800e108:	3708      	adds	r7, #8
 800e10a:	46bd      	mov	sp, r7
 800e10c:	bd80      	pop	{r7, pc}

0800e10e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800e10e:	b580      	push	{r7, lr}
 800e110:	b082      	sub	sp, #8
 800e112:	af00      	add	r7, sp, #0
 800e114:	6078      	str	r0, [r7, #4]
 800e116:	460b      	mov	r3, r1
 800e118:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	32ae      	adds	r2, #174	; 0xae
 800e124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d101      	bne.n	800e130 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800e12c:	2303      	movs	r3, #3
 800e12e:	e01c      	b.n	800e16a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e130:	687b      	ldr	r3, [r7, #4]
 800e132:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e136:	b2db      	uxtb	r3, r3
 800e138:	2b03      	cmp	r3, #3
 800e13a:	d115      	bne.n	800e168 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	32ae      	adds	r2, #174	; 0xae
 800e146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e14a:	6a1b      	ldr	r3, [r3, #32]
 800e14c:	2b00      	cmp	r3, #0
 800e14e:	d00b      	beq.n	800e168 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	32ae      	adds	r2, #174	; 0xae
 800e15a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e15e:	6a1b      	ldr	r3, [r3, #32]
 800e160:	78fa      	ldrb	r2, [r7, #3]
 800e162:	4611      	mov	r1, r2
 800e164:	6878      	ldr	r0, [r7, #4]
 800e166:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e168:	2300      	movs	r3, #0
}
 800e16a:	4618      	mov	r0, r3
 800e16c:	3708      	adds	r7, #8
 800e16e:	46bd      	mov	sp, r7
 800e170:	bd80      	pop	{r7, pc}

0800e172 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800e172:	b580      	push	{r7, lr}
 800e174:	b082      	sub	sp, #8
 800e176:	af00      	add	r7, sp, #0
 800e178:	6078      	str	r0, [r7, #4]
 800e17a:	460b      	mov	r3, r1
 800e17c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	32ae      	adds	r2, #174	; 0xae
 800e188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d101      	bne.n	800e194 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800e190:	2303      	movs	r3, #3
 800e192:	e01c      	b.n	800e1ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	2b03      	cmp	r3, #3
 800e19e:	d115      	bne.n	800e1cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800e1a0:	687b      	ldr	r3, [r7, #4]
 800e1a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1a6:	687b      	ldr	r3, [r7, #4]
 800e1a8:	32ae      	adds	r2, #174	; 0xae
 800e1aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1b0:	2b00      	cmp	r3, #0
 800e1b2:	d00b      	beq.n	800e1cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e1ba:	687b      	ldr	r3, [r7, #4]
 800e1bc:	32ae      	adds	r2, #174	; 0xae
 800e1be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e1c4:	78fa      	ldrb	r2, [r7, #3]
 800e1c6:	4611      	mov	r1, r2
 800e1c8:	6878      	ldr	r0, [r7, #4]
 800e1ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800e1cc:	2300      	movs	r3, #0
}
 800e1ce:	4618      	mov	r0, r3
 800e1d0:	3708      	adds	r7, #8
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bd80      	pop	{r7, pc}

0800e1d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800e1d6:	b480      	push	{r7}
 800e1d8:	b083      	sub	sp, #12
 800e1da:	af00      	add	r7, sp, #0
 800e1dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800e1de:	2300      	movs	r3, #0
}
 800e1e0:	4618      	mov	r0, r3
 800e1e2:	370c      	adds	r7, #12
 800e1e4:	46bd      	mov	sp, r7
 800e1e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1ea:	4770      	bx	lr

0800e1ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800e1ec:	b580      	push	{r7, lr}
 800e1ee:	b084      	sub	sp, #16
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800e1f4:	2300      	movs	r3, #0
 800e1f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	2201      	movs	r2, #1
 800e1fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800e200:	687b      	ldr	r3, [r7, #4]
 800e202:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e206:	2b00      	cmp	r3, #0
 800e208:	d00e      	beq.n	800e228 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800e20a:	687b      	ldr	r3, [r7, #4]
 800e20c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	6852      	ldr	r2, [r2, #4]
 800e216:	b2d2      	uxtb	r2, r2
 800e218:	4611      	mov	r1, r2
 800e21a:	6878      	ldr	r0, [r7, #4]
 800e21c:	4798      	blx	r3
 800e21e:	4603      	mov	r3, r0
 800e220:	2b00      	cmp	r3, #0
 800e222:	d001      	beq.n	800e228 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800e224:	2303      	movs	r3, #3
 800e226:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800e228:	7bfb      	ldrb	r3, [r7, #15]
}
 800e22a:	4618      	mov	r0, r3
 800e22c:	3710      	adds	r7, #16
 800e22e:	46bd      	mov	sp, r7
 800e230:	bd80      	pop	{r7, pc}

0800e232 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e232:	b480      	push	{r7}
 800e234:	b083      	sub	sp, #12
 800e236:	af00      	add	r7, sp, #0
 800e238:	6078      	str	r0, [r7, #4]
 800e23a:	460b      	mov	r3, r1
 800e23c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e23e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e240:	4618      	mov	r0, r3
 800e242:	370c      	adds	r7, #12
 800e244:	46bd      	mov	sp, r7
 800e246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e24a:	4770      	bx	lr

0800e24c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800e24c:	b480      	push	{r7}
 800e24e:	b083      	sub	sp, #12
 800e250:	af00      	add	r7, sp, #0
 800e252:	6078      	str	r0, [r7, #4]
 800e254:	460b      	mov	r3, r1
 800e256:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800e258:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800e25a:	4618      	mov	r0, r3
 800e25c:	370c      	adds	r7, #12
 800e25e:	46bd      	mov	sp, r7
 800e260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e264:	4770      	bx	lr

0800e266 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800e266:	b580      	push	{r7, lr}
 800e268:	b086      	sub	sp, #24
 800e26a:	af00      	add	r7, sp, #0
 800e26c:	6078      	str	r0, [r7, #4]
 800e26e:	460b      	mov	r3, r1
 800e270:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800e272:	687b      	ldr	r3, [r7, #4]
 800e274:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800e27a:	2300      	movs	r3, #0
 800e27c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800e27e:	68fb      	ldr	r3, [r7, #12]
 800e280:	885b      	ldrh	r3, [r3, #2]
 800e282:	b29a      	uxth	r2, r3
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	781b      	ldrb	r3, [r3, #0]
 800e288:	b29b      	uxth	r3, r3
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d920      	bls.n	800e2d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	781b      	ldrb	r3, [r3, #0]
 800e292:	b29b      	uxth	r3, r3
 800e294:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800e296:	e013      	b.n	800e2c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800e298:	f107 030a 	add.w	r3, r7, #10
 800e29c:	4619      	mov	r1, r3
 800e29e:	6978      	ldr	r0, [r7, #20]
 800e2a0:	f000 f81b 	bl	800e2da <USBD_GetNextDesc>
 800e2a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e2a6:	697b      	ldr	r3, [r7, #20]
 800e2a8:	785b      	ldrb	r3, [r3, #1]
 800e2aa:	2b05      	cmp	r3, #5
 800e2ac:	d108      	bne.n	800e2c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800e2b2:	693b      	ldr	r3, [r7, #16]
 800e2b4:	789b      	ldrb	r3, [r3, #2]
 800e2b6:	78fa      	ldrb	r2, [r7, #3]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d008      	beq.n	800e2ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800e2bc:	2300      	movs	r3, #0
 800e2be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	885b      	ldrh	r3, [r3, #2]
 800e2c4:	b29a      	uxth	r2, r3
 800e2c6:	897b      	ldrh	r3, [r7, #10]
 800e2c8:	429a      	cmp	r2, r3
 800e2ca:	d8e5      	bhi.n	800e298 <USBD_GetEpDesc+0x32>
 800e2cc:	e000      	b.n	800e2d0 <USBD_GetEpDesc+0x6a>
          break;
 800e2ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800e2d0:	693b      	ldr	r3, [r7, #16]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	3718      	adds	r7, #24
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	bd80      	pop	{r7, pc}

0800e2da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e2da:	b480      	push	{r7}
 800e2dc:	b085      	sub	sp, #20
 800e2de:	af00      	add	r7, sp, #0
 800e2e0:	6078      	str	r0, [r7, #4]
 800e2e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	881a      	ldrh	r2, [r3, #0]
 800e2ec:	68fb      	ldr	r3, [r7, #12]
 800e2ee:	781b      	ldrb	r3, [r3, #0]
 800e2f0:	b29b      	uxth	r3, r3
 800e2f2:	4413      	add	r3, r2
 800e2f4:	b29a      	uxth	r2, r3
 800e2f6:	683b      	ldr	r3, [r7, #0]
 800e2f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	461a      	mov	r2, r3
 800e300:	687b      	ldr	r3, [r7, #4]
 800e302:	4413      	add	r3, r2
 800e304:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e306:	68fb      	ldr	r3, [r7, #12]
}
 800e308:	4618      	mov	r0, r3
 800e30a:	3714      	adds	r7, #20
 800e30c:	46bd      	mov	sp, r7
 800e30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e312:	4770      	bx	lr

0800e314 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800e314:	b480      	push	{r7}
 800e316:	b087      	sub	sp, #28
 800e318:	af00      	add	r7, sp, #0
 800e31a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800e320:	697b      	ldr	r3, [r7, #20]
 800e322:	781b      	ldrb	r3, [r3, #0]
 800e324:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800e326:	697b      	ldr	r3, [r7, #20]
 800e328:	3301      	adds	r3, #1
 800e32a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800e32c:	697b      	ldr	r3, [r7, #20]
 800e32e:	781b      	ldrb	r3, [r3, #0]
 800e330:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800e332:	8a3b      	ldrh	r3, [r7, #16]
 800e334:	021b      	lsls	r3, r3, #8
 800e336:	b21a      	sxth	r2, r3
 800e338:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800e33c:	4313      	orrs	r3, r2
 800e33e:	b21b      	sxth	r3, r3
 800e340:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800e342:	89fb      	ldrh	r3, [r7, #14]
}
 800e344:	4618      	mov	r0, r3
 800e346:	371c      	adds	r7, #28
 800e348:	46bd      	mov	sp, r7
 800e34a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e34e:	4770      	bx	lr

0800e350 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e350:	b580      	push	{r7, lr}
 800e352:	b084      	sub	sp, #16
 800e354:	af00      	add	r7, sp, #0
 800e356:	6078      	str	r0, [r7, #4]
 800e358:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e35a:	2300      	movs	r3, #0
 800e35c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e35e:	683b      	ldr	r3, [r7, #0]
 800e360:	781b      	ldrb	r3, [r3, #0]
 800e362:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e366:	2b40      	cmp	r3, #64	; 0x40
 800e368:	d005      	beq.n	800e376 <USBD_StdDevReq+0x26>
 800e36a:	2b40      	cmp	r3, #64	; 0x40
 800e36c:	d857      	bhi.n	800e41e <USBD_StdDevReq+0xce>
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d00f      	beq.n	800e392 <USBD_StdDevReq+0x42>
 800e372:	2b20      	cmp	r3, #32
 800e374:	d153      	bne.n	800e41e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800e376:	687b      	ldr	r3, [r7, #4]
 800e378:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	32ae      	adds	r2, #174	; 0xae
 800e380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e384:	689b      	ldr	r3, [r3, #8]
 800e386:	6839      	ldr	r1, [r7, #0]
 800e388:	6878      	ldr	r0, [r7, #4]
 800e38a:	4798      	blx	r3
 800e38c:	4603      	mov	r3, r0
 800e38e:	73fb      	strb	r3, [r7, #15]
      break;
 800e390:	e04a      	b.n	800e428 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	785b      	ldrb	r3, [r3, #1]
 800e396:	2b09      	cmp	r3, #9
 800e398:	d83b      	bhi.n	800e412 <USBD_StdDevReq+0xc2>
 800e39a:	a201      	add	r2, pc, #4	; (adr r2, 800e3a0 <USBD_StdDevReq+0x50>)
 800e39c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3a0:	0800e3f5 	.word	0x0800e3f5
 800e3a4:	0800e409 	.word	0x0800e409
 800e3a8:	0800e413 	.word	0x0800e413
 800e3ac:	0800e3ff 	.word	0x0800e3ff
 800e3b0:	0800e413 	.word	0x0800e413
 800e3b4:	0800e3d3 	.word	0x0800e3d3
 800e3b8:	0800e3c9 	.word	0x0800e3c9
 800e3bc:	0800e413 	.word	0x0800e413
 800e3c0:	0800e3eb 	.word	0x0800e3eb
 800e3c4:	0800e3dd 	.word	0x0800e3dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800e3c8:	6839      	ldr	r1, [r7, #0]
 800e3ca:	6878      	ldr	r0, [r7, #4]
 800e3cc:	f000 fa3c 	bl	800e848 <USBD_GetDescriptor>
          break;
 800e3d0:	e024      	b.n	800e41c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800e3d2:	6839      	ldr	r1, [r7, #0]
 800e3d4:	6878      	ldr	r0, [r7, #4]
 800e3d6:	f000 fbcb 	bl	800eb70 <USBD_SetAddress>
          break;
 800e3da:	e01f      	b.n	800e41c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800e3dc:	6839      	ldr	r1, [r7, #0]
 800e3de:	6878      	ldr	r0, [r7, #4]
 800e3e0:	f000 fc0a 	bl	800ebf8 <USBD_SetConfig>
 800e3e4:	4603      	mov	r3, r0
 800e3e6:	73fb      	strb	r3, [r7, #15]
          break;
 800e3e8:	e018      	b.n	800e41c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800e3ea:	6839      	ldr	r1, [r7, #0]
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 fcad 	bl	800ed4c <USBD_GetConfig>
          break;
 800e3f2:	e013      	b.n	800e41c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800e3f4:	6839      	ldr	r1, [r7, #0]
 800e3f6:	6878      	ldr	r0, [r7, #4]
 800e3f8:	f000 fcde 	bl	800edb8 <USBD_GetStatus>
          break;
 800e3fc:	e00e      	b.n	800e41c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800e3fe:	6839      	ldr	r1, [r7, #0]
 800e400:	6878      	ldr	r0, [r7, #4]
 800e402:	f000 fd0d 	bl	800ee20 <USBD_SetFeature>
          break;
 800e406:	e009      	b.n	800e41c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800e408:	6839      	ldr	r1, [r7, #0]
 800e40a:	6878      	ldr	r0, [r7, #4]
 800e40c:	f000 fd31 	bl	800ee72 <USBD_ClrFeature>
          break;
 800e410:	e004      	b.n	800e41c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800e412:	6839      	ldr	r1, [r7, #0]
 800e414:	6878      	ldr	r0, [r7, #4]
 800e416:	f000 fd88 	bl	800ef2a <USBD_CtlError>
          break;
 800e41a:	bf00      	nop
      }
      break;
 800e41c:	e004      	b.n	800e428 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800e41e:	6839      	ldr	r1, [r7, #0]
 800e420:	6878      	ldr	r0, [r7, #4]
 800e422:	f000 fd82 	bl	800ef2a <USBD_CtlError>
      break;
 800e426:	bf00      	nop
  }

  return ret;
 800e428:	7bfb      	ldrb	r3, [r7, #15]
}
 800e42a:	4618      	mov	r0, r3
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop

0800e434 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
 800e43c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800e43e:	2300      	movs	r3, #0
 800e440:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	781b      	ldrb	r3, [r3, #0]
 800e446:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e44a:	2b40      	cmp	r3, #64	; 0x40
 800e44c:	d005      	beq.n	800e45a <USBD_StdItfReq+0x26>
 800e44e:	2b40      	cmp	r3, #64	; 0x40
 800e450:	d852      	bhi.n	800e4f8 <USBD_StdItfReq+0xc4>
 800e452:	2b00      	cmp	r3, #0
 800e454:	d001      	beq.n	800e45a <USBD_StdItfReq+0x26>
 800e456:	2b20      	cmp	r3, #32
 800e458:	d14e      	bne.n	800e4f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800e45a:	687b      	ldr	r3, [r7, #4]
 800e45c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e460:	b2db      	uxtb	r3, r3
 800e462:	3b01      	subs	r3, #1
 800e464:	2b02      	cmp	r3, #2
 800e466:	d840      	bhi.n	800e4ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800e468:	683b      	ldr	r3, [r7, #0]
 800e46a:	889b      	ldrh	r3, [r3, #4]
 800e46c:	b2db      	uxtb	r3, r3
 800e46e:	2b01      	cmp	r3, #1
 800e470:	d836      	bhi.n	800e4e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800e472:	683b      	ldr	r3, [r7, #0]
 800e474:	889b      	ldrh	r3, [r3, #4]
 800e476:	b2db      	uxtb	r3, r3
 800e478:	4619      	mov	r1, r3
 800e47a:	6878      	ldr	r0, [r7, #4]
 800e47c:	f7ff fed9 	bl	800e232 <USBD_CoreFindIF>
 800e480:	4603      	mov	r3, r0
 800e482:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e484:	7bbb      	ldrb	r3, [r7, #14]
 800e486:	2bff      	cmp	r3, #255	; 0xff
 800e488:	d01d      	beq.n	800e4c6 <USBD_StdItfReq+0x92>
 800e48a:	7bbb      	ldrb	r3, [r7, #14]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d11a      	bne.n	800e4c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800e490:	7bba      	ldrb	r2, [r7, #14]
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	32ae      	adds	r2, #174	; 0xae
 800e496:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e49a:	689b      	ldr	r3, [r3, #8]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d00f      	beq.n	800e4c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800e4a0:	7bba      	ldrb	r2, [r7, #14]
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e4a8:	7bba      	ldrb	r2, [r7, #14]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	32ae      	adds	r2, #174	; 0xae
 800e4ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e4b2:	689b      	ldr	r3, [r3, #8]
 800e4b4:	6839      	ldr	r1, [r7, #0]
 800e4b6:	6878      	ldr	r0, [r7, #4]
 800e4b8:	4798      	blx	r3
 800e4ba:	4603      	mov	r3, r0
 800e4bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e4be:	e004      	b.n	800e4ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800e4c0:	2303      	movs	r3, #3
 800e4c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800e4c4:	e001      	b.n	800e4ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800e4c6:	2303      	movs	r3, #3
 800e4c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800e4ca:	683b      	ldr	r3, [r7, #0]
 800e4cc:	88db      	ldrh	r3, [r3, #6]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d110      	bne.n	800e4f4 <USBD_StdItfReq+0xc0>
 800e4d2:	7bfb      	ldrb	r3, [r7, #15]
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d10d      	bne.n	800e4f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 fdf1 	bl	800f0c0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800e4de:	e009      	b.n	800e4f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800e4e0:	6839      	ldr	r1, [r7, #0]
 800e4e2:	6878      	ldr	r0, [r7, #4]
 800e4e4:	f000 fd21 	bl	800ef2a <USBD_CtlError>
          break;
 800e4e8:	e004      	b.n	800e4f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800e4ea:	6839      	ldr	r1, [r7, #0]
 800e4ec:	6878      	ldr	r0, [r7, #4]
 800e4ee:	f000 fd1c 	bl	800ef2a <USBD_CtlError>
          break;
 800e4f2:	e000      	b.n	800e4f6 <USBD_StdItfReq+0xc2>
          break;
 800e4f4:	bf00      	nop
      }
      break;
 800e4f6:	e004      	b.n	800e502 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800e4f8:	6839      	ldr	r1, [r7, #0]
 800e4fa:	6878      	ldr	r0, [r7, #4]
 800e4fc:	f000 fd15 	bl	800ef2a <USBD_CtlError>
      break;
 800e500:	bf00      	nop
  }

  return ret;
 800e502:	7bfb      	ldrb	r3, [r7, #15]
}
 800e504:	4618      	mov	r0, r3
 800e506:	3710      	adds	r7, #16
 800e508:	46bd      	mov	sp, r7
 800e50a:	bd80      	pop	{r7, pc}

0800e50c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e50c:	b580      	push	{r7, lr}
 800e50e:	b084      	sub	sp, #16
 800e510:	af00      	add	r7, sp, #0
 800e512:	6078      	str	r0, [r7, #4]
 800e514:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800e516:	2300      	movs	r3, #0
 800e518:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	889b      	ldrh	r3, [r3, #4]
 800e51e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	781b      	ldrb	r3, [r3, #0]
 800e524:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800e528:	2b40      	cmp	r3, #64	; 0x40
 800e52a:	d007      	beq.n	800e53c <USBD_StdEPReq+0x30>
 800e52c:	2b40      	cmp	r3, #64	; 0x40
 800e52e:	f200 817f 	bhi.w	800e830 <USBD_StdEPReq+0x324>
 800e532:	2b00      	cmp	r3, #0
 800e534:	d02a      	beq.n	800e58c <USBD_StdEPReq+0x80>
 800e536:	2b20      	cmp	r3, #32
 800e538:	f040 817a 	bne.w	800e830 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800e53c:	7bbb      	ldrb	r3, [r7, #14]
 800e53e:	4619      	mov	r1, r3
 800e540:	6878      	ldr	r0, [r7, #4]
 800e542:	f7ff fe83 	bl	800e24c <USBD_CoreFindEP>
 800e546:	4603      	mov	r3, r0
 800e548:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e54a:	7b7b      	ldrb	r3, [r7, #13]
 800e54c:	2bff      	cmp	r3, #255	; 0xff
 800e54e:	f000 8174 	beq.w	800e83a <USBD_StdEPReq+0x32e>
 800e552:	7b7b      	ldrb	r3, [r7, #13]
 800e554:	2b00      	cmp	r3, #0
 800e556:	f040 8170 	bne.w	800e83a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800e55a:	7b7a      	ldrb	r2, [r7, #13]
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800e562:	7b7a      	ldrb	r2, [r7, #13]
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	32ae      	adds	r2, #174	; 0xae
 800e568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e56c:	689b      	ldr	r3, [r3, #8]
 800e56e:	2b00      	cmp	r3, #0
 800e570:	f000 8163 	beq.w	800e83a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800e574:	7b7a      	ldrb	r2, [r7, #13]
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	32ae      	adds	r2, #174	; 0xae
 800e57a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e57e:	689b      	ldr	r3, [r3, #8]
 800e580:	6839      	ldr	r1, [r7, #0]
 800e582:	6878      	ldr	r0, [r7, #4]
 800e584:	4798      	blx	r3
 800e586:	4603      	mov	r3, r0
 800e588:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800e58a:	e156      	b.n	800e83a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	785b      	ldrb	r3, [r3, #1]
 800e590:	2b03      	cmp	r3, #3
 800e592:	d008      	beq.n	800e5a6 <USBD_StdEPReq+0x9a>
 800e594:	2b03      	cmp	r3, #3
 800e596:	f300 8145 	bgt.w	800e824 <USBD_StdEPReq+0x318>
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	f000 809b 	beq.w	800e6d6 <USBD_StdEPReq+0x1ca>
 800e5a0:	2b01      	cmp	r3, #1
 800e5a2:	d03c      	beq.n	800e61e <USBD_StdEPReq+0x112>
 800e5a4:	e13e      	b.n	800e824 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e5ac:	b2db      	uxtb	r3, r3
 800e5ae:	2b02      	cmp	r3, #2
 800e5b0:	d002      	beq.n	800e5b8 <USBD_StdEPReq+0xac>
 800e5b2:	2b03      	cmp	r3, #3
 800e5b4:	d016      	beq.n	800e5e4 <USBD_StdEPReq+0xd8>
 800e5b6:	e02c      	b.n	800e612 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e5b8:	7bbb      	ldrb	r3, [r7, #14]
 800e5ba:	2b00      	cmp	r3, #0
 800e5bc:	d00d      	beq.n	800e5da <USBD_StdEPReq+0xce>
 800e5be:	7bbb      	ldrb	r3, [r7, #14]
 800e5c0:	2b80      	cmp	r3, #128	; 0x80
 800e5c2:	d00a      	beq.n	800e5da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e5c4:	7bbb      	ldrb	r3, [r7, #14]
 800e5c6:	4619      	mov	r1, r3
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	f003 fa07 	bl	80119dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e5ce:	2180      	movs	r1, #128	; 0x80
 800e5d0:	6878      	ldr	r0, [r7, #4]
 800e5d2:	f003 fa03 	bl	80119dc <USBD_LL_StallEP>
 800e5d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e5d8:	e020      	b.n	800e61c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800e5da:	6839      	ldr	r1, [r7, #0]
 800e5dc:	6878      	ldr	r0, [r7, #4]
 800e5de:	f000 fca4 	bl	800ef2a <USBD_CtlError>
              break;
 800e5e2:	e01b      	b.n	800e61c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	885b      	ldrh	r3, [r3, #2]
 800e5e8:	2b00      	cmp	r3, #0
 800e5ea:	d10e      	bne.n	800e60a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800e5ec:	7bbb      	ldrb	r3, [r7, #14]
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d00b      	beq.n	800e60a <USBD_StdEPReq+0xfe>
 800e5f2:	7bbb      	ldrb	r3, [r7, #14]
 800e5f4:	2b80      	cmp	r3, #128	; 0x80
 800e5f6:	d008      	beq.n	800e60a <USBD_StdEPReq+0xfe>
 800e5f8:	683b      	ldr	r3, [r7, #0]
 800e5fa:	88db      	ldrh	r3, [r3, #6]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d104      	bne.n	800e60a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800e600:	7bbb      	ldrb	r3, [r7, #14]
 800e602:	4619      	mov	r1, r3
 800e604:	6878      	ldr	r0, [r7, #4]
 800e606:	f003 f9e9 	bl	80119dc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800e60a:	6878      	ldr	r0, [r7, #4]
 800e60c:	f000 fd58 	bl	800f0c0 <USBD_CtlSendStatus>

              break;
 800e610:	e004      	b.n	800e61c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800e612:	6839      	ldr	r1, [r7, #0]
 800e614:	6878      	ldr	r0, [r7, #4]
 800e616:	f000 fc88 	bl	800ef2a <USBD_CtlError>
              break;
 800e61a:	bf00      	nop
          }
          break;
 800e61c:	e107      	b.n	800e82e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e624:	b2db      	uxtb	r3, r3
 800e626:	2b02      	cmp	r3, #2
 800e628:	d002      	beq.n	800e630 <USBD_StdEPReq+0x124>
 800e62a:	2b03      	cmp	r3, #3
 800e62c:	d016      	beq.n	800e65c <USBD_StdEPReq+0x150>
 800e62e:	e04b      	b.n	800e6c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e630:	7bbb      	ldrb	r3, [r7, #14]
 800e632:	2b00      	cmp	r3, #0
 800e634:	d00d      	beq.n	800e652 <USBD_StdEPReq+0x146>
 800e636:	7bbb      	ldrb	r3, [r7, #14]
 800e638:	2b80      	cmp	r3, #128	; 0x80
 800e63a:	d00a      	beq.n	800e652 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800e63c:	7bbb      	ldrb	r3, [r7, #14]
 800e63e:	4619      	mov	r1, r3
 800e640:	6878      	ldr	r0, [r7, #4]
 800e642:	f003 f9cb 	bl	80119dc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800e646:	2180      	movs	r1, #128	; 0x80
 800e648:	6878      	ldr	r0, [r7, #4]
 800e64a:	f003 f9c7 	bl	80119dc <USBD_LL_StallEP>
 800e64e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800e650:	e040      	b.n	800e6d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800e652:	6839      	ldr	r1, [r7, #0]
 800e654:	6878      	ldr	r0, [r7, #4]
 800e656:	f000 fc68 	bl	800ef2a <USBD_CtlError>
              break;
 800e65a:	e03b      	b.n	800e6d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800e65c:	683b      	ldr	r3, [r7, #0]
 800e65e:	885b      	ldrh	r3, [r3, #2]
 800e660:	2b00      	cmp	r3, #0
 800e662:	d136      	bne.n	800e6d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800e664:	7bbb      	ldrb	r3, [r7, #14]
 800e666:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d004      	beq.n	800e678 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800e66e:	7bbb      	ldrb	r3, [r7, #14]
 800e670:	4619      	mov	r1, r3
 800e672:	6878      	ldr	r0, [r7, #4]
 800e674:	f003 f9d1 	bl	8011a1a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800e678:	6878      	ldr	r0, [r7, #4]
 800e67a:	f000 fd21 	bl	800f0c0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800e67e:	7bbb      	ldrb	r3, [r7, #14]
 800e680:	4619      	mov	r1, r3
 800e682:	6878      	ldr	r0, [r7, #4]
 800e684:	f7ff fde2 	bl	800e24c <USBD_CoreFindEP>
 800e688:	4603      	mov	r3, r0
 800e68a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800e68c:	7b7b      	ldrb	r3, [r7, #13]
 800e68e:	2bff      	cmp	r3, #255	; 0xff
 800e690:	d01f      	beq.n	800e6d2 <USBD_StdEPReq+0x1c6>
 800e692:	7b7b      	ldrb	r3, [r7, #13]
 800e694:	2b00      	cmp	r3, #0
 800e696:	d11c      	bne.n	800e6d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800e698:	7b7a      	ldrb	r2, [r7, #13]
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800e6a0:	7b7a      	ldrb	r2, [r7, #13]
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	32ae      	adds	r2, #174	; 0xae
 800e6a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6aa:	689b      	ldr	r3, [r3, #8]
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	d010      	beq.n	800e6d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800e6b0:	7b7a      	ldrb	r2, [r7, #13]
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	32ae      	adds	r2, #174	; 0xae
 800e6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6ba:	689b      	ldr	r3, [r3, #8]
 800e6bc:	6839      	ldr	r1, [r7, #0]
 800e6be:	6878      	ldr	r0, [r7, #4]
 800e6c0:	4798      	blx	r3
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800e6c6:	e004      	b.n	800e6d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800e6c8:	6839      	ldr	r1, [r7, #0]
 800e6ca:	6878      	ldr	r0, [r7, #4]
 800e6cc:	f000 fc2d 	bl	800ef2a <USBD_CtlError>
              break;
 800e6d0:	e000      	b.n	800e6d4 <USBD_StdEPReq+0x1c8>
              break;
 800e6d2:	bf00      	nop
          }
          break;
 800e6d4:	e0ab      	b.n	800e82e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e6dc:	b2db      	uxtb	r3, r3
 800e6de:	2b02      	cmp	r3, #2
 800e6e0:	d002      	beq.n	800e6e8 <USBD_StdEPReq+0x1dc>
 800e6e2:	2b03      	cmp	r3, #3
 800e6e4:	d032      	beq.n	800e74c <USBD_StdEPReq+0x240>
 800e6e6:	e097      	b.n	800e818 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800e6e8:	7bbb      	ldrb	r3, [r7, #14]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d007      	beq.n	800e6fe <USBD_StdEPReq+0x1f2>
 800e6ee:	7bbb      	ldrb	r3, [r7, #14]
 800e6f0:	2b80      	cmp	r3, #128	; 0x80
 800e6f2:	d004      	beq.n	800e6fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800e6f4:	6839      	ldr	r1, [r7, #0]
 800e6f6:	6878      	ldr	r0, [r7, #4]
 800e6f8:	f000 fc17 	bl	800ef2a <USBD_CtlError>
                break;
 800e6fc:	e091      	b.n	800e822 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e6fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e702:	2b00      	cmp	r3, #0
 800e704:	da0b      	bge.n	800e71e <USBD_StdEPReq+0x212>
 800e706:	7bbb      	ldrb	r3, [r7, #14]
 800e708:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e70c:	4613      	mov	r3, r2
 800e70e:	009b      	lsls	r3, r3, #2
 800e710:	4413      	add	r3, r2
 800e712:	009b      	lsls	r3, r3, #2
 800e714:	3310      	adds	r3, #16
 800e716:	687a      	ldr	r2, [r7, #4]
 800e718:	4413      	add	r3, r2
 800e71a:	3304      	adds	r3, #4
 800e71c:	e00b      	b.n	800e736 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e71e:	7bbb      	ldrb	r3, [r7, #14]
 800e720:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e724:	4613      	mov	r3, r2
 800e726:	009b      	lsls	r3, r3, #2
 800e728:	4413      	add	r3, r2
 800e72a:	009b      	lsls	r3, r3, #2
 800e72c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e730:	687a      	ldr	r2, [r7, #4]
 800e732:	4413      	add	r3, r2
 800e734:	3304      	adds	r3, #4
 800e736:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800e738:	68bb      	ldr	r3, [r7, #8]
 800e73a:	2200      	movs	r2, #0
 800e73c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e73e:	68bb      	ldr	r3, [r7, #8]
 800e740:	2202      	movs	r2, #2
 800e742:	4619      	mov	r1, r3
 800e744:	6878      	ldr	r0, [r7, #4]
 800e746:	f000 fc61 	bl	800f00c <USBD_CtlSendData>
              break;
 800e74a:	e06a      	b.n	800e822 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800e74c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e750:	2b00      	cmp	r3, #0
 800e752:	da11      	bge.n	800e778 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800e754:	7bbb      	ldrb	r3, [r7, #14]
 800e756:	f003 020f 	and.w	r2, r3, #15
 800e75a:	6879      	ldr	r1, [r7, #4]
 800e75c:	4613      	mov	r3, r2
 800e75e:	009b      	lsls	r3, r3, #2
 800e760:	4413      	add	r3, r2
 800e762:	009b      	lsls	r3, r3, #2
 800e764:	440b      	add	r3, r1
 800e766:	3324      	adds	r3, #36	; 0x24
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d117      	bne.n	800e79e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e76e:	6839      	ldr	r1, [r7, #0]
 800e770:	6878      	ldr	r0, [r7, #4]
 800e772:	f000 fbda 	bl	800ef2a <USBD_CtlError>
                  break;
 800e776:	e054      	b.n	800e822 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800e778:	7bbb      	ldrb	r3, [r7, #14]
 800e77a:	f003 020f 	and.w	r2, r3, #15
 800e77e:	6879      	ldr	r1, [r7, #4]
 800e780:	4613      	mov	r3, r2
 800e782:	009b      	lsls	r3, r3, #2
 800e784:	4413      	add	r3, r2
 800e786:	009b      	lsls	r3, r3, #2
 800e788:	440b      	add	r3, r1
 800e78a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800e78e:	881b      	ldrh	r3, [r3, #0]
 800e790:	2b00      	cmp	r3, #0
 800e792:	d104      	bne.n	800e79e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800e794:	6839      	ldr	r1, [r7, #0]
 800e796:	6878      	ldr	r0, [r7, #4]
 800e798:	f000 fbc7 	bl	800ef2a <USBD_CtlError>
                  break;
 800e79c:	e041      	b.n	800e822 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e79e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	da0b      	bge.n	800e7be <USBD_StdEPReq+0x2b2>
 800e7a6:	7bbb      	ldrb	r3, [r7, #14]
 800e7a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800e7ac:	4613      	mov	r3, r2
 800e7ae:	009b      	lsls	r3, r3, #2
 800e7b0:	4413      	add	r3, r2
 800e7b2:	009b      	lsls	r3, r3, #2
 800e7b4:	3310      	adds	r3, #16
 800e7b6:	687a      	ldr	r2, [r7, #4]
 800e7b8:	4413      	add	r3, r2
 800e7ba:	3304      	adds	r3, #4
 800e7bc:	e00b      	b.n	800e7d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800e7be:	7bbb      	ldrb	r3, [r7, #14]
 800e7c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800e7c4:	4613      	mov	r3, r2
 800e7c6:	009b      	lsls	r3, r3, #2
 800e7c8:	4413      	add	r3, r2
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800e7d0:	687a      	ldr	r2, [r7, #4]
 800e7d2:	4413      	add	r3, r2
 800e7d4:	3304      	adds	r3, #4
 800e7d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800e7d8:	7bbb      	ldrb	r3, [r7, #14]
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d002      	beq.n	800e7e4 <USBD_StdEPReq+0x2d8>
 800e7de:	7bbb      	ldrb	r3, [r7, #14]
 800e7e0:	2b80      	cmp	r3, #128	; 0x80
 800e7e2:	d103      	bne.n	800e7ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800e7e4:	68bb      	ldr	r3, [r7, #8]
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	601a      	str	r2, [r3, #0]
 800e7ea:	e00e      	b.n	800e80a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800e7ec:	7bbb      	ldrb	r3, [r7, #14]
 800e7ee:	4619      	mov	r1, r3
 800e7f0:	6878      	ldr	r0, [r7, #4]
 800e7f2:	f003 f931 	bl	8011a58 <USBD_LL_IsStallEP>
 800e7f6:	4603      	mov	r3, r0
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d003      	beq.n	800e804 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800e7fc:	68bb      	ldr	r3, [r7, #8]
 800e7fe:	2201      	movs	r2, #1
 800e800:	601a      	str	r2, [r3, #0]
 800e802:	e002      	b.n	800e80a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	2200      	movs	r2, #0
 800e808:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800e80a:	68bb      	ldr	r3, [r7, #8]
 800e80c:	2202      	movs	r2, #2
 800e80e:	4619      	mov	r1, r3
 800e810:	6878      	ldr	r0, [r7, #4]
 800e812:	f000 fbfb 	bl	800f00c <USBD_CtlSendData>
              break;
 800e816:	e004      	b.n	800e822 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800e818:	6839      	ldr	r1, [r7, #0]
 800e81a:	6878      	ldr	r0, [r7, #4]
 800e81c:	f000 fb85 	bl	800ef2a <USBD_CtlError>
              break;
 800e820:	bf00      	nop
          }
          break;
 800e822:	e004      	b.n	800e82e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800e824:	6839      	ldr	r1, [r7, #0]
 800e826:	6878      	ldr	r0, [r7, #4]
 800e828:	f000 fb7f 	bl	800ef2a <USBD_CtlError>
          break;
 800e82c:	bf00      	nop
      }
      break;
 800e82e:	e005      	b.n	800e83c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800e830:	6839      	ldr	r1, [r7, #0]
 800e832:	6878      	ldr	r0, [r7, #4]
 800e834:	f000 fb79 	bl	800ef2a <USBD_CtlError>
      break;
 800e838:	e000      	b.n	800e83c <USBD_StdEPReq+0x330>
      break;
 800e83a:	bf00      	nop
  }

  return ret;
 800e83c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e83e:	4618      	mov	r0, r3
 800e840:	3710      	adds	r7, #16
 800e842:	46bd      	mov	sp, r7
 800e844:	bd80      	pop	{r7, pc}
	...

0800e848 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b084      	sub	sp, #16
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	6078      	str	r0, [r7, #4]
 800e850:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800e852:	2300      	movs	r3, #0
 800e854:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800e856:	2300      	movs	r3, #0
 800e858:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800e85a:	2300      	movs	r3, #0
 800e85c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800e85e:	683b      	ldr	r3, [r7, #0]
 800e860:	885b      	ldrh	r3, [r3, #2]
 800e862:	0a1b      	lsrs	r3, r3, #8
 800e864:	b29b      	uxth	r3, r3
 800e866:	3b01      	subs	r3, #1
 800e868:	2b0e      	cmp	r3, #14
 800e86a:	f200 8152 	bhi.w	800eb12 <USBD_GetDescriptor+0x2ca>
 800e86e:	a201      	add	r2, pc, #4	; (adr r2, 800e874 <USBD_GetDescriptor+0x2c>)
 800e870:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e874:	0800e8e5 	.word	0x0800e8e5
 800e878:	0800e8fd 	.word	0x0800e8fd
 800e87c:	0800e93d 	.word	0x0800e93d
 800e880:	0800eb13 	.word	0x0800eb13
 800e884:	0800eb13 	.word	0x0800eb13
 800e888:	0800eab3 	.word	0x0800eab3
 800e88c:	0800eadf 	.word	0x0800eadf
 800e890:	0800eb13 	.word	0x0800eb13
 800e894:	0800eb13 	.word	0x0800eb13
 800e898:	0800eb13 	.word	0x0800eb13
 800e89c:	0800eb13 	.word	0x0800eb13
 800e8a0:	0800eb13 	.word	0x0800eb13
 800e8a4:	0800eb13 	.word	0x0800eb13
 800e8a8:	0800eb13 	.word	0x0800eb13
 800e8ac:	0800e8b1 	.word	0x0800e8b1
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8b6:	69db      	ldr	r3, [r3, #28]
 800e8b8:	2b00      	cmp	r3, #0
 800e8ba:	d00b      	beq.n	800e8d4 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800e8bc:	687b      	ldr	r3, [r7, #4]
 800e8be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8c2:	69db      	ldr	r3, [r3, #28]
 800e8c4:	687a      	ldr	r2, [r7, #4]
 800e8c6:	7c12      	ldrb	r2, [r2, #16]
 800e8c8:	f107 0108 	add.w	r1, r7, #8
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3
 800e8d0:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800e8d2:	e126      	b.n	800eb22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800e8d4:	6839      	ldr	r1, [r7, #0]
 800e8d6:	6878      	ldr	r0, [r7, #4]
 800e8d8:	f000 fb27 	bl	800ef2a <USBD_CtlError>
        err++;
 800e8dc:	7afb      	ldrb	r3, [r7, #11]
 800e8de:	3301      	adds	r3, #1
 800e8e0:	72fb      	strb	r3, [r7, #11]
      break;
 800e8e2:	e11e      	b.n	800eb22 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	687a      	ldr	r2, [r7, #4]
 800e8ee:	7c12      	ldrb	r2, [r2, #16]
 800e8f0:	f107 0108 	add.w	r1, r7, #8
 800e8f4:	4610      	mov	r0, r2
 800e8f6:	4798      	blx	r3
 800e8f8:	60f8      	str	r0, [r7, #12]
      break;
 800e8fa:	e112      	b.n	800eb22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	7c1b      	ldrb	r3, [r3, #16]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d10d      	bne.n	800e920 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e90a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e90c:	f107 0208 	add.w	r2, r7, #8
 800e910:	4610      	mov	r0, r2
 800e912:	4798      	blx	r3
 800e914:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e916:	68fb      	ldr	r3, [r7, #12]
 800e918:	3301      	adds	r3, #1
 800e91a:	2202      	movs	r2, #2
 800e91c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800e91e:	e100      	b.n	800eb22 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800e926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e928:	f107 0208 	add.w	r2, r7, #8
 800e92c:	4610      	mov	r0, r2
 800e92e:	4798      	blx	r3
 800e930:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	3301      	adds	r3, #1
 800e936:	2202      	movs	r2, #2
 800e938:	701a      	strb	r2, [r3, #0]
      break;
 800e93a:	e0f2      	b.n	800eb22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800e93c:	683b      	ldr	r3, [r7, #0]
 800e93e:	885b      	ldrh	r3, [r3, #2]
 800e940:	b2db      	uxtb	r3, r3
 800e942:	2b05      	cmp	r3, #5
 800e944:	f200 80ac 	bhi.w	800eaa0 <USBD_GetDescriptor+0x258>
 800e948:	a201      	add	r2, pc, #4	; (adr r2, 800e950 <USBD_GetDescriptor+0x108>)
 800e94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e94e:	bf00      	nop
 800e950:	0800e969 	.word	0x0800e969
 800e954:	0800e99d 	.word	0x0800e99d
 800e958:	0800e9d1 	.word	0x0800e9d1
 800e95c:	0800ea05 	.word	0x0800ea05
 800e960:	0800ea39 	.word	0x0800ea39
 800e964:	0800ea6d 	.word	0x0800ea6d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	2b00      	cmp	r3, #0
 800e972:	d00b      	beq.n	800e98c <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	687a      	ldr	r2, [r7, #4]
 800e97e:	7c12      	ldrb	r2, [r2, #16]
 800e980:	f107 0108 	add.w	r1, r7, #8
 800e984:	4610      	mov	r0, r2
 800e986:	4798      	blx	r3
 800e988:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e98a:	e091      	b.n	800eab0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e98c:	6839      	ldr	r1, [r7, #0]
 800e98e:	6878      	ldr	r0, [r7, #4]
 800e990:	f000 facb 	bl	800ef2a <USBD_CtlError>
            err++;
 800e994:	7afb      	ldrb	r3, [r7, #11]
 800e996:	3301      	adds	r3, #1
 800e998:	72fb      	strb	r3, [r7, #11]
          break;
 800e99a:	e089      	b.n	800eab0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800e99c:	687b      	ldr	r3, [r7, #4]
 800e99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9a2:	689b      	ldr	r3, [r3, #8]
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	d00b      	beq.n	800e9c0 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9ae:	689b      	ldr	r3, [r3, #8]
 800e9b0:	687a      	ldr	r2, [r7, #4]
 800e9b2:	7c12      	ldrb	r2, [r2, #16]
 800e9b4:	f107 0108 	add.w	r1, r7, #8
 800e9b8:	4610      	mov	r0, r2
 800e9ba:	4798      	blx	r3
 800e9bc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9be:	e077      	b.n	800eab0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9c0:	6839      	ldr	r1, [r7, #0]
 800e9c2:	6878      	ldr	r0, [r7, #4]
 800e9c4:	f000 fab1 	bl	800ef2a <USBD_CtlError>
            err++;
 800e9c8:	7afb      	ldrb	r3, [r7, #11]
 800e9ca:	3301      	adds	r3, #1
 800e9cc:	72fb      	strb	r3, [r7, #11]
          break;
 800e9ce:	e06f      	b.n	800eab0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9d6:	68db      	ldr	r3, [r3, #12]
 800e9d8:	2b00      	cmp	r3, #0
 800e9da:	d00b      	beq.n	800e9f4 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800e9e2:	68db      	ldr	r3, [r3, #12]
 800e9e4:	687a      	ldr	r2, [r7, #4]
 800e9e6:	7c12      	ldrb	r2, [r2, #16]
 800e9e8:	f107 0108 	add.w	r1, r7, #8
 800e9ec:	4610      	mov	r0, r2
 800e9ee:	4798      	blx	r3
 800e9f0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800e9f2:	e05d      	b.n	800eab0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800e9f4:	6839      	ldr	r1, [r7, #0]
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fa97 	bl	800ef2a <USBD_CtlError>
            err++;
 800e9fc:	7afb      	ldrb	r3, [r7, #11]
 800e9fe:	3301      	adds	r3, #1
 800ea00:	72fb      	strb	r3, [r7, #11]
          break;
 800ea02:	e055      	b.n	800eab0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea0a:	691b      	ldr	r3, [r3, #16]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d00b      	beq.n	800ea28 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea16:	691b      	ldr	r3, [r3, #16]
 800ea18:	687a      	ldr	r2, [r7, #4]
 800ea1a:	7c12      	ldrb	r2, [r2, #16]
 800ea1c:	f107 0108 	add.w	r1, r7, #8
 800ea20:	4610      	mov	r0, r2
 800ea22:	4798      	blx	r3
 800ea24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea26:	e043      	b.n	800eab0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea28:	6839      	ldr	r1, [r7, #0]
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f000 fa7d 	bl	800ef2a <USBD_CtlError>
            err++;
 800ea30:	7afb      	ldrb	r3, [r7, #11]
 800ea32:	3301      	adds	r3, #1
 800ea34:	72fb      	strb	r3, [r7, #11]
          break;
 800ea36:	e03b      	b.n	800eab0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea3e:	695b      	ldr	r3, [r3, #20]
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d00b      	beq.n	800ea5c <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea4a:	695b      	ldr	r3, [r3, #20]
 800ea4c:	687a      	ldr	r2, [r7, #4]
 800ea4e:	7c12      	ldrb	r2, [r2, #16]
 800ea50:	f107 0108 	add.w	r1, r7, #8
 800ea54:	4610      	mov	r0, r2
 800ea56:	4798      	blx	r3
 800ea58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea5a:	e029      	b.n	800eab0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea5c:	6839      	ldr	r1, [r7, #0]
 800ea5e:	6878      	ldr	r0, [r7, #4]
 800ea60:	f000 fa63 	bl	800ef2a <USBD_CtlError>
            err++;
 800ea64:	7afb      	ldrb	r3, [r7, #11]
 800ea66:	3301      	adds	r3, #1
 800ea68:	72fb      	strb	r3, [r7, #11]
          break;
 800ea6a:	e021      	b.n	800eab0 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea72:	699b      	ldr	r3, [r3, #24]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	d00b      	beq.n	800ea90 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ea78:	687b      	ldr	r3, [r7, #4]
 800ea7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ea7e:	699b      	ldr	r3, [r3, #24]
 800ea80:	687a      	ldr	r2, [r7, #4]
 800ea82:	7c12      	ldrb	r2, [r2, #16]
 800ea84:	f107 0108 	add.w	r1, r7, #8
 800ea88:	4610      	mov	r0, r2
 800ea8a:	4798      	blx	r3
 800ea8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ea8e:	e00f      	b.n	800eab0 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800ea90:	6839      	ldr	r1, [r7, #0]
 800ea92:	6878      	ldr	r0, [r7, #4]
 800ea94:	f000 fa49 	bl	800ef2a <USBD_CtlError>
            err++;
 800ea98:	7afb      	ldrb	r3, [r7, #11]
 800ea9a:	3301      	adds	r3, #1
 800ea9c:	72fb      	strb	r3, [r7, #11]
          break;
 800ea9e:	e007      	b.n	800eab0 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800eaa0:	6839      	ldr	r1, [r7, #0]
 800eaa2:	6878      	ldr	r0, [r7, #4]
 800eaa4:	f000 fa41 	bl	800ef2a <USBD_CtlError>
          err++;
 800eaa8:	7afb      	ldrb	r3, [r7, #11]
 800eaaa:	3301      	adds	r3, #1
 800eaac:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800eaae:	bf00      	nop
      }
      break;
 800eab0:	e037      	b.n	800eb22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	7c1b      	ldrb	r3, [r3, #16]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	d109      	bne.n	800eace <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eac2:	f107 0208 	add.w	r2, r7, #8
 800eac6:	4610      	mov	r0, r2
 800eac8:	4798      	blx	r3
 800eaca:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eacc:	e029      	b.n	800eb22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eace:	6839      	ldr	r1, [r7, #0]
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f000 fa2a 	bl	800ef2a <USBD_CtlError>
        err++;
 800ead6:	7afb      	ldrb	r3, [r7, #11]
 800ead8:	3301      	adds	r3, #1
 800eada:	72fb      	strb	r3, [r7, #11]
      break;
 800eadc:	e021      	b.n	800eb22 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800eade:	687b      	ldr	r3, [r7, #4]
 800eae0:	7c1b      	ldrb	r3, [r3, #16]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d10d      	bne.n	800eb02 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800eaec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eaee:	f107 0208 	add.w	r2, r7, #8
 800eaf2:	4610      	mov	r0, r2
 800eaf4:	4798      	blx	r3
 800eaf6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800eaf8:	68fb      	ldr	r3, [r7, #12]
 800eafa:	3301      	adds	r3, #1
 800eafc:	2207      	movs	r2, #7
 800eafe:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800eb00:	e00f      	b.n	800eb22 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800eb02:	6839      	ldr	r1, [r7, #0]
 800eb04:	6878      	ldr	r0, [r7, #4]
 800eb06:	f000 fa10 	bl	800ef2a <USBD_CtlError>
        err++;
 800eb0a:	7afb      	ldrb	r3, [r7, #11]
 800eb0c:	3301      	adds	r3, #1
 800eb0e:	72fb      	strb	r3, [r7, #11]
      break;
 800eb10:	e007      	b.n	800eb22 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800eb12:	6839      	ldr	r1, [r7, #0]
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f000 fa08 	bl	800ef2a <USBD_CtlError>
      err++;
 800eb1a:	7afb      	ldrb	r3, [r7, #11]
 800eb1c:	3301      	adds	r3, #1
 800eb1e:	72fb      	strb	r3, [r7, #11]
      break;
 800eb20:	bf00      	nop
  }

  if (err != 0U)
 800eb22:	7afb      	ldrb	r3, [r7, #11]
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	d11e      	bne.n	800eb66 <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800eb28:	683b      	ldr	r3, [r7, #0]
 800eb2a:	88db      	ldrh	r3, [r3, #6]
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d016      	beq.n	800eb5e <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800eb30:	893b      	ldrh	r3, [r7, #8]
 800eb32:	2b00      	cmp	r3, #0
 800eb34:	d00e      	beq.n	800eb54 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800eb36:	683b      	ldr	r3, [r7, #0]
 800eb38:	88da      	ldrh	r2, [r3, #6]
 800eb3a:	893b      	ldrh	r3, [r7, #8]
 800eb3c:	4293      	cmp	r3, r2
 800eb3e:	bf28      	it	cs
 800eb40:	4613      	movcs	r3, r2
 800eb42:	b29b      	uxth	r3, r3
 800eb44:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800eb46:	893b      	ldrh	r3, [r7, #8]
 800eb48:	461a      	mov	r2, r3
 800eb4a:	68f9      	ldr	r1, [r7, #12]
 800eb4c:	6878      	ldr	r0, [r7, #4]
 800eb4e:	f000 fa5d 	bl	800f00c <USBD_CtlSendData>
 800eb52:	e009      	b.n	800eb68 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800eb54:	6839      	ldr	r1, [r7, #0]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f000 f9e7 	bl	800ef2a <USBD_CtlError>
 800eb5c:	e004      	b.n	800eb68 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800eb5e:	6878      	ldr	r0, [r7, #4]
 800eb60:	f000 faae 	bl	800f0c0 <USBD_CtlSendStatus>
 800eb64:	e000      	b.n	800eb68 <USBD_GetDescriptor+0x320>
    return;
 800eb66:	bf00      	nop
  }
}
 800eb68:	3710      	adds	r7, #16
 800eb6a:	46bd      	mov	sp, r7
 800eb6c:	bd80      	pop	{r7, pc}
 800eb6e:	bf00      	nop

0800eb70 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b084      	sub	sp, #16
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	6078      	str	r0, [r7, #4]
 800eb78:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800eb7a:	683b      	ldr	r3, [r7, #0]
 800eb7c:	889b      	ldrh	r3, [r3, #4]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d131      	bne.n	800ebe6 <USBD_SetAddress+0x76>
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	88db      	ldrh	r3, [r3, #6]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d12d      	bne.n	800ebe6 <USBD_SetAddress+0x76>
 800eb8a:	683b      	ldr	r3, [r7, #0]
 800eb8c:	885b      	ldrh	r3, [r3, #2]
 800eb8e:	2b7f      	cmp	r3, #127	; 0x7f
 800eb90:	d829      	bhi.n	800ebe6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800eb92:	683b      	ldr	r3, [r7, #0]
 800eb94:	885b      	ldrh	r3, [r3, #2]
 800eb96:	b2db      	uxtb	r3, r3
 800eb98:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800eb9c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800eb9e:	687b      	ldr	r3, [r7, #4]
 800eba0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800eba4:	b2db      	uxtb	r3, r3
 800eba6:	2b03      	cmp	r3, #3
 800eba8:	d104      	bne.n	800ebb4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ebaa:	6839      	ldr	r1, [r7, #0]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f000 f9bc 	bl	800ef2a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebb2:	e01d      	b.n	800ebf0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	7bfa      	ldrb	r2, [r7, #15]
 800ebb8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ebbc:	7bfb      	ldrb	r3, [r7, #15]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	6878      	ldr	r0, [r7, #4]
 800ebc2:	f002 ff75 	bl	8011ab0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ebc6:	6878      	ldr	r0, [r7, #4]
 800ebc8:	f000 fa7a 	bl	800f0c0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ebcc:	7bfb      	ldrb	r3, [r7, #15]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	d004      	beq.n	800ebdc <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	2202      	movs	r2, #2
 800ebd6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebda:	e009      	b.n	800ebf0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ebdc:	687b      	ldr	r3, [r7, #4]
 800ebde:	2201      	movs	r2, #1
 800ebe0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ebe4:	e004      	b.n	800ebf0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ebe6:	6839      	ldr	r1, [r7, #0]
 800ebe8:	6878      	ldr	r0, [r7, #4]
 800ebea:	f000 f99e 	bl	800ef2a <USBD_CtlError>
  }
}
 800ebee:	bf00      	nop
 800ebf0:	bf00      	nop
 800ebf2:	3710      	adds	r7, #16
 800ebf4:	46bd      	mov	sp, r7
 800ebf6:	bd80      	pop	{r7, pc}

0800ebf8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b084      	sub	sp, #16
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	6078      	str	r0, [r7, #4]
 800ec00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ec02:	2300      	movs	r3, #0
 800ec04:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	885b      	ldrh	r3, [r3, #2]
 800ec0a:	b2da      	uxtb	r2, r3
 800ec0c:	4b4e      	ldr	r3, [pc, #312]	; (800ed48 <USBD_SetConfig+0x150>)
 800ec0e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ec10:	4b4d      	ldr	r3, [pc, #308]	; (800ed48 <USBD_SetConfig+0x150>)
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	2b01      	cmp	r3, #1
 800ec16:	d905      	bls.n	800ec24 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ec18:	6839      	ldr	r1, [r7, #0]
 800ec1a:	6878      	ldr	r0, [r7, #4]
 800ec1c:	f000 f985 	bl	800ef2a <USBD_CtlError>
    return USBD_FAIL;
 800ec20:	2303      	movs	r3, #3
 800ec22:	e08c      	b.n	800ed3e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ec2a:	b2db      	uxtb	r3, r3
 800ec2c:	2b02      	cmp	r3, #2
 800ec2e:	d002      	beq.n	800ec36 <USBD_SetConfig+0x3e>
 800ec30:	2b03      	cmp	r3, #3
 800ec32:	d029      	beq.n	800ec88 <USBD_SetConfig+0x90>
 800ec34:	e075      	b.n	800ed22 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ec36:	4b44      	ldr	r3, [pc, #272]	; (800ed48 <USBD_SetConfig+0x150>)
 800ec38:	781b      	ldrb	r3, [r3, #0]
 800ec3a:	2b00      	cmp	r3, #0
 800ec3c:	d020      	beq.n	800ec80 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ec3e:	4b42      	ldr	r3, [pc, #264]	; (800ed48 <USBD_SetConfig+0x150>)
 800ec40:	781b      	ldrb	r3, [r3, #0]
 800ec42:	461a      	mov	r2, r3
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ec48:	4b3f      	ldr	r3, [pc, #252]	; (800ed48 <USBD_SetConfig+0x150>)
 800ec4a:	781b      	ldrb	r3, [r3, #0]
 800ec4c:	4619      	mov	r1, r3
 800ec4e:	6878      	ldr	r0, [r7, #4]
 800ec50:	f7fe ffbd 	bl	800dbce <USBD_SetClassConfig>
 800ec54:	4603      	mov	r3, r0
 800ec56:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ec58:	7bfb      	ldrb	r3, [r7, #15]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d008      	beq.n	800ec70 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ec5e:	6839      	ldr	r1, [r7, #0]
 800ec60:	6878      	ldr	r0, [r7, #4]
 800ec62:	f000 f962 	bl	800ef2a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	2202      	movs	r2, #2
 800ec6a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ec6e:	e065      	b.n	800ed3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ec70:	6878      	ldr	r0, [r7, #4]
 800ec72:	f000 fa25 	bl	800f0c0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ec76:	687b      	ldr	r3, [r7, #4]
 800ec78:	2203      	movs	r2, #3
 800ec7a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ec7e:	e05d      	b.n	800ed3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ec80:	6878      	ldr	r0, [r7, #4]
 800ec82:	f000 fa1d 	bl	800f0c0 <USBD_CtlSendStatus>
      break;
 800ec86:	e059      	b.n	800ed3c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ec88:	4b2f      	ldr	r3, [pc, #188]	; (800ed48 <USBD_SetConfig+0x150>)
 800ec8a:	781b      	ldrb	r3, [r3, #0]
 800ec8c:	2b00      	cmp	r3, #0
 800ec8e:	d112      	bne.n	800ecb6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	2202      	movs	r2, #2
 800ec94:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ec98:	4b2b      	ldr	r3, [pc, #172]	; (800ed48 <USBD_SetConfig+0x150>)
 800ec9a:	781b      	ldrb	r3, [r3, #0]
 800ec9c:	461a      	mov	r2, r3
 800ec9e:	687b      	ldr	r3, [r7, #4]
 800eca0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800eca2:	4b29      	ldr	r3, [pc, #164]	; (800ed48 <USBD_SetConfig+0x150>)
 800eca4:	781b      	ldrb	r3, [r3, #0]
 800eca6:	4619      	mov	r1, r3
 800eca8:	6878      	ldr	r0, [r7, #4]
 800ecaa:	f7fe ffac 	bl	800dc06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ecae:	6878      	ldr	r0, [r7, #4]
 800ecb0:	f000 fa06 	bl	800f0c0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ecb4:	e042      	b.n	800ed3c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ecb6:	4b24      	ldr	r3, [pc, #144]	; (800ed48 <USBD_SetConfig+0x150>)
 800ecb8:	781b      	ldrb	r3, [r3, #0]
 800ecba:	461a      	mov	r2, r3
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	685b      	ldr	r3, [r3, #4]
 800ecc0:	429a      	cmp	r2, r3
 800ecc2:	d02a      	beq.n	800ed1a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	685b      	ldr	r3, [r3, #4]
 800ecc8:	b2db      	uxtb	r3, r3
 800ecca:	4619      	mov	r1, r3
 800eccc:	6878      	ldr	r0, [r7, #4]
 800ecce:	f7fe ff9a 	bl	800dc06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ecd2:	4b1d      	ldr	r3, [pc, #116]	; (800ed48 <USBD_SetConfig+0x150>)
 800ecd4:	781b      	ldrb	r3, [r3, #0]
 800ecd6:	461a      	mov	r2, r3
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ecdc:	4b1a      	ldr	r3, [pc, #104]	; (800ed48 <USBD_SetConfig+0x150>)
 800ecde:	781b      	ldrb	r3, [r3, #0]
 800ece0:	4619      	mov	r1, r3
 800ece2:	6878      	ldr	r0, [r7, #4]
 800ece4:	f7fe ff73 	bl	800dbce <USBD_SetClassConfig>
 800ece8:	4603      	mov	r3, r0
 800ecea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ecec:	7bfb      	ldrb	r3, [r7, #15]
 800ecee:	2b00      	cmp	r3, #0
 800ecf0:	d00f      	beq.n	800ed12 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ecf2:	6839      	ldr	r1, [r7, #0]
 800ecf4:	6878      	ldr	r0, [r7, #4]
 800ecf6:	f000 f918 	bl	800ef2a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ecfa:	687b      	ldr	r3, [r7, #4]
 800ecfc:	685b      	ldr	r3, [r3, #4]
 800ecfe:	b2db      	uxtb	r3, r3
 800ed00:	4619      	mov	r1, r3
 800ed02:	6878      	ldr	r0, [r7, #4]
 800ed04:	f7fe ff7f 	bl	800dc06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	2202      	movs	r2, #2
 800ed0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ed10:	e014      	b.n	800ed3c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ed12:	6878      	ldr	r0, [r7, #4]
 800ed14:	f000 f9d4 	bl	800f0c0 <USBD_CtlSendStatus>
      break;
 800ed18:	e010      	b.n	800ed3c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ed1a:	6878      	ldr	r0, [r7, #4]
 800ed1c:	f000 f9d0 	bl	800f0c0 <USBD_CtlSendStatus>
      break;
 800ed20:	e00c      	b.n	800ed3c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800ed22:	6839      	ldr	r1, [r7, #0]
 800ed24:	6878      	ldr	r0, [r7, #4]
 800ed26:	f000 f900 	bl	800ef2a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ed2a:	4b07      	ldr	r3, [pc, #28]	; (800ed48 <USBD_SetConfig+0x150>)
 800ed2c:	781b      	ldrb	r3, [r3, #0]
 800ed2e:	4619      	mov	r1, r3
 800ed30:	6878      	ldr	r0, [r7, #4]
 800ed32:	f7fe ff68 	bl	800dc06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800ed36:	2303      	movs	r3, #3
 800ed38:	73fb      	strb	r3, [r7, #15]
      break;
 800ed3a:	bf00      	nop
  }

  return ret;
 800ed3c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ed3e:	4618      	mov	r0, r3
 800ed40:	3710      	adds	r7, #16
 800ed42:	46bd      	mov	sp, r7
 800ed44:	bd80      	pop	{r7, pc}
 800ed46:	bf00      	nop
 800ed48:	20000698 	.word	0x20000698

0800ed4c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ed4c:	b580      	push	{r7, lr}
 800ed4e:	b082      	sub	sp, #8
 800ed50:	af00      	add	r7, sp, #0
 800ed52:	6078      	str	r0, [r7, #4]
 800ed54:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ed56:	683b      	ldr	r3, [r7, #0]
 800ed58:	88db      	ldrh	r3, [r3, #6]
 800ed5a:	2b01      	cmp	r3, #1
 800ed5c:	d004      	beq.n	800ed68 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ed5e:	6839      	ldr	r1, [r7, #0]
 800ed60:	6878      	ldr	r0, [r7, #4]
 800ed62:	f000 f8e2 	bl	800ef2a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ed66:	e023      	b.n	800edb0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ed68:	687b      	ldr	r3, [r7, #4]
 800ed6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ed6e:	b2db      	uxtb	r3, r3
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	dc02      	bgt.n	800ed7a <USBD_GetConfig+0x2e>
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	dc03      	bgt.n	800ed80 <USBD_GetConfig+0x34>
 800ed78:	e015      	b.n	800eda6 <USBD_GetConfig+0x5a>
 800ed7a:	2b03      	cmp	r3, #3
 800ed7c:	d00b      	beq.n	800ed96 <USBD_GetConfig+0x4a>
 800ed7e:	e012      	b.n	800eda6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ed80:	687b      	ldr	r3, [r7, #4]
 800ed82:	2200      	movs	r2, #0
 800ed84:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	3308      	adds	r3, #8
 800ed8a:	2201      	movs	r2, #1
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	6878      	ldr	r0, [r7, #4]
 800ed90:	f000 f93c 	bl	800f00c <USBD_CtlSendData>
        break;
 800ed94:	e00c      	b.n	800edb0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ed96:	687b      	ldr	r3, [r7, #4]
 800ed98:	3304      	adds	r3, #4
 800ed9a:	2201      	movs	r2, #1
 800ed9c:	4619      	mov	r1, r3
 800ed9e:	6878      	ldr	r0, [r7, #4]
 800eda0:	f000 f934 	bl	800f00c <USBD_CtlSendData>
        break;
 800eda4:	e004      	b.n	800edb0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800eda6:	6839      	ldr	r1, [r7, #0]
 800eda8:	6878      	ldr	r0, [r7, #4]
 800edaa:	f000 f8be 	bl	800ef2a <USBD_CtlError>
        break;
 800edae:	bf00      	nop
}
 800edb0:	bf00      	nop
 800edb2:	3708      	adds	r7, #8
 800edb4:	46bd      	mov	sp, r7
 800edb6:	bd80      	pop	{r7, pc}

0800edb8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	b082      	sub	sp, #8
 800edbc:	af00      	add	r7, sp, #0
 800edbe:	6078      	str	r0, [r7, #4]
 800edc0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800edc2:	687b      	ldr	r3, [r7, #4]
 800edc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800edc8:	b2db      	uxtb	r3, r3
 800edca:	3b01      	subs	r3, #1
 800edcc:	2b02      	cmp	r3, #2
 800edce:	d81e      	bhi.n	800ee0e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800edd0:	683b      	ldr	r3, [r7, #0]
 800edd2:	88db      	ldrh	r3, [r3, #6]
 800edd4:	2b02      	cmp	r3, #2
 800edd6:	d004      	beq.n	800ede2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800edd8:	6839      	ldr	r1, [r7, #0]
 800edda:	6878      	ldr	r0, [r7, #4]
 800eddc:	f000 f8a5 	bl	800ef2a <USBD_CtlError>
        break;
 800ede0:	e01a      	b.n	800ee18 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	2201      	movs	r2, #1
 800ede6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d005      	beq.n	800edfe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	68db      	ldr	r3, [r3, #12]
 800edf6:	f043 0202 	orr.w	r2, r3, #2
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	330c      	adds	r3, #12
 800ee02:	2202      	movs	r2, #2
 800ee04:	4619      	mov	r1, r3
 800ee06:	6878      	ldr	r0, [r7, #4]
 800ee08:	f000 f900 	bl	800f00c <USBD_CtlSendData>
      break;
 800ee0c:	e004      	b.n	800ee18 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800ee0e:	6839      	ldr	r1, [r7, #0]
 800ee10:	6878      	ldr	r0, [r7, #4]
 800ee12:	f000 f88a 	bl	800ef2a <USBD_CtlError>
      break;
 800ee16:	bf00      	nop
  }
}
 800ee18:	bf00      	nop
 800ee1a:	3708      	adds	r7, #8
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b082      	sub	sp, #8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
 800ee28:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee2a:	683b      	ldr	r3, [r7, #0]
 800ee2c:	885b      	ldrh	r3, [r3, #2]
 800ee2e:	2b01      	cmp	r3, #1
 800ee30:	d107      	bne.n	800ee42 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	2201      	movs	r2, #1
 800ee36:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800ee3a:	6878      	ldr	r0, [r7, #4]
 800ee3c:	f000 f940 	bl	800f0c0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800ee40:	e013      	b.n	800ee6a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800ee42:	683b      	ldr	r3, [r7, #0]
 800ee44:	885b      	ldrh	r3, [r3, #2]
 800ee46:	2b02      	cmp	r3, #2
 800ee48:	d10b      	bne.n	800ee62 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800ee4a:	683b      	ldr	r3, [r7, #0]
 800ee4c:	889b      	ldrh	r3, [r3, #4]
 800ee4e:	0a1b      	lsrs	r3, r3, #8
 800ee50:	b29b      	uxth	r3, r3
 800ee52:	b2da      	uxtb	r2, r3
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800ee5a:	6878      	ldr	r0, [r7, #4]
 800ee5c:	f000 f930 	bl	800f0c0 <USBD_CtlSendStatus>
}
 800ee60:	e003      	b.n	800ee6a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800ee62:	6839      	ldr	r1, [r7, #0]
 800ee64:	6878      	ldr	r0, [r7, #4]
 800ee66:	f000 f860 	bl	800ef2a <USBD_CtlError>
}
 800ee6a:	bf00      	nop
 800ee6c:	3708      	adds	r7, #8
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}

0800ee72 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ee72:	b580      	push	{r7, lr}
 800ee74:	b082      	sub	sp, #8
 800ee76:	af00      	add	r7, sp, #0
 800ee78:	6078      	str	r0, [r7, #4]
 800ee7a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ee82:	b2db      	uxtb	r3, r3
 800ee84:	3b01      	subs	r3, #1
 800ee86:	2b02      	cmp	r3, #2
 800ee88:	d80b      	bhi.n	800eea2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	885b      	ldrh	r3, [r3, #2]
 800ee8e:	2b01      	cmp	r3, #1
 800ee90:	d10c      	bne.n	800eeac <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	2200      	movs	r2, #0
 800ee96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800ee9a:	6878      	ldr	r0, [r7, #4]
 800ee9c:	f000 f910 	bl	800f0c0 <USBD_CtlSendStatus>
      }
      break;
 800eea0:	e004      	b.n	800eeac <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800eea2:	6839      	ldr	r1, [r7, #0]
 800eea4:	6878      	ldr	r0, [r7, #4]
 800eea6:	f000 f840 	bl	800ef2a <USBD_CtlError>
      break;
 800eeaa:	e000      	b.n	800eeae <USBD_ClrFeature+0x3c>
      break;
 800eeac:	bf00      	nop
  }
}
 800eeae:	bf00      	nop
 800eeb0:	3708      	adds	r7, #8
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	bd80      	pop	{r7, pc}

0800eeb6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800eeb6:	b580      	push	{r7, lr}
 800eeb8:	b084      	sub	sp, #16
 800eeba:	af00      	add	r7, sp, #0
 800eebc:	6078      	str	r0, [r7, #4]
 800eebe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800eec0:	683b      	ldr	r3, [r7, #0]
 800eec2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	781a      	ldrb	r2, [r3, #0]
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800eecc:	68fb      	ldr	r3, [r7, #12]
 800eece:	3301      	adds	r3, #1
 800eed0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800eed2:	68fb      	ldr	r3, [r7, #12]
 800eed4:	781a      	ldrb	r2, [r3, #0]
 800eed6:	687b      	ldr	r3, [r7, #4]
 800eed8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	3301      	adds	r3, #1
 800eede:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800eee0:	68f8      	ldr	r0, [r7, #12]
 800eee2:	f7ff fa17 	bl	800e314 <SWAPBYTE>
 800eee6:	4603      	mov	r3, r0
 800eee8:	461a      	mov	r2, r3
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800eeee:	68fb      	ldr	r3, [r7, #12]
 800eef0:	3301      	adds	r3, #1
 800eef2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800eef4:	68fb      	ldr	r3, [r7, #12]
 800eef6:	3301      	adds	r3, #1
 800eef8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800eefa:	68f8      	ldr	r0, [r7, #12]
 800eefc:	f7ff fa0a 	bl	800e314 <SWAPBYTE>
 800ef00:	4603      	mov	r3, r0
 800ef02:	461a      	mov	r2, r3
 800ef04:	687b      	ldr	r3, [r7, #4]
 800ef06:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	3301      	adds	r3, #1
 800ef0c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800ef0e:	68fb      	ldr	r3, [r7, #12]
 800ef10:	3301      	adds	r3, #1
 800ef12:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800ef14:	68f8      	ldr	r0, [r7, #12]
 800ef16:	f7ff f9fd 	bl	800e314 <SWAPBYTE>
 800ef1a:	4603      	mov	r3, r0
 800ef1c:	461a      	mov	r2, r3
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	80da      	strh	r2, [r3, #6]
}
 800ef22:	bf00      	nop
 800ef24:	3710      	adds	r7, #16
 800ef26:	46bd      	mov	sp, r7
 800ef28:	bd80      	pop	{r7, pc}

0800ef2a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ef2a:	b580      	push	{r7, lr}
 800ef2c:	b082      	sub	sp, #8
 800ef2e:	af00      	add	r7, sp, #0
 800ef30:	6078      	str	r0, [r7, #4]
 800ef32:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800ef34:	2180      	movs	r1, #128	; 0x80
 800ef36:	6878      	ldr	r0, [r7, #4]
 800ef38:	f002 fd50 	bl	80119dc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800ef3c:	2100      	movs	r1, #0
 800ef3e:	6878      	ldr	r0, [r7, #4]
 800ef40:	f002 fd4c 	bl	80119dc <USBD_LL_StallEP>
}
 800ef44:	bf00      	nop
 800ef46:	3708      	adds	r7, #8
 800ef48:	46bd      	mov	sp, r7
 800ef4a:	bd80      	pop	{r7, pc}

0800ef4c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800ef4c:	b580      	push	{r7, lr}
 800ef4e:	b086      	sub	sp, #24
 800ef50:	af00      	add	r7, sp, #0
 800ef52:	60f8      	str	r0, [r7, #12]
 800ef54:	60b9      	str	r1, [r7, #8]
 800ef56:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800ef58:	2300      	movs	r3, #0
 800ef5a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d036      	beq.n	800efd0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800ef66:	6938      	ldr	r0, [r7, #16]
 800ef68:	f000 f836 	bl	800efd8 <USBD_GetLen>
 800ef6c:	4603      	mov	r3, r0
 800ef6e:	3301      	adds	r3, #1
 800ef70:	b29b      	uxth	r3, r3
 800ef72:	005b      	lsls	r3, r3, #1
 800ef74:	b29a      	uxth	r2, r3
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800ef7a:	7dfb      	ldrb	r3, [r7, #23]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	4413      	add	r3, r2
 800ef80:	687a      	ldr	r2, [r7, #4]
 800ef82:	7812      	ldrb	r2, [r2, #0]
 800ef84:	701a      	strb	r2, [r3, #0]
  idx++;
 800ef86:	7dfb      	ldrb	r3, [r7, #23]
 800ef88:	3301      	adds	r3, #1
 800ef8a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800ef8c:	7dfb      	ldrb	r3, [r7, #23]
 800ef8e:	68ba      	ldr	r2, [r7, #8]
 800ef90:	4413      	add	r3, r2
 800ef92:	2203      	movs	r2, #3
 800ef94:	701a      	strb	r2, [r3, #0]
  idx++;
 800ef96:	7dfb      	ldrb	r3, [r7, #23]
 800ef98:	3301      	adds	r3, #1
 800ef9a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800ef9c:	e013      	b.n	800efc6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800ef9e:	7dfb      	ldrb	r3, [r7, #23]
 800efa0:	68ba      	ldr	r2, [r7, #8]
 800efa2:	4413      	add	r3, r2
 800efa4:	693a      	ldr	r2, [r7, #16]
 800efa6:	7812      	ldrb	r2, [r2, #0]
 800efa8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800efaa:	693b      	ldr	r3, [r7, #16]
 800efac:	3301      	adds	r3, #1
 800efae:	613b      	str	r3, [r7, #16]
    idx++;
 800efb0:	7dfb      	ldrb	r3, [r7, #23]
 800efb2:	3301      	adds	r3, #1
 800efb4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800efb6:	7dfb      	ldrb	r3, [r7, #23]
 800efb8:	68ba      	ldr	r2, [r7, #8]
 800efba:	4413      	add	r3, r2
 800efbc:	2200      	movs	r2, #0
 800efbe:	701a      	strb	r2, [r3, #0]
    idx++;
 800efc0:	7dfb      	ldrb	r3, [r7, #23]
 800efc2:	3301      	adds	r3, #1
 800efc4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	781b      	ldrb	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1e7      	bne.n	800ef9e <USBD_GetString+0x52>
 800efce:	e000      	b.n	800efd2 <USBD_GetString+0x86>
    return;
 800efd0:	bf00      	nop
  }
}
 800efd2:	3718      	adds	r7, #24
 800efd4:	46bd      	mov	sp, r7
 800efd6:	bd80      	pop	{r7, pc}

0800efd8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800efd8:	b480      	push	{r7}
 800efda:	b085      	sub	sp, #20
 800efdc:	af00      	add	r7, sp, #0
 800efde:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800efe0:	2300      	movs	r3, #0
 800efe2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800efe8:	e005      	b.n	800eff6 <USBD_GetLen+0x1e>
  {
    len++;
 800efea:	7bfb      	ldrb	r3, [r7, #15]
 800efec:	3301      	adds	r3, #1
 800efee:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800eff0:	68bb      	ldr	r3, [r7, #8]
 800eff2:	3301      	adds	r3, #1
 800eff4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	781b      	ldrb	r3, [r3, #0]
 800effa:	2b00      	cmp	r3, #0
 800effc:	d1f5      	bne.n	800efea <USBD_GetLen+0x12>
  }

  return len;
 800effe:	7bfb      	ldrb	r3, [r7, #15]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3714      	adds	r7, #20
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr

0800f00c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	60f8      	str	r0, [r7, #12]
 800f014:	60b9      	str	r1, [r7, #8]
 800f016:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	2202      	movs	r2, #2
 800f01c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	687a      	ldr	r2, [r7, #4]
 800f02a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	68ba      	ldr	r2, [r7, #8]
 800f030:	2100      	movs	r1, #0
 800f032:	68f8      	ldr	r0, [r7, #12]
 800f034:	f002 fd5b 	bl	8011aee <USBD_LL_Transmit>

  return USBD_OK;
 800f038:	2300      	movs	r3, #0
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800f042:	b580      	push	{r7, lr}
 800f044:	b084      	sub	sp, #16
 800f046:	af00      	add	r7, sp, #0
 800f048:	60f8      	str	r0, [r7, #12]
 800f04a:	60b9      	str	r1, [r7, #8]
 800f04c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	68ba      	ldr	r2, [r7, #8]
 800f052:	2100      	movs	r1, #0
 800f054:	68f8      	ldr	r0, [r7, #12]
 800f056:	f002 fd4a 	bl	8011aee <USBD_LL_Transmit>

  return USBD_OK;
 800f05a:	2300      	movs	r3, #0
}
 800f05c:	4618      	mov	r0, r3
 800f05e:	3710      	adds	r7, #16
 800f060:	46bd      	mov	sp, r7
 800f062:	bd80      	pop	{r7, pc}

0800f064 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800f064:	b580      	push	{r7, lr}
 800f066:	b084      	sub	sp, #16
 800f068:	af00      	add	r7, sp, #0
 800f06a:	60f8      	str	r0, [r7, #12]
 800f06c:	60b9      	str	r1, [r7, #8]
 800f06e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800f070:	68fb      	ldr	r3, [r7, #12]
 800f072:	2203      	movs	r2, #3
 800f074:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800f078:	68fb      	ldr	r3, [r7, #12]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	687a      	ldr	r2, [r7, #4]
 800f084:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	68ba      	ldr	r2, [r7, #8]
 800f08c:	2100      	movs	r1, #0
 800f08e:	68f8      	ldr	r0, [r7, #12]
 800f090:	f002 fd4e 	bl	8011b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f094:	2300      	movs	r3, #0
}
 800f096:	4618      	mov	r0, r3
 800f098:	3710      	adds	r7, #16
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}

0800f09e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800f09e:	b580      	push	{r7, lr}
 800f0a0:	b084      	sub	sp, #16
 800f0a2:	af00      	add	r7, sp, #0
 800f0a4:	60f8      	str	r0, [r7, #12]
 800f0a6:	60b9      	str	r1, [r7, #8]
 800f0a8:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	68ba      	ldr	r2, [r7, #8]
 800f0ae:	2100      	movs	r1, #0
 800f0b0:	68f8      	ldr	r0, [r7, #12]
 800f0b2:	f002 fd3d 	bl	8011b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f0b6:	2300      	movs	r3, #0
}
 800f0b8:	4618      	mov	r0, r3
 800f0ba:	3710      	adds	r7, #16
 800f0bc:	46bd      	mov	sp, r7
 800f0be:	bd80      	pop	{r7, pc}

0800f0c0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800f0c0:	b580      	push	{r7, lr}
 800f0c2:	b082      	sub	sp, #8
 800f0c4:	af00      	add	r7, sp, #0
 800f0c6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	2204      	movs	r2, #4
 800f0cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	2100      	movs	r1, #0
 800f0d6:	6878      	ldr	r0, [r7, #4]
 800f0d8:	f002 fd09 	bl	8011aee <USBD_LL_Transmit>

  return USBD_OK;
 800f0dc:	2300      	movs	r3, #0
}
 800f0de:	4618      	mov	r0, r3
 800f0e0:	3708      	adds	r7, #8
 800f0e2:	46bd      	mov	sp, r7
 800f0e4:	bd80      	pop	{r7, pc}

0800f0e6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800f0e6:	b580      	push	{r7, lr}
 800f0e8:	b082      	sub	sp, #8
 800f0ea:	af00      	add	r7, sp, #0
 800f0ec:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800f0ee:	687b      	ldr	r3, [r7, #4]
 800f0f0:	2205      	movs	r2, #5
 800f0f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800f0f6:	2300      	movs	r3, #0
 800f0f8:	2200      	movs	r2, #0
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f002 fd17 	bl	8011b30 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800f102:	2300      	movs	r3, #0
}
 800f104:	4618      	mov	r0, r3
 800f106:	3708      	adds	r7, #8
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}

0800f10c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800f10c:	b590      	push	{r4, r7, lr}
 800f10e:	b089      	sub	sp, #36	; 0x24
 800f110:	af04      	add	r7, sp, #16
 800f112:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800f114:	2301      	movs	r3, #1
 800f116:	2202      	movs	r2, #2
 800f118:	2102      	movs	r1, #2
 800f11a:	6878      	ldr	r0, [r7, #4]
 800f11c:	f000 fc85 	bl	800fa2a <USBH_FindInterface>
 800f120:	4603      	mov	r3, r0
 800f122:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f124:	7bfb      	ldrb	r3, [r7, #15]
 800f126:	2bff      	cmp	r3, #255	; 0xff
 800f128:	d002      	beq.n	800f130 <USBH_CDC_InterfaceInit+0x24>
 800f12a:	7bfb      	ldrb	r3, [r7, #15]
 800f12c:	2b01      	cmp	r3, #1
 800f12e:	d901      	bls.n	800f134 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f130:	2302      	movs	r3, #2
 800f132:	e13d      	b.n	800f3b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800f134:	7bfb      	ldrb	r3, [r7, #15]
 800f136:	4619      	mov	r1, r3
 800f138:	6878      	ldr	r0, [r7, #4]
 800f13a:	f000 fc5a 	bl	800f9f2 <USBH_SelectInterface>
 800f13e:	4603      	mov	r3, r0
 800f140:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800f142:	7bbb      	ldrb	r3, [r7, #14]
 800f144:	2b00      	cmp	r3, #0
 800f146:	d001      	beq.n	800f14c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800f148:	2302      	movs	r3, #2
 800f14a:	e131      	b.n	800f3b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800f152:	2050      	movs	r0, #80	; 0x50
 800f154:	f003 f8e2 	bl	801231c <malloc>
 800f158:	4603      	mov	r3, r0
 800f15a:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f162:	69db      	ldr	r3, [r3, #28]
 800f164:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800f166:	68bb      	ldr	r3, [r7, #8]
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d101      	bne.n	800f170 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800f16c:	2302      	movs	r3, #2
 800f16e:	e11f      	b.n	800f3b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800f170:	2250      	movs	r2, #80	; 0x50
 800f172:	2100      	movs	r1, #0
 800f174:	68b8      	ldr	r0, [r7, #8]
 800f176:	f003 f8e1 	bl	801233c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f17a:	7bfb      	ldrb	r3, [r7, #15]
 800f17c:	687a      	ldr	r2, [r7, #4]
 800f17e:	211a      	movs	r1, #26
 800f180:	fb01 f303 	mul.w	r3, r1, r3
 800f184:	4413      	add	r3, r2
 800f186:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f18a:	781b      	ldrb	r3, [r3, #0]
 800f18c:	b25b      	sxtb	r3, r3
 800f18e:	2b00      	cmp	r3, #0
 800f190:	da15      	bge.n	800f1be <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f192:	7bfb      	ldrb	r3, [r7, #15]
 800f194:	687a      	ldr	r2, [r7, #4]
 800f196:	211a      	movs	r1, #26
 800f198:	fb01 f303 	mul.w	r3, r1, r3
 800f19c:	4413      	add	r3, r2
 800f19e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f1a2:	781a      	ldrb	r2, [r3, #0]
 800f1a4:	68bb      	ldr	r3, [r7, #8]
 800f1a6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f1a8:	7bfb      	ldrb	r3, [r7, #15]
 800f1aa:	687a      	ldr	r2, [r7, #4]
 800f1ac:	211a      	movs	r1, #26
 800f1ae:	fb01 f303 	mul.w	r3, r1, r3
 800f1b2:	4413      	add	r3, r2
 800f1b4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f1b8:	881a      	ldrh	r2, [r3, #0]
 800f1ba:	68bb      	ldr	r3, [r7, #8]
 800f1bc:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800f1be:	68bb      	ldr	r3, [r7, #8]
 800f1c0:	785b      	ldrb	r3, [r3, #1]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	6878      	ldr	r0, [r7, #4]
 800f1c6:	f001 ff26 	bl	8011016 <USBH_AllocPipe>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	68bb      	ldr	r3, [r7, #8]
 800f1d0:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800f1d2:	68bb      	ldr	r3, [r7, #8]
 800f1d4:	7819      	ldrb	r1, [r3, #0]
 800f1d6:	68bb      	ldr	r3, [r7, #8]
 800f1d8:	7858      	ldrb	r0, [r3, #1]
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f1e6:	68ba      	ldr	r2, [r7, #8]
 800f1e8:	8952      	ldrh	r2, [r2, #10]
 800f1ea:	9202      	str	r2, [sp, #8]
 800f1ec:	2203      	movs	r2, #3
 800f1ee:	9201      	str	r2, [sp, #4]
 800f1f0:	9300      	str	r3, [sp, #0]
 800f1f2:	4623      	mov	r3, r4
 800f1f4:	4602      	mov	r2, r0
 800f1f6:	6878      	ldr	r0, [r7, #4]
 800f1f8:	f001 fede 	bl	8010fb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800f1fc:	68bb      	ldr	r3, [r7, #8]
 800f1fe:	781b      	ldrb	r3, [r3, #0]
 800f200:	2200      	movs	r2, #0
 800f202:	4619      	mov	r1, r3
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f002 ffdb 	bl	80121c0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800f20a:	2300      	movs	r3, #0
 800f20c:	2200      	movs	r2, #0
 800f20e:	210a      	movs	r1, #10
 800f210:	6878      	ldr	r0, [r7, #4]
 800f212:	f000 fc0a 	bl	800fa2a <USBH_FindInterface>
 800f216:	4603      	mov	r3, r0
 800f218:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800f21a:	7bfb      	ldrb	r3, [r7, #15]
 800f21c:	2bff      	cmp	r3, #255	; 0xff
 800f21e:	d002      	beq.n	800f226 <USBH_CDC_InterfaceInit+0x11a>
 800f220:	7bfb      	ldrb	r3, [r7, #15]
 800f222:	2b01      	cmp	r3, #1
 800f224:	d901      	bls.n	800f22a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800f226:	2302      	movs	r3, #2
 800f228:	e0c2      	b.n	800f3b0 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800f22a:	7bfb      	ldrb	r3, [r7, #15]
 800f22c:	687a      	ldr	r2, [r7, #4]
 800f22e:	211a      	movs	r1, #26
 800f230:	fb01 f303 	mul.w	r3, r1, r3
 800f234:	4413      	add	r3, r2
 800f236:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f23a:	781b      	ldrb	r3, [r3, #0]
 800f23c:	b25b      	sxtb	r3, r3
 800f23e:	2b00      	cmp	r3, #0
 800f240:	da16      	bge.n	800f270 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f242:	7bfb      	ldrb	r3, [r7, #15]
 800f244:	687a      	ldr	r2, [r7, #4]
 800f246:	211a      	movs	r1, #26
 800f248:	fb01 f303 	mul.w	r3, r1, r3
 800f24c:	4413      	add	r3, r2
 800f24e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f252:	781a      	ldrb	r2, [r3, #0]
 800f254:	68bb      	ldr	r3, [r7, #8]
 800f256:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f258:	7bfb      	ldrb	r3, [r7, #15]
 800f25a:	687a      	ldr	r2, [r7, #4]
 800f25c:	211a      	movs	r1, #26
 800f25e:	fb01 f303 	mul.w	r3, r1, r3
 800f262:	4413      	add	r3, r2
 800f264:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f268:	881a      	ldrh	r2, [r3, #0]
 800f26a:	68bb      	ldr	r3, [r7, #8]
 800f26c:	835a      	strh	r2, [r3, #26]
 800f26e:	e015      	b.n	800f29c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800f270:	7bfb      	ldrb	r3, [r7, #15]
 800f272:	687a      	ldr	r2, [r7, #4]
 800f274:	211a      	movs	r1, #26
 800f276:	fb01 f303 	mul.w	r3, r1, r3
 800f27a:	4413      	add	r3, r2
 800f27c:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800f280:	781a      	ldrb	r2, [r3, #0]
 800f282:	68bb      	ldr	r3, [r7, #8]
 800f284:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800f286:	7bfb      	ldrb	r3, [r7, #15]
 800f288:	687a      	ldr	r2, [r7, #4]
 800f28a:	211a      	movs	r1, #26
 800f28c:	fb01 f303 	mul.w	r3, r1, r3
 800f290:	4413      	add	r3, r2
 800f292:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800f296:	881a      	ldrh	r2, [r3, #0]
 800f298:	68bb      	ldr	r3, [r7, #8]
 800f29a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800f29c:	7bfb      	ldrb	r3, [r7, #15]
 800f29e:	687a      	ldr	r2, [r7, #4]
 800f2a0:	211a      	movs	r1, #26
 800f2a2:	fb01 f303 	mul.w	r3, r1, r3
 800f2a6:	4413      	add	r3, r2
 800f2a8:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f2ac:	781b      	ldrb	r3, [r3, #0]
 800f2ae:	b25b      	sxtb	r3, r3
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	da16      	bge.n	800f2e2 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f2b4:	7bfb      	ldrb	r3, [r7, #15]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	211a      	movs	r1, #26
 800f2ba:	fb01 f303 	mul.w	r3, r1, r3
 800f2be:	4413      	add	r3, r2
 800f2c0:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f2c4:	781a      	ldrb	r2, [r3, #0]
 800f2c6:	68bb      	ldr	r3, [r7, #8]
 800f2c8:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f2ca:	7bfb      	ldrb	r3, [r7, #15]
 800f2cc:	687a      	ldr	r2, [r7, #4]
 800f2ce:	211a      	movs	r1, #26
 800f2d0:	fb01 f303 	mul.w	r3, r1, r3
 800f2d4:	4413      	add	r3, r2
 800f2d6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f2da:	881a      	ldrh	r2, [r3, #0]
 800f2dc:	68bb      	ldr	r3, [r7, #8]
 800f2de:	835a      	strh	r2, [r3, #26]
 800f2e0:	e015      	b.n	800f30e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800f2e2:	7bfb      	ldrb	r3, [r7, #15]
 800f2e4:	687a      	ldr	r2, [r7, #4]
 800f2e6:	211a      	movs	r1, #26
 800f2e8:	fb01 f303 	mul.w	r3, r1, r3
 800f2ec:	4413      	add	r3, r2
 800f2ee:	f203 3356 	addw	r3, r3, #854	; 0x356
 800f2f2:	781a      	ldrb	r2, [r3, #0]
 800f2f4:	68bb      	ldr	r3, [r7, #8]
 800f2f6:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800f2f8:	7bfb      	ldrb	r3, [r7, #15]
 800f2fa:	687a      	ldr	r2, [r7, #4]
 800f2fc:	211a      	movs	r1, #26
 800f2fe:	fb01 f303 	mul.w	r3, r1, r3
 800f302:	4413      	add	r3, r2
 800f304:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800f308:	881a      	ldrh	r2, [r3, #0]
 800f30a:	68bb      	ldr	r3, [r7, #8]
 800f30c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	7b9b      	ldrb	r3, [r3, #14]
 800f312:	4619      	mov	r1, r3
 800f314:	6878      	ldr	r0, [r7, #4]
 800f316:	f001 fe7e 	bl	8011016 <USBH_AllocPipe>
 800f31a:	4603      	mov	r3, r0
 800f31c:	461a      	mov	r2, r3
 800f31e:	68bb      	ldr	r3, [r7, #8]
 800f320:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800f322:	68bb      	ldr	r3, [r7, #8]
 800f324:	7bdb      	ldrb	r3, [r3, #15]
 800f326:	4619      	mov	r1, r3
 800f328:	6878      	ldr	r0, [r7, #4]
 800f32a:	f001 fe74 	bl	8011016 <USBH_AllocPipe>
 800f32e:	4603      	mov	r3, r0
 800f330:	461a      	mov	r2, r3
 800f332:	68bb      	ldr	r3, [r7, #8]
 800f334:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800f336:	68bb      	ldr	r3, [r7, #8]
 800f338:	7b59      	ldrb	r1, [r3, #13]
 800f33a:	68bb      	ldr	r3, [r7, #8]
 800f33c:	7b98      	ldrb	r0, [r3, #14]
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f344:	687b      	ldr	r3, [r7, #4]
 800f346:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f34a:	68ba      	ldr	r2, [r7, #8]
 800f34c:	8b12      	ldrh	r2, [r2, #24]
 800f34e:	9202      	str	r2, [sp, #8]
 800f350:	2202      	movs	r2, #2
 800f352:	9201      	str	r2, [sp, #4]
 800f354:	9300      	str	r3, [sp, #0]
 800f356:	4623      	mov	r3, r4
 800f358:	4602      	mov	r2, r0
 800f35a:	6878      	ldr	r0, [r7, #4]
 800f35c:	f001 fe2c 	bl	8010fb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	7b19      	ldrb	r1, [r3, #12]
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	7bd8      	ldrb	r0, [r3, #15]
 800f368:	687b      	ldr	r3, [r7, #4]
 800f36a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800f374:	68ba      	ldr	r2, [r7, #8]
 800f376:	8b52      	ldrh	r2, [r2, #26]
 800f378:	9202      	str	r2, [sp, #8]
 800f37a:	2202      	movs	r2, #2
 800f37c:	9201      	str	r2, [sp, #4]
 800f37e:	9300      	str	r3, [sp, #0]
 800f380:	4623      	mov	r3, r4
 800f382:	4602      	mov	r2, r0
 800f384:	6878      	ldr	r0, [r7, #4]
 800f386:	f001 fe17 	bl	8010fb8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800f38a:	68bb      	ldr	r3, [r7, #8]
 800f38c:	2200      	movs	r2, #0
 800f38e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800f392:	68bb      	ldr	r3, [r7, #8]
 800f394:	7b5b      	ldrb	r3, [r3, #13]
 800f396:	2200      	movs	r2, #0
 800f398:	4619      	mov	r1, r3
 800f39a:	6878      	ldr	r0, [r7, #4]
 800f39c:	f002 ff10 	bl	80121c0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800f3a0:	68bb      	ldr	r3, [r7, #8]
 800f3a2:	7b1b      	ldrb	r3, [r3, #12]
 800f3a4:	2200      	movs	r2, #0
 800f3a6:	4619      	mov	r1, r3
 800f3a8:	6878      	ldr	r0, [r7, #4]
 800f3aa:	f002 ff09 	bl	80121c0 <USBH_LL_SetToggle>

  return USBH_OK;
 800f3ae:	2300      	movs	r3, #0
}
 800f3b0:	4618      	mov	r0, r3
 800f3b2:	3714      	adds	r7, #20
 800f3b4:	46bd      	mov	sp, r7
 800f3b6:	bd90      	pop	{r4, r7, pc}

0800f3b8 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b084      	sub	sp, #16
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f3c6:	69db      	ldr	r3, [r3, #28]
 800f3c8:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800f3ca:	68fb      	ldr	r3, [r7, #12]
 800f3cc:	781b      	ldrb	r3, [r3, #0]
 800f3ce:	2b00      	cmp	r3, #0
 800f3d0:	d00e      	beq.n	800f3f0 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f3d2:	68fb      	ldr	r3, [r7, #12]
 800f3d4:	781b      	ldrb	r3, [r3, #0]
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	6878      	ldr	r0, [r7, #4]
 800f3da:	f001 fe0c 	bl	8010ff6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	781b      	ldrb	r3, [r3, #0]
 800f3e2:	4619      	mov	r1, r3
 800f3e4:	6878      	ldr	r0, [r7, #4]
 800f3e6:	f001 fe37 	bl	8011058 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	7b1b      	ldrb	r3, [r3, #12]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d00e      	beq.n	800f416 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	7b1b      	ldrb	r3, [r3, #12]
 800f3fc:	4619      	mov	r1, r3
 800f3fe:	6878      	ldr	r0, [r7, #4]
 800f400:	f001 fdf9 	bl	8010ff6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800f404:	68fb      	ldr	r3, [r7, #12]
 800f406:	7b1b      	ldrb	r3, [r3, #12]
 800f408:	4619      	mov	r1, r3
 800f40a:	6878      	ldr	r0, [r7, #4]
 800f40c:	f001 fe24 	bl	8011058 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2200      	movs	r2, #0
 800f414:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	7b5b      	ldrb	r3, [r3, #13]
 800f41a:	2b00      	cmp	r3, #0
 800f41c:	d00e      	beq.n	800f43c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f41e:	68fb      	ldr	r3, [r7, #12]
 800f420:	7b5b      	ldrb	r3, [r3, #13]
 800f422:	4619      	mov	r1, r3
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	f001 fde6 	bl	8010ff6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	7b5b      	ldrb	r3, [r3, #13]
 800f42e:	4619      	mov	r1, r3
 800f430:	6878      	ldr	r0, [r7, #4]
 800f432:	f001 fe11 	bl	8011058 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800f436:	68fb      	ldr	r3, [r7, #12]
 800f438:	2200      	movs	r2, #0
 800f43a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800f43c:	687b      	ldr	r3, [r7, #4]
 800f43e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f442:	69db      	ldr	r3, [r3, #28]
 800f444:	2b00      	cmp	r3, #0
 800f446:	d00b      	beq.n	800f460 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f44e:	69db      	ldr	r3, [r3, #28]
 800f450:	4618      	mov	r0, r3
 800f452:	f002 ff6b 	bl	801232c <free>
    phost->pActiveClass->pData = 0U;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f45c:	2200      	movs	r2, #0
 800f45e:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800f460:	2300      	movs	r3, #0
}
 800f462:	4618      	mov	r0, r3
 800f464:	3710      	adds	r7, #16
 800f466:	46bd      	mov	sp, r7
 800f468:	bd80      	pop	{r7, pc}

0800f46a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b084      	sub	sp, #16
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f478:	69db      	ldr	r3, [r3, #28]
 800f47a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800f47c:	68fb      	ldr	r3, [r7, #12]
 800f47e:	3340      	adds	r3, #64	; 0x40
 800f480:	4619      	mov	r1, r3
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 f8b1 	bl	800f5ea <GetLineCoding>
 800f488:	4603      	mov	r3, r0
 800f48a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800f48c:	7afb      	ldrb	r3, [r7, #11]
 800f48e:	2b00      	cmp	r3, #0
 800f490:	d105      	bne.n	800f49e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800f498:	2102      	movs	r1, #2
 800f49a:	6878      	ldr	r0, [r7, #4]
 800f49c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800f49e:	7afb      	ldrb	r3, [r7, #11]
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3710      	adds	r7, #16
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	bd80      	pop	{r7, pc}

0800f4a8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800f4a8:	b580      	push	{r7, lr}
 800f4aa:	b084      	sub	sp, #16
 800f4ac:	af00      	add	r7, sp, #0
 800f4ae:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800f4b0:	2301      	movs	r3, #1
 800f4b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f4be:	69db      	ldr	r3, [r3, #28]
 800f4c0:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800f4c8:	2b04      	cmp	r3, #4
 800f4ca:	d877      	bhi.n	800f5bc <USBH_CDC_Process+0x114>
 800f4cc:	a201      	add	r2, pc, #4	; (adr r2, 800f4d4 <USBH_CDC_Process+0x2c>)
 800f4ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4d2:	bf00      	nop
 800f4d4:	0800f4e9 	.word	0x0800f4e9
 800f4d8:	0800f4ef 	.word	0x0800f4ef
 800f4dc:	0800f51f 	.word	0x0800f51f
 800f4e0:	0800f593 	.word	0x0800f593
 800f4e4:	0800f5a1 	.word	0x0800f5a1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800f4e8:	2300      	movs	r3, #0
 800f4ea:	73fb      	strb	r3, [r7, #15]
      break;
 800f4ec:	e06d      	b.n	800f5ca <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800f4ee:	68bb      	ldr	r3, [r7, #8]
 800f4f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f4f2:	4619      	mov	r1, r3
 800f4f4:	6878      	ldr	r0, [r7, #4]
 800f4f6:	f000 f897 	bl	800f628 <SetLineCoding>
 800f4fa:	4603      	mov	r3, r0
 800f4fc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f4fe:	7bbb      	ldrb	r3, [r7, #14]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d104      	bne.n	800f50e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	2202      	movs	r2, #2
 800f508:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f50c:	e058      	b.n	800f5c0 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800f50e:	7bbb      	ldrb	r3, [r7, #14]
 800f510:	2b01      	cmp	r3, #1
 800f512:	d055      	beq.n	800f5c0 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f514:	68bb      	ldr	r3, [r7, #8]
 800f516:	2204      	movs	r2, #4
 800f518:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f51c:	e050      	b.n	800f5c0 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800f51e:	68bb      	ldr	r3, [r7, #8]
 800f520:	3340      	adds	r3, #64	; 0x40
 800f522:	4619      	mov	r1, r3
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 f860 	bl	800f5ea <GetLineCoding>
 800f52a:	4603      	mov	r3, r0
 800f52c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f52e:	7bbb      	ldrb	r3, [r7, #14]
 800f530:	2b00      	cmp	r3, #0
 800f532:	d126      	bne.n	800f582 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800f534:	68bb      	ldr	r3, [r7, #8]
 800f536:	2200      	movs	r2, #0
 800f538:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f53c:	68bb      	ldr	r3, [r7, #8]
 800f53e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800f542:	68bb      	ldr	r3, [r7, #8]
 800f544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f546:	791b      	ldrb	r3, [r3, #4]
 800f548:	429a      	cmp	r2, r3
 800f54a:	d13b      	bne.n	800f5c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f54c:	68bb      	ldr	r3, [r7, #8]
 800f54e:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800f552:	68bb      	ldr	r3, [r7, #8]
 800f554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f556:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800f558:	429a      	cmp	r2, r3
 800f55a:	d133      	bne.n	800f5c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f55c:	68bb      	ldr	r3, [r7, #8]
 800f55e:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800f562:	68bb      	ldr	r3, [r7, #8]
 800f564:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f566:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800f568:	429a      	cmp	r2, r3
 800f56a:	d12b      	bne.n	800f5c4 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800f56c:	68bb      	ldr	r3, [r7, #8]
 800f56e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800f570:	68bb      	ldr	r3, [r7, #8]
 800f572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f574:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800f576:	429a      	cmp	r2, r3
 800f578:	d124      	bne.n	800f5c4 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800f57a:	6878      	ldr	r0, [r7, #4]
 800f57c:	f000 f958 	bl	800f830 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800f580:	e020      	b.n	800f5c4 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800f582:	7bbb      	ldrb	r3, [r7, #14]
 800f584:	2b01      	cmp	r3, #1
 800f586:	d01d      	beq.n	800f5c4 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	2204      	movs	r2, #4
 800f58c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800f590:	e018      	b.n	800f5c4 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800f592:	6878      	ldr	r0, [r7, #4]
 800f594:	f000 f867 	bl	800f666 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800f598:	6878      	ldr	r0, [r7, #4]
 800f59a:	f000 f8da 	bl	800f752 <CDC_ProcessReception>
      break;
 800f59e:	e014      	b.n	800f5ca <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800f5a0:	2100      	movs	r1, #0
 800f5a2:	6878      	ldr	r0, [r7, #4]
 800f5a4:	f001 f80f 	bl	80105c6 <USBH_ClrFeature>
 800f5a8:	4603      	mov	r3, r0
 800f5aa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800f5ac:	7bbb      	ldrb	r3, [r7, #14]
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d10a      	bne.n	800f5c8 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800f5b2:	68bb      	ldr	r3, [r7, #8]
 800f5b4:	2200      	movs	r2, #0
 800f5b6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800f5ba:	e005      	b.n	800f5c8 <USBH_CDC_Process+0x120>

    default:
      break;
 800f5bc:	bf00      	nop
 800f5be:	e004      	b.n	800f5ca <USBH_CDC_Process+0x122>
      break;
 800f5c0:	bf00      	nop
 800f5c2:	e002      	b.n	800f5ca <USBH_CDC_Process+0x122>
      break;
 800f5c4:	bf00      	nop
 800f5c6:	e000      	b.n	800f5ca <USBH_CDC_Process+0x122>
      break;
 800f5c8:	bf00      	nop

  }

  return status;
 800f5ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f5cc:	4618      	mov	r0, r3
 800f5ce:	3710      	adds	r7, #16
 800f5d0:	46bd      	mov	sp, r7
 800f5d2:	bd80      	pop	{r7, pc}

0800f5d4 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800f5d4:	b480      	push	{r7}
 800f5d6:	b083      	sub	sp, #12
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800f5dc:	2300      	movs	r3, #0
}
 800f5de:	4618      	mov	r0, r3
 800f5e0:	370c      	adds	r7, #12
 800f5e2:	46bd      	mov	sp, r7
 800f5e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5e8:	4770      	bx	lr

0800f5ea <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800f5ea:	b580      	push	{r7, lr}
 800f5ec:	b082      	sub	sp, #8
 800f5ee:	af00      	add	r7, sp, #0
 800f5f0:	6078      	str	r0, [r7, #4]
 800f5f2:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	22a1      	movs	r2, #161	; 0xa1
 800f5f8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	2221      	movs	r2, #33	; 0x21
 800f5fe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f600:	687b      	ldr	r3, [r7, #4]
 800f602:	2200      	movs	r2, #0
 800f604:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2200      	movs	r2, #0
 800f60a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f60c:	687b      	ldr	r3, [r7, #4]
 800f60e:	2207      	movs	r2, #7
 800f610:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f612:	683b      	ldr	r3, [r7, #0]
 800f614:	2207      	movs	r2, #7
 800f616:	4619      	mov	r1, r3
 800f618:	6878      	ldr	r0, [r7, #4]
 800f61a:	f001 fa7b 	bl	8010b14 <USBH_CtlReq>
 800f61e:	4603      	mov	r3, r0
}
 800f620:	4618      	mov	r0, r3
 800f622:	3708      	adds	r7, #8
 800f624:	46bd      	mov	sp, r7
 800f626:	bd80      	pop	{r7, pc}

0800f628 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af00      	add	r7, sp, #0
 800f62e:	6078      	str	r0, [r7, #4]
 800f630:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800f632:	687b      	ldr	r3, [r7, #4]
 800f634:	2221      	movs	r2, #33	; 0x21
 800f636:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800f638:	687b      	ldr	r3, [r7, #4]
 800f63a:	2220      	movs	r2, #32
 800f63c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	2200      	movs	r2, #0
 800f642:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	2200      	movs	r2, #0
 800f648:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	2207      	movs	r2, #7
 800f64e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	2207      	movs	r2, #7
 800f654:	4619      	mov	r1, r3
 800f656:	6878      	ldr	r0, [r7, #4]
 800f658:	f001 fa5c 	bl	8010b14 <USBH_CtlReq>
 800f65c:	4603      	mov	r3, r0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3708      	adds	r7, #8
 800f662:	46bd      	mov	sp, r7
 800f664:	bd80      	pop	{r7, pc}

0800f666 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800f666:	b580      	push	{r7, lr}
 800f668:	b086      	sub	sp, #24
 800f66a:	af02      	add	r7, sp, #8
 800f66c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f66e:	687b      	ldr	r3, [r7, #4]
 800f670:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f674:	69db      	ldr	r3, [r3, #28]
 800f676:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f678:	2300      	movs	r3, #0
 800f67a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800f67c:	68fb      	ldr	r3, [r7, #12]
 800f67e:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 800f682:	2b01      	cmp	r3, #1
 800f684:	d002      	beq.n	800f68c <CDC_ProcessTransmission+0x26>
 800f686:	2b02      	cmp	r3, #2
 800f688:	d023      	beq.n	800f6d2 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800f68a:	e05e      	b.n	800f74a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f690:	68fa      	ldr	r2, [r7, #12]
 800f692:	8b12      	ldrh	r2, [r2, #24]
 800f694:	4293      	cmp	r3, r2
 800f696:	d90b      	bls.n	800f6b0 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	69d9      	ldr	r1, [r3, #28]
 800f69c:	68fb      	ldr	r3, [r7, #12]
 800f69e:	8b1a      	ldrh	r2, [r3, #24]
 800f6a0:	68fb      	ldr	r3, [r7, #12]
 800f6a2:	7b5b      	ldrb	r3, [r3, #13]
 800f6a4:	2001      	movs	r0, #1
 800f6a6:	9000      	str	r0, [sp, #0]
 800f6a8:	6878      	ldr	r0, [r7, #4]
 800f6aa:	f001 fc42 	bl	8010f32 <USBH_BulkSendData>
 800f6ae:	e00b      	b.n	800f6c8 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800f6b8:	b29a      	uxth	r2, r3
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	7b5b      	ldrb	r3, [r3, #13]
 800f6be:	2001      	movs	r0, #1
 800f6c0:	9000      	str	r0, [sp, #0]
 800f6c2:	6878      	ldr	r0, [r7, #4]
 800f6c4:	f001 fc35 	bl	8010f32 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800f6c8:	68fb      	ldr	r3, [r7, #12]
 800f6ca:	2202      	movs	r2, #2
 800f6cc:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f6d0:	e03b      	b.n	800f74a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	7b5b      	ldrb	r3, [r3, #13]
 800f6d6:	4619      	mov	r1, r3
 800f6d8:	6878      	ldr	r0, [r7, #4]
 800f6da:	f002 fd47 	bl	801216c <USBH_LL_GetURBState>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800f6e2:	7afb      	ldrb	r3, [r7, #11]
 800f6e4:	2b01      	cmp	r3, #1
 800f6e6:	d128      	bne.n	800f73a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800f6e8:	68fb      	ldr	r3, [r7, #12]
 800f6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6ec:	68fa      	ldr	r2, [r7, #12]
 800f6ee:	8b12      	ldrh	r2, [r2, #24]
 800f6f0:	4293      	cmp	r3, r2
 800f6f2:	d90e      	bls.n	800f712 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800f6f4:	68fb      	ldr	r3, [r7, #12]
 800f6f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f6f8:	68fa      	ldr	r2, [r7, #12]
 800f6fa:	8b12      	ldrh	r2, [r2, #24]
 800f6fc:	1a9a      	subs	r2, r3, r2
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800f702:	68fb      	ldr	r3, [r7, #12]
 800f704:	69db      	ldr	r3, [r3, #28]
 800f706:	68fa      	ldr	r2, [r7, #12]
 800f708:	8b12      	ldrh	r2, [r2, #24]
 800f70a:	441a      	add	r2, r3
 800f70c:	68fb      	ldr	r3, [r7, #12]
 800f70e:	61da      	str	r2, [r3, #28]
 800f710:	e002      	b.n	800f718 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800f712:	68fb      	ldr	r3, [r7, #12]
 800f714:	2200      	movs	r2, #0
 800f716:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800f718:	68fb      	ldr	r3, [r7, #12]
 800f71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f71c:	2b00      	cmp	r3, #0
 800f71e:	d004      	beq.n	800f72a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	2201      	movs	r2, #1
 800f724:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f728:	e00e      	b.n	800f748 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800f72a:	68fb      	ldr	r3, [r7, #12]
 800f72c:	2200      	movs	r2, #0
 800f72e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 800f732:	6878      	ldr	r0, [r7, #4]
 800f734:	f000 f868 	bl	800f808 <USBH_CDC_TransmitCallback>
      break;
 800f738:	e006      	b.n	800f748 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800f73a:	7afb      	ldrb	r3, [r7, #11]
 800f73c:	2b02      	cmp	r3, #2
 800f73e:	d103      	bne.n	800f748 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2201      	movs	r2, #1
 800f744:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800f748:	bf00      	nop
  }
}
 800f74a:	bf00      	nop
 800f74c:	3710      	adds	r7, #16
 800f74e:	46bd      	mov	sp, r7
 800f750:	bd80      	pop	{r7, pc}

0800f752 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800f752:	b580      	push	{r7, lr}
 800f754:	b086      	sub	sp, #24
 800f756:	af00      	add	r7, sp, #0
 800f758:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800f75a:	687b      	ldr	r3, [r7, #4]
 800f75c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800f760:	69db      	ldr	r3, [r3, #28]
 800f762:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800f764:	2300      	movs	r3, #0
 800f766:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800f768:	697b      	ldr	r3, [r7, #20]
 800f76a:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 800f76e:	2b03      	cmp	r3, #3
 800f770:	d002      	beq.n	800f778 <CDC_ProcessReception+0x26>
 800f772:	2b04      	cmp	r3, #4
 800f774:	d00e      	beq.n	800f794 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800f776:	e043      	b.n	800f800 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800f778:	697b      	ldr	r3, [r7, #20]
 800f77a:	6a19      	ldr	r1, [r3, #32]
 800f77c:	697b      	ldr	r3, [r7, #20]
 800f77e:	8b5a      	ldrh	r2, [r3, #26]
 800f780:	697b      	ldr	r3, [r7, #20]
 800f782:	7b1b      	ldrb	r3, [r3, #12]
 800f784:	6878      	ldr	r0, [r7, #4]
 800f786:	f001 fbf9 	bl	8010f7c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800f78a:	697b      	ldr	r3, [r7, #20]
 800f78c:	2204      	movs	r2, #4
 800f78e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f792:	e035      	b.n	800f800 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800f794:	697b      	ldr	r3, [r7, #20]
 800f796:	7b1b      	ldrb	r3, [r3, #12]
 800f798:	4619      	mov	r1, r3
 800f79a:	6878      	ldr	r0, [r7, #4]
 800f79c:	f002 fce6 	bl	801216c <USBH_LL_GetURBState>
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800f7a4:	7cfb      	ldrb	r3, [r7, #19]
 800f7a6:	2b01      	cmp	r3, #1
 800f7a8:	d129      	bne.n	800f7fe <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800f7aa:	697b      	ldr	r3, [r7, #20]
 800f7ac:	7b1b      	ldrb	r3, [r3, #12]
 800f7ae:	4619      	mov	r1, r3
 800f7b0:	6878      	ldr	r0, [r7, #4]
 800f7b2:	f002 fc49 	bl	8012048 <USBH_LL_GetLastXferSize>
 800f7b6:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800f7b8:	697b      	ldr	r3, [r7, #20]
 800f7ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f7bc:	68fa      	ldr	r2, [r7, #12]
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d016      	beq.n	800f7f0 <CDC_ProcessReception+0x9e>
 800f7c2:	697b      	ldr	r3, [r7, #20]
 800f7c4:	8b5b      	ldrh	r3, [r3, #26]
 800f7c6:	461a      	mov	r2, r3
 800f7c8:	68fb      	ldr	r3, [r7, #12]
 800f7ca:	4293      	cmp	r3, r2
 800f7cc:	d910      	bls.n	800f7f0 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800f7ce:	697b      	ldr	r3, [r7, #20]
 800f7d0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	1ad2      	subs	r2, r2, r3
 800f7d6:	697b      	ldr	r3, [r7, #20]
 800f7d8:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800f7da:	697b      	ldr	r3, [r7, #20]
 800f7dc:	6a1a      	ldr	r2, [r3, #32]
 800f7de:	68fb      	ldr	r3, [r7, #12]
 800f7e0:	441a      	add	r2, r3
 800f7e2:	697b      	ldr	r3, [r7, #20]
 800f7e4:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800f7e6:	697b      	ldr	r3, [r7, #20]
 800f7e8:	2203      	movs	r2, #3
 800f7ea:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800f7ee:	e006      	b.n	800f7fe <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800f7f0:	697b      	ldr	r3, [r7, #20]
 800f7f2:	2200      	movs	r2, #0
 800f7f4:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800f7f8:	6878      	ldr	r0, [r7, #4]
 800f7fa:	f000 f80f 	bl	800f81c <USBH_CDC_ReceiveCallback>
      break;
 800f7fe:	bf00      	nop
  }
}
 800f800:	bf00      	nop
 800f802:	3718      	adds	r7, #24
 800f804:	46bd      	mov	sp, r7
 800f806:	bd80      	pop	{r7, pc}

0800f808 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800f808:	b480      	push	{r7}
 800f80a:	b083      	sub	sp, #12
 800f80c:	af00      	add	r7, sp, #0
 800f80e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f810:	bf00      	nop
 800f812:	370c      	adds	r7, #12
 800f814:	46bd      	mov	sp, r7
 800f816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f81a:	4770      	bx	lr

0800f81c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800f81c:	b480      	push	{r7}
 800f81e:	b083      	sub	sp, #12
 800f820:	af00      	add	r7, sp, #0
 800f822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f824:	bf00      	nop
 800f826:	370c      	adds	r7, #12
 800f828:	46bd      	mov	sp, r7
 800f82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82e:	4770      	bx	lr

0800f830 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800f830:	b480      	push	{r7}
 800f832:	b083      	sub	sp, #12
 800f834:	af00      	add	r7, sp, #0
 800f836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800f838:	bf00      	nop
 800f83a:	370c      	adds	r7, #12
 800f83c:	46bd      	mov	sp, r7
 800f83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f842:	4770      	bx	lr

0800f844 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800f844:	b580      	push	{r7, lr}
 800f846:	b084      	sub	sp, #16
 800f848:	af00      	add	r7, sp, #0
 800f84a:	60f8      	str	r0, [r7, #12]
 800f84c:	60b9      	str	r1, [r7, #8]
 800f84e:	4613      	mov	r3, r2
 800f850:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800f852:	68fb      	ldr	r3, [r7, #12]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d101      	bne.n	800f85c <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800f858:	2302      	movs	r3, #2
 800f85a:	e029      	b.n	800f8b0 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	79fa      	ldrb	r2, [r7, #7]
 800f860:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800f864:	68fb      	ldr	r3, [r7, #12]
 800f866:	2200      	movs	r2, #0
 800f868:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 800f86c:	68fb      	ldr	r3, [r7, #12]
 800f86e:	2200      	movs	r2, #0
 800f870:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800f874:	68f8      	ldr	r0, [r7, #12]
 800f876:	f000 f81f 	bl	800f8b8 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800f87a:	68fb      	ldr	r3, [r7, #12]
 800f87c:	2200      	movs	r2, #0
 800f87e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	2200      	movs	r2, #0
 800f886:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	2200      	movs	r2, #0
 800f88e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800f89a:	68bb      	ldr	r3, [r7, #8]
 800f89c:	2b00      	cmp	r3, #0
 800f89e:	d003      	beq.n	800f8a8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	68ba      	ldr	r2, [r7, #8]
 800f8a4:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f002 fb19 	bl	8011ee0 <USBH_LL_Init>

  return USBH_OK;
 800f8ae:	2300      	movs	r3, #0
}
 800f8b0:	4618      	mov	r0, r3
 800f8b2:	3710      	adds	r7, #16
 800f8b4:	46bd      	mov	sp, r7
 800f8b6:	bd80      	pop	{r7, pc}

0800f8b8 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800f8b8:	b580      	push	{r7, lr}
 800f8ba:	b084      	sub	sp, #16
 800f8bc:	af00      	add	r7, sp, #0
 800f8be:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f8c4:	2300      	movs	r3, #0
 800f8c6:	60fb      	str	r3, [r7, #12]
 800f8c8:	e009      	b.n	800f8de <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800f8ca:	687a      	ldr	r2, [r7, #4]
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	33e0      	adds	r3, #224	; 0xe0
 800f8d0:	009b      	lsls	r3, r3, #2
 800f8d2:	4413      	add	r3, r2
 800f8d4:	2200      	movs	r2, #0
 800f8d6:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	3301      	adds	r3, #1
 800f8dc:	60fb      	str	r3, [r7, #12]
 800f8de:	68fb      	ldr	r3, [r7, #12]
 800f8e0:	2b0f      	cmp	r3, #15
 800f8e2:	d9f2      	bls.n	800f8ca <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	60fb      	str	r3, [r7, #12]
 800f8e8:	e009      	b.n	800f8fe <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800f8ea:	687a      	ldr	r2, [r7, #4]
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	4413      	add	r3, r2
 800f8f0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	3301      	adds	r3, #1
 800f8fc:	60fb      	str	r3, [r7, #12]
 800f8fe:	68fb      	ldr	r3, [r7, #12]
 800f900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f904:	d3f1      	bcc.n	800f8ea <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	2200      	movs	r2, #0
 800f90a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	2200      	movs	r2, #0
 800f910:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	2201      	movs	r2, #1
 800f916:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	2200      	movs	r2, #0
 800f91c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 800f920:	687b      	ldr	r3, [r7, #4]
 800f922:	2201      	movs	r2, #1
 800f924:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	2240      	movs	r2, #64	; 0x40
 800f92a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800f92c:	687b      	ldr	r3, [r7, #4]
 800f92e:	2200      	movs	r2, #0
 800f930:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	2200      	movs	r2, #0
 800f936:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	2201      	movs	r2, #1
 800f93e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	2200      	movs	r2, #0
 800f946:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	2200      	movs	r2, #0
 800f94e:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800f952:	687b      	ldr	r3, [r7, #4]
 800f954:	331c      	adds	r3, #28
 800f956:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f95a:	2100      	movs	r1, #0
 800f95c:	4618      	mov	r0, r3
 800f95e:	f002 fced 	bl	801233c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800f968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f96c:	2100      	movs	r1, #0
 800f96e:	4618      	mov	r0, r3
 800f970:	f002 fce4 	bl	801233c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f203 3326 	addw	r3, r3, #806	; 0x326
 800f97a:	2212      	movs	r2, #18
 800f97c:	2100      	movs	r1, #0
 800f97e:	4618      	mov	r0, r3
 800f980:	f002 fcdc 	bl	801233c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800f98a:	223e      	movs	r2, #62	; 0x3e
 800f98c:	2100      	movs	r1, #0
 800f98e:	4618      	mov	r0, r3
 800f990:	f002 fcd4 	bl	801233c <memset>

  return USBH_OK;
 800f994:	2300      	movs	r3, #0
}
 800f996:	4618      	mov	r0, r3
 800f998:	3710      	adds	r7, #16
 800f99a:	46bd      	mov	sp, r7
 800f99c:	bd80      	pop	{r7, pc}

0800f99e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800f99e:	b480      	push	{r7}
 800f9a0:	b085      	sub	sp, #20
 800f9a2:	af00      	add	r7, sp, #0
 800f9a4:	6078      	str	r0, [r7, #4]
 800f9a6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800f9a8:	2300      	movs	r3, #0
 800f9aa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800f9ac:	683b      	ldr	r3, [r7, #0]
 800f9ae:	2b00      	cmp	r3, #0
 800f9b0:	d016      	beq.n	800f9e0 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800f9b2:	687b      	ldr	r3, [r7, #4]
 800f9b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f9b8:	2b00      	cmp	r3, #0
 800f9ba:	d10e      	bne.n	800f9da <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800f9bc:	687b      	ldr	r3, [r7, #4]
 800f9be:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800f9c2:	1c59      	adds	r1, r3, #1
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 800f9ca:	687a      	ldr	r2, [r7, #4]
 800f9cc:	33de      	adds	r3, #222	; 0xde
 800f9ce:	6839      	ldr	r1, [r7, #0]
 800f9d0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800f9d4:	2300      	movs	r3, #0
 800f9d6:	73fb      	strb	r3, [r7, #15]
 800f9d8:	e004      	b.n	800f9e4 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800f9da:	2302      	movs	r3, #2
 800f9dc:	73fb      	strb	r3, [r7, #15]
 800f9de:	e001      	b.n	800f9e4 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800f9e0:	2302      	movs	r3, #2
 800f9e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800f9e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9e6:	4618      	mov	r0, r3
 800f9e8:	3714      	adds	r7, #20
 800f9ea:	46bd      	mov	sp, r7
 800f9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9f0:	4770      	bx	lr

0800f9f2 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800f9f2:	b480      	push	{r7}
 800f9f4:	b085      	sub	sp, #20
 800f9f6:	af00      	add	r7, sp, #0
 800f9f8:	6078      	str	r0, [r7, #4]
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800f9fe:	2300      	movs	r3, #0
 800fa00:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800fa02:	687b      	ldr	r3, [r7, #4]
 800fa04:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800fa08:	78fa      	ldrb	r2, [r7, #3]
 800fa0a:	429a      	cmp	r2, r3
 800fa0c:	d204      	bcs.n	800fa18 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	78fa      	ldrb	r2, [r7, #3]
 800fa12:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800fa16:	e001      	b.n	800fa1c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800fa18:	2302      	movs	r3, #2
 800fa1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800fa1c:	7bfb      	ldrb	r3, [r7, #15]
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3714      	adds	r7, #20
 800fa22:	46bd      	mov	sp, r7
 800fa24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa28:	4770      	bx	lr

0800fa2a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800fa2a:	b480      	push	{r7}
 800fa2c:	b087      	sub	sp, #28
 800fa2e:	af00      	add	r7, sp, #0
 800fa30:	6078      	str	r0, [r7, #4]
 800fa32:	4608      	mov	r0, r1
 800fa34:	4611      	mov	r1, r2
 800fa36:	461a      	mov	r2, r3
 800fa38:	4603      	mov	r3, r0
 800fa3a:	70fb      	strb	r3, [r7, #3]
 800fa3c:	460b      	mov	r3, r1
 800fa3e:	70bb      	strb	r3, [r7, #2]
 800fa40:	4613      	mov	r3, r2
 800fa42:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800fa44:	2300      	movs	r3, #0
 800fa46:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800fa48:	2300      	movs	r3, #0
 800fa4a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800fa52:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800fa54:	e025      	b.n	800faa2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800fa56:	7dfb      	ldrb	r3, [r7, #23]
 800fa58:	221a      	movs	r2, #26
 800fa5a:	fb02 f303 	mul.w	r3, r2, r3
 800fa5e:	3308      	adds	r3, #8
 800fa60:	68fa      	ldr	r2, [r7, #12]
 800fa62:	4413      	add	r3, r2
 800fa64:	3302      	adds	r3, #2
 800fa66:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fa68:	693b      	ldr	r3, [r7, #16]
 800fa6a:	795b      	ldrb	r3, [r3, #5]
 800fa6c:	78fa      	ldrb	r2, [r7, #3]
 800fa6e:	429a      	cmp	r2, r3
 800fa70:	d002      	beq.n	800fa78 <USBH_FindInterface+0x4e>
 800fa72:	78fb      	ldrb	r3, [r7, #3]
 800fa74:	2bff      	cmp	r3, #255	; 0xff
 800fa76:	d111      	bne.n	800fa9c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fa78:	693b      	ldr	r3, [r7, #16]
 800fa7a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800fa7c:	78ba      	ldrb	r2, [r7, #2]
 800fa7e:	429a      	cmp	r2, r3
 800fa80:	d002      	beq.n	800fa88 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fa82:	78bb      	ldrb	r3, [r7, #2]
 800fa84:	2bff      	cmp	r3, #255	; 0xff
 800fa86:	d109      	bne.n	800fa9c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fa88:	693b      	ldr	r3, [r7, #16]
 800fa8a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800fa8c:	787a      	ldrb	r2, [r7, #1]
 800fa8e:	429a      	cmp	r2, r3
 800fa90:	d002      	beq.n	800fa98 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800fa92:	787b      	ldrb	r3, [r7, #1]
 800fa94:	2bff      	cmp	r3, #255	; 0xff
 800fa96:	d101      	bne.n	800fa9c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800fa98:	7dfb      	ldrb	r3, [r7, #23]
 800fa9a:	e006      	b.n	800faaa <USBH_FindInterface+0x80>
    }
    if_ix++;
 800fa9c:	7dfb      	ldrb	r3, [r7, #23]
 800fa9e:	3301      	adds	r3, #1
 800faa0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800faa2:	7dfb      	ldrb	r3, [r7, #23]
 800faa4:	2b01      	cmp	r3, #1
 800faa6:	d9d6      	bls.n	800fa56 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800faa8:	23ff      	movs	r3, #255	; 0xff
}
 800faaa:	4618      	mov	r0, r3
 800faac:	371c      	adds	r7, #28
 800faae:	46bd      	mov	sp, r7
 800fab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fab4:	4770      	bx	lr

0800fab6 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800fab6:	b580      	push	{r7, lr}
 800fab8:	b082      	sub	sp, #8
 800faba:	af00      	add	r7, sp, #0
 800fabc:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800fabe:	6878      	ldr	r0, [r7, #4]
 800fac0:	f002 fa4a 	bl	8011f58 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800fac4:	2101      	movs	r1, #1
 800fac6:	6878      	ldr	r0, [r7, #4]
 800fac8:	f002 fb63 	bl	8012192 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800facc:	2300      	movs	r3, #0
}
 800face:	4618      	mov	r0, r3
 800fad0:	3708      	adds	r7, #8
 800fad2:	46bd      	mov	sp, r7
 800fad4:	bd80      	pop	{r7, pc}
	...

0800fad8 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800fad8:	b580      	push	{r7, lr}
 800fada:	b088      	sub	sp, #32
 800fadc:	af04      	add	r7, sp, #16
 800fade:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800fae0:	2302      	movs	r3, #2
 800fae2:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800fae4:	2300      	movs	r3, #0
 800fae6:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800fae8:	687b      	ldr	r3, [r7, #4]
 800faea:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 800faee:	b2db      	uxtb	r3, r3
 800faf0:	2b01      	cmp	r3, #1
 800faf2:	d102      	bne.n	800fafa <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800faf4:	687b      	ldr	r3, [r7, #4]
 800faf6:	2203      	movs	r2, #3
 800faf8:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	781b      	ldrb	r3, [r3, #0]
 800fafe:	b2db      	uxtb	r3, r3
 800fb00:	2b0b      	cmp	r3, #11
 800fb02:	f200 81be 	bhi.w	800fe82 <USBH_Process+0x3aa>
 800fb06:	a201      	add	r2, pc, #4	; (adr r2, 800fb0c <USBH_Process+0x34>)
 800fb08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0c:	0800fb3d 	.word	0x0800fb3d
 800fb10:	0800fb6f 	.word	0x0800fb6f
 800fb14:	0800fbd7 	.word	0x0800fbd7
 800fb18:	0800fe1d 	.word	0x0800fe1d
 800fb1c:	0800fe83 	.word	0x0800fe83
 800fb20:	0800fc7b 	.word	0x0800fc7b
 800fb24:	0800fdc3 	.word	0x0800fdc3
 800fb28:	0800fcb1 	.word	0x0800fcb1
 800fb2c:	0800fcd1 	.word	0x0800fcd1
 800fb30:	0800fcf1 	.word	0x0800fcf1
 800fb34:	0800fd35 	.word	0x0800fd35
 800fb38:	0800fe05 	.word	0x0800fe05
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800fb3c:	687b      	ldr	r3, [r7, #4]
 800fb3e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	f000 819e 	beq.w	800fe86 <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800fb50:	20c8      	movs	r0, #200	; 0xc8
 800fb52:	f002 fb65 	bl	8012220 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f002 fa5b 	bl	8012012 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	2200      	movs	r2, #0
 800fb60:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 800fb64:	687b      	ldr	r3, [r7, #4]
 800fb66:	2200      	movs	r2, #0
 800fb68:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fb6c:	e18b      	b.n	800fe86 <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 800fb74:	2b01      	cmp	r3, #1
 800fb76:	d107      	bne.n	800fb88 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800fb78:	687b      	ldr	r3, [r7, #4]
 800fb7a:	2200      	movs	r2, #0
 800fb7c:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	2202      	movs	r2, #2
 800fb84:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fb86:	e18d      	b.n	800fea4 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800fb88:	687b      	ldr	r3, [r7, #4]
 800fb8a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fb8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fb92:	d914      	bls.n	800fbbe <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fb9a:	3301      	adds	r3, #1
 800fb9c:	b2da      	uxtb	r2, r3
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 800fba4:	687b      	ldr	r3, [r7, #4]
 800fba6:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800fbaa:	2b03      	cmp	r3, #3
 800fbac:	d903      	bls.n	800fbb6 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800fbae:	687b      	ldr	r3, [r7, #4]
 800fbb0:	220d      	movs	r2, #13
 800fbb2:	701a      	strb	r2, [r3, #0]
      break;
 800fbb4:	e176      	b.n	800fea4 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2200      	movs	r2, #0
 800fbba:	701a      	strb	r2, [r3, #0]
      break;
 800fbbc:	e172      	b.n	800fea4 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800fbc4:	f103 020a 	add.w	r2, r3, #10
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 800fbce:	200a      	movs	r0, #10
 800fbd0:	f002 fb26 	bl	8012220 <USBH_Delay>
      break;
 800fbd4:	e166      	b.n	800fea4 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fbdc:	2b00      	cmp	r3, #0
 800fbde:	d005      	beq.n	800fbec <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fbe6:	2104      	movs	r1, #4
 800fbe8:	6878      	ldr	r0, [r7, #4]
 800fbea:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800fbec:	2064      	movs	r0, #100	; 0x64
 800fbee:	f002 fb17 	bl	8012220 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800fbf2:	6878      	ldr	r0, [r7, #4]
 800fbf4:	f002 f9e6 	bl	8011fc4 <USBH_LL_GetSpeed>
 800fbf8:	4603      	mov	r3, r0
 800fbfa:	461a      	mov	r2, r3
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	2205      	movs	r2, #5
 800fc06:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800fc08:	2100      	movs	r1, #0
 800fc0a:	6878      	ldr	r0, [r7, #4]
 800fc0c:	f001 fa03 	bl	8011016 <USBH_AllocPipe>
 800fc10:	4603      	mov	r3, r0
 800fc12:	461a      	mov	r2, r3
 800fc14:	687b      	ldr	r3, [r7, #4]
 800fc16:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800fc18:	2180      	movs	r1, #128	; 0x80
 800fc1a:	6878      	ldr	r0, [r7, #4]
 800fc1c:	f001 f9fb 	bl	8011016 <USBH_AllocPipe>
 800fc20:	4603      	mov	r3, r0
 800fc22:	461a      	mov	r2, r3
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	7919      	ldrb	r1, [r3, #4]
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fc38:	687a      	ldr	r2, [r7, #4]
 800fc3a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800fc3c:	b292      	uxth	r2, r2
 800fc3e:	9202      	str	r2, [sp, #8]
 800fc40:	2200      	movs	r2, #0
 800fc42:	9201      	str	r2, [sp, #4]
 800fc44:	9300      	str	r3, [sp, #0]
 800fc46:	4603      	mov	r3, r0
 800fc48:	2280      	movs	r2, #128	; 0x80
 800fc4a:	6878      	ldr	r0, [r7, #4]
 800fc4c:	f001 f9b4 	bl	8010fb8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	7959      	ldrb	r1, [r3, #5]
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800fc5a:	687b      	ldr	r3, [r7, #4]
 800fc5c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800fc60:	687a      	ldr	r2, [r7, #4]
 800fc62:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800fc64:	b292      	uxth	r2, r2
 800fc66:	9202      	str	r2, [sp, #8]
 800fc68:	2200      	movs	r2, #0
 800fc6a:	9201      	str	r2, [sp, #4]
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	4603      	mov	r3, r0
 800fc70:	2200      	movs	r2, #0
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f001 f9a0 	bl	8010fb8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fc78:	e114      	b.n	800fea4 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800fc7a:	6878      	ldr	r0, [r7, #4]
 800fc7c:	f000 f918 	bl	800feb0 <USBH_HandleEnum>
 800fc80:	4603      	mov	r3, r0
 800fc82:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800fc84:	7bbb      	ldrb	r3, [r7, #14]
 800fc86:	b2db      	uxtb	r3, r3
 800fc88:	2b00      	cmp	r3, #0
 800fc8a:	f040 80fe 	bne.w	800fe8a <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	2200      	movs	r2, #0
 800fc92:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 800fc9c:	2b01      	cmp	r3, #1
 800fc9e:	d103      	bne.n	800fca8 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800fca0:	687b      	ldr	r3, [r7, #4]
 800fca2:	2208      	movs	r2, #8
 800fca4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800fca6:	e0f0      	b.n	800fe8a <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 800fca8:	687b      	ldr	r3, [r7, #4]
 800fcaa:	2207      	movs	r2, #7
 800fcac:	701a      	strb	r2, [r3, #0]
      break;
 800fcae:	e0ec      	b.n	800fe8a <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fcb6:	2b00      	cmp	r3, #0
 800fcb8:	f000 80e9 	beq.w	800fe8e <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fcc2:	2101      	movs	r1, #1
 800fcc4:	6878      	ldr	r0, [r7, #4]
 800fcc6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2208      	movs	r2, #8
 800fccc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800fcce:	e0de      	b.n	800fe8e <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800fcd6:	b29b      	uxth	r3, r3
 800fcd8:	4619      	mov	r1, r3
 800fcda:	6878      	ldr	r0, [r7, #4]
 800fcdc:	f000 fc2c 	bl	8010538 <USBH_SetCfg>
 800fce0:	4603      	mov	r3, r0
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	f040 80d5 	bne.w	800fe92 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2209      	movs	r2, #9
 800fcec:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fcee:	e0d0      	b.n	800fe92 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800fcf6:	f003 0320 	and.w	r3, r3, #32
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d016      	beq.n	800fd2c <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800fcfe:	2101      	movs	r1, #1
 800fd00:	6878      	ldr	r0, [r7, #4]
 800fd02:	f000 fc3c 	bl	801057e <USBH_SetFeature>
 800fd06:	4603      	mov	r3, r0
 800fd08:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fd0a:	7bbb      	ldrb	r3, [r7, #14]
 800fd0c:	b2db      	uxtb	r3, r3
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d103      	bne.n	800fd1a <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	220a      	movs	r2, #10
 800fd16:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fd18:	e0bd      	b.n	800fe96 <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 800fd1a:	7bbb      	ldrb	r3, [r7, #14]
 800fd1c:	b2db      	uxtb	r3, r3
 800fd1e:	2b03      	cmp	r3, #3
 800fd20:	f040 80b9 	bne.w	800fe96 <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	220a      	movs	r2, #10
 800fd28:	701a      	strb	r2, [r3, #0]
      break;
 800fd2a:	e0b4      	b.n	800fe96 <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	220a      	movs	r2, #10
 800fd30:	701a      	strb	r2, [r3, #0]
      break;
 800fd32:	e0b0      	b.n	800fe96 <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	f000 80ad 	beq.w	800fe9a <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	2200      	movs	r2, #0
 800fd44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fd48:	2300      	movs	r3, #0
 800fd4a:	73fb      	strb	r3, [r7, #15]
 800fd4c:	e016      	b.n	800fd7c <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800fd4e:	7bfa      	ldrb	r2, [r7, #15]
 800fd50:	687b      	ldr	r3, [r7, #4]
 800fd52:	32de      	adds	r2, #222	; 0xde
 800fd54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fd58:	791a      	ldrb	r2, [r3, #4]
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800fd60:	429a      	cmp	r2, r3
 800fd62:	d108      	bne.n	800fd76 <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 800fd64:	7bfa      	ldrb	r2, [r7, #15]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	32de      	adds	r2, #222	; 0xde
 800fd6a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 800fd74:	e005      	b.n	800fd82 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800fd76:	7bfb      	ldrb	r3, [r7, #15]
 800fd78:	3301      	adds	r3, #1
 800fd7a:	73fb      	strb	r3, [r7, #15]
 800fd7c:	7bfb      	ldrb	r3, [r7, #15]
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d0e5      	beq.n	800fd4e <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fd88:	2b00      	cmp	r3, #0
 800fd8a:	d016      	beq.n	800fdba <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fd92:	689b      	ldr	r3, [r3, #8]
 800fd94:	6878      	ldr	r0, [r7, #4]
 800fd96:	4798      	blx	r3
 800fd98:	4603      	mov	r3, r0
 800fd9a:	2b00      	cmp	r3, #0
 800fd9c:	d109      	bne.n	800fdb2 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	2206      	movs	r2, #6
 800fda2:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fdaa:	2103      	movs	r1, #3
 800fdac:	6878      	ldr	r0, [r7, #4]
 800fdae:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fdb0:	e073      	b.n	800fe9a <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	220d      	movs	r2, #13
 800fdb6:	701a      	strb	r2, [r3, #0]
      break;
 800fdb8:	e06f      	b.n	800fe9a <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	220d      	movs	r2, #13
 800fdbe:	701a      	strb	r2, [r3, #0]
      break;
 800fdc0:	e06b      	b.n	800fe9a <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d017      	beq.n	800fdfc <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fdd2:	691b      	ldr	r3, [r3, #16]
 800fdd4:	6878      	ldr	r0, [r7, #4]
 800fdd6:	4798      	blx	r3
 800fdd8:	4603      	mov	r3, r0
 800fdda:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800fddc:	7bbb      	ldrb	r3, [r7, #14]
 800fdde:	b2db      	uxtb	r3, r3
 800fde0:	2b00      	cmp	r3, #0
 800fde2:	d103      	bne.n	800fdec <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	220b      	movs	r2, #11
 800fde8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fdea:	e058      	b.n	800fe9e <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 800fdec:	7bbb      	ldrb	r3, [r7, #14]
 800fdee:	b2db      	uxtb	r3, r3
 800fdf0:	2b02      	cmp	r3, #2
 800fdf2:	d154      	bne.n	800fe9e <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800fdf4:	687b      	ldr	r3, [r7, #4]
 800fdf6:	220d      	movs	r2, #13
 800fdf8:	701a      	strb	r2, [r3, #0]
      break;
 800fdfa:	e050      	b.n	800fe9e <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	220d      	movs	r2, #13
 800fe00:	701a      	strb	r2, [r3, #0]
      break;
 800fe02:	e04c      	b.n	800fe9e <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d049      	beq.n	800fea2 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe14:	695b      	ldr	r3, [r3, #20]
 800fe16:	6878      	ldr	r0, [r7, #4]
 800fe18:	4798      	blx	r3
      }
      break;
 800fe1a:	e042      	b.n	800fea2 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	2200      	movs	r2, #0
 800fe20:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800fe24:	6878      	ldr	r0, [r7, #4]
 800fe26:	f7ff fd47 	bl	800f8b8 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800fe2a:	687b      	ldr	r3, [r7, #4]
 800fe2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe30:	2b00      	cmp	r3, #0
 800fe32:	d009      	beq.n	800fe48 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800fe34:	687b      	ldr	r3, [r7, #4]
 800fe36:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800fe3a:	68db      	ldr	r3, [r3, #12]
 800fe3c:	6878      	ldr	r0, [r7, #4]
 800fe3e:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	2200      	movs	r2, #0
 800fe44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d005      	beq.n	800fe5e <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800fe52:	687b      	ldr	r3, [r7, #4]
 800fe54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800fe58:	2105      	movs	r1, #5
 800fe5a:	6878      	ldr	r0, [r7, #4]
 800fe5c:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800fe5e:	687b      	ldr	r3, [r7, #4]
 800fe60:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 800fe64:	b2db      	uxtb	r3, r3
 800fe66:	2b01      	cmp	r3, #1
 800fe68:	d107      	bne.n	800fe7a <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 800fe6a:	687b      	ldr	r3, [r7, #4]
 800fe6c:	2200      	movs	r2, #0
 800fe6e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800fe72:	6878      	ldr	r0, [r7, #4]
 800fe74:	f7ff fe1f 	bl	800fab6 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800fe78:	e014      	b.n	800fea4 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 800fe7a:	6878      	ldr	r0, [r7, #4]
 800fe7c:	f002 f86c 	bl	8011f58 <USBH_LL_Start>
      break;
 800fe80:	e010      	b.n	800fea4 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 800fe82:	bf00      	nop
 800fe84:	e00e      	b.n	800fea4 <USBH_Process+0x3cc>
      break;
 800fe86:	bf00      	nop
 800fe88:	e00c      	b.n	800fea4 <USBH_Process+0x3cc>
      break;
 800fe8a:	bf00      	nop
 800fe8c:	e00a      	b.n	800fea4 <USBH_Process+0x3cc>
    break;
 800fe8e:	bf00      	nop
 800fe90:	e008      	b.n	800fea4 <USBH_Process+0x3cc>
      break;
 800fe92:	bf00      	nop
 800fe94:	e006      	b.n	800fea4 <USBH_Process+0x3cc>
      break;
 800fe96:	bf00      	nop
 800fe98:	e004      	b.n	800fea4 <USBH_Process+0x3cc>
      break;
 800fe9a:	bf00      	nop
 800fe9c:	e002      	b.n	800fea4 <USBH_Process+0x3cc>
      break;
 800fe9e:	bf00      	nop
 800fea0:	e000      	b.n	800fea4 <USBH_Process+0x3cc>
      break;
 800fea2:	bf00      	nop
  }
  return USBH_OK;
 800fea4:	2300      	movs	r3, #0
}
 800fea6:	4618      	mov	r0, r3
 800fea8:	3710      	adds	r7, #16
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop

0800feb0 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b088      	sub	sp, #32
 800feb4:	af04      	add	r7, sp, #16
 800feb6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800feb8:	2301      	movs	r3, #1
 800feba:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800febc:	2301      	movs	r3, #1
 800febe:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	785b      	ldrb	r3, [r3, #1]
 800fec4:	2b07      	cmp	r3, #7
 800fec6:	f200 81c1 	bhi.w	801024c <USBH_HandleEnum+0x39c>
 800feca:	a201      	add	r2, pc, #4	; (adr r2, 800fed0 <USBH_HandleEnum+0x20>)
 800fecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fed0:	0800fef1 	.word	0x0800fef1
 800fed4:	0800ffaf 	.word	0x0800ffaf
 800fed8:	08010019 	.word	0x08010019
 800fedc:	080100a7 	.word	0x080100a7
 800fee0:	08010111 	.word	0x08010111
 800fee4:	08010181 	.word	0x08010181
 800fee8:	080101c7 	.word	0x080101c7
 800feec:	0801020d 	.word	0x0801020d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800fef0:	2108      	movs	r1, #8
 800fef2:	6878      	ldr	r0, [r7, #4]
 800fef4:	f000 fa50 	bl	8010398 <USBH_Get_DevDesc>
 800fef8:	4603      	mov	r3, r0
 800fefa:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800fefc:	7bbb      	ldrb	r3, [r7, #14]
 800fefe:	2b00      	cmp	r3, #0
 800ff00:	d130      	bne.n	800ff64 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800ff02:	687b      	ldr	r3, [r7, #4]
 800ff04:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 800ff08:	687b      	ldr	r3, [r7, #4]
 800ff0a:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	2201      	movs	r2, #1
 800ff10:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	7919      	ldrb	r1, [r3, #4]
 800ff16:	687b      	ldr	r3, [r7, #4]
 800ff18:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff22:	687a      	ldr	r2, [r7, #4]
 800ff24:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800ff26:	b292      	uxth	r2, r2
 800ff28:	9202      	str	r2, [sp, #8]
 800ff2a:	2200      	movs	r2, #0
 800ff2c:	9201      	str	r2, [sp, #4]
 800ff2e:	9300      	str	r3, [sp, #0]
 800ff30:	4603      	mov	r3, r0
 800ff32:	2280      	movs	r2, #128	; 0x80
 800ff34:	6878      	ldr	r0, [r7, #4]
 800ff36:	f001 f83f 	bl	8010fb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	7959      	ldrb	r1, [r3, #5]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ff4a:	687a      	ldr	r2, [r7, #4]
 800ff4c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800ff4e:	b292      	uxth	r2, r2
 800ff50:	9202      	str	r2, [sp, #8]
 800ff52:	2200      	movs	r2, #0
 800ff54:	9201      	str	r2, [sp, #4]
 800ff56:	9300      	str	r3, [sp, #0]
 800ff58:	4603      	mov	r3, r0
 800ff5a:	2200      	movs	r2, #0
 800ff5c:	6878      	ldr	r0, [r7, #4]
 800ff5e:	f001 f82b 	bl	8010fb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800ff62:	e175      	b.n	8010250 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ff64:	7bbb      	ldrb	r3, [r7, #14]
 800ff66:	2b03      	cmp	r3, #3
 800ff68:	f040 8172 	bne.w	8010250 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ff72:	3301      	adds	r3, #1
 800ff74:	b2da      	uxtb	r2, r3
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ff82:	2b03      	cmp	r3, #3
 800ff84:	d903      	bls.n	800ff8e <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	220d      	movs	r2, #13
 800ff8a:	701a      	strb	r2, [r3, #0]
      break;
 800ff8c:	e160      	b.n	8010250 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ff8e:	687b      	ldr	r3, [r7, #4]
 800ff90:	795b      	ldrb	r3, [r3, #5]
 800ff92:	4619      	mov	r1, r3
 800ff94:	6878      	ldr	r0, [r7, #4]
 800ff96:	f001 f85f 	bl	8011058 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	791b      	ldrb	r3, [r3, #4]
 800ff9e:	4619      	mov	r1, r3
 800ffa0:	6878      	ldr	r0, [r7, #4]
 800ffa2:	f001 f859 	bl	8011058 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ffa6:	687b      	ldr	r3, [r7, #4]
 800ffa8:	2200      	movs	r2, #0
 800ffaa:	701a      	strb	r2, [r3, #0]
      break;
 800ffac:	e150      	b.n	8010250 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ffae:	2112      	movs	r1, #18
 800ffb0:	6878      	ldr	r0, [r7, #4]
 800ffb2:	f000 f9f1 	bl	8010398 <USBH_Get_DevDesc>
 800ffb6:	4603      	mov	r3, r0
 800ffb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ffba:	7bbb      	ldrb	r3, [r7, #14]
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d103      	bne.n	800ffc8 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2202      	movs	r2, #2
 800ffc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ffc6:	e145      	b.n	8010254 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ffc8:	7bbb      	ldrb	r3, [r7, #14]
 800ffca:	2b03      	cmp	r3, #3
 800ffcc:	f040 8142 	bne.w	8010254 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	b2da      	uxtb	r2, r3
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800ffe0:	687b      	ldr	r3, [r7, #4]
 800ffe2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 800ffe6:	2b03      	cmp	r3, #3
 800ffe8:	d903      	bls.n	800fff2 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	220d      	movs	r2, #13
 800ffee:	701a      	strb	r2, [r3, #0]
      break;
 800fff0:	e130      	b.n	8010254 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	795b      	ldrb	r3, [r3, #5]
 800fff6:	4619      	mov	r1, r3
 800fff8:	6878      	ldr	r0, [r7, #4]
 800fffa:	f001 f82d 	bl	8011058 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	791b      	ldrb	r3, [r3, #4]
 8010002:	4619      	mov	r1, r3
 8010004:	6878      	ldr	r0, [r7, #4]
 8010006:	f001 f827 	bl	8011058 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 801000a:	687b      	ldr	r3, [r7, #4]
 801000c:	2200      	movs	r2, #0
 801000e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	2200      	movs	r2, #0
 8010014:	701a      	strb	r2, [r3, #0]
      break;
 8010016:	e11d      	b.n	8010254 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8010018:	2101      	movs	r1, #1
 801001a:	6878      	ldr	r0, [r7, #4]
 801001c:	f000 fa68 	bl	80104f0 <USBH_SetAddress>
 8010020:	4603      	mov	r3, r0
 8010022:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010024:	7bbb      	ldrb	r3, [r7, #14]
 8010026:	2b00      	cmp	r3, #0
 8010028:	d132      	bne.n	8010090 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 801002a:	2002      	movs	r0, #2
 801002c:	f002 f8f8 	bl	8012220 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	2201      	movs	r2, #1
 8010034:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2203      	movs	r2, #3
 801003c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	7919      	ldrb	r1, [r3, #4]
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 801004e:	687a      	ldr	r2, [r7, #4]
 8010050:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8010052:	b292      	uxth	r2, r2
 8010054:	9202      	str	r2, [sp, #8]
 8010056:	2200      	movs	r2, #0
 8010058:	9201      	str	r2, [sp, #4]
 801005a:	9300      	str	r3, [sp, #0]
 801005c:	4603      	mov	r3, r0
 801005e:	2280      	movs	r2, #128	; 0x80
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f000 ffa9 	bl	8010fb8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8010066:	687b      	ldr	r3, [r7, #4]
 8010068:	7959      	ldrb	r1, [r3, #5]
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8010076:	687a      	ldr	r2, [r7, #4]
 8010078:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 801007a:	b292      	uxth	r2, r2
 801007c:	9202      	str	r2, [sp, #8]
 801007e:	2200      	movs	r2, #0
 8010080:	9201      	str	r2, [sp, #4]
 8010082:	9300      	str	r3, [sp, #0]
 8010084:	4603      	mov	r3, r0
 8010086:	2200      	movs	r2, #0
 8010088:	6878      	ldr	r0, [r7, #4]
 801008a:	f000 ff95 	bl	8010fb8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 801008e:	e0e3      	b.n	8010258 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010090:	7bbb      	ldrb	r3, [r7, #14]
 8010092:	2b03      	cmp	r3, #3
 8010094:	f040 80e0 	bne.w	8010258 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	220d      	movs	r2, #13
 801009c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2200      	movs	r2, #0
 80100a2:	705a      	strb	r2, [r3, #1]
      break;
 80100a4:	e0d8      	b.n	8010258 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 80100a6:	2109      	movs	r1, #9
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f000 f99d 	bl	80103e8 <USBH_Get_CfgDesc>
 80100ae:	4603      	mov	r3, r0
 80100b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80100b2:	7bbb      	ldrb	r3, [r7, #14]
 80100b4:	2b00      	cmp	r3, #0
 80100b6:	d103      	bne.n	80100c0 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2204      	movs	r2, #4
 80100bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80100be:	e0cd      	b.n	801025c <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80100c0:	7bbb      	ldrb	r3, [r7, #14]
 80100c2:	2b03      	cmp	r3, #3
 80100c4:	f040 80ca 	bne.w	801025c <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 80100c8:	687b      	ldr	r3, [r7, #4]
 80100ca:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80100ce:	3301      	adds	r3, #1
 80100d0:	b2da      	uxtb	r2, r3
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 80100de:	2b03      	cmp	r3, #3
 80100e0:	d903      	bls.n	80100ea <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 80100e2:	687b      	ldr	r3, [r7, #4]
 80100e4:	220d      	movs	r2, #13
 80100e6:	701a      	strb	r2, [r3, #0]
      break;
 80100e8:	e0b8      	b.n	801025c <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	795b      	ldrb	r3, [r3, #5]
 80100ee:	4619      	mov	r1, r3
 80100f0:	6878      	ldr	r0, [r7, #4]
 80100f2:	f000 ffb1 	bl	8011058 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	791b      	ldrb	r3, [r3, #4]
 80100fa:	4619      	mov	r1, r3
 80100fc:	6878      	ldr	r0, [r7, #4]
 80100fe:	f000 ffab 	bl	8011058 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	2200      	movs	r2, #0
 8010106:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	2200      	movs	r2, #0
 801010c:	701a      	strb	r2, [r3, #0]
      break;
 801010e:	e0a5      	b.n	801025c <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8010110:	687b      	ldr	r3, [r7, #4]
 8010112:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8010116:	4619      	mov	r1, r3
 8010118:	6878      	ldr	r0, [r7, #4]
 801011a:	f000 f965 	bl	80103e8 <USBH_Get_CfgDesc>
 801011e:	4603      	mov	r3, r0
 8010120:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8010122:	7bbb      	ldrb	r3, [r7, #14]
 8010124:	2b00      	cmp	r3, #0
 8010126:	d103      	bne.n	8010130 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2205      	movs	r2, #5
 801012c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 801012e:	e097      	b.n	8010260 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8010130:	7bbb      	ldrb	r3, [r7, #14]
 8010132:	2b03      	cmp	r3, #3
 8010134:	f040 8094 	bne.w	8010260 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801013e:	3301      	adds	r3, #1
 8010140:	b2da      	uxtb	r2, r3
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8010148:	687b      	ldr	r3, [r7, #4]
 801014a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 801014e:	2b03      	cmp	r3, #3
 8010150:	d903      	bls.n	801015a <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8010152:	687b      	ldr	r3, [r7, #4]
 8010154:	220d      	movs	r2, #13
 8010156:	701a      	strb	r2, [r3, #0]
      break;
 8010158:	e082      	b.n	8010260 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 801015a:	687b      	ldr	r3, [r7, #4]
 801015c:	795b      	ldrb	r3, [r3, #5]
 801015e:	4619      	mov	r1, r3
 8010160:	6878      	ldr	r0, [r7, #4]
 8010162:	f000 ff79 	bl	8011058 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	791b      	ldrb	r3, [r3, #4]
 801016a:	4619      	mov	r1, r3
 801016c:	6878      	ldr	r0, [r7, #4]
 801016e:	f000 ff73 	bl	8011058 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	2200      	movs	r2, #0
 8010176:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8010178:	687b      	ldr	r3, [r7, #4]
 801017a:	2200      	movs	r2, #0
 801017c:	701a      	strb	r2, [r3, #0]
      break;
 801017e:	e06f      	b.n	8010260 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8010180:	687b      	ldr	r3, [r7, #4]
 8010182:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8010186:	2b00      	cmp	r3, #0
 8010188:	d019      	beq.n	80101be <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8010190:	687b      	ldr	r3, [r7, #4]
 8010192:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8010196:	23ff      	movs	r3, #255	; 0xff
 8010198:	6878      	ldr	r0, [r7, #4]
 801019a:	f000 f949 	bl	8010430 <USBH_Get_StringDesc>
 801019e:	4603      	mov	r3, r0
 80101a0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80101a2:	7bbb      	ldrb	r3, [r7, #14]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d103      	bne.n	80101b0 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101a8:	687b      	ldr	r3, [r7, #4]
 80101aa:	2206      	movs	r2, #6
 80101ac:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80101ae:	e059      	b.n	8010264 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80101b0:	7bbb      	ldrb	r3, [r7, #14]
 80101b2:	2b03      	cmp	r3, #3
 80101b4:	d156      	bne.n	8010264 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	2206      	movs	r2, #6
 80101ba:	705a      	strb	r2, [r3, #1]
      break;
 80101bc:	e052      	b.n	8010264 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80101be:	687b      	ldr	r3, [r7, #4]
 80101c0:	2206      	movs	r2, #6
 80101c2:	705a      	strb	r2, [r3, #1]
      break;
 80101c4:	e04e      	b.n	8010264 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	d019      	beq.n	8010204 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80101d0:	687b      	ldr	r3, [r7, #4]
 80101d2:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80101dc:	23ff      	movs	r3, #255	; 0xff
 80101de:	6878      	ldr	r0, [r7, #4]
 80101e0:	f000 f926 	bl	8010430 <USBH_Get_StringDesc>
 80101e4:	4603      	mov	r3, r0
 80101e6:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80101e8:	7bbb      	ldrb	r3, [r7, #14]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d103      	bne.n	80101f6 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	2207      	movs	r2, #7
 80101f2:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80101f4:	e038      	b.n	8010268 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80101f6:	7bbb      	ldrb	r3, [r7, #14]
 80101f8:	2b03      	cmp	r3, #3
 80101fa:	d135      	bne.n	8010268 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80101fc:	687b      	ldr	r3, [r7, #4]
 80101fe:	2207      	movs	r2, #7
 8010200:	705a      	strb	r2, [r3, #1]
      break;
 8010202:	e031      	b.n	8010268 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	2207      	movs	r2, #7
 8010208:	705a      	strb	r2, [r3, #1]
      break;
 801020a:	e02d      	b.n	8010268 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 801020c:	687b      	ldr	r3, [r7, #4]
 801020e:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8010212:	2b00      	cmp	r3, #0
 8010214:	d017      	beq.n	8010246 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 801021c:	687b      	ldr	r3, [r7, #4]
 801021e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8010222:	23ff      	movs	r3, #255	; 0xff
 8010224:	6878      	ldr	r0, [r7, #4]
 8010226:	f000 f903 	bl	8010430 <USBH_Get_StringDesc>
 801022a:	4603      	mov	r3, r0
 801022c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 801022e:	7bbb      	ldrb	r3, [r7, #14]
 8010230:	2b00      	cmp	r3, #0
 8010232:	d102      	bne.n	801023a <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8010234:	2300      	movs	r3, #0
 8010236:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8010238:	e018      	b.n	801026c <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 801023a:	7bbb      	ldrb	r3, [r7, #14]
 801023c:	2b03      	cmp	r3, #3
 801023e:	d115      	bne.n	801026c <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8010240:	2300      	movs	r3, #0
 8010242:	73fb      	strb	r3, [r7, #15]
      break;
 8010244:	e012      	b.n	801026c <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8010246:	2300      	movs	r3, #0
 8010248:	73fb      	strb	r3, [r7, #15]
      break;
 801024a:	e00f      	b.n	801026c <USBH_HandleEnum+0x3bc>

    default:
      break;
 801024c:	bf00      	nop
 801024e:	e00e      	b.n	801026e <USBH_HandleEnum+0x3be>
      break;
 8010250:	bf00      	nop
 8010252:	e00c      	b.n	801026e <USBH_HandleEnum+0x3be>
      break;
 8010254:	bf00      	nop
 8010256:	e00a      	b.n	801026e <USBH_HandleEnum+0x3be>
      break;
 8010258:	bf00      	nop
 801025a:	e008      	b.n	801026e <USBH_HandleEnum+0x3be>
      break;
 801025c:	bf00      	nop
 801025e:	e006      	b.n	801026e <USBH_HandleEnum+0x3be>
      break;
 8010260:	bf00      	nop
 8010262:	e004      	b.n	801026e <USBH_HandleEnum+0x3be>
      break;
 8010264:	bf00      	nop
 8010266:	e002      	b.n	801026e <USBH_HandleEnum+0x3be>
      break;
 8010268:	bf00      	nop
 801026a:	e000      	b.n	801026e <USBH_HandleEnum+0x3be>
      break;
 801026c:	bf00      	nop
  }
  return Status;
 801026e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010270:	4618      	mov	r0, r3
 8010272:	3710      	adds	r7, #16
 8010274:	46bd      	mov	sp, r7
 8010276:	bd80      	pop	{r7, pc}

08010278 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8010278:	b480      	push	{r7}
 801027a:	b083      	sub	sp, #12
 801027c:	af00      	add	r7, sp, #0
 801027e:	6078      	str	r0, [r7, #4]
 8010280:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8010282:	687b      	ldr	r3, [r7, #4]
 8010284:	683a      	ldr	r2, [r7, #0]
 8010286:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 801028a:	bf00      	nop
 801028c:	370c      	adds	r7, #12
 801028e:	46bd      	mov	sp, r7
 8010290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010294:	4770      	bx	lr

08010296 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8010296:	b580      	push	{r7, lr}
 8010298:	b082      	sub	sp, #8
 801029a:	af00      	add	r7, sp, #0
 801029c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 801029e:	687b      	ldr	r3, [r7, #4]
 80102a0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80102a4:	1c5a      	adds	r2, r3, #1
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80102ac:	6878      	ldr	r0, [r7, #4]
 80102ae:	f000 f804 	bl	80102ba <USBH_HandleSof>
}
 80102b2:	bf00      	nop
 80102b4:	3708      	adds	r7, #8
 80102b6:	46bd      	mov	sp, r7
 80102b8:	bd80      	pop	{r7, pc}

080102ba <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80102ba:	b580      	push	{r7, lr}
 80102bc:	b082      	sub	sp, #8
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	781b      	ldrb	r3, [r3, #0]
 80102c6:	b2db      	uxtb	r3, r3
 80102c8:	2b0b      	cmp	r3, #11
 80102ca:	d10a      	bne.n	80102e2 <USBH_HandleSof+0x28>
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d005      	beq.n	80102e2 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80102dc:	699b      	ldr	r3, [r3, #24]
 80102de:	6878      	ldr	r0, [r7, #4]
 80102e0:	4798      	blx	r3
  }
}
 80102e2:	bf00      	nop
 80102e4:	3708      	adds	r7, #8
 80102e6:	46bd      	mov	sp, r7
 80102e8:	bd80      	pop	{r7, pc}

080102ea <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80102ea:	b480      	push	{r7}
 80102ec:	b083      	sub	sp, #12
 80102ee:	af00      	add	r7, sp, #0
 80102f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80102f2:	687b      	ldr	r3, [r7, #4]
 80102f4:	2201      	movs	r2, #1
 80102f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80102fa:	bf00      	nop
}
 80102fc:	370c      	adds	r7, #12
 80102fe:	46bd      	mov	sp, r7
 8010300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010304:	4770      	bx	lr

08010306 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8010306:	b480      	push	{r7}
 8010308:	b083      	sub	sp, #12
 801030a:	af00      	add	r7, sp, #0
 801030c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	2200      	movs	r2, #0
 8010312:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8010316:	bf00      	nop
}
 8010318:	370c      	adds	r7, #12
 801031a:	46bd      	mov	sp, r7
 801031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010320:	4770      	bx	lr

08010322 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8010322:	b480      	push	{r7}
 8010324:	b083      	sub	sp, #12
 8010326:	af00      	add	r7, sp, #0
 8010328:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 801032a:	687b      	ldr	r3, [r7, #4]
 801032c:	2201      	movs	r2, #1
 801032e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8010332:	687b      	ldr	r3, [r7, #4]
 8010334:	2200      	movs	r2, #0
 8010336:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	2200      	movs	r2, #0
 801033e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8010342:	2300      	movs	r3, #0
}
 8010344:	4618      	mov	r0, r3
 8010346:	370c      	adds	r7, #12
 8010348:	46bd      	mov	sp, r7
 801034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801034e:	4770      	bx	lr

08010350 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8010350:	b580      	push	{r7, lr}
 8010352:	b082      	sub	sp, #8
 8010354:	af00      	add	r7, sp, #0
 8010356:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	2201      	movs	r2, #1
 801035c:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	2200      	movs	r2, #0
 8010364:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	2200      	movs	r2, #0
 801036c:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8010370:	6878      	ldr	r0, [r7, #4]
 8010372:	f001 fe0c 	bl	8011f8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	791b      	ldrb	r3, [r3, #4]
 801037a:	4619      	mov	r1, r3
 801037c:	6878      	ldr	r0, [r7, #4]
 801037e:	f000 fe6b 	bl	8011058 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	795b      	ldrb	r3, [r3, #5]
 8010386:	4619      	mov	r1, r3
 8010388:	6878      	ldr	r0, [r7, #4]
 801038a:	f000 fe65 	bl	8011058 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 801038e:	2300      	movs	r3, #0
}
 8010390:	4618      	mov	r0, r3
 8010392:	3708      	adds	r7, #8
 8010394:	46bd      	mov	sp, r7
 8010396:	bd80      	pop	{r7, pc}

08010398 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8010398:	b580      	push	{r7, lr}
 801039a:	b086      	sub	sp, #24
 801039c:	af02      	add	r7, sp, #8
 801039e:	6078      	str	r0, [r7, #4]
 80103a0:	460b      	mov	r3, r1
 80103a2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 80103aa:	78fb      	ldrb	r3, [r7, #3]
 80103ac:	b29b      	uxth	r3, r3
 80103ae:	9300      	str	r3, [sp, #0]
 80103b0:	4613      	mov	r3, r2
 80103b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80103b6:	2100      	movs	r1, #0
 80103b8:	6878      	ldr	r0, [r7, #4]
 80103ba:	f000 f864 	bl	8010486 <USBH_GetDescriptor>
 80103be:	4603      	mov	r3, r0
 80103c0:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80103c2:	7bfb      	ldrb	r3, [r7, #15]
 80103c4:	2b00      	cmp	r3, #0
 80103c6:	d10a      	bne.n	80103de <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	f203 3026 	addw	r0, r3, #806	; 0x326
 80103ce:	687b      	ldr	r3, [r7, #4]
 80103d0:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80103d4:	78fa      	ldrb	r2, [r7, #3]
 80103d6:	b292      	uxth	r2, r2
 80103d8:	4619      	mov	r1, r3
 80103da:	f000 f919 	bl	8010610 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80103de:	7bfb      	ldrb	r3, [r7, #15]
}
 80103e0:	4618      	mov	r0, r3
 80103e2:	3710      	adds	r7, #16
 80103e4:	46bd      	mov	sp, r7
 80103e6:	bd80      	pop	{r7, pc}

080103e8 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80103e8:	b580      	push	{r7, lr}
 80103ea:	b086      	sub	sp, #24
 80103ec:	af02      	add	r7, sp, #8
 80103ee:	6078      	str	r0, [r7, #4]
 80103f0:	460b      	mov	r3, r1
 80103f2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80103f4:	687b      	ldr	r3, [r7, #4]
 80103f6:	331c      	adds	r3, #28
 80103f8:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80103fa:	887b      	ldrh	r3, [r7, #2]
 80103fc:	9300      	str	r3, [sp, #0]
 80103fe:	68bb      	ldr	r3, [r7, #8]
 8010400:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010404:	2100      	movs	r1, #0
 8010406:	6878      	ldr	r0, [r7, #4]
 8010408:	f000 f83d 	bl	8010486 <USBH_GetDescriptor>
 801040c:	4603      	mov	r3, r0
 801040e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8010410:	7bfb      	ldrb	r3, [r7, #15]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d107      	bne.n	8010426 <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8010416:	887b      	ldrh	r3, [r7, #2]
 8010418:	461a      	mov	r2, r3
 801041a:	68b9      	ldr	r1, [r7, #8]
 801041c:	6878      	ldr	r0, [r7, #4]
 801041e:	f000 f987 	bl	8010730 <USBH_ParseCfgDesc>
 8010422:	4603      	mov	r3, r0
 8010424:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8010426:	7bfb      	ldrb	r3, [r7, #15]
}
 8010428:	4618      	mov	r0, r3
 801042a:	3710      	adds	r7, #16
 801042c:	46bd      	mov	sp, r7
 801042e:	bd80      	pop	{r7, pc}

08010430 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8010430:	b580      	push	{r7, lr}
 8010432:	b088      	sub	sp, #32
 8010434:	af02      	add	r7, sp, #8
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	607a      	str	r2, [r7, #4]
 801043a:	461a      	mov	r2, r3
 801043c:	460b      	mov	r3, r1
 801043e:	72fb      	strb	r3, [r7, #11]
 8010440:	4613      	mov	r3, r2
 8010442:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8010444:	7afb      	ldrb	r3, [r7, #11]
 8010446:	b29b      	uxth	r3, r3
 8010448:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 801044c:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 801044e:	68fb      	ldr	r3, [r7, #12]
 8010450:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8010454:	893b      	ldrh	r3, [r7, #8]
 8010456:	9300      	str	r3, [sp, #0]
 8010458:	460b      	mov	r3, r1
 801045a:	2100      	movs	r1, #0
 801045c:	68f8      	ldr	r0, [r7, #12]
 801045e:	f000 f812 	bl	8010486 <USBH_GetDescriptor>
 8010462:	4603      	mov	r3, r0
 8010464:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8010466:	7dfb      	ldrb	r3, [r7, #23]
 8010468:	2b00      	cmp	r3, #0
 801046a:	d107      	bne.n	801047c <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 801046c:	68fb      	ldr	r3, [r7, #12]
 801046e:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8010472:	893a      	ldrh	r2, [r7, #8]
 8010474:	6879      	ldr	r1, [r7, #4]
 8010476:	4618      	mov	r0, r3
 8010478:	f000 fafe 	bl	8010a78 <USBH_ParseStringDesc>
  }

  return status;
 801047c:	7dfb      	ldrb	r3, [r7, #23]
}
 801047e:	4618      	mov	r0, r3
 8010480:	3718      	adds	r7, #24
 8010482:	46bd      	mov	sp, r7
 8010484:	bd80      	pop	{r7, pc}

08010486 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8010486:	b580      	push	{r7, lr}
 8010488:	b084      	sub	sp, #16
 801048a:	af00      	add	r7, sp, #0
 801048c:	60f8      	str	r0, [r7, #12]
 801048e:	607b      	str	r3, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	72fb      	strb	r3, [r7, #11]
 8010494:	4613      	mov	r3, r2
 8010496:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8010498:	68fb      	ldr	r3, [r7, #12]
 801049a:	789b      	ldrb	r3, [r3, #2]
 801049c:	2b01      	cmp	r3, #1
 801049e:	d11c      	bne.n	80104da <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80104a0:	7afb      	ldrb	r3, [r7, #11]
 80104a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80104a6:	b2da      	uxtb	r2, r3
 80104a8:	68fb      	ldr	r3, [r7, #12]
 80104aa:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80104ac:	68fb      	ldr	r3, [r7, #12]
 80104ae:	2206      	movs	r2, #6
 80104b0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80104b2:	68fb      	ldr	r3, [r7, #12]
 80104b4:	893a      	ldrh	r2, [r7, #8]
 80104b6:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80104b8:	893b      	ldrh	r3, [r7, #8]
 80104ba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80104be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80104c2:	d104      	bne.n	80104ce <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80104c4:	68fb      	ldr	r3, [r7, #12]
 80104c6:	f240 4209 	movw	r2, #1033	; 0x409
 80104ca:	829a      	strh	r2, [r3, #20]
 80104cc:	e002      	b.n	80104d4 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80104ce:	68fb      	ldr	r3, [r7, #12]
 80104d0:	2200      	movs	r2, #0
 80104d2:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80104d4:	68fb      	ldr	r3, [r7, #12]
 80104d6:	8b3a      	ldrh	r2, [r7, #24]
 80104d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80104da:	8b3b      	ldrh	r3, [r7, #24]
 80104dc:	461a      	mov	r2, r3
 80104de:	6879      	ldr	r1, [r7, #4]
 80104e0:	68f8      	ldr	r0, [r7, #12]
 80104e2:	f000 fb17 	bl	8010b14 <USBH_CtlReq>
 80104e6:	4603      	mov	r3, r0
}
 80104e8:	4618      	mov	r0, r3
 80104ea:	3710      	adds	r7, #16
 80104ec:	46bd      	mov	sp, r7
 80104ee:	bd80      	pop	{r7, pc}

080104f0 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80104f0:	b580      	push	{r7, lr}
 80104f2:	b082      	sub	sp, #8
 80104f4:	af00      	add	r7, sp, #0
 80104f6:	6078      	str	r0, [r7, #4]
 80104f8:	460b      	mov	r3, r1
 80104fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80104fc:	687b      	ldr	r3, [r7, #4]
 80104fe:	789b      	ldrb	r3, [r3, #2]
 8010500:	2b01      	cmp	r3, #1
 8010502:	d10f      	bne.n	8010524 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8010504:	687b      	ldr	r3, [r7, #4]
 8010506:	2200      	movs	r2, #0
 8010508:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 801050a:	687b      	ldr	r3, [r7, #4]
 801050c:	2205      	movs	r2, #5
 801050e:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8010510:	78fb      	ldrb	r3, [r7, #3]
 8010512:	b29a      	uxth	r2, r3
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8010518:	687b      	ldr	r3, [r7, #4]
 801051a:	2200      	movs	r2, #0
 801051c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 801051e:	687b      	ldr	r3, [r7, #4]
 8010520:	2200      	movs	r2, #0
 8010522:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8010524:	2200      	movs	r2, #0
 8010526:	2100      	movs	r1, #0
 8010528:	6878      	ldr	r0, [r7, #4]
 801052a:	f000 faf3 	bl	8010b14 <USBH_CtlReq>
 801052e:	4603      	mov	r3, r0
}
 8010530:	4618      	mov	r0, r3
 8010532:	3708      	adds	r7, #8
 8010534:	46bd      	mov	sp, r7
 8010536:	bd80      	pop	{r7, pc}

08010538 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8010538:	b580      	push	{r7, lr}
 801053a:	b082      	sub	sp, #8
 801053c:	af00      	add	r7, sp, #0
 801053e:	6078      	str	r0, [r7, #4]
 8010540:	460b      	mov	r3, r1
 8010542:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	789b      	ldrb	r3, [r3, #2]
 8010548:	2b01      	cmp	r3, #1
 801054a:	d10e      	bne.n	801056a <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2200      	movs	r2, #0
 8010550:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8010552:	687b      	ldr	r3, [r7, #4]
 8010554:	2209      	movs	r2, #9
 8010556:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8010558:	687b      	ldr	r3, [r7, #4]
 801055a:	887a      	ldrh	r2, [r7, #2]
 801055c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	2200      	movs	r2, #0
 8010562:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8010564:	687b      	ldr	r3, [r7, #4]
 8010566:	2200      	movs	r2, #0
 8010568:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 801056a:	2200      	movs	r2, #0
 801056c:	2100      	movs	r1, #0
 801056e:	6878      	ldr	r0, [r7, #4]
 8010570:	f000 fad0 	bl	8010b14 <USBH_CtlReq>
 8010574:	4603      	mov	r3, r0
}
 8010576:	4618      	mov	r0, r3
 8010578:	3708      	adds	r7, #8
 801057a:	46bd      	mov	sp, r7
 801057c:	bd80      	pop	{r7, pc}

0801057e <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 801057e:	b580      	push	{r7, lr}
 8010580:	b082      	sub	sp, #8
 8010582:	af00      	add	r7, sp, #0
 8010584:	6078      	str	r0, [r7, #4]
 8010586:	460b      	mov	r3, r1
 8010588:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	789b      	ldrb	r3, [r3, #2]
 801058e:	2b01      	cmp	r3, #1
 8010590:	d10f      	bne.n	80105b2 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	2200      	movs	r2, #0
 8010596:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8010598:	687b      	ldr	r3, [r7, #4]
 801059a:	2203      	movs	r2, #3
 801059c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 801059e:	78fb      	ldrb	r3, [r7, #3]
 80105a0:	b29a      	uxth	r2, r3
 80105a2:	687b      	ldr	r3, [r7, #4]
 80105a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2200      	movs	r2, #0
 80105aa:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2200      	movs	r2, #0
 80105b0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80105b2:	2200      	movs	r2, #0
 80105b4:	2100      	movs	r1, #0
 80105b6:	6878      	ldr	r0, [r7, #4]
 80105b8:	f000 faac 	bl	8010b14 <USBH_CtlReq>
 80105bc:	4603      	mov	r3, r0
}
 80105be:	4618      	mov	r0, r3
 80105c0:	3708      	adds	r7, #8
 80105c2:	46bd      	mov	sp, r7
 80105c4:	bd80      	pop	{r7, pc}

080105c6 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80105c6:	b580      	push	{r7, lr}
 80105c8:	b082      	sub	sp, #8
 80105ca:	af00      	add	r7, sp, #0
 80105cc:	6078      	str	r0, [r7, #4]
 80105ce:	460b      	mov	r3, r1
 80105d0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	789b      	ldrb	r3, [r3, #2]
 80105d6:	2b01      	cmp	r3, #1
 80105d8:	d10f      	bne.n	80105fa <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	2202      	movs	r2, #2
 80105de:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80105e0:	687b      	ldr	r3, [r7, #4]
 80105e2:	2201      	movs	r2, #1
 80105e4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80105e6:	687b      	ldr	r3, [r7, #4]
 80105e8:	2200      	movs	r2, #0
 80105ea:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80105ec:	78fb      	ldrb	r3, [r7, #3]
 80105ee:	b29a      	uxth	r2, r3
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	2200      	movs	r2, #0
 80105f8:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80105fa:	2200      	movs	r2, #0
 80105fc:	2100      	movs	r1, #0
 80105fe:	6878      	ldr	r0, [r7, #4]
 8010600:	f000 fa88 	bl	8010b14 <USBH_CtlReq>
 8010604:	4603      	mov	r3, r0
}
 8010606:	4618      	mov	r0, r3
 8010608:	3708      	adds	r7, #8
 801060a:	46bd      	mov	sp, r7
 801060c:	bd80      	pop	{r7, pc}
	...

08010610 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                              uint16_t length)
{
 8010610:	b480      	push	{r7}
 8010612:	b085      	sub	sp, #20
 8010614:	af00      	add	r7, sp, #0
 8010616:	60f8      	str	r0, [r7, #12]
 8010618:	60b9      	str	r1, [r7, #8]
 801061a:	4613      	mov	r3, r2
 801061c:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 801061e:	68bb      	ldr	r3, [r7, #8]
 8010620:	781a      	ldrb	r2, [r3, #0]
 8010622:	68fb      	ldr	r3, [r7, #12]
 8010624:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8010626:	68bb      	ldr	r3, [r7, #8]
 8010628:	785a      	ldrb	r2, [r3, #1]
 801062a:	68fb      	ldr	r3, [r7, #12]
 801062c:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 801062e:	68bb      	ldr	r3, [r7, #8]
 8010630:	3302      	adds	r3, #2
 8010632:	781b      	ldrb	r3, [r3, #0]
 8010634:	b29a      	uxth	r2, r3
 8010636:	68bb      	ldr	r3, [r7, #8]
 8010638:	3303      	adds	r3, #3
 801063a:	781b      	ldrb	r3, [r3, #0]
 801063c:	b29b      	uxth	r3, r3
 801063e:	021b      	lsls	r3, r3, #8
 8010640:	b29b      	uxth	r3, r3
 8010642:	4313      	orrs	r3, r2
 8010644:	b29a      	uxth	r2, r3
 8010646:	68fb      	ldr	r3, [r7, #12]
 8010648:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 801064a:	68bb      	ldr	r3, [r7, #8]
 801064c:	791a      	ldrb	r2, [r3, #4]
 801064e:	68fb      	ldr	r3, [r7, #12]
 8010650:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8010652:	68bb      	ldr	r3, [r7, #8]
 8010654:	795a      	ldrb	r2, [r3, #5]
 8010656:	68fb      	ldr	r3, [r7, #12]
 8010658:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 801065a:	68bb      	ldr	r3, [r7, #8]
 801065c:	799a      	ldrb	r2, [r3, #6]
 801065e:	68fb      	ldr	r3, [r7, #12]
 8010660:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8010662:	68bb      	ldr	r3, [r7, #8]
 8010664:	79da      	ldrb	r2, [r3, #7]
 8010666:	68fb      	ldr	r3, [r7, #12]
 8010668:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	79db      	ldrb	r3, [r3, #7]
 801066e:	2b20      	cmp	r3, #32
 8010670:	dc0e      	bgt.n	8010690 <USBH_ParseDevDesc+0x80>
 8010672:	2b08      	cmp	r3, #8
 8010674:	db13      	blt.n	801069e <USBH_ParseDevDesc+0x8e>
 8010676:	3b08      	subs	r3, #8
 8010678:	2201      	movs	r2, #1
 801067a:	409a      	lsls	r2, r3
 801067c:	4b2b      	ldr	r3, [pc, #172]	; (801072c <USBH_ParseDevDesc+0x11c>)
 801067e:	4013      	ands	r3, r2
 8010680:	2b00      	cmp	r3, #0
 8010682:	bf14      	ite	ne
 8010684:	2301      	movne	r3, #1
 8010686:	2300      	moveq	r3, #0
 8010688:	b2db      	uxtb	r3, r3
 801068a:	2b00      	cmp	r3, #0
 801068c:	d102      	bne.n	8010694 <USBH_ParseDevDesc+0x84>
 801068e:	e006      	b.n	801069e <USBH_ParseDevDesc+0x8e>
 8010690:	2b40      	cmp	r3, #64	; 0x40
 8010692:	d104      	bne.n	801069e <USBH_ParseDevDesc+0x8e>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 8010694:	68fb      	ldr	r3, [r7, #12]
 8010696:	79da      	ldrb	r2, [r3, #7]
 8010698:	68fb      	ldr	r3, [r7, #12]
 801069a:	71da      	strb	r2, [r3, #7]
      break;
 801069c:	e003      	b.n	80106a6 <USBH_ParseDevDesc+0x96>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 801069e:	68fb      	ldr	r3, [r7, #12]
 80106a0:	2240      	movs	r2, #64	; 0x40
 80106a2:	71da      	strb	r2, [r3, #7]
      break;
 80106a4:	bf00      	nop
  }

  if (length > 8U)
 80106a6:	88fb      	ldrh	r3, [r7, #6]
 80106a8:	2b08      	cmp	r3, #8
 80106aa:	d939      	bls.n	8010720 <USBH_ParseDevDesc+0x110>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 80106ac:	68bb      	ldr	r3, [r7, #8]
 80106ae:	3308      	adds	r3, #8
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	68bb      	ldr	r3, [r7, #8]
 80106b6:	3309      	adds	r3, #9
 80106b8:	781b      	ldrb	r3, [r3, #0]
 80106ba:	b29b      	uxth	r3, r3
 80106bc:	021b      	lsls	r3, r3, #8
 80106be:	b29b      	uxth	r3, r3
 80106c0:	4313      	orrs	r3, r2
 80106c2:	b29a      	uxth	r2, r3
 80106c4:	68fb      	ldr	r3, [r7, #12]
 80106c6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80106c8:	68bb      	ldr	r3, [r7, #8]
 80106ca:	330a      	adds	r3, #10
 80106cc:	781b      	ldrb	r3, [r3, #0]
 80106ce:	b29a      	uxth	r2, r3
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	330b      	adds	r3, #11
 80106d4:	781b      	ldrb	r3, [r3, #0]
 80106d6:	b29b      	uxth	r3, r3
 80106d8:	021b      	lsls	r3, r3, #8
 80106da:	b29b      	uxth	r3, r3
 80106dc:	4313      	orrs	r3, r2
 80106de:	b29a      	uxth	r2, r3
 80106e0:	68fb      	ldr	r3, [r7, #12]
 80106e2:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80106e4:	68bb      	ldr	r3, [r7, #8]
 80106e6:	330c      	adds	r3, #12
 80106e8:	781b      	ldrb	r3, [r3, #0]
 80106ea:	b29a      	uxth	r2, r3
 80106ec:	68bb      	ldr	r3, [r7, #8]
 80106ee:	330d      	adds	r3, #13
 80106f0:	781b      	ldrb	r3, [r3, #0]
 80106f2:	b29b      	uxth	r3, r3
 80106f4:	021b      	lsls	r3, r3, #8
 80106f6:	b29b      	uxth	r3, r3
 80106f8:	4313      	orrs	r3, r2
 80106fa:	b29a      	uxth	r2, r3
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 8010700:	68bb      	ldr	r3, [r7, #8]
 8010702:	7b9a      	ldrb	r2, [r3, #14]
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 8010708:	68bb      	ldr	r3, [r7, #8]
 801070a:	7bda      	ldrb	r2, [r3, #15]
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 8010710:	68bb      	ldr	r3, [r7, #8]
 8010712:	7c1a      	ldrb	r2, [r3, #16]
 8010714:	68fb      	ldr	r3, [r7, #12]
 8010716:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8010718:	68bb      	ldr	r3, [r7, #8]
 801071a:	7c5a      	ldrb	r2, [r3, #17]
 801071c:	68fb      	ldr	r3, [r7, #12]
 801071e:	745a      	strb	r2, [r3, #17]
  }
}
 8010720:	bf00      	nop
 8010722:	3714      	adds	r7, #20
 8010724:	46bd      	mov	sp, r7
 8010726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801072a:	4770      	bx	lr
 801072c:	01000101 	.word	0x01000101

08010730 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8010730:	b580      	push	{r7, lr}
 8010732:	b08c      	sub	sp, #48	; 0x30
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	4613      	mov	r3, r2
 801073c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8010744:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 8010746:	2300      	movs	r3, #0
 8010748:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 801074c:	68bb      	ldr	r3, [r7, #8]
 801074e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8010750:	2300      	movs	r3, #0
 8010752:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 8010756:	2300      	movs	r3, #0
 8010758:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 801075c:	68bb      	ldr	r3, [r7, #8]
 801075e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8010760:	68bb      	ldr	r3, [r7, #8]
 8010762:	781a      	ldrb	r2, [r3, #0]
 8010764:	6a3b      	ldr	r3, [r7, #32]
 8010766:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 8010768:	68bb      	ldr	r3, [r7, #8]
 801076a:	785a      	ldrb	r2, [r3, #1]
 801076c:	6a3b      	ldr	r3, [r7, #32]
 801076e:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8010770:	68bb      	ldr	r3, [r7, #8]
 8010772:	3302      	adds	r3, #2
 8010774:	781b      	ldrb	r3, [r3, #0]
 8010776:	b29a      	uxth	r2, r3
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	3303      	adds	r3, #3
 801077c:	781b      	ldrb	r3, [r3, #0]
 801077e:	b29b      	uxth	r3, r3
 8010780:	021b      	lsls	r3, r3, #8
 8010782:	b29b      	uxth	r3, r3
 8010784:	4313      	orrs	r3, r2
 8010786:	b29b      	uxth	r3, r3
 8010788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801078c:	bf28      	it	cs
 801078e:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8010792:	b29a      	uxth	r2, r3
 8010794:	6a3b      	ldr	r3, [r7, #32]
 8010796:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8010798:	68bb      	ldr	r3, [r7, #8]
 801079a:	791a      	ldrb	r2, [r3, #4]
 801079c:	6a3b      	ldr	r3, [r7, #32]
 801079e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 80107a0:	68bb      	ldr	r3, [r7, #8]
 80107a2:	795a      	ldrb	r2, [r3, #5]
 80107a4:	6a3b      	ldr	r3, [r7, #32]
 80107a6:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 80107a8:	68bb      	ldr	r3, [r7, #8]
 80107aa:	799a      	ldrb	r2, [r3, #6]
 80107ac:	6a3b      	ldr	r3, [r7, #32]
 80107ae:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	79da      	ldrb	r2, [r3, #7]
 80107b4:	6a3b      	ldr	r3, [r7, #32]
 80107b6:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 80107b8:	68bb      	ldr	r3, [r7, #8]
 80107ba:	7a1a      	ldrb	r2, [r3, #8]
 80107bc:	6a3b      	ldr	r3, [r7, #32]
 80107be:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80107c0:	6a3b      	ldr	r3, [r7, #32]
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	2b09      	cmp	r3, #9
 80107c6:	d002      	beq.n	80107ce <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80107c8:	6a3b      	ldr	r3, [r7, #32]
 80107ca:	2209      	movs	r2, #9
 80107cc:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80107ce:	88fb      	ldrh	r3, [r7, #6]
 80107d0:	2b09      	cmp	r3, #9
 80107d2:	f240 8099 	bls.w	8010908 <USBH_ParseCfgDesc+0x1d8>
  {
    ptr = USB_LEN_CFG_DESC;
 80107d6:	2309      	movs	r3, #9
 80107d8:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80107da:	2300      	movs	r3, #0
 80107dc:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80107de:	e07d      	b.n	80108dc <USBH_ParseCfgDesc+0x1ac>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80107e0:	f107 0316 	add.w	r3, r7, #22
 80107e4:	4619      	mov	r1, r3
 80107e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80107e8:	f000 f979 	bl	8010ade <USBH_GetNextDesc>
 80107ec:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80107ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f0:	785b      	ldrb	r3, [r3, #1]
 80107f2:	2b04      	cmp	r3, #4
 80107f4:	d172      	bne.n	80108dc <USBH_ParseCfgDesc+0x1ac>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80107f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80107f8:	781b      	ldrb	r3, [r3, #0]
 80107fa:	2b09      	cmp	r3, #9
 80107fc:	d002      	beq.n	8010804 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80107fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010800:	2209      	movs	r2, #9
 8010802:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8010804:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010808:	221a      	movs	r2, #26
 801080a:	fb02 f303 	mul.w	r3, r2, r3
 801080e:	3308      	adds	r3, #8
 8010810:	6a3a      	ldr	r2, [r7, #32]
 8010812:	4413      	add	r3, r2
 8010814:	3302      	adds	r3, #2
 8010816:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8010818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801081a:	69f8      	ldr	r0, [r7, #28]
 801081c:	f000 f87a 	bl	8010914 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8010820:	2300      	movs	r3, #0
 8010822:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8010826:	2300      	movs	r3, #0
 8010828:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 801082a:	e03f      	b.n	80108ac <USBH_ParseCfgDesc+0x17c>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 801082c:	f107 0316 	add.w	r3, r7, #22
 8010830:	4619      	mov	r1, r3
 8010832:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010834:	f000 f953 	bl	8010ade <USBH_GetNextDesc>
 8010838:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801083a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801083c:	785b      	ldrb	r3, [r3, #1]
 801083e:	2b05      	cmp	r3, #5
 8010840:	d134      	bne.n	80108ac <USBH_ParseCfgDesc+0x17c>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8010842:	69fb      	ldr	r3, [r7, #28]
 8010844:	795b      	ldrb	r3, [r3, #5]
 8010846:	2b01      	cmp	r3, #1
 8010848:	d10f      	bne.n	801086a <USBH_ParseCfgDesc+0x13a>
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	799b      	ldrb	r3, [r3, #6]
 801084e:	2b02      	cmp	r3, #2
 8010850:	d10b      	bne.n	801086a <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	79db      	ldrb	r3, [r3, #7]
 8010856:	2b00      	cmp	r3, #0
 8010858:	d10b      	bne.n	8010872 <USBH_ParseCfgDesc+0x142>
 801085a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801085c:	781b      	ldrb	r3, [r3, #0]
 801085e:	2b09      	cmp	r3, #9
 8010860:	d007      	beq.n	8010872 <USBH_ParseCfgDesc+0x142>
              {
                pdesc->bLength = 0x09U;
 8010862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010864:	2209      	movs	r2, #9
 8010866:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010868:	e003      	b.n	8010872 <USBH_ParseCfgDesc+0x142>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 801086a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801086c:	2207      	movs	r2, #7
 801086e:	701a      	strb	r2, [r3, #0]
 8010870:	e000      	b.n	8010874 <USBH_ParseCfgDesc+0x144>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8010872:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8010874:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010878:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801087c:	3201      	adds	r2, #1
 801087e:	00d2      	lsls	r2, r2, #3
 8010880:	211a      	movs	r1, #26
 8010882:	fb01 f303 	mul.w	r3, r1, r3
 8010886:	4413      	add	r3, r2
 8010888:	3308      	adds	r3, #8
 801088a:	6a3a      	ldr	r2, [r7, #32]
 801088c:	4413      	add	r3, r2
 801088e:	3304      	adds	r3, #4
 8010890:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8010892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010894:	69b9      	ldr	r1, [r7, #24]
 8010896:	68f8      	ldr	r0, [r7, #12]
 8010898:	f000 f86c 	bl	8010974 <USBH_ParseEPDesc>
 801089c:	4603      	mov	r3, r0
 801089e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 80108a2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80108a6:	3301      	adds	r3, #1
 80108a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80108ac:	69fb      	ldr	r3, [r7, #28]
 80108ae:	791b      	ldrb	r3, [r3, #4]
 80108b0:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80108b4:	429a      	cmp	r2, r3
 80108b6:	d204      	bcs.n	80108c2 <USBH_ParseCfgDesc+0x192>
 80108b8:	6a3b      	ldr	r3, [r7, #32]
 80108ba:	885a      	ldrh	r2, [r3, #2]
 80108bc:	8afb      	ldrh	r3, [r7, #22]
 80108be:	429a      	cmp	r2, r3
 80108c0:	d8b4      	bhi.n	801082c <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80108c2:	69fb      	ldr	r3, [r7, #28]
 80108c4:	791b      	ldrb	r3, [r3, #4]
 80108c6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80108ca:	429a      	cmp	r2, r3
 80108cc:	d201      	bcs.n	80108d2 <USBH_ParseCfgDesc+0x1a2>
        {
          return USBH_NOT_SUPPORTED;
 80108ce:	2303      	movs	r3, #3
 80108d0:	e01c      	b.n	801090c <USBH_ParseCfgDesc+0x1dc>
        }

        if_ix++;
 80108d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108d6:	3301      	adds	r3, #1
 80108d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80108dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80108e0:	2b01      	cmp	r3, #1
 80108e2:	d805      	bhi.n	80108f0 <USBH_ParseCfgDesc+0x1c0>
 80108e4:	6a3b      	ldr	r3, [r7, #32]
 80108e6:	885a      	ldrh	r2, [r3, #2]
 80108e8:	8afb      	ldrh	r3, [r7, #22]
 80108ea:	429a      	cmp	r2, r3
 80108ec:	f63f af78 	bhi.w	80107e0 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80108f0:	6a3b      	ldr	r3, [r7, #32]
 80108f2:	791b      	ldrb	r3, [r3, #4]
 80108f4:	2b02      	cmp	r3, #2
 80108f6:	bf28      	it	cs
 80108f8:	2302      	movcs	r3, #2
 80108fa:	b2db      	uxtb	r3, r3
 80108fc:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010900:	429a      	cmp	r2, r3
 8010902:	d201      	bcs.n	8010908 <USBH_ParseCfgDesc+0x1d8>
    {
      return USBH_NOT_SUPPORTED;
 8010904:	2303      	movs	r3, #3
 8010906:	e001      	b.n	801090c <USBH_ParseCfgDesc+0x1dc>
    }
  }

  return status;
 8010908:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 801090c:	4618      	mov	r0, r3
 801090e:	3730      	adds	r7, #48	; 0x30
 8010910:	46bd      	mov	sp, r7
 8010912:	bd80      	pop	{r7, pc}

08010914 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                    uint8_t *buf)
{
 8010914:	b480      	push	{r7}
 8010916:	b083      	sub	sp, #12
 8010918:	af00      	add	r7, sp, #0
 801091a:	6078      	str	r0, [r7, #4]
 801091c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 801091e:	683b      	ldr	r3, [r7, #0]
 8010920:	781a      	ldrb	r2, [r3, #0]
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8010926:	683b      	ldr	r3, [r7, #0]
 8010928:	785a      	ldrb	r2, [r3, #1]
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	789a      	ldrb	r2, [r3, #2]
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8010936:	683b      	ldr	r3, [r7, #0]
 8010938:	78da      	ldrb	r2, [r3, #3]
 801093a:	687b      	ldr	r3, [r7, #4]
 801093c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	791a      	ldrb	r2, [r3, #4]
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8010946:	683b      	ldr	r3, [r7, #0]
 8010948:	795a      	ldrb	r2, [r3, #5]
 801094a:	687b      	ldr	r3, [r7, #4]
 801094c:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 801094e:	683b      	ldr	r3, [r7, #0]
 8010950:	799a      	ldrb	r2, [r3, #6]
 8010952:	687b      	ldr	r3, [r7, #4]
 8010954:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8010956:	683b      	ldr	r3, [r7, #0]
 8010958:	79da      	ldrb	r2, [r3, #7]
 801095a:	687b      	ldr	r3, [r7, #4]
 801095c:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 801095e:	683b      	ldr	r3, [r7, #0]
 8010960:	7a1a      	ldrb	r2, [r3, #8]
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	721a      	strb	r2, [r3, #8]
}
 8010966:	bf00      	nop
 8010968:	370c      	adds	r7, #12
 801096a:	46bd      	mov	sp, r7
 801096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010970:	4770      	bx	lr
	...

08010974 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                           uint8_t *buf)
{
 8010974:	b480      	push	{r7}
 8010976:	b087      	sub	sp, #28
 8010978:	af00      	add	r7, sp, #0
 801097a:	60f8      	str	r0, [r7, #12]
 801097c:	60b9      	str	r1, [r7, #8]
 801097e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8010980:	2300      	movs	r3, #0
 8010982:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8010984:	687b      	ldr	r3, [r7, #4]
 8010986:	781a      	ldrb	r2, [r3, #0]
 8010988:	68bb      	ldr	r3, [r7, #8]
 801098a:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	785a      	ldrb	r2, [r3, #1]
 8010990:	68bb      	ldr	r3, [r7, #8]
 8010992:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	789a      	ldrb	r2, [r3, #2]
 8010998:	68bb      	ldr	r3, [r7, #8]
 801099a:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	78da      	ldrb	r2, [r3, #3]
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	3304      	adds	r3, #4
 80109a8:	781b      	ldrb	r3, [r3, #0]
 80109aa:	b29a      	uxth	r2, r3
 80109ac:	687b      	ldr	r3, [r7, #4]
 80109ae:	3305      	adds	r3, #5
 80109b0:	781b      	ldrb	r3, [r3, #0]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	021b      	lsls	r3, r3, #8
 80109b6:	b29b      	uxth	r3, r3
 80109b8:	4313      	orrs	r3, r2
 80109ba:	b29a      	uxth	r2, r3
 80109bc:	68bb      	ldr	r3, [r7, #8]
 80109be:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	799a      	ldrb	r2, [r3, #6]
 80109c4:	68bb      	ldr	r3, [r7, #8]
 80109c6:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80109c8:	68bb      	ldr	r3, [r7, #8]
 80109ca:	889b      	ldrh	r3, [r3, #4]
 80109cc:	2b00      	cmp	r3, #0
 80109ce:	d102      	bne.n	80109d6 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80109d0:	2303      	movs	r3, #3
 80109d2:	75fb      	strb	r3, [r7, #23]
 80109d4:	e00d      	b.n	80109f2 <USBH_ParseEPDesc+0x7e>
      ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_EP_PACKET_SIZE);
    }
    else
    {
      /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
      ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80109d6:	68bb      	ldr	r3, [r7, #8]
 80109d8:	889a      	ldrh	r2, [r3, #4]
 80109da:	4b26      	ldr	r3, [pc, #152]	; (8010a74 <USBH_ParseEPDesc+0x100>)
 80109dc:	4013      	ands	r3, r2
 80109de:	b29a      	uxth	r2, r3
 80109e0:	68bb      	ldr	r3, [r7, #8]
 80109e2:	809a      	strh	r2, [r3, #4]
      ep_descriptor->wMaxPacketSize |= USBH_MAX_EP_PACKET_SIZE;
 80109e4:	68bb      	ldr	r3, [r7, #8]
 80109e6:	889b      	ldrh	r3, [r3, #4]
 80109e8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80109ec:	b29a      	uxth	r2, r3
 80109ee:	68bb      	ldr	r3, [r7, #8]
 80109f0:	809a      	strh	r2, [r3, #4]
    }
  }
  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 80109f2:	68fb      	ldr	r3, [r7, #12]
 80109f4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d116      	bne.n	8010a2a <USBH_ParseEPDesc+0xb6>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80109fc:	68bb      	ldr	r3, [r7, #8]
 80109fe:	78db      	ldrb	r3, [r3, #3]
 8010a00:	f003 0303 	and.w	r3, r3, #3
 8010a04:	2b01      	cmp	r3, #1
 8010a06:	d005      	beq.n	8010a14 <USBH_ParseEPDesc+0xa0>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8010a08:	68bb      	ldr	r3, [r7, #8]
 8010a0a:	78db      	ldrb	r3, [r3, #3]
 8010a0c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8010a10:	2b03      	cmp	r3, #3
 8010a12:	d127      	bne.n	8010a64 <USBH_ParseEPDesc+0xf0>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010a14:	68bb      	ldr	r3, [r7, #8]
 8010a16:	799b      	ldrb	r3, [r3, #6]
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d003      	beq.n	8010a24 <USBH_ParseEPDesc+0xb0>
 8010a1c:	68bb      	ldr	r3, [r7, #8]
 8010a1e:	799b      	ldrb	r3, [r3, #6]
 8010a20:	2b10      	cmp	r3, #16
 8010a22:	d91f      	bls.n	8010a64 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8010a24:	2303      	movs	r3, #3
 8010a26:	75fb      	strb	r3, [r7, #23]
 8010a28:	e01c      	b.n	8010a64 <USBH_ParseEPDesc+0xf0>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8010a2a:	68bb      	ldr	r3, [r7, #8]
 8010a2c:	78db      	ldrb	r3, [r3, #3]
 8010a2e:	f003 0303 	and.w	r3, r3, #3
 8010a32:	2b01      	cmp	r3, #1
 8010a34:	d10a      	bne.n	8010a4c <USBH_ParseEPDesc+0xd8>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8010a36:	68bb      	ldr	r3, [r7, #8]
 8010a38:	799b      	ldrb	r3, [r3, #6]
 8010a3a:	2b00      	cmp	r3, #0
 8010a3c:	d003      	beq.n	8010a46 <USBH_ParseEPDesc+0xd2>
 8010a3e:	68bb      	ldr	r3, [r7, #8]
 8010a40:	799b      	ldrb	r3, [r3, #6]
 8010a42:	2b10      	cmp	r3, #16
 8010a44:	d90e      	bls.n	8010a64 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8010a46:	2303      	movs	r3, #3
 8010a48:	75fb      	strb	r3, [r7, #23]
 8010a4a:	e00b      	b.n	8010a64 <USBH_ParseEPDesc+0xf0>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8010a4c:	68bb      	ldr	r3, [r7, #8]
 8010a4e:	78db      	ldrb	r3, [r3, #3]
 8010a50:	f003 0303 	and.w	r3, r3, #3
 8010a54:	2b03      	cmp	r3, #3
 8010a56:	d105      	bne.n	8010a64 <USBH_ParseEPDesc+0xf0>
    {
      if (ep_descriptor->bInterval == 0U)
 8010a58:	68bb      	ldr	r3, [r7, #8]
 8010a5a:	799b      	ldrb	r3, [r3, #6]
 8010a5c:	2b00      	cmp	r3, #0
 8010a5e:	d101      	bne.n	8010a64 <USBH_ParseEPDesc+0xf0>
      {
        status = USBH_NOT_SUPPORTED;
 8010a60:	2303      	movs	r3, #3
 8010a62:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 8010a64:	7dfb      	ldrb	r3, [r7, #23]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	371c      	adds	r7, #28
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop
 8010a74:	fffff800 	.word	0xfffff800

08010a78 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8010a78:	b480      	push	{r7}
 8010a7a:	b087      	sub	sp, #28
 8010a7c:	af00      	add	r7, sp, #0
 8010a7e:	60f8      	str	r0, [r7, #12]
 8010a80:	60b9      	str	r1, [r7, #8]
 8010a82:	4613      	mov	r3, r2
 8010a84:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8010a86:	68fb      	ldr	r3, [r7, #12]
 8010a88:	3301      	adds	r3, #1
 8010a8a:	781b      	ldrb	r3, [r3, #0]
 8010a8c:	2b03      	cmp	r3, #3
 8010a8e:	d120      	bne.n	8010ad2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	781b      	ldrb	r3, [r3, #0]
 8010a94:	1e9a      	subs	r2, r3, #2
 8010a96:	88fb      	ldrh	r3, [r7, #6]
 8010a98:	4293      	cmp	r3, r2
 8010a9a:	bf28      	it	cs
 8010a9c:	4613      	movcs	r3, r2
 8010a9e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8010aa0:	68fb      	ldr	r3, [r7, #12]
 8010aa2:	3302      	adds	r3, #2
 8010aa4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	82fb      	strh	r3, [r7, #22]
 8010aaa:	e00b      	b.n	8010ac4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8010aac:	8afb      	ldrh	r3, [r7, #22]
 8010aae:	68fa      	ldr	r2, [r7, #12]
 8010ab0:	4413      	add	r3, r2
 8010ab2:	781a      	ldrb	r2, [r3, #0]
 8010ab4:	68bb      	ldr	r3, [r7, #8]
 8010ab6:	701a      	strb	r2, [r3, #0]
      pdest++;
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	3301      	adds	r3, #1
 8010abc:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8010abe:	8afb      	ldrh	r3, [r7, #22]
 8010ac0:	3302      	adds	r3, #2
 8010ac2:	82fb      	strh	r3, [r7, #22]
 8010ac4:	8afa      	ldrh	r2, [r7, #22]
 8010ac6:	8abb      	ldrh	r3, [r7, #20]
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d3ef      	bcc.n	8010aac <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8010acc:	68bb      	ldr	r3, [r7, #8]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	701a      	strb	r2, [r3, #0]
  }
}
 8010ad2:	bf00      	nop
 8010ad4:	371c      	adds	r7, #28
 8010ad6:	46bd      	mov	sp, r7
 8010ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010adc:	4770      	bx	lr

08010ade <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8010ade:	b480      	push	{r7}
 8010ae0:	b085      	sub	sp, #20
 8010ae2:	af00      	add	r7, sp, #0
 8010ae4:	6078      	str	r0, [r7, #4]
 8010ae6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8010ae8:	683b      	ldr	r3, [r7, #0]
 8010aea:	881a      	ldrh	r2, [r3, #0]
 8010aec:	687b      	ldr	r3, [r7, #4]
 8010aee:	781b      	ldrb	r3, [r3, #0]
 8010af0:	b29b      	uxth	r3, r3
 8010af2:	4413      	add	r3, r2
 8010af4:	b29a      	uxth	r2, r3
 8010af6:	683b      	ldr	r3, [r7, #0]
 8010af8:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	781b      	ldrb	r3, [r3, #0]
 8010afe:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	4413      	add	r3, r2
 8010b04:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8010b06:	68fb      	ldr	r3, [r7, #12]
}
 8010b08:	4618      	mov	r0, r3
 8010b0a:	3714      	adds	r7, #20
 8010b0c:	46bd      	mov	sp, r7
 8010b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b12:	4770      	bx	lr

08010b14 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8010b14:	b580      	push	{r7, lr}
 8010b16:	b086      	sub	sp, #24
 8010b18:	af00      	add	r7, sp, #0
 8010b1a:	60f8      	str	r0, [r7, #12]
 8010b1c:	60b9      	str	r1, [r7, #8]
 8010b1e:	4613      	mov	r3, r2
 8010b20:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8010b22:	2301      	movs	r3, #1
 8010b24:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8010b26:	68fb      	ldr	r3, [r7, #12]
 8010b28:	789b      	ldrb	r3, [r3, #2]
 8010b2a:	2b01      	cmp	r3, #1
 8010b2c:	d002      	beq.n	8010b34 <USBH_CtlReq+0x20>
 8010b2e:	2b02      	cmp	r3, #2
 8010b30:	d00f      	beq.n	8010b52 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8010b32:	e027      	b.n	8010b84 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	68ba      	ldr	r2, [r7, #8]
 8010b38:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8010b3a:	68fb      	ldr	r3, [r7, #12]
 8010b3c:	88fa      	ldrh	r2, [r7, #6]
 8010b3e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8010b40:	68fb      	ldr	r3, [r7, #12]
 8010b42:	2201      	movs	r2, #1
 8010b44:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2202      	movs	r2, #2
 8010b4a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8010b4c:	2301      	movs	r3, #1
 8010b4e:	75fb      	strb	r3, [r7, #23]
      break;
 8010b50:	e018      	b.n	8010b84 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8010b52:	68f8      	ldr	r0, [r7, #12]
 8010b54:	f000 f81c 	bl	8010b90 <USBH_HandleControl>
 8010b58:	4603      	mov	r3, r0
 8010b5a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8010b5c:	7dfb      	ldrb	r3, [r7, #23]
 8010b5e:	2b00      	cmp	r3, #0
 8010b60:	d002      	beq.n	8010b68 <USBH_CtlReq+0x54>
 8010b62:	7dfb      	ldrb	r3, [r7, #23]
 8010b64:	2b03      	cmp	r3, #3
 8010b66:	d106      	bne.n	8010b76 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8010b68:	68fb      	ldr	r3, [r7, #12]
 8010b6a:	2201      	movs	r2, #1
 8010b6c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8010b6e:	68fb      	ldr	r3, [r7, #12]
 8010b70:	2200      	movs	r2, #0
 8010b72:	761a      	strb	r2, [r3, #24]
      break;
 8010b74:	e005      	b.n	8010b82 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8010b76:	7dfb      	ldrb	r3, [r7, #23]
 8010b78:	2b02      	cmp	r3, #2
 8010b7a:	d102      	bne.n	8010b82 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8010b7c:	68fb      	ldr	r3, [r7, #12]
 8010b7e:	2201      	movs	r2, #1
 8010b80:	709a      	strb	r2, [r3, #2]
      break;
 8010b82:	bf00      	nop
  }
  return status;
 8010b84:	7dfb      	ldrb	r3, [r7, #23]
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3718      	adds	r7, #24
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
	...

08010b90 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8010b90:	b580      	push	{r7, lr}
 8010b92:	b086      	sub	sp, #24
 8010b94:	af02      	add	r7, sp, #8
 8010b96:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8010b98:	2301      	movs	r3, #1
 8010b9a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8010b9c:	2300      	movs	r3, #0
 8010b9e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8010ba0:	687b      	ldr	r3, [r7, #4]
 8010ba2:	7e1b      	ldrb	r3, [r3, #24]
 8010ba4:	3b01      	subs	r3, #1
 8010ba6:	2b0a      	cmp	r3, #10
 8010ba8:	f200 8156 	bhi.w	8010e58 <USBH_HandleControl+0x2c8>
 8010bac:	a201      	add	r2, pc, #4	; (adr r2, 8010bb4 <USBH_HandleControl+0x24>)
 8010bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010bb2:	bf00      	nop
 8010bb4:	08010be1 	.word	0x08010be1
 8010bb8:	08010bfb 	.word	0x08010bfb
 8010bbc:	08010c65 	.word	0x08010c65
 8010bc0:	08010c8b 	.word	0x08010c8b
 8010bc4:	08010cc3 	.word	0x08010cc3
 8010bc8:	08010ced 	.word	0x08010ced
 8010bcc:	08010d3f 	.word	0x08010d3f
 8010bd0:	08010d61 	.word	0x08010d61
 8010bd4:	08010d9d 	.word	0x08010d9d
 8010bd8:	08010dc3 	.word	0x08010dc3
 8010bdc:	08010e01 	.word	0x08010e01
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	f103 0110 	add.w	r1, r3, #16
 8010be6:	687b      	ldr	r3, [r7, #4]
 8010be8:	795b      	ldrb	r3, [r3, #5]
 8010bea:	461a      	mov	r2, r3
 8010bec:	6878      	ldr	r0, [r7, #4]
 8010bee:	f000 f943 	bl	8010e78 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8010bf2:	687b      	ldr	r3, [r7, #4]
 8010bf4:	2202      	movs	r2, #2
 8010bf6:	761a      	strb	r2, [r3, #24]
      break;
 8010bf8:	e139      	b.n	8010e6e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	795b      	ldrb	r3, [r3, #5]
 8010bfe:	4619      	mov	r1, r3
 8010c00:	6878      	ldr	r0, [r7, #4]
 8010c02:	f001 fab3 	bl	801216c <USBH_LL_GetURBState>
 8010c06:	4603      	mov	r3, r0
 8010c08:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8010c0a:	7bbb      	ldrb	r3, [r7, #14]
 8010c0c:	2b01      	cmp	r3, #1
 8010c0e:	d11e      	bne.n	8010c4e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8010c10:	687b      	ldr	r3, [r7, #4]
 8010c12:	7c1b      	ldrb	r3, [r3, #16]
 8010c14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8010c18:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	8adb      	ldrh	r3, [r3, #22]
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d00a      	beq.n	8010c38 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8010c22:	7b7b      	ldrb	r3, [r7, #13]
 8010c24:	2b80      	cmp	r3, #128	; 0x80
 8010c26:	d103      	bne.n	8010c30 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2203      	movs	r2, #3
 8010c2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010c2e:	e115      	b.n	8010e5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8010c30:	687b      	ldr	r3, [r7, #4]
 8010c32:	2205      	movs	r2, #5
 8010c34:	761a      	strb	r2, [r3, #24]
      break;
 8010c36:	e111      	b.n	8010e5c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8010c38:	7b7b      	ldrb	r3, [r7, #13]
 8010c3a:	2b80      	cmp	r3, #128	; 0x80
 8010c3c:	d103      	bne.n	8010c46 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	2209      	movs	r2, #9
 8010c42:	761a      	strb	r2, [r3, #24]
      break;
 8010c44:	e10a      	b.n	8010e5c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2207      	movs	r2, #7
 8010c4a:	761a      	strb	r2, [r3, #24]
      break;
 8010c4c:	e106      	b.n	8010e5c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8010c4e:	7bbb      	ldrb	r3, [r7, #14]
 8010c50:	2b04      	cmp	r3, #4
 8010c52:	d003      	beq.n	8010c5c <USBH_HandleControl+0xcc>
 8010c54:	7bbb      	ldrb	r3, [r7, #14]
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	f040 8100 	bne.w	8010e5c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8010c5c:	687b      	ldr	r3, [r7, #4]
 8010c5e:	220b      	movs	r2, #11
 8010c60:	761a      	strb	r2, [r3, #24]
      break;
 8010c62:	e0fb      	b.n	8010e5c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010c6a:	b29a      	uxth	r2, r3
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8010c70:	687b      	ldr	r3, [r7, #4]
 8010c72:	6899      	ldr	r1, [r3, #8]
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	899a      	ldrh	r2, [r3, #12]
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	791b      	ldrb	r3, [r3, #4]
 8010c7c:	6878      	ldr	r0, [r7, #4]
 8010c7e:	f000 f93a 	bl	8010ef6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8010c82:	687b      	ldr	r3, [r7, #4]
 8010c84:	2204      	movs	r2, #4
 8010c86:	761a      	strb	r2, [r3, #24]
      break;
 8010c88:	e0f1      	b.n	8010e6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010c8a:	687b      	ldr	r3, [r7, #4]
 8010c8c:	791b      	ldrb	r3, [r3, #4]
 8010c8e:	4619      	mov	r1, r3
 8010c90:	6878      	ldr	r0, [r7, #4]
 8010c92:	f001 fa6b 	bl	801216c <USBH_LL_GetURBState>
 8010c96:	4603      	mov	r3, r0
 8010c98:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8010c9a:	7bbb      	ldrb	r3, [r7, #14]
 8010c9c:	2b01      	cmp	r3, #1
 8010c9e:	d102      	bne.n	8010ca6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	2209      	movs	r2, #9
 8010ca4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8010ca6:	7bbb      	ldrb	r3, [r7, #14]
 8010ca8:	2b05      	cmp	r3, #5
 8010caa:	d102      	bne.n	8010cb2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8010cac:	2303      	movs	r3, #3
 8010cae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010cb0:	e0d6      	b.n	8010e60 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8010cb2:	7bbb      	ldrb	r3, [r7, #14]
 8010cb4:	2b04      	cmp	r3, #4
 8010cb6:	f040 80d3 	bne.w	8010e60 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8010cba:	687b      	ldr	r3, [r7, #4]
 8010cbc:	220b      	movs	r2, #11
 8010cbe:	761a      	strb	r2, [r3, #24]
      break;
 8010cc0:	e0ce      	b.n	8010e60 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8010cc2:	687b      	ldr	r3, [r7, #4]
 8010cc4:	6899      	ldr	r1, [r3, #8]
 8010cc6:	687b      	ldr	r3, [r7, #4]
 8010cc8:	899a      	ldrh	r2, [r3, #12]
 8010cca:	687b      	ldr	r3, [r7, #4]
 8010ccc:	795b      	ldrb	r3, [r3, #5]
 8010cce:	2001      	movs	r0, #1
 8010cd0:	9000      	str	r0, [sp, #0]
 8010cd2:	6878      	ldr	r0, [r7, #4]
 8010cd4:	f000 f8ea 	bl	8010eac <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8010cd8:	687b      	ldr	r3, [r7, #4]
 8010cda:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010cde:	b29a      	uxth	r2, r3
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8010ce4:	687b      	ldr	r3, [r7, #4]
 8010ce6:	2206      	movs	r2, #6
 8010ce8:	761a      	strb	r2, [r3, #24]
      break;
 8010cea:	e0c0      	b.n	8010e6e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010cec:	687b      	ldr	r3, [r7, #4]
 8010cee:	795b      	ldrb	r3, [r3, #5]
 8010cf0:	4619      	mov	r1, r3
 8010cf2:	6878      	ldr	r0, [r7, #4]
 8010cf4:	f001 fa3a 	bl	801216c <USBH_LL_GetURBState>
 8010cf8:	4603      	mov	r3, r0
 8010cfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010cfc:	7bbb      	ldrb	r3, [r7, #14]
 8010cfe:	2b01      	cmp	r3, #1
 8010d00:	d103      	bne.n	8010d0a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	2207      	movs	r2, #7
 8010d06:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010d08:	e0ac      	b.n	8010e64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8010d0a:	7bbb      	ldrb	r3, [r7, #14]
 8010d0c:	2b05      	cmp	r3, #5
 8010d0e:	d105      	bne.n	8010d1c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	220c      	movs	r2, #12
 8010d14:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8010d16:	2303      	movs	r3, #3
 8010d18:	73fb      	strb	r3, [r7, #15]
      break;
 8010d1a:	e0a3      	b.n	8010e64 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010d1c:	7bbb      	ldrb	r3, [r7, #14]
 8010d1e:	2b02      	cmp	r3, #2
 8010d20:	d103      	bne.n	8010d2a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8010d22:	687b      	ldr	r3, [r7, #4]
 8010d24:	2205      	movs	r2, #5
 8010d26:	761a      	strb	r2, [r3, #24]
      break;
 8010d28:	e09c      	b.n	8010e64 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8010d2a:	7bbb      	ldrb	r3, [r7, #14]
 8010d2c:	2b04      	cmp	r3, #4
 8010d2e:	f040 8099 	bne.w	8010e64 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	220b      	movs	r2, #11
 8010d36:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8010d38:	2302      	movs	r3, #2
 8010d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8010d3c:	e092      	b.n	8010e64 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8010d3e:	687b      	ldr	r3, [r7, #4]
 8010d40:	791b      	ldrb	r3, [r3, #4]
 8010d42:	2200      	movs	r2, #0
 8010d44:	2100      	movs	r1, #0
 8010d46:	6878      	ldr	r0, [r7, #4]
 8010d48:	f000 f8d5 	bl	8010ef6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010d52:	b29a      	uxth	r2, r3
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8010d58:	687b      	ldr	r3, [r7, #4]
 8010d5a:	2208      	movs	r2, #8
 8010d5c:	761a      	strb	r2, [r3, #24]

      break;
 8010d5e:	e086      	b.n	8010e6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8010d60:	687b      	ldr	r3, [r7, #4]
 8010d62:	791b      	ldrb	r3, [r3, #4]
 8010d64:	4619      	mov	r1, r3
 8010d66:	6878      	ldr	r0, [r7, #4]
 8010d68:	f001 fa00 	bl	801216c <USBH_LL_GetURBState>
 8010d6c:	4603      	mov	r3, r0
 8010d6e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8010d70:	7bbb      	ldrb	r3, [r7, #14]
 8010d72:	2b01      	cmp	r3, #1
 8010d74:	d105      	bne.n	8010d82 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	220d      	movs	r2, #13
 8010d7a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8010d7c:	2300      	movs	r3, #0
 8010d7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010d80:	e072      	b.n	8010e68 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8010d82:	7bbb      	ldrb	r3, [r7, #14]
 8010d84:	2b04      	cmp	r3, #4
 8010d86:	d103      	bne.n	8010d90 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8010d88:	687b      	ldr	r3, [r7, #4]
 8010d8a:	220b      	movs	r2, #11
 8010d8c:	761a      	strb	r2, [r3, #24]
      break;
 8010d8e:	e06b      	b.n	8010e68 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8010d90:	7bbb      	ldrb	r3, [r7, #14]
 8010d92:	2b05      	cmp	r3, #5
 8010d94:	d168      	bne.n	8010e68 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8010d96:	2303      	movs	r3, #3
 8010d98:	73fb      	strb	r3, [r7, #15]
      break;
 8010d9a:	e065      	b.n	8010e68 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8010d9c:	687b      	ldr	r3, [r7, #4]
 8010d9e:	795b      	ldrb	r3, [r3, #5]
 8010da0:	2201      	movs	r2, #1
 8010da2:	9200      	str	r2, [sp, #0]
 8010da4:	2200      	movs	r2, #0
 8010da6:	2100      	movs	r1, #0
 8010da8:	6878      	ldr	r0, [r7, #4]
 8010daa:	f000 f87f 	bl	8010eac <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8010db4:	b29a      	uxth	r2, r3
 8010db6:	687b      	ldr	r3, [r7, #4]
 8010db8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	220a      	movs	r2, #10
 8010dbe:	761a      	strb	r2, [r3, #24]
      break;
 8010dc0:	e055      	b.n	8010e6e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	795b      	ldrb	r3, [r3, #5]
 8010dc6:	4619      	mov	r1, r3
 8010dc8:	6878      	ldr	r0, [r7, #4]
 8010dca:	f001 f9cf 	bl	801216c <USBH_LL_GetURBState>
 8010dce:	4603      	mov	r3, r0
 8010dd0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8010dd2:	7bbb      	ldrb	r3, [r7, #14]
 8010dd4:	2b01      	cmp	r3, #1
 8010dd6:	d105      	bne.n	8010de4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8010dd8:	2300      	movs	r3, #0
 8010dda:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	220d      	movs	r2, #13
 8010de0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8010de2:	e043      	b.n	8010e6c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8010de4:	7bbb      	ldrb	r3, [r7, #14]
 8010de6:	2b02      	cmp	r3, #2
 8010de8:	d103      	bne.n	8010df2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8010dea:	687b      	ldr	r3, [r7, #4]
 8010dec:	2209      	movs	r2, #9
 8010dee:	761a      	strb	r2, [r3, #24]
      break;
 8010df0:	e03c      	b.n	8010e6c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8010df2:	7bbb      	ldrb	r3, [r7, #14]
 8010df4:	2b04      	cmp	r3, #4
 8010df6:	d139      	bne.n	8010e6c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	220b      	movs	r2, #11
 8010dfc:	761a      	strb	r2, [r3, #24]
      break;
 8010dfe:	e035      	b.n	8010e6c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	7e5b      	ldrb	r3, [r3, #25]
 8010e04:	3301      	adds	r3, #1
 8010e06:	b2da      	uxtb	r2, r3
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	765a      	strb	r2, [r3, #25]
 8010e0c:	687b      	ldr	r3, [r7, #4]
 8010e0e:	7e5b      	ldrb	r3, [r3, #25]
 8010e10:	2b02      	cmp	r3, #2
 8010e12:	d806      	bhi.n	8010e22 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	2201      	movs	r2, #1
 8010e18:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	2201      	movs	r2, #1
 8010e1e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8010e20:	e025      	b.n	8010e6e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8010e28:	2106      	movs	r1, #6
 8010e2a:	6878      	ldr	r0, [r7, #4]
 8010e2c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	2200      	movs	r2, #0
 8010e32:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	795b      	ldrb	r3, [r3, #5]
 8010e38:	4619      	mov	r1, r3
 8010e3a:	6878      	ldr	r0, [r7, #4]
 8010e3c:	f000 f90c 	bl	8011058 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	791b      	ldrb	r3, [r3, #4]
 8010e44:	4619      	mov	r1, r3
 8010e46:	6878      	ldr	r0, [r7, #4]
 8010e48:	f000 f906 	bl	8011058 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	2200      	movs	r2, #0
 8010e50:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8010e52:	2302      	movs	r3, #2
 8010e54:	73fb      	strb	r3, [r7, #15]
      break;
 8010e56:	e00a      	b.n	8010e6e <USBH_HandleControl+0x2de>

    default:
      break;
 8010e58:	bf00      	nop
 8010e5a:	e008      	b.n	8010e6e <USBH_HandleControl+0x2de>
      break;
 8010e5c:	bf00      	nop
 8010e5e:	e006      	b.n	8010e6e <USBH_HandleControl+0x2de>
      break;
 8010e60:	bf00      	nop
 8010e62:	e004      	b.n	8010e6e <USBH_HandleControl+0x2de>
      break;
 8010e64:	bf00      	nop
 8010e66:	e002      	b.n	8010e6e <USBH_HandleControl+0x2de>
      break;
 8010e68:	bf00      	nop
 8010e6a:	e000      	b.n	8010e6e <USBH_HandleControl+0x2de>
      break;
 8010e6c:	bf00      	nop
  }

  return status;
 8010e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e70:	4618      	mov	r0, r3
 8010e72:	3710      	adds	r7, #16
 8010e74:	46bd      	mov	sp, r7
 8010e76:	bd80      	pop	{r7, pc}

08010e78 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8010e78:	b580      	push	{r7, lr}
 8010e7a:	b088      	sub	sp, #32
 8010e7c:	af04      	add	r7, sp, #16
 8010e7e:	60f8      	str	r0, [r7, #12]
 8010e80:	60b9      	str	r1, [r7, #8]
 8010e82:	4613      	mov	r3, r2
 8010e84:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010e86:	79f9      	ldrb	r1, [r7, #7]
 8010e88:	2300      	movs	r3, #0
 8010e8a:	9303      	str	r3, [sp, #12]
 8010e8c:	2308      	movs	r3, #8
 8010e8e:	9302      	str	r3, [sp, #8]
 8010e90:	68bb      	ldr	r3, [r7, #8]
 8010e92:	9301      	str	r3, [sp, #4]
 8010e94:	2300      	movs	r3, #0
 8010e96:	9300      	str	r3, [sp, #0]
 8010e98:	2300      	movs	r3, #0
 8010e9a:	2200      	movs	r2, #0
 8010e9c:	68f8      	ldr	r0, [r7, #12]
 8010e9e:	f001 f934 	bl	801210a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8010ea2:	2300      	movs	r3, #0
}
 8010ea4:	4618      	mov	r0, r3
 8010ea6:	3710      	adds	r7, #16
 8010ea8:	46bd      	mov	sp, r7
 8010eaa:	bd80      	pop	{r7, pc}

08010eac <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8010eac:	b580      	push	{r7, lr}
 8010eae:	b088      	sub	sp, #32
 8010eb0:	af04      	add	r7, sp, #16
 8010eb2:	60f8      	str	r0, [r7, #12]
 8010eb4:	60b9      	str	r1, [r7, #8]
 8010eb6:	4611      	mov	r1, r2
 8010eb8:	461a      	mov	r2, r3
 8010eba:	460b      	mov	r3, r1
 8010ebc:	80fb      	strh	r3, [r7, #6]
 8010ebe:	4613      	mov	r3, r2
 8010ec0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010ec2:	68fb      	ldr	r3, [r7, #12]
 8010ec4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010ec8:	2b00      	cmp	r3, #0
 8010eca:	d001      	beq.n	8010ed0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8010ecc:	2300      	movs	r3, #0
 8010ece:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010ed0:	7979      	ldrb	r1, [r7, #5]
 8010ed2:	7e3b      	ldrb	r3, [r7, #24]
 8010ed4:	9303      	str	r3, [sp, #12]
 8010ed6:	88fb      	ldrh	r3, [r7, #6]
 8010ed8:	9302      	str	r3, [sp, #8]
 8010eda:	68bb      	ldr	r3, [r7, #8]
 8010edc:	9301      	str	r3, [sp, #4]
 8010ede:	2301      	movs	r3, #1
 8010ee0:	9300      	str	r3, [sp, #0]
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	2200      	movs	r2, #0
 8010ee6:	68f8      	ldr	r0, [r7, #12]
 8010ee8:	f001 f90f 	bl	801210a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8010eec:	2300      	movs	r3, #0
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3710      	adds	r7, #16
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	bd80      	pop	{r7, pc}

08010ef6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8010ef6:	b580      	push	{r7, lr}
 8010ef8:	b088      	sub	sp, #32
 8010efa:	af04      	add	r7, sp, #16
 8010efc:	60f8      	str	r0, [r7, #12]
 8010efe:	60b9      	str	r1, [r7, #8]
 8010f00:	4611      	mov	r1, r2
 8010f02:	461a      	mov	r2, r3
 8010f04:	460b      	mov	r3, r1
 8010f06:	80fb      	strh	r3, [r7, #6]
 8010f08:	4613      	mov	r3, r2
 8010f0a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010f0c:	7979      	ldrb	r1, [r7, #5]
 8010f0e:	2300      	movs	r3, #0
 8010f10:	9303      	str	r3, [sp, #12]
 8010f12:	88fb      	ldrh	r3, [r7, #6]
 8010f14:	9302      	str	r3, [sp, #8]
 8010f16:	68bb      	ldr	r3, [r7, #8]
 8010f18:	9301      	str	r3, [sp, #4]
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	9300      	str	r3, [sp, #0]
 8010f1e:	2300      	movs	r3, #0
 8010f20:	2201      	movs	r2, #1
 8010f22:	68f8      	ldr	r0, [r7, #12]
 8010f24:	f001 f8f1 	bl	801210a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010f28:	2300      	movs	r3, #0

}
 8010f2a:	4618      	mov	r0, r3
 8010f2c:	3710      	adds	r7, #16
 8010f2e:	46bd      	mov	sp, r7
 8010f30:	bd80      	pop	{r7, pc}

08010f32 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8010f32:	b580      	push	{r7, lr}
 8010f34:	b088      	sub	sp, #32
 8010f36:	af04      	add	r7, sp, #16
 8010f38:	60f8      	str	r0, [r7, #12]
 8010f3a:	60b9      	str	r1, [r7, #8]
 8010f3c:	4611      	mov	r1, r2
 8010f3e:	461a      	mov	r2, r3
 8010f40:	460b      	mov	r3, r1
 8010f42:	80fb      	strh	r3, [r7, #6]
 8010f44:	4613      	mov	r3, r2
 8010f46:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8010f48:	68fb      	ldr	r3, [r7, #12]
 8010f4a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8010f4e:	2b00      	cmp	r3, #0
 8010f50:	d001      	beq.n	8010f56 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8010f52:	2300      	movs	r3, #0
 8010f54:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010f56:	7979      	ldrb	r1, [r7, #5]
 8010f58:	7e3b      	ldrb	r3, [r7, #24]
 8010f5a:	9303      	str	r3, [sp, #12]
 8010f5c:	88fb      	ldrh	r3, [r7, #6]
 8010f5e:	9302      	str	r3, [sp, #8]
 8010f60:	68bb      	ldr	r3, [r7, #8]
 8010f62:	9301      	str	r3, [sp, #4]
 8010f64:	2301      	movs	r3, #1
 8010f66:	9300      	str	r3, [sp, #0]
 8010f68:	2302      	movs	r3, #2
 8010f6a:	2200      	movs	r2, #0
 8010f6c:	68f8      	ldr	r0, [r7, #12]
 8010f6e:	f001 f8cc 	bl	801210a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8010f72:	2300      	movs	r3, #0
}
 8010f74:	4618      	mov	r0, r3
 8010f76:	3710      	adds	r7, #16
 8010f78:	46bd      	mov	sp, r7
 8010f7a:	bd80      	pop	{r7, pc}

08010f7c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8010f7c:	b580      	push	{r7, lr}
 8010f7e:	b088      	sub	sp, #32
 8010f80:	af04      	add	r7, sp, #16
 8010f82:	60f8      	str	r0, [r7, #12]
 8010f84:	60b9      	str	r1, [r7, #8]
 8010f86:	4611      	mov	r1, r2
 8010f88:	461a      	mov	r2, r3
 8010f8a:	460b      	mov	r3, r1
 8010f8c:	80fb      	strh	r3, [r7, #6]
 8010f8e:	4613      	mov	r3, r2
 8010f90:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8010f92:	7979      	ldrb	r1, [r7, #5]
 8010f94:	2300      	movs	r3, #0
 8010f96:	9303      	str	r3, [sp, #12]
 8010f98:	88fb      	ldrh	r3, [r7, #6]
 8010f9a:	9302      	str	r3, [sp, #8]
 8010f9c:	68bb      	ldr	r3, [r7, #8]
 8010f9e:	9301      	str	r3, [sp, #4]
 8010fa0:	2301      	movs	r3, #1
 8010fa2:	9300      	str	r3, [sp, #0]
 8010fa4:	2302      	movs	r3, #2
 8010fa6:	2201      	movs	r2, #1
 8010fa8:	68f8      	ldr	r0, [r7, #12]
 8010faa:	f001 f8ae 	bl	801210a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	4618      	mov	r0, r3
 8010fb2:	3710      	adds	r7, #16
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}

08010fb8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8010fb8:	b580      	push	{r7, lr}
 8010fba:	b086      	sub	sp, #24
 8010fbc:	af04      	add	r7, sp, #16
 8010fbe:	6078      	str	r0, [r7, #4]
 8010fc0:	4608      	mov	r0, r1
 8010fc2:	4611      	mov	r1, r2
 8010fc4:	461a      	mov	r2, r3
 8010fc6:	4603      	mov	r3, r0
 8010fc8:	70fb      	strb	r3, [r7, #3]
 8010fca:	460b      	mov	r3, r1
 8010fcc:	70bb      	strb	r3, [r7, #2]
 8010fce:	4613      	mov	r3, r2
 8010fd0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8010fd2:	7878      	ldrb	r0, [r7, #1]
 8010fd4:	78ba      	ldrb	r2, [r7, #2]
 8010fd6:	78f9      	ldrb	r1, [r7, #3]
 8010fd8:	8b3b      	ldrh	r3, [r7, #24]
 8010fda:	9302      	str	r3, [sp, #8]
 8010fdc:	7d3b      	ldrb	r3, [r7, #20]
 8010fde:	9301      	str	r3, [sp, #4]
 8010fe0:	7c3b      	ldrb	r3, [r7, #16]
 8010fe2:	9300      	str	r3, [sp, #0]
 8010fe4:	4603      	mov	r3, r0
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f001 f841 	bl	801206e <USBH_LL_OpenPipe>

  return USBH_OK;
 8010fec:	2300      	movs	r3, #0
}
 8010fee:	4618      	mov	r0, r3
 8010ff0:	3708      	adds	r7, #8
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}

08010ff6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8010ff6:	b580      	push	{r7, lr}
 8010ff8:	b082      	sub	sp, #8
 8010ffa:	af00      	add	r7, sp, #0
 8010ffc:	6078      	str	r0, [r7, #4]
 8010ffe:	460b      	mov	r3, r1
 8011000:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8011002:	78fb      	ldrb	r3, [r7, #3]
 8011004:	4619      	mov	r1, r3
 8011006:	6878      	ldr	r0, [r7, #4]
 8011008:	f001 f860 	bl	80120cc <USBH_LL_ClosePipe>

  return USBH_OK;
 801100c:	2300      	movs	r3, #0
}
 801100e:	4618      	mov	r0, r3
 8011010:	3708      	adds	r7, #8
 8011012:	46bd      	mov	sp, r7
 8011014:	bd80      	pop	{r7, pc}

08011016 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8011016:	b580      	push	{r7, lr}
 8011018:	b084      	sub	sp, #16
 801101a:	af00      	add	r7, sp, #0
 801101c:	6078      	str	r0, [r7, #4]
 801101e:	460b      	mov	r3, r1
 8011020:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f000 f836 	bl	8011094 <USBH_GetFreePipe>
 8011028:	4603      	mov	r3, r0
 801102a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 801102c:	89fb      	ldrh	r3, [r7, #14]
 801102e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011032:	4293      	cmp	r3, r2
 8011034:	d00a      	beq.n	801104c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8011036:	78fa      	ldrb	r2, [r7, #3]
 8011038:	89fb      	ldrh	r3, [r7, #14]
 801103a:	f003 030f 	and.w	r3, r3, #15
 801103e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8011042:	6879      	ldr	r1, [r7, #4]
 8011044:	33e0      	adds	r3, #224	; 0xe0
 8011046:	009b      	lsls	r3, r3, #2
 8011048:	440b      	add	r3, r1
 801104a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 801104c:	89fb      	ldrh	r3, [r7, #14]
 801104e:	b2db      	uxtb	r3, r3
}
 8011050:	4618      	mov	r0, r3
 8011052:	3710      	adds	r7, #16
 8011054:	46bd      	mov	sp, r7
 8011056:	bd80      	pop	{r7, pc}

08011058 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8011058:	b480      	push	{r7}
 801105a:	b083      	sub	sp, #12
 801105c:	af00      	add	r7, sp, #0
 801105e:	6078      	str	r0, [r7, #4]
 8011060:	460b      	mov	r3, r1
 8011062:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8011064:	78fb      	ldrb	r3, [r7, #3]
 8011066:	2b0f      	cmp	r3, #15
 8011068:	d80d      	bhi.n	8011086 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 801106a:	78fb      	ldrb	r3, [r7, #3]
 801106c:	687a      	ldr	r2, [r7, #4]
 801106e:	33e0      	adds	r3, #224	; 0xe0
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	4413      	add	r3, r2
 8011074:	685a      	ldr	r2, [r3, #4]
 8011076:	78fb      	ldrb	r3, [r7, #3]
 8011078:	f3c2 020e 	ubfx	r2, r2, #0, #15
 801107c:	6879      	ldr	r1, [r7, #4]
 801107e:	33e0      	adds	r3, #224	; 0xe0
 8011080:	009b      	lsls	r3, r3, #2
 8011082:	440b      	add	r3, r1
 8011084:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8011086:	2300      	movs	r3, #0
}
 8011088:	4618      	mov	r0, r3
 801108a:	370c      	adds	r7, #12
 801108c:	46bd      	mov	sp, r7
 801108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011092:	4770      	bx	lr

08011094 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 801109c:	2300      	movs	r3, #0
 801109e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80110a0:	2300      	movs	r3, #0
 80110a2:	73fb      	strb	r3, [r7, #15]
 80110a4:	e00f      	b.n	80110c6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80110a6:	7bfb      	ldrb	r3, [r7, #15]
 80110a8:	687a      	ldr	r2, [r7, #4]
 80110aa:	33e0      	adds	r3, #224	; 0xe0
 80110ac:	009b      	lsls	r3, r3, #2
 80110ae:	4413      	add	r3, r2
 80110b0:	685b      	ldr	r3, [r3, #4]
 80110b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80110b6:	2b00      	cmp	r3, #0
 80110b8:	d102      	bne.n	80110c0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 80110ba:	7bfb      	ldrb	r3, [r7, #15]
 80110bc:	b29b      	uxth	r3, r3
 80110be:	e007      	b.n	80110d0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 80110c0:	7bfb      	ldrb	r3, [r7, #15]
 80110c2:	3301      	adds	r3, #1
 80110c4:	73fb      	strb	r3, [r7, #15]
 80110c6:	7bfb      	ldrb	r3, [r7, #15]
 80110c8:	2b0f      	cmp	r3, #15
 80110ca:	d9ec      	bls.n	80110a6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 80110cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 80110d0:	4618      	mov	r0, r3
 80110d2:	3714      	adds	r7, #20
 80110d4:	46bd      	mov	sp, r7
 80110d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110da:	4770      	bx	lr

080110dc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80110dc:	b480      	push	{r7}
 80110de:	b087      	sub	sp, #28
 80110e0:	af00      	add	r7, sp, #0
 80110e2:	60f8      	str	r0, [r7, #12]
 80110e4:	60b9      	str	r1, [r7, #8]
 80110e6:	4613      	mov	r3, r2
 80110e8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80110ea:	2301      	movs	r3, #1
 80110ec:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80110ee:	2300      	movs	r3, #0
 80110f0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80110f2:	4b1f      	ldr	r3, [pc, #124]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 80110f4:	7a5b      	ldrb	r3, [r3, #9]
 80110f6:	b2db      	uxtb	r3, r3
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	d131      	bne.n	8011160 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80110fc:	4b1c      	ldr	r3, [pc, #112]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 80110fe:	7a5b      	ldrb	r3, [r3, #9]
 8011100:	b2db      	uxtb	r3, r3
 8011102:	461a      	mov	r2, r3
 8011104:	4b1a      	ldr	r3, [pc, #104]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 8011106:	2100      	movs	r1, #0
 8011108:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 801110a:	4b19      	ldr	r3, [pc, #100]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 801110c:	7a5b      	ldrb	r3, [r3, #9]
 801110e:	b2db      	uxtb	r3, r3
 8011110:	4a17      	ldr	r2, [pc, #92]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 8011112:	009b      	lsls	r3, r3, #2
 8011114:	4413      	add	r3, r2
 8011116:	68fa      	ldr	r2, [r7, #12]
 8011118:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 801111a:	4b15      	ldr	r3, [pc, #84]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 801111c:	7a5b      	ldrb	r3, [r3, #9]
 801111e:	b2db      	uxtb	r3, r3
 8011120:	461a      	mov	r2, r3
 8011122:	4b13      	ldr	r3, [pc, #76]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 8011124:	4413      	add	r3, r2
 8011126:	79fa      	ldrb	r2, [r7, #7]
 8011128:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 801112a:	4b11      	ldr	r3, [pc, #68]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 801112c:	7a5b      	ldrb	r3, [r3, #9]
 801112e:	b2db      	uxtb	r3, r3
 8011130:	1c5a      	adds	r2, r3, #1
 8011132:	b2d1      	uxtb	r1, r2
 8011134:	4a0e      	ldr	r2, [pc, #56]	; (8011170 <FATFS_LinkDriverEx+0x94>)
 8011136:	7251      	strb	r1, [r2, #9]
 8011138:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 801113a:	7dbb      	ldrb	r3, [r7, #22]
 801113c:	3330      	adds	r3, #48	; 0x30
 801113e:	b2da      	uxtb	r2, r3
 8011140:	68bb      	ldr	r3, [r7, #8]
 8011142:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011144:	68bb      	ldr	r3, [r7, #8]
 8011146:	3301      	adds	r3, #1
 8011148:	223a      	movs	r2, #58	; 0x3a
 801114a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 801114c:	68bb      	ldr	r3, [r7, #8]
 801114e:	3302      	adds	r3, #2
 8011150:	222f      	movs	r2, #47	; 0x2f
 8011152:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011154:	68bb      	ldr	r3, [r7, #8]
 8011156:	3303      	adds	r3, #3
 8011158:	2200      	movs	r2, #0
 801115a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 801115c:	2300      	movs	r3, #0
 801115e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8011160:	7dfb      	ldrb	r3, [r7, #23]
}
 8011162:	4618      	mov	r0, r3
 8011164:	371c      	adds	r7, #28
 8011166:	46bd      	mov	sp, r7
 8011168:	f85d 7b04 	ldr.w	r7, [sp], #4
 801116c:	4770      	bx	lr
 801116e:	bf00      	nop
 8011170:	2000069c 	.word	0x2000069c

08011174 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 801117e:	2200      	movs	r2, #0
 8011180:	6839      	ldr	r1, [r7, #0]
 8011182:	6878      	ldr	r0, [r7, #4]
 8011184:	f7ff ffaa 	bl	80110dc <FATFS_LinkDriverEx>
 8011188:	4603      	mov	r3, r0
}
 801118a:	4618      	mov	r0, r3
 801118c:	3708      	adds	r7, #8
 801118e:	46bd      	mov	sp, r7
 8011190:	bd80      	pop	{r7, pc}
	...

08011194 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011194:	b580      	push	{r7, lr}
 8011196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8011198:	2201      	movs	r2, #1
 801119a:	4912      	ldr	r1, [pc, #72]	; (80111e4 <MX_USB_DEVICE_Init+0x50>)
 801119c:	4812      	ldr	r0, [pc, #72]	; (80111e8 <MX_USB_DEVICE_Init+0x54>)
 801119e:	f7fc fc99 	bl	800dad4 <USBD_Init>
 80111a2:	4603      	mov	r3, r0
 80111a4:	2b00      	cmp	r3, #0
 80111a6:	d001      	beq.n	80111ac <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80111a8:	f7f0 fa8c 	bl	80016c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 80111ac:	490f      	ldr	r1, [pc, #60]	; (80111ec <MX_USB_DEVICE_Init+0x58>)
 80111ae:	480e      	ldr	r0, [pc, #56]	; (80111e8 <MX_USB_DEVICE_Init+0x54>)
 80111b0:	f7fc fcc0 	bl	800db34 <USBD_RegisterClass>
 80111b4:	4603      	mov	r3, r0
 80111b6:	2b00      	cmp	r3, #0
 80111b8:	d001      	beq.n	80111be <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80111ba:	f7f0 fa83 	bl	80016c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 80111be:	490c      	ldr	r1, [pc, #48]	; (80111f0 <MX_USB_DEVICE_Init+0x5c>)
 80111c0:	4809      	ldr	r0, [pc, #36]	; (80111e8 <MX_USB_DEVICE_Init+0x54>)
 80111c2:	f7fc fbb7 	bl	800d934 <USBD_CDC_RegisterInterface>
 80111c6:	4603      	mov	r3, r0
 80111c8:	2b00      	cmp	r3, #0
 80111ca:	d001      	beq.n	80111d0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80111cc:	f7f0 fa7a 	bl	80016c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 80111d0:	4805      	ldr	r0, [pc, #20]	; (80111e8 <MX_USB_DEVICE_Init+0x54>)
 80111d2:	f7fc fce5 	bl	800dba0 <USBD_Start>
 80111d6:	4603      	mov	r3, r0
 80111d8:	2b00      	cmp	r3, #0
 80111da:	d001      	beq.n	80111e0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80111dc:	f7f0 fa72 	bl	80016c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80111e0:	bf00      	nop
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	200000cc 	.word	0x200000cc
 80111e8:	200006a8 	.word	0x200006a8
 80111ec:	20000018 	.word	0x20000018
 80111f0:	200000b8 	.word	0x200000b8

080111f4 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 80111f4:	b580      	push	{r7, lr}
 80111f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 80111f8:	2200      	movs	r2, #0
 80111fa:	4905      	ldr	r1, [pc, #20]	; (8011210 <CDC_Init_HS+0x1c>)
 80111fc:	4805      	ldr	r0, [pc, #20]	; (8011214 <CDC_Init_HS+0x20>)
 80111fe:	f7fc fbb3 	bl	800d968 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8011202:	4905      	ldr	r1, [pc, #20]	; (8011218 <CDC_Init_HS+0x24>)
 8011204:	4803      	ldr	r0, [pc, #12]	; (8011214 <CDC_Init_HS+0x20>)
 8011206:	f7fc fbd1 	bl	800d9ac <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801120a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 801120c:	4618      	mov	r0, r3
 801120e:	bd80      	pop	{r7, pc}
 8011210:	20001184 	.word	0x20001184
 8011214:	200006a8 	.word	0x200006a8
 8011218:	20000984 	.word	0x20000984

0801121c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 801121c:	b480      	push	{r7}
 801121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8011220:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8011222:	4618      	mov	r0, r3
 8011224:	46bd      	mov	sp, r7
 8011226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122a:	4770      	bx	lr

0801122c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801122c:	b480      	push	{r7}
 801122e:	b083      	sub	sp, #12
 8011230:	af00      	add	r7, sp, #0
 8011232:	4603      	mov	r3, r0
 8011234:	6039      	str	r1, [r7, #0]
 8011236:	71fb      	strb	r3, [r7, #7]
 8011238:	4613      	mov	r3, r2
 801123a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 801123c:	79fb      	ldrb	r3, [r7, #7]
 801123e:	2b23      	cmp	r3, #35	; 0x23
 8011240:	d84a      	bhi.n	80112d8 <CDC_Control_HS+0xac>
 8011242:	a201      	add	r2, pc, #4	; (adr r2, 8011248 <CDC_Control_HS+0x1c>)
 8011244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011248:	080112d9 	.word	0x080112d9
 801124c:	080112d9 	.word	0x080112d9
 8011250:	080112d9 	.word	0x080112d9
 8011254:	080112d9 	.word	0x080112d9
 8011258:	080112d9 	.word	0x080112d9
 801125c:	080112d9 	.word	0x080112d9
 8011260:	080112d9 	.word	0x080112d9
 8011264:	080112d9 	.word	0x080112d9
 8011268:	080112d9 	.word	0x080112d9
 801126c:	080112d9 	.word	0x080112d9
 8011270:	080112d9 	.word	0x080112d9
 8011274:	080112d9 	.word	0x080112d9
 8011278:	080112d9 	.word	0x080112d9
 801127c:	080112d9 	.word	0x080112d9
 8011280:	080112d9 	.word	0x080112d9
 8011284:	080112d9 	.word	0x080112d9
 8011288:	080112d9 	.word	0x080112d9
 801128c:	080112d9 	.word	0x080112d9
 8011290:	080112d9 	.word	0x080112d9
 8011294:	080112d9 	.word	0x080112d9
 8011298:	080112d9 	.word	0x080112d9
 801129c:	080112d9 	.word	0x080112d9
 80112a0:	080112d9 	.word	0x080112d9
 80112a4:	080112d9 	.word	0x080112d9
 80112a8:	080112d9 	.word	0x080112d9
 80112ac:	080112d9 	.word	0x080112d9
 80112b0:	080112d9 	.word	0x080112d9
 80112b4:	080112d9 	.word	0x080112d9
 80112b8:	080112d9 	.word	0x080112d9
 80112bc:	080112d9 	.word	0x080112d9
 80112c0:	080112d9 	.word	0x080112d9
 80112c4:	080112d9 	.word	0x080112d9
 80112c8:	080112d9 	.word	0x080112d9
 80112cc:	080112d9 	.word	0x080112d9
 80112d0:	080112d9 	.word	0x080112d9
 80112d4:	080112d9 	.word	0x080112d9
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 80112d8:	bf00      	nop
  }

  return (USBD_OK);
 80112da:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 80112dc:	4618      	mov	r0, r3
 80112de:	370c      	adds	r7, #12
 80112e0:	46bd      	mov	sp, r7
 80112e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80112e6:	4770      	bx	lr

080112e8 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 80112e8:	b580      	push	{r7, lr}
 80112ea:	b082      	sub	sp, #8
 80112ec:	af00      	add	r7, sp, #0
 80112ee:	6078      	str	r0, [r7, #4]
 80112f0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 80112f2:	6879      	ldr	r1, [r7, #4]
 80112f4:	4805      	ldr	r0, [pc, #20]	; (801130c <CDC_Receive_HS+0x24>)
 80112f6:	f7fc fb59 	bl	800d9ac <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 80112fa:	4804      	ldr	r0, [pc, #16]	; (801130c <CDC_Receive_HS+0x24>)
 80112fc:	f7fc fbb4 	bl	800da68 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8011300:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8011302:	4618      	mov	r0, r3
 8011304:	3708      	adds	r7, #8
 8011306:	46bd      	mov	sp, r7
 8011308:	bd80      	pop	{r7, pc}
 801130a:	bf00      	nop
 801130c:	200006a8 	.word	0x200006a8

08011310 <CDC_Transmit_HS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_HS(uint8_t* Buf, uint16_t Len)
{
 8011310:	b580      	push	{r7, lr}
 8011312:	b084      	sub	sp, #16
 8011314:	af00      	add	r7, sp, #0
 8011316:	6078      	str	r0, [r7, #4]
 8011318:	460b      	mov	r3, r1
 801131a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 801131c:	2300      	movs	r3, #0
 801131e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 12 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceHS.pClassData;
 8011320:	4b0d      	ldr	r3, [pc, #52]	; (8011358 <CDC_Transmit_HS+0x48>)
 8011322:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8011326:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 801132e:	2b00      	cmp	r3, #0
 8011330:	d001      	beq.n	8011336 <CDC_Transmit_HS+0x26>
    return USBD_BUSY;
 8011332:	2301      	movs	r3, #1
 8011334:	e00b      	b.n	801134e <CDC_Transmit_HS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, Buf, Len);
 8011336:	887b      	ldrh	r3, [r7, #2]
 8011338:	461a      	mov	r2, r3
 801133a:	6879      	ldr	r1, [r7, #4]
 801133c:	4806      	ldr	r0, [pc, #24]	; (8011358 <CDC_Transmit_HS+0x48>)
 801133e:	f7fc fb13 	bl	800d968 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceHS);
 8011342:	4805      	ldr	r0, [pc, #20]	; (8011358 <CDC_Transmit_HS+0x48>)
 8011344:	f7fc fb50 	bl	800d9e8 <USBD_CDC_TransmitPacket>
 8011348:	4603      	mov	r3, r0
 801134a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 12 */
  return result;
 801134c:	7bfb      	ldrb	r3, [r7, #15]
}
 801134e:	4618      	mov	r0, r3
 8011350:	3710      	adds	r7, #16
 8011352:	46bd      	mov	sp, r7
 8011354:	bd80      	pop	{r7, pc}
 8011356:	bf00      	nop
 8011358:	200006a8 	.word	0x200006a8

0801135c <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 801135c:	b480      	push	{r7}
 801135e:	b087      	sub	sp, #28
 8011360:	af00      	add	r7, sp, #0
 8011362:	60f8      	str	r0, [r7, #12]
 8011364:	60b9      	str	r1, [r7, #8]
 8011366:	4613      	mov	r3, r2
 8011368:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 801136a:	2300      	movs	r3, #0
 801136c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 801136e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011372:	4618      	mov	r0, r3
 8011374:	371c      	adds	r7, #28
 8011376:	46bd      	mov	sp, r7
 8011378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801137c:	4770      	bx	lr
	...

08011380 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011380:	b480      	push	{r7}
 8011382:	b083      	sub	sp, #12
 8011384:	af00      	add	r7, sp, #0
 8011386:	4603      	mov	r3, r0
 8011388:	6039      	str	r1, [r7, #0]
 801138a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 801138c:	683b      	ldr	r3, [r7, #0]
 801138e:	2212      	movs	r2, #18
 8011390:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8011392:	4b03      	ldr	r3, [pc, #12]	; (80113a0 <USBD_HS_DeviceDescriptor+0x20>)
}
 8011394:	4618      	mov	r0, r3
 8011396:	370c      	adds	r7, #12
 8011398:	46bd      	mov	sp, r7
 801139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801139e:	4770      	bx	lr
 80113a0:	200000ec 	.word	0x200000ec

080113a4 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113a4:	b480      	push	{r7}
 80113a6:	b083      	sub	sp, #12
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	4603      	mov	r3, r0
 80113ac:	6039      	str	r1, [r7, #0]
 80113ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80113b0:	683b      	ldr	r3, [r7, #0]
 80113b2:	2204      	movs	r2, #4
 80113b4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80113b6:	4b03      	ldr	r3, [pc, #12]	; (80113c4 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	370c      	adds	r7, #12
 80113bc:	46bd      	mov	sp, r7
 80113be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113c2:	4770      	bx	lr
 80113c4:	2000010c 	.word	0x2000010c

080113c8 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113c8:	b580      	push	{r7, lr}
 80113ca:	b082      	sub	sp, #8
 80113cc:	af00      	add	r7, sp, #0
 80113ce:	4603      	mov	r3, r0
 80113d0:	6039      	str	r1, [r7, #0]
 80113d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113d4:	79fb      	ldrb	r3, [r7, #7]
 80113d6:	2b00      	cmp	r3, #0
 80113d8:	d105      	bne.n	80113e6 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	4907      	ldr	r1, [pc, #28]	; (80113fc <USBD_HS_ProductStrDescriptor+0x34>)
 80113de:	4808      	ldr	r0, [pc, #32]	; (8011400 <USBD_HS_ProductStrDescriptor+0x38>)
 80113e0:	f7fd fdb4 	bl	800ef4c <USBD_GetString>
 80113e4:	e004      	b.n	80113f0 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 80113e6:	683a      	ldr	r2, [r7, #0]
 80113e8:	4904      	ldr	r1, [pc, #16]	; (80113fc <USBD_HS_ProductStrDescriptor+0x34>)
 80113ea:	4805      	ldr	r0, [pc, #20]	; (8011400 <USBD_HS_ProductStrDescriptor+0x38>)
 80113ec:	f7fd fdae 	bl	800ef4c <USBD_GetString>
  }
  return USBD_StrDesc;
 80113f0:	4b02      	ldr	r3, [pc, #8]	; (80113fc <USBD_HS_ProductStrDescriptor+0x34>)
}
 80113f2:	4618      	mov	r0, r3
 80113f4:	3708      	adds	r7, #8
 80113f6:	46bd      	mov	sp, r7
 80113f8:	bd80      	pop	{r7, pc}
 80113fa:	bf00      	nop
 80113fc:	20001984 	.word	0x20001984
 8011400:	08014d84 	.word	0x08014d84

08011404 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011404:	b580      	push	{r7, lr}
 8011406:	b082      	sub	sp, #8
 8011408:	af00      	add	r7, sp, #0
 801140a:	4603      	mov	r3, r0
 801140c:	6039      	str	r1, [r7, #0]
 801140e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011410:	683a      	ldr	r2, [r7, #0]
 8011412:	4904      	ldr	r1, [pc, #16]	; (8011424 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8011414:	4804      	ldr	r0, [pc, #16]	; (8011428 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8011416:	f7fd fd99 	bl	800ef4c <USBD_GetString>
  return USBD_StrDesc;
 801141a:	4b02      	ldr	r3, [pc, #8]	; (8011424 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 801141c:	4618      	mov	r0, r3
 801141e:	3708      	adds	r7, #8
 8011420:	46bd      	mov	sp, r7
 8011422:	bd80      	pop	{r7, pc}
 8011424:	20001984 	.word	0x20001984
 8011428:	08014d9c 	.word	0x08014d9c

0801142c <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801142c:	b580      	push	{r7, lr}
 801142e:	b082      	sub	sp, #8
 8011430:	af00      	add	r7, sp, #0
 8011432:	4603      	mov	r3, r0
 8011434:	6039      	str	r1, [r7, #0]
 8011436:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011438:	683b      	ldr	r3, [r7, #0]
 801143a:	221a      	movs	r2, #26
 801143c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801143e:	f000 f855 	bl	80114ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8011442:	4b02      	ldr	r3, [pc, #8]	; (801144c <USBD_HS_SerialStrDescriptor+0x20>)
}
 8011444:	4618      	mov	r0, r3
 8011446:	3708      	adds	r7, #8
 8011448:	46bd      	mov	sp, r7
 801144a:	bd80      	pop	{r7, pc}
 801144c:	20000110 	.word	0x20000110

08011450 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011450:	b580      	push	{r7, lr}
 8011452:	b082      	sub	sp, #8
 8011454:	af00      	add	r7, sp, #0
 8011456:	4603      	mov	r3, r0
 8011458:	6039      	str	r1, [r7, #0]
 801145a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801145c:	79fb      	ldrb	r3, [r7, #7]
 801145e:	2b00      	cmp	r3, #0
 8011460:	d105      	bne.n	801146e <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8011462:	683a      	ldr	r2, [r7, #0]
 8011464:	4907      	ldr	r1, [pc, #28]	; (8011484 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011466:	4808      	ldr	r0, [pc, #32]	; (8011488 <USBD_HS_ConfigStrDescriptor+0x38>)
 8011468:	f7fd fd70 	bl	800ef4c <USBD_GetString>
 801146c:	e004      	b.n	8011478 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 801146e:	683a      	ldr	r2, [r7, #0]
 8011470:	4904      	ldr	r1, [pc, #16]	; (8011484 <USBD_HS_ConfigStrDescriptor+0x34>)
 8011472:	4805      	ldr	r0, [pc, #20]	; (8011488 <USBD_HS_ConfigStrDescriptor+0x38>)
 8011474:	f7fd fd6a 	bl	800ef4c <USBD_GetString>
  }
  return USBD_StrDesc;
 8011478:	4b02      	ldr	r3, [pc, #8]	; (8011484 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 801147a:	4618      	mov	r0, r3
 801147c:	3708      	adds	r7, #8
 801147e:	46bd      	mov	sp, r7
 8011480:	bd80      	pop	{r7, pc}
 8011482:	bf00      	nop
 8011484:	20001984 	.word	0x20001984
 8011488:	08014db0 	.word	0x08014db0

0801148c <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801148c:	b580      	push	{r7, lr}
 801148e:	b082      	sub	sp, #8
 8011490:	af00      	add	r7, sp, #0
 8011492:	4603      	mov	r3, r0
 8011494:	6039      	str	r1, [r7, #0]
 8011496:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011498:	79fb      	ldrb	r3, [r7, #7]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d105      	bne.n	80114aa <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 801149e:	683a      	ldr	r2, [r7, #0]
 80114a0:	4907      	ldr	r1, [pc, #28]	; (80114c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80114a2:	4808      	ldr	r0, [pc, #32]	; (80114c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80114a4:	f7fd fd52 	bl	800ef4c <USBD_GetString>
 80114a8:	e004      	b.n	80114b4 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80114aa:	683a      	ldr	r2, [r7, #0]
 80114ac:	4904      	ldr	r1, [pc, #16]	; (80114c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
 80114ae:	4805      	ldr	r0, [pc, #20]	; (80114c4 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80114b0:	f7fd fd4c 	bl	800ef4c <USBD_GetString>
  }
  return USBD_StrDesc;
 80114b4:	4b02      	ldr	r3, [pc, #8]	; (80114c0 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3708      	adds	r7, #8
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	20001984 	.word	0x20001984
 80114c4:	08014dbc 	.word	0x08014dbc

080114c8 <USBD_HS_USR_BOSDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80114c8:	b480      	push	{r7}
 80114ca:	b083      	sub	sp, #12
 80114cc:	af00      	add	r7, sp, #0
 80114ce:	4603      	mov	r3, r0
 80114d0:	6039      	str	r1, [r7, #0]
 80114d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_BOSDesc);
 80114d4:	683b      	ldr	r3, [r7, #0]
 80114d6:	220c      	movs	r2, #12
 80114d8:	801a      	strh	r2, [r3, #0]
  return (uint8_t*)USBD_HS_BOSDesc;
 80114da:	4b03      	ldr	r3, [pc, #12]	; (80114e8 <USBD_HS_USR_BOSDescriptor+0x20>)
}
 80114dc:	4618      	mov	r0, r3
 80114de:	370c      	adds	r7, #12
 80114e0:	46bd      	mov	sp, r7
 80114e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114e6:	4770      	bx	lr
 80114e8:	20000100 	.word	0x20000100

080114ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80114ec:	b580      	push	{r7, lr}
 80114ee:	b084      	sub	sp, #16
 80114f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80114f2:	4b0f      	ldr	r3, [pc, #60]	; (8011530 <Get_SerialNum+0x44>)
 80114f4:	681b      	ldr	r3, [r3, #0]
 80114f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80114f8:	4b0e      	ldr	r3, [pc, #56]	; (8011534 <Get_SerialNum+0x48>)
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80114fe:	4b0e      	ldr	r3, [pc, #56]	; (8011538 <Get_SerialNum+0x4c>)
 8011500:	681b      	ldr	r3, [r3, #0]
 8011502:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	687b      	ldr	r3, [r7, #4]
 8011508:	4413      	add	r3, r2
 801150a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2b00      	cmp	r3, #0
 8011510:	d009      	beq.n	8011526 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8011512:	2208      	movs	r2, #8
 8011514:	4909      	ldr	r1, [pc, #36]	; (801153c <Get_SerialNum+0x50>)
 8011516:	68f8      	ldr	r0, [r7, #12]
 8011518:	f000 f814 	bl	8011544 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801151c:	2204      	movs	r2, #4
 801151e:	4908      	ldr	r1, [pc, #32]	; (8011540 <Get_SerialNum+0x54>)
 8011520:	68b8      	ldr	r0, [r7, #8]
 8011522:	f000 f80f 	bl	8011544 <IntToUnicode>
  }
}
 8011526:	bf00      	nop
 8011528:	3710      	adds	r7, #16
 801152a:	46bd      	mov	sp, r7
 801152c:	bd80      	pop	{r7, pc}
 801152e:	bf00      	nop
 8011530:	1ff0f420 	.word	0x1ff0f420
 8011534:	1ff0f424 	.word	0x1ff0f424
 8011538:	1ff0f428 	.word	0x1ff0f428
 801153c:	20000112 	.word	0x20000112
 8011540:	20000122 	.word	0x20000122

08011544 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011544:	b480      	push	{r7}
 8011546:	b087      	sub	sp, #28
 8011548:	af00      	add	r7, sp, #0
 801154a:	60f8      	str	r0, [r7, #12]
 801154c:	60b9      	str	r1, [r7, #8]
 801154e:	4613      	mov	r3, r2
 8011550:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8011552:	2300      	movs	r3, #0
 8011554:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011556:	2300      	movs	r3, #0
 8011558:	75fb      	strb	r3, [r7, #23]
 801155a:	e027      	b.n	80115ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	0f1b      	lsrs	r3, r3, #28
 8011560:	2b09      	cmp	r3, #9
 8011562:	d80b      	bhi.n	801157c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011564:	68fb      	ldr	r3, [r7, #12]
 8011566:	0f1b      	lsrs	r3, r3, #28
 8011568:	b2da      	uxtb	r2, r3
 801156a:	7dfb      	ldrb	r3, [r7, #23]
 801156c:	005b      	lsls	r3, r3, #1
 801156e:	4619      	mov	r1, r3
 8011570:	68bb      	ldr	r3, [r7, #8]
 8011572:	440b      	add	r3, r1
 8011574:	3230      	adds	r2, #48	; 0x30
 8011576:	b2d2      	uxtb	r2, r2
 8011578:	701a      	strb	r2, [r3, #0]
 801157a:	e00a      	b.n	8011592 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 801157c:	68fb      	ldr	r3, [r7, #12]
 801157e:	0f1b      	lsrs	r3, r3, #28
 8011580:	b2da      	uxtb	r2, r3
 8011582:	7dfb      	ldrb	r3, [r7, #23]
 8011584:	005b      	lsls	r3, r3, #1
 8011586:	4619      	mov	r1, r3
 8011588:	68bb      	ldr	r3, [r7, #8]
 801158a:	440b      	add	r3, r1
 801158c:	3237      	adds	r2, #55	; 0x37
 801158e:	b2d2      	uxtb	r2, r2
 8011590:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	011b      	lsls	r3, r3, #4
 8011596:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011598:	7dfb      	ldrb	r3, [r7, #23]
 801159a:	005b      	lsls	r3, r3, #1
 801159c:	3301      	adds	r3, #1
 801159e:	68ba      	ldr	r2, [r7, #8]
 80115a0:	4413      	add	r3, r2
 80115a2:	2200      	movs	r2, #0
 80115a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80115a6:	7dfb      	ldrb	r3, [r7, #23]
 80115a8:	3301      	adds	r3, #1
 80115aa:	75fb      	strb	r3, [r7, #23]
 80115ac:	7dfa      	ldrb	r2, [r7, #23]
 80115ae:	79fb      	ldrb	r3, [r7, #7]
 80115b0:	429a      	cmp	r2, r3
 80115b2:	d3d3      	bcc.n	801155c <IntToUnicode+0x18>
  }
}
 80115b4:	bf00      	nop
 80115b6:	bf00      	nop
 80115b8:	371c      	adds	r7, #28
 80115ba:	46bd      	mov	sp, r7
 80115bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115c0:	4770      	bx	lr
	...

080115c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80115c4:	b580      	push	{r7, lr}
 80115c6:	b0aa      	sub	sp, #168	; 0xa8
 80115c8:	af00      	add	r7, sp, #0
 80115ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80115cc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80115d0:	2200      	movs	r2, #0
 80115d2:	601a      	str	r2, [r3, #0]
 80115d4:	605a      	str	r2, [r3, #4]
 80115d6:	609a      	str	r2, [r3, #8]
 80115d8:	60da      	str	r2, [r3, #12]
 80115da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80115dc:	f107 0310 	add.w	r3, r7, #16
 80115e0:	2284      	movs	r2, #132	; 0x84
 80115e2:	2100      	movs	r1, #0
 80115e4:	4618      	mov	r0, r3
 80115e6:	f000 fea9 	bl	801233c <memset>
  if(pcdHandle->Instance==USB_OTG_HS)
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	681b      	ldr	r3, [r3, #0]
 80115ee:	4a26      	ldr	r2, [pc, #152]	; (8011688 <HAL_PCD_MspInit+0xc4>)
 80115f0:	4293      	cmp	r3, r2
 80115f2:	d145      	bne.n	8011680 <HAL_PCD_MspInit+0xbc>

  /* USER CODE END USB_OTG_HS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80115f4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80115f8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80115fa:	2300      	movs	r3, #0
 80115fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011600:	f107 0310 	add.w	r3, r7, #16
 8011604:	4618      	mov	r0, r3
 8011606:	f7f5 fcf7 	bl	8006ff8 <HAL_RCCEx_PeriphCLKConfig>
 801160a:	4603      	mov	r3, r0
 801160c:	2b00      	cmp	r3, #0
 801160e:	d001      	beq.n	8011614 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8011610:	f7f0 f858 	bl	80016c4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011614:	4b1d      	ldr	r3, [pc, #116]	; (801168c <HAL_PCD_MspInit+0xc8>)
 8011616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011618:	4a1c      	ldr	r2, [pc, #112]	; (801168c <HAL_PCD_MspInit+0xc8>)
 801161a:	f043 0302 	orr.w	r3, r3, #2
 801161e:	6313      	str	r3, [r2, #48]	; 0x30
 8011620:	4b1a      	ldr	r3, [pc, #104]	; (801168c <HAL_PCD_MspInit+0xc8>)
 8011622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011624:	f003 0302 	and.w	r3, r3, #2
 8011628:	60fb      	str	r3, [r7, #12]
 801162a:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_HS GPIO Configuration
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 801162c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8011630:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011634:	2302      	movs	r3, #2
 8011636:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801163a:	2300      	movs	r3, #0
 801163c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011640:	2303      	movs	r3, #3
 8011642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8011646:	230c      	movs	r3, #12
 8011648:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801164c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8011650:	4619      	mov	r1, r3
 8011652:	480f      	ldr	r0, [pc, #60]	; (8011690 <HAL_PCD_MspInit+0xcc>)
 8011654:	f7f1 fdbe 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8011658:	4b0c      	ldr	r3, [pc, #48]	; (801168c <HAL_PCD_MspInit+0xc8>)
 801165a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801165c:	4a0b      	ldr	r2, [pc, #44]	; (801168c <HAL_PCD_MspInit+0xc8>)
 801165e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8011662:	6313      	str	r3, [r2, #48]	; 0x30
 8011664:	4b09      	ldr	r3, [pc, #36]	; (801168c <HAL_PCD_MspInit+0xc8>)
 8011666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011668:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 801166c:	60bb      	str	r3, [r7, #8]
 801166e:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8011670:	2200      	movs	r2, #0
 8011672:	2100      	movs	r1, #0
 8011674:	204d      	movs	r0, #77	; 0x4d
 8011676:	f7f1 f9fe 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 801167a:	204d      	movs	r0, #77	; 0x4d
 801167c:	f7f1 fa17 	bl	8002aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 8011680:	bf00      	nop
 8011682:	37a8      	adds	r7, #168	; 0xa8
 8011684:	46bd      	mov	sp, r7
 8011686:	bd80      	pop	{r7, pc}
 8011688:	40040000 	.word	0x40040000
 801168c:	40023800 	.word	0x40023800
 8011690:	40020400 	.word	0x40020400

08011694 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011694:	b580      	push	{r7, lr}
 8011696:	b082      	sub	sp, #8
 8011698:	af00      	add	r7, sp, #0
 801169a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
 80116a2:	687b      	ldr	r3, [r7, #4]
 80116a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80116a8:	4619      	mov	r1, r3
 80116aa:	4610      	mov	r0, r2
 80116ac:	f7fc fac5 	bl	800dc3a <USBD_LL_SetupStage>
}
 80116b0:	bf00      	nop
 80116b2:	3708      	adds	r7, #8
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}

080116b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116b8:	b580      	push	{r7, lr}
 80116ba:	b082      	sub	sp, #8
 80116bc:	af00      	add	r7, sp, #0
 80116be:	6078      	str	r0, [r7, #4]
 80116c0:	460b      	mov	r3, r1
 80116c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80116c4:	687b      	ldr	r3, [r7, #4]
 80116c6:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 80116ca:	78fa      	ldrb	r2, [r7, #3]
 80116cc:	6879      	ldr	r1, [r7, #4]
 80116ce:	4613      	mov	r3, r2
 80116d0:	00db      	lsls	r3, r3, #3
 80116d2:	4413      	add	r3, r2
 80116d4:	009b      	lsls	r3, r3, #2
 80116d6:	440b      	add	r3, r1
 80116d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	78fb      	ldrb	r3, [r7, #3]
 80116e0:	4619      	mov	r1, r3
 80116e2:	f7fc faff 	bl	800dce4 <USBD_LL_DataOutStage>
}
 80116e6:	bf00      	nop
 80116e8:	3708      	adds	r7, #8
 80116ea:	46bd      	mov	sp, r7
 80116ec:	bd80      	pop	{r7, pc}

080116ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80116ee:	b580      	push	{r7, lr}
 80116f0:	b082      	sub	sp, #8
 80116f2:	af00      	add	r7, sp, #0
 80116f4:	6078      	str	r0, [r7, #4]
 80116f6:	460b      	mov	r3, r1
 80116f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80116fa:	687b      	ldr	r3, [r7, #4]
 80116fc:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
 8011700:	78fa      	ldrb	r2, [r7, #3]
 8011702:	6879      	ldr	r1, [r7, #4]
 8011704:	4613      	mov	r3, r2
 8011706:	00db      	lsls	r3, r3, #3
 8011708:	4413      	add	r3, r2
 801170a:	009b      	lsls	r3, r3, #2
 801170c:	440b      	add	r3, r1
 801170e:	334c      	adds	r3, #76	; 0x4c
 8011710:	681a      	ldr	r2, [r3, #0]
 8011712:	78fb      	ldrb	r3, [r7, #3]
 8011714:	4619      	mov	r1, r3
 8011716:	f7fc fb98 	bl	800de4a <USBD_LL_DataInStage>
}
 801171a:	bf00      	nop
 801171c:	3708      	adds	r7, #8
 801171e:	46bd      	mov	sp, r7
 8011720:	bd80      	pop	{r7, pc}

08011722 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011722:	b580      	push	{r7, lr}
 8011724:	b082      	sub	sp, #8
 8011726:	af00      	add	r7, sp, #0
 8011728:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011730:	4618      	mov	r0, r3
 8011732:	f7fc fccc 	bl	800e0ce <USBD_LL_SOF>
}
 8011736:	bf00      	nop
 8011738:	3708      	adds	r7, #8
 801173a:	46bd      	mov	sp, r7
 801173c:	bd80      	pop	{r7, pc}

0801173e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801173e:	b580      	push	{r7, lr}
 8011740:	b084      	sub	sp, #16
 8011742:	af00      	add	r7, sp, #0
 8011744:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011746:	2301      	movs	r3, #1
 8011748:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 801174a:	687b      	ldr	r3, [r7, #4]
 801174c:	68db      	ldr	r3, [r3, #12]
 801174e:	2b00      	cmp	r3, #0
 8011750:	d102      	bne.n	8011758 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8011752:	2300      	movs	r3, #0
 8011754:	73fb      	strb	r3, [r7, #15]
 8011756:	e008      	b.n	801176a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8011758:	687b      	ldr	r3, [r7, #4]
 801175a:	68db      	ldr	r3, [r3, #12]
 801175c:	2b02      	cmp	r3, #2
 801175e:	d102      	bne.n	8011766 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8011760:	2301      	movs	r3, #1
 8011762:	73fb      	strb	r3, [r7, #15]
 8011764:	e001      	b.n	801176a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8011766:	f7ef ffad 	bl	80016c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011770:	7bfa      	ldrb	r2, [r7, #15]
 8011772:	4611      	mov	r1, r2
 8011774:	4618      	mov	r0, r3
 8011776:	f7fc fc6c 	bl	800e052 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 801177a:	687b      	ldr	r3, [r7, #4]
 801177c:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011780:	4618      	mov	r0, r3
 8011782:	f7fc fc14 	bl	800dfae <USBD_LL_Reset>
}
 8011786:	bf00      	nop
 8011788:	3710      	adds	r7, #16
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
	...

08011790 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011790:	b580      	push	{r7, lr}
 8011792:	b082      	sub	sp, #8
 8011794:	af00      	add	r7, sp, #0
 8011796:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801179e:	4618      	mov	r0, r3
 80117a0:	f7fc fc67 	bl	800e072 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80117a4:	687b      	ldr	r3, [r7, #4]
 80117a6:	681b      	ldr	r3, [r3, #0]
 80117a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	687a      	ldr	r2, [r7, #4]
 80117b0:	6812      	ldr	r2, [r2, #0]
 80117b2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80117b6:	f043 0301 	orr.w	r3, r3, #1
 80117ba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	6a1b      	ldr	r3, [r3, #32]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d005      	beq.n	80117d0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80117c4:	4b04      	ldr	r3, [pc, #16]	; (80117d8 <HAL_PCD_SuspendCallback+0x48>)
 80117c6:	691b      	ldr	r3, [r3, #16]
 80117c8:	4a03      	ldr	r2, [pc, #12]	; (80117d8 <HAL_PCD_SuspendCallback+0x48>)
 80117ca:	f043 0306 	orr.w	r3, r3, #6
 80117ce:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80117d0:	bf00      	nop
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}
 80117d8:	e000ed00 	.word	0xe000ed00

080117dc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117dc:	b580      	push	{r7, lr}
 80117de:	b082      	sub	sp, #8
 80117e0:	af00      	add	r7, sp, #0
 80117e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7fc fc57 	bl	800e09e <USBD_LL_Resume>
}
 80117f0:	bf00      	nop
 80117f2:	3708      	adds	r7, #8
 80117f4:	46bd      	mov	sp, r7
 80117f6:	bd80      	pop	{r7, pc}

080117f8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117f8:	b580      	push	{r7, lr}
 80117fa:	b082      	sub	sp, #8
 80117fc:	af00      	add	r7, sp, #0
 80117fe:	6078      	str	r0, [r7, #4]
 8011800:	460b      	mov	r3, r1
 8011802:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801180a:	78fa      	ldrb	r2, [r7, #3]
 801180c:	4611      	mov	r1, r2
 801180e:	4618      	mov	r0, r3
 8011810:	f7fc fcaf 	bl	800e172 <USBD_LL_IsoOUTIncomplete>
}
 8011814:	bf00      	nop
 8011816:	3708      	adds	r7, #8
 8011818:	46bd      	mov	sp, r7
 801181a:	bd80      	pop	{r7, pc}

0801181c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801181c:	b580      	push	{r7, lr}
 801181e:	b082      	sub	sp, #8
 8011820:	af00      	add	r7, sp, #0
 8011822:	6078      	str	r0, [r7, #4]
 8011824:	460b      	mov	r3, r1
 8011826:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801182e:	78fa      	ldrb	r2, [r7, #3]
 8011830:	4611      	mov	r1, r2
 8011832:	4618      	mov	r0, r3
 8011834:	f7fc fc6b 	bl	800e10e <USBD_LL_IsoINIncomplete>
}
 8011838:	bf00      	nop
 801183a:	3708      	adds	r7, #8
 801183c:	46bd      	mov	sp, r7
 801183e:	bd80      	pop	{r7, pc}

08011840 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011840:	b580      	push	{r7, lr}
 8011842:	b082      	sub	sp, #8
 8011844:	af00      	add	r7, sp, #0
 8011846:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8011848:	687b      	ldr	r3, [r7, #4]
 801184a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801184e:	4618      	mov	r0, r3
 8011850:	f7fc fcc1 	bl	800e1d6 <USBD_LL_DevConnected>
}
 8011854:	bf00      	nop
 8011856:	3708      	adds	r7, #8
 8011858:	46bd      	mov	sp, r7
 801185a:	bd80      	pop	{r7, pc}

0801185c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801185c:	b580      	push	{r7, lr}
 801185e:	b082      	sub	sp, #8
 8011860:	af00      	add	r7, sp, #0
 8011862:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 801186a:	4618      	mov	r0, r3
 801186c:	f7fc fcbe 	bl	800e1ec <USBD_LL_DevDisconnected>
}
 8011870:	bf00      	nop
 8011872:	3708      	adds	r7, #8
 8011874:	46bd      	mov	sp, r7
 8011876:	bd80      	pop	{r7, pc}

08011878 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8011878:	b580      	push	{r7, lr}
 801187a:	b082      	sub	sp, #8
 801187c:	af00      	add	r7, sp, #0
 801187e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	781b      	ldrb	r3, [r3, #0]
 8011884:	2b01      	cmp	r3, #1
 8011886:	d140      	bne.n	801190a <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8011888:	4a22      	ldr	r2, [pc, #136]	; (8011914 <USBD_LL_Init+0x9c>)
 801188a:	687b      	ldr	r3, [r7, #4]
 801188c:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
  pdev->pData = &hpcd_USB_OTG_HS;
 8011890:	687b      	ldr	r3, [r7, #4]
 8011892:	4a20      	ldr	r2, [pc, #128]	; (8011914 <USBD_LL_Init+0x9c>)
 8011894:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8011898:	4b1e      	ldr	r3, [pc, #120]	; (8011914 <USBD_LL_Init+0x9c>)
 801189a:	4a1f      	ldr	r2, [pc, #124]	; (8011918 <USBD_LL_Init+0xa0>)
 801189c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 801189e:	4b1d      	ldr	r3, [pc, #116]	; (8011914 <USBD_LL_Init+0x9c>)
 80118a0:	2208      	movs	r2, #8
 80118a2:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80118a4:	4b1b      	ldr	r3, [pc, #108]	; (8011914 <USBD_LL_Init+0x9c>)
 80118a6:	2202      	movs	r2, #2
 80118a8:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80118aa:	4b1a      	ldr	r3, [pc, #104]	; (8011914 <USBD_LL_Init+0x9c>)
 80118ac:	2200      	movs	r2, #0
 80118ae:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80118b0:	4b18      	ldr	r3, [pc, #96]	; (8011914 <USBD_LL_Init+0x9c>)
 80118b2:	2202      	movs	r2, #2
 80118b4:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80118b6:	4b17      	ldr	r3, [pc, #92]	; (8011914 <USBD_LL_Init+0x9c>)
 80118b8:	2200      	movs	r2, #0
 80118ba:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80118bc:	4b15      	ldr	r3, [pc, #84]	; (8011914 <USBD_LL_Init+0x9c>)
 80118be:	2200      	movs	r2, #0
 80118c0:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80118c2:	4b14      	ldr	r3, [pc, #80]	; (8011914 <USBD_LL_Init+0x9c>)
 80118c4:	2200      	movs	r2, #0
 80118c6:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80118c8:	4b12      	ldr	r3, [pc, #72]	; (8011914 <USBD_LL_Init+0x9c>)
 80118ca:	2200      	movs	r2, #0
 80118cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80118ce:	4b11      	ldr	r3, [pc, #68]	; (8011914 <USBD_LL_Init+0x9c>)
 80118d0:	2200      	movs	r2, #0
 80118d2:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80118d4:	4b0f      	ldr	r3, [pc, #60]	; (8011914 <USBD_LL_Init+0x9c>)
 80118d6:	2200      	movs	r2, #0
 80118d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80118da:	480e      	ldr	r0, [pc, #56]	; (8011914 <USBD_LL_Init+0x9c>)
 80118dc:	f7f3 fbac 	bl	8005038 <HAL_PCD_Init>
 80118e0:	4603      	mov	r3, r0
 80118e2:	2b00      	cmp	r3, #0
 80118e4:	d001      	beq.n	80118ea <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80118e6:	f7ef feed 	bl	80016c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80118ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80118ee:	4809      	ldr	r0, [pc, #36]	; (8011914 <USBD_LL_Init+0x9c>)
 80118f0:	f7f4 fe25 	bl	800653e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 80118f4:	2280      	movs	r2, #128	; 0x80
 80118f6:	2100      	movs	r1, #0
 80118f8:	4806      	ldr	r0, [pc, #24]	; (8011914 <USBD_LL_Init+0x9c>)
 80118fa:	f7f4 fdd9 	bl	80064b0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 80118fe:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8011902:	2101      	movs	r1, #1
 8011904:	4803      	ldr	r0, [pc, #12]	; (8011914 <USBD_LL_Init+0x9c>)
 8011906:	f7f4 fdd3 	bl	80064b0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 801190a:	2300      	movs	r3, #0
}
 801190c:	4618      	mov	r0, r3
 801190e:	3708      	adds	r7, #8
 8011910:	46bd      	mov	sp, r7
 8011912:	bd80      	pop	{r7, pc}
 8011914:	20001b84 	.word	0x20001b84
 8011918:	40040000 	.word	0x40040000

0801191c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 801191c:	b580      	push	{r7, lr}
 801191e:	b084      	sub	sp, #16
 8011920:	af00      	add	r7, sp, #0
 8011922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011924:	2300      	movs	r3, #0
 8011926:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011928:	2300      	movs	r3, #0
 801192a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011932:	4618      	mov	r0, r3
 8011934:	f7f3 fca4 	bl	8005280 <HAL_PCD_Start>
 8011938:	4603      	mov	r3, r0
 801193a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801193c:	7bfb      	ldrb	r3, [r7, #15]
 801193e:	4618      	mov	r0, r3
 8011940:	f000 f97e 	bl	8011c40 <USBD_Get_USB_Status>
 8011944:	4603      	mov	r3, r0
 8011946:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011948:	7bbb      	ldrb	r3, [r7, #14]
}
 801194a:	4618      	mov	r0, r3
 801194c:	3710      	adds	r7, #16
 801194e:	46bd      	mov	sp, r7
 8011950:	bd80      	pop	{r7, pc}

08011952 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011952:	b580      	push	{r7, lr}
 8011954:	b084      	sub	sp, #16
 8011956:	af00      	add	r7, sp, #0
 8011958:	6078      	str	r0, [r7, #4]
 801195a:	4608      	mov	r0, r1
 801195c:	4611      	mov	r1, r2
 801195e:	461a      	mov	r2, r3
 8011960:	4603      	mov	r3, r0
 8011962:	70fb      	strb	r3, [r7, #3]
 8011964:	460b      	mov	r3, r1
 8011966:	70bb      	strb	r3, [r7, #2]
 8011968:	4613      	mov	r3, r2
 801196a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801196c:	2300      	movs	r3, #0
 801196e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801197a:	78bb      	ldrb	r3, [r7, #2]
 801197c:	883a      	ldrh	r2, [r7, #0]
 801197e:	78f9      	ldrb	r1, [r7, #3]
 8011980:	f7f4 f991 	bl	8005ca6 <HAL_PCD_EP_Open>
 8011984:	4603      	mov	r3, r0
 8011986:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011988:	7bfb      	ldrb	r3, [r7, #15]
 801198a:	4618      	mov	r0, r3
 801198c:	f000 f958 	bl	8011c40 <USBD_Get_USB_Status>
 8011990:	4603      	mov	r3, r0
 8011992:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011994:	7bbb      	ldrb	r3, [r7, #14]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3710      	adds	r7, #16
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b084      	sub	sp, #16
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	460b      	mov	r3, r1
 80119a8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119aa:	2300      	movs	r3, #0
 80119ac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ae:	2300      	movs	r3, #0
 80119b0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80119b2:	687b      	ldr	r3, [r7, #4]
 80119b4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119b8:	78fa      	ldrb	r2, [r7, #3]
 80119ba:	4611      	mov	r1, r2
 80119bc:	4618      	mov	r0, r3
 80119be:	f7f4 f9da 	bl	8005d76 <HAL_PCD_EP_Close>
 80119c2:	4603      	mov	r3, r0
 80119c4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119c6:	7bfb      	ldrb	r3, [r7, #15]
 80119c8:	4618      	mov	r0, r3
 80119ca:	f000 f939 	bl	8011c40 <USBD_Get_USB_Status>
 80119ce:	4603      	mov	r3, r0
 80119d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119d2:	7bbb      	ldrb	r3, [r7, #14]
}
 80119d4:	4618      	mov	r0, r3
 80119d6:	3710      	adds	r7, #16
 80119d8:	46bd      	mov	sp, r7
 80119da:	bd80      	pop	{r7, pc}

080119dc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80119dc:	b580      	push	{r7, lr}
 80119de:	b084      	sub	sp, #16
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]
 80119e4:	460b      	mov	r3, r1
 80119e6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119e8:	2300      	movs	r3, #0
 80119ea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ec:	2300      	movs	r3, #0
 80119ee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80119f0:	687b      	ldr	r3, [r7, #4]
 80119f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80119f6:	78fa      	ldrb	r2, [r7, #3]
 80119f8:	4611      	mov	r1, r2
 80119fa:	4618      	mov	r0, r3
 80119fc:	f7f4 fab2 	bl	8005f64 <HAL_PCD_EP_SetStall>
 8011a00:	4603      	mov	r3, r0
 8011a02:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a04:	7bfb      	ldrb	r3, [r7, #15]
 8011a06:	4618      	mov	r0, r3
 8011a08:	f000 f91a 	bl	8011c40 <USBD_Get_USB_Status>
 8011a0c:	4603      	mov	r3, r0
 8011a0e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a10:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a12:	4618      	mov	r0, r3
 8011a14:	3710      	adds	r7, #16
 8011a16:	46bd      	mov	sp, r7
 8011a18:	bd80      	pop	{r7, pc}

08011a1a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a1a:	b580      	push	{r7, lr}
 8011a1c:	b084      	sub	sp, #16
 8011a1e:	af00      	add	r7, sp, #0
 8011a20:	6078      	str	r0, [r7, #4]
 8011a22:	460b      	mov	r3, r1
 8011a24:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a26:	2300      	movs	r3, #0
 8011a28:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a2a:	2300      	movs	r3, #0
 8011a2c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a34:	78fa      	ldrb	r2, [r7, #3]
 8011a36:	4611      	mov	r1, r2
 8011a38:	4618      	mov	r0, r3
 8011a3a:	f7f4 faf7 	bl	800602c <HAL_PCD_EP_ClrStall>
 8011a3e:	4603      	mov	r3, r0
 8011a40:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a42:	7bfb      	ldrb	r3, [r7, #15]
 8011a44:	4618      	mov	r0, r3
 8011a46:	f000 f8fb 	bl	8011c40 <USBD_Get_USB_Status>
 8011a4a:	4603      	mov	r3, r0
 8011a4c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a4e:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a50:	4618      	mov	r0, r3
 8011a52:	3710      	adds	r7, #16
 8011a54:	46bd      	mov	sp, r7
 8011a56:	bd80      	pop	{r7, pc}

08011a58 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a58:	b480      	push	{r7}
 8011a5a:	b085      	sub	sp, #20
 8011a5c:	af00      	add	r7, sp, #0
 8011a5e:	6078      	str	r0, [r7, #4]
 8011a60:	460b      	mov	r3, r1
 8011a62:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011a64:	687b      	ldr	r3, [r7, #4]
 8011a66:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011a6a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011a6c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011a70:	2b00      	cmp	r3, #0
 8011a72:	da0b      	bge.n	8011a8c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011a74:	78fb      	ldrb	r3, [r7, #3]
 8011a76:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a7a:	68f9      	ldr	r1, [r7, #12]
 8011a7c:	4613      	mov	r3, r2
 8011a7e:	00db      	lsls	r3, r3, #3
 8011a80:	4413      	add	r3, r2
 8011a82:	009b      	lsls	r3, r3, #2
 8011a84:	440b      	add	r3, r1
 8011a86:	333e      	adds	r3, #62	; 0x3e
 8011a88:	781b      	ldrb	r3, [r3, #0]
 8011a8a:	e00b      	b.n	8011aa4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011a8c:	78fb      	ldrb	r3, [r7, #3]
 8011a8e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011a92:	68f9      	ldr	r1, [r7, #12]
 8011a94:	4613      	mov	r3, r2
 8011a96:	00db      	lsls	r3, r3, #3
 8011a98:	4413      	add	r3, r2
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	440b      	add	r3, r1
 8011a9e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8011aa2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011aa4:	4618      	mov	r0, r3
 8011aa6:	3714      	adds	r7, #20
 8011aa8:	46bd      	mov	sp, r7
 8011aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011aae:	4770      	bx	lr

08011ab0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011ab0:	b580      	push	{r7, lr}
 8011ab2:	b084      	sub	sp, #16
 8011ab4:	af00      	add	r7, sp, #0
 8011ab6:	6078      	str	r0, [r7, #4]
 8011ab8:	460b      	mov	r3, r1
 8011aba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011abc:	2300      	movs	r3, #0
 8011abe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011ac0:	2300      	movs	r3, #0
 8011ac2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011ac4:	687b      	ldr	r3, [r7, #4]
 8011ac6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011aca:	78fa      	ldrb	r2, [r7, #3]
 8011acc:	4611      	mov	r1, r2
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7f4 f8c4 	bl	8005c5c <HAL_PCD_SetAddress>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ad8:	7bfb      	ldrb	r3, [r7, #15]
 8011ada:	4618      	mov	r0, r3
 8011adc:	f000 f8b0 	bl	8011c40 <USBD_Get_USB_Status>
 8011ae0:	4603      	mov	r3, r0
 8011ae2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ae4:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ae6:	4618      	mov	r0, r3
 8011ae8:	3710      	adds	r7, #16
 8011aea:	46bd      	mov	sp, r7
 8011aec:	bd80      	pop	{r7, pc}

08011aee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011aee:	b580      	push	{r7, lr}
 8011af0:	b086      	sub	sp, #24
 8011af2:	af00      	add	r7, sp, #0
 8011af4:	60f8      	str	r0, [r7, #12]
 8011af6:	607a      	str	r2, [r7, #4]
 8011af8:	603b      	str	r3, [r7, #0]
 8011afa:	460b      	mov	r3, r1
 8011afc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011afe:	2300      	movs	r3, #0
 8011b00:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b02:	2300      	movs	r3, #0
 8011b04:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b0c:	7af9      	ldrb	r1, [r7, #11]
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	687a      	ldr	r2, [r7, #4]
 8011b12:	f7f4 f9dd 	bl	8005ed0 <HAL_PCD_EP_Transmit>
 8011b16:	4603      	mov	r3, r0
 8011b18:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b1a:	7dfb      	ldrb	r3, [r7, #23]
 8011b1c:	4618      	mov	r0, r3
 8011b1e:	f000 f88f 	bl	8011c40 <USBD_Get_USB_Status>
 8011b22:	4603      	mov	r3, r0
 8011b24:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011b26:	7dbb      	ldrb	r3, [r7, #22]
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3718      	adds	r7, #24
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b086      	sub	sp, #24
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	607a      	str	r2, [r7, #4]
 8011b3a:	603b      	str	r3, [r7, #0]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b40:	2300      	movs	r3, #0
 8011b42:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b44:	2300      	movs	r3, #0
 8011b46:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011b48:	68fb      	ldr	r3, [r7, #12]
 8011b4a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8011b4e:	7af9      	ldrb	r1, [r7, #11]
 8011b50:	683b      	ldr	r3, [r7, #0]
 8011b52:	687a      	ldr	r2, [r7, #4]
 8011b54:	f7f4 f959 	bl	8005e0a <HAL_PCD_EP_Receive>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b5c:	7dfb      	ldrb	r3, [r7, #23]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f000 f86e 	bl	8011c40 <USBD_Get_USB_Status>
 8011b64:	4603      	mov	r3, r0
 8011b66:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011b68:	7dbb      	ldrb	r3, [r7, #22]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3718      	adds	r7, #24
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b082      	sub	sp, #8
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	6078      	str	r0, [r7, #4]
 8011b7a:	460b      	mov	r3, r1
 8011b7c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011b7e:	687b      	ldr	r3, [r7, #4]
 8011b80:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8011b84:	78fa      	ldrb	r2, [r7, #3]
 8011b86:	4611      	mov	r1, r2
 8011b88:	4618      	mov	r0, r3
 8011b8a:	f7f4 f989 	bl	8005ea0 <HAL_PCD_EP_GetRxCount>
 8011b8e:	4603      	mov	r3, r0
}
 8011b90:	4618      	mov	r0, r3
 8011b92:	3708      	adds	r7, #8
 8011b94:	46bd      	mov	sp, r7
 8011b96:	bd80      	pop	{r7, pc}

08011b98 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd: PCD handle
  * @param  msg: LPM message
  * @retval None
  */
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8011b98:	b580      	push	{r7, lr}
 8011b9a:	b082      	sub	sp, #8
 8011b9c:	af00      	add	r7, sp, #0
 8011b9e:	6078      	str	r0, [r7, #4]
 8011ba0:	460b      	mov	r3, r1
 8011ba2:	70fb      	strb	r3, [r7, #3]
  switch (msg)
 8011ba4:	78fb      	ldrb	r3, [r7, #3]
 8011ba6:	2b00      	cmp	r3, #0
 8011ba8:	d002      	beq.n	8011bb0 <HAL_PCDEx_LPM_Callback+0x18>
 8011baa:	2b01      	cmp	r3, #1
 8011bac:	d01f      	beq.n	8011bee <HAL_PCDEx_LPM_Callback+0x56>
      /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
}
 8011bae:	e03b      	b.n	8011c28 <HAL_PCDEx_LPM_Callback+0x90>
    if (hpcd->Init.low_power_enable)
 8011bb0:	687b      	ldr	r3, [r7, #4]
 8011bb2:	6a1b      	ldr	r3, [r3, #32]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d007      	beq.n	8011bc8 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 8011bb8:	f000 f83c 	bl	8011c34 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011bbc:	4b1c      	ldr	r3, [pc, #112]	; (8011c30 <HAL_PCDEx_LPM_Callback+0x98>)
 8011bbe:	691b      	ldr	r3, [r3, #16]
 8011bc0:	4a1b      	ldr	r2, [pc, #108]	; (8011c30 <HAL_PCDEx_LPM_Callback+0x98>)
 8011bc2:	f023 0306 	bic.w	r3, r3, #6
 8011bc6:	6113      	str	r3, [r2, #16]
    __HAL_PCD_UNGATE_PHYCLOCK(hpcd);
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	681b      	ldr	r3, [r3, #0]
 8011bcc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011bd0:	681b      	ldr	r3, [r3, #0]
 8011bd2:	687a      	ldr	r2, [r7, #4]
 8011bd4:	6812      	ldr	r2, [r2, #0]
 8011bd6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011bda:	f023 0301 	bic.w	r3, r3, #1
 8011bde:	6013      	str	r3, [r2, #0]
    USBD_LL_Resume(hpcd->pData);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011be6:	4618      	mov	r0, r3
 8011be8:	f7fc fa59 	bl	800e09e <USBD_LL_Resume>
    break;
 8011bec:	e01c      	b.n	8011c28 <HAL_PCDEx_LPM_Callback+0x90>
    __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8011bee:	687b      	ldr	r3, [r7, #4]
 8011bf0:	681b      	ldr	r3, [r3, #0]
 8011bf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	687a      	ldr	r2, [r7, #4]
 8011bfa:	6812      	ldr	r2, [r2, #0]
 8011bfc:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8011c00:	f043 0301 	orr.w	r3, r3, #1
 8011c04:	6013      	str	r3, [r2, #0]
    USBD_LL_Suspend(hpcd->pData);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
 8011c0c:	4618      	mov	r0, r3
 8011c0e:	f7fc fa30 	bl	800e072 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6a1b      	ldr	r3, [r3, #32]
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d005      	beq.n	8011c26 <HAL_PCDEx_LPM_Callback+0x8e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011c1a:	4b05      	ldr	r3, [pc, #20]	; (8011c30 <HAL_PCDEx_LPM_Callback+0x98>)
 8011c1c:	691b      	ldr	r3, [r3, #16]
 8011c1e:	4a04      	ldr	r2, [pc, #16]	; (8011c30 <HAL_PCDEx_LPM_Callback+0x98>)
 8011c20:	f043 0306 	orr.w	r3, r3, #6
 8011c24:	6113      	str	r3, [r2, #16]
    break;
 8011c26:	bf00      	nop
}
 8011c28:	bf00      	nop
 8011c2a:	3708      	adds	r7, #8
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	e000ed00 	.word	0xe000ed00

08011c34 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8011c34:	b580      	push	{r7, lr}
 8011c36:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8011c38:	f7ef f9c0 	bl	8000fbc <SystemClock_Config>
}
 8011c3c:	bf00      	nop
 8011c3e:	bd80      	pop	{r7, pc}

08011c40 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011c40:	b480      	push	{r7}
 8011c42:	b085      	sub	sp, #20
 8011c44:	af00      	add	r7, sp, #0
 8011c46:	4603      	mov	r3, r0
 8011c48:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011c4e:	79fb      	ldrb	r3, [r7, #7]
 8011c50:	2b03      	cmp	r3, #3
 8011c52:	d817      	bhi.n	8011c84 <USBD_Get_USB_Status+0x44>
 8011c54:	a201      	add	r2, pc, #4	; (adr r2, 8011c5c <USBD_Get_USB_Status+0x1c>)
 8011c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c5a:	bf00      	nop
 8011c5c:	08011c6d 	.word	0x08011c6d
 8011c60:	08011c73 	.word	0x08011c73
 8011c64:	08011c79 	.word	0x08011c79
 8011c68:	08011c7f 	.word	0x08011c7f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011c6c:	2300      	movs	r3, #0
 8011c6e:	73fb      	strb	r3, [r7, #15]
    break;
 8011c70:	e00b      	b.n	8011c8a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c72:	2303      	movs	r3, #3
 8011c74:	73fb      	strb	r3, [r7, #15]
    break;
 8011c76:	e008      	b.n	8011c8a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c78:	2301      	movs	r3, #1
 8011c7a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c7c:	e005      	b.n	8011c8a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c7e:	2303      	movs	r3, #3
 8011c80:	73fb      	strb	r3, [r7, #15]
    break;
 8011c82:	e002      	b.n	8011c8a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011c84:	2303      	movs	r3, #3
 8011c86:	73fb      	strb	r3, [r7, #15]
    break;
 8011c88:	bf00      	nop
  }
  return usb_status;
 8011c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c8c:	4618      	mov	r0, r3
 8011c8e:	3714      	adds	r7, #20
 8011c90:	46bd      	mov	sp, r7
 8011c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c96:	4770      	bx	lr

08011c98 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8011c9c:	2201      	movs	r2, #1
 8011c9e:	490e      	ldr	r1, [pc, #56]	; (8011cd8 <MX_USB_HOST_Init+0x40>)
 8011ca0:	480e      	ldr	r0, [pc, #56]	; (8011cdc <MX_USB_HOST_Init+0x44>)
 8011ca2:	f7fd fdcf 	bl	800f844 <USBH_Init>
 8011ca6:	4603      	mov	r3, r0
 8011ca8:	2b00      	cmp	r3, #0
 8011caa:	d001      	beq.n	8011cb0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8011cac:	f7ef fd0a 	bl	80016c4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8011cb0:	490b      	ldr	r1, [pc, #44]	; (8011ce0 <MX_USB_HOST_Init+0x48>)
 8011cb2:	480a      	ldr	r0, [pc, #40]	; (8011cdc <MX_USB_HOST_Init+0x44>)
 8011cb4:	f7fd fe73 	bl	800f99e <USBH_RegisterClass>
 8011cb8:	4603      	mov	r3, r0
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d001      	beq.n	8011cc2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8011cbe:	f7ef fd01 	bl	80016c4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8011cc2:	4806      	ldr	r0, [pc, #24]	; (8011cdc <MX_USB_HOST_Init+0x44>)
 8011cc4:	f7fd fef7 	bl	800fab6 <USBH_Start>
 8011cc8:	4603      	mov	r3, r0
 8011cca:	2b00      	cmp	r3, #0
 8011ccc:	d001      	beq.n	8011cd2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8011cce:	f7ef fcf9 	bl	80016c4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8011cd2:	bf00      	nop
 8011cd4:	bd80      	pop	{r7, pc}
 8011cd6:	bf00      	nop
 8011cd8:	08011cf9 	.word	0x08011cf9
 8011cdc:	2000208c 	.word	0x2000208c
 8011ce0:	20000098 	.word	0x20000098

08011ce4 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8011ce4:	b580      	push	{r7, lr}
 8011ce6:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8011ce8:	4802      	ldr	r0, [pc, #8]	; (8011cf4 <MX_USB_HOST_Process+0x10>)
 8011cea:	f7fd fef5 	bl	800fad8 <USBH_Process>
}
 8011cee:	bf00      	nop
 8011cf0:	bd80      	pop	{r7, pc}
 8011cf2:	bf00      	nop
 8011cf4:	2000208c 	.word	0x2000208c

08011cf8 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8011cf8:	b480      	push	{r7}
 8011cfa:	b083      	sub	sp, #12
 8011cfc:	af00      	add	r7, sp, #0
 8011cfe:	6078      	str	r0, [r7, #4]
 8011d00:	460b      	mov	r3, r1
 8011d02:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8011d04:	78fb      	ldrb	r3, [r7, #3]
 8011d06:	3b01      	subs	r3, #1
 8011d08:	2b04      	cmp	r3, #4
 8011d0a:	d819      	bhi.n	8011d40 <USBH_UserProcess+0x48>
 8011d0c:	a201      	add	r2, pc, #4	; (adr r2, 8011d14 <USBH_UserProcess+0x1c>)
 8011d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011d12:	bf00      	nop
 8011d14:	08011d41 	.word	0x08011d41
 8011d18:	08011d31 	.word	0x08011d31
 8011d1c:	08011d41 	.word	0x08011d41
 8011d20:	08011d39 	.word	0x08011d39
 8011d24:	08011d29 	.word	0x08011d29
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8011d28:	4b09      	ldr	r3, [pc, #36]	; (8011d50 <USBH_UserProcess+0x58>)
 8011d2a:	2203      	movs	r2, #3
 8011d2c:	701a      	strb	r2, [r3, #0]
  break;
 8011d2e:	e008      	b.n	8011d42 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8011d30:	4b07      	ldr	r3, [pc, #28]	; (8011d50 <USBH_UserProcess+0x58>)
 8011d32:	2202      	movs	r2, #2
 8011d34:	701a      	strb	r2, [r3, #0]
  break;
 8011d36:	e004      	b.n	8011d42 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8011d38:	4b05      	ldr	r3, [pc, #20]	; (8011d50 <USBH_UserProcess+0x58>)
 8011d3a:	2201      	movs	r2, #1
 8011d3c:	701a      	strb	r2, [r3, #0]
  break;
 8011d3e:	e000      	b.n	8011d42 <USBH_UserProcess+0x4a>

  default:
  break;
 8011d40:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8011d42:	bf00      	nop
 8011d44:	370c      	adds	r7, #12
 8011d46:	46bd      	mov	sp, r7
 8011d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4c:	4770      	bx	lr
 8011d4e:	bf00      	nop
 8011d50:	20002464 	.word	0x20002464

08011d54 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8011d54:	b580      	push	{r7, lr}
 8011d56:	b0ac      	sub	sp, #176	; 0xb0
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011d5c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011d60:	2200      	movs	r2, #0
 8011d62:	601a      	str	r2, [r3, #0]
 8011d64:	605a      	str	r2, [r3, #4]
 8011d66:	609a      	str	r2, [r3, #8]
 8011d68:	60da      	str	r2, [r3, #12]
 8011d6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8011d6c:	f107 0318 	add.w	r3, r7, #24
 8011d70:	2284      	movs	r2, #132	; 0x84
 8011d72:	2100      	movs	r1, #0
 8011d74:	4618      	mov	r0, r3
 8011d76:	f000 fae1 	bl	801233c <memset>
  if(hcdHandle->Instance==USB_OTG_FS)
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011d82:	d151      	bne.n	8011e28 <HAL_HCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8011d84:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8011d88:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8011d8a:	2300      	movs	r3, #0
 8011d8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8011d90:	f107 0318 	add.w	r3, r7, #24
 8011d94:	4618      	mov	r0, r3
 8011d96:	f7f5 f92f 	bl	8006ff8 <HAL_RCCEx_PeriphCLKConfig>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	2b00      	cmp	r3, #0
 8011d9e:	d001      	beq.n	8011da4 <HAL_HCD_MspInit+0x50>
    {
      Error_Handler();
 8011da0:	f7ef fc90 	bl	80016c4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011da4:	4b22      	ldr	r3, [pc, #136]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011da8:	4a21      	ldr	r2, [pc, #132]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011daa:	f043 0301 	orr.w	r3, r3, #1
 8011dae:	6313      	str	r3, [r2, #48]	; 0x30
 8011db0:	4b1f      	ldr	r3, [pc, #124]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011db4:	f003 0301 	and.w	r3, r3, #1
 8011db8:	617b      	str	r3, [r7, #20]
 8011dba:	697b      	ldr	r3, [r7, #20]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8011dbc:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8011dc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011dc4:	2302      	movs	r3, #2
 8011dc6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011dca:	2300      	movs	r3, #0
 8011dcc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011dd0:	2303      	movs	r3, #3
 8011dd2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8011dd6:	230a      	movs	r3, #10
 8011dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011ddc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8011de0:	4619      	mov	r1, r3
 8011de2:	4814      	ldr	r0, [pc, #80]	; (8011e34 <HAL_HCD_MspInit+0xe0>)
 8011de4:	f7f1 f9f6 	bl	80031d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8011de8:	4b11      	ldr	r3, [pc, #68]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011dea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011dec:	4a10      	ldr	r2, [pc, #64]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011df2:	6353      	str	r3, [r2, #52]	; 0x34
 8011df4:	4b0e      	ldr	r3, [pc, #56]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011df6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011df8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011dfc:	613b      	str	r3, [r7, #16]
 8011dfe:	693b      	ldr	r3, [r7, #16]
 8011e00:	4b0b      	ldr	r3, [pc, #44]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e04:	4a0a      	ldr	r2, [pc, #40]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011e06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8011e0a:	6453      	str	r3, [r2, #68]	; 0x44
 8011e0c:	4b08      	ldr	r3, [pc, #32]	; (8011e30 <HAL_HCD_MspInit+0xdc>)
 8011e0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011e10:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8011e14:	60fb      	str	r3, [r7, #12]
 8011e16:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8011e18:	2200      	movs	r2, #0
 8011e1a:	2100      	movs	r1, #0
 8011e1c:	2043      	movs	r0, #67	; 0x43
 8011e1e:	f7f0 fe2a 	bl	8002a76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8011e22:	2043      	movs	r0, #67	; 0x43
 8011e24:	f7f0 fe43 	bl	8002aae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8011e28:	bf00      	nop
 8011e2a:	37b0      	adds	r7, #176	; 0xb0
 8011e2c:	46bd      	mov	sp, r7
 8011e2e:	bd80      	pop	{r7, pc}
 8011e30:	40023800 	.word	0x40023800
 8011e34:	40020000 	.word	0x40020000

08011e38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b082      	sub	sp, #8
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8011e40:	687b      	ldr	r3, [r7, #4]
 8011e42:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011e46:	4618      	mov	r0, r3
 8011e48:	f7fe fa25 	bl	8010296 <USBH_LL_IncTimer>
}
 8011e4c:	bf00      	nop
 8011e4e:	3708      	adds	r7, #8
 8011e50:	46bd      	mov	sp, r7
 8011e52:	bd80      	pop	{r7, pc}

08011e54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011e54:	b580      	push	{r7, lr}
 8011e56:	b082      	sub	sp, #8
 8011e58:	af00      	add	r7, sp, #0
 8011e5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8011e5c:	687b      	ldr	r3, [r7, #4]
 8011e5e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011e62:	4618      	mov	r0, r3
 8011e64:	f7fe fa5d 	bl	8010322 <USBH_LL_Connect>
}
 8011e68:	bf00      	nop
 8011e6a:	3708      	adds	r7, #8
 8011e6c:	46bd      	mov	sp, r7
 8011e6e:	bd80      	pop	{r7, pc}

08011e70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8011e70:	b580      	push	{r7, lr}
 8011e72:	b082      	sub	sp, #8
 8011e74:	af00      	add	r7, sp, #0
 8011e76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7fe fa66 	bl	8010350 <USBH_LL_Disconnect>
}
 8011e84:	bf00      	nop
 8011e86:	3708      	adds	r7, #8
 8011e88:	46bd      	mov	sp, r7
 8011e8a:	bd80      	pop	{r7, pc}

08011e8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8011e8c:	b480      	push	{r7}
 8011e8e:	b083      	sub	sp, #12
 8011e90:	af00      	add	r7, sp, #0
 8011e92:	6078      	str	r0, [r7, #4]
 8011e94:	460b      	mov	r3, r1
 8011e96:	70fb      	strb	r3, [r7, #3]
 8011e98:	4613      	mov	r3, r2
 8011e9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8011e9c:	bf00      	nop
 8011e9e:	370c      	adds	r7, #12
 8011ea0:	46bd      	mov	sp, r7
 8011ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ea6:	4770      	bx	lr

08011ea8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ea8:	b580      	push	{r7, lr}
 8011eaa:	b082      	sub	sp, #8
 8011eac:	af00      	add	r7, sp, #0
 8011eae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011eb6:	4618      	mov	r0, r3
 8011eb8:	f7fe fa17 	bl	80102ea <USBH_LL_PortEnabled>
}
 8011ebc:	bf00      	nop
 8011ebe:	3708      	adds	r7, #8
 8011ec0:	46bd      	mov	sp, r7
 8011ec2:	bd80      	pop	{r7, pc}

08011ec4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8011ec4:	b580      	push	{r7, lr}
 8011ec6:	b082      	sub	sp, #8
 8011ec8:	af00      	add	r7, sp, #0
 8011eca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8011ecc:	687b      	ldr	r3, [r7, #4]
 8011ece:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8011ed2:	4618      	mov	r0, r3
 8011ed4:	f7fe fa17 	bl	8010306 <USBH_LL_PortDisabled>
}
 8011ed8:	bf00      	nop
 8011eda:	3708      	adds	r7, #8
 8011edc:	46bd      	mov	sp, r7
 8011ede:	bd80      	pop	{r7, pc}

08011ee0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8011ee0:	b580      	push	{r7, lr}
 8011ee2:	b082      	sub	sp, #8
 8011ee4:	af00      	add	r7, sp, #0
 8011ee6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8011ee8:	687b      	ldr	r3, [r7, #4]
 8011eea:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8011eee:	2b01      	cmp	r3, #1
 8011ef0:	d12a      	bne.n	8011f48 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8011ef2:	4a18      	ldr	r2, [pc, #96]	; (8011f54 <USBH_LL_Init+0x74>)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8011efa:	687b      	ldr	r3, [r7, #4]
 8011efc:	4a15      	ldr	r2, [pc, #84]	; (8011f54 <USBH_LL_Init+0x74>)
 8011efe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8011f02:	4b14      	ldr	r3, [pc, #80]	; (8011f54 <USBH_LL_Init+0x74>)
 8011f04:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8011f08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8011f0a:	4b12      	ldr	r3, [pc, #72]	; (8011f54 <USBH_LL_Init+0x74>)
 8011f0c:	2208      	movs	r2, #8
 8011f0e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8011f10:	4b10      	ldr	r3, [pc, #64]	; (8011f54 <USBH_LL_Init+0x74>)
 8011f12:	2201      	movs	r2, #1
 8011f14:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8011f16:	4b0f      	ldr	r3, [pc, #60]	; (8011f54 <USBH_LL_Init+0x74>)
 8011f18:	2200      	movs	r2, #0
 8011f1a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8011f1c:	4b0d      	ldr	r3, [pc, #52]	; (8011f54 <USBH_LL_Init+0x74>)
 8011f1e:	2202      	movs	r2, #2
 8011f20:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8011f22:	4b0c      	ldr	r3, [pc, #48]	; (8011f54 <USBH_LL_Init+0x74>)
 8011f24:	2200      	movs	r2, #0
 8011f26:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8011f28:	480a      	ldr	r0, [pc, #40]	; (8011f54 <USBH_LL_Init+0x74>)
 8011f2a:	f7f1 fb4a 	bl	80035c2 <HAL_HCD_Init>
 8011f2e:	4603      	mov	r3, r0
 8011f30:	2b00      	cmp	r3, #0
 8011f32:	d001      	beq.n	8011f38 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8011f34:	f7ef fbc6 	bl	80016c4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8011f38:	4806      	ldr	r0, [pc, #24]	; (8011f54 <USBH_LL_Init+0x74>)
 8011f3a:	f7f1 ff2e 	bl	8003d9a <HAL_HCD_GetCurrentFrame>
 8011f3e:	4603      	mov	r3, r0
 8011f40:	4619      	mov	r1, r3
 8011f42:	6878      	ldr	r0, [r7, #4]
 8011f44:	f7fe f998 	bl	8010278 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8011f48:	2300      	movs	r3, #0
}
 8011f4a:	4618      	mov	r0, r3
 8011f4c:	3708      	adds	r7, #8
 8011f4e:	46bd      	mov	sp, r7
 8011f50:	bd80      	pop	{r7, pc}
 8011f52:	bf00      	nop
 8011f54:	20002468 	.word	0x20002468

08011f58 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b084      	sub	sp, #16
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f60:	2300      	movs	r3, #0
 8011f62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011f64:	2300      	movs	r3, #0
 8011f66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011f6e:	4618      	mov	r0, r3
 8011f70:	f7f1 fe9d 	bl	8003cae <HAL_HCD_Start>
 8011f74:	4603      	mov	r3, r0
 8011f76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011f78:	7bfb      	ldrb	r3, [r7, #15]
 8011f7a:	4618      	mov	r0, r3
 8011f7c:	f000 f95c 	bl	8012238 <USBH_Get_USB_Status>
 8011f80:	4603      	mov	r3, r0
 8011f82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011f84:	7bbb      	ldrb	r3, [r7, #14]
}
 8011f86:	4618      	mov	r0, r3
 8011f88:	3710      	adds	r7, #16
 8011f8a:	46bd      	mov	sp, r7
 8011f8c:	bd80      	pop	{r7, pc}

08011f8e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8011f8e:	b580      	push	{r7, lr}
 8011f90:	b084      	sub	sp, #16
 8011f92:	af00      	add	r7, sp, #0
 8011f94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011f96:	2300      	movs	r3, #0
 8011f98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011fa4:	4618      	mov	r0, r3
 8011fa6:	f7f1 fea5 	bl	8003cf4 <HAL_HCD_Stop>
 8011faa:	4603      	mov	r3, r0
 8011fac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8011fae:	7bfb      	ldrb	r3, [r7, #15]
 8011fb0:	4618      	mov	r0, r3
 8011fb2:	f000 f941 	bl	8012238 <USBH_Get_USB_Status>
 8011fb6:	4603      	mov	r3, r0
 8011fb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011fba:	7bbb      	ldrb	r3, [r7, #14]
}
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	3710      	adds	r7, #16
 8011fc0:	46bd      	mov	sp, r7
 8011fc2:	bd80      	pop	{r7, pc}

08011fc4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8011fc4:	b580      	push	{r7, lr}
 8011fc6:	b084      	sub	sp, #16
 8011fc8:	af00      	add	r7, sp, #0
 8011fca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8011fcc:	2301      	movs	r3, #1
 8011fce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8011fd0:	687b      	ldr	r3, [r7, #4]
 8011fd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8011fd6:	4618      	mov	r0, r3
 8011fd8:	f7f1 feed 	bl	8003db6 <HAL_HCD_GetCurrentSpeed>
 8011fdc:	4603      	mov	r3, r0
 8011fde:	2b02      	cmp	r3, #2
 8011fe0:	d00c      	beq.n	8011ffc <USBH_LL_GetSpeed+0x38>
 8011fe2:	2b02      	cmp	r3, #2
 8011fe4:	d80d      	bhi.n	8012002 <USBH_LL_GetSpeed+0x3e>
 8011fe6:	2b00      	cmp	r3, #0
 8011fe8:	d002      	beq.n	8011ff0 <USBH_LL_GetSpeed+0x2c>
 8011fea:	2b01      	cmp	r3, #1
 8011fec:	d003      	beq.n	8011ff6 <USBH_LL_GetSpeed+0x32>
 8011fee:	e008      	b.n	8012002 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8011ff0:	2300      	movs	r3, #0
 8011ff2:	73fb      	strb	r3, [r7, #15]
    break;
 8011ff4:	e008      	b.n	8012008 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 8011ff6:	2301      	movs	r3, #1
 8011ff8:	73fb      	strb	r3, [r7, #15]
    break;
 8011ffa:	e005      	b.n	8012008 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8011ffc:	2302      	movs	r3, #2
 8011ffe:	73fb      	strb	r3, [r7, #15]
    break;
 8012000:	e002      	b.n	8012008 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8012002:	2301      	movs	r3, #1
 8012004:	73fb      	strb	r3, [r7, #15]
    break;
 8012006:	bf00      	nop
  }
  return  speed;
 8012008:	7bfb      	ldrb	r3, [r7, #15]
}
 801200a:	4618      	mov	r0, r3
 801200c:	3710      	adds	r7, #16
 801200e:	46bd      	mov	sp, r7
 8012010:	bd80      	pop	{r7, pc}

08012012 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8012012:	b580      	push	{r7, lr}
 8012014:	b084      	sub	sp, #16
 8012016:	af00      	add	r7, sp, #0
 8012018:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801201a:	2300      	movs	r3, #0
 801201c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801201e:	2300      	movs	r3, #0
 8012020:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8012022:	687b      	ldr	r3, [r7, #4]
 8012024:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8012028:	4618      	mov	r0, r3
 801202a:	f7f1 fe80 	bl	8003d2e <HAL_HCD_ResetPort>
 801202e:	4603      	mov	r3, r0
 8012030:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8012032:	7bfb      	ldrb	r3, [r7, #15]
 8012034:	4618      	mov	r0, r3
 8012036:	f000 f8ff 	bl	8012238 <USBH_Get_USB_Status>
 801203a:	4603      	mov	r3, r0
 801203c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801203e:	7bbb      	ldrb	r3, [r7, #14]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3710      	adds	r7, #16
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8012048:	b580      	push	{r7, lr}
 801204a:	b082      	sub	sp, #8
 801204c:	af00      	add	r7, sp, #0
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	460b      	mov	r3, r1
 8012052:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8012054:	687b      	ldr	r3, [r7, #4]
 8012056:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801205a:	78fa      	ldrb	r2, [r7, #3]
 801205c:	4611      	mov	r1, r2
 801205e:	4618      	mov	r0, r3
 8012060:	f7f1 fe87 	bl	8003d72 <HAL_HCD_HC_GetXferCount>
 8012064:	4603      	mov	r3, r0
}
 8012066:	4618      	mov	r0, r3
 8012068:	3708      	adds	r7, #8
 801206a:	46bd      	mov	sp, r7
 801206c:	bd80      	pop	{r7, pc}

0801206e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 801206e:	b590      	push	{r4, r7, lr}
 8012070:	b089      	sub	sp, #36	; 0x24
 8012072:	af04      	add	r7, sp, #16
 8012074:	6078      	str	r0, [r7, #4]
 8012076:	4608      	mov	r0, r1
 8012078:	4611      	mov	r1, r2
 801207a:	461a      	mov	r2, r3
 801207c:	4603      	mov	r3, r0
 801207e:	70fb      	strb	r3, [r7, #3]
 8012080:	460b      	mov	r3, r1
 8012082:	70bb      	strb	r3, [r7, #2]
 8012084:	4613      	mov	r3, r2
 8012086:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012088:	2300      	movs	r3, #0
 801208a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 801208c:	2300      	movs	r3, #0
 801208e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012096:	787c      	ldrb	r4, [r7, #1]
 8012098:	78ba      	ldrb	r2, [r7, #2]
 801209a:	78f9      	ldrb	r1, [r7, #3]
 801209c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 801209e:	9302      	str	r3, [sp, #8]
 80120a0:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80120a4:	9301      	str	r3, [sp, #4]
 80120a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80120aa:	9300      	str	r3, [sp, #0]
 80120ac:	4623      	mov	r3, r4
 80120ae:	f7f1 faea 	bl	8003686 <HAL_HCD_HC_Init>
 80120b2:	4603      	mov	r3, r0
 80120b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80120b6:	7bfb      	ldrb	r3, [r7, #15]
 80120b8:	4618      	mov	r0, r3
 80120ba:	f000 f8bd 	bl	8012238 <USBH_Get_USB_Status>
 80120be:	4603      	mov	r3, r0
 80120c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80120c2:	7bbb      	ldrb	r3, [r7, #14]
}
 80120c4:	4618      	mov	r0, r3
 80120c6:	3714      	adds	r7, #20
 80120c8:	46bd      	mov	sp, r7
 80120ca:	bd90      	pop	{r4, r7, pc}

080120cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80120cc:	b580      	push	{r7, lr}
 80120ce:	b084      	sub	sp, #16
 80120d0:	af00      	add	r7, sp, #0
 80120d2:	6078      	str	r0, [r7, #4]
 80120d4:	460b      	mov	r3, r1
 80120d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80120d8:	2300      	movs	r3, #0
 80120da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80120dc:	2300      	movs	r3, #0
 80120de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80120e6:	78fa      	ldrb	r2, [r7, #3]
 80120e8:	4611      	mov	r1, r2
 80120ea:	4618      	mov	r0, r3
 80120ec:	f7f1 fb5a 	bl	80037a4 <HAL_HCD_HC_Halt>
 80120f0:	4603      	mov	r3, r0
 80120f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80120f4:	7bfb      	ldrb	r3, [r7, #15]
 80120f6:	4618      	mov	r0, r3
 80120f8:	f000 f89e 	bl	8012238 <USBH_Get_USB_Status>
 80120fc:	4603      	mov	r3, r0
 80120fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012100:	7bbb      	ldrb	r3, [r7, #14]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}

0801210a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 801210a:	b590      	push	{r4, r7, lr}
 801210c:	b089      	sub	sp, #36	; 0x24
 801210e:	af04      	add	r7, sp, #16
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	4608      	mov	r0, r1
 8012114:	4611      	mov	r1, r2
 8012116:	461a      	mov	r2, r3
 8012118:	4603      	mov	r3, r0
 801211a:	70fb      	strb	r3, [r7, #3]
 801211c:	460b      	mov	r3, r1
 801211e:	70bb      	strb	r3, [r7, #2]
 8012120:	4613      	mov	r3, r2
 8012122:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8012124:	2300      	movs	r3, #0
 8012126:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012128:	2300      	movs	r3, #0
 801212a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8012132:	787c      	ldrb	r4, [r7, #1]
 8012134:	78ba      	ldrb	r2, [r7, #2]
 8012136:	78f9      	ldrb	r1, [r7, #3]
 8012138:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 801213c:	9303      	str	r3, [sp, #12]
 801213e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8012140:	9302      	str	r3, [sp, #8]
 8012142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012144:	9301      	str	r3, [sp, #4]
 8012146:	f897 3020 	ldrb.w	r3, [r7, #32]
 801214a:	9300      	str	r3, [sp, #0]
 801214c:	4623      	mov	r3, r4
 801214e:	f7f1 fb4d 	bl	80037ec <HAL_HCD_HC_SubmitRequest>
 8012152:	4603      	mov	r3, r0
 8012154:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8012156:	7bfb      	ldrb	r3, [r7, #15]
 8012158:	4618      	mov	r0, r3
 801215a:	f000 f86d 	bl	8012238 <USBH_Get_USB_Status>
 801215e:	4603      	mov	r3, r0
 8012160:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8012162:	7bbb      	ldrb	r3, [r7, #14]
}
 8012164:	4618      	mov	r0, r3
 8012166:	3714      	adds	r7, #20
 8012168:	46bd      	mov	sp, r7
 801216a:	bd90      	pop	{r4, r7, pc}

0801216c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b082      	sub	sp, #8
 8012170:	af00      	add	r7, sp, #0
 8012172:	6078      	str	r0, [r7, #4]
 8012174:	460b      	mov	r3, r1
 8012176:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 801217e:	78fa      	ldrb	r2, [r7, #3]
 8012180:	4611      	mov	r1, r2
 8012182:	4618      	mov	r0, r3
 8012184:	f7f1 fde1 	bl	8003d4a <HAL_HCD_HC_GetURBState>
 8012188:	4603      	mov	r3, r0
}
 801218a:	4618      	mov	r0, r3
 801218c:	3708      	adds	r7, #8
 801218e:	46bd      	mov	sp, r7
 8012190:	bd80      	pop	{r7, pc}

08012192 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b082      	sub	sp, #8
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
 801219a:	460b      	mov	r3, r1
 801219c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80121a4:	2b01      	cmp	r3, #1
 80121a6:	d103      	bne.n	80121b0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80121a8:	78fb      	ldrb	r3, [r7, #3]
 80121aa:	4618      	mov	r0, r3
 80121ac:	f000 f870 	bl	8012290 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80121b0:	20c8      	movs	r0, #200	; 0xc8
 80121b2:	f7ef ff3d 	bl	8002030 <HAL_Delay>
  return USBH_OK;
 80121b6:	2300      	movs	r3, #0
}
 80121b8:	4618      	mov	r0, r3
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80121c0:	b480      	push	{r7}
 80121c2:	b085      	sub	sp, #20
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
 80121c8:	460b      	mov	r3, r1
 80121ca:	70fb      	strb	r3, [r7, #3]
 80121cc:	4613      	mov	r3, r2
 80121ce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80121d0:	687b      	ldr	r3, [r7, #4]
 80121d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80121d6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80121d8:	78fb      	ldrb	r3, [r7, #3]
 80121da:	68fa      	ldr	r2, [r7, #12]
 80121dc:	212c      	movs	r1, #44	; 0x2c
 80121de:	fb01 f303 	mul.w	r3, r1, r3
 80121e2:	4413      	add	r3, r2
 80121e4:	333b      	adds	r3, #59	; 0x3b
 80121e6:	781b      	ldrb	r3, [r3, #0]
 80121e8:	2b00      	cmp	r3, #0
 80121ea:	d009      	beq.n	8012200 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80121ec:	78fb      	ldrb	r3, [r7, #3]
 80121ee:	68fa      	ldr	r2, [r7, #12]
 80121f0:	212c      	movs	r1, #44	; 0x2c
 80121f2:	fb01 f303 	mul.w	r3, r1, r3
 80121f6:	4413      	add	r3, r2
 80121f8:	3354      	adds	r3, #84	; 0x54
 80121fa:	78ba      	ldrb	r2, [r7, #2]
 80121fc:	701a      	strb	r2, [r3, #0]
 80121fe:	e008      	b.n	8012212 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8012200:	78fb      	ldrb	r3, [r7, #3]
 8012202:	68fa      	ldr	r2, [r7, #12]
 8012204:	212c      	movs	r1, #44	; 0x2c
 8012206:	fb01 f303 	mul.w	r3, r1, r3
 801220a:	4413      	add	r3, r2
 801220c:	3355      	adds	r3, #85	; 0x55
 801220e:	78ba      	ldrb	r2, [r7, #2]
 8012210:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8012212:	2300      	movs	r3, #0
}
 8012214:	4618      	mov	r0, r3
 8012216:	3714      	adds	r7, #20
 8012218:	46bd      	mov	sp, r7
 801221a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801221e:	4770      	bx	lr

08012220 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8012220:	b580      	push	{r7, lr}
 8012222:	b082      	sub	sp, #8
 8012224:	af00      	add	r7, sp, #0
 8012226:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	f7ef ff01 	bl	8002030 <HAL_Delay>
}
 801222e:	bf00      	nop
 8012230:	3708      	adds	r7, #8
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
	...

08012238 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8012238:	b480      	push	{r7}
 801223a:	b085      	sub	sp, #20
 801223c:	af00      	add	r7, sp, #0
 801223e:	4603      	mov	r3, r0
 8012240:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8012242:	2300      	movs	r3, #0
 8012244:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8012246:	79fb      	ldrb	r3, [r7, #7]
 8012248:	2b03      	cmp	r3, #3
 801224a:	d817      	bhi.n	801227c <USBH_Get_USB_Status+0x44>
 801224c:	a201      	add	r2, pc, #4	; (adr r2, 8012254 <USBH_Get_USB_Status+0x1c>)
 801224e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012252:	bf00      	nop
 8012254:	08012265 	.word	0x08012265
 8012258:	0801226b 	.word	0x0801226b
 801225c:	08012271 	.word	0x08012271
 8012260:	08012277 	.word	0x08012277
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8012264:	2300      	movs	r3, #0
 8012266:	73fb      	strb	r3, [r7, #15]
    break;
 8012268:	e00b      	b.n	8012282 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 801226a:	2302      	movs	r3, #2
 801226c:	73fb      	strb	r3, [r7, #15]
    break;
 801226e:	e008      	b.n	8012282 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8012270:	2301      	movs	r3, #1
 8012272:	73fb      	strb	r3, [r7, #15]
    break;
 8012274:	e005      	b.n	8012282 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8012276:	2302      	movs	r3, #2
 8012278:	73fb      	strb	r3, [r7, #15]
    break;
 801227a:	e002      	b.n	8012282 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 801227c:	2302      	movs	r3, #2
 801227e:	73fb      	strb	r3, [r7, #15]
    break;
 8012280:	bf00      	nop
  }
  return usb_status;
 8012282:	7bfb      	ldrb	r3, [r7, #15]
}
 8012284:	4618      	mov	r0, r3
 8012286:	3714      	adds	r7, #20
 8012288:	46bd      	mov	sp, r7
 801228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801228e:	4770      	bx	lr

08012290 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8012290:	b580      	push	{r7, lr}
 8012292:	b084      	sub	sp, #16
 8012294:	af00      	add	r7, sp, #0
 8012296:	4603      	mov	r3, r0
 8012298:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 801229a:	79fb      	ldrb	r3, [r7, #7]
 801229c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 801229e:	79fb      	ldrb	r3, [r7, #7]
 80122a0:	2b00      	cmp	r3, #0
 80122a2:	d102      	bne.n	80122aa <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80122a4:	2300      	movs	r3, #0
 80122a6:	73fb      	strb	r3, [r7, #15]
 80122a8:	e001      	b.n	80122ae <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80122aa:	2301      	movs	r3, #1
 80122ac:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOI,GPIO_PIN_2,(GPIO_PinState)data);
 80122ae:	7bfb      	ldrb	r3, [r7, #15]
 80122b0:	461a      	mov	r2, r3
 80122b2:	2104      	movs	r1, #4
 80122b4:	4803      	ldr	r0, [pc, #12]	; (80122c4 <MX_DriverVbusFS+0x34>)
 80122b6:	f7f1 f951 	bl	800355c <HAL_GPIO_WritePin>
}
 80122ba:	bf00      	nop
 80122bc:	3710      	adds	r7, #16
 80122be:	46bd      	mov	sp, r7
 80122c0:	bd80      	pop	{r7, pc}
 80122c2:	bf00      	nop
 80122c4:	40022000 	.word	0x40022000

080122c8 <__errno>:
 80122c8:	4b01      	ldr	r3, [pc, #4]	; (80122d0 <__errno+0x8>)
 80122ca:	6818      	ldr	r0, [r3, #0]
 80122cc:	4770      	bx	lr
 80122ce:	bf00      	nop
 80122d0:	2000012c 	.word	0x2000012c

080122d4 <__libc_init_array>:
 80122d4:	b570      	push	{r4, r5, r6, lr}
 80122d6:	4d0d      	ldr	r5, [pc, #52]	; (801230c <__libc_init_array+0x38>)
 80122d8:	4c0d      	ldr	r4, [pc, #52]	; (8012310 <__libc_init_array+0x3c>)
 80122da:	1b64      	subs	r4, r4, r5
 80122dc:	10a4      	asrs	r4, r4, #2
 80122de:	2600      	movs	r6, #0
 80122e0:	42a6      	cmp	r6, r4
 80122e2:	d109      	bne.n	80122f8 <__libc_init_array+0x24>
 80122e4:	4d0b      	ldr	r5, [pc, #44]	; (8012314 <__libc_init_array+0x40>)
 80122e6:	4c0c      	ldr	r4, [pc, #48]	; (8012318 <__libc_init_array+0x44>)
 80122e8:	f002 fd3c 	bl	8014d64 <_init>
 80122ec:	1b64      	subs	r4, r4, r5
 80122ee:	10a4      	asrs	r4, r4, #2
 80122f0:	2600      	movs	r6, #0
 80122f2:	42a6      	cmp	r6, r4
 80122f4:	d105      	bne.n	8012302 <__libc_init_array+0x2e>
 80122f6:	bd70      	pop	{r4, r5, r6, pc}
 80122f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80122fc:	4798      	blx	r3
 80122fe:	3601      	adds	r6, #1
 8012300:	e7ee      	b.n	80122e0 <__libc_init_array+0xc>
 8012302:	f855 3b04 	ldr.w	r3, [r5], #4
 8012306:	4798      	blx	r3
 8012308:	3601      	adds	r6, #1
 801230a:	e7f2      	b.n	80122f2 <__libc_init_array+0x1e>
 801230c:	080151e4 	.word	0x080151e4
 8012310:	080151e4 	.word	0x080151e4
 8012314:	080151e4 	.word	0x080151e4
 8012318:	080151e8 	.word	0x080151e8

0801231c <malloc>:
 801231c:	4b02      	ldr	r3, [pc, #8]	; (8012328 <malloc+0xc>)
 801231e:	4601      	mov	r1, r0
 8012320:	6818      	ldr	r0, [r3, #0]
 8012322:	f000 b87f 	b.w	8012424 <_malloc_r>
 8012326:	bf00      	nop
 8012328:	2000012c 	.word	0x2000012c

0801232c <free>:
 801232c:	4b02      	ldr	r3, [pc, #8]	; (8012338 <free+0xc>)
 801232e:	4601      	mov	r1, r0
 8012330:	6818      	ldr	r0, [r3, #0]
 8012332:	f000 b80b 	b.w	801234c <_free_r>
 8012336:	bf00      	nop
 8012338:	2000012c 	.word	0x2000012c

0801233c <memset>:
 801233c:	4402      	add	r2, r0
 801233e:	4603      	mov	r3, r0
 8012340:	4293      	cmp	r3, r2
 8012342:	d100      	bne.n	8012346 <memset+0xa>
 8012344:	4770      	bx	lr
 8012346:	f803 1b01 	strb.w	r1, [r3], #1
 801234a:	e7f9      	b.n	8012340 <memset+0x4>

0801234c <_free_r>:
 801234c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801234e:	2900      	cmp	r1, #0
 8012350:	d044      	beq.n	80123dc <_free_r+0x90>
 8012352:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012356:	9001      	str	r0, [sp, #4]
 8012358:	2b00      	cmp	r3, #0
 801235a:	f1a1 0404 	sub.w	r4, r1, #4
 801235e:	bfb8      	it	lt
 8012360:	18e4      	addlt	r4, r4, r3
 8012362:	f001 fbd9 	bl	8013b18 <__malloc_lock>
 8012366:	4a1e      	ldr	r2, [pc, #120]	; (80123e0 <_free_r+0x94>)
 8012368:	9801      	ldr	r0, [sp, #4]
 801236a:	6813      	ldr	r3, [r2, #0]
 801236c:	b933      	cbnz	r3, 801237c <_free_r+0x30>
 801236e:	6063      	str	r3, [r4, #4]
 8012370:	6014      	str	r4, [r2, #0]
 8012372:	b003      	add	sp, #12
 8012374:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012378:	f001 bbd4 	b.w	8013b24 <__malloc_unlock>
 801237c:	42a3      	cmp	r3, r4
 801237e:	d908      	bls.n	8012392 <_free_r+0x46>
 8012380:	6825      	ldr	r5, [r4, #0]
 8012382:	1961      	adds	r1, r4, r5
 8012384:	428b      	cmp	r3, r1
 8012386:	bf01      	itttt	eq
 8012388:	6819      	ldreq	r1, [r3, #0]
 801238a:	685b      	ldreq	r3, [r3, #4]
 801238c:	1949      	addeq	r1, r1, r5
 801238e:	6021      	streq	r1, [r4, #0]
 8012390:	e7ed      	b.n	801236e <_free_r+0x22>
 8012392:	461a      	mov	r2, r3
 8012394:	685b      	ldr	r3, [r3, #4]
 8012396:	b10b      	cbz	r3, 801239c <_free_r+0x50>
 8012398:	42a3      	cmp	r3, r4
 801239a:	d9fa      	bls.n	8012392 <_free_r+0x46>
 801239c:	6811      	ldr	r1, [r2, #0]
 801239e:	1855      	adds	r5, r2, r1
 80123a0:	42a5      	cmp	r5, r4
 80123a2:	d10b      	bne.n	80123bc <_free_r+0x70>
 80123a4:	6824      	ldr	r4, [r4, #0]
 80123a6:	4421      	add	r1, r4
 80123a8:	1854      	adds	r4, r2, r1
 80123aa:	42a3      	cmp	r3, r4
 80123ac:	6011      	str	r1, [r2, #0]
 80123ae:	d1e0      	bne.n	8012372 <_free_r+0x26>
 80123b0:	681c      	ldr	r4, [r3, #0]
 80123b2:	685b      	ldr	r3, [r3, #4]
 80123b4:	6053      	str	r3, [r2, #4]
 80123b6:	4421      	add	r1, r4
 80123b8:	6011      	str	r1, [r2, #0]
 80123ba:	e7da      	b.n	8012372 <_free_r+0x26>
 80123bc:	d902      	bls.n	80123c4 <_free_r+0x78>
 80123be:	230c      	movs	r3, #12
 80123c0:	6003      	str	r3, [r0, #0]
 80123c2:	e7d6      	b.n	8012372 <_free_r+0x26>
 80123c4:	6825      	ldr	r5, [r4, #0]
 80123c6:	1961      	adds	r1, r4, r5
 80123c8:	428b      	cmp	r3, r1
 80123ca:	bf04      	itt	eq
 80123cc:	6819      	ldreq	r1, [r3, #0]
 80123ce:	685b      	ldreq	r3, [r3, #4]
 80123d0:	6063      	str	r3, [r4, #4]
 80123d2:	bf04      	itt	eq
 80123d4:	1949      	addeq	r1, r1, r5
 80123d6:	6021      	streq	r1, [r4, #0]
 80123d8:	6054      	str	r4, [r2, #4]
 80123da:	e7ca      	b.n	8012372 <_free_r+0x26>
 80123dc:	b003      	add	sp, #12
 80123de:	bd30      	pop	{r4, r5, pc}
 80123e0:	2000276c 	.word	0x2000276c

080123e4 <sbrk_aligned>:
 80123e4:	b570      	push	{r4, r5, r6, lr}
 80123e6:	4e0e      	ldr	r6, [pc, #56]	; (8012420 <sbrk_aligned+0x3c>)
 80123e8:	460c      	mov	r4, r1
 80123ea:	6831      	ldr	r1, [r6, #0]
 80123ec:	4605      	mov	r5, r0
 80123ee:	b911      	cbnz	r1, 80123f6 <sbrk_aligned+0x12>
 80123f0:	f000 fcf6 	bl	8012de0 <_sbrk_r>
 80123f4:	6030      	str	r0, [r6, #0]
 80123f6:	4621      	mov	r1, r4
 80123f8:	4628      	mov	r0, r5
 80123fa:	f000 fcf1 	bl	8012de0 <_sbrk_r>
 80123fe:	1c43      	adds	r3, r0, #1
 8012400:	d00a      	beq.n	8012418 <sbrk_aligned+0x34>
 8012402:	1cc4      	adds	r4, r0, #3
 8012404:	f024 0403 	bic.w	r4, r4, #3
 8012408:	42a0      	cmp	r0, r4
 801240a:	d007      	beq.n	801241c <sbrk_aligned+0x38>
 801240c:	1a21      	subs	r1, r4, r0
 801240e:	4628      	mov	r0, r5
 8012410:	f000 fce6 	bl	8012de0 <_sbrk_r>
 8012414:	3001      	adds	r0, #1
 8012416:	d101      	bne.n	801241c <sbrk_aligned+0x38>
 8012418:	f04f 34ff 	mov.w	r4, #4294967295
 801241c:	4620      	mov	r0, r4
 801241e:	bd70      	pop	{r4, r5, r6, pc}
 8012420:	20002770 	.word	0x20002770

08012424 <_malloc_r>:
 8012424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012428:	1ccd      	adds	r5, r1, #3
 801242a:	f025 0503 	bic.w	r5, r5, #3
 801242e:	3508      	adds	r5, #8
 8012430:	2d0c      	cmp	r5, #12
 8012432:	bf38      	it	cc
 8012434:	250c      	movcc	r5, #12
 8012436:	2d00      	cmp	r5, #0
 8012438:	4607      	mov	r7, r0
 801243a:	db01      	blt.n	8012440 <_malloc_r+0x1c>
 801243c:	42a9      	cmp	r1, r5
 801243e:	d905      	bls.n	801244c <_malloc_r+0x28>
 8012440:	230c      	movs	r3, #12
 8012442:	603b      	str	r3, [r7, #0]
 8012444:	2600      	movs	r6, #0
 8012446:	4630      	mov	r0, r6
 8012448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801244c:	4e2e      	ldr	r6, [pc, #184]	; (8012508 <_malloc_r+0xe4>)
 801244e:	f001 fb63 	bl	8013b18 <__malloc_lock>
 8012452:	6833      	ldr	r3, [r6, #0]
 8012454:	461c      	mov	r4, r3
 8012456:	bb34      	cbnz	r4, 80124a6 <_malloc_r+0x82>
 8012458:	4629      	mov	r1, r5
 801245a:	4638      	mov	r0, r7
 801245c:	f7ff ffc2 	bl	80123e4 <sbrk_aligned>
 8012460:	1c43      	adds	r3, r0, #1
 8012462:	4604      	mov	r4, r0
 8012464:	d14d      	bne.n	8012502 <_malloc_r+0xde>
 8012466:	6834      	ldr	r4, [r6, #0]
 8012468:	4626      	mov	r6, r4
 801246a:	2e00      	cmp	r6, #0
 801246c:	d140      	bne.n	80124f0 <_malloc_r+0xcc>
 801246e:	6823      	ldr	r3, [r4, #0]
 8012470:	4631      	mov	r1, r6
 8012472:	4638      	mov	r0, r7
 8012474:	eb04 0803 	add.w	r8, r4, r3
 8012478:	f000 fcb2 	bl	8012de0 <_sbrk_r>
 801247c:	4580      	cmp	r8, r0
 801247e:	d13a      	bne.n	80124f6 <_malloc_r+0xd2>
 8012480:	6821      	ldr	r1, [r4, #0]
 8012482:	3503      	adds	r5, #3
 8012484:	1a6d      	subs	r5, r5, r1
 8012486:	f025 0503 	bic.w	r5, r5, #3
 801248a:	3508      	adds	r5, #8
 801248c:	2d0c      	cmp	r5, #12
 801248e:	bf38      	it	cc
 8012490:	250c      	movcc	r5, #12
 8012492:	4629      	mov	r1, r5
 8012494:	4638      	mov	r0, r7
 8012496:	f7ff ffa5 	bl	80123e4 <sbrk_aligned>
 801249a:	3001      	adds	r0, #1
 801249c:	d02b      	beq.n	80124f6 <_malloc_r+0xd2>
 801249e:	6823      	ldr	r3, [r4, #0]
 80124a0:	442b      	add	r3, r5
 80124a2:	6023      	str	r3, [r4, #0]
 80124a4:	e00e      	b.n	80124c4 <_malloc_r+0xa0>
 80124a6:	6822      	ldr	r2, [r4, #0]
 80124a8:	1b52      	subs	r2, r2, r5
 80124aa:	d41e      	bmi.n	80124ea <_malloc_r+0xc6>
 80124ac:	2a0b      	cmp	r2, #11
 80124ae:	d916      	bls.n	80124de <_malloc_r+0xba>
 80124b0:	1961      	adds	r1, r4, r5
 80124b2:	42a3      	cmp	r3, r4
 80124b4:	6025      	str	r5, [r4, #0]
 80124b6:	bf18      	it	ne
 80124b8:	6059      	strne	r1, [r3, #4]
 80124ba:	6863      	ldr	r3, [r4, #4]
 80124bc:	bf08      	it	eq
 80124be:	6031      	streq	r1, [r6, #0]
 80124c0:	5162      	str	r2, [r4, r5]
 80124c2:	604b      	str	r3, [r1, #4]
 80124c4:	4638      	mov	r0, r7
 80124c6:	f104 060b 	add.w	r6, r4, #11
 80124ca:	f001 fb2b 	bl	8013b24 <__malloc_unlock>
 80124ce:	f026 0607 	bic.w	r6, r6, #7
 80124d2:	1d23      	adds	r3, r4, #4
 80124d4:	1af2      	subs	r2, r6, r3
 80124d6:	d0b6      	beq.n	8012446 <_malloc_r+0x22>
 80124d8:	1b9b      	subs	r3, r3, r6
 80124da:	50a3      	str	r3, [r4, r2]
 80124dc:	e7b3      	b.n	8012446 <_malloc_r+0x22>
 80124de:	6862      	ldr	r2, [r4, #4]
 80124e0:	42a3      	cmp	r3, r4
 80124e2:	bf0c      	ite	eq
 80124e4:	6032      	streq	r2, [r6, #0]
 80124e6:	605a      	strne	r2, [r3, #4]
 80124e8:	e7ec      	b.n	80124c4 <_malloc_r+0xa0>
 80124ea:	4623      	mov	r3, r4
 80124ec:	6864      	ldr	r4, [r4, #4]
 80124ee:	e7b2      	b.n	8012456 <_malloc_r+0x32>
 80124f0:	4634      	mov	r4, r6
 80124f2:	6876      	ldr	r6, [r6, #4]
 80124f4:	e7b9      	b.n	801246a <_malloc_r+0x46>
 80124f6:	230c      	movs	r3, #12
 80124f8:	603b      	str	r3, [r7, #0]
 80124fa:	4638      	mov	r0, r7
 80124fc:	f001 fb12 	bl	8013b24 <__malloc_unlock>
 8012500:	e7a1      	b.n	8012446 <_malloc_r+0x22>
 8012502:	6025      	str	r5, [r4, #0]
 8012504:	e7de      	b.n	80124c4 <_malloc_r+0xa0>
 8012506:	bf00      	nop
 8012508:	2000276c 	.word	0x2000276c

0801250c <__cvt>:
 801250c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012510:	ec55 4b10 	vmov	r4, r5, d0
 8012514:	2d00      	cmp	r5, #0
 8012516:	460e      	mov	r6, r1
 8012518:	4619      	mov	r1, r3
 801251a:	462b      	mov	r3, r5
 801251c:	bfbb      	ittet	lt
 801251e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8012522:	461d      	movlt	r5, r3
 8012524:	2300      	movge	r3, #0
 8012526:	232d      	movlt	r3, #45	; 0x2d
 8012528:	700b      	strb	r3, [r1, #0]
 801252a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801252c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8012530:	4691      	mov	r9, r2
 8012532:	f023 0820 	bic.w	r8, r3, #32
 8012536:	bfbc      	itt	lt
 8012538:	4622      	movlt	r2, r4
 801253a:	4614      	movlt	r4, r2
 801253c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012540:	d005      	beq.n	801254e <__cvt+0x42>
 8012542:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8012546:	d100      	bne.n	801254a <__cvt+0x3e>
 8012548:	3601      	adds	r6, #1
 801254a:	2102      	movs	r1, #2
 801254c:	e000      	b.n	8012550 <__cvt+0x44>
 801254e:	2103      	movs	r1, #3
 8012550:	ab03      	add	r3, sp, #12
 8012552:	9301      	str	r3, [sp, #4]
 8012554:	ab02      	add	r3, sp, #8
 8012556:	9300      	str	r3, [sp, #0]
 8012558:	ec45 4b10 	vmov	d0, r4, r5
 801255c:	4653      	mov	r3, sl
 801255e:	4632      	mov	r2, r6
 8012560:	f000 fcda 	bl	8012f18 <_dtoa_r>
 8012564:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8012568:	4607      	mov	r7, r0
 801256a:	d102      	bne.n	8012572 <__cvt+0x66>
 801256c:	f019 0f01 	tst.w	r9, #1
 8012570:	d022      	beq.n	80125b8 <__cvt+0xac>
 8012572:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8012576:	eb07 0906 	add.w	r9, r7, r6
 801257a:	d110      	bne.n	801259e <__cvt+0x92>
 801257c:	783b      	ldrb	r3, [r7, #0]
 801257e:	2b30      	cmp	r3, #48	; 0x30
 8012580:	d10a      	bne.n	8012598 <__cvt+0x8c>
 8012582:	2200      	movs	r2, #0
 8012584:	2300      	movs	r3, #0
 8012586:	4620      	mov	r0, r4
 8012588:	4629      	mov	r1, r5
 801258a:	f7ee fabd 	bl	8000b08 <__aeabi_dcmpeq>
 801258e:	b918      	cbnz	r0, 8012598 <__cvt+0x8c>
 8012590:	f1c6 0601 	rsb	r6, r6, #1
 8012594:	f8ca 6000 	str.w	r6, [sl]
 8012598:	f8da 3000 	ldr.w	r3, [sl]
 801259c:	4499      	add	r9, r3
 801259e:	2200      	movs	r2, #0
 80125a0:	2300      	movs	r3, #0
 80125a2:	4620      	mov	r0, r4
 80125a4:	4629      	mov	r1, r5
 80125a6:	f7ee faaf 	bl	8000b08 <__aeabi_dcmpeq>
 80125aa:	b108      	cbz	r0, 80125b0 <__cvt+0xa4>
 80125ac:	f8cd 900c 	str.w	r9, [sp, #12]
 80125b0:	2230      	movs	r2, #48	; 0x30
 80125b2:	9b03      	ldr	r3, [sp, #12]
 80125b4:	454b      	cmp	r3, r9
 80125b6:	d307      	bcc.n	80125c8 <__cvt+0xbc>
 80125b8:	9b03      	ldr	r3, [sp, #12]
 80125ba:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80125bc:	1bdb      	subs	r3, r3, r7
 80125be:	4638      	mov	r0, r7
 80125c0:	6013      	str	r3, [r2, #0]
 80125c2:	b004      	add	sp, #16
 80125c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125c8:	1c59      	adds	r1, r3, #1
 80125ca:	9103      	str	r1, [sp, #12]
 80125cc:	701a      	strb	r2, [r3, #0]
 80125ce:	e7f0      	b.n	80125b2 <__cvt+0xa6>

080125d0 <__exponent>:
 80125d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80125d2:	4603      	mov	r3, r0
 80125d4:	2900      	cmp	r1, #0
 80125d6:	bfb8      	it	lt
 80125d8:	4249      	neglt	r1, r1
 80125da:	f803 2b02 	strb.w	r2, [r3], #2
 80125de:	bfb4      	ite	lt
 80125e0:	222d      	movlt	r2, #45	; 0x2d
 80125e2:	222b      	movge	r2, #43	; 0x2b
 80125e4:	2909      	cmp	r1, #9
 80125e6:	7042      	strb	r2, [r0, #1]
 80125e8:	dd2a      	ble.n	8012640 <__exponent+0x70>
 80125ea:	f10d 0407 	add.w	r4, sp, #7
 80125ee:	46a4      	mov	ip, r4
 80125f0:	270a      	movs	r7, #10
 80125f2:	46a6      	mov	lr, r4
 80125f4:	460a      	mov	r2, r1
 80125f6:	fb91 f6f7 	sdiv	r6, r1, r7
 80125fa:	fb07 1516 	mls	r5, r7, r6, r1
 80125fe:	3530      	adds	r5, #48	; 0x30
 8012600:	2a63      	cmp	r2, #99	; 0x63
 8012602:	f104 34ff 	add.w	r4, r4, #4294967295
 8012606:	f80e 5c01 	strb.w	r5, [lr, #-1]
 801260a:	4631      	mov	r1, r6
 801260c:	dcf1      	bgt.n	80125f2 <__exponent+0x22>
 801260e:	3130      	adds	r1, #48	; 0x30
 8012610:	f1ae 0502 	sub.w	r5, lr, #2
 8012614:	f804 1c01 	strb.w	r1, [r4, #-1]
 8012618:	1c44      	adds	r4, r0, #1
 801261a:	4629      	mov	r1, r5
 801261c:	4561      	cmp	r1, ip
 801261e:	d30a      	bcc.n	8012636 <__exponent+0x66>
 8012620:	f10d 0209 	add.w	r2, sp, #9
 8012624:	eba2 020e 	sub.w	r2, r2, lr
 8012628:	4565      	cmp	r5, ip
 801262a:	bf88      	it	hi
 801262c:	2200      	movhi	r2, #0
 801262e:	4413      	add	r3, r2
 8012630:	1a18      	subs	r0, r3, r0
 8012632:	b003      	add	sp, #12
 8012634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012636:	f811 2b01 	ldrb.w	r2, [r1], #1
 801263a:	f804 2f01 	strb.w	r2, [r4, #1]!
 801263e:	e7ed      	b.n	801261c <__exponent+0x4c>
 8012640:	2330      	movs	r3, #48	; 0x30
 8012642:	3130      	adds	r1, #48	; 0x30
 8012644:	7083      	strb	r3, [r0, #2]
 8012646:	70c1      	strb	r1, [r0, #3]
 8012648:	1d03      	adds	r3, r0, #4
 801264a:	e7f1      	b.n	8012630 <__exponent+0x60>

0801264c <_printf_float>:
 801264c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012650:	ed2d 8b02 	vpush	{d8}
 8012654:	b08d      	sub	sp, #52	; 0x34
 8012656:	460c      	mov	r4, r1
 8012658:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 801265c:	4616      	mov	r6, r2
 801265e:	461f      	mov	r7, r3
 8012660:	4605      	mov	r5, r0
 8012662:	f001 fa47 	bl	8013af4 <_localeconv_r>
 8012666:	f8d0 a000 	ldr.w	sl, [r0]
 801266a:	4650      	mov	r0, sl
 801266c:	f7ed fdd0 	bl	8000210 <strlen>
 8012670:	2300      	movs	r3, #0
 8012672:	930a      	str	r3, [sp, #40]	; 0x28
 8012674:	6823      	ldr	r3, [r4, #0]
 8012676:	9305      	str	r3, [sp, #20]
 8012678:	f8d8 3000 	ldr.w	r3, [r8]
 801267c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8012680:	3307      	adds	r3, #7
 8012682:	f023 0307 	bic.w	r3, r3, #7
 8012686:	f103 0208 	add.w	r2, r3, #8
 801268a:	f8c8 2000 	str.w	r2, [r8]
 801268e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012692:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8012696:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 801269a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 801269e:	9307      	str	r3, [sp, #28]
 80126a0:	f8cd 8018 	str.w	r8, [sp, #24]
 80126a4:	ee08 0a10 	vmov	s16, r0
 80126a8:	4b9f      	ldr	r3, [pc, #636]	; (8012928 <_printf_float+0x2dc>)
 80126aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80126ae:	f04f 32ff 	mov.w	r2, #4294967295
 80126b2:	f7ee fa5b 	bl	8000b6c <__aeabi_dcmpun>
 80126b6:	bb88      	cbnz	r0, 801271c <_printf_float+0xd0>
 80126b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80126bc:	4b9a      	ldr	r3, [pc, #616]	; (8012928 <_printf_float+0x2dc>)
 80126be:	f04f 32ff 	mov.w	r2, #4294967295
 80126c2:	f7ee fa35 	bl	8000b30 <__aeabi_dcmple>
 80126c6:	bb48      	cbnz	r0, 801271c <_printf_float+0xd0>
 80126c8:	2200      	movs	r2, #0
 80126ca:	2300      	movs	r3, #0
 80126cc:	4640      	mov	r0, r8
 80126ce:	4649      	mov	r1, r9
 80126d0:	f7ee fa24 	bl	8000b1c <__aeabi_dcmplt>
 80126d4:	b110      	cbz	r0, 80126dc <_printf_float+0x90>
 80126d6:	232d      	movs	r3, #45	; 0x2d
 80126d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80126dc:	4b93      	ldr	r3, [pc, #588]	; (801292c <_printf_float+0x2e0>)
 80126de:	4894      	ldr	r0, [pc, #592]	; (8012930 <_printf_float+0x2e4>)
 80126e0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80126e4:	bf94      	ite	ls
 80126e6:	4698      	movls	r8, r3
 80126e8:	4680      	movhi	r8, r0
 80126ea:	2303      	movs	r3, #3
 80126ec:	6123      	str	r3, [r4, #16]
 80126ee:	9b05      	ldr	r3, [sp, #20]
 80126f0:	f023 0204 	bic.w	r2, r3, #4
 80126f4:	6022      	str	r2, [r4, #0]
 80126f6:	f04f 0900 	mov.w	r9, #0
 80126fa:	9700      	str	r7, [sp, #0]
 80126fc:	4633      	mov	r3, r6
 80126fe:	aa0b      	add	r2, sp, #44	; 0x2c
 8012700:	4621      	mov	r1, r4
 8012702:	4628      	mov	r0, r5
 8012704:	f000 f9d8 	bl	8012ab8 <_printf_common>
 8012708:	3001      	adds	r0, #1
 801270a:	f040 8090 	bne.w	801282e <_printf_float+0x1e2>
 801270e:	f04f 30ff 	mov.w	r0, #4294967295
 8012712:	b00d      	add	sp, #52	; 0x34
 8012714:	ecbd 8b02 	vpop	{d8}
 8012718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801271c:	4642      	mov	r2, r8
 801271e:	464b      	mov	r3, r9
 8012720:	4640      	mov	r0, r8
 8012722:	4649      	mov	r1, r9
 8012724:	f7ee fa22 	bl	8000b6c <__aeabi_dcmpun>
 8012728:	b140      	cbz	r0, 801273c <_printf_float+0xf0>
 801272a:	464b      	mov	r3, r9
 801272c:	2b00      	cmp	r3, #0
 801272e:	bfbc      	itt	lt
 8012730:	232d      	movlt	r3, #45	; 0x2d
 8012732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8012736:	487f      	ldr	r0, [pc, #508]	; (8012934 <_printf_float+0x2e8>)
 8012738:	4b7f      	ldr	r3, [pc, #508]	; (8012938 <_printf_float+0x2ec>)
 801273a:	e7d1      	b.n	80126e0 <_printf_float+0x94>
 801273c:	6863      	ldr	r3, [r4, #4]
 801273e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8012742:	9206      	str	r2, [sp, #24]
 8012744:	1c5a      	adds	r2, r3, #1
 8012746:	d13f      	bne.n	80127c8 <_printf_float+0x17c>
 8012748:	2306      	movs	r3, #6
 801274a:	6063      	str	r3, [r4, #4]
 801274c:	9b05      	ldr	r3, [sp, #20]
 801274e:	6861      	ldr	r1, [r4, #4]
 8012750:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8012754:	2300      	movs	r3, #0
 8012756:	9303      	str	r3, [sp, #12]
 8012758:	ab0a      	add	r3, sp, #40	; 0x28
 801275a:	e9cd b301 	strd	fp, r3, [sp, #4]
 801275e:	ab09      	add	r3, sp, #36	; 0x24
 8012760:	ec49 8b10 	vmov	d0, r8, r9
 8012764:	9300      	str	r3, [sp, #0]
 8012766:	6022      	str	r2, [r4, #0]
 8012768:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 801276c:	4628      	mov	r0, r5
 801276e:	f7ff fecd 	bl	801250c <__cvt>
 8012772:	9b06      	ldr	r3, [sp, #24]
 8012774:	9909      	ldr	r1, [sp, #36]	; 0x24
 8012776:	2b47      	cmp	r3, #71	; 0x47
 8012778:	4680      	mov	r8, r0
 801277a:	d108      	bne.n	801278e <_printf_float+0x142>
 801277c:	1cc8      	adds	r0, r1, #3
 801277e:	db02      	blt.n	8012786 <_printf_float+0x13a>
 8012780:	6863      	ldr	r3, [r4, #4]
 8012782:	4299      	cmp	r1, r3
 8012784:	dd41      	ble.n	801280a <_printf_float+0x1be>
 8012786:	f1ab 0b02 	sub.w	fp, fp, #2
 801278a:	fa5f fb8b 	uxtb.w	fp, fp
 801278e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012792:	d820      	bhi.n	80127d6 <_printf_float+0x18a>
 8012794:	3901      	subs	r1, #1
 8012796:	465a      	mov	r2, fp
 8012798:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801279c:	9109      	str	r1, [sp, #36]	; 0x24
 801279e:	f7ff ff17 	bl	80125d0 <__exponent>
 80127a2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80127a4:	1813      	adds	r3, r2, r0
 80127a6:	2a01      	cmp	r2, #1
 80127a8:	4681      	mov	r9, r0
 80127aa:	6123      	str	r3, [r4, #16]
 80127ac:	dc02      	bgt.n	80127b4 <_printf_float+0x168>
 80127ae:	6822      	ldr	r2, [r4, #0]
 80127b0:	07d2      	lsls	r2, r2, #31
 80127b2:	d501      	bpl.n	80127b8 <_printf_float+0x16c>
 80127b4:	3301      	adds	r3, #1
 80127b6:	6123      	str	r3, [r4, #16]
 80127b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80127bc:	2b00      	cmp	r3, #0
 80127be:	d09c      	beq.n	80126fa <_printf_float+0xae>
 80127c0:	232d      	movs	r3, #45	; 0x2d
 80127c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80127c6:	e798      	b.n	80126fa <_printf_float+0xae>
 80127c8:	9a06      	ldr	r2, [sp, #24]
 80127ca:	2a47      	cmp	r2, #71	; 0x47
 80127cc:	d1be      	bne.n	801274c <_printf_float+0x100>
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d1bc      	bne.n	801274c <_printf_float+0x100>
 80127d2:	2301      	movs	r3, #1
 80127d4:	e7b9      	b.n	801274a <_printf_float+0xfe>
 80127d6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80127da:	d118      	bne.n	801280e <_printf_float+0x1c2>
 80127dc:	2900      	cmp	r1, #0
 80127de:	6863      	ldr	r3, [r4, #4]
 80127e0:	dd0b      	ble.n	80127fa <_printf_float+0x1ae>
 80127e2:	6121      	str	r1, [r4, #16]
 80127e4:	b913      	cbnz	r3, 80127ec <_printf_float+0x1a0>
 80127e6:	6822      	ldr	r2, [r4, #0]
 80127e8:	07d0      	lsls	r0, r2, #31
 80127ea:	d502      	bpl.n	80127f2 <_printf_float+0x1a6>
 80127ec:	3301      	adds	r3, #1
 80127ee:	440b      	add	r3, r1
 80127f0:	6123      	str	r3, [r4, #16]
 80127f2:	65a1      	str	r1, [r4, #88]	; 0x58
 80127f4:	f04f 0900 	mov.w	r9, #0
 80127f8:	e7de      	b.n	80127b8 <_printf_float+0x16c>
 80127fa:	b913      	cbnz	r3, 8012802 <_printf_float+0x1b6>
 80127fc:	6822      	ldr	r2, [r4, #0]
 80127fe:	07d2      	lsls	r2, r2, #31
 8012800:	d501      	bpl.n	8012806 <_printf_float+0x1ba>
 8012802:	3302      	adds	r3, #2
 8012804:	e7f4      	b.n	80127f0 <_printf_float+0x1a4>
 8012806:	2301      	movs	r3, #1
 8012808:	e7f2      	b.n	80127f0 <_printf_float+0x1a4>
 801280a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 801280e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012810:	4299      	cmp	r1, r3
 8012812:	db05      	blt.n	8012820 <_printf_float+0x1d4>
 8012814:	6823      	ldr	r3, [r4, #0]
 8012816:	6121      	str	r1, [r4, #16]
 8012818:	07d8      	lsls	r0, r3, #31
 801281a:	d5ea      	bpl.n	80127f2 <_printf_float+0x1a6>
 801281c:	1c4b      	adds	r3, r1, #1
 801281e:	e7e7      	b.n	80127f0 <_printf_float+0x1a4>
 8012820:	2900      	cmp	r1, #0
 8012822:	bfd4      	ite	le
 8012824:	f1c1 0202 	rsble	r2, r1, #2
 8012828:	2201      	movgt	r2, #1
 801282a:	4413      	add	r3, r2
 801282c:	e7e0      	b.n	80127f0 <_printf_float+0x1a4>
 801282e:	6823      	ldr	r3, [r4, #0]
 8012830:	055a      	lsls	r2, r3, #21
 8012832:	d407      	bmi.n	8012844 <_printf_float+0x1f8>
 8012834:	6923      	ldr	r3, [r4, #16]
 8012836:	4642      	mov	r2, r8
 8012838:	4631      	mov	r1, r6
 801283a:	4628      	mov	r0, r5
 801283c:	47b8      	blx	r7
 801283e:	3001      	adds	r0, #1
 8012840:	d12c      	bne.n	801289c <_printf_float+0x250>
 8012842:	e764      	b.n	801270e <_printf_float+0xc2>
 8012844:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8012848:	f240 80e0 	bls.w	8012a0c <_printf_float+0x3c0>
 801284c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012850:	2200      	movs	r2, #0
 8012852:	2300      	movs	r3, #0
 8012854:	f7ee f958 	bl	8000b08 <__aeabi_dcmpeq>
 8012858:	2800      	cmp	r0, #0
 801285a:	d034      	beq.n	80128c6 <_printf_float+0x27a>
 801285c:	4a37      	ldr	r2, [pc, #220]	; (801293c <_printf_float+0x2f0>)
 801285e:	2301      	movs	r3, #1
 8012860:	4631      	mov	r1, r6
 8012862:	4628      	mov	r0, r5
 8012864:	47b8      	blx	r7
 8012866:	3001      	adds	r0, #1
 8012868:	f43f af51 	beq.w	801270e <_printf_float+0xc2>
 801286c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8012870:	429a      	cmp	r2, r3
 8012872:	db02      	blt.n	801287a <_printf_float+0x22e>
 8012874:	6823      	ldr	r3, [r4, #0]
 8012876:	07d8      	lsls	r0, r3, #31
 8012878:	d510      	bpl.n	801289c <_printf_float+0x250>
 801287a:	ee18 3a10 	vmov	r3, s16
 801287e:	4652      	mov	r2, sl
 8012880:	4631      	mov	r1, r6
 8012882:	4628      	mov	r0, r5
 8012884:	47b8      	blx	r7
 8012886:	3001      	adds	r0, #1
 8012888:	f43f af41 	beq.w	801270e <_printf_float+0xc2>
 801288c:	f04f 0800 	mov.w	r8, #0
 8012890:	f104 091a 	add.w	r9, r4, #26
 8012894:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012896:	3b01      	subs	r3, #1
 8012898:	4543      	cmp	r3, r8
 801289a:	dc09      	bgt.n	80128b0 <_printf_float+0x264>
 801289c:	6823      	ldr	r3, [r4, #0]
 801289e:	079b      	lsls	r3, r3, #30
 80128a0:	f100 8105 	bmi.w	8012aae <_printf_float+0x462>
 80128a4:	68e0      	ldr	r0, [r4, #12]
 80128a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80128a8:	4298      	cmp	r0, r3
 80128aa:	bfb8      	it	lt
 80128ac:	4618      	movlt	r0, r3
 80128ae:	e730      	b.n	8012712 <_printf_float+0xc6>
 80128b0:	2301      	movs	r3, #1
 80128b2:	464a      	mov	r2, r9
 80128b4:	4631      	mov	r1, r6
 80128b6:	4628      	mov	r0, r5
 80128b8:	47b8      	blx	r7
 80128ba:	3001      	adds	r0, #1
 80128bc:	f43f af27 	beq.w	801270e <_printf_float+0xc2>
 80128c0:	f108 0801 	add.w	r8, r8, #1
 80128c4:	e7e6      	b.n	8012894 <_printf_float+0x248>
 80128c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80128c8:	2b00      	cmp	r3, #0
 80128ca:	dc39      	bgt.n	8012940 <_printf_float+0x2f4>
 80128cc:	4a1b      	ldr	r2, [pc, #108]	; (801293c <_printf_float+0x2f0>)
 80128ce:	2301      	movs	r3, #1
 80128d0:	4631      	mov	r1, r6
 80128d2:	4628      	mov	r0, r5
 80128d4:	47b8      	blx	r7
 80128d6:	3001      	adds	r0, #1
 80128d8:	f43f af19 	beq.w	801270e <_printf_float+0xc2>
 80128dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80128e0:	4313      	orrs	r3, r2
 80128e2:	d102      	bne.n	80128ea <_printf_float+0x29e>
 80128e4:	6823      	ldr	r3, [r4, #0]
 80128e6:	07d9      	lsls	r1, r3, #31
 80128e8:	d5d8      	bpl.n	801289c <_printf_float+0x250>
 80128ea:	ee18 3a10 	vmov	r3, s16
 80128ee:	4652      	mov	r2, sl
 80128f0:	4631      	mov	r1, r6
 80128f2:	4628      	mov	r0, r5
 80128f4:	47b8      	blx	r7
 80128f6:	3001      	adds	r0, #1
 80128f8:	f43f af09 	beq.w	801270e <_printf_float+0xc2>
 80128fc:	f04f 0900 	mov.w	r9, #0
 8012900:	f104 0a1a 	add.w	sl, r4, #26
 8012904:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012906:	425b      	negs	r3, r3
 8012908:	454b      	cmp	r3, r9
 801290a:	dc01      	bgt.n	8012910 <_printf_float+0x2c4>
 801290c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801290e:	e792      	b.n	8012836 <_printf_float+0x1ea>
 8012910:	2301      	movs	r3, #1
 8012912:	4652      	mov	r2, sl
 8012914:	4631      	mov	r1, r6
 8012916:	4628      	mov	r0, r5
 8012918:	47b8      	blx	r7
 801291a:	3001      	adds	r0, #1
 801291c:	f43f aef7 	beq.w	801270e <_printf_float+0xc2>
 8012920:	f109 0901 	add.w	r9, r9, #1
 8012924:	e7ee      	b.n	8012904 <_printf_float+0x2b8>
 8012926:	bf00      	nop
 8012928:	7fefffff 	.word	0x7fefffff
 801292c:	08014e04 	.word	0x08014e04
 8012930:	08014e08 	.word	0x08014e08
 8012934:	08014e10 	.word	0x08014e10
 8012938:	08014e0c 	.word	0x08014e0c
 801293c:	08014e14 	.word	0x08014e14
 8012940:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012942:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8012944:	429a      	cmp	r2, r3
 8012946:	bfa8      	it	ge
 8012948:	461a      	movge	r2, r3
 801294a:	2a00      	cmp	r2, #0
 801294c:	4691      	mov	r9, r2
 801294e:	dc37      	bgt.n	80129c0 <_printf_float+0x374>
 8012950:	f04f 0b00 	mov.w	fp, #0
 8012954:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012958:	f104 021a 	add.w	r2, r4, #26
 801295c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801295e:	9305      	str	r3, [sp, #20]
 8012960:	eba3 0309 	sub.w	r3, r3, r9
 8012964:	455b      	cmp	r3, fp
 8012966:	dc33      	bgt.n	80129d0 <_printf_float+0x384>
 8012968:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801296c:	429a      	cmp	r2, r3
 801296e:	db3b      	blt.n	80129e8 <_printf_float+0x39c>
 8012970:	6823      	ldr	r3, [r4, #0]
 8012972:	07da      	lsls	r2, r3, #31
 8012974:	d438      	bmi.n	80129e8 <_printf_float+0x39c>
 8012976:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012978:	9a05      	ldr	r2, [sp, #20]
 801297a:	9909      	ldr	r1, [sp, #36]	; 0x24
 801297c:	1a9a      	subs	r2, r3, r2
 801297e:	eba3 0901 	sub.w	r9, r3, r1
 8012982:	4591      	cmp	r9, r2
 8012984:	bfa8      	it	ge
 8012986:	4691      	movge	r9, r2
 8012988:	f1b9 0f00 	cmp.w	r9, #0
 801298c:	dc35      	bgt.n	80129fa <_printf_float+0x3ae>
 801298e:	f04f 0800 	mov.w	r8, #0
 8012992:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012996:	f104 0a1a 	add.w	sl, r4, #26
 801299a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 801299e:	1a9b      	subs	r3, r3, r2
 80129a0:	eba3 0309 	sub.w	r3, r3, r9
 80129a4:	4543      	cmp	r3, r8
 80129a6:	f77f af79 	ble.w	801289c <_printf_float+0x250>
 80129aa:	2301      	movs	r3, #1
 80129ac:	4652      	mov	r2, sl
 80129ae:	4631      	mov	r1, r6
 80129b0:	4628      	mov	r0, r5
 80129b2:	47b8      	blx	r7
 80129b4:	3001      	adds	r0, #1
 80129b6:	f43f aeaa 	beq.w	801270e <_printf_float+0xc2>
 80129ba:	f108 0801 	add.w	r8, r8, #1
 80129be:	e7ec      	b.n	801299a <_printf_float+0x34e>
 80129c0:	4613      	mov	r3, r2
 80129c2:	4631      	mov	r1, r6
 80129c4:	4642      	mov	r2, r8
 80129c6:	4628      	mov	r0, r5
 80129c8:	47b8      	blx	r7
 80129ca:	3001      	adds	r0, #1
 80129cc:	d1c0      	bne.n	8012950 <_printf_float+0x304>
 80129ce:	e69e      	b.n	801270e <_printf_float+0xc2>
 80129d0:	2301      	movs	r3, #1
 80129d2:	4631      	mov	r1, r6
 80129d4:	4628      	mov	r0, r5
 80129d6:	9205      	str	r2, [sp, #20]
 80129d8:	47b8      	blx	r7
 80129da:	3001      	adds	r0, #1
 80129dc:	f43f ae97 	beq.w	801270e <_printf_float+0xc2>
 80129e0:	9a05      	ldr	r2, [sp, #20]
 80129e2:	f10b 0b01 	add.w	fp, fp, #1
 80129e6:	e7b9      	b.n	801295c <_printf_float+0x310>
 80129e8:	ee18 3a10 	vmov	r3, s16
 80129ec:	4652      	mov	r2, sl
 80129ee:	4631      	mov	r1, r6
 80129f0:	4628      	mov	r0, r5
 80129f2:	47b8      	blx	r7
 80129f4:	3001      	adds	r0, #1
 80129f6:	d1be      	bne.n	8012976 <_printf_float+0x32a>
 80129f8:	e689      	b.n	801270e <_printf_float+0xc2>
 80129fa:	9a05      	ldr	r2, [sp, #20]
 80129fc:	464b      	mov	r3, r9
 80129fe:	4442      	add	r2, r8
 8012a00:	4631      	mov	r1, r6
 8012a02:	4628      	mov	r0, r5
 8012a04:	47b8      	blx	r7
 8012a06:	3001      	adds	r0, #1
 8012a08:	d1c1      	bne.n	801298e <_printf_float+0x342>
 8012a0a:	e680      	b.n	801270e <_printf_float+0xc2>
 8012a0c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8012a0e:	2a01      	cmp	r2, #1
 8012a10:	dc01      	bgt.n	8012a16 <_printf_float+0x3ca>
 8012a12:	07db      	lsls	r3, r3, #31
 8012a14:	d538      	bpl.n	8012a88 <_printf_float+0x43c>
 8012a16:	2301      	movs	r3, #1
 8012a18:	4642      	mov	r2, r8
 8012a1a:	4631      	mov	r1, r6
 8012a1c:	4628      	mov	r0, r5
 8012a1e:	47b8      	blx	r7
 8012a20:	3001      	adds	r0, #1
 8012a22:	f43f ae74 	beq.w	801270e <_printf_float+0xc2>
 8012a26:	ee18 3a10 	vmov	r3, s16
 8012a2a:	4652      	mov	r2, sl
 8012a2c:	4631      	mov	r1, r6
 8012a2e:	4628      	mov	r0, r5
 8012a30:	47b8      	blx	r7
 8012a32:	3001      	adds	r0, #1
 8012a34:	f43f ae6b 	beq.w	801270e <_printf_float+0xc2>
 8012a38:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8012a3c:	2200      	movs	r2, #0
 8012a3e:	2300      	movs	r3, #0
 8012a40:	f7ee f862 	bl	8000b08 <__aeabi_dcmpeq>
 8012a44:	b9d8      	cbnz	r0, 8012a7e <_printf_float+0x432>
 8012a46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a48:	f108 0201 	add.w	r2, r8, #1
 8012a4c:	3b01      	subs	r3, #1
 8012a4e:	4631      	mov	r1, r6
 8012a50:	4628      	mov	r0, r5
 8012a52:	47b8      	blx	r7
 8012a54:	3001      	adds	r0, #1
 8012a56:	d10e      	bne.n	8012a76 <_printf_float+0x42a>
 8012a58:	e659      	b.n	801270e <_printf_float+0xc2>
 8012a5a:	2301      	movs	r3, #1
 8012a5c:	4652      	mov	r2, sl
 8012a5e:	4631      	mov	r1, r6
 8012a60:	4628      	mov	r0, r5
 8012a62:	47b8      	blx	r7
 8012a64:	3001      	adds	r0, #1
 8012a66:	f43f ae52 	beq.w	801270e <_printf_float+0xc2>
 8012a6a:	f108 0801 	add.w	r8, r8, #1
 8012a6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8012a70:	3b01      	subs	r3, #1
 8012a72:	4543      	cmp	r3, r8
 8012a74:	dcf1      	bgt.n	8012a5a <_printf_float+0x40e>
 8012a76:	464b      	mov	r3, r9
 8012a78:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8012a7c:	e6dc      	b.n	8012838 <_printf_float+0x1ec>
 8012a7e:	f04f 0800 	mov.w	r8, #0
 8012a82:	f104 0a1a 	add.w	sl, r4, #26
 8012a86:	e7f2      	b.n	8012a6e <_printf_float+0x422>
 8012a88:	2301      	movs	r3, #1
 8012a8a:	4642      	mov	r2, r8
 8012a8c:	e7df      	b.n	8012a4e <_printf_float+0x402>
 8012a8e:	2301      	movs	r3, #1
 8012a90:	464a      	mov	r2, r9
 8012a92:	4631      	mov	r1, r6
 8012a94:	4628      	mov	r0, r5
 8012a96:	47b8      	blx	r7
 8012a98:	3001      	adds	r0, #1
 8012a9a:	f43f ae38 	beq.w	801270e <_printf_float+0xc2>
 8012a9e:	f108 0801 	add.w	r8, r8, #1
 8012aa2:	68e3      	ldr	r3, [r4, #12]
 8012aa4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8012aa6:	1a5b      	subs	r3, r3, r1
 8012aa8:	4543      	cmp	r3, r8
 8012aaa:	dcf0      	bgt.n	8012a8e <_printf_float+0x442>
 8012aac:	e6fa      	b.n	80128a4 <_printf_float+0x258>
 8012aae:	f04f 0800 	mov.w	r8, #0
 8012ab2:	f104 0919 	add.w	r9, r4, #25
 8012ab6:	e7f4      	b.n	8012aa2 <_printf_float+0x456>

08012ab8 <_printf_common>:
 8012ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012abc:	4616      	mov	r6, r2
 8012abe:	4699      	mov	r9, r3
 8012ac0:	688a      	ldr	r2, [r1, #8]
 8012ac2:	690b      	ldr	r3, [r1, #16]
 8012ac4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8012ac8:	4293      	cmp	r3, r2
 8012aca:	bfb8      	it	lt
 8012acc:	4613      	movlt	r3, r2
 8012ace:	6033      	str	r3, [r6, #0]
 8012ad0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012ad4:	4607      	mov	r7, r0
 8012ad6:	460c      	mov	r4, r1
 8012ad8:	b10a      	cbz	r2, 8012ade <_printf_common+0x26>
 8012ada:	3301      	adds	r3, #1
 8012adc:	6033      	str	r3, [r6, #0]
 8012ade:	6823      	ldr	r3, [r4, #0]
 8012ae0:	0699      	lsls	r1, r3, #26
 8012ae2:	bf42      	ittt	mi
 8012ae4:	6833      	ldrmi	r3, [r6, #0]
 8012ae6:	3302      	addmi	r3, #2
 8012ae8:	6033      	strmi	r3, [r6, #0]
 8012aea:	6825      	ldr	r5, [r4, #0]
 8012aec:	f015 0506 	ands.w	r5, r5, #6
 8012af0:	d106      	bne.n	8012b00 <_printf_common+0x48>
 8012af2:	f104 0a19 	add.w	sl, r4, #25
 8012af6:	68e3      	ldr	r3, [r4, #12]
 8012af8:	6832      	ldr	r2, [r6, #0]
 8012afa:	1a9b      	subs	r3, r3, r2
 8012afc:	42ab      	cmp	r3, r5
 8012afe:	dc26      	bgt.n	8012b4e <_printf_common+0x96>
 8012b00:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012b04:	1e13      	subs	r3, r2, #0
 8012b06:	6822      	ldr	r2, [r4, #0]
 8012b08:	bf18      	it	ne
 8012b0a:	2301      	movne	r3, #1
 8012b0c:	0692      	lsls	r2, r2, #26
 8012b0e:	d42b      	bmi.n	8012b68 <_printf_common+0xb0>
 8012b10:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8012b14:	4649      	mov	r1, r9
 8012b16:	4638      	mov	r0, r7
 8012b18:	47c0      	blx	r8
 8012b1a:	3001      	adds	r0, #1
 8012b1c:	d01e      	beq.n	8012b5c <_printf_common+0xa4>
 8012b1e:	6823      	ldr	r3, [r4, #0]
 8012b20:	68e5      	ldr	r5, [r4, #12]
 8012b22:	6832      	ldr	r2, [r6, #0]
 8012b24:	f003 0306 	and.w	r3, r3, #6
 8012b28:	2b04      	cmp	r3, #4
 8012b2a:	bf08      	it	eq
 8012b2c:	1aad      	subeq	r5, r5, r2
 8012b2e:	68a3      	ldr	r3, [r4, #8]
 8012b30:	6922      	ldr	r2, [r4, #16]
 8012b32:	bf0c      	ite	eq
 8012b34:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012b38:	2500      	movne	r5, #0
 8012b3a:	4293      	cmp	r3, r2
 8012b3c:	bfc4      	itt	gt
 8012b3e:	1a9b      	subgt	r3, r3, r2
 8012b40:	18ed      	addgt	r5, r5, r3
 8012b42:	2600      	movs	r6, #0
 8012b44:	341a      	adds	r4, #26
 8012b46:	42b5      	cmp	r5, r6
 8012b48:	d11a      	bne.n	8012b80 <_printf_common+0xc8>
 8012b4a:	2000      	movs	r0, #0
 8012b4c:	e008      	b.n	8012b60 <_printf_common+0xa8>
 8012b4e:	2301      	movs	r3, #1
 8012b50:	4652      	mov	r2, sl
 8012b52:	4649      	mov	r1, r9
 8012b54:	4638      	mov	r0, r7
 8012b56:	47c0      	blx	r8
 8012b58:	3001      	adds	r0, #1
 8012b5a:	d103      	bne.n	8012b64 <_printf_common+0xac>
 8012b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8012b60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012b64:	3501      	adds	r5, #1
 8012b66:	e7c6      	b.n	8012af6 <_printf_common+0x3e>
 8012b68:	18e1      	adds	r1, r4, r3
 8012b6a:	1c5a      	adds	r2, r3, #1
 8012b6c:	2030      	movs	r0, #48	; 0x30
 8012b6e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012b72:	4422      	add	r2, r4
 8012b74:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012b78:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012b7c:	3302      	adds	r3, #2
 8012b7e:	e7c7      	b.n	8012b10 <_printf_common+0x58>
 8012b80:	2301      	movs	r3, #1
 8012b82:	4622      	mov	r2, r4
 8012b84:	4649      	mov	r1, r9
 8012b86:	4638      	mov	r0, r7
 8012b88:	47c0      	blx	r8
 8012b8a:	3001      	adds	r0, #1
 8012b8c:	d0e6      	beq.n	8012b5c <_printf_common+0xa4>
 8012b8e:	3601      	adds	r6, #1
 8012b90:	e7d9      	b.n	8012b46 <_printf_common+0x8e>
	...

08012b94 <_printf_i>:
 8012b94:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012b98:	7e0f      	ldrb	r7, [r1, #24]
 8012b9a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012b9c:	2f78      	cmp	r7, #120	; 0x78
 8012b9e:	4691      	mov	r9, r2
 8012ba0:	4680      	mov	r8, r0
 8012ba2:	460c      	mov	r4, r1
 8012ba4:	469a      	mov	sl, r3
 8012ba6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012baa:	d807      	bhi.n	8012bbc <_printf_i+0x28>
 8012bac:	2f62      	cmp	r7, #98	; 0x62
 8012bae:	d80a      	bhi.n	8012bc6 <_printf_i+0x32>
 8012bb0:	2f00      	cmp	r7, #0
 8012bb2:	f000 80d8 	beq.w	8012d66 <_printf_i+0x1d2>
 8012bb6:	2f58      	cmp	r7, #88	; 0x58
 8012bb8:	f000 80a3 	beq.w	8012d02 <_printf_i+0x16e>
 8012bbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012bc0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012bc4:	e03a      	b.n	8012c3c <_printf_i+0xa8>
 8012bc6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012bca:	2b15      	cmp	r3, #21
 8012bcc:	d8f6      	bhi.n	8012bbc <_printf_i+0x28>
 8012bce:	a101      	add	r1, pc, #4	; (adr r1, 8012bd4 <_printf_i+0x40>)
 8012bd0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012bd4:	08012c2d 	.word	0x08012c2d
 8012bd8:	08012c41 	.word	0x08012c41
 8012bdc:	08012bbd 	.word	0x08012bbd
 8012be0:	08012bbd 	.word	0x08012bbd
 8012be4:	08012bbd 	.word	0x08012bbd
 8012be8:	08012bbd 	.word	0x08012bbd
 8012bec:	08012c41 	.word	0x08012c41
 8012bf0:	08012bbd 	.word	0x08012bbd
 8012bf4:	08012bbd 	.word	0x08012bbd
 8012bf8:	08012bbd 	.word	0x08012bbd
 8012bfc:	08012bbd 	.word	0x08012bbd
 8012c00:	08012d4d 	.word	0x08012d4d
 8012c04:	08012c71 	.word	0x08012c71
 8012c08:	08012d2f 	.word	0x08012d2f
 8012c0c:	08012bbd 	.word	0x08012bbd
 8012c10:	08012bbd 	.word	0x08012bbd
 8012c14:	08012d6f 	.word	0x08012d6f
 8012c18:	08012bbd 	.word	0x08012bbd
 8012c1c:	08012c71 	.word	0x08012c71
 8012c20:	08012bbd 	.word	0x08012bbd
 8012c24:	08012bbd 	.word	0x08012bbd
 8012c28:	08012d37 	.word	0x08012d37
 8012c2c:	682b      	ldr	r3, [r5, #0]
 8012c2e:	1d1a      	adds	r2, r3, #4
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	602a      	str	r2, [r5, #0]
 8012c34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012c38:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012c3c:	2301      	movs	r3, #1
 8012c3e:	e0a3      	b.n	8012d88 <_printf_i+0x1f4>
 8012c40:	6820      	ldr	r0, [r4, #0]
 8012c42:	6829      	ldr	r1, [r5, #0]
 8012c44:	0606      	lsls	r6, r0, #24
 8012c46:	f101 0304 	add.w	r3, r1, #4
 8012c4a:	d50a      	bpl.n	8012c62 <_printf_i+0xce>
 8012c4c:	680e      	ldr	r6, [r1, #0]
 8012c4e:	602b      	str	r3, [r5, #0]
 8012c50:	2e00      	cmp	r6, #0
 8012c52:	da03      	bge.n	8012c5c <_printf_i+0xc8>
 8012c54:	232d      	movs	r3, #45	; 0x2d
 8012c56:	4276      	negs	r6, r6
 8012c58:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012c5c:	485e      	ldr	r0, [pc, #376]	; (8012dd8 <_printf_i+0x244>)
 8012c5e:	230a      	movs	r3, #10
 8012c60:	e019      	b.n	8012c96 <_printf_i+0x102>
 8012c62:	680e      	ldr	r6, [r1, #0]
 8012c64:	602b      	str	r3, [r5, #0]
 8012c66:	f010 0f40 	tst.w	r0, #64	; 0x40
 8012c6a:	bf18      	it	ne
 8012c6c:	b236      	sxthne	r6, r6
 8012c6e:	e7ef      	b.n	8012c50 <_printf_i+0xbc>
 8012c70:	682b      	ldr	r3, [r5, #0]
 8012c72:	6820      	ldr	r0, [r4, #0]
 8012c74:	1d19      	adds	r1, r3, #4
 8012c76:	6029      	str	r1, [r5, #0]
 8012c78:	0601      	lsls	r1, r0, #24
 8012c7a:	d501      	bpl.n	8012c80 <_printf_i+0xec>
 8012c7c:	681e      	ldr	r6, [r3, #0]
 8012c7e:	e002      	b.n	8012c86 <_printf_i+0xf2>
 8012c80:	0646      	lsls	r6, r0, #25
 8012c82:	d5fb      	bpl.n	8012c7c <_printf_i+0xe8>
 8012c84:	881e      	ldrh	r6, [r3, #0]
 8012c86:	4854      	ldr	r0, [pc, #336]	; (8012dd8 <_printf_i+0x244>)
 8012c88:	2f6f      	cmp	r7, #111	; 0x6f
 8012c8a:	bf0c      	ite	eq
 8012c8c:	2308      	moveq	r3, #8
 8012c8e:	230a      	movne	r3, #10
 8012c90:	2100      	movs	r1, #0
 8012c92:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8012c96:	6865      	ldr	r5, [r4, #4]
 8012c98:	60a5      	str	r5, [r4, #8]
 8012c9a:	2d00      	cmp	r5, #0
 8012c9c:	bfa2      	ittt	ge
 8012c9e:	6821      	ldrge	r1, [r4, #0]
 8012ca0:	f021 0104 	bicge.w	r1, r1, #4
 8012ca4:	6021      	strge	r1, [r4, #0]
 8012ca6:	b90e      	cbnz	r6, 8012cac <_printf_i+0x118>
 8012ca8:	2d00      	cmp	r5, #0
 8012caa:	d04d      	beq.n	8012d48 <_printf_i+0x1b4>
 8012cac:	4615      	mov	r5, r2
 8012cae:	fbb6 f1f3 	udiv	r1, r6, r3
 8012cb2:	fb03 6711 	mls	r7, r3, r1, r6
 8012cb6:	5dc7      	ldrb	r7, [r0, r7]
 8012cb8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012cbc:	4637      	mov	r7, r6
 8012cbe:	42bb      	cmp	r3, r7
 8012cc0:	460e      	mov	r6, r1
 8012cc2:	d9f4      	bls.n	8012cae <_printf_i+0x11a>
 8012cc4:	2b08      	cmp	r3, #8
 8012cc6:	d10b      	bne.n	8012ce0 <_printf_i+0x14c>
 8012cc8:	6823      	ldr	r3, [r4, #0]
 8012cca:	07de      	lsls	r6, r3, #31
 8012ccc:	d508      	bpl.n	8012ce0 <_printf_i+0x14c>
 8012cce:	6923      	ldr	r3, [r4, #16]
 8012cd0:	6861      	ldr	r1, [r4, #4]
 8012cd2:	4299      	cmp	r1, r3
 8012cd4:	bfde      	ittt	le
 8012cd6:	2330      	movle	r3, #48	; 0x30
 8012cd8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012cdc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8012ce0:	1b52      	subs	r2, r2, r5
 8012ce2:	6122      	str	r2, [r4, #16]
 8012ce4:	f8cd a000 	str.w	sl, [sp]
 8012ce8:	464b      	mov	r3, r9
 8012cea:	aa03      	add	r2, sp, #12
 8012cec:	4621      	mov	r1, r4
 8012cee:	4640      	mov	r0, r8
 8012cf0:	f7ff fee2 	bl	8012ab8 <_printf_common>
 8012cf4:	3001      	adds	r0, #1
 8012cf6:	d14c      	bne.n	8012d92 <_printf_i+0x1fe>
 8012cf8:	f04f 30ff 	mov.w	r0, #4294967295
 8012cfc:	b004      	add	sp, #16
 8012cfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012d02:	4835      	ldr	r0, [pc, #212]	; (8012dd8 <_printf_i+0x244>)
 8012d04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8012d08:	6829      	ldr	r1, [r5, #0]
 8012d0a:	6823      	ldr	r3, [r4, #0]
 8012d0c:	f851 6b04 	ldr.w	r6, [r1], #4
 8012d10:	6029      	str	r1, [r5, #0]
 8012d12:	061d      	lsls	r5, r3, #24
 8012d14:	d514      	bpl.n	8012d40 <_printf_i+0x1ac>
 8012d16:	07df      	lsls	r7, r3, #31
 8012d18:	bf44      	itt	mi
 8012d1a:	f043 0320 	orrmi.w	r3, r3, #32
 8012d1e:	6023      	strmi	r3, [r4, #0]
 8012d20:	b91e      	cbnz	r6, 8012d2a <_printf_i+0x196>
 8012d22:	6823      	ldr	r3, [r4, #0]
 8012d24:	f023 0320 	bic.w	r3, r3, #32
 8012d28:	6023      	str	r3, [r4, #0]
 8012d2a:	2310      	movs	r3, #16
 8012d2c:	e7b0      	b.n	8012c90 <_printf_i+0xfc>
 8012d2e:	6823      	ldr	r3, [r4, #0]
 8012d30:	f043 0320 	orr.w	r3, r3, #32
 8012d34:	6023      	str	r3, [r4, #0]
 8012d36:	2378      	movs	r3, #120	; 0x78
 8012d38:	4828      	ldr	r0, [pc, #160]	; (8012ddc <_printf_i+0x248>)
 8012d3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012d3e:	e7e3      	b.n	8012d08 <_printf_i+0x174>
 8012d40:	0659      	lsls	r1, r3, #25
 8012d42:	bf48      	it	mi
 8012d44:	b2b6      	uxthmi	r6, r6
 8012d46:	e7e6      	b.n	8012d16 <_printf_i+0x182>
 8012d48:	4615      	mov	r5, r2
 8012d4a:	e7bb      	b.n	8012cc4 <_printf_i+0x130>
 8012d4c:	682b      	ldr	r3, [r5, #0]
 8012d4e:	6826      	ldr	r6, [r4, #0]
 8012d50:	6961      	ldr	r1, [r4, #20]
 8012d52:	1d18      	adds	r0, r3, #4
 8012d54:	6028      	str	r0, [r5, #0]
 8012d56:	0635      	lsls	r5, r6, #24
 8012d58:	681b      	ldr	r3, [r3, #0]
 8012d5a:	d501      	bpl.n	8012d60 <_printf_i+0x1cc>
 8012d5c:	6019      	str	r1, [r3, #0]
 8012d5e:	e002      	b.n	8012d66 <_printf_i+0x1d2>
 8012d60:	0670      	lsls	r0, r6, #25
 8012d62:	d5fb      	bpl.n	8012d5c <_printf_i+0x1c8>
 8012d64:	8019      	strh	r1, [r3, #0]
 8012d66:	2300      	movs	r3, #0
 8012d68:	6123      	str	r3, [r4, #16]
 8012d6a:	4615      	mov	r5, r2
 8012d6c:	e7ba      	b.n	8012ce4 <_printf_i+0x150>
 8012d6e:	682b      	ldr	r3, [r5, #0]
 8012d70:	1d1a      	adds	r2, r3, #4
 8012d72:	602a      	str	r2, [r5, #0]
 8012d74:	681d      	ldr	r5, [r3, #0]
 8012d76:	6862      	ldr	r2, [r4, #4]
 8012d78:	2100      	movs	r1, #0
 8012d7a:	4628      	mov	r0, r5
 8012d7c:	f7ed fa50 	bl	8000220 <memchr>
 8012d80:	b108      	cbz	r0, 8012d86 <_printf_i+0x1f2>
 8012d82:	1b40      	subs	r0, r0, r5
 8012d84:	6060      	str	r0, [r4, #4]
 8012d86:	6863      	ldr	r3, [r4, #4]
 8012d88:	6123      	str	r3, [r4, #16]
 8012d8a:	2300      	movs	r3, #0
 8012d8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012d90:	e7a8      	b.n	8012ce4 <_printf_i+0x150>
 8012d92:	6923      	ldr	r3, [r4, #16]
 8012d94:	462a      	mov	r2, r5
 8012d96:	4649      	mov	r1, r9
 8012d98:	4640      	mov	r0, r8
 8012d9a:	47d0      	blx	sl
 8012d9c:	3001      	adds	r0, #1
 8012d9e:	d0ab      	beq.n	8012cf8 <_printf_i+0x164>
 8012da0:	6823      	ldr	r3, [r4, #0]
 8012da2:	079b      	lsls	r3, r3, #30
 8012da4:	d413      	bmi.n	8012dce <_printf_i+0x23a>
 8012da6:	68e0      	ldr	r0, [r4, #12]
 8012da8:	9b03      	ldr	r3, [sp, #12]
 8012daa:	4298      	cmp	r0, r3
 8012dac:	bfb8      	it	lt
 8012dae:	4618      	movlt	r0, r3
 8012db0:	e7a4      	b.n	8012cfc <_printf_i+0x168>
 8012db2:	2301      	movs	r3, #1
 8012db4:	4632      	mov	r2, r6
 8012db6:	4649      	mov	r1, r9
 8012db8:	4640      	mov	r0, r8
 8012dba:	47d0      	blx	sl
 8012dbc:	3001      	adds	r0, #1
 8012dbe:	d09b      	beq.n	8012cf8 <_printf_i+0x164>
 8012dc0:	3501      	adds	r5, #1
 8012dc2:	68e3      	ldr	r3, [r4, #12]
 8012dc4:	9903      	ldr	r1, [sp, #12]
 8012dc6:	1a5b      	subs	r3, r3, r1
 8012dc8:	42ab      	cmp	r3, r5
 8012dca:	dcf2      	bgt.n	8012db2 <_printf_i+0x21e>
 8012dcc:	e7eb      	b.n	8012da6 <_printf_i+0x212>
 8012dce:	2500      	movs	r5, #0
 8012dd0:	f104 0619 	add.w	r6, r4, #25
 8012dd4:	e7f5      	b.n	8012dc2 <_printf_i+0x22e>
 8012dd6:	bf00      	nop
 8012dd8:	08014e16 	.word	0x08014e16
 8012ddc:	08014e27 	.word	0x08014e27

08012de0 <_sbrk_r>:
 8012de0:	b538      	push	{r3, r4, r5, lr}
 8012de2:	4d06      	ldr	r5, [pc, #24]	; (8012dfc <_sbrk_r+0x1c>)
 8012de4:	2300      	movs	r3, #0
 8012de6:	4604      	mov	r4, r0
 8012de8:	4608      	mov	r0, r1
 8012dea:	602b      	str	r3, [r5, #0]
 8012dec:	f7ef f852 	bl	8001e94 <_sbrk>
 8012df0:	1c43      	adds	r3, r0, #1
 8012df2:	d102      	bne.n	8012dfa <_sbrk_r+0x1a>
 8012df4:	682b      	ldr	r3, [r5, #0]
 8012df6:	b103      	cbz	r3, 8012dfa <_sbrk_r+0x1a>
 8012df8:	6023      	str	r3, [r4, #0]
 8012dfa:	bd38      	pop	{r3, r4, r5, pc}
 8012dfc:	20002774 	.word	0x20002774

08012e00 <quorem>:
 8012e00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e04:	6903      	ldr	r3, [r0, #16]
 8012e06:	690c      	ldr	r4, [r1, #16]
 8012e08:	42a3      	cmp	r3, r4
 8012e0a:	4607      	mov	r7, r0
 8012e0c:	f2c0 8081 	blt.w	8012f12 <quorem+0x112>
 8012e10:	3c01      	subs	r4, #1
 8012e12:	f101 0814 	add.w	r8, r1, #20
 8012e16:	f100 0514 	add.w	r5, r0, #20
 8012e1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012e1e:	9301      	str	r3, [sp, #4]
 8012e20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8012e24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012e28:	3301      	adds	r3, #1
 8012e2a:	429a      	cmp	r2, r3
 8012e2c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8012e30:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8012e34:	fbb2 f6f3 	udiv	r6, r2, r3
 8012e38:	d331      	bcc.n	8012e9e <quorem+0x9e>
 8012e3a:	f04f 0e00 	mov.w	lr, #0
 8012e3e:	4640      	mov	r0, r8
 8012e40:	46ac      	mov	ip, r5
 8012e42:	46f2      	mov	sl, lr
 8012e44:	f850 2b04 	ldr.w	r2, [r0], #4
 8012e48:	b293      	uxth	r3, r2
 8012e4a:	fb06 e303 	mla	r3, r6, r3, lr
 8012e4e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8012e52:	b29b      	uxth	r3, r3
 8012e54:	ebaa 0303 	sub.w	r3, sl, r3
 8012e58:	f8dc a000 	ldr.w	sl, [ip]
 8012e5c:	0c12      	lsrs	r2, r2, #16
 8012e5e:	fa13 f38a 	uxtah	r3, r3, sl
 8012e62:	fb06 e202 	mla	r2, r6, r2, lr
 8012e66:	9300      	str	r3, [sp, #0]
 8012e68:	9b00      	ldr	r3, [sp, #0]
 8012e6a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8012e6e:	b292      	uxth	r2, r2
 8012e70:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8012e74:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012e78:	f8bd 3000 	ldrh.w	r3, [sp]
 8012e7c:	4581      	cmp	r9, r0
 8012e7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012e82:	f84c 3b04 	str.w	r3, [ip], #4
 8012e86:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8012e8a:	d2db      	bcs.n	8012e44 <quorem+0x44>
 8012e8c:	f855 300b 	ldr.w	r3, [r5, fp]
 8012e90:	b92b      	cbnz	r3, 8012e9e <quorem+0x9e>
 8012e92:	9b01      	ldr	r3, [sp, #4]
 8012e94:	3b04      	subs	r3, #4
 8012e96:	429d      	cmp	r5, r3
 8012e98:	461a      	mov	r2, r3
 8012e9a:	d32e      	bcc.n	8012efa <quorem+0xfa>
 8012e9c:	613c      	str	r4, [r7, #16]
 8012e9e:	4638      	mov	r0, r7
 8012ea0:	f001 f8c8 	bl	8014034 <__mcmp>
 8012ea4:	2800      	cmp	r0, #0
 8012ea6:	db24      	blt.n	8012ef2 <quorem+0xf2>
 8012ea8:	3601      	adds	r6, #1
 8012eaa:	4628      	mov	r0, r5
 8012eac:	f04f 0c00 	mov.w	ip, #0
 8012eb0:	f858 2b04 	ldr.w	r2, [r8], #4
 8012eb4:	f8d0 e000 	ldr.w	lr, [r0]
 8012eb8:	b293      	uxth	r3, r2
 8012eba:	ebac 0303 	sub.w	r3, ip, r3
 8012ebe:	0c12      	lsrs	r2, r2, #16
 8012ec0:	fa13 f38e 	uxtah	r3, r3, lr
 8012ec4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8012ec8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8012ecc:	b29b      	uxth	r3, r3
 8012ece:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8012ed2:	45c1      	cmp	r9, r8
 8012ed4:	f840 3b04 	str.w	r3, [r0], #4
 8012ed8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8012edc:	d2e8      	bcs.n	8012eb0 <quorem+0xb0>
 8012ede:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8012ee2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8012ee6:	b922      	cbnz	r2, 8012ef2 <quorem+0xf2>
 8012ee8:	3b04      	subs	r3, #4
 8012eea:	429d      	cmp	r5, r3
 8012eec:	461a      	mov	r2, r3
 8012eee:	d30a      	bcc.n	8012f06 <quorem+0x106>
 8012ef0:	613c      	str	r4, [r7, #16]
 8012ef2:	4630      	mov	r0, r6
 8012ef4:	b003      	add	sp, #12
 8012ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012efa:	6812      	ldr	r2, [r2, #0]
 8012efc:	3b04      	subs	r3, #4
 8012efe:	2a00      	cmp	r2, #0
 8012f00:	d1cc      	bne.n	8012e9c <quorem+0x9c>
 8012f02:	3c01      	subs	r4, #1
 8012f04:	e7c7      	b.n	8012e96 <quorem+0x96>
 8012f06:	6812      	ldr	r2, [r2, #0]
 8012f08:	3b04      	subs	r3, #4
 8012f0a:	2a00      	cmp	r2, #0
 8012f0c:	d1f0      	bne.n	8012ef0 <quorem+0xf0>
 8012f0e:	3c01      	subs	r4, #1
 8012f10:	e7eb      	b.n	8012eea <quorem+0xea>
 8012f12:	2000      	movs	r0, #0
 8012f14:	e7ee      	b.n	8012ef4 <quorem+0xf4>
	...

08012f18 <_dtoa_r>:
 8012f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f1c:	ed2d 8b04 	vpush	{d8-d9}
 8012f20:	ec57 6b10 	vmov	r6, r7, d0
 8012f24:	b093      	sub	sp, #76	; 0x4c
 8012f26:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8012f28:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8012f2c:	9106      	str	r1, [sp, #24]
 8012f2e:	ee10 aa10 	vmov	sl, s0
 8012f32:	4604      	mov	r4, r0
 8012f34:	9209      	str	r2, [sp, #36]	; 0x24
 8012f36:	930c      	str	r3, [sp, #48]	; 0x30
 8012f38:	46bb      	mov	fp, r7
 8012f3a:	b975      	cbnz	r5, 8012f5a <_dtoa_r+0x42>
 8012f3c:	2010      	movs	r0, #16
 8012f3e:	f7ff f9ed 	bl	801231c <malloc>
 8012f42:	4602      	mov	r2, r0
 8012f44:	6260      	str	r0, [r4, #36]	; 0x24
 8012f46:	b920      	cbnz	r0, 8012f52 <_dtoa_r+0x3a>
 8012f48:	4ba7      	ldr	r3, [pc, #668]	; (80131e8 <_dtoa_r+0x2d0>)
 8012f4a:	21ea      	movs	r1, #234	; 0xea
 8012f4c:	48a7      	ldr	r0, [pc, #668]	; (80131ec <_dtoa_r+0x2d4>)
 8012f4e:	f001 f989 	bl	8014264 <__assert_func>
 8012f52:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8012f56:	6005      	str	r5, [r0, #0]
 8012f58:	60c5      	str	r5, [r0, #12]
 8012f5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f5c:	6819      	ldr	r1, [r3, #0]
 8012f5e:	b151      	cbz	r1, 8012f76 <_dtoa_r+0x5e>
 8012f60:	685a      	ldr	r2, [r3, #4]
 8012f62:	604a      	str	r2, [r1, #4]
 8012f64:	2301      	movs	r3, #1
 8012f66:	4093      	lsls	r3, r2
 8012f68:	608b      	str	r3, [r1, #8]
 8012f6a:	4620      	mov	r0, r4
 8012f6c:	f000 fe20 	bl	8013bb0 <_Bfree>
 8012f70:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8012f72:	2200      	movs	r2, #0
 8012f74:	601a      	str	r2, [r3, #0]
 8012f76:	1e3b      	subs	r3, r7, #0
 8012f78:	bfaa      	itet	ge
 8012f7a:	2300      	movge	r3, #0
 8012f7c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8012f80:	f8c8 3000 	strge.w	r3, [r8]
 8012f84:	4b9a      	ldr	r3, [pc, #616]	; (80131f0 <_dtoa_r+0x2d8>)
 8012f86:	bfbc      	itt	lt
 8012f88:	2201      	movlt	r2, #1
 8012f8a:	f8c8 2000 	strlt.w	r2, [r8]
 8012f8e:	ea33 030b 	bics.w	r3, r3, fp
 8012f92:	d11b      	bne.n	8012fcc <_dtoa_r+0xb4>
 8012f94:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012f96:	f242 730f 	movw	r3, #9999	; 0x270f
 8012f9a:	6013      	str	r3, [r2, #0]
 8012f9c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8012fa0:	4333      	orrs	r3, r6
 8012fa2:	f000 8592 	beq.w	8013aca <_dtoa_r+0xbb2>
 8012fa6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fa8:	b963      	cbnz	r3, 8012fc4 <_dtoa_r+0xac>
 8012faa:	4b92      	ldr	r3, [pc, #584]	; (80131f4 <_dtoa_r+0x2dc>)
 8012fac:	e022      	b.n	8012ff4 <_dtoa_r+0xdc>
 8012fae:	4b92      	ldr	r3, [pc, #584]	; (80131f8 <_dtoa_r+0x2e0>)
 8012fb0:	9301      	str	r3, [sp, #4]
 8012fb2:	3308      	adds	r3, #8
 8012fb4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8012fb6:	6013      	str	r3, [r2, #0]
 8012fb8:	9801      	ldr	r0, [sp, #4]
 8012fba:	b013      	add	sp, #76	; 0x4c
 8012fbc:	ecbd 8b04 	vpop	{d8-d9}
 8012fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012fc4:	4b8b      	ldr	r3, [pc, #556]	; (80131f4 <_dtoa_r+0x2dc>)
 8012fc6:	9301      	str	r3, [sp, #4]
 8012fc8:	3303      	adds	r3, #3
 8012fca:	e7f3      	b.n	8012fb4 <_dtoa_r+0x9c>
 8012fcc:	2200      	movs	r2, #0
 8012fce:	2300      	movs	r3, #0
 8012fd0:	4650      	mov	r0, sl
 8012fd2:	4659      	mov	r1, fp
 8012fd4:	f7ed fd98 	bl	8000b08 <__aeabi_dcmpeq>
 8012fd8:	ec4b ab19 	vmov	d9, sl, fp
 8012fdc:	4680      	mov	r8, r0
 8012fde:	b158      	cbz	r0, 8012ff8 <_dtoa_r+0xe0>
 8012fe0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8012fe2:	2301      	movs	r3, #1
 8012fe4:	6013      	str	r3, [r2, #0]
 8012fe6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	f000 856b 	beq.w	8013ac4 <_dtoa_r+0xbac>
 8012fee:	4883      	ldr	r0, [pc, #524]	; (80131fc <_dtoa_r+0x2e4>)
 8012ff0:	6018      	str	r0, [r3, #0]
 8012ff2:	1e43      	subs	r3, r0, #1
 8012ff4:	9301      	str	r3, [sp, #4]
 8012ff6:	e7df      	b.n	8012fb8 <_dtoa_r+0xa0>
 8012ff8:	ec4b ab10 	vmov	d0, sl, fp
 8012ffc:	aa10      	add	r2, sp, #64	; 0x40
 8012ffe:	a911      	add	r1, sp, #68	; 0x44
 8013000:	4620      	mov	r0, r4
 8013002:	f001 f8bd 	bl	8014180 <__d2b>
 8013006:	f3cb 550a 	ubfx	r5, fp, #20, #11
 801300a:	ee08 0a10 	vmov	s16, r0
 801300e:	2d00      	cmp	r5, #0
 8013010:	f000 8084 	beq.w	801311c <_dtoa_r+0x204>
 8013014:	ee19 3a90 	vmov	r3, s19
 8013018:	f3c3 0313 	ubfx	r3, r3, #0, #20
 801301c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8013020:	4656      	mov	r6, sl
 8013022:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8013026:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 801302a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 801302e:	4b74      	ldr	r3, [pc, #464]	; (8013200 <_dtoa_r+0x2e8>)
 8013030:	2200      	movs	r2, #0
 8013032:	4630      	mov	r0, r6
 8013034:	4639      	mov	r1, r7
 8013036:	f7ed f947 	bl	80002c8 <__aeabi_dsub>
 801303a:	a365      	add	r3, pc, #404	; (adr r3, 80131d0 <_dtoa_r+0x2b8>)
 801303c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013040:	f7ed fafa 	bl	8000638 <__aeabi_dmul>
 8013044:	a364      	add	r3, pc, #400	; (adr r3, 80131d8 <_dtoa_r+0x2c0>)
 8013046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304a:	f7ed f93f 	bl	80002cc <__adddf3>
 801304e:	4606      	mov	r6, r0
 8013050:	4628      	mov	r0, r5
 8013052:	460f      	mov	r7, r1
 8013054:	f7ed fa86 	bl	8000564 <__aeabi_i2d>
 8013058:	a361      	add	r3, pc, #388	; (adr r3, 80131e0 <_dtoa_r+0x2c8>)
 801305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305e:	f7ed faeb 	bl	8000638 <__aeabi_dmul>
 8013062:	4602      	mov	r2, r0
 8013064:	460b      	mov	r3, r1
 8013066:	4630      	mov	r0, r6
 8013068:	4639      	mov	r1, r7
 801306a:	f7ed f92f 	bl	80002cc <__adddf3>
 801306e:	4606      	mov	r6, r0
 8013070:	460f      	mov	r7, r1
 8013072:	f7ed fd91 	bl	8000b98 <__aeabi_d2iz>
 8013076:	2200      	movs	r2, #0
 8013078:	9000      	str	r0, [sp, #0]
 801307a:	2300      	movs	r3, #0
 801307c:	4630      	mov	r0, r6
 801307e:	4639      	mov	r1, r7
 8013080:	f7ed fd4c 	bl	8000b1c <__aeabi_dcmplt>
 8013084:	b150      	cbz	r0, 801309c <_dtoa_r+0x184>
 8013086:	9800      	ldr	r0, [sp, #0]
 8013088:	f7ed fa6c 	bl	8000564 <__aeabi_i2d>
 801308c:	4632      	mov	r2, r6
 801308e:	463b      	mov	r3, r7
 8013090:	f7ed fd3a 	bl	8000b08 <__aeabi_dcmpeq>
 8013094:	b910      	cbnz	r0, 801309c <_dtoa_r+0x184>
 8013096:	9b00      	ldr	r3, [sp, #0]
 8013098:	3b01      	subs	r3, #1
 801309a:	9300      	str	r3, [sp, #0]
 801309c:	9b00      	ldr	r3, [sp, #0]
 801309e:	2b16      	cmp	r3, #22
 80130a0:	d85a      	bhi.n	8013158 <_dtoa_r+0x240>
 80130a2:	9a00      	ldr	r2, [sp, #0]
 80130a4:	4b57      	ldr	r3, [pc, #348]	; (8013204 <_dtoa_r+0x2ec>)
 80130a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80130aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130ae:	ec51 0b19 	vmov	r0, r1, d9
 80130b2:	f7ed fd33 	bl	8000b1c <__aeabi_dcmplt>
 80130b6:	2800      	cmp	r0, #0
 80130b8:	d050      	beq.n	801315c <_dtoa_r+0x244>
 80130ba:	9b00      	ldr	r3, [sp, #0]
 80130bc:	3b01      	subs	r3, #1
 80130be:	9300      	str	r3, [sp, #0]
 80130c0:	2300      	movs	r3, #0
 80130c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80130c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80130c6:	1b5d      	subs	r5, r3, r5
 80130c8:	1e6b      	subs	r3, r5, #1
 80130ca:	9305      	str	r3, [sp, #20]
 80130cc:	bf45      	ittet	mi
 80130ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80130d2:	9304      	strmi	r3, [sp, #16]
 80130d4:	2300      	movpl	r3, #0
 80130d6:	2300      	movmi	r3, #0
 80130d8:	bf4c      	ite	mi
 80130da:	9305      	strmi	r3, [sp, #20]
 80130dc:	9304      	strpl	r3, [sp, #16]
 80130de:	9b00      	ldr	r3, [sp, #0]
 80130e0:	2b00      	cmp	r3, #0
 80130e2:	db3d      	blt.n	8013160 <_dtoa_r+0x248>
 80130e4:	9b05      	ldr	r3, [sp, #20]
 80130e6:	9a00      	ldr	r2, [sp, #0]
 80130e8:	920a      	str	r2, [sp, #40]	; 0x28
 80130ea:	4413      	add	r3, r2
 80130ec:	9305      	str	r3, [sp, #20]
 80130ee:	2300      	movs	r3, #0
 80130f0:	9307      	str	r3, [sp, #28]
 80130f2:	9b06      	ldr	r3, [sp, #24]
 80130f4:	2b09      	cmp	r3, #9
 80130f6:	f200 8089 	bhi.w	801320c <_dtoa_r+0x2f4>
 80130fa:	2b05      	cmp	r3, #5
 80130fc:	bfc4      	itt	gt
 80130fe:	3b04      	subgt	r3, #4
 8013100:	9306      	strgt	r3, [sp, #24]
 8013102:	9b06      	ldr	r3, [sp, #24]
 8013104:	f1a3 0302 	sub.w	r3, r3, #2
 8013108:	bfcc      	ite	gt
 801310a:	2500      	movgt	r5, #0
 801310c:	2501      	movle	r5, #1
 801310e:	2b03      	cmp	r3, #3
 8013110:	f200 8087 	bhi.w	8013222 <_dtoa_r+0x30a>
 8013114:	e8df f003 	tbb	[pc, r3]
 8013118:	59383a2d 	.word	0x59383a2d
 801311c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8013120:	441d      	add	r5, r3
 8013122:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8013126:	2b20      	cmp	r3, #32
 8013128:	bfc1      	itttt	gt
 801312a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 801312e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8013132:	fa0b f303 	lslgt.w	r3, fp, r3
 8013136:	fa26 f000 	lsrgt.w	r0, r6, r0
 801313a:	bfda      	itte	le
 801313c:	f1c3 0320 	rsble	r3, r3, #32
 8013140:	fa06 f003 	lslle.w	r0, r6, r3
 8013144:	4318      	orrgt	r0, r3
 8013146:	f7ed f9fd 	bl	8000544 <__aeabi_ui2d>
 801314a:	2301      	movs	r3, #1
 801314c:	4606      	mov	r6, r0
 801314e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8013152:	3d01      	subs	r5, #1
 8013154:	930e      	str	r3, [sp, #56]	; 0x38
 8013156:	e76a      	b.n	801302e <_dtoa_r+0x116>
 8013158:	2301      	movs	r3, #1
 801315a:	e7b2      	b.n	80130c2 <_dtoa_r+0x1aa>
 801315c:	900b      	str	r0, [sp, #44]	; 0x2c
 801315e:	e7b1      	b.n	80130c4 <_dtoa_r+0x1ac>
 8013160:	9b04      	ldr	r3, [sp, #16]
 8013162:	9a00      	ldr	r2, [sp, #0]
 8013164:	1a9b      	subs	r3, r3, r2
 8013166:	9304      	str	r3, [sp, #16]
 8013168:	4253      	negs	r3, r2
 801316a:	9307      	str	r3, [sp, #28]
 801316c:	2300      	movs	r3, #0
 801316e:	930a      	str	r3, [sp, #40]	; 0x28
 8013170:	e7bf      	b.n	80130f2 <_dtoa_r+0x1da>
 8013172:	2300      	movs	r3, #0
 8013174:	9308      	str	r3, [sp, #32]
 8013176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013178:	2b00      	cmp	r3, #0
 801317a:	dc55      	bgt.n	8013228 <_dtoa_r+0x310>
 801317c:	2301      	movs	r3, #1
 801317e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8013182:	461a      	mov	r2, r3
 8013184:	9209      	str	r2, [sp, #36]	; 0x24
 8013186:	e00c      	b.n	80131a2 <_dtoa_r+0x28a>
 8013188:	2301      	movs	r3, #1
 801318a:	e7f3      	b.n	8013174 <_dtoa_r+0x25c>
 801318c:	2300      	movs	r3, #0
 801318e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013190:	9308      	str	r3, [sp, #32]
 8013192:	9b00      	ldr	r3, [sp, #0]
 8013194:	4413      	add	r3, r2
 8013196:	9302      	str	r3, [sp, #8]
 8013198:	3301      	adds	r3, #1
 801319a:	2b01      	cmp	r3, #1
 801319c:	9303      	str	r3, [sp, #12]
 801319e:	bfb8      	it	lt
 80131a0:	2301      	movlt	r3, #1
 80131a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80131a4:	2200      	movs	r2, #0
 80131a6:	6042      	str	r2, [r0, #4]
 80131a8:	2204      	movs	r2, #4
 80131aa:	f102 0614 	add.w	r6, r2, #20
 80131ae:	429e      	cmp	r6, r3
 80131b0:	6841      	ldr	r1, [r0, #4]
 80131b2:	d93d      	bls.n	8013230 <_dtoa_r+0x318>
 80131b4:	4620      	mov	r0, r4
 80131b6:	f000 fcbb 	bl	8013b30 <_Balloc>
 80131ba:	9001      	str	r0, [sp, #4]
 80131bc:	2800      	cmp	r0, #0
 80131be:	d13b      	bne.n	8013238 <_dtoa_r+0x320>
 80131c0:	4b11      	ldr	r3, [pc, #68]	; (8013208 <_dtoa_r+0x2f0>)
 80131c2:	4602      	mov	r2, r0
 80131c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80131c8:	e6c0      	b.n	8012f4c <_dtoa_r+0x34>
 80131ca:	2301      	movs	r3, #1
 80131cc:	e7df      	b.n	801318e <_dtoa_r+0x276>
 80131ce:	bf00      	nop
 80131d0:	636f4361 	.word	0x636f4361
 80131d4:	3fd287a7 	.word	0x3fd287a7
 80131d8:	8b60c8b3 	.word	0x8b60c8b3
 80131dc:	3fc68a28 	.word	0x3fc68a28
 80131e0:	509f79fb 	.word	0x509f79fb
 80131e4:	3fd34413 	.word	0x3fd34413
 80131e8:	08014e45 	.word	0x08014e45
 80131ec:	08014e5c 	.word	0x08014e5c
 80131f0:	7ff00000 	.word	0x7ff00000
 80131f4:	08014e41 	.word	0x08014e41
 80131f8:	08014e38 	.word	0x08014e38
 80131fc:	08014e15 	.word	0x08014e15
 8013200:	3ff80000 	.word	0x3ff80000
 8013204:	08014f50 	.word	0x08014f50
 8013208:	08014eb7 	.word	0x08014eb7
 801320c:	2501      	movs	r5, #1
 801320e:	2300      	movs	r3, #0
 8013210:	9306      	str	r3, [sp, #24]
 8013212:	9508      	str	r5, [sp, #32]
 8013214:	f04f 33ff 	mov.w	r3, #4294967295
 8013218:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801321c:	2200      	movs	r2, #0
 801321e:	2312      	movs	r3, #18
 8013220:	e7b0      	b.n	8013184 <_dtoa_r+0x26c>
 8013222:	2301      	movs	r3, #1
 8013224:	9308      	str	r3, [sp, #32]
 8013226:	e7f5      	b.n	8013214 <_dtoa_r+0x2fc>
 8013228:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801322a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 801322e:	e7b8      	b.n	80131a2 <_dtoa_r+0x28a>
 8013230:	3101      	adds	r1, #1
 8013232:	6041      	str	r1, [r0, #4]
 8013234:	0052      	lsls	r2, r2, #1
 8013236:	e7b8      	b.n	80131aa <_dtoa_r+0x292>
 8013238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801323a:	9a01      	ldr	r2, [sp, #4]
 801323c:	601a      	str	r2, [r3, #0]
 801323e:	9b03      	ldr	r3, [sp, #12]
 8013240:	2b0e      	cmp	r3, #14
 8013242:	f200 809d 	bhi.w	8013380 <_dtoa_r+0x468>
 8013246:	2d00      	cmp	r5, #0
 8013248:	f000 809a 	beq.w	8013380 <_dtoa_r+0x468>
 801324c:	9b00      	ldr	r3, [sp, #0]
 801324e:	2b00      	cmp	r3, #0
 8013250:	dd32      	ble.n	80132b8 <_dtoa_r+0x3a0>
 8013252:	4ab7      	ldr	r2, [pc, #732]	; (8013530 <_dtoa_r+0x618>)
 8013254:	f003 030f 	and.w	r3, r3, #15
 8013258:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 801325c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8013260:	9b00      	ldr	r3, [sp, #0]
 8013262:	05d8      	lsls	r0, r3, #23
 8013264:	ea4f 1723 	mov.w	r7, r3, asr #4
 8013268:	d516      	bpl.n	8013298 <_dtoa_r+0x380>
 801326a:	4bb2      	ldr	r3, [pc, #712]	; (8013534 <_dtoa_r+0x61c>)
 801326c:	ec51 0b19 	vmov	r0, r1, d9
 8013270:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8013274:	f7ed fb0a 	bl	800088c <__aeabi_ddiv>
 8013278:	f007 070f 	and.w	r7, r7, #15
 801327c:	4682      	mov	sl, r0
 801327e:	468b      	mov	fp, r1
 8013280:	2503      	movs	r5, #3
 8013282:	4eac      	ldr	r6, [pc, #688]	; (8013534 <_dtoa_r+0x61c>)
 8013284:	b957      	cbnz	r7, 801329c <_dtoa_r+0x384>
 8013286:	4642      	mov	r2, r8
 8013288:	464b      	mov	r3, r9
 801328a:	4650      	mov	r0, sl
 801328c:	4659      	mov	r1, fp
 801328e:	f7ed fafd 	bl	800088c <__aeabi_ddiv>
 8013292:	4682      	mov	sl, r0
 8013294:	468b      	mov	fp, r1
 8013296:	e028      	b.n	80132ea <_dtoa_r+0x3d2>
 8013298:	2502      	movs	r5, #2
 801329a:	e7f2      	b.n	8013282 <_dtoa_r+0x36a>
 801329c:	07f9      	lsls	r1, r7, #31
 801329e:	d508      	bpl.n	80132b2 <_dtoa_r+0x39a>
 80132a0:	4640      	mov	r0, r8
 80132a2:	4649      	mov	r1, r9
 80132a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80132a8:	f7ed f9c6 	bl	8000638 <__aeabi_dmul>
 80132ac:	3501      	adds	r5, #1
 80132ae:	4680      	mov	r8, r0
 80132b0:	4689      	mov	r9, r1
 80132b2:	107f      	asrs	r7, r7, #1
 80132b4:	3608      	adds	r6, #8
 80132b6:	e7e5      	b.n	8013284 <_dtoa_r+0x36c>
 80132b8:	f000 809b 	beq.w	80133f2 <_dtoa_r+0x4da>
 80132bc:	9b00      	ldr	r3, [sp, #0]
 80132be:	4f9d      	ldr	r7, [pc, #628]	; (8013534 <_dtoa_r+0x61c>)
 80132c0:	425e      	negs	r6, r3
 80132c2:	4b9b      	ldr	r3, [pc, #620]	; (8013530 <_dtoa_r+0x618>)
 80132c4:	f006 020f 	and.w	r2, r6, #15
 80132c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80132cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80132d0:	ec51 0b19 	vmov	r0, r1, d9
 80132d4:	f7ed f9b0 	bl	8000638 <__aeabi_dmul>
 80132d8:	1136      	asrs	r6, r6, #4
 80132da:	4682      	mov	sl, r0
 80132dc:	468b      	mov	fp, r1
 80132de:	2300      	movs	r3, #0
 80132e0:	2502      	movs	r5, #2
 80132e2:	2e00      	cmp	r6, #0
 80132e4:	d17a      	bne.n	80133dc <_dtoa_r+0x4c4>
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d1d3      	bne.n	8013292 <_dtoa_r+0x37a>
 80132ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80132ec:	2b00      	cmp	r3, #0
 80132ee:	f000 8082 	beq.w	80133f6 <_dtoa_r+0x4de>
 80132f2:	4b91      	ldr	r3, [pc, #580]	; (8013538 <_dtoa_r+0x620>)
 80132f4:	2200      	movs	r2, #0
 80132f6:	4650      	mov	r0, sl
 80132f8:	4659      	mov	r1, fp
 80132fa:	f7ed fc0f 	bl	8000b1c <__aeabi_dcmplt>
 80132fe:	2800      	cmp	r0, #0
 8013300:	d079      	beq.n	80133f6 <_dtoa_r+0x4de>
 8013302:	9b03      	ldr	r3, [sp, #12]
 8013304:	2b00      	cmp	r3, #0
 8013306:	d076      	beq.n	80133f6 <_dtoa_r+0x4de>
 8013308:	9b02      	ldr	r3, [sp, #8]
 801330a:	2b00      	cmp	r3, #0
 801330c:	dd36      	ble.n	801337c <_dtoa_r+0x464>
 801330e:	9b00      	ldr	r3, [sp, #0]
 8013310:	4650      	mov	r0, sl
 8013312:	4659      	mov	r1, fp
 8013314:	1e5f      	subs	r7, r3, #1
 8013316:	2200      	movs	r2, #0
 8013318:	4b88      	ldr	r3, [pc, #544]	; (801353c <_dtoa_r+0x624>)
 801331a:	f7ed f98d 	bl	8000638 <__aeabi_dmul>
 801331e:	9e02      	ldr	r6, [sp, #8]
 8013320:	4682      	mov	sl, r0
 8013322:	468b      	mov	fp, r1
 8013324:	3501      	adds	r5, #1
 8013326:	4628      	mov	r0, r5
 8013328:	f7ed f91c 	bl	8000564 <__aeabi_i2d>
 801332c:	4652      	mov	r2, sl
 801332e:	465b      	mov	r3, fp
 8013330:	f7ed f982 	bl	8000638 <__aeabi_dmul>
 8013334:	4b82      	ldr	r3, [pc, #520]	; (8013540 <_dtoa_r+0x628>)
 8013336:	2200      	movs	r2, #0
 8013338:	f7ec ffc8 	bl	80002cc <__adddf3>
 801333c:	46d0      	mov	r8, sl
 801333e:	46d9      	mov	r9, fp
 8013340:	4682      	mov	sl, r0
 8013342:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8013346:	2e00      	cmp	r6, #0
 8013348:	d158      	bne.n	80133fc <_dtoa_r+0x4e4>
 801334a:	4b7e      	ldr	r3, [pc, #504]	; (8013544 <_dtoa_r+0x62c>)
 801334c:	2200      	movs	r2, #0
 801334e:	4640      	mov	r0, r8
 8013350:	4649      	mov	r1, r9
 8013352:	f7ec ffb9 	bl	80002c8 <__aeabi_dsub>
 8013356:	4652      	mov	r2, sl
 8013358:	465b      	mov	r3, fp
 801335a:	4680      	mov	r8, r0
 801335c:	4689      	mov	r9, r1
 801335e:	f7ed fbfb 	bl	8000b58 <__aeabi_dcmpgt>
 8013362:	2800      	cmp	r0, #0
 8013364:	f040 8295 	bne.w	8013892 <_dtoa_r+0x97a>
 8013368:	4652      	mov	r2, sl
 801336a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 801336e:	4640      	mov	r0, r8
 8013370:	4649      	mov	r1, r9
 8013372:	f7ed fbd3 	bl	8000b1c <__aeabi_dcmplt>
 8013376:	2800      	cmp	r0, #0
 8013378:	f040 8289 	bne.w	801388e <_dtoa_r+0x976>
 801337c:	ec5b ab19 	vmov	sl, fp, d9
 8013380:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8013382:	2b00      	cmp	r3, #0
 8013384:	f2c0 8148 	blt.w	8013618 <_dtoa_r+0x700>
 8013388:	9a00      	ldr	r2, [sp, #0]
 801338a:	2a0e      	cmp	r2, #14
 801338c:	f300 8144 	bgt.w	8013618 <_dtoa_r+0x700>
 8013390:	4b67      	ldr	r3, [pc, #412]	; (8013530 <_dtoa_r+0x618>)
 8013392:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8013396:	e9d3 8900 	ldrd	r8, r9, [r3]
 801339a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801339c:	2b00      	cmp	r3, #0
 801339e:	f280 80d5 	bge.w	801354c <_dtoa_r+0x634>
 80133a2:	9b03      	ldr	r3, [sp, #12]
 80133a4:	2b00      	cmp	r3, #0
 80133a6:	f300 80d1 	bgt.w	801354c <_dtoa_r+0x634>
 80133aa:	f040 826f 	bne.w	801388c <_dtoa_r+0x974>
 80133ae:	4b65      	ldr	r3, [pc, #404]	; (8013544 <_dtoa_r+0x62c>)
 80133b0:	2200      	movs	r2, #0
 80133b2:	4640      	mov	r0, r8
 80133b4:	4649      	mov	r1, r9
 80133b6:	f7ed f93f 	bl	8000638 <__aeabi_dmul>
 80133ba:	4652      	mov	r2, sl
 80133bc:	465b      	mov	r3, fp
 80133be:	f7ed fbc1 	bl	8000b44 <__aeabi_dcmpge>
 80133c2:	9e03      	ldr	r6, [sp, #12]
 80133c4:	4637      	mov	r7, r6
 80133c6:	2800      	cmp	r0, #0
 80133c8:	f040 8245 	bne.w	8013856 <_dtoa_r+0x93e>
 80133cc:	9d01      	ldr	r5, [sp, #4]
 80133ce:	2331      	movs	r3, #49	; 0x31
 80133d0:	f805 3b01 	strb.w	r3, [r5], #1
 80133d4:	9b00      	ldr	r3, [sp, #0]
 80133d6:	3301      	adds	r3, #1
 80133d8:	9300      	str	r3, [sp, #0]
 80133da:	e240      	b.n	801385e <_dtoa_r+0x946>
 80133dc:	07f2      	lsls	r2, r6, #31
 80133de:	d505      	bpl.n	80133ec <_dtoa_r+0x4d4>
 80133e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80133e4:	f7ed f928 	bl	8000638 <__aeabi_dmul>
 80133e8:	3501      	adds	r5, #1
 80133ea:	2301      	movs	r3, #1
 80133ec:	1076      	asrs	r6, r6, #1
 80133ee:	3708      	adds	r7, #8
 80133f0:	e777      	b.n	80132e2 <_dtoa_r+0x3ca>
 80133f2:	2502      	movs	r5, #2
 80133f4:	e779      	b.n	80132ea <_dtoa_r+0x3d2>
 80133f6:	9f00      	ldr	r7, [sp, #0]
 80133f8:	9e03      	ldr	r6, [sp, #12]
 80133fa:	e794      	b.n	8013326 <_dtoa_r+0x40e>
 80133fc:	9901      	ldr	r1, [sp, #4]
 80133fe:	4b4c      	ldr	r3, [pc, #304]	; (8013530 <_dtoa_r+0x618>)
 8013400:	4431      	add	r1, r6
 8013402:	910d      	str	r1, [sp, #52]	; 0x34
 8013404:	9908      	ldr	r1, [sp, #32]
 8013406:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 801340a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 801340e:	2900      	cmp	r1, #0
 8013410:	d043      	beq.n	801349a <_dtoa_r+0x582>
 8013412:	494d      	ldr	r1, [pc, #308]	; (8013548 <_dtoa_r+0x630>)
 8013414:	2000      	movs	r0, #0
 8013416:	f7ed fa39 	bl	800088c <__aeabi_ddiv>
 801341a:	4652      	mov	r2, sl
 801341c:	465b      	mov	r3, fp
 801341e:	f7ec ff53 	bl	80002c8 <__aeabi_dsub>
 8013422:	9d01      	ldr	r5, [sp, #4]
 8013424:	4682      	mov	sl, r0
 8013426:	468b      	mov	fp, r1
 8013428:	4649      	mov	r1, r9
 801342a:	4640      	mov	r0, r8
 801342c:	f7ed fbb4 	bl	8000b98 <__aeabi_d2iz>
 8013430:	4606      	mov	r6, r0
 8013432:	f7ed f897 	bl	8000564 <__aeabi_i2d>
 8013436:	4602      	mov	r2, r0
 8013438:	460b      	mov	r3, r1
 801343a:	4640      	mov	r0, r8
 801343c:	4649      	mov	r1, r9
 801343e:	f7ec ff43 	bl	80002c8 <__aeabi_dsub>
 8013442:	3630      	adds	r6, #48	; 0x30
 8013444:	f805 6b01 	strb.w	r6, [r5], #1
 8013448:	4652      	mov	r2, sl
 801344a:	465b      	mov	r3, fp
 801344c:	4680      	mov	r8, r0
 801344e:	4689      	mov	r9, r1
 8013450:	f7ed fb64 	bl	8000b1c <__aeabi_dcmplt>
 8013454:	2800      	cmp	r0, #0
 8013456:	d163      	bne.n	8013520 <_dtoa_r+0x608>
 8013458:	4642      	mov	r2, r8
 801345a:	464b      	mov	r3, r9
 801345c:	4936      	ldr	r1, [pc, #216]	; (8013538 <_dtoa_r+0x620>)
 801345e:	2000      	movs	r0, #0
 8013460:	f7ec ff32 	bl	80002c8 <__aeabi_dsub>
 8013464:	4652      	mov	r2, sl
 8013466:	465b      	mov	r3, fp
 8013468:	f7ed fb58 	bl	8000b1c <__aeabi_dcmplt>
 801346c:	2800      	cmp	r0, #0
 801346e:	f040 80b5 	bne.w	80135dc <_dtoa_r+0x6c4>
 8013472:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8013474:	429d      	cmp	r5, r3
 8013476:	d081      	beq.n	801337c <_dtoa_r+0x464>
 8013478:	4b30      	ldr	r3, [pc, #192]	; (801353c <_dtoa_r+0x624>)
 801347a:	2200      	movs	r2, #0
 801347c:	4650      	mov	r0, sl
 801347e:	4659      	mov	r1, fp
 8013480:	f7ed f8da 	bl	8000638 <__aeabi_dmul>
 8013484:	4b2d      	ldr	r3, [pc, #180]	; (801353c <_dtoa_r+0x624>)
 8013486:	4682      	mov	sl, r0
 8013488:	468b      	mov	fp, r1
 801348a:	4640      	mov	r0, r8
 801348c:	4649      	mov	r1, r9
 801348e:	2200      	movs	r2, #0
 8013490:	f7ed f8d2 	bl	8000638 <__aeabi_dmul>
 8013494:	4680      	mov	r8, r0
 8013496:	4689      	mov	r9, r1
 8013498:	e7c6      	b.n	8013428 <_dtoa_r+0x510>
 801349a:	4650      	mov	r0, sl
 801349c:	4659      	mov	r1, fp
 801349e:	f7ed f8cb 	bl	8000638 <__aeabi_dmul>
 80134a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134a4:	9d01      	ldr	r5, [sp, #4]
 80134a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80134a8:	4682      	mov	sl, r0
 80134aa:	468b      	mov	fp, r1
 80134ac:	4649      	mov	r1, r9
 80134ae:	4640      	mov	r0, r8
 80134b0:	f7ed fb72 	bl	8000b98 <__aeabi_d2iz>
 80134b4:	4606      	mov	r6, r0
 80134b6:	f7ed f855 	bl	8000564 <__aeabi_i2d>
 80134ba:	3630      	adds	r6, #48	; 0x30
 80134bc:	4602      	mov	r2, r0
 80134be:	460b      	mov	r3, r1
 80134c0:	4640      	mov	r0, r8
 80134c2:	4649      	mov	r1, r9
 80134c4:	f7ec ff00 	bl	80002c8 <__aeabi_dsub>
 80134c8:	f805 6b01 	strb.w	r6, [r5], #1
 80134cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80134ce:	429d      	cmp	r5, r3
 80134d0:	4680      	mov	r8, r0
 80134d2:	4689      	mov	r9, r1
 80134d4:	f04f 0200 	mov.w	r2, #0
 80134d8:	d124      	bne.n	8013524 <_dtoa_r+0x60c>
 80134da:	4b1b      	ldr	r3, [pc, #108]	; (8013548 <_dtoa_r+0x630>)
 80134dc:	4650      	mov	r0, sl
 80134de:	4659      	mov	r1, fp
 80134e0:	f7ec fef4 	bl	80002cc <__adddf3>
 80134e4:	4602      	mov	r2, r0
 80134e6:	460b      	mov	r3, r1
 80134e8:	4640      	mov	r0, r8
 80134ea:	4649      	mov	r1, r9
 80134ec:	f7ed fb34 	bl	8000b58 <__aeabi_dcmpgt>
 80134f0:	2800      	cmp	r0, #0
 80134f2:	d173      	bne.n	80135dc <_dtoa_r+0x6c4>
 80134f4:	4652      	mov	r2, sl
 80134f6:	465b      	mov	r3, fp
 80134f8:	4913      	ldr	r1, [pc, #76]	; (8013548 <_dtoa_r+0x630>)
 80134fa:	2000      	movs	r0, #0
 80134fc:	f7ec fee4 	bl	80002c8 <__aeabi_dsub>
 8013500:	4602      	mov	r2, r0
 8013502:	460b      	mov	r3, r1
 8013504:	4640      	mov	r0, r8
 8013506:	4649      	mov	r1, r9
 8013508:	f7ed fb08 	bl	8000b1c <__aeabi_dcmplt>
 801350c:	2800      	cmp	r0, #0
 801350e:	f43f af35 	beq.w	801337c <_dtoa_r+0x464>
 8013512:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8013514:	1e6b      	subs	r3, r5, #1
 8013516:	930f      	str	r3, [sp, #60]	; 0x3c
 8013518:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 801351c:	2b30      	cmp	r3, #48	; 0x30
 801351e:	d0f8      	beq.n	8013512 <_dtoa_r+0x5fa>
 8013520:	9700      	str	r7, [sp, #0]
 8013522:	e049      	b.n	80135b8 <_dtoa_r+0x6a0>
 8013524:	4b05      	ldr	r3, [pc, #20]	; (801353c <_dtoa_r+0x624>)
 8013526:	f7ed f887 	bl	8000638 <__aeabi_dmul>
 801352a:	4680      	mov	r8, r0
 801352c:	4689      	mov	r9, r1
 801352e:	e7bd      	b.n	80134ac <_dtoa_r+0x594>
 8013530:	08014f50 	.word	0x08014f50
 8013534:	08014f28 	.word	0x08014f28
 8013538:	3ff00000 	.word	0x3ff00000
 801353c:	40240000 	.word	0x40240000
 8013540:	401c0000 	.word	0x401c0000
 8013544:	40140000 	.word	0x40140000
 8013548:	3fe00000 	.word	0x3fe00000
 801354c:	9d01      	ldr	r5, [sp, #4]
 801354e:	4656      	mov	r6, sl
 8013550:	465f      	mov	r7, fp
 8013552:	4642      	mov	r2, r8
 8013554:	464b      	mov	r3, r9
 8013556:	4630      	mov	r0, r6
 8013558:	4639      	mov	r1, r7
 801355a:	f7ed f997 	bl	800088c <__aeabi_ddiv>
 801355e:	f7ed fb1b 	bl	8000b98 <__aeabi_d2iz>
 8013562:	4682      	mov	sl, r0
 8013564:	f7ec fffe 	bl	8000564 <__aeabi_i2d>
 8013568:	4642      	mov	r2, r8
 801356a:	464b      	mov	r3, r9
 801356c:	f7ed f864 	bl	8000638 <__aeabi_dmul>
 8013570:	4602      	mov	r2, r0
 8013572:	460b      	mov	r3, r1
 8013574:	4630      	mov	r0, r6
 8013576:	4639      	mov	r1, r7
 8013578:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 801357c:	f7ec fea4 	bl	80002c8 <__aeabi_dsub>
 8013580:	f805 6b01 	strb.w	r6, [r5], #1
 8013584:	9e01      	ldr	r6, [sp, #4]
 8013586:	9f03      	ldr	r7, [sp, #12]
 8013588:	1bae      	subs	r6, r5, r6
 801358a:	42b7      	cmp	r7, r6
 801358c:	4602      	mov	r2, r0
 801358e:	460b      	mov	r3, r1
 8013590:	d135      	bne.n	80135fe <_dtoa_r+0x6e6>
 8013592:	f7ec fe9b 	bl	80002cc <__adddf3>
 8013596:	4642      	mov	r2, r8
 8013598:	464b      	mov	r3, r9
 801359a:	4606      	mov	r6, r0
 801359c:	460f      	mov	r7, r1
 801359e:	f7ed fadb 	bl	8000b58 <__aeabi_dcmpgt>
 80135a2:	b9d0      	cbnz	r0, 80135da <_dtoa_r+0x6c2>
 80135a4:	4642      	mov	r2, r8
 80135a6:	464b      	mov	r3, r9
 80135a8:	4630      	mov	r0, r6
 80135aa:	4639      	mov	r1, r7
 80135ac:	f7ed faac 	bl	8000b08 <__aeabi_dcmpeq>
 80135b0:	b110      	cbz	r0, 80135b8 <_dtoa_r+0x6a0>
 80135b2:	f01a 0f01 	tst.w	sl, #1
 80135b6:	d110      	bne.n	80135da <_dtoa_r+0x6c2>
 80135b8:	4620      	mov	r0, r4
 80135ba:	ee18 1a10 	vmov	r1, s16
 80135be:	f000 faf7 	bl	8013bb0 <_Bfree>
 80135c2:	2300      	movs	r3, #0
 80135c4:	9800      	ldr	r0, [sp, #0]
 80135c6:	702b      	strb	r3, [r5, #0]
 80135c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80135ca:	3001      	adds	r0, #1
 80135cc:	6018      	str	r0, [r3, #0]
 80135ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80135d0:	2b00      	cmp	r3, #0
 80135d2:	f43f acf1 	beq.w	8012fb8 <_dtoa_r+0xa0>
 80135d6:	601d      	str	r5, [r3, #0]
 80135d8:	e4ee      	b.n	8012fb8 <_dtoa_r+0xa0>
 80135da:	9f00      	ldr	r7, [sp, #0]
 80135dc:	462b      	mov	r3, r5
 80135de:	461d      	mov	r5, r3
 80135e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80135e4:	2a39      	cmp	r2, #57	; 0x39
 80135e6:	d106      	bne.n	80135f6 <_dtoa_r+0x6de>
 80135e8:	9a01      	ldr	r2, [sp, #4]
 80135ea:	429a      	cmp	r2, r3
 80135ec:	d1f7      	bne.n	80135de <_dtoa_r+0x6c6>
 80135ee:	9901      	ldr	r1, [sp, #4]
 80135f0:	2230      	movs	r2, #48	; 0x30
 80135f2:	3701      	adds	r7, #1
 80135f4:	700a      	strb	r2, [r1, #0]
 80135f6:	781a      	ldrb	r2, [r3, #0]
 80135f8:	3201      	adds	r2, #1
 80135fa:	701a      	strb	r2, [r3, #0]
 80135fc:	e790      	b.n	8013520 <_dtoa_r+0x608>
 80135fe:	4ba6      	ldr	r3, [pc, #664]	; (8013898 <_dtoa_r+0x980>)
 8013600:	2200      	movs	r2, #0
 8013602:	f7ed f819 	bl	8000638 <__aeabi_dmul>
 8013606:	2200      	movs	r2, #0
 8013608:	2300      	movs	r3, #0
 801360a:	4606      	mov	r6, r0
 801360c:	460f      	mov	r7, r1
 801360e:	f7ed fa7b 	bl	8000b08 <__aeabi_dcmpeq>
 8013612:	2800      	cmp	r0, #0
 8013614:	d09d      	beq.n	8013552 <_dtoa_r+0x63a>
 8013616:	e7cf      	b.n	80135b8 <_dtoa_r+0x6a0>
 8013618:	9a08      	ldr	r2, [sp, #32]
 801361a:	2a00      	cmp	r2, #0
 801361c:	f000 80d7 	beq.w	80137ce <_dtoa_r+0x8b6>
 8013620:	9a06      	ldr	r2, [sp, #24]
 8013622:	2a01      	cmp	r2, #1
 8013624:	f300 80ba 	bgt.w	801379c <_dtoa_r+0x884>
 8013628:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801362a:	2a00      	cmp	r2, #0
 801362c:	f000 80b2 	beq.w	8013794 <_dtoa_r+0x87c>
 8013630:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8013634:	9e07      	ldr	r6, [sp, #28]
 8013636:	9d04      	ldr	r5, [sp, #16]
 8013638:	9a04      	ldr	r2, [sp, #16]
 801363a:	441a      	add	r2, r3
 801363c:	9204      	str	r2, [sp, #16]
 801363e:	9a05      	ldr	r2, [sp, #20]
 8013640:	2101      	movs	r1, #1
 8013642:	441a      	add	r2, r3
 8013644:	4620      	mov	r0, r4
 8013646:	9205      	str	r2, [sp, #20]
 8013648:	f000 fb6a 	bl	8013d20 <__i2b>
 801364c:	4607      	mov	r7, r0
 801364e:	2d00      	cmp	r5, #0
 8013650:	dd0c      	ble.n	801366c <_dtoa_r+0x754>
 8013652:	9b05      	ldr	r3, [sp, #20]
 8013654:	2b00      	cmp	r3, #0
 8013656:	dd09      	ble.n	801366c <_dtoa_r+0x754>
 8013658:	42ab      	cmp	r3, r5
 801365a:	9a04      	ldr	r2, [sp, #16]
 801365c:	bfa8      	it	ge
 801365e:	462b      	movge	r3, r5
 8013660:	1ad2      	subs	r2, r2, r3
 8013662:	9204      	str	r2, [sp, #16]
 8013664:	9a05      	ldr	r2, [sp, #20]
 8013666:	1aed      	subs	r5, r5, r3
 8013668:	1ad3      	subs	r3, r2, r3
 801366a:	9305      	str	r3, [sp, #20]
 801366c:	9b07      	ldr	r3, [sp, #28]
 801366e:	b31b      	cbz	r3, 80136b8 <_dtoa_r+0x7a0>
 8013670:	9b08      	ldr	r3, [sp, #32]
 8013672:	2b00      	cmp	r3, #0
 8013674:	f000 80af 	beq.w	80137d6 <_dtoa_r+0x8be>
 8013678:	2e00      	cmp	r6, #0
 801367a:	dd13      	ble.n	80136a4 <_dtoa_r+0x78c>
 801367c:	4639      	mov	r1, r7
 801367e:	4632      	mov	r2, r6
 8013680:	4620      	mov	r0, r4
 8013682:	f000 fc0d 	bl	8013ea0 <__pow5mult>
 8013686:	ee18 2a10 	vmov	r2, s16
 801368a:	4601      	mov	r1, r0
 801368c:	4607      	mov	r7, r0
 801368e:	4620      	mov	r0, r4
 8013690:	f000 fb5c 	bl	8013d4c <__multiply>
 8013694:	ee18 1a10 	vmov	r1, s16
 8013698:	4680      	mov	r8, r0
 801369a:	4620      	mov	r0, r4
 801369c:	f000 fa88 	bl	8013bb0 <_Bfree>
 80136a0:	ee08 8a10 	vmov	s16, r8
 80136a4:	9b07      	ldr	r3, [sp, #28]
 80136a6:	1b9a      	subs	r2, r3, r6
 80136a8:	d006      	beq.n	80136b8 <_dtoa_r+0x7a0>
 80136aa:	ee18 1a10 	vmov	r1, s16
 80136ae:	4620      	mov	r0, r4
 80136b0:	f000 fbf6 	bl	8013ea0 <__pow5mult>
 80136b4:	ee08 0a10 	vmov	s16, r0
 80136b8:	2101      	movs	r1, #1
 80136ba:	4620      	mov	r0, r4
 80136bc:	f000 fb30 	bl	8013d20 <__i2b>
 80136c0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	4606      	mov	r6, r0
 80136c6:	f340 8088 	ble.w	80137da <_dtoa_r+0x8c2>
 80136ca:	461a      	mov	r2, r3
 80136cc:	4601      	mov	r1, r0
 80136ce:	4620      	mov	r0, r4
 80136d0:	f000 fbe6 	bl	8013ea0 <__pow5mult>
 80136d4:	9b06      	ldr	r3, [sp, #24]
 80136d6:	2b01      	cmp	r3, #1
 80136d8:	4606      	mov	r6, r0
 80136da:	f340 8081 	ble.w	80137e0 <_dtoa_r+0x8c8>
 80136de:	f04f 0800 	mov.w	r8, #0
 80136e2:	6933      	ldr	r3, [r6, #16]
 80136e4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80136e8:	6918      	ldr	r0, [r3, #16]
 80136ea:	f000 fac9 	bl	8013c80 <__hi0bits>
 80136ee:	f1c0 0020 	rsb	r0, r0, #32
 80136f2:	9b05      	ldr	r3, [sp, #20]
 80136f4:	4418      	add	r0, r3
 80136f6:	f010 001f 	ands.w	r0, r0, #31
 80136fa:	f000 8092 	beq.w	8013822 <_dtoa_r+0x90a>
 80136fe:	f1c0 0320 	rsb	r3, r0, #32
 8013702:	2b04      	cmp	r3, #4
 8013704:	f340 808a 	ble.w	801381c <_dtoa_r+0x904>
 8013708:	f1c0 001c 	rsb	r0, r0, #28
 801370c:	9b04      	ldr	r3, [sp, #16]
 801370e:	4403      	add	r3, r0
 8013710:	9304      	str	r3, [sp, #16]
 8013712:	9b05      	ldr	r3, [sp, #20]
 8013714:	4403      	add	r3, r0
 8013716:	4405      	add	r5, r0
 8013718:	9305      	str	r3, [sp, #20]
 801371a:	9b04      	ldr	r3, [sp, #16]
 801371c:	2b00      	cmp	r3, #0
 801371e:	dd07      	ble.n	8013730 <_dtoa_r+0x818>
 8013720:	ee18 1a10 	vmov	r1, s16
 8013724:	461a      	mov	r2, r3
 8013726:	4620      	mov	r0, r4
 8013728:	f000 fc14 	bl	8013f54 <__lshift>
 801372c:	ee08 0a10 	vmov	s16, r0
 8013730:	9b05      	ldr	r3, [sp, #20]
 8013732:	2b00      	cmp	r3, #0
 8013734:	dd05      	ble.n	8013742 <_dtoa_r+0x82a>
 8013736:	4631      	mov	r1, r6
 8013738:	461a      	mov	r2, r3
 801373a:	4620      	mov	r0, r4
 801373c:	f000 fc0a 	bl	8013f54 <__lshift>
 8013740:	4606      	mov	r6, r0
 8013742:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8013744:	2b00      	cmp	r3, #0
 8013746:	d06e      	beq.n	8013826 <_dtoa_r+0x90e>
 8013748:	ee18 0a10 	vmov	r0, s16
 801374c:	4631      	mov	r1, r6
 801374e:	f000 fc71 	bl	8014034 <__mcmp>
 8013752:	2800      	cmp	r0, #0
 8013754:	da67      	bge.n	8013826 <_dtoa_r+0x90e>
 8013756:	9b00      	ldr	r3, [sp, #0]
 8013758:	3b01      	subs	r3, #1
 801375a:	ee18 1a10 	vmov	r1, s16
 801375e:	9300      	str	r3, [sp, #0]
 8013760:	220a      	movs	r2, #10
 8013762:	2300      	movs	r3, #0
 8013764:	4620      	mov	r0, r4
 8013766:	f000 fa45 	bl	8013bf4 <__multadd>
 801376a:	9b08      	ldr	r3, [sp, #32]
 801376c:	ee08 0a10 	vmov	s16, r0
 8013770:	2b00      	cmp	r3, #0
 8013772:	f000 81b1 	beq.w	8013ad8 <_dtoa_r+0xbc0>
 8013776:	2300      	movs	r3, #0
 8013778:	4639      	mov	r1, r7
 801377a:	220a      	movs	r2, #10
 801377c:	4620      	mov	r0, r4
 801377e:	f000 fa39 	bl	8013bf4 <__multadd>
 8013782:	9b02      	ldr	r3, [sp, #8]
 8013784:	2b00      	cmp	r3, #0
 8013786:	4607      	mov	r7, r0
 8013788:	f300 808e 	bgt.w	80138a8 <_dtoa_r+0x990>
 801378c:	9b06      	ldr	r3, [sp, #24]
 801378e:	2b02      	cmp	r3, #2
 8013790:	dc51      	bgt.n	8013836 <_dtoa_r+0x91e>
 8013792:	e089      	b.n	80138a8 <_dtoa_r+0x990>
 8013794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8013796:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 801379a:	e74b      	b.n	8013634 <_dtoa_r+0x71c>
 801379c:	9b03      	ldr	r3, [sp, #12]
 801379e:	1e5e      	subs	r6, r3, #1
 80137a0:	9b07      	ldr	r3, [sp, #28]
 80137a2:	42b3      	cmp	r3, r6
 80137a4:	bfbf      	itttt	lt
 80137a6:	9b07      	ldrlt	r3, [sp, #28]
 80137a8:	9607      	strlt	r6, [sp, #28]
 80137aa:	1af2      	sublt	r2, r6, r3
 80137ac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80137ae:	bfb6      	itet	lt
 80137b0:	189b      	addlt	r3, r3, r2
 80137b2:	1b9e      	subge	r6, r3, r6
 80137b4:	930a      	strlt	r3, [sp, #40]	; 0x28
 80137b6:	9b03      	ldr	r3, [sp, #12]
 80137b8:	bfb8      	it	lt
 80137ba:	2600      	movlt	r6, #0
 80137bc:	2b00      	cmp	r3, #0
 80137be:	bfb7      	itett	lt
 80137c0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 80137c4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 80137c8:	1a9d      	sublt	r5, r3, r2
 80137ca:	2300      	movlt	r3, #0
 80137cc:	e734      	b.n	8013638 <_dtoa_r+0x720>
 80137ce:	9e07      	ldr	r6, [sp, #28]
 80137d0:	9d04      	ldr	r5, [sp, #16]
 80137d2:	9f08      	ldr	r7, [sp, #32]
 80137d4:	e73b      	b.n	801364e <_dtoa_r+0x736>
 80137d6:	9a07      	ldr	r2, [sp, #28]
 80137d8:	e767      	b.n	80136aa <_dtoa_r+0x792>
 80137da:	9b06      	ldr	r3, [sp, #24]
 80137dc:	2b01      	cmp	r3, #1
 80137de:	dc18      	bgt.n	8013812 <_dtoa_r+0x8fa>
 80137e0:	f1ba 0f00 	cmp.w	sl, #0
 80137e4:	d115      	bne.n	8013812 <_dtoa_r+0x8fa>
 80137e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80137ea:	b993      	cbnz	r3, 8013812 <_dtoa_r+0x8fa>
 80137ec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80137f0:	0d1b      	lsrs	r3, r3, #20
 80137f2:	051b      	lsls	r3, r3, #20
 80137f4:	b183      	cbz	r3, 8013818 <_dtoa_r+0x900>
 80137f6:	9b04      	ldr	r3, [sp, #16]
 80137f8:	3301      	adds	r3, #1
 80137fa:	9304      	str	r3, [sp, #16]
 80137fc:	9b05      	ldr	r3, [sp, #20]
 80137fe:	3301      	adds	r3, #1
 8013800:	9305      	str	r3, [sp, #20]
 8013802:	f04f 0801 	mov.w	r8, #1
 8013806:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8013808:	2b00      	cmp	r3, #0
 801380a:	f47f af6a 	bne.w	80136e2 <_dtoa_r+0x7ca>
 801380e:	2001      	movs	r0, #1
 8013810:	e76f      	b.n	80136f2 <_dtoa_r+0x7da>
 8013812:	f04f 0800 	mov.w	r8, #0
 8013816:	e7f6      	b.n	8013806 <_dtoa_r+0x8ee>
 8013818:	4698      	mov	r8, r3
 801381a:	e7f4      	b.n	8013806 <_dtoa_r+0x8ee>
 801381c:	f43f af7d 	beq.w	801371a <_dtoa_r+0x802>
 8013820:	4618      	mov	r0, r3
 8013822:	301c      	adds	r0, #28
 8013824:	e772      	b.n	801370c <_dtoa_r+0x7f4>
 8013826:	9b03      	ldr	r3, [sp, #12]
 8013828:	2b00      	cmp	r3, #0
 801382a:	dc37      	bgt.n	801389c <_dtoa_r+0x984>
 801382c:	9b06      	ldr	r3, [sp, #24]
 801382e:	2b02      	cmp	r3, #2
 8013830:	dd34      	ble.n	801389c <_dtoa_r+0x984>
 8013832:	9b03      	ldr	r3, [sp, #12]
 8013834:	9302      	str	r3, [sp, #8]
 8013836:	9b02      	ldr	r3, [sp, #8]
 8013838:	b96b      	cbnz	r3, 8013856 <_dtoa_r+0x93e>
 801383a:	4631      	mov	r1, r6
 801383c:	2205      	movs	r2, #5
 801383e:	4620      	mov	r0, r4
 8013840:	f000 f9d8 	bl	8013bf4 <__multadd>
 8013844:	4601      	mov	r1, r0
 8013846:	4606      	mov	r6, r0
 8013848:	ee18 0a10 	vmov	r0, s16
 801384c:	f000 fbf2 	bl	8014034 <__mcmp>
 8013850:	2800      	cmp	r0, #0
 8013852:	f73f adbb 	bgt.w	80133cc <_dtoa_r+0x4b4>
 8013856:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013858:	9d01      	ldr	r5, [sp, #4]
 801385a:	43db      	mvns	r3, r3
 801385c:	9300      	str	r3, [sp, #0]
 801385e:	f04f 0800 	mov.w	r8, #0
 8013862:	4631      	mov	r1, r6
 8013864:	4620      	mov	r0, r4
 8013866:	f000 f9a3 	bl	8013bb0 <_Bfree>
 801386a:	2f00      	cmp	r7, #0
 801386c:	f43f aea4 	beq.w	80135b8 <_dtoa_r+0x6a0>
 8013870:	f1b8 0f00 	cmp.w	r8, #0
 8013874:	d005      	beq.n	8013882 <_dtoa_r+0x96a>
 8013876:	45b8      	cmp	r8, r7
 8013878:	d003      	beq.n	8013882 <_dtoa_r+0x96a>
 801387a:	4641      	mov	r1, r8
 801387c:	4620      	mov	r0, r4
 801387e:	f000 f997 	bl	8013bb0 <_Bfree>
 8013882:	4639      	mov	r1, r7
 8013884:	4620      	mov	r0, r4
 8013886:	f000 f993 	bl	8013bb0 <_Bfree>
 801388a:	e695      	b.n	80135b8 <_dtoa_r+0x6a0>
 801388c:	2600      	movs	r6, #0
 801388e:	4637      	mov	r7, r6
 8013890:	e7e1      	b.n	8013856 <_dtoa_r+0x93e>
 8013892:	9700      	str	r7, [sp, #0]
 8013894:	4637      	mov	r7, r6
 8013896:	e599      	b.n	80133cc <_dtoa_r+0x4b4>
 8013898:	40240000 	.word	0x40240000
 801389c:	9b08      	ldr	r3, [sp, #32]
 801389e:	2b00      	cmp	r3, #0
 80138a0:	f000 80ca 	beq.w	8013a38 <_dtoa_r+0xb20>
 80138a4:	9b03      	ldr	r3, [sp, #12]
 80138a6:	9302      	str	r3, [sp, #8]
 80138a8:	2d00      	cmp	r5, #0
 80138aa:	dd05      	ble.n	80138b8 <_dtoa_r+0x9a0>
 80138ac:	4639      	mov	r1, r7
 80138ae:	462a      	mov	r2, r5
 80138b0:	4620      	mov	r0, r4
 80138b2:	f000 fb4f 	bl	8013f54 <__lshift>
 80138b6:	4607      	mov	r7, r0
 80138b8:	f1b8 0f00 	cmp.w	r8, #0
 80138bc:	d05b      	beq.n	8013976 <_dtoa_r+0xa5e>
 80138be:	6879      	ldr	r1, [r7, #4]
 80138c0:	4620      	mov	r0, r4
 80138c2:	f000 f935 	bl	8013b30 <_Balloc>
 80138c6:	4605      	mov	r5, r0
 80138c8:	b928      	cbnz	r0, 80138d6 <_dtoa_r+0x9be>
 80138ca:	4b87      	ldr	r3, [pc, #540]	; (8013ae8 <_dtoa_r+0xbd0>)
 80138cc:	4602      	mov	r2, r0
 80138ce:	f240 21ea 	movw	r1, #746	; 0x2ea
 80138d2:	f7ff bb3b 	b.w	8012f4c <_dtoa_r+0x34>
 80138d6:	693a      	ldr	r2, [r7, #16]
 80138d8:	3202      	adds	r2, #2
 80138da:	0092      	lsls	r2, r2, #2
 80138dc:	f107 010c 	add.w	r1, r7, #12
 80138e0:	300c      	adds	r0, #12
 80138e2:	f000 f90b 	bl	8013afc <memcpy>
 80138e6:	2201      	movs	r2, #1
 80138e8:	4629      	mov	r1, r5
 80138ea:	4620      	mov	r0, r4
 80138ec:	f000 fb32 	bl	8013f54 <__lshift>
 80138f0:	9b01      	ldr	r3, [sp, #4]
 80138f2:	f103 0901 	add.w	r9, r3, #1
 80138f6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 80138fa:	4413      	add	r3, r2
 80138fc:	9305      	str	r3, [sp, #20]
 80138fe:	f00a 0301 	and.w	r3, sl, #1
 8013902:	46b8      	mov	r8, r7
 8013904:	9304      	str	r3, [sp, #16]
 8013906:	4607      	mov	r7, r0
 8013908:	4631      	mov	r1, r6
 801390a:	ee18 0a10 	vmov	r0, s16
 801390e:	f7ff fa77 	bl	8012e00 <quorem>
 8013912:	4641      	mov	r1, r8
 8013914:	9002      	str	r0, [sp, #8]
 8013916:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 801391a:	ee18 0a10 	vmov	r0, s16
 801391e:	f000 fb89 	bl	8014034 <__mcmp>
 8013922:	463a      	mov	r2, r7
 8013924:	9003      	str	r0, [sp, #12]
 8013926:	4631      	mov	r1, r6
 8013928:	4620      	mov	r0, r4
 801392a:	f000 fb9f 	bl	801406c <__mdiff>
 801392e:	68c2      	ldr	r2, [r0, #12]
 8013930:	f109 3bff 	add.w	fp, r9, #4294967295
 8013934:	4605      	mov	r5, r0
 8013936:	bb02      	cbnz	r2, 801397a <_dtoa_r+0xa62>
 8013938:	4601      	mov	r1, r0
 801393a:	ee18 0a10 	vmov	r0, s16
 801393e:	f000 fb79 	bl	8014034 <__mcmp>
 8013942:	4602      	mov	r2, r0
 8013944:	4629      	mov	r1, r5
 8013946:	4620      	mov	r0, r4
 8013948:	9207      	str	r2, [sp, #28]
 801394a:	f000 f931 	bl	8013bb0 <_Bfree>
 801394e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013952:	ea43 0102 	orr.w	r1, r3, r2
 8013956:	9b04      	ldr	r3, [sp, #16]
 8013958:	430b      	orrs	r3, r1
 801395a:	464d      	mov	r5, r9
 801395c:	d10f      	bne.n	801397e <_dtoa_r+0xa66>
 801395e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8013962:	d02a      	beq.n	80139ba <_dtoa_r+0xaa2>
 8013964:	9b03      	ldr	r3, [sp, #12]
 8013966:	2b00      	cmp	r3, #0
 8013968:	dd02      	ble.n	8013970 <_dtoa_r+0xa58>
 801396a:	9b02      	ldr	r3, [sp, #8]
 801396c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8013970:	f88b a000 	strb.w	sl, [fp]
 8013974:	e775      	b.n	8013862 <_dtoa_r+0x94a>
 8013976:	4638      	mov	r0, r7
 8013978:	e7ba      	b.n	80138f0 <_dtoa_r+0x9d8>
 801397a:	2201      	movs	r2, #1
 801397c:	e7e2      	b.n	8013944 <_dtoa_r+0xa2c>
 801397e:	9b03      	ldr	r3, [sp, #12]
 8013980:	2b00      	cmp	r3, #0
 8013982:	db04      	blt.n	801398e <_dtoa_r+0xa76>
 8013984:	9906      	ldr	r1, [sp, #24]
 8013986:	430b      	orrs	r3, r1
 8013988:	9904      	ldr	r1, [sp, #16]
 801398a:	430b      	orrs	r3, r1
 801398c:	d122      	bne.n	80139d4 <_dtoa_r+0xabc>
 801398e:	2a00      	cmp	r2, #0
 8013990:	ddee      	ble.n	8013970 <_dtoa_r+0xa58>
 8013992:	ee18 1a10 	vmov	r1, s16
 8013996:	2201      	movs	r2, #1
 8013998:	4620      	mov	r0, r4
 801399a:	f000 fadb 	bl	8013f54 <__lshift>
 801399e:	4631      	mov	r1, r6
 80139a0:	ee08 0a10 	vmov	s16, r0
 80139a4:	f000 fb46 	bl	8014034 <__mcmp>
 80139a8:	2800      	cmp	r0, #0
 80139aa:	dc03      	bgt.n	80139b4 <_dtoa_r+0xa9c>
 80139ac:	d1e0      	bne.n	8013970 <_dtoa_r+0xa58>
 80139ae:	f01a 0f01 	tst.w	sl, #1
 80139b2:	d0dd      	beq.n	8013970 <_dtoa_r+0xa58>
 80139b4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80139b8:	d1d7      	bne.n	801396a <_dtoa_r+0xa52>
 80139ba:	2339      	movs	r3, #57	; 0x39
 80139bc:	f88b 3000 	strb.w	r3, [fp]
 80139c0:	462b      	mov	r3, r5
 80139c2:	461d      	mov	r5, r3
 80139c4:	3b01      	subs	r3, #1
 80139c6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80139ca:	2a39      	cmp	r2, #57	; 0x39
 80139cc:	d071      	beq.n	8013ab2 <_dtoa_r+0xb9a>
 80139ce:	3201      	adds	r2, #1
 80139d0:	701a      	strb	r2, [r3, #0]
 80139d2:	e746      	b.n	8013862 <_dtoa_r+0x94a>
 80139d4:	2a00      	cmp	r2, #0
 80139d6:	dd07      	ble.n	80139e8 <_dtoa_r+0xad0>
 80139d8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 80139dc:	d0ed      	beq.n	80139ba <_dtoa_r+0xaa2>
 80139de:	f10a 0301 	add.w	r3, sl, #1
 80139e2:	f88b 3000 	strb.w	r3, [fp]
 80139e6:	e73c      	b.n	8013862 <_dtoa_r+0x94a>
 80139e8:	9b05      	ldr	r3, [sp, #20]
 80139ea:	f809 ac01 	strb.w	sl, [r9, #-1]
 80139ee:	4599      	cmp	r9, r3
 80139f0:	d047      	beq.n	8013a82 <_dtoa_r+0xb6a>
 80139f2:	ee18 1a10 	vmov	r1, s16
 80139f6:	2300      	movs	r3, #0
 80139f8:	220a      	movs	r2, #10
 80139fa:	4620      	mov	r0, r4
 80139fc:	f000 f8fa 	bl	8013bf4 <__multadd>
 8013a00:	45b8      	cmp	r8, r7
 8013a02:	ee08 0a10 	vmov	s16, r0
 8013a06:	f04f 0300 	mov.w	r3, #0
 8013a0a:	f04f 020a 	mov.w	r2, #10
 8013a0e:	4641      	mov	r1, r8
 8013a10:	4620      	mov	r0, r4
 8013a12:	d106      	bne.n	8013a22 <_dtoa_r+0xb0a>
 8013a14:	f000 f8ee 	bl	8013bf4 <__multadd>
 8013a18:	4680      	mov	r8, r0
 8013a1a:	4607      	mov	r7, r0
 8013a1c:	f109 0901 	add.w	r9, r9, #1
 8013a20:	e772      	b.n	8013908 <_dtoa_r+0x9f0>
 8013a22:	f000 f8e7 	bl	8013bf4 <__multadd>
 8013a26:	4639      	mov	r1, r7
 8013a28:	4680      	mov	r8, r0
 8013a2a:	2300      	movs	r3, #0
 8013a2c:	220a      	movs	r2, #10
 8013a2e:	4620      	mov	r0, r4
 8013a30:	f000 f8e0 	bl	8013bf4 <__multadd>
 8013a34:	4607      	mov	r7, r0
 8013a36:	e7f1      	b.n	8013a1c <_dtoa_r+0xb04>
 8013a38:	9b03      	ldr	r3, [sp, #12]
 8013a3a:	9302      	str	r3, [sp, #8]
 8013a3c:	9d01      	ldr	r5, [sp, #4]
 8013a3e:	ee18 0a10 	vmov	r0, s16
 8013a42:	4631      	mov	r1, r6
 8013a44:	f7ff f9dc 	bl	8012e00 <quorem>
 8013a48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8013a4c:	9b01      	ldr	r3, [sp, #4]
 8013a4e:	f805 ab01 	strb.w	sl, [r5], #1
 8013a52:	1aea      	subs	r2, r5, r3
 8013a54:	9b02      	ldr	r3, [sp, #8]
 8013a56:	4293      	cmp	r3, r2
 8013a58:	dd09      	ble.n	8013a6e <_dtoa_r+0xb56>
 8013a5a:	ee18 1a10 	vmov	r1, s16
 8013a5e:	2300      	movs	r3, #0
 8013a60:	220a      	movs	r2, #10
 8013a62:	4620      	mov	r0, r4
 8013a64:	f000 f8c6 	bl	8013bf4 <__multadd>
 8013a68:	ee08 0a10 	vmov	s16, r0
 8013a6c:	e7e7      	b.n	8013a3e <_dtoa_r+0xb26>
 8013a6e:	9b02      	ldr	r3, [sp, #8]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	bfc8      	it	gt
 8013a74:	461d      	movgt	r5, r3
 8013a76:	9b01      	ldr	r3, [sp, #4]
 8013a78:	bfd8      	it	le
 8013a7a:	2501      	movle	r5, #1
 8013a7c:	441d      	add	r5, r3
 8013a7e:	f04f 0800 	mov.w	r8, #0
 8013a82:	ee18 1a10 	vmov	r1, s16
 8013a86:	2201      	movs	r2, #1
 8013a88:	4620      	mov	r0, r4
 8013a8a:	f000 fa63 	bl	8013f54 <__lshift>
 8013a8e:	4631      	mov	r1, r6
 8013a90:	ee08 0a10 	vmov	s16, r0
 8013a94:	f000 face 	bl	8014034 <__mcmp>
 8013a98:	2800      	cmp	r0, #0
 8013a9a:	dc91      	bgt.n	80139c0 <_dtoa_r+0xaa8>
 8013a9c:	d102      	bne.n	8013aa4 <_dtoa_r+0xb8c>
 8013a9e:	f01a 0f01 	tst.w	sl, #1
 8013aa2:	d18d      	bne.n	80139c0 <_dtoa_r+0xaa8>
 8013aa4:	462b      	mov	r3, r5
 8013aa6:	461d      	mov	r5, r3
 8013aa8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013aac:	2a30      	cmp	r2, #48	; 0x30
 8013aae:	d0fa      	beq.n	8013aa6 <_dtoa_r+0xb8e>
 8013ab0:	e6d7      	b.n	8013862 <_dtoa_r+0x94a>
 8013ab2:	9a01      	ldr	r2, [sp, #4]
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d184      	bne.n	80139c2 <_dtoa_r+0xaaa>
 8013ab8:	9b00      	ldr	r3, [sp, #0]
 8013aba:	3301      	adds	r3, #1
 8013abc:	9300      	str	r3, [sp, #0]
 8013abe:	2331      	movs	r3, #49	; 0x31
 8013ac0:	7013      	strb	r3, [r2, #0]
 8013ac2:	e6ce      	b.n	8013862 <_dtoa_r+0x94a>
 8013ac4:	4b09      	ldr	r3, [pc, #36]	; (8013aec <_dtoa_r+0xbd4>)
 8013ac6:	f7ff ba95 	b.w	8012ff4 <_dtoa_r+0xdc>
 8013aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	f47f aa6e 	bne.w	8012fae <_dtoa_r+0x96>
 8013ad2:	4b07      	ldr	r3, [pc, #28]	; (8013af0 <_dtoa_r+0xbd8>)
 8013ad4:	f7ff ba8e 	b.w	8012ff4 <_dtoa_r+0xdc>
 8013ad8:	9b02      	ldr	r3, [sp, #8]
 8013ada:	2b00      	cmp	r3, #0
 8013adc:	dcae      	bgt.n	8013a3c <_dtoa_r+0xb24>
 8013ade:	9b06      	ldr	r3, [sp, #24]
 8013ae0:	2b02      	cmp	r3, #2
 8013ae2:	f73f aea8 	bgt.w	8013836 <_dtoa_r+0x91e>
 8013ae6:	e7a9      	b.n	8013a3c <_dtoa_r+0xb24>
 8013ae8:	08014eb7 	.word	0x08014eb7
 8013aec:	08014e14 	.word	0x08014e14
 8013af0:	08014e38 	.word	0x08014e38

08013af4 <_localeconv_r>:
 8013af4:	4800      	ldr	r0, [pc, #0]	; (8013af8 <_localeconv_r+0x4>)
 8013af6:	4770      	bx	lr
 8013af8:	20000280 	.word	0x20000280

08013afc <memcpy>:
 8013afc:	440a      	add	r2, r1
 8013afe:	4291      	cmp	r1, r2
 8013b00:	f100 33ff 	add.w	r3, r0, #4294967295
 8013b04:	d100      	bne.n	8013b08 <memcpy+0xc>
 8013b06:	4770      	bx	lr
 8013b08:	b510      	push	{r4, lr}
 8013b0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8013b0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8013b12:	4291      	cmp	r1, r2
 8013b14:	d1f9      	bne.n	8013b0a <memcpy+0xe>
 8013b16:	bd10      	pop	{r4, pc}

08013b18 <__malloc_lock>:
 8013b18:	4801      	ldr	r0, [pc, #4]	; (8013b20 <__malloc_lock+0x8>)
 8013b1a:	f000 bbd4 	b.w	80142c6 <__retarget_lock_acquire_recursive>
 8013b1e:	bf00      	nop
 8013b20:	20002778 	.word	0x20002778

08013b24 <__malloc_unlock>:
 8013b24:	4801      	ldr	r0, [pc, #4]	; (8013b2c <__malloc_unlock+0x8>)
 8013b26:	f000 bbcf 	b.w	80142c8 <__retarget_lock_release_recursive>
 8013b2a:	bf00      	nop
 8013b2c:	20002778 	.word	0x20002778

08013b30 <_Balloc>:
 8013b30:	b570      	push	{r4, r5, r6, lr}
 8013b32:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013b34:	4604      	mov	r4, r0
 8013b36:	460d      	mov	r5, r1
 8013b38:	b976      	cbnz	r6, 8013b58 <_Balloc+0x28>
 8013b3a:	2010      	movs	r0, #16
 8013b3c:	f7fe fbee 	bl	801231c <malloc>
 8013b40:	4602      	mov	r2, r0
 8013b42:	6260      	str	r0, [r4, #36]	; 0x24
 8013b44:	b920      	cbnz	r0, 8013b50 <_Balloc+0x20>
 8013b46:	4b18      	ldr	r3, [pc, #96]	; (8013ba8 <_Balloc+0x78>)
 8013b48:	4818      	ldr	r0, [pc, #96]	; (8013bac <_Balloc+0x7c>)
 8013b4a:	2166      	movs	r1, #102	; 0x66
 8013b4c:	f000 fb8a 	bl	8014264 <__assert_func>
 8013b50:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013b54:	6006      	str	r6, [r0, #0]
 8013b56:	60c6      	str	r6, [r0, #12]
 8013b58:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8013b5a:	68f3      	ldr	r3, [r6, #12]
 8013b5c:	b183      	cbz	r3, 8013b80 <_Balloc+0x50>
 8013b5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b60:	68db      	ldr	r3, [r3, #12]
 8013b62:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8013b66:	b9b8      	cbnz	r0, 8013b98 <_Balloc+0x68>
 8013b68:	2101      	movs	r1, #1
 8013b6a:	fa01 f605 	lsl.w	r6, r1, r5
 8013b6e:	1d72      	adds	r2, r6, #5
 8013b70:	0092      	lsls	r2, r2, #2
 8013b72:	4620      	mov	r0, r4
 8013b74:	f000 fb60 	bl	8014238 <_calloc_r>
 8013b78:	b160      	cbz	r0, 8013b94 <_Balloc+0x64>
 8013b7a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8013b7e:	e00e      	b.n	8013b9e <_Balloc+0x6e>
 8013b80:	2221      	movs	r2, #33	; 0x21
 8013b82:	2104      	movs	r1, #4
 8013b84:	4620      	mov	r0, r4
 8013b86:	f000 fb57 	bl	8014238 <_calloc_r>
 8013b8a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8013b8c:	60f0      	str	r0, [r6, #12]
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d1e4      	bne.n	8013b5e <_Balloc+0x2e>
 8013b94:	2000      	movs	r0, #0
 8013b96:	bd70      	pop	{r4, r5, r6, pc}
 8013b98:	6802      	ldr	r2, [r0, #0]
 8013b9a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8013b9e:	2300      	movs	r3, #0
 8013ba0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8013ba4:	e7f7      	b.n	8013b96 <_Balloc+0x66>
 8013ba6:	bf00      	nop
 8013ba8:	08014e45 	.word	0x08014e45
 8013bac:	08014ec8 	.word	0x08014ec8

08013bb0 <_Bfree>:
 8013bb0:	b570      	push	{r4, r5, r6, lr}
 8013bb2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8013bb4:	4605      	mov	r5, r0
 8013bb6:	460c      	mov	r4, r1
 8013bb8:	b976      	cbnz	r6, 8013bd8 <_Bfree+0x28>
 8013bba:	2010      	movs	r0, #16
 8013bbc:	f7fe fbae 	bl	801231c <malloc>
 8013bc0:	4602      	mov	r2, r0
 8013bc2:	6268      	str	r0, [r5, #36]	; 0x24
 8013bc4:	b920      	cbnz	r0, 8013bd0 <_Bfree+0x20>
 8013bc6:	4b09      	ldr	r3, [pc, #36]	; (8013bec <_Bfree+0x3c>)
 8013bc8:	4809      	ldr	r0, [pc, #36]	; (8013bf0 <_Bfree+0x40>)
 8013bca:	218a      	movs	r1, #138	; 0x8a
 8013bcc:	f000 fb4a 	bl	8014264 <__assert_func>
 8013bd0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8013bd4:	6006      	str	r6, [r0, #0]
 8013bd6:	60c6      	str	r6, [r0, #12]
 8013bd8:	b13c      	cbz	r4, 8013bea <_Bfree+0x3a>
 8013bda:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8013bdc:	6862      	ldr	r2, [r4, #4]
 8013bde:	68db      	ldr	r3, [r3, #12]
 8013be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8013be4:	6021      	str	r1, [r4, #0]
 8013be6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8013bea:	bd70      	pop	{r4, r5, r6, pc}
 8013bec:	08014e45 	.word	0x08014e45
 8013bf0:	08014ec8 	.word	0x08014ec8

08013bf4 <__multadd>:
 8013bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013bf8:	690d      	ldr	r5, [r1, #16]
 8013bfa:	4607      	mov	r7, r0
 8013bfc:	460c      	mov	r4, r1
 8013bfe:	461e      	mov	r6, r3
 8013c00:	f101 0c14 	add.w	ip, r1, #20
 8013c04:	2000      	movs	r0, #0
 8013c06:	f8dc 3000 	ldr.w	r3, [ip]
 8013c0a:	b299      	uxth	r1, r3
 8013c0c:	fb02 6101 	mla	r1, r2, r1, r6
 8013c10:	0c1e      	lsrs	r6, r3, #16
 8013c12:	0c0b      	lsrs	r3, r1, #16
 8013c14:	fb02 3306 	mla	r3, r2, r6, r3
 8013c18:	b289      	uxth	r1, r1
 8013c1a:	3001      	adds	r0, #1
 8013c1c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8013c20:	4285      	cmp	r5, r0
 8013c22:	f84c 1b04 	str.w	r1, [ip], #4
 8013c26:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8013c2a:	dcec      	bgt.n	8013c06 <__multadd+0x12>
 8013c2c:	b30e      	cbz	r6, 8013c72 <__multadd+0x7e>
 8013c2e:	68a3      	ldr	r3, [r4, #8]
 8013c30:	42ab      	cmp	r3, r5
 8013c32:	dc19      	bgt.n	8013c68 <__multadd+0x74>
 8013c34:	6861      	ldr	r1, [r4, #4]
 8013c36:	4638      	mov	r0, r7
 8013c38:	3101      	adds	r1, #1
 8013c3a:	f7ff ff79 	bl	8013b30 <_Balloc>
 8013c3e:	4680      	mov	r8, r0
 8013c40:	b928      	cbnz	r0, 8013c4e <__multadd+0x5a>
 8013c42:	4602      	mov	r2, r0
 8013c44:	4b0c      	ldr	r3, [pc, #48]	; (8013c78 <__multadd+0x84>)
 8013c46:	480d      	ldr	r0, [pc, #52]	; (8013c7c <__multadd+0x88>)
 8013c48:	21b5      	movs	r1, #181	; 0xb5
 8013c4a:	f000 fb0b 	bl	8014264 <__assert_func>
 8013c4e:	6922      	ldr	r2, [r4, #16]
 8013c50:	3202      	adds	r2, #2
 8013c52:	f104 010c 	add.w	r1, r4, #12
 8013c56:	0092      	lsls	r2, r2, #2
 8013c58:	300c      	adds	r0, #12
 8013c5a:	f7ff ff4f 	bl	8013afc <memcpy>
 8013c5e:	4621      	mov	r1, r4
 8013c60:	4638      	mov	r0, r7
 8013c62:	f7ff ffa5 	bl	8013bb0 <_Bfree>
 8013c66:	4644      	mov	r4, r8
 8013c68:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8013c6c:	3501      	adds	r5, #1
 8013c6e:	615e      	str	r6, [r3, #20]
 8013c70:	6125      	str	r5, [r4, #16]
 8013c72:	4620      	mov	r0, r4
 8013c74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c78:	08014eb7 	.word	0x08014eb7
 8013c7c:	08014ec8 	.word	0x08014ec8

08013c80 <__hi0bits>:
 8013c80:	0c03      	lsrs	r3, r0, #16
 8013c82:	041b      	lsls	r3, r3, #16
 8013c84:	b9d3      	cbnz	r3, 8013cbc <__hi0bits+0x3c>
 8013c86:	0400      	lsls	r0, r0, #16
 8013c88:	2310      	movs	r3, #16
 8013c8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8013c8e:	bf04      	itt	eq
 8013c90:	0200      	lsleq	r0, r0, #8
 8013c92:	3308      	addeq	r3, #8
 8013c94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8013c98:	bf04      	itt	eq
 8013c9a:	0100      	lsleq	r0, r0, #4
 8013c9c:	3304      	addeq	r3, #4
 8013c9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8013ca2:	bf04      	itt	eq
 8013ca4:	0080      	lsleq	r0, r0, #2
 8013ca6:	3302      	addeq	r3, #2
 8013ca8:	2800      	cmp	r0, #0
 8013caa:	db05      	blt.n	8013cb8 <__hi0bits+0x38>
 8013cac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8013cb0:	f103 0301 	add.w	r3, r3, #1
 8013cb4:	bf08      	it	eq
 8013cb6:	2320      	moveq	r3, #32
 8013cb8:	4618      	mov	r0, r3
 8013cba:	4770      	bx	lr
 8013cbc:	2300      	movs	r3, #0
 8013cbe:	e7e4      	b.n	8013c8a <__hi0bits+0xa>

08013cc0 <__lo0bits>:
 8013cc0:	6803      	ldr	r3, [r0, #0]
 8013cc2:	f013 0207 	ands.w	r2, r3, #7
 8013cc6:	4601      	mov	r1, r0
 8013cc8:	d00b      	beq.n	8013ce2 <__lo0bits+0x22>
 8013cca:	07da      	lsls	r2, r3, #31
 8013ccc:	d423      	bmi.n	8013d16 <__lo0bits+0x56>
 8013cce:	0798      	lsls	r0, r3, #30
 8013cd0:	bf49      	itett	mi
 8013cd2:	085b      	lsrmi	r3, r3, #1
 8013cd4:	089b      	lsrpl	r3, r3, #2
 8013cd6:	2001      	movmi	r0, #1
 8013cd8:	600b      	strmi	r3, [r1, #0]
 8013cda:	bf5c      	itt	pl
 8013cdc:	600b      	strpl	r3, [r1, #0]
 8013cde:	2002      	movpl	r0, #2
 8013ce0:	4770      	bx	lr
 8013ce2:	b298      	uxth	r0, r3
 8013ce4:	b9a8      	cbnz	r0, 8013d12 <__lo0bits+0x52>
 8013ce6:	0c1b      	lsrs	r3, r3, #16
 8013ce8:	2010      	movs	r0, #16
 8013cea:	b2da      	uxtb	r2, r3
 8013cec:	b90a      	cbnz	r2, 8013cf2 <__lo0bits+0x32>
 8013cee:	3008      	adds	r0, #8
 8013cf0:	0a1b      	lsrs	r3, r3, #8
 8013cf2:	071a      	lsls	r2, r3, #28
 8013cf4:	bf04      	itt	eq
 8013cf6:	091b      	lsreq	r3, r3, #4
 8013cf8:	3004      	addeq	r0, #4
 8013cfa:	079a      	lsls	r2, r3, #30
 8013cfc:	bf04      	itt	eq
 8013cfe:	089b      	lsreq	r3, r3, #2
 8013d00:	3002      	addeq	r0, #2
 8013d02:	07da      	lsls	r2, r3, #31
 8013d04:	d403      	bmi.n	8013d0e <__lo0bits+0x4e>
 8013d06:	085b      	lsrs	r3, r3, #1
 8013d08:	f100 0001 	add.w	r0, r0, #1
 8013d0c:	d005      	beq.n	8013d1a <__lo0bits+0x5a>
 8013d0e:	600b      	str	r3, [r1, #0]
 8013d10:	4770      	bx	lr
 8013d12:	4610      	mov	r0, r2
 8013d14:	e7e9      	b.n	8013cea <__lo0bits+0x2a>
 8013d16:	2000      	movs	r0, #0
 8013d18:	4770      	bx	lr
 8013d1a:	2020      	movs	r0, #32
 8013d1c:	4770      	bx	lr
	...

08013d20 <__i2b>:
 8013d20:	b510      	push	{r4, lr}
 8013d22:	460c      	mov	r4, r1
 8013d24:	2101      	movs	r1, #1
 8013d26:	f7ff ff03 	bl	8013b30 <_Balloc>
 8013d2a:	4602      	mov	r2, r0
 8013d2c:	b928      	cbnz	r0, 8013d3a <__i2b+0x1a>
 8013d2e:	4b05      	ldr	r3, [pc, #20]	; (8013d44 <__i2b+0x24>)
 8013d30:	4805      	ldr	r0, [pc, #20]	; (8013d48 <__i2b+0x28>)
 8013d32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8013d36:	f000 fa95 	bl	8014264 <__assert_func>
 8013d3a:	2301      	movs	r3, #1
 8013d3c:	6144      	str	r4, [r0, #20]
 8013d3e:	6103      	str	r3, [r0, #16]
 8013d40:	bd10      	pop	{r4, pc}
 8013d42:	bf00      	nop
 8013d44:	08014eb7 	.word	0x08014eb7
 8013d48:	08014ec8 	.word	0x08014ec8

08013d4c <__multiply>:
 8013d4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d50:	4691      	mov	r9, r2
 8013d52:	690a      	ldr	r2, [r1, #16]
 8013d54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8013d58:	429a      	cmp	r2, r3
 8013d5a:	bfb8      	it	lt
 8013d5c:	460b      	movlt	r3, r1
 8013d5e:	460c      	mov	r4, r1
 8013d60:	bfbc      	itt	lt
 8013d62:	464c      	movlt	r4, r9
 8013d64:	4699      	movlt	r9, r3
 8013d66:	6927      	ldr	r7, [r4, #16]
 8013d68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8013d6c:	68a3      	ldr	r3, [r4, #8]
 8013d6e:	6861      	ldr	r1, [r4, #4]
 8013d70:	eb07 060a 	add.w	r6, r7, sl
 8013d74:	42b3      	cmp	r3, r6
 8013d76:	b085      	sub	sp, #20
 8013d78:	bfb8      	it	lt
 8013d7a:	3101      	addlt	r1, #1
 8013d7c:	f7ff fed8 	bl	8013b30 <_Balloc>
 8013d80:	b930      	cbnz	r0, 8013d90 <__multiply+0x44>
 8013d82:	4602      	mov	r2, r0
 8013d84:	4b44      	ldr	r3, [pc, #272]	; (8013e98 <__multiply+0x14c>)
 8013d86:	4845      	ldr	r0, [pc, #276]	; (8013e9c <__multiply+0x150>)
 8013d88:	f240 115d 	movw	r1, #349	; 0x15d
 8013d8c:	f000 fa6a 	bl	8014264 <__assert_func>
 8013d90:	f100 0514 	add.w	r5, r0, #20
 8013d94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8013d98:	462b      	mov	r3, r5
 8013d9a:	2200      	movs	r2, #0
 8013d9c:	4543      	cmp	r3, r8
 8013d9e:	d321      	bcc.n	8013de4 <__multiply+0x98>
 8013da0:	f104 0314 	add.w	r3, r4, #20
 8013da4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8013da8:	f109 0314 	add.w	r3, r9, #20
 8013dac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8013db0:	9202      	str	r2, [sp, #8]
 8013db2:	1b3a      	subs	r2, r7, r4
 8013db4:	3a15      	subs	r2, #21
 8013db6:	f022 0203 	bic.w	r2, r2, #3
 8013dba:	3204      	adds	r2, #4
 8013dbc:	f104 0115 	add.w	r1, r4, #21
 8013dc0:	428f      	cmp	r7, r1
 8013dc2:	bf38      	it	cc
 8013dc4:	2204      	movcc	r2, #4
 8013dc6:	9201      	str	r2, [sp, #4]
 8013dc8:	9a02      	ldr	r2, [sp, #8]
 8013dca:	9303      	str	r3, [sp, #12]
 8013dcc:	429a      	cmp	r2, r3
 8013dce:	d80c      	bhi.n	8013dea <__multiply+0x9e>
 8013dd0:	2e00      	cmp	r6, #0
 8013dd2:	dd03      	ble.n	8013ddc <__multiply+0x90>
 8013dd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8013dd8:	2b00      	cmp	r3, #0
 8013dda:	d05a      	beq.n	8013e92 <__multiply+0x146>
 8013ddc:	6106      	str	r6, [r0, #16]
 8013dde:	b005      	add	sp, #20
 8013de0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013de4:	f843 2b04 	str.w	r2, [r3], #4
 8013de8:	e7d8      	b.n	8013d9c <__multiply+0x50>
 8013dea:	f8b3 a000 	ldrh.w	sl, [r3]
 8013dee:	f1ba 0f00 	cmp.w	sl, #0
 8013df2:	d024      	beq.n	8013e3e <__multiply+0xf2>
 8013df4:	f104 0e14 	add.w	lr, r4, #20
 8013df8:	46a9      	mov	r9, r5
 8013dfa:	f04f 0c00 	mov.w	ip, #0
 8013dfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8013e02:	f8d9 1000 	ldr.w	r1, [r9]
 8013e06:	fa1f fb82 	uxth.w	fp, r2
 8013e0a:	b289      	uxth	r1, r1
 8013e0c:	fb0a 110b 	mla	r1, sl, fp, r1
 8013e10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8013e14:	f8d9 2000 	ldr.w	r2, [r9]
 8013e18:	4461      	add	r1, ip
 8013e1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e1e:	fb0a c20b 	mla	r2, sl, fp, ip
 8013e22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8013e26:	b289      	uxth	r1, r1
 8013e28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8013e2c:	4577      	cmp	r7, lr
 8013e2e:	f849 1b04 	str.w	r1, [r9], #4
 8013e32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8013e36:	d8e2      	bhi.n	8013dfe <__multiply+0xb2>
 8013e38:	9a01      	ldr	r2, [sp, #4]
 8013e3a:	f845 c002 	str.w	ip, [r5, r2]
 8013e3e:	9a03      	ldr	r2, [sp, #12]
 8013e40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8013e44:	3304      	adds	r3, #4
 8013e46:	f1b9 0f00 	cmp.w	r9, #0
 8013e4a:	d020      	beq.n	8013e8e <__multiply+0x142>
 8013e4c:	6829      	ldr	r1, [r5, #0]
 8013e4e:	f104 0c14 	add.w	ip, r4, #20
 8013e52:	46ae      	mov	lr, r5
 8013e54:	f04f 0a00 	mov.w	sl, #0
 8013e58:	f8bc b000 	ldrh.w	fp, [ip]
 8013e5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8013e60:	fb09 220b 	mla	r2, r9, fp, r2
 8013e64:	4492      	add	sl, r2
 8013e66:	b289      	uxth	r1, r1
 8013e68:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8013e6c:	f84e 1b04 	str.w	r1, [lr], #4
 8013e70:	f85c 2b04 	ldr.w	r2, [ip], #4
 8013e74:	f8be 1000 	ldrh.w	r1, [lr]
 8013e78:	0c12      	lsrs	r2, r2, #16
 8013e7a:	fb09 1102 	mla	r1, r9, r2, r1
 8013e7e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8013e82:	4567      	cmp	r7, ip
 8013e84:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8013e88:	d8e6      	bhi.n	8013e58 <__multiply+0x10c>
 8013e8a:	9a01      	ldr	r2, [sp, #4]
 8013e8c:	50a9      	str	r1, [r5, r2]
 8013e8e:	3504      	adds	r5, #4
 8013e90:	e79a      	b.n	8013dc8 <__multiply+0x7c>
 8013e92:	3e01      	subs	r6, #1
 8013e94:	e79c      	b.n	8013dd0 <__multiply+0x84>
 8013e96:	bf00      	nop
 8013e98:	08014eb7 	.word	0x08014eb7
 8013e9c:	08014ec8 	.word	0x08014ec8

08013ea0 <__pow5mult>:
 8013ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ea4:	4615      	mov	r5, r2
 8013ea6:	f012 0203 	ands.w	r2, r2, #3
 8013eaa:	4606      	mov	r6, r0
 8013eac:	460f      	mov	r7, r1
 8013eae:	d007      	beq.n	8013ec0 <__pow5mult+0x20>
 8013eb0:	4c25      	ldr	r4, [pc, #148]	; (8013f48 <__pow5mult+0xa8>)
 8013eb2:	3a01      	subs	r2, #1
 8013eb4:	2300      	movs	r3, #0
 8013eb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8013eba:	f7ff fe9b 	bl	8013bf4 <__multadd>
 8013ebe:	4607      	mov	r7, r0
 8013ec0:	10ad      	asrs	r5, r5, #2
 8013ec2:	d03d      	beq.n	8013f40 <__pow5mult+0xa0>
 8013ec4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8013ec6:	b97c      	cbnz	r4, 8013ee8 <__pow5mult+0x48>
 8013ec8:	2010      	movs	r0, #16
 8013eca:	f7fe fa27 	bl	801231c <malloc>
 8013ece:	4602      	mov	r2, r0
 8013ed0:	6270      	str	r0, [r6, #36]	; 0x24
 8013ed2:	b928      	cbnz	r0, 8013ee0 <__pow5mult+0x40>
 8013ed4:	4b1d      	ldr	r3, [pc, #116]	; (8013f4c <__pow5mult+0xac>)
 8013ed6:	481e      	ldr	r0, [pc, #120]	; (8013f50 <__pow5mult+0xb0>)
 8013ed8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8013edc:	f000 f9c2 	bl	8014264 <__assert_func>
 8013ee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8013ee4:	6004      	str	r4, [r0, #0]
 8013ee6:	60c4      	str	r4, [r0, #12]
 8013ee8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8013eec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8013ef0:	b94c      	cbnz	r4, 8013f06 <__pow5mult+0x66>
 8013ef2:	f240 2171 	movw	r1, #625	; 0x271
 8013ef6:	4630      	mov	r0, r6
 8013ef8:	f7ff ff12 	bl	8013d20 <__i2b>
 8013efc:	2300      	movs	r3, #0
 8013efe:	f8c8 0008 	str.w	r0, [r8, #8]
 8013f02:	4604      	mov	r4, r0
 8013f04:	6003      	str	r3, [r0, #0]
 8013f06:	f04f 0900 	mov.w	r9, #0
 8013f0a:	07eb      	lsls	r3, r5, #31
 8013f0c:	d50a      	bpl.n	8013f24 <__pow5mult+0x84>
 8013f0e:	4639      	mov	r1, r7
 8013f10:	4622      	mov	r2, r4
 8013f12:	4630      	mov	r0, r6
 8013f14:	f7ff ff1a 	bl	8013d4c <__multiply>
 8013f18:	4639      	mov	r1, r7
 8013f1a:	4680      	mov	r8, r0
 8013f1c:	4630      	mov	r0, r6
 8013f1e:	f7ff fe47 	bl	8013bb0 <_Bfree>
 8013f22:	4647      	mov	r7, r8
 8013f24:	106d      	asrs	r5, r5, #1
 8013f26:	d00b      	beq.n	8013f40 <__pow5mult+0xa0>
 8013f28:	6820      	ldr	r0, [r4, #0]
 8013f2a:	b938      	cbnz	r0, 8013f3c <__pow5mult+0x9c>
 8013f2c:	4622      	mov	r2, r4
 8013f2e:	4621      	mov	r1, r4
 8013f30:	4630      	mov	r0, r6
 8013f32:	f7ff ff0b 	bl	8013d4c <__multiply>
 8013f36:	6020      	str	r0, [r4, #0]
 8013f38:	f8c0 9000 	str.w	r9, [r0]
 8013f3c:	4604      	mov	r4, r0
 8013f3e:	e7e4      	b.n	8013f0a <__pow5mult+0x6a>
 8013f40:	4638      	mov	r0, r7
 8013f42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f46:	bf00      	nop
 8013f48:	08015018 	.word	0x08015018
 8013f4c:	08014e45 	.word	0x08014e45
 8013f50:	08014ec8 	.word	0x08014ec8

08013f54 <__lshift>:
 8013f54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013f58:	460c      	mov	r4, r1
 8013f5a:	6849      	ldr	r1, [r1, #4]
 8013f5c:	6923      	ldr	r3, [r4, #16]
 8013f5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8013f62:	68a3      	ldr	r3, [r4, #8]
 8013f64:	4607      	mov	r7, r0
 8013f66:	4691      	mov	r9, r2
 8013f68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8013f6c:	f108 0601 	add.w	r6, r8, #1
 8013f70:	42b3      	cmp	r3, r6
 8013f72:	db0b      	blt.n	8013f8c <__lshift+0x38>
 8013f74:	4638      	mov	r0, r7
 8013f76:	f7ff fddb 	bl	8013b30 <_Balloc>
 8013f7a:	4605      	mov	r5, r0
 8013f7c:	b948      	cbnz	r0, 8013f92 <__lshift+0x3e>
 8013f7e:	4602      	mov	r2, r0
 8013f80:	4b2a      	ldr	r3, [pc, #168]	; (801402c <__lshift+0xd8>)
 8013f82:	482b      	ldr	r0, [pc, #172]	; (8014030 <__lshift+0xdc>)
 8013f84:	f240 11d9 	movw	r1, #473	; 0x1d9
 8013f88:	f000 f96c 	bl	8014264 <__assert_func>
 8013f8c:	3101      	adds	r1, #1
 8013f8e:	005b      	lsls	r3, r3, #1
 8013f90:	e7ee      	b.n	8013f70 <__lshift+0x1c>
 8013f92:	2300      	movs	r3, #0
 8013f94:	f100 0114 	add.w	r1, r0, #20
 8013f98:	f100 0210 	add.w	r2, r0, #16
 8013f9c:	4618      	mov	r0, r3
 8013f9e:	4553      	cmp	r3, sl
 8013fa0:	db37      	blt.n	8014012 <__lshift+0xbe>
 8013fa2:	6920      	ldr	r0, [r4, #16]
 8013fa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8013fa8:	f104 0314 	add.w	r3, r4, #20
 8013fac:	f019 091f 	ands.w	r9, r9, #31
 8013fb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8013fb4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8013fb8:	d02f      	beq.n	801401a <__lshift+0xc6>
 8013fba:	f1c9 0e20 	rsb	lr, r9, #32
 8013fbe:	468a      	mov	sl, r1
 8013fc0:	f04f 0c00 	mov.w	ip, #0
 8013fc4:	681a      	ldr	r2, [r3, #0]
 8013fc6:	fa02 f209 	lsl.w	r2, r2, r9
 8013fca:	ea42 020c 	orr.w	r2, r2, ip
 8013fce:	f84a 2b04 	str.w	r2, [sl], #4
 8013fd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8013fd6:	4298      	cmp	r0, r3
 8013fd8:	fa22 fc0e 	lsr.w	ip, r2, lr
 8013fdc:	d8f2      	bhi.n	8013fc4 <__lshift+0x70>
 8013fde:	1b03      	subs	r3, r0, r4
 8013fe0:	3b15      	subs	r3, #21
 8013fe2:	f023 0303 	bic.w	r3, r3, #3
 8013fe6:	3304      	adds	r3, #4
 8013fe8:	f104 0215 	add.w	r2, r4, #21
 8013fec:	4290      	cmp	r0, r2
 8013fee:	bf38      	it	cc
 8013ff0:	2304      	movcc	r3, #4
 8013ff2:	f841 c003 	str.w	ip, [r1, r3]
 8013ff6:	f1bc 0f00 	cmp.w	ip, #0
 8013ffa:	d001      	beq.n	8014000 <__lshift+0xac>
 8013ffc:	f108 0602 	add.w	r6, r8, #2
 8014000:	3e01      	subs	r6, #1
 8014002:	4638      	mov	r0, r7
 8014004:	612e      	str	r6, [r5, #16]
 8014006:	4621      	mov	r1, r4
 8014008:	f7ff fdd2 	bl	8013bb0 <_Bfree>
 801400c:	4628      	mov	r0, r5
 801400e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014012:	f842 0f04 	str.w	r0, [r2, #4]!
 8014016:	3301      	adds	r3, #1
 8014018:	e7c1      	b.n	8013f9e <__lshift+0x4a>
 801401a:	3904      	subs	r1, #4
 801401c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014020:	f841 2f04 	str.w	r2, [r1, #4]!
 8014024:	4298      	cmp	r0, r3
 8014026:	d8f9      	bhi.n	801401c <__lshift+0xc8>
 8014028:	e7ea      	b.n	8014000 <__lshift+0xac>
 801402a:	bf00      	nop
 801402c:	08014eb7 	.word	0x08014eb7
 8014030:	08014ec8 	.word	0x08014ec8

08014034 <__mcmp>:
 8014034:	b530      	push	{r4, r5, lr}
 8014036:	6902      	ldr	r2, [r0, #16]
 8014038:	690c      	ldr	r4, [r1, #16]
 801403a:	1b12      	subs	r2, r2, r4
 801403c:	d10e      	bne.n	801405c <__mcmp+0x28>
 801403e:	f100 0314 	add.w	r3, r0, #20
 8014042:	3114      	adds	r1, #20
 8014044:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8014048:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801404c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8014050:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8014054:	42a5      	cmp	r5, r4
 8014056:	d003      	beq.n	8014060 <__mcmp+0x2c>
 8014058:	d305      	bcc.n	8014066 <__mcmp+0x32>
 801405a:	2201      	movs	r2, #1
 801405c:	4610      	mov	r0, r2
 801405e:	bd30      	pop	{r4, r5, pc}
 8014060:	4283      	cmp	r3, r0
 8014062:	d3f3      	bcc.n	801404c <__mcmp+0x18>
 8014064:	e7fa      	b.n	801405c <__mcmp+0x28>
 8014066:	f04f 32ff 	mov.w	r2, #4294967295
 801406a:	e7f7      	b.n	801405c <__mcmp+0x28>

0801406c <__mdiff>:
 801406c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014070:	460c      	mov	r4, r1
 8014072:	4606      	mov	r6, r0
 8014074:	4611      	mov	r1, r2
 8014076:	4620      	mov	r0, r4
 8014078:	4690      	mov	r8, r2
 801407a:	f7ff ffdb 	bl	8014034 <__mcmp>
 801407e:	1e05      	subs	r5, r0, #0
 8014080:	d110      	bne.n	80140a4 <__mdiff+0x38>
 8014082:	4629      	mov	r1, r5
 8014084:	4630      	mov	r0, r6
 8014086:	f7ff fd53 	bl	8013b30 <_Balloc>
 801408a:	b930      	cbnz	r0, 801409a <__mdiff+0x2e>
 801408c:	4b3a      	ldr	r3, [pc, #232]	; (8014178 <__mdiff+0x10c>)
 801408e:	4602      	mov	r2, r0
 8014090:	f240 2132 	movw	r1, #562	; 0x232
 8014094:	4839      	ldr	r0, [pc, #228]	; (801417c <__mdiff+0x110>)
 8014096:	f000 f8e5 	bl	8014264 <__assert_func>
 801409a:	2301      	movs	r3, #1
 801409c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80140a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80140a4:	bfa4      	itt	ge
 80140a6:	4643      	movge	r3, r8
 80140a8:	46a0      	movge	r8, r4
 80140aa:	4630      	mov	r0, r6
 80140ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80140b0:	bfa6      	itte	ge
 80140b2:	461c      	movge	r4, r3
 80140b4:	2500      	movge	r5, #0
 80140b6:	2501      	movlt	r5, #1
 80140b8:	f7ff fd3a 	bl	8013b30 <_Balloc>
 80140bc:	b920      	cbnz	r0, 80140c8 <__mdiff+0x5c>
 80140be:	4b2e      	ldr	r3, [pc, #184]	; (8014178 <__mdiff+0x10c>)
 80140c0:	4602      	mov	r2, r0
 80140c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80140c6:	e7e5      	b.n	8014094 <__mdiff+0x28>
 80140c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80140cc:	6926      	ldr	r6, [r4, #16]
 80140ce:	60c5      	str	r5, [r0, #12]
 80140d0:	f104 0914 	add.w	r9, r4, #20
 80140d4:	f108 0514 	add.w	r5, r8, #20
 80140d8:	f100 0e14 	add.w	lr, r0, #20
 80140dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80140e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80140e4:	f108 0210 	add.w	r2, r8, #16
 80140e8:	46f2      	mov	sl, lr
 80140ea:	2100      	movs	r1, #0
 80140ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80140f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80140f4:	fa1f f883 	uxth.w	r8, r3
 80140f8:	fa11 f18b 	uxtah	r1, r1, fp
 80140fc:	0c1b      	lsrs	r3, r3, #16
 80140fe:	eba1 0808 	sub.w	r8, r1, r8
 8014102:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8014106:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801410a:	fa1f f888 	uxth.w	r8, r8
 801410e:	1419      	asrs	r1, r3, #16
 8014110:	454e      	cmp	r6, r9
 8014112:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8014116:	f84a 3b04 	str.w	r3, [sl], #4
 801411a:	d8e7      	bhi.n	80140ec <__mdiff+0x80>
 801411c:	1b33      	subs	r3, r6, r4
 801411e:	3b15      	subs	r3, #21
 8014120:	f023 0303 	bic.w	r3, r3, #3
 8014124:	3304      	adds	r3, #4
 8014126:	3415      	adds	r4, #21
 8014128:	42a6      	cmp	r6, r4
 801412a:	bf38      	it	cc
 801412c:	2304      	movcc	r3, #4
 801412e:	441d      	add	r5, r3
 8014130:	4473      	add	r3, lr
 8014132:	469e      	mov	lr, r3
 8014134:	462e      	mov	r6, r5
 8014136:	4566      	cmp	r6, ip
 8014138:	d30e      	bcc.n	8014158 <__mdiff+0xec>
 801413a:	f10c 0203 	add.w	r2, ip, #3
 801413e:	1b52      	subs	r2, r2, r5
 8014140:	f022 0203 	bic.w	r2, r2, #3
 8014144:	3d03      	subs	r5, #3
 8014146:	45ac      	cmp	ip, r5
 8014148:	bf38      	it	cc
 801414a:	2200      	movcc	r2, #0
 801414c:	441a      	add	r2, r3
 801414e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8014152:	b17b      	cbz	r3, 8014174 <__mdiff+0x108>
 8014154:	6107      	str	r7, [r0, #16]
 8014156:	e7a3      	b.n	80140a0 <__mdiff+0x34>
 8014158:	f856 8b04 	ldr.w	r8, [r6], #4
 801415c:	fa11 f288 	uxtah	r2, r1, r8
 8014160:	1414      	asrs	r4, r2, #16
 8014162:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8014166:	b292      	uxth	r2, r2
 8014168:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801416c:	f84e 2b04 	str.w	r2, [lr], #4
 8014170:	1421      	asrs	r1, r4, #16
 8014172:	e7e0      	b.n	8014136 <__mdiff+0xca>
 8014174:	3f01      	subs	r7, #1
 8014176:	e7ea      	b.n	801414e <__mdiff+0xe2>
 8014178:	08014eb7 	.word	0x08014eb7
 801417c:	08014ec8 	.word	0x08014ec8

08014180 <__d2b>:
 8014180:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8014184:	4689      	mov	r9, r1
 8014186:	2101      	movs	r1, #1
 8014188:	ec57 6b10 	vmov	r6, r7, d0
 801418c:	4690      	mov	r8, r2
 801418e:	f7ff fccf 	bl	8013b30 <_Balloc>
 8014192:	4604      	mov	r4, r0
 8014194:	b930      	cbnz	r0, 80141a4 <__d2b+0x24>
 8014196:	4602      	mov	r2, r0
 8014198:	4b25      	ldr	r3, [pc, #148]	; (8014230 <__d2b+0xb0>)
 801419a:	4826      	ldr	r0, [pc, #152]	; (8014234 <__d2b+0xb4>)
 801419c:	f240 310a 	movw	r1, #778	; 0x30a
 80141a0:	f000 f860 	bl	8014264 <__assert_func>
 80141a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80141a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80141ac:	bb35      	cbnz	r5, 80141fc <__d2b+0x7c>
 80141ae:	2e00      	cmp	r6, #0
 80141b0:	9301      	str	r3, [sp, #4]
 80141b2:	d028      	beq.n	8014206 <__d2b+0x86>
 80141b4:	4668      	mov	r0, sp
 80141b6:	9600      	str	r6, [sp, #0]
 80141b8:	f7ff fd82 	bl	8013cc0 <__lo0bits>
 80141bc:	9900      	ldr	r1, [sp, #0]
 80141be:	b300      	cbz	r0, 8014202 <__d2b+0x82>
 80141c0:	9a01      	ldr	r2, [sp, #4]
 80141c2:	f1c0 0320 	rsb	r3, r0, #32
 80141c6:	fa02 f303 	lsl.w	r3, r2, r3
 80141ca:	430b      	orrs	r3, r1
 80141cc:	40c2      	lsrs	r2, r0
 80141ce:	6163      	str	r3, [r4, #20]
 80141d0:	9201      	str	r2, [sp, #4]
 80141d2:	9b01      	ldr	r3, [sp, #4]
 80141d4:	61a3      	str	r3, [r4, #24]
 80141d6:	2b00      	cmp	r3, #0
 80141d8:	bf14      	ite	ne
 80141da:	2202      	movne	r2, #2
 80141dc:	2201      	moveq	r2, #1
 80141de:	6122      	str	r2, [r4, #16]
 80141e0:	b1d5      	cbz	r5, 8014218 <__d2b+0x98>
 80141e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80141e6:	4405      	add	r5, r0
 80141e8:	f8c9 5000 	str.w	r5, [r9]
 80141ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80141f0:	f8c8 0000 	str.w	r0, [r8]
 80141f4:	4620      	mov	r0, r4
 80141f6:	b003      	add	sp, #12
 80141f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80141fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8014200:	e7d5      	b.n	80141ae <__d2b+0x2e>
 8014202:	6161      	str	r1, [r4, #20]
 8014204:	e7e5      	b.n	80141d2 <__d2b+0x52>
 8014206:	a801      	add	r0, sp, #4
 8014208:	f7ff fd5a 	bl	8013cc0 <__lo0bits>
 801420c:	9b01      	ldr	r3, [sp, #4]
 801420e:	6163      	str	r3, [r4, #20]
 8014210:	2201      	movs	r2, #1
 8014212:	6122      	str	r2, [r4, #16]
 8014214:	3020      	adds	r0, #32
 8014216:	e7e3      	b.n	80141e0 <__d2b+0x60>
 8014218:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801421c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8014220:	f8c9 0000 	str.w	r0, [r9]
 8014224:	6918      	ldr	r0, [r3, #16]
 8014226:	f7ff fd2b 	bl	8013c80 <__hi0bits>
 801422a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801422e:	e7df      	b.n	80141f0 <__d2b+0x70>
 8014230:	08014eb7 	.word	0x08014eb7
 8014234:	08014ec8 	.word	0x08014ec8

08014238 <_calloc_r>:
 8014238:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801423a:	fba1 2402 	umull	r2, r4, r1, r2
 801423e:	b94c      	cbnz	r4, 8014254 <_calloc_r+0x1c>
 8014240:	4611      	mov	r1, r2
 8014242:	9201      	str	r2, [sp, #4]
 8014244:	f7fe f8ee 	bl	8012424 <_malloc_r>
 8014248:	9a01      	ldr	r2, [sp, #4]
 801424a:	4605      	mov	r5, r0
 801424c:	b930      	cbnz	r0, 801425c <_calloc_r+0x24>
 801424e:	4628      	mov	r0, r5
 8014250:	b003      	add	sp, #12
 8014252:	bd30      	pop	{r4, r5, pc}
 8014254:	220c      	movs	r2, #12
 8014256:	6002      	str	r2, [r0, #0]
 8014258:	2500      	movs	r5, #0
 801425a:	e7f8      	b.n	801424e <_calloc_r+0x16>
 801425c:	4621      	mov	r1, r4
 801425e:	f7fe f86d 	bl	801233c <memset>
 8014262:	e7f4      	b.n	801424e <_calloc_r+0x16>

08014264 <__assert_func>:
 8014264:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014266:	4614      	mov	r4, r2
 8014268:	461a      	mov	r2, r3
 801426a:	4b09      	ldr	r3, [pc, #36]	; (8014290 <__assert_func+0x2c>)
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	4605      	mov	r5, r0
 8014270:	68d8      	ldr	r0, [r3, #12]
 8014272:	b14c      	cbz	r4, 8014288 <__assert_func+0x24>
 8014274:	4b07      	ldr	r3, [pc, #28]	; (8014294 <__assert_func+0x30>)
 8014276:	9100      	str	r1, [sp, #0]
 8014278:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801427c:	4906      	ldr	r1, [pc, #24]	; (8014298 <__assert_func+0x34>)
 801427e:	462b      	mov	r3, r5
 8014280:	f000 f80e 	bl	80142a0 <fiprintf>
 8014284:	f000 fa5a 	bl	801473c <abort>
 8014288:	4b04      	ldr	r3, [pc, #16]	; (801429c <__assert_func+0x38>)
 801428a:	461c      	mov	r4, r3
 801428c:	e7f3      	b.n	8014276 <__assert_func+0x12>
 801428e:	bf00      	nop
 8014290:	2000012c 	.word	0x2000012c
 8014294:	08015024 	.word	0x08015024
 8014298:	08015031 	.word	0x08015031
 801429c:	0801505f 	.word	0x0801505f

080142a0 <fiprintf>:
 80142a0:	b40e      	push	{r1, r2, r3}
 80142a2:	b503      	push	{r0, r1, lr}
 80142a4:	4601      	mov	r1, r0
 80142a6:	ab03      	add	r3, sp, #12
 80142a8:	4805      	ldr	r0, [pc, #20]	; (80142c0 <fiprintf+0x20>)
 80142aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80142ae:	6800      	ldr	r0, [r0, #0]
 80142b0:	9301      	str	r3, [sp, #4]
 80142b2:	f000 f845 	bl	8014340 <_vfiprintf_r>
 80142b6:	b002      	add	sp, #8
 80142b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80142bc:	b003      	add	sp, #12
 80142be:	4770      	bx	lr
 80142c0:	2000012c 	.word	0x2000012c

080142c4 <__retarget_lock_init_recursive>:
 80142c4:	4770      	bx	lr

080142c6 <__retarget_lock_acquire_recursive>:
 80142c6:	4770      	bx	lr

080142c8 <__retarget_lock_release_recursive>:
 80142c8:	4770      	bx	lr

080142ca <__ascii_mbtowc>:
 80142ca:	b082      	sub	sp, #8
 80142cc:	b901      	cbnz	r1, 80142d0 <__ascii_mbtowc+0x6>
 80142ce:	a901      	add	r1, sp, #4
 80142d0:	b142      	cbz	r2, 80142e4 <__ascii_mbtowc+0x1a>
 80142d2:	b14b      	cbz	r3, 80142e8 <__ascii_mbtowc+0x1e>
 80142d4:	7813      	ldrb	r3, [r2, #0]
 80142d6:	600b      	str	r3, [r1, #0]
 80142d8:	7812      	ldrb	r2, [r2, #0]
 80142da:	1e10      	subs	r0, r2, #0
 80142dc:	bf18      	it	ne
 80142de:	2001      	movne	r0, #1
 80142e0:	b002      	add	sp, #8
 80142e2:	4770      	bx	lr
 80142e4:	4610      	mov	r0, r2
 80142e6:	e7fb      	b.n	80142e0 <__ascii_mbtowc+0x16>
 80142e8:	f06f 0001 	mvn.w	r0, #1
 80142ec:	e7f8      	b.n	80142e0 <__ascii_mbtowc+0x16>

080142ee <__sfputc_r>:
 80142ee:	6893      	ldr	r3, [r2, #8]
 80142f0:	3b01      	subs	r3, #1
 80142f2:	2b00      	cmp	r3, #0
 80142f4:	b410      	push	{r4}
 80142f6:	6093      	str	r3, [r2, #8]
 80142f8:	da08      	bge.n	801430c <__sfputc_r+0x1e>
 80142fa:	6994      	ldr	r4, [r2, #24]
 80142fc:	42a3      	cmp	r3, r4
 80142fe:	db01      	blt.n	8014304 <__sfputc_r+0x16>
 8014300:	290a      	cmp	r1, #10
 8014302:	d103      	bne.n	801430c <__sfputc_r+0x1e>
 8014304:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014308:	f000 b94a 	b.w	80145a0 <__swbuf_r>
 801430c:	6813      	ldr	r3, [r2, #0]
 801430e:	1c58      	adds	r0, r3, #1
 8014310:	6010      	str	r0, [r2, #0]
 8014312:	7019      	strb	r1, [r3, #0]
 8014314:	4608      	mov	r0, r1
 8014316:	f85d 4b04 	ldr.w	r4, [sp], #4
 801431a:	4770      	bx	lr

0801431c <__sfputs_r>:
 801431c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801431e:	4606      	mov	r6, r0
 8014320:	460f      	mov	r7, r1
 8014322:	4614      	mov	r4, r2
 8014324:	18d5      	adds	r5, r2, r3
 8014326:	42ac      	cmp	r4, r5
 8014328:	d101      	bne.n	801432e <__sfputs_r+0x12>
 801432a:	2000      	movs	r0, #0
 801432c:	e007      	b.n	801433e <__sfputs_r+0x22>
 801432e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014332:	463a      	mov	r2, r7
 8014334:	4630      	mov	r0, r6
 8014336:	f7ff ffda 	bl	80142ee <__sfputc_r>
 801433a:	1c43      	adds	r3, r0, #1
 801433c:	d1f3      	bne.n	8014326 <__sfputs_r+0xa>
 801433e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014340 <_vfiprintf_r>:
 8014340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014344:	460d      	mov	r5, r1
 8014346:	b09d      	sub	sp, #116	; 0x74
 8014348:	4614      	mov	r4, r2
 801434a:	4698      	mov	r8, r3
 801434c:	4606      	mov	r6, r0
 801434e:	b118      	cbz	r0, 8014358 <_vfiprintf_r+0x18>
 8014350:	6983      	ldr	r3, [r0, #24]
 8014352:	b90b      	cbnz	r3, 8014358 <_vfiprintf_r+0x18>
 8014354:	f000 fb14 	bl	8014980 <__sinit>
 8014358:	4b89      	ldr	r3, [pc, #548]	; (8014580 <_vfiprintf_r+0x240>)
 801435a:	429d      	cmp	r5, r3
 801435c:	d11b      	bne.n	8014396 <_vfiprintf_r+0x56>
 801435e:	6875      	ldr	r5, [r6, #4]
 8014360:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014362:	07d9      	lsls	r1, r3, #31
 8014364:	d405      	bmi.n	8014372 <_vfiprintf_r+0x32>
 8014366:	89ab      	ldrh	r3, [r5, #12]
 8014368:	059a      	lsls	r2, r3, #22
 801436a:	d402      	bmi.n	8014372 <_vfiprintf_r+0x32>
 801436c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801436e:	f7ff ffaa 	bl	80142c6 <__retarget_lock_acquire_recursive>
 8014372:	89ab      	ldrh	r3, [r5, #12]
 8014374:	071b      	lsls	r3, r3, #28
 8014376:	d501      	bpl.n	801437c <_vfiprintf_r+0x3c>
 8014378:	692b      	ldr	r3, [r5, #16]
 801437a:	b9eb      	cbnz	r3, 80143b8 <_vfiprintf_r+0x78>
 801437c:	4629      	mov	r1, r5
 801437e:	4630      	mov	r0, r6
 8014380:	f000 f96e 	bl	8014660 <__swsetup_r>
 8014384:	b1c0      	cbz	r0, 80143b8 <_vfiprintf_r+0x78>
 8014386:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014388:	07dc      	lsls	r4, r3, #31
 801438a:	d50e      	bpl.n	80143aa <_vfiprintf_r+0x6a>
 801438c:	f04f 30ff 	mov.w	r0, #4294967295
 8014390:	b01d      	add	sp, #116	; 0x74
 8014392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014396:	4b7b      	ldr	r3, [pc, #492]	; (8014584 <_vfiprintf_r+0x244>)
 8014398:	429d      	cmp	r5, r3
 801439a:	d101      	bne.n	80143a0 <_vfiprintf_r+0x60>
 801439c:	68b5      	ldr	r5, [r6, #8]
 801439e:	e7df      	b.n	8014360 <_vfiprintf_r+0x20>
 80143a0:	4b79      	ldr	r3, [pc, #484]	; (8014588 <_vfiprintf_r+0x248>)
 80143a2:	429d      	cmp	r5, r3
 80143a4:	bf08      	it	eq
 80143a6:	68f5      	ldreq	r5, [r6, #12]
 80143a8:	e7da      	b.n	8014360 <_vfiprintf_r+0x20>
 80143aa:	89ab      	ldrh	r3, [r5, #12]
 80143ac:	0598      	lsls	r0, r3, #22
 80143ae:	d4ed      	bmi.n	801438c <_vfiprintf_r+0x4c>
 80143b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80143b2:	f7ff ff89 	bl	80142c8 <__retarget_lock_release_recursive>
 80143b6:	e7e9      	b.n	801438c <_vfiprintf_r+0x4c>
 80143b8:	2300      	movs	r3, #0
 80143ba:	9309      	str	r3, [sp, #36]	; 0x24
 80143bc:	2320      	movs	r3, #32
 80143be:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80143c2:	f8cd 800c 	str.w	r8, [sp, #12]
 80143c6:	2330      	movs	r3, #48	; 0x30
 80143c8:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801458c <_vfiprintf_r+0x24c>
 80143cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80143d0:	f04f 0901 	mov.w	r9, #1
 80143d4:	4623      	mov	r3, r4
 80143d6:	469a      	mov	sl, r3
 80143d8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80143dc:	b10a      	cbz	r2, 80143e2 <_vfiprintf_r+0xa2>
 80143de:	2a25      	cmp	r2, #37	; 0x25
 80143e0:	d1f9      	bne.n	80143d6 <_vfiprintf_r+0x96>
 80143e2:	ebba 0b04 	subs.w	fp, sl, r4
 80143e6:	d00b      	beq.n	8014400 <_vfiprintf_r+0xc0>
 80143e8:	465b      	mov	r3, fp
 80143ea:	4622      	mov	r2, r4
 80143ec:	4629      	mov	r1, r5
 80143ee:	4630      	mov	r0, r6
 80143f0:	f7ff ff94 	bl	801431c <__sfputs_r>
 80143f4:	3001      	adds	r0, #1
 80143f6:	f000 80aa 	beq.w	801454e <_vfiprintf_r+0x20e>
 80143fa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80143fc:	445a      	add	r2, fp
 80143fe:	9209      	str	r2, [sp, #36]	; 0x24
 8014400:	f89a 3000 	ldrb.w	r3, [sl]
 8014404:	2b00      	cmp	r3, #0
 8014406:	f000 80a2 	beq.w	801454e <_vfiprintf_r+0x20e>
 801440a:	2300      	movs	r3, #0
 801440c:	f04f 32ff 	mov.w	r2, #4294967295
 8014410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014414:	f10a 0a01 	add.w	sl, sl, #1
 8014418:	9304      	str	r3, [sp, #16]
 801441a:	9307      	str	r3, [sp, #28]
 801441c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014420:	931a      	str	r3, [sp, #104]	; 0x68
 8014422:	4654      	mov	r4, sl
 8014424:	2205      	movs	r2, #5
 8014426:	f814 1b01 	ldrb.w	r1, [r4], #1
 801442a:	4858      	ldr	r0, [pc, #352]	; (801458c <_vfiprintf_r+0x24c>)
 801442c:	f7eb fef8 	bl	8000220 <memchr>
 8014430:	9a04      	ldr	r2, [sp, #16]
 8014432:	b9d8      	cbnz	r0, 801446c <_vfiprintf_r+0x12c>
 8014434:	06d1      	lsls	r1, r2, #27
 8014436:	bf44      	itt	mi
 8014438:	2320      	movmi	r3, #32
 801443a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801443e:	0713      	lsls	r3, r2, #28
 8014440:	bf44      	itt	mi
 8014442:	232b      	movmi	r3, #43	; 0x2b
 8014444:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014448:	f89a 3000 	ldrb.w	r3, [sl]
 801444c:	2b2a      	cmp	r3, #42	; 0x2a
 801444e:	d015      	beq.n	801447c <_vfiprintf_r+0x13c>
 8014450:	9a07      	ldr	r2, [sp, #28]
 8014452:	4654      	mov	r4, sl
 8014454:	2000      	movs	r0, #0
 8014456:	f04f 0c0a 	mov.w	ip, #10
 801445a:	4621      	mov	r1, r4
 801445c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014460:	3b30      	subs	r3, #48	; 0x30
 8014462:	2b09      	cmp	r3, #9
 8014464:	d94e      	bls.n	8014504 <_vfiprintf_r+0x1c4>
 8014466:	b1b0      	cbz	r0, 8014496 <_vfiprintf_r+0x156>
 8014468:	9207      	str	r2, [sp, #28]
 801446a:	e014      	b.n	8014496 <_vfiprintf_r+0x156>
 801446c:	eba0 0308 	sub.w	r3, r0, r8
 8014470:	fa09 f303 	lsl.w	r3, r9, r3
 8014474:	4313      	orrs	r3, r2
 8014476:	9304      	str	r3, [sp, #16]
 8014478:	46a2      	mov	sl, r4
 801447a:	e7d2      	b.n	8014422 <_vfiprintf_r+0xe2>
 801447c:	9b03      	ldr	r3, [sp, #12]
 801447e:	1d19      	adds	r1, r3, #4
 8014480:	681b      	ldr	r3, [r3, #0]
 8014482:	9103      	str	r1, [sp, #12]
 8014484:	2b00      	cmp	r3, #0
 8014486:	bfbb      	ittet	lt
 8014488:	425b      	neglt	r3, r3
 801448a:	f042 0202 	orrlt.w	r2, r2, #2
 801448e:	9307      	strge	r3, [sp, #28]
 8014490:	9307      	strlt	r3, [sp, #28]
 8014492:	bfb8      	it	lt
 8014494:	9204      	strlt	r2, [sp, #16]
 8014496:	7823      	ldrb	r3, [r4, #0]
 8014498:	2b2e      	cmp	r3, #46	; 0x2e
 801449a:	d10c      	bne.n	80144b6 <_vfiprintf_r+0x176>
 801449c:	7863      	ldrb	r3, [r4, #1]
 801449e:	2b2a      	cmp	r3, #42	; 0x2a
 80144a0:	d135      	bne.n	801450e <_vfiprintf_r+0x1ce>
 80144a2:	9b03      	ldr	r3, [sp, #12]
 80144a4:	1d1a      	adds	r2, r3, #4
 80144a6:	681b      	ldr	r3, [r3, #0]
 80144a8:	9203      	str	r2, [sp, #12]
 80144aa:	2b00      	cmp	r3, #0
 80144ac:	bfb8      	it	lt
 80144ae:	f04f 33ff 	movlt.w	r3, #4294967295
 80144b2:	3402      	adds	r4, #2
 80144b4:	9305      	str	r3, [sp, #20]
 80144b6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801459c <_vfiprintf_r+0x25c>
 80144ba:	7821      	ldrb	r1, [r4, #0]
 80144bc:	2203      	movs	r2, #3
 80144be:	4650      	mov	r0, sl
 80144c0:	f7eb feae 	bl	8000220 <memchr>
 80144c4:	b140      	cbz	r0, 80144d8 <_vfiprintf_r+0x198>
 80144c6:	2340      	movs	r3, #64	; 0x40
 80144c8:	eba0 000a 	sub.w	r0, r0, sl
 80144cc:	fa03 f000 	lsl.w	r0, r3, r0
 80144d0:	9b04      	ldr	r3, [sp, #16]
 80144d2:	4303      	orrs	r3, r0
 80144d4:	3401      	adds	r4, #1
 80144d6:	9304      	str	r3, [sp, #16]
 80144d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80144dc:	482c      	ldr	r0, [pc, #176]	; (8014590 <_vfiprintf_r+0x250>)
 80144de:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80144e2:	2206      	movs	r2, #6
 80144e4:	f7eb fe9c 	bl	8000220 <memchr>
 80144e8:	2800      	cmp	r0, #0
 80144ea:	d03f      	beq.n	801456c <_vfiprintf_r+0x22c>
 80144ec:	4b29      	ldr	r3, [pc, #164]	; (8014594 <_vfiprintf_r+0x254>)
 80144ee:	bb1b      	cbnz	r3, 8014538 <_vfiprintf_r+0x1f8>
 80144f0:	9b03      	ldr	r3, [sp, #12]
 80144f2:	3307      	adds	r3, #7
 80144f4:	f023 0307 	bic.w	r3, r3, #7
 80144f8:	3308      	adds	r3, #8
 80144fa:	9303      	str	r3, [sp, #12]
 80144fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80144fe:	443b      	add	r3, r7
 8014500:	9309      	str	r3, [sp, #36]	; 0x24
 8014502:	e767      	b.n	80143d4 <_vfiprintf_r+0x94>
 8014504:	fb0c 3202 	mla	r2, ip, r2, r3
 8014508:	460c      	mov	r4, r1
 801450a:	2001      	movs	r0, #1
 801450c:	e7a5      	b.n	801445a <_vfiprintf_r+0x11a>
 801450e:	2300      	movs	r3, #0
 8014510:	3401      	adds	r4, #1
 8014512:	9305      	str	r3, [sp, #20]
 8014514:	4619      	mov	r1, r3
 8014516:	f04f 0c0a 	mov.w	ip, #10
 801451a:	4620      	mov	r0, r4
 801451c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014520:	3a30      	subs	r2, #48	; 0x30
 8014522:	2a09      	cmp	r2, #9
 8014524:	d903      	bls.n	801452e <_vfiprintf_r+0x1ee>
 8014526:	2b00      	cmp	r3, #0
 8014528:	d0c5      	beq.n	80144b6 <_vfiprintf_r+0x176>
 801452a:	9105      	str	r1, [sp, #20]
 801452c:	e7c3      	b.n	80144b6 <_vfiprintf_r+0x176>
 801452e:	fb0c 2101 	mla	r1, ip, r1, r2
 8014532:	4604      	mov	r4, r0
 8014534:	2301      	movs	r3, #1
 8014536:	e7f0      	b.n	801451a <_vfiprintf_r+0x1da>
 8014538:	ab03      	add	r3, sp, #12
 801453a:	9300      	str	r3, [sp, #0]
 801453c:	462a      	mov	r2, r5
 801453e:	4b16      	ldr	r3, [pc, #88]	; (8014598 <_vfiprintf_r+0x258>)
 8014540:	a904      	add	r1, sp, #16
 8014542:	4630      	mov	r0, r6
 8014544:	f7fe f882 	bl	801264c <_printf_float>
 8014548:	4607      	mov	r7, r0
 801454a:	1c78      	adds	r0, r7, #1
 801454c:	d1d6      	bne.n	80144fc <_vfiprintf_r+0x1bc>
 801454e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014550:	07d9      	lsls	r1, r3, #31
 8014552:	d405      	bmi.n	8014560 <_vfiprintf_r+0x220>
 8014554:	89ab      	ldrh	r3, [r5, #12]
 8014556:	059a      	lsls	r2, r3, #22
 8014558:	d402      	bmi.n	8014560 <_vfiprintf_r+0x220>
 801455a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801455c:	f7ff feb4 	bl	80142c8 <__retarget_lock_release_recursive>
 8014560:	89ab      	ldrh	r3, [r5, #12]
 8014562:	065b      	lsls	r3, r3, #25
 8014564:	f53f af12 	bmi.w	801438c <_vfiprintf_r+0x4c>
 8014568:	9809      	ldr	r0, [sp, #36]	; 0x24
 801456a:	e711      	b.n	8014390 <_vfiprintf_r+0x50>
 801456c:	ab03      	add	r3, sp, #12
 801456e:	9300      	str	r3, [sp, #0]
 8014570:	462a      	mov	r2, r5
 8014572:	4b09      	ldr	r3, [pc, #36]	; (8014598 <_vfiprintf_r+0x258>)
 8014574:	a904      	add	r1, sp, #16
 8014576:	4630      	mov	r0, r6
 8014578:	f7fe fb0c 	bl	8012b94 <_printf_i>
 801457c:	e7e4      	b.n	8014548 <_vfiprintf_r+0x208>
 801457e:	bf00      	nop
 8014580:	0801519c 	.word	0x0801519c
 8014584:	080151bc 	.word	0x080151bc
 8014588:	0801517c 	.word	0x0801517c
 801458c:	0801506a 	.word	0x0801506a
 8014590:	08015074 	.word	0x08015074
 8014594:	0801264d 	.word	0x0801264d
 8014598:	0801431d 	.word	0x0801431d
 801459c:	08015070 	.word	0x08015070

080145a0 <__swbuf_r>:
 80145a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145a2:	460e      	mov	r6, r1
 80145a4:	4614      	mov	r4, r2
 80145a6:	4605      	mov	r5, r0
 80145a8:	b118      	cbz	r0, 80145b2 <__swbuf_r+0x12>
 80145aa:	6983      	ldr	r3, [r0, #24]
 80145ac:	b90b      	cbnz	r3, 80145b2 <__swbuf_r+0x12>
 80145ae:	f000 f9e7 	bl	8014980 <__sinit>
 80145b2:	4b21      	ldr	r3, [pc, #132]	; (8014638 <__swbuf_r+0x98>)
 80145b4:	429c      	cmp	r4, r3
 80145b6:	d12b      	bne.n	8014610 <__swbuf_r+0x70>
 80145b8:	686c      	ldr	r4, [r5, #4]
 80145ba:	69a3      	ldr	r3, [r4, #24]
 80145bc:	60a3      	str	r3, [r4, #8]
 80145be:	89a3      	ldrh	r3, [r4, #12]
 80145c0:	071a      	lsls	r2, r3, #28
 80145c2:	d52f      	bpl.n	8014624 <__swbuf_r+0x84>
 80145c4:	6923      	ldr	r3, [r4, #16]
 80145c6:	b36b      	cbz	r3, 8014624 <__swbuf_r+0x84>
 80145c8:	6923      	ldr	r3, [r4, #16]
 80145ca:	6820      	ldr	r0, [r4, #0]
 80145cc:	1ac0      	subs	r0, r0, r3
 80145ce:	6963      	ldr	r3, [r4, #20]
 80145d0:	b2f6      	uxtb	r6, r6
 80145d2:	4283      	cmp	r3, r0
 80145d4:	4637      	mov	r7, r6
 80145d6:	dc04      	bgt.n	80145e2 <__swbuf_r+0x42>
 80145d8:	4621      	mov	r1, r4
 80145da:	4628      	mov	r0, r5
 80145dc:	f000 f93c 	bl	8014858 <_fflush_r>
 80145e0:	bb30      	cbnz	r0, 8014630 <__swbuf_r+0x90>
 80145e2:	68a3      	ldr	r3, [r4, #8]
 80145e4:	3b01      	subs	r3, #1
 80145e6:	60a3      	str	r3, [r4, #8]
 80145e8:	6823      	ldr	r3, [r4, #0]
 80145ea:	1c5a      	adds	r2, r3, #1
 80145ec:	6022      	str	r2, [r4, #0]
 80145ee:	701e      	strb	r6, [r3, #0]
 80145f0:	6963      	ldr	r3, [r4, #20]
 80145f2:	3001      	adds	r0, #1
 80145f4:	4283      	cmp	r3, r0
 80145f6:	d004      	beq.n	8014602 <__swbuf_r+0x62>
 80145f8:	89a3      	ldrh	r3, [r4, #12]
 80145fa:	07db      	lsls	r3, r3, #31
 80145fc:	d506      	bpl.n	801460c <__swbuf_r+0x6c>
 80145fe:	2e0a      	cmp	r6, #10
 8014600:	d104      	bne.n	801460c <__swbuf_r+0x6c>
 8014602:	4621      	mov	r1, r4
 8014604:	4628      	mov	r0, r5
 8014606:	f000 f927 	bl	8014858 <_fflush_r>
 801460a:	b988      	cbnz	r0, 8014630 <__swbuf_r+0x90>
 801460c:	4638      	mov	r0, r7
 801460e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014610:	4b0a      	ldr	r3, [pc, #40]	; (801463c <__swbuf_r+0x9c>)
 8014612:	429c      	cmp	r4, r3
 8014614:	d101      	bne.n	801461a <__swbuf_r+0x7a>
 8014616:	68ac      	ldr	r4, [r5, #8]
 8014618:	e7cf      	b.n	80145ba <__swbuf_r+0x1a>
 801461a:	4b09      	ldr	r3, [pc, #36]	; (8014640 <__swbuf_r+0xa0>)
 801461c:	429c      	cmp	r4, r3
 801461e:	bf08      	it	eq
 8014620:	68ec      	ldreq	r4, [r5, #12]
 8014622:	e7ca      	b.n	80145ba <__swbuf_r+0x1a>
 8014624:	4621      	mov	r1, r4
 8014626:	4628      	mov	r0, r5
 8014628:	f000 f81a 	bl	8014660 <__swsetup_r>
 801462c:	2800      	cmp	r0, #0
 801462e:	d0cb      	beq.n	80145c8 <__swbuf_r+0x28>
 8014630:	f04f 37ff 	mov.w	r7, #4294967295
 8014634:	e7ea      	b.n	801460c <__swbuf_r+0x6c>
 8014636:	bf00      	nop
 8014638:	0801519c 	.word	0x0801519c
 801463c:	080151bc 	.word	0x080151bc
 8014640:	0801517c 	.word	0x0801517c

08014644 <__ascii_wctomb>:
 8014644:	b149      	cbz	r1, 801465a <__ascii_wctomb+0x16>
 8014646:	2aff      	cmp	r2, #255	; 0xff
 8014648:	bf85      	ittet	hi
 801464a:	238a      	movhi	r3, #138	; 0x8a
 801464c:	6003      	strhi	r3, [r0, #0]
 801464e:	700a      	strbls	r2, [r1, #0]
 8014650:	f04f 30ff 	movhi.w	r0, #4294967295
 8014654:	bf98      	it	ls
 8014656:	2001      	movls	r0, #1
 8014658:	4770      	bx	lr
 801465a:	4608      	mov	r0, r1
 801465c:	4770      	bx	lr
	...

08014660 <__swsetup_r>:
 8014660:	4b32      	ldr	r3, [pc, #200]	; (801472c <__swsetup_r+0xcc>)
 8014662:	b570      	push	{r4, r5, r6, lr}
 8014664:	681d      	ldr	r5, [r3, #0]
 8014666:	4606      	mov	r6, r0
 8014668:	460c      	mov	r4, r1
 801466a:	b125      	cbz	r5, 8014676 <__swsetup_r+0x16>
 801466c:	69ab      	ldr	r3, [r5, #24]
 801466e:	b913      	cbnz	r3, 8014676 <__swsetup_r+0x16>
 8014670:	4628      	mov	r0, r5
 8014672:	f000 f985 	bl	8014980 <__sinit>
 8014676:	4b2e      	ldr	r3, [pc, #184]	; (8014730 <__swsetup_r+0xd0>)
 8014678:	429c      	cmp	r4, r3
 801467a:	d10f      	bne.n	801469c <__swsetup_r+0x3c>
 801467c:	686c      	ldr	r4, [r5, #4]
 801467e:	89a3      	ldrh	r3, [r4, #12]
 8014680:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014684:	0719      	lsls	r1, r3, #28
 8014686:	d42c      	bmi.n	80146e2 <__swsetup_r+0x82>
 8014688:	06dd      	lsls	r5, r3, #27
 801468a:	d411      	bmi.n	80146b0 <__swsetup_r+0x50>
 801468c:	2309      	movs	r3, #9
 801468e:	6033      	str	r3, [r6, #0]
 8014690:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014694:	81a3      	strh	r3, [r4, #12]
 8014696:	f04f 30ff 	mov.w	r0, #4294967295
 801469a:	e03e      	b.n	801471a <__swsetup_r+0xba>
 801469c:	4b25      	ldr	r3, [pc, #148]	; (8014734 <__swsetup_r+0xd4>)
 801469e:	429c      	cmp	r4, r3
 80146a0:	d101      	bne.n	80146a6 <__swsetup_r+0x46>
 80146a2:	68ac      	ldr	r4, [r5, #8]
 80146a4:	e7eb      	b.n	801467e <__swsetup_r+0x1e>
 80146a6:	4b24      	ldr	r3, [pc, #144]	; (8014738 <__swsetup_r+0xd8>)
 80146a8:	429c      	cmp	r4, r3
 80146aa:	bf08      	it	eq
 80146ac:	68ec      	ldreq	r4, [r5, #12]
 80146ae:	e7e6      	b.n	801467e <__swsetup_r+0x1e>
 80146b0:	0758      	lsls	r0, r3, #29
 80146b2:	d512      	bpl.n	80146da <__swsetup_r+0x7a>
 80146b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80146b6:	b141      	cbz	r1, 80146ca <__swsetup_r+0x6a>
 80146b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80146bc:	4299      	cmp	r1, r3
 80146be:	d002      	beq.n	80146c6 <__swsetup_r+0x66>
 80146c0:	4630      	mov	r0, r6
 80146c2:	f7fd fe43 	bl	801234c <_free_r>
 80146c6:	2300      	movs	r3, #0
 80146c8:	6363      	str	r3, [r4, #52]	; 0x34
 80146ca:	89a3      	ldrh	r3, [r4, #12]
 80146cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80146d0:	81a3      	strh	r3, [r4, #12]
 80146d2:	2300      	movs	r3, #0
 80146d4:	6063      	str	r3, [r4, #4]
 80146d6:	6923      	ldr	r3, [r4, #16]
 80146d8:	6023      	str	r3, [r4, #0]
 80146da:	89a3      	ldrh	r3, [r4, #12]
 80146dc:	f043 0308 	orr.w	r3, r3, #8
 80146e0:	81a3      	strh	r3, [r4, #12]
 80146e2:	6923      	ldr	r3, [r4, #16]
 80146e4:	b94b      	cbnz	r3, 80146fa <__swsetup_r+0x9a>
 80146e6:	89a3      	ldrh	r3, [r4, #12]
 80146e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80146ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146f0:	d003      	beq.n	80146fa <__swsetup_r+0x9a>
 80146f2:	4621      	mov	r1, r4
 80146f4:	4630      	mov	r0, r6
 80146f6:	f000 fa05 	bl	8014b04 <__smakebuf_r>
 80146fa:	89a0      	ldrh	r0, [r4, #12]
 80146fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014700:	f010 0301 	ands.w	r3, r0, #1
 8014704:	d00a      	beq.n	801471c <__swsetup_r+0xbc>
 8014706:	2300      	movs	r3, #0
 8014708:	60a3      	str	r3, [r4, #8]
 801470a:	6963      	ldr	r3, [r4, #20]
 801470c:	425b      	negs	r3, r3
 801470e:	61a3      	str	r3, [r4, #24]
 8014710:	6923      	ldr	r3, [r4, #16]
 8014712:	b943      	cbnz	r3, 8014726 <__swsetup_r+0xc6>
 8014714:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014718:	d1ba      	bne.n	8014690 <__swsetup_r+0x30>
 801471a:	bd70      	pop	{r4, r5, r6, pc}
 801471c:	0781      	lsls	r1, r0, #30
 801471e:	bf58      	it	pl
 8014720:	6963      	ldrpl	r3, [r4, #20]
 8014722:	60a3      	str	r3, [r4, #8]
 8014724:	e7f4      	b.n	8014710 <__swsetup_r+0xb0>
 8014726:	2000      	movs	r0, #0
 8014728:	e7f7      	b.n	801471a <__swsetup_r+0xba>
 801472a:	bf00      	nop
 801472c:	2000012c 	.word	0x2000012c
 8014730:	0801519c 	.word	0x0801519c
 8014734:	080151bc 	.word	0x080151bc
 8014738:	0801517c 	.word	0x0801517c

0801473c <abort>:
 801473c:	b508      	push	{r3, lr}
 801473e:	2006      	movs	r0, #6
 8014740:	f000 fa48 	bl	8014bd4 <raise>
 8014744:	2001      	movs	r0, #1
 8014746:	f7ed fb2d 	bl	8001da4 <_exit>
	...

0801474c <__sflush_r>:
 801474c:	898a      	ldrh	r2, [r1, #12]
 801474e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014752:	4605      	mov	r5, r0
 8014754:	0710      	lsls	r0, r2, #28
 8014756:	460c      	mov	r4, r1
 8014758:	d458      	bmi.n	801480c <__sflush_r+0xc0>
 801475a:	684b      	ldr	r3, [r1, #4]
 801475c:	2b00      	cmp	r3, #0
 801475e:	dc05      	bgt.n	801476c <__sflush_r+0x20>
 8014760:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014762:	2b00      	cmp	r3, #0
 8014764:	dc02      	bgt.n	801476c <__sflush_r+0x20>
 8014766:	2000      	movs	r0, #0
 8014768:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801476c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801476e:	2e00      	cmp	r6, #0
 8014770:	d0f9      	beq.n	8014766 <__sflush_r+0x1a>
 8014772:	2300      	movs	r3, #0
 8014774:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014778:	682f      	ldr	r7, [r5, #0]
 801477a:	602b      	str	r3, [r5, #0]
 801477c:	d032      	beq.n	80147e4 <__sflush_r+0x98>
 801477e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014780:	89a3      	ldrh	r3, [r4, #12]
 8014782:	075a      	lsls	r2, r3, #29
 8014784:	d505      	bpl.n	8014792 <__sflush_r+0x46>
 8014786:	6863      	ldr	r3, [r4, #4]
 8014788:	1ac0      	subs	r0, r0, r3
 801478a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801478c:	b10b      	cbz	r3, 8014792 <__sflush_r+0x46>
 801478e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014790:	1ac0      	subs	r0, r0, r3
 8014792:	2300      	movs	r3, #0
 8014794:	4602      	mov	r2, r0
 8014796:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014798:	6a21      	ldr	r1, [r4, #32]
 801479a:	4628      	mov	r0, r5
 801479c:	47b0      	blx	r6
 801479e:	1c43      	adds	r3, r0, #1
 80147a0:	89a3      	ldrh	r3, [r4, #12]
 80147a2:	d106      	bne.n	80147b2 <__sflush_r+0x66>
 80147a4:	6829      	ldr	r1, [r5, #0]
 80147a6:	291d      	cmp	r1, #29
 80147a8:	d82c      	bhi.n	8014804 <__sflush_r+0xb8>
 80147aa:	4a2a      	ldr	r2, [pc, #168]	; (8014854 <__sflush_r+0x108>)
 80147ac:	40ca      	lsrs	r2, r1
 80147ae:	07d6      	lsls	r6, r2, #31
 80147b0:	d528      	bpl.n	8014804 <__sflush_r+0xb8>
 80147b2:	2200      	movs	r2, #0
 80147b4:	6062      	str	r2, [r4, #4]
 80147b6:	04d9      	lsls	r1, r3, #19
 80147b8:	6922      	ldr	r2, [r4, #16]
 80147ba:	6022      	str	r2, [r4, #0]
 80147bc:	d504      	bpl.n	80147c8 <__sflush_r+0x7c>
 80147be:	1c42      	adds	r2, r0, #1
 80147c0:	d101      	bne.n	80147c6 <__sflush_r+0x7a>
 80147c2:	682b      	ldr	r3, [r5, #0]
 80147c4:	b903      	cbnz	r3, 80147c8 <__sflush_r+0x7c>
 80147c6:	6560      	str	r0, [r4, #84]	; 0x54
 80147c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147ca:	602f      	str	r7, [r5, #0]
 80147cc:	2900      	cmp	r1, #0
 80147ce:	d0ca      	beq.n	8014766 <__sflush_r+0x1a>
 80147d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147d4:	4299      	cmp	r1, r3
 80147d6:	d002      	beq.n	80147de <__sflush_r+0x92>
 80147d8:	4628      	mov	r0, r5
 80147da:	f7fd fdb7 	bl	801234c <_free_r>
 80147de:	2000      	movs	r0, #0
 80147e0:	6360      	str	r0, [r4, #52]	; 0x34
 80147e2:	e7c1      	b.n	8014768 <__sflush_r+0x1c>
 80147e4:	6a21      	ldr	r1, [r4, #32]
 80147e6:	2301      	movs	r3, #1
 80147e8:	4628      	mov	r0, r5
 80147ea:	47b0      	blx	r6
 80147ec:	1c41      	adds	r1, r0, #1
 80147ee:	d1c7      	bne.n	8014780 <__sflush_r+0x34>
 80147f0:	682b      	ldr	r3, [r5, #0]
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d0c4      	beq.n	8014780 <__sflush_r+0x34>
 80147f6:	2b1d      	cmp	r3, #29
 80147f8:	d001      	beq.n	80147fe <__sflush_r+0xb2>
 80147fa:	2b16      	cmp	r3, #22
 80147fc:	d101      	bne.n	8014802 <__sflush_r+0xb6>
 80147fe:	602f      	str	r7, [r5, #0]
 8014800:	e7b1      	b.n	8014766 <__sflush_r+0x1a>
 8014802:	89a3      	ldrh	r3, [r4, #12]
 8014804:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014808:	81a3      	strh	r3, [r4, #12]
 801480a:	e7ad      	b.n	8014768 <__sflush_r+0x1c>
 801480c:	690f      	ldr	r7, [r1, #16]
 801480e:	2f00      	cmp	r7, #0
 8014810:	d0a9      	beq.n	8014766 <__sflush_r+0x1a>
 8014812:	0793      	lsls	r3, r2, #30
 8014814:	680e      	ldr	r6, [r1, #0]
 8014816:	bf08      	it	eq
 8014818:	694b      	ldreq	r3, [r1, #20]
 801481a:	600f      	str	r7, [r1, #0]
 801481c:	bf18      	it	ne
 801481e:	2300      	movne	r3, #0
 8014820:	eba6 0807 	sub.w	r8, r6, r7
 8014824:	608b      	str	r3, [r1, #8]
 8014826:	f1b8 0f00 	cmp.w	r8, #0
 801482a:	dd9c      	ble.n	8014766 <__sflush_r+0x1a>
 801482c:	6a21      	ldr	r1, [r4, #32]
 801482e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014830:	4643      	mov	r3, r8
 8014832:	463a      	mov	r2, r7
 8014834:	4628      	mov	r0, r5
 8014836:	47b0      	blx	r6
 8014838:	2800      	cmp	r0, #0
 801483a:	dc06      	bgt.n	801484a <__sflush_r+0xfe>
 801483c:	89a3      	ldrh	r3, [r4, #12]
 801483e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014842:	81a3      	strh	r3, [r4, #12]
 8014844:	f04f 30ff 	mov.w	r0, #4294967295
 8014848:	e78e      	b.n	8014768 <__sflush_r+0x1c>
 801484a:	4407      	add	r7, r0
 801484c:	eba8 0800 	sub.w	r8, r8, r0
 8014850:	e7e9      	b.n	8014826 <__sflush_r+0xda>
 8014852:	bf00      	nop
 8014854:	20400001 	.word	0x20400001

08014858 <_fflush_r>:
 8014858:	b538      	push	{r3, r4, r5, lr}
 801485a:	690b      	ldr	r3, [r1, #16]
 801485c:	4605      	mov	r5, r0
 801485e:	460c      	mov	r4, r1
 8014860:	b913      	cbnz	r3, 8014868 <_fflush_r+0x10>
 8014862:	2500      	movs	r5, #0
 8014864:	4628      	mov	r0, r5
 8014866:	bd38      	pop	{r3, r4, r5, pc}
 8014868:	b118      	cbz	r0, 8014872 <_fflush_r+0x1a>
 801486a:	6983      	ldr	r3, [r0, #24]
 801486c:	b90b      	cbnz	r3, 8014872 <_fflush_r+0x1a>
 801486e:	f000 f887 	bl	8014980 <__sinit>
 8014872:	4b14      	ldr	r3, [pc, #80]	; (80148c4 <_fflush_r+0x6c>)
 8014874:	429c      	cmp	r4, r3
 8014876:	d11b      	bne.n	80148b0 <_fflush_r+0x58>
 8014878:	686c      	ldr	r4, [r5, #4]
 801487a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801487e:	2b00      	cmp	r3, #0
 8014880:	d0ef      	beq.n	8014862 <_fflush_r+0xa>
 8014882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8014884:	07d0      	lsls	r0, r2, #31
 8014886:	d404      	bmi.n	8014892 <_fflush_r+0x3a>
 8014888:	0599      	lsls	r1, r3, #22
 801488a:	d402      	bmi.n	8014892 <_fflush_r+0x3a>
 801488c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801488e:	f7ff fd1a 	bl	80142c6 <__retarget_lock_acquire_recursive>
 8014892:	4628      	mov	r0, r5
 8014894:	4621      	mov	r1, r4
 8014896:	f7ff ff59 	bl	801474c <__sflush_r>
 801489a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801489c:	07da      	lsls	r2, r3, #31
 801489e:	4605      	mov	r5, r0
 80148a0:	d4e0      	bmi.n	8014864 <_fflush_r+0xc>
 80148a2:	89a3      	ldrh	r3, [r4, #12]
 80148a4:	059b      	lsls	r3, r3, #22
 80148a6:	d4dd      	bmi.n	8014864 <_fflush_r+0xc>
 80148a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80148aa:	f7ff fd0d 	bl	80142c8 <__retarget_lock_release_recursive>
 80148ae:	e7d9      	b.n	8014864 <_fflush_r+0xc>
 80148b0:	4b05      	ldr	r3, [pc, #20]	; (80148c8 <_fflush_r+0x70>)
 80148b2:	429c      	cmp	r4, r3
 80148b4:	d101      	bne.n	80148ba <_fflush_r+0x62>
 80148b6:	68ac      	ldr	r4, [r5, #8]
 80148b8:	e7df      	b.n	801487a <_fflush_r+0x22>
 80148ba:	4b04      	ldr	r3, [pc, #16]	; (80148cc <_fflush_r+0x74>)
 80148bc:	429c      	cmp	r4, r3
 80148be:	bf08      	it	eq
 80148c0:	68ec      	ldreq	r4, [r5, #12]
 80148c2:	e7da      	b.n	801487a <_fflush_r+0x22>
 80148c4:	0801519c 	.word	0x0801519c
 80148c8:	080151bc 	.word	0x080151bc
 80148cc:	0801517c 	.word	0x0801517c

080148d0 <std>:
 80148d0:	2300      	movs	r3, #0
 80148d2:	b510      	push	{r4, lr}
 80148d4:	4604      	mov	r4, r0
 80148d6:	e9c0 3300 	strd	r3, r3, [r0]
 80148da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80148de:	6083      	str	r3, [r0, #8]
 80148e0:	8181      	strh	r1, [r0, #12]
 80148e2:	6643      	str	r3, [r0, #100]	; 0x64
 80148e4:	81c2      	strh	r2, [r0, #14]
 80148e6:	6183      	str	r3, [r0, #24]
 80148e8:	4619      	mov	r1, r3
 80148ea:	2208      	movs	r2, #8
 80148ec:	305c      	adds	r0, #92	; 0x5c
 80148ee:	f7fd fd25 	bl	801233c <memset>
 80148f2:	4b05      	ldr	r3, [pc, #20]	; (8014908 <std+0x38>)
 80148f4:	6263      	str	r3, [r4, #36]	; 0x24
 80148f6:	4b05      	ldr	r3, [pc, #20]	; (801490c <std+0x3c>)
 80148f8:	62a3      	str	r3, [r4, #40]	; 0x28
 80148fa:	4b05      	ldr	r3, [pc, #20]	; (8014910 <std+0x40>)
 80148fc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80148fe:	4b05      	ldr	r3, [pc, #20]	; (8014914 <std+0x44>)
 8014900:	6224      	str	r4, [r4, #32]
 8014902:	6323      	str	r3, [r4, #48]	; 0x30
 8014904:	bd10      	pop	{r4, pc}
 8014906:	bf00      	nop
 8014908:	08014c0d 	.word	0x08014c0d
 801490c:	08014c2f 	.word	0x08014c2f
 8014910:	08014c67 	.word	0x08014c67
 8014914:	08014c8b 	.word	0x08014c8b

08014918 <_cleanup_r>:
 8014918:	4901      	ldr	r1, [pc, #4]	; (8014920 <_cleanup_r+0x8>)
 801491a:	f000 b8af 	b.w	8014a7c <_fwalk_reent>
 801491e:	bf00      	nop
 8014920:	08014859 	.word	0x08014859

08014924 <__sfmoreglue>:
 8014924:	b570      	push	{r4, r5, r6, lr}
 8014926:	2268      	movs	r2, #104	; 0x68
 8014928:	1e4d      	subs	r5, r1, #1
 801492a:	4355      	muls	r5, r2
 801492c:	460e      	mov	r6, r1
 801492e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8014932:	f7fd fd77 	bl	8012424 <_malloc_r>
 8014936:	4604      	mov	r4, r0
 8014938:	b140      	cbz	r0, 801494c <__sfmoreglue+0x28>
 801493a:	2100      	movs	r1, #0
 801493c:	e9c0 1600 	strd	r1, r6, [r0]
 8014940:	300c      	adds	r0, #12
 8014942:	60a0      	str	r0, [r4, #8]
 8014944:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8014948:	f7fd fcf8 	bl	801233c <memset>
 801494c:	4620      	mov	r0, r4
 801494e:	bd70      	pop	{r4, r5, r6, pc}

08014950 <__sfp_lock_acquire>:
 8014950:	4801      	ldr	r0, [pc, #4]	; (8014958 <__sfp_lock_acquire+0x8>)
 8014952:	f7ff bcb8 	b.w	80142c6 <__retarget_lock_acquire_recursive>
 8014956:	bf00      	nop
 8014958:	20002779 	.word	0x20002779

0801495c <__sfp_lock_release>:
 801495c:	4801      	ldr	r0, [pc, #4]	; (8014964 <__sfp_lock_release+0x8>)
 801495e:	f7ff bcb3 	b.w	80142c8 <__retarget_lock_release_recursive>
 8014962:	bf00      	nop
 8014964:	20002779 	.word	0x20002779

08014968 <__sinit_lock_acquire>:
 8014968:	4801      	ldr	r0, [pc, #4]	; (8014970 <__sinit_lock_acquire+0x8>)
 801496a:	f7ff bcac 	b.w	80142c6 <__retarget_lock_acquire_recursive>
 801496e:	bf00      	nop
 8014970:	2000277a 	.word	0x2000277a

08014974 <__sinit_lock_release>:
 8014974:	4801      	ldr	r0, [pc, #4]	; (801497c <__sinit_lock_release+0x8>)
 8014976:	f7ff bca7 	b.w	80142c8 <__retarget_lock_release_recursive>
 801497a:	bf00      	nop
 801497c:	2000277a 	.word	0x2000277a

08014980 <__sinit>:
 8014980:	b510      	push	{r4, lr}
 8014982:	4604      	mov	r4, r0
 8014984:	f7ff fff0 	bl	8014968 <__sinit_lock_acquire>
 8014988:	69a3      	ldr	r3, [r4, #24]
 801498a:	b11b      	cbz	r3, 8014994 <__sinit+0x14>
 801498c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014990:	f7ff bff0 	b.w	8014974 <__sinit_lock_release>
 8014994:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8014998:	6523      	str	r3, [r4, #80]	; 0x50
 801499a:	4b13      	ldr	r3, [pc, #76]	; (80149e8 <__sinit+0x68>)
 801499c:	4a13      	ldr	r2, [pc, #76]	; (80149ec <__sinit+0x6c>)
 801499e:	681b      	ldr	r3, [r3, #0]
 80149a0:	62a2      	str	r2, [r4, #40]	; 0x28
 80149a2:	42a3      	cmp	r3, r4
 80149a4:	bf04      	itt	eq
 80149a6:	2301      	moveq	r3, #1
 80149a8:	61a3      	streq	r3, [r4, #24]
 80149aa:	4620      	mov	r0, r4
 80149ac:	f000 f820 	bl	80149f0 <__sfp>
 80149b0:	6060      	str	r0, [r4, #4]
 80149b2:	4620      	mov	r0, r4
 80149b4:	f000 f81c 	bl	80149f0 <__sfp>
 80149b8:	60a0      	str	r0, [r4, #8]
 80149ba:	4620      	mov	r0, r4
 80149bc:	f000 f818 	bl	80149f0 <__sfp>
 80149c0:	2200      	movs	r2, #0
 80149c2:	60e0      	str	r0, [r4, #12]
 80149c4:	2104      	movs	r1, #4
 80149c6:	6860      	ldr	r0, [r4, #4]
 80149c8:	f7ff ff82 	bl	80148d0 <std>
 80149cc:	68a0      	ldr	r0, [r4, #8]
 80149ce:	2201      	movs	r2, #1
 80149d0:	2109      	movs	r1, #9
 80149d2:	f7ff ff7d 	bl	80148d0 <std>
 80149d6:	68e0      	ldr	r0, [r4, #12]
 80149d8:	2202      	movs	r2, #2
 80149da:	2112      	movs	r1, #18
 80149dc:	f7ff ff78 	bl	80148d0 <std>
 80149e0:	2301      	movs	r3, #1
 80149e2:	61a3      	str	r3, [r4, #24]
 80149e4:	e7d2      	b.n	801498c <__sinit+0xc>
 80149e6:	bf00      	nop
 80149e8:	08014e00 	.word	0x08014e00
 80149ec:	08014919 	.word	0x08014919

080149f0 <__sfp>:
 80149f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149f2:	4607      	mov	r7, r0
 80149f4:	f7ff ffac 	bl	8014950 <__sfp_lock_acquire>
 80149f8:	4b1e      	ldr	r3, [pc, #120]	; (8014a74 <__sfp+0x84>)
 80149fa:	681e      	ldr	r6, [r3, #0]
 80149fc:	69b3      	ldr	r3, [r6, #24]
 80149fe:	b913      	cbnz	r3, 8014a06 <__sfp+0x16>
 8014a00:	4630      	mov	r0, r6
 8014a02:	f7ff ffbd 	bl	8014980 <__sinit>
 8014a06:	3648      	adds	r6, #72	; 0x48
 8014a08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8014a0c:	3b01      	subs	r3, #1
 8014a0e:	d503      	bpl.n	8014a18 <__sfp+0x28>
 8014a10:	6833      	ldr	r3, [r6, #0]
 8014a12:	b30b      	cbz	r3, 8014a58 <__sfp+0x68>
 8014a14:	6836      	ldr	r6, [r6, #0]
 8014a16:	e7f7      	b.n	8014a08 <__sfp+0x18>
 8014a18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8014a1c:	b9d5      	cbnz	r5, 8014a54 <__sfp+0x64>
 8014a1e:	4b16      	ldr	r3, [pc, #88]	; (8014a78 <__sfp+0x88>)
 8014a20:	60e3      	str	r3, [r4, #12]
 8014a22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8014a26:	6665      	str	r5, [r4, #100]	; 0x64
 8014a28:	f7ff fc4c 	bl	80142c4 <__retarget_lock_init_recursive>
 8014a2c:	f7ff ff96 	bl	801495c <__sfp_lock_release>
 8014a30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8014a34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8014a38:	6025      	str	r5, [r4, #0]
 8014a3a:	61a5      	str	r5, [r4, #24]
 8014a3c:	2208      	movs	r2, #8
 8014a3e:	4629      	mov	r1, r5
 8014a40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8014a44:	f7fd fc7a 	bl	801233c <memset>
 8014a48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8014a4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8014a50:	4620      	mov	r0, r4
 8014a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014a54:	3468      	adds	r4, #104	; 0x68
 8014a56:	e7d9      	b.n	8014a0c <__sfp+0x1c>
 8014a58:	2104      	movs	r1, #4
 8014a5a:	4638      	mov	r0, r7
 8014a5c:	f7ff ff62 	bl	8014924 <__sfmoreglue>
 8014a60:	4604      	mov	r4, r0
 8014a62:	6030      	str	r0, [r6, #0]
 8014a64:	2800      	cmp	r0, #0
 8014a66:	d1d5      	bne.n	8014a14 <__sfp+0x24>
 8014a68:	f7ff ff78 	bl	801495c <__sfp_lock_release>
 8014a6c:	230c      	movs	r3, #12
 8014a6e:	603b      	str	r3, [r7, #0]
 8014a70:	e7ee      	b.n	8014a50 <__sfp+0x60>
 8014a72:	bf00      	nop
 8014a74:	08014e00 	.word	0x08014e00
 8014a78:	ffff0001 	.word	0xffff0001

08014a7c <_fwalk_reent>:
 8014a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014a80:	4606      	mov	r6, r0
 8014a82:	4688      	mov	r8, r1
 8014a84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8014a88:	2700      	movs	r7, #0
 8014a8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8014a8e:	f1b9 0901 	subs.w	r9, r9, #1
 8014a92:	d505      	bpl.n	8014aa0 <_fwalk_reent+0x24>
 8014a94:	6824      	ldr	r4, [r4, #0]
 8014a96:	2c00      	cmp	r4, #0
 8014a98:	d1f7      	bne.n	8014a8a <_fwalk_reent+0xe>
 8014a9a:	4638      	mov	r0, r7
 8014a9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014aa0:	89ab      	ldrh	r3, [r5, #12]
 8014aa2:	2b01      	cmp	r3, #1
 8014aa4:	d907      	bls.n	8014ab6 <_fwalk_reent+0x3a>
 8014aa6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014aaa:	3301      	adds	r3, #1
 8014aac:	d003      	beq.n	8014ab6 <_fwalk_reent+0x3a>
 8014aae:	4629      	mov	r1, r5
 8014ab0:	4630      	mov	r0, r6
 8014ab2:	47c0      	blx	r8
 8014ab4:	4307      	orrs	r7, r0
 8014ab6:	3568      	adds	r5, #104	; 0x68
 8014ab8:	e7e9      	b.n	8014a8e <_fwalk_reent+0x12>

08014aba <__swhatbuf_r>:
 8014aba:	b570      	push	{r4, r5, r6, lr}
 8014abc:	460e      	mov	r6, r1
 8014abe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ac2:	2900      	cmp	r1, #0
 8014ac4:	b096      	sub	sp, #88	; 0x58
 8014ac6:	4614      	mov	r4, r2
 8014ac8:	461d      	mov	r5, r3
 8014aca:	da08      	bge.n	8014ade <__swhatbuf_r+0x24>
 8014acc:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8014ad0:	2200      	movs	r2, #0
 8014ad2:	602a      	str	r2, [r5, #0]
 8014ad4:	061a      	lsls	r2, r3, #24
 8014ad6:	d410      	bmi.n	8014afa <__swhatbuf_r+0x40>
 8014ad8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014adc:	e00e      	b.n	8014afc <__swhatbuf_r+0x42>
 8014ade:	466a      	mov	r2, sp
 8014ae0:	f000 f8fa 	bl	8014cd8 <_fstat_r>
 8014ae4:	2800      	cmp	r0, #0
 8014ae6:	dbf1      	blt.n	8014acc <__swhatbuf_r+0x12>
 8014ae8:	9a01      	ldr	r2, [sp, #4]
 8014aea:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8014aee:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014af2:	425a      	negs	r2, r3
 8014af4:	415a      	adcs	r2, r3
 8014af6:	602a      	str	r2, [r5, #0]
 8014af8:	e7ee      	b.n	8014ad8 <__swhatbuf_r+0x1e>
 8014afa:	2340      	movs	r3, #64	; 0x40
 8014afc:	2000      	movs	r0, #0
 8014afe:	6023      	str	r3, [r4, #0]
 8014b00:	b016      	add	sp, #88	; 0x58
 8014b02:	bd70      	pop	{r4, r5, r6, pc}

08014b04 <__smakebuf_r>:
 8014b04:	898b      	ldrh	r3, [r1, #12]
 8014b06:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014b08:	079d      	lsls	r5, r3, #30
 8014b0a:	4606      	mov	r6, r0
 8014b0c:	460c      	mov	r4, r1
 8014b0e:	d507      	bpl.n	8014b20 <__smakebuf_r+0x1c>
 8014b10:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014b14:	6023      	str	r3, [r4, #0]
 8014b16:	6123      	str	r3, [r4, #16]
 8014b18:	2301      	movs	r3, #1
 8014b1a:	6163      	str	r3, [r4, #20]
 8014b1c:	b002      	add	sp, #8
 8014b1e:	bd70      	pop	{r4, r5, r6, pc}
 8014b20:	ab01      	add	r3, sp, #4
 8014b22:	466a      	mov	r2, sp
 8014b24:	f7ff ffc9 	bl	8014aba <__swhatbuf_r>
 8014b28:	9900      	ldr	r1, [sp, #0]
 8014b2a:	4605      	mov	r5, r0
 8014b2c:	4630      	mov	r0, r6
 8014b2e:	f7fd fc79 	bl	8012424 <_malloc_r>
 8014b32:	b948      	cbnz	r0, 8014b48 <__smakebuf_r+0x44>
 8014b34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014b38:	059a      	lsls	r2, r3, #22
 8014b3a:	d4ef      	bmi.n	8014b1c <__smakebuf_r+0x18>
 8014b3c:	f023 0303 	bic.w	r3, r3, #3
 8014b40:	f043 0302 	orr.w	r3, r3, #2
 8014b44:	81a3      	strh	r3, [r4, #12]
 8014b46:	e7e3      	b.n	8014b10 <__smakebuf_r+0xc>
 8014b48:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <__smakebuf_r+0x7c>)
 8014b4a:	62b3      	str	r3, [r6, #40]	; 0x28
 8014b4c:	89a3      	ldrh	r3, [r4, #12]
 8014b4e:	6020      	str	r0, [r4, #0]
 8014b50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014b54:	81a3      	strh	r3, [r4, #12]
 8014b56:	9b00      	ldr	r3, [sp, #0]
 8014b58:	6163      	str	r3, [r4, #20]
 8014b5a:	9b01      	ldr	r3, [sp, #4]
 8014b5c:	6120      	str	r0, [r4, #16]
 8014b5e:	b15b      	cbz	r3, 8014b78 <__smakebuf_r+0x74>
 8014b60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014b64:	4630      	mov	r0, r6
 8014b66:	f000 f8c9 	bl	8014cfc <_isatty_r>
 8014b6a:	b128      	cbz	r0, 8014b78 <__smakebuf_r+0x74>
 8014b6c:	89a3      	ldrh	r3, [r4, #12]
 8014b6e:	f023 0303 	bic.w	r3, r3, #3
 8014b72:	f043 0301 	orr.w	r3, r3, #1
 8014b76:	81a3      	strh	r3, [r4, #12]
 8014b78:	89a0      	ldrh	r0, [r4, #12]
 8014b7a:	4305      	orrs	r5, r0
 8014b7c:	81a5      	strh	r5, [r4, #12]
 8014b7e:	e7cd      	b.n	8014b1c <__smakebuf_r+0x18>
 8014b80:	08014919 	.word	0x08014919

08014b84 <_raise_r>:
 8014b84:	291f      	cmp	r1, #31
 8014b86:	b538      	push	{r3, r4, r5, lr}
 8014b88:	4604      	mov	r4, r0
 8014b8a:	460d      	mov	r5, r1
 8014b8c:	d904      	bls.n	8014b98 <_raise_r+0x14>
 8014b8e:	2316      	movs	r3, #22
 8014b90:	6003      	str	r3, [r0, #0]
 8014b92:	f04f 30ff 	mov.w	r0, #4294967295
 8014b96:	bd38      	pop	{r3, r4, r5, pc}
 8014b98:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8014b9a:	b112      	cbz	r2, 8014ba2 <_raise_r+0x1e>
 8014b9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014ba0:	b94b      	cbnz	r3, 8014bb6 <_raise_r+0x32>
 8014ba2:	4620      	mov	r0, r4
 8014ba4:	f000 f830 	bl	8014c08 <_getpid_r>
 8014ba8:	462a      	mov	r2, r5
 8014baa:	4601      	mov	r1, r0
 8014bac:	4620      	mov	r0, r4
 8014bae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014bb2:	f000 b817 	b.w	8014be4 <_kill_r>
 8014bb6:	2b01      	cmp	r3, #1
 8014bb8:	d00a      	beq.n	8014bd0 <_raise_r+0x4c>
 8014bba:	1c59      	adds	r1, r3, #1
 8014bbc:	d103      	bne.n	8014bc6 <_raise_r+0x42>
 8014bbe:	2316      	movs	r3, #22
 8014bc0:	6003      	str	r3, [r0, #0]
 8014bc2:	2001      	movs	r0, #1
 8014bc4:	e7e7      	b.n	8014b96 <_raise_r+0x12>
 8014bc6:	2400      	movs	r4, #0
 8014bc8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014bcc:	4628      	mov	r0, r5
 8014bce:	4798      	blx	r3
 8014bd0:	2000      	movs	r0, #0
 8014bd2:	e7e0      	b.n	8014b96 <_raise_r+0x12>

08014bd4 <raise>:
 8014bd4:	4b02      	ldr	r3, [pc, #8]	; (8014be0 <raise+0xc>)
 8014bd6:	4601      	mov	r1, r0
 8014bd8:	6818      	ldr	r0, [r3, #0]
 8014bda:	f7ff bfd3 	b.w	8014b84 <_raise_r>
 8014bde:	bf00      	nop
 8014be0:	2000012c 	.word	0x2000012c

08014be4 <_kill_r>:
 8014be4:	b538      	push	{r3, r4, r5, lr}
 8014be6:	4d07      	ldr	r5, [pc, #28]	; (8014c04 <_kill_r+0x20>)
 8014be8:	2300      	movs	r3, #0
 8014bea:	4604      	mov	r4, r0
 8014bec:	4608      	mov	r0, r1
 8014bee:	4611      	mov	r1, r2
 8014bf0:	602b      	str	r3, [r5, #0]
 8014bf2:	f7ed f8c7 	bl	8001d84 <_kill>
 8014bf6:	1c43      	adds	r3, r0, #1
 8014bf8:	d102      	bne.n	8014c00 <_kill_r+0x1c>
 8014bfa:	682b      	ldr	r3, [r5, #0]
 8014bfc:	b103      	cbz	r3, 8014c00 <_kill_r+0x1c>
 8014bfe:	6023      	str	r3, [r4, #0]
 8014c00:	bd38      	pop	{r3, r4, r5, pc}
 8014c02:	bf00      	nop
 8014c04:	20002774 	.word	0x20002774

08014c08 <_getpid_r>:
 8014c08:	f7ed b8b4 	b.w	8001d74 <_getpid>

08014c0c <__sread>:
 8014c0c:	b510      	push	{r4, lr}
 8014c0e:	460c      	mov	r4, r1
 8014c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c14:	f000 f894 	bl	8014d40 <_read_r>
 8014c18:	2800      	cmp	r0, #0
 8014c1a:	bfab      	itete	ge
 8014c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8014c20:	181b      	addge	r3, r3, r0
 8014c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014c26:	bfac      	ite	ge
 8014c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8014c2a:	81a3      	strhlt	r3, [r4, #12]
 8014c2c:	bd10      	pop	{r4, pc}

08014c2e <__swrite>:
 8014c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014c32:	461f      	mov	r7, r3
 8014c34:	898b      	ldrh	r3, [r1, #12]
 8014c36:	05db      	lsls	r3, r3, #23
 8014c38:	4605      	mov	r5, r0
 8014c3a:	460c      	mov	r4, r1
 8014c3c:	4616      	mov	r6, r2
 8014c3e:	d505      	bpl.n	8014c4c <__swrite+0x1e>
 8014c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c44:	2302      	movs	r3, #2
 8014c46:	2200      	movs	r2, #0
 8014c48:	f000 f868 	bl	8014d1c <_lseek_r>
 8014c4c:	89a3      	ldrh	r3, [r4, #12]
 8014c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014c56:	81a3      	strh	r3, [r4, #12]
 8014c58:	4632      	mov	r2, r6
 8014c5a:	463b      	mov	r3, r7
 8014c5c:	4628      	mov	r0, r5
 8014c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014c62:	f000 b817 	b.w	8014c94 <_write_r>

08014c66 <__sseek>:
 8014c66:	b510      	push	{r4, lr}
 8014c68:	460c      	mov	r4, r1
 8014c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c6e:	f000 f855 	bl	8014d1c <_lseek_r>
 8014c72:	1c43      	adds	r3, r0, #1
 8014c74:	89a3      	ldrh	r3, [r4, #12]
 8014c76:	bf15      	itete	ne
 8014c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8014c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8014c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8014c82:	81a3      	strheq	r3, [r4, #12]
 8014c84:	bf18      	it	ne
 8014c86:	81a3      	strhne	r3, [r4, #12]
 8014c88:	bd10      	pop	{r4, pc}

08014c8a <__sclose>:
 8014c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014c8e:	f000 b813 	b.w	8014cb8 <_close_r>
	...

08014c94 <_write_r>:
 8014c94:	b538      	push	{r3, r4, r5, lr}
 8014c96:	4d07      	ldr	r5, [pc, #28]	; (8014cb4 <_write_r+0x20>)
 8014c98:	4604      	mov	r4, r0
 8014c9a:	4608      	mov	r0, r1
 8014c9c:	4611      	mov	r1, r2
 8014c9e:	2200      	movs	r2, #0
 8014ca0:	602a      	str	r2, [r5, #0]
 8014ca2:	461a      	mov	r2, r3
 8014ca4:	f7ed f8a5 	bl	8001df2 <_write>
 8014ca8:	1c43      	adds	r3, r0, #1
 8014caa:	d102      	bne.n	8014cb2 <_write_r+0x1e>
 8014cac:	682b      	ldr	r3, [r5, #0]
 8014cae:	b103      	cbz	r3, 8014cb2 <_write_r+0x1e>
 8014cb0:	6023      	str	r3, [r4, #0]
 8014cb2:	bd38      	pop	{r3, r4, r5, pc}
 8014cb4:	20002774 	.word	0x20002774

08014cb8 <_close_r>:
 8014cb8:	b538      	push	{r3, r4, r5, lr}
 8014cba:	4d06      	ldr	r5, [pc, #24]	; (8014cd4 <_close_r+0x1c>)
 8014cbc:	2300      	movs	r3, #0
 8014cbe:	4604      	mov	r4, r0
 8014cc0:	4608      	mov	r0, r1
 8014cc2:	602b      	str	r3, [r5, #0]
 8014cc4:	f7ed f8b1 	bl	8001e2a <_close>
 8014cc8:	1c43      	adds	r3, r0, #1
 8014cca:	d102      	bne.n	8014cd2 <_close_r+0x1a>
 8014ccc:	682b      	ldr	r3, [r5, #0]
 8014cce:	b103      	cbz	r3, 8014cd2 <_close_r+0x1a>
 8014cd0:	6023      	str	r3, [r4, #0]
 8014cd2:	bd38      	pop	{r3, r4, r5, pc}
 8014cd4:	20002774 	.word	0x20002774

08014cd8 <_fstat_r>:
 8014cd8:	b538      	push	{r3, r4, r5, lr}
 8014cda:	4d07      	ldr	r5, [pc, #28]	; (8014cf8 <_fstat_r+0x20>)
 8014cdc:	2300      	movs	r3, #0
 8014cde:	4604      	mov	r4, r0
 8014ce0:	4608      	mov	r0, r1
 8014ce2:	4611      	mov	r1, r2
 8014ce4:	602b      	str	r3, [r5, #0]
 8014ce6:	f7ed f8ac 	bl	8001e42 <_fstat>
 8014cea:	1c43      	adds	r3, r0, #1
 8014cec:	d102      	bne.n	8014cf4 <_fstat_r+0x1c>
 8014cee:	682b      	ldr	r3, [r5, #0]
 8014cf0:	b103      	cbz	r3, 8014cf4 <_fstat_r+0x1c>
 8014cf2:	6023      	str	r3, [r4, #0]
 8014cf4:	bd38      	pop	{r3, r4, r5, pc}
 8014cf6:	bf00      	nop
 8014cf8:	20002774 	.word	0x20002774

08014cfc <_isatty_r>:
 8014cfc:	b538      	push	{r3, r4, r5, lr}
 8014cfe:	4d06      	ldr	r5, [pc, #24]	; (8014d18 <_isatty_r+0x1c>)
 8014d00:	2300      	movs	r3, #0
 8014d02:	4604      	mov	r4, r0
 8014d04:	4608      	mov	r0, r1
 8014d06:	602b      	str	r3, [r5, #0]
 8014d08:	f7ed f8ab 	bl	8001e62 <_isatty>
 8014d0c:	1c43      	adds	r3, r0, #1
 8014d0e:	d102      	bne.n	8014d16 <_isatty_r+0x1a>
 8014d10:	682b      	ldr	r3, [r5, #0]
 8014d12:	b103      	cbz	r3, 8014d16 <_isatty_r+0x1a>
 8014d14:	6023      	str	r3, [r4, #0]
 8014d16:	bd38      	pop	{r3, r4, r5, pc}
 8014d18:	20002774 	.word	0x20002774

08014d1c <_lseek_r>:
 8014d1c:	b538      	push	{r3, r4, r5, lr}
 8014d1e:	4d07      	ldr	r5, [pc, #28]	; (8014d3c <_lseek_r+0x20>)
 8014d20:	4604      	mov	r4, r0
 8014d22:	4608      	mov	r0, r1
 8014d24:	4611      	mov	r1, r2
 8014d26:	2200      	movs	r2, #0
 8014d28:	602a      	str	r2, [r5, #0]
 8014d2a:	461a      	mov	r2, r3
 8014d2c:	f7ed f8a4 	bl	8001e78 <_lseek>
 8014d30:	1c43      	adds	r3, r0, #1
 8014d32:	d102      	bne.n	8014d3a <_lseek_r+0x1e>
 8014d34:	682b      	ldr	r3, [r5, #0]
 8014d36:	b103      	cbz	r3, 8014d3a <_lseek_r+0x1e>
 8014d38:	6023      	str	r3, [r4, #0]
 8014d3a:	bd38      	pop	{r3, r4, r5, pc}
 8014d3c:	20002774 	.word	0x20002774

08014d40 <_read_r>:
 8014d40:	b538      	push	{r3, r4, r5, lr}
 8014d42:	4d07      	ldr	r5, [pc, #28]	; (8014d60 <_read_r+0x20>)
 8014d44:	4604      	mov	r4, r0
 8014d46:	4608      	mov	r0, r1
 8014d48:	4611      	mov	r1, r2
 8014d4a:	2200      	movs	r2, #0
 8014d4c:	602a      	str	r2, [r5, #0]
 8014d4e:	461a      	mov	r2, r3
 8014d50:	f7ed f832 	bl	8001db8 <_read>
 8014d54:	1c43      	adds	r3, r0, #1
 8014d56:	d102      	bne.n	8014d5e <_read_r+0x1e>
 8014d58:	682b      	ldr	r3, [r5, #0]
 8014d5a:	b103      	cbz	r3, 8014d5e <_read_r+0x1e>
 8014d5c:	6023      	str	r3, [r4, #0]
 8014d5e:	bd38      	pop	{r3, r4, r5, pc}
 8014d60:	20002774 	.word	0x20002774

08014d64 <_init>:
 8014d64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d66:	bf00      	nop
 8014d68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d6a:	bc08      	pop	{r3}
 8014d6c:	469e      	mov	lr, r3
 8014d6e:	4770      	bx	lr

08014d70 <_fini>:
 8014d70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d72:	bf00      	nop
 8014d74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8014d76:	bc08      	pop	{r3}
 8014d78:	469e      	mov	lr, r3
 8014d7a:	4770      	bx	lr
